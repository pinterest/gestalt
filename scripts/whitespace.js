#!/usr/bin/env node
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable gestalt/only-valid-tokens */

/* eslint-env node */
/* eslint no-console:0 */

const PRELUDE = `/*
This file was generated by running

  $ ./scripts/whitespace.js > packages/gestalt/src/boxWhitespace.css

*/`;

const SCALE_LENGTH = 16;
const SCALE = new Array(SCALE_LENGTH).fill().map((_, i) => i + 1);

// --

const space = (n) =>
  n === 0 ? 'var(--space-0)' : `var(--space-${n < 0 ? `negative${n}` : `${n}`}00)`;
const block = (str) =>
  [
    '{',
    str
      .split('\n')
      .map((line) => (line.length === 0 ? '' : `  ${line}`))
      .join('\n'),
    '}',
  ].join('\n');

const Declaration = ({ property, value }) => `${property}: ${value};`;

const Ruleset = ({ selector, declarations }) =>
  `${selector} ${block(
    Object.keys(declarations)
      .map((property) => Declaration({ property, value: declarations[property] }))
      .join('\n'),
  )}`;

const AtRule = ({ query, rulesets }) =>
  `@media (${query}) ${block(rulesets.map(Ruleset).join('\n\n'))}`;

const Statement = (obj) => {
  switch (obj.kind) {
    case 'ruleset':
      return Ruleset(obj);
    case 'atrule':
      return AtRule({ query: obj.query, rulesets: obj.rulesets });
    default:
      throw new Error(`Unexpected statement kind ${obj.kind}`);
  }
};

const Stylesheet = (statements) => [PRELUDE].concat(statements.map(Statement)).join('\n\n');

// --

const ruleset = (selector, declarations) => ({
  kind: 'ruleset',
  selector,
  declarations,
});

const atrule = (query, rulesets) => ({
  kind: 'atrule',
  query,
  rulesets,
});

const capitalize = (str) => `${str.substring(0, 1).toUpperCase()}${str.substring(1, str.length)}`;
const classname = (namespace, className) =>
  namespace ? `.${namespace}${capitalize(className)}` : `.${className}`;

const rules = (i, prefix) => [
  ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginStart${i}`)}`, {
    'margin-left': space(i),
  }),
  ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginEnd${i}`)}`, {
    'margin-right': space(i),
  }),
  ruleset(`html[dir="rtl"] ${classname(prefix, `marginStart${i}`)}`, {
    'margin-right': space(i),
  }),
  ruleset(`html[dir="rtl"] ${classname(prefix, `marginEnd${i}`)}`, {
    'margin-left': space(i),
  }),
  ...(i !== 0
    ? [
        ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginStartN${i}`)}`, {
          'margin-left': space(-i),
        }),
        ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginEndN${i}`)}`, {
          'margin-right': space(-i),
        }),
        ruleset(`html[dir="rtl"] ${classname(prefix, `marginStartN${i}`)}`, {
          'margin-right': space(-i),
        }),
        ruleset(`html[dir="rtl"] ${classname(prefix, `marginEndN${i}`)}`, {
          'margin-left': space(-i),
        }),
      ]
    : []),
  ruleset(classname(prefix, `marginTop${i}`), {
    'margin-top': space(i),
  }),
  ruleset(classname(prefix, `marginBottom${i}`), {
    'margin-bottom': space(i),
  }),
  ...(i !== 0
    ? [
        ruleset(classname(prefix, `marginTopN${i}`), {
          'margin-top': space(-i),
        }),
        ruleset(classname(prefix, `marginBottomN${i}`), {
          'margin-bottom': space(-i),
        }),
      ]
    : []),
  ruleset(classname(prefix, `paddingY${i}`), {
    'padding-bottom': space(i),
    'padding-top': space(i),
  }),

  ruleset(classname(prefix, `paddingX${i}`), {
    'padding-left': space(i),
    'padding-right': space(i),
  }),
];

const autoRules = (prefix) => [
  ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginStartAuto`)}`, {
    'margin-left': 'auto',
  }),
  ruleset(`html:not([dir="rtl"]) ${classname(prefix, `marginEndAuto`)}`, {
    'margin-right': 'auto',
  }),
  ruleset(`html[dir="rtl"] ${classname(prefix, `marginStartAuto`)}`, {
    'margin-right': 'auto',
  }),
  ruleset(`html[dir="rtl"] ${classname(prefix, `marginEndAuto`)}`, {
    'margin-left': 'auto',
  }),
  ruleset(classname(prefix, `marginTopAuto`), {
    'margin-top': 'auto',
  }),
  ruleset(classname(prefix, `marginBottomAuto`), {
    'margin-bottom': 'auto',
  }),
];

console.log(
  Stylesheet([
    // Add margin/padding for auto + spacing -16 through 16 (keep non-@media first,
    // followed by sequential sm/md/lg @media rules to allow proper @media overriding)
    ...autoRules(),
    ...[0, ...SCALE].reduce((arr, i) => arr.concat(rules(i)), []),

    atrule('--g-sm', autoRules('sm')),
    atrule(
      '--g-sm',
      [0, ...SCALE].reduce((arr, i) => arr.concat(rules(i, 'sm')), []),
    ),

    atrule('--g-md', autoRules('md')),
    atrule(
      '--g-md',
      [0, ...SCALE].reduce((arr, i) => arr.concat(rules(i, 'md')), []),
    ),

    atrule('--g-lg', autoRules('lg')),
    atrule(
      '--g-lg',
      [0, ...SCALE].reduce((arr, i) => arr.concat(rules(i, 'lg')), []),
    ),
  ]),
);
