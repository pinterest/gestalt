#!/usr/bin/env node

/* eslint-env node */
/* eslint no-console:0 */

const PRELUDE = `/*
This file was generated by running

  $ ./scripts/flex.js > packages/gestalt/src/Flex.css

*/`;

const BOINT_SIZE_PX = 4;
const SCALE_LENGTH = 12;
const SCALE = new Array(SCALE_LENGTH).fill().map((_, i) => i + 1);

// --

const bt = (n) => `calc(var(--g-boint) * ${n} / 2)`;
const block = (str) =>
  [
    '{',
    str
      .split('\n')
      .map((line) => (line.length === 0 ? '' : `  ${line}`))
      .join('\n'),
    '}',
  ].join('\n');

const Declaration = ({ property, value }) => `${property}: ${value};`;

const Ruleset = ({ selector, declarations }) =>
  `${selector} ${block(
    Object.keys(declarations)
      .map((property) => Declaration({ property, value: declarations[property] }))
      .join('\n'),
  )}`;

const Stylesheet = (statements) => [PRELUDE].concat(statements.map(Ruleset)).join('\n\n');

// --

const ruleset = (selector, declarations) => ({
  selector,
  declarations,
});

const rules = (i) => [
  // Negative margins on parents
  ruleset(`.columnGap${i}`, {
    'margin-bottom': `${bt(-i)}`,
    'margin-top': `${bt(-i)}`,
  }),
  // Gap margins on children
  ruleset(`.columnGap${i} > .FlexItem`, {
    'margin-bottom': bt(i),
    'margin-top': bt(i),
  }),

  // Negative margins on parents
  ruleset(`.rowGap${i}`, {
    'margin-left': `${bt(-i)}`,
    'margin-right': `${bt(-i)}`,
  }),
  // Gap margins on children
  ruleset(`.rowGap${i} > .FlexItem`, {
    'margin-left': bt(i),
    'margin-right': bt(i),
  }),
];

console.log(
  Stylesheet([
    ruleset(':root', {
      '--g-boint': `${BOINT_SIZE_PX}px`,
    }),

    ruleset('.Flex', {
      display: 'flex',
    }),

    // Establishing class name for import in FlexItem.js
    ruleset('.FlexItem', {
      display: 'block', // Basically a no-op, just appeasing the lint rule about empty rulesets
    }),

    // Add rules for boints 0 through SCALE_LENGTH
    ...[0, ...SCALE].reduce((arr, i) => arr.concat(rules(i)), []),
  ]),
);
