// @flow strict
import { type Node } from 'react';
import AccessibilitySection from '../../docs-components/AccessibilitySection.js';
import docGen, { type DocGen } from '../../docs-components/docgen.js';
import GeneratedPropTable from '../../docs-components/GeneratedPropTable.js';
import LocalizationSection from '../../docs-components/LocalizationSection.js';
import MainSection from '../../docs-components/MainSection.js';
import Page from '../../docs-components/Page.js';
import PageHeader from '../../docs-components/PageHeader.js';
import QualityChecklist from '../../docs-components/QualityChecklist.js';
import SandpackExample from '../../docs-components/SandpackExample.js';
import bareSlimBannerExample from '../../examples/slimbanner/bareSlimBannerExample.js';
import compactSlimBannerExample from '../../examples/slimbanner/compactSlimBannerExample.js';
import dismissableExample from '../../examples/slimbanner/dismissableExample.js';
import dontCombineWithCallout from '../../examples/slimbanner/dontCombineWithCallout.js';
import dontUseAsCallout from '../../examples/slimbanner/dontUseAsCallout.js';
import dontUseAsToast from '../../examples/slimbanner/dontUseAsToast.js';
import dontUseForDenseInterfaces from '../../examples/slimbanner/dontUseForDenseInterfaces.js';
import localizationLabels from '../../examples/slimbanner/localizationLabels.js';
import main from '../../examples/slimbanner/main.js';
import messagePropExample from '../../examples/slimbanner/messagePropExample.js';
import oneSlimBannerPerSection from '../../examples/slimbanner/oneSlimBannerPerSection.js';
import placeNearMostRelatedElement from '../../examples/slimbanner/placeNearMostRelatedElement.js';
import primaryActionExample from '../../examples/slimbanner/primaryActionExample.js';
import responsiveExample from '../../examples/slimbanner/responsiveExample.js';
import systemMessagesExample from '../../examples/slimbanner/systemMessagesExample.js';
import variantError from '../../examples/slimbanner/variantError.js';
import variantInfo from '../../examples/slimbanner/variantInfo.js';
import variantNeutral from '../../examples/slimbanner/variantNeutral.js';
import variantRecommendation from '../../examples/slimbanner/variantRecommendation.js';
import variantSuccess from '../../examples/slimbanner/variantSuccess.js';
import variantWarning from '../../examples/slimbanner/variantWarning.js';

export default function SlimBannerPage({ generatedDocGen }: { generatedDocGen: DocGen }): Node {
  return (
    <Page title={generatedDocGen?.displayName}>
      <PageHeader name={generatedDocGen?.displayName} description={generatedDocGen?.description}>
        <SandpackExample
          code={main}
          name={`Main ${generatedDocGen?.displayName} example`}
          hideEditor
          previewHeight={200}
        />
      </PageHeader>

      <GeneratedPropTable generatedDocGen={generatedDocGen} />

      <MainSection name="Usage guidelines">
        <MainSection.Subsection columns={2}>
          <MainSection.Card
            cardSize="md"
            type="do"
            title="When to use"
            description={`
- When displaying section-level information to the user.
- When providing persistent messaging/guidance for specific elements or areas within a surface or page.
- When providing messaging/guidance on information-dense screens where there is limited space.
        `}
          />
          <MainSection.Card
            cardSize="md"
            type="don't"
            title="When not to use"
            description={`
- When displaying information that pertains to the whole page and is of the highest priority. Use [Callout](/web/callout) instead.
- When interacting with the SlimBanner is required for the user to proceed with a task or flow. Use [Modal](/web/modal) instead.
- When describing the function of an interactive element that doesn’t have a text label. Use [Tooltip](/web/tooltip) instead.
- When calling a users attention to a feature for the first time. Use [Popover](/web/popover) instead.
        `}
          />
        </MainSection.Subsection>
      </MainSection>

      <MainSection name="Best practices">
        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description="Use for messages generated by the system that stay persistent on a surface"
            sandpackExample={
              <SandpackExample
                name="Do - Use for system messages"
                code={systemMessagesExample}
                hideEditor
                layout="column"
                previewHeight={200}
              />
            }
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Use for messages generated as an immediate response to user interaction. Instead, use [Toast]/toast) for ephemeral messages, and [Modal](/web/modal) for a message that remains on the screen until it’s dismissed by a user.`}
            sandpackExample={
              <SandpackExample
                name="Don't - Use SlimBanner as immediate response to user interaction"
                code={dontUseAsToast}
                hideEditor
                hideControls
                layout="column"
                previewHeight={200}
              />
            }
          />
        </MainSection.Subsection>

        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description="Place SlimBanner near elements of a section that it most relates to"
            sandpackExample={
              <SandpackExample
                name="Do - Place SlimBanner near most related element"
                code={placeNearMostRelatedElement}
                hideEditor
                layout="column"
                previewHeight={760}
              />
            }
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Place SlimBanner at the top of a page and use them for highest-priority messaging. Use [Callout](/web/callout) instead`}
            sandpackExample={
              <SandpackExample
                name="Don't - Use SlimBanner for highest-priority messaging"
                code={dontUseAsCallout}
                hideEditor
                hideControls
                layout="column"
                previewHeight={200}
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description={`Use "bare" SlimBanners for dense interfaces where space is an issue.`}
            sandpackExample={
              <SandpackExample
                name="Do - Use 'bare' SlimBanners for dense interfaces"
                code={bareSlimBannerExample}
                hideEditor
                layout="column"
                previewHeight={404}
              />
            }
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Use a regular SlimBanner with a background for dense interfaces where space is an issue.`}
            sandpackExample={
              <SandpackExample
                name="Don't - Use a regular SlimBanner for dense interfaces"
                code={dontUseForDenseInterfaces}
                hideEditor
                hideControls
                layout="column"
                previewHeight={432}
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection columns={1}>
          <MainSection.Card
            cardSize="lg"
            type="do"
            description="Strive for using one SlimBanner per section instead of stacking. If SlimBanner must stack, errors and warnings take precedence."
            sandpackExample={
              <SandpackExample
                name="Do - Strive for using one SlimBanner per section instead of stacking"
                code={oneSlimBannerPerSection}
                hideEditor
                layout="column"
                previewHeight={200}
              />
            }
          />
          <MainSection.Card
            cardSize="lg"
            type="don't"
            description={`
Combine SlimBanners with other components like [Callouts](/web/callout) or [Upsells](/web/upsell).`}
            sandpackExample={
              <SandpackExample
                name="Don't - Combine SlimBanners with Callouts or Upsells"
                code={dontCombineWithCallout}
                hideEditor
                hideControls
                layout="column"
                previewHeight={440}
              />
            }
          />
        </MainSection.Subsection>
      </MainSection>

      <AccessibilitySection name={generatedDocGen?.displayName}>
        <MainSection.Subsection
          description={`\`iconAccessibilityLabel\` requires a short, descriptive label for screen readers. This label should communicate the intent of the icon, such as "Success", “Error”, “Info” or “Warning”. Also, if using \`dismissButton\` or \`primaryAction\`, their respective \`accessibilityLabel\`s must be used. All labels should be localized.`}
          title="Labels"
        />
      </AccessibilitySection>

      <LocalizationSection
        code={localizationLabels}
        name={generatedDocGen?.displayName}
        notes={`Note that \`dismissButton.accessibilityLabel\` and \`iconAccessibilityLabel\` are optional as DefaultLabelProvider provides default strings. Use custom labels if they need to be more specific.`}
      />

      <MainSection name="Variants">
        <MainSection.Subsection
          description={`Neutral SlimBanners are intended for Pinner interfaces where Pins and Boards take precedent or where we want to limit the use of color in the design.
`}
          title="Neutral"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Neutral SlimBanner example"
                code={variantNeutral}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description="Info SlimBanners communicate helpful messages or guidance to users about a feature or section."
          title="Info"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample name="Info SlimBanner example" code={variantInfo} layout="column" />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description="Recommendation SlimBanners inform people of quick things they can do to improve their experience."
          title="Recommendation"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Recommendation SlimBanner example"
                code={variantRecommendation}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description="Success SlimBanners communicate confirmation regarding an action within a larger flow."
          title="Success"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Success SlimBanner example"
                code={variantSuccess}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description="Warning SlimBanners communicate cautionary messages to users. The SlimBanner should provide clear guidance on how to correct an issue and/or learn more about it. This is done via a link inside of the banner, or clear actions in the section that the banner refers to."
          title="Warning"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Warning SlimBanner example"
                code={variantWarning}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description={`Error SlimBanners inform users of problems that require immediate action to correct. Further actions on the page might be blocked if users don't correct the problems. The SlimBanner should also provide clear guidance on how to correct the issue and/or learn more about it. This is done via a link inside of the banner, or clear actions in the section that the banner refers to.`}
          title="Error"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Error SlimBanner example"
                code={variantError}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description="For dense interfaces and placement inline, next to blocks of text, set SlimBanner to its compact type: “infoBare”, “successBare”, “warningBare”, “errorBare”, “recommendationBare“."
          title="Compact"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Compact SlimBanner example"
                code={compactSlimBannerExample}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>
        <MainSection.Subsection
          description={`
The \`message\` prop accepts either a string or [Text](/web/text). Use a string for simple messages without any visual style. SlimBanner will handle the message style and adherence to design guidelines. If a message with more complex style is required, such as bold text or inline links, use Text to wrap your message with any additional Text or Link usages contained within.

The SlimBanner \`message\` string can be complemented with a \`helperLink\`. When passing a Text component, \`helperLink\` isn't rendered to prevent unnecessary visual load.

Due to localization constraints, the contents of \`message\` and \`helperLink\` cannot belong to the same sentence. They must be independent sentences separated by a period. Don't attempt to construct a compound sentence using \`message\` and \`helperLink\`.
`}
          title="Message"
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="SlimBanner 'message' prop example"
                code={messagePropExample}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>

        <MainSection.Subsection
          title="Primary action"
          description={`
SlimBanners can have a primary action. This action can be a [Link](/web/link), by specifying the \`href\` property, or a [Button](/web/button), when no \`href\` is supplied.

SlimBanner actions with link interaction can be paired with GlobalEventsHandlerProvider. See [GlobalEventsHandlerProvider](/web/utilities/globaleventshandlerprovider#Link-handlers) to learn more about link navigation.

For example, “Learn more” may link to a separate documentation site, while “Apply now” could be a button that opens a [Modal](/web/modal) with an application flow. Be sure to localize the labels of the actions.

If needed, actions can become disabled after clicking by setting \`disabled: true\` in the action data.

Note that actions are not available on compact ("___Bare" type) SlimBanners.
          `}
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="SlimBanner primary action example"
                code={primaryActionExample}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>

        <MainSection.Subsection
          title="Dismissible"
          description={`
          \`dismissButton\` can be used when SlimBanner doesn't indicate a persistent state. This will most commonly be used in \`type="info"\` SlimBanners.

        Don't use dismiss buttons in the following cases:
        - There is a persistent account or page status that the user must address.
        - The user must access SlimBanner's information again in order to perform a task.

        Note that compact ("___Bare" type) SlimBanners are not dismissible.
          `}
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                name="Dismissable SlimBanner example"
                code={dismissableExample}
                layout="column"
              />
            }
          />
        </MainSection.Subsection>

        <MainSection.Subsection
          title="Responsive"
          description={`
SlimBanner is responsive to different [viewport breakpoints](/foundations/screen_sizes#Web-(px)).

Therefore, SlimBanner behavior relies on the window size and requires SlimBanner to be used on a full-window width to correctly respond to different breakpoints.

SlimBanner doesn't depend on DeviceTypeProvider to display a mobile view; instead, it adjusts to the smallest viewport breakpoint. The example below forces a mobile viewport width to render SlimBanner at that particular viewport.
          `}
        >
          <MainSection.Card
            cardSize="lg"
            sandpackExample={
              <SandpackExample
                code={responsiveExample}
                name="SlimBanner responsive example"
                layout="mobileRow"
              />
            }
          />
        </MainSection.Subsection>
      </MainSection>

      <MainSection name="Writing">
        <MainSection.Subsection columns={2}>
          <MainSection.Card
            cardSize="md"
            type="do"
            description={`
- Use succinct and scannable language that clearly conveys information to the user without being overly clever or technical
- Consider internationalization and how other languages may be constrained
`}
          />
          <MainSection.Card
            cardSize="md"
            type="don't"
            description={`
- Write messages that are wordy and take up a lot of space
- For warnings and errors, exclamation points if the tone isn’t celebratory, for example: “Update your account!”
`}
          />
        </MainSection.Subsection>
      </MainSection>

      <QualityChecklist component={generatedDocGen?.displayName} />

      <MainSection name="Related">
        <MainSection.Subsection
          description={`
**[Upsell](/web/upsell)**
An Upsell is used to market new features or to encourage a user to try recommendations.

**[Callout](/web/callout)**
Callouts are used at the top-most level of a page to communicate highest-priority information that applies to the entire page or surface. Callouts can be dismissed and are also actionable.

**[Toast](/web/toast)**
Toast provides feedback shortly after a user interaction, like a confirmation that appears when a Pin has been saved. Unlike Upsells and SlimBanners, toasts overlay Page content. They also automatically disappear after a certain amount of time without being dismissed by the user.

**[Tooltip](/web/tooltip)**
Tooltip provides helpful information regarding an interactive UI element, typically an IconButton. It is displayed on hover of a UI element, and disappears on mouse out.
    `}
        />
      </MainSection>
    </Page>
  );
}

export async function getServerSideProps(): Promise<{ props: { generatedDocGen: DocGen } }> {
  return {
    props: { generatedDocGen: await docGen('SlimBanner') },
  };
}
