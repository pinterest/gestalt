import React__default, { forwardRef, createElement, PureComponent, useState, useRef, useEffect, Component, Children, Fragment } from 'react';
import ReactDatePicker, { registerLocale } from 'react-datepicker';
import classnames from 'classnames';
import PropTypes from 'prop-types';
import 'react-dom';

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _typeof$1(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof$1=function _typeof(obj){return typeof obj;};}else {_typeof$1=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof$1(obj);}function _classCallCheck$1(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties$1(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass$1(Constructor,protoProps,staticProps){if(protoProps)_defineProperties$1(Constructor.prototype,protoProps);if(staticProps)_defineProperties$1(Constructor,staticProps);return Constructor;}function _defineProperty$1(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else {obj[key]=value;}return obj;}function _extends$1(){_extends$1=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends$1.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty$1(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else {ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _inherits$1(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf$1(subClass,superClass);}function _getPrototypeOf$1(o){_getPrototypeOf$1=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf$1(o);}function _setPrototypeOf$1(o,p){_setPrototypeOf$1=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf$1(o,p);}function _isNativeReflectConstruct$1(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return {};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _objectWithoutProperties(source,excluded){if(source==null)return {};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _assertThisInitialized$1(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _possibleConstructorReturn$1(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized$1(self);}function _createSuper$1(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct$1();return function(){var Super=_getPrototypeOf$1(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf$1(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else {result=Super.apply(this,arguments);}return _possibleConstructorReturn$1(this,result);};}function _slicedToArray$1(arr,i){return _arrayWithHoles$1(arr)||_iterableToArrayLimit$1(arr,i)||_unsupportedIterableToArray$1(arr,i)||_nonIterableRest$1();}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray$1(arr)||_nonIterableSpread();}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray$1(arr);}function _arrayWithHoles$1(arr){if(Array.isArray(arr))return arr;}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&Symbol.iterator in Object(iter))return Array.from(iter);}function _iterableToArrayLimit$1(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _unsupportedIterableToArray$1(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray$1(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray$1(o,minLen);}function _arrayLikeToArray$1(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _nonIterableRest$1(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var styles={"box":"zI7 iyn Hsu","xsDisplayNone":"ESm","xsDisplayFlex":"Jea","xsDisplayBlock":"oy8","xsDisplayInlineBlock":"FNs","xsDisplayVisuallyHidden":"NVN","smDisplayNone":"_As","smDisplayFlex":"d5Q","smDisplayBlock":"BFv","smDisplayInlineBlock":"_Jd","smDisplayVisuallyHidden":"Afg","mdDisplayNone":"TJs","mdDisplayFlex":"i_c","mdDisplayBlock":"PrF","mdDisplayInlineBlock":"Frz","mdDisplayVisuallyHidden":"MPk","lgDisplayNone":"jZa","lgDisplayFlex":"GDP","lgDisplayBlock":"V1t","lgDisplayInlineBlock":"yiw","lgDisplayVisuallyHidden":"GOd","xsDirectionRow":"hs0","xsDirectionColumn":"jzS","smDirectionRow":"ccF","smDirectionColumn":"FDl","mdDirectionRow":"T9f","mdDirectionColumn":"hqI","lgDirectionRow":"IR2","lgDirectionColumn":"e8G","xsCol0":"YPQ","xsCol1":"d5S wA7","xsCol2":"dSH sxy","xsCol3":"Goa xEW","xsCol4":"cz_ MRE","xsCol5":"gPb tYG","xsCol6":"GCs UHc","xsCol7":"aoh ojd","xsCol8":"wXu PX-","xsCol9":"z-m Qfr","xsCol10":"quJ vdP","xsCol11":"Q35 kaP","xsCol12":"xcv L4E","smCol0":"NYp","smCol1":"pMp Djc","smCol2":"fut tar","smCol3":"Jra QS3","smCol4":"nUE V_L","smCol5":"QM0 kh1","smCol6":"eU_ Fue","smCol7":"YhO cgB","smCol8":"xPk DkM","smCol9":"rDN AXh","smCol10":"Pd1 UtM","smCol11":"fC1 Wyy","smCol12":"NUf dXC","mdCol0":"_8v","mdCol1":"tJY U8q","mdCol2":"dok shx","mdCol3":"HUu EGm","mdCol4":"cXK XMp","mdCol5":"ad9 H2Q","mdCol6":"BD5 HHc","mdCol7":"bi8 JWr","mdCol8":"i_s h5B","mdCol9":"gog Eeb","mdCol10":"fEC TIo","mdCol11":"M5b rPE","mdCol12":"IRj QwK","lgCol0":"_Hm","lgCol1":"dTO VSa","lgCol2":"NCg aml","lgCol3":"z5O huk","lgCol4":"n-N Vnj","lgCol5":"M7z KgZ","lgCol6":"P6z c2A","lgCol7":"qTG IGd","lgCol8":"rtP hMf","lgCol9":"y22 swh","lgCol10":"xQy Hs0","lgCol11":"kM1 YXE","lgCol12":"AiQ XTp","opacity0":"BfI","opacity01":"k39","opacity02":"a8l","opacity03":"BXM","opacity04":"ZV0","opacity05":"yD6","opacity06":"zqT","opacity07":"RfI","opacity08":"tM5","opacity09":"RBE","opacity1":"ZZS"};var borders={"border":"KI_","borderColorGray":"tk0","borderColorDarkGray":"nG5","borderColorLightGray":"LJB","borderColorRed":"xbp","borderColorLightGrayHovered":"dPY","borderColorLightGrayDisabled":"Fvo","borderTop":"uNu","borderRight":"w7l","borderBottom":"vCE","borderLeft":"mQC","circle":"INd","pill":"Lfz","rounding0":"eEj","rounding1":"Pja","rounding2":"DUt","rounding3":"s2n","rounding4":"ho-","rounding5":"PcK","rounding6":"fev","rounding7":"v_3","rounding8":"OVX","noBorder":"adn","sizeSm":"daS","sizeLg":"XgI","solid":"Pw5"};var colors={"red":"lZJ","redBg":"Jrn","white":"erh","whiteBg":"qJc","lightGray":"odN","lightGrayBg":"gpV","gray":"B9u","grayBg":"gfP","darkGray":"pBj","darkGrayBg":"BsF","green":"yXb","greenBg":"VFV","pine":"amR","pineBg":"Pym","olive":"mwW","oliveBg":"b5Z","blue":"mi-","blueBg":"rTt","navy":"xxo","navyBg":"hz-","midnight":"Ime","midnightBg":"E14","purple":"NL9","purpleBg":"vfO","orchid":"myR","orchidBg":"f-y","eggplant":"oKX","eggplantBg":"bPM","maroon":"ska","maroonBg":"Z_T","watermelon":"Wo3","watermelonBg":"iRv","orange":"GoP","orangeBg":"Lgc","transparentBg":"YbY","transparentDarkGray":"wcy","transparentDarkGrayBg":"prG","transparentWhiteBg":"u97","lightWashBg":"eZS","darkWashBg":"hle"};var layout={"block":"kVc","inline":"goI","inlineBlock":"KhY","table":"zsR","overflowHidden":"sLG","overflowScroll":"xqS","overflowScrollX":"vVc","overflowScrollY":"Cii","overflowAuto":"XbT","fit":"xuU","relative":"XiG","fixed":"_he","absolute":"MIw","sticky":"qiB","top0":"QLY","right0":"p6V","bottom0":"ojN","left0":"Rym","small":"I56","medium":"aZc","large":"xD4","borderBox":"Hsu","contentBox":"jr-","flex":"_O1","smFlex":"pRa","mdFlex":"t6T","lgFlex":"i0q","flexColumn":"qT6","flexWrap":"kzZ","itemsStart":"Fje","itemsEnd":"pP3","itemsCenter":"gjz","itemsBaseline":"Rnj","itemsStretch":"wHp","selfStart":"X0f","selfEnd":"gRy","selfCenter":"Z2K","selfBaseline":"Op6","selfStretch":"Zvs","justifyStart":"rrK","justifyEnd":"jx-","justifyCenter":"mQ8","justifyBetween":"b8T","justifyAround":"Ah0","justifyEvenly":"nt5","contentStart":"yOS","contentEnd":"hwG","contentCenter":"TpD","contentBetween":"bkI","contentAround":"x9O","contentEvenly":"zus","contentStretch":"kBO","flexGrow":"ujU","flexNone":"Eqh","orderFirst":"oTa","orderLast":"nEN","minWidth60":"USg"};var whitespace={"marginStart1":"xvE","marginEnd1":"Rz6","marginStartN1":"F6l","marginEndN1":"k1A","marginTop1":"hDW","marginRight1":"Hb9","marginBottom1":"X6t","marginLeft1":"kMA","marginTopN1":"XBe","marginRightN1":"f03","marginBottomN1":"Uex","marginLeftN1":"uro","paddingY1":"C9q","paddingX1":"Shl","marginStart2":"JME","marginEnd2":"wc1","marginStartN2":"wfr","marginEndN2":"z4_","marginTop2":"hjj","marginRight2":"Gd1","marginBottom2":"VxL","marginLeft2":"n9m","marginTopN2":"CP0","marginRightN2":"d2j","marginBottomN2":"Uxw","marginLeftN2":"VDP","paddingY2":"hA-","paddingX2":"wYR","marginStart3":"Pyg","marginEnd3":"Umk","marginStartN3":"eyO","marginEndN3":"fmw","marginTop3":"Hvp","marginRight3":"ocu","marginBottom3":"snW","marginLeft3":"XTf","marginTopN3":"ck1","marginRightN3":"w-W","marginBottomN3":"Kgo","marginLeftN3":"QMJ","paddingY3":"hUC","paddingX3":"Zr3","marginStart4":"rDA","marginEnd4":"jar","marginStartN4":"qaC","marginEndN4":"vCT","marginTop4":"KO4","marginRight4":"lTs","marginBottom4":"RDc","marginLeft4":"L3z","marginTopN4":"J95","marginRightN4":"Qe1","marginBottomN4":"hes","marginLeftN4":"qwE","paddingY4":"qDf","paddingX4":"fZz","marginStart5":"iD5","marginEnd5":"wzk","marginStartN5":"bvu","marginEndN5":"XQa","marginTop5":"MMr","marginRight5":"R1w","marginBottom5":"kKU","marginLeft5":"vPt","marginTopN5":"jYK","marginRightN5":"kLV","marginBottomN5":"Ahn","marginLeftN5":"Hl7","paddingY5":"Mhr","paddingX5":"l7T","marginStart6":"fte","marginEnd6":"dxm","marginStartN6":"Zgg","marginEndN6":"CjC","marginTop6":"Tte","marginRight6":"I_w","marginBottom6":"PKX","marginLeft6":"fIf","marginTopN6":"joO","marginRightN6":"Kuo","marginBottomN6":"I5z","marginLeftN6":"UOL","paddingY6":"fBv","paddingX6":"QDA","marginStart7":"WC-","marginEnd7":"D4_","marginStartN7":"Y7_","marginEndN7":"l_x","marginTop7":"JcM","marginRight7":"yA9","marginBottom7":"Y-G","marginLeft7":"dax","marginTopN7":"ROS","marginRightN7":"Ifs","marginBottomN7":"A44","marginLeftN7":"r7P","paddingY7":"kli","paddingX7":"hvO","marginStart8":"Vg5","marginEnd8":"kTA","marginStartN8":"n8t","marginEndN8":"ddc","marginTop8":"CDp","marginRight8":"QrW","marginBottom8":"m2F","marginLeft8":"xBE","marginTopN8":"t6x","marginRightN8":"GzA","marginBottomN8":"FBy","marginLeftN8":"NGU","paddingY8":"Lej","paddingX8":"LCN","marginStart9":"Roz","marginEnd9":"Hgb","marginStartN9":"Xke","marginEndN9":"cUu","marginTop9":"vks","marginRight9":"y7W","marginBottom9":"mDD","marginLeft9":"jUv","marginTopN9":"ZG2","marginRightN9":"H15","marginBottomN9":"jCP","marginLeftN9":"sQU","paddingY9":"SMG","paddingX9":"kxF","marginStart10":"Bdr","marginEnd10":"UJS","marginStartN10":"Ylh","marginEndN10":"bNJ","marginTop10":"WbA","marginRight10":"VhO","marginBottom10":"lAM","marginLeft10":"VcB","marginTopN10":"YFA","marginRightN10":"JcX","marginBottomN10":"jyq","marginLeftN10":"r2E","paddingY10":"ZDm","paddingX10":"TwP","marginStart11":"ziA","marginEnd11":"IM6","marginStartN11":"F94","marginEndN11":"fIt","marginTop11":"u3U","marginRight11":"J1A","marginBottom11":"K5L","marginLeft11":"EVV","marginTopN11":"eK4","marginRightN11":"_ES","marginBottomN11":"zkc","marginLeftN11":"dQD","paddingY11":"WGZ","paddingX11":"wi3","marginStart12":"_EQ","marginEnd12":"JFk","marginStartN12":"WL0","marginEndN12":"KRR","marginTop12":"uqM","marginRight12":"jzb","marginBottom12":"fma","marginLeft12":"Tyx","marginTopN12":"ltU","marginRightN12":"ELl","marginBottomN12":"SAt","marginLeftN12":"T9E","paddingY12":"_4T","paddingX12":"oqv","smMarginStart1":"Kv_","smMarginEnd1":"yqk","smMarginStartN1":"Ogs","smMarginEndN1":"HgQ","smMarginTop1":"qql","smMarginRight1":"zVn","smMarginBottom1":"zZt","smMarginLeft1":"Y8f","smMarginTopN1":"MNO","smMarginRightN1":"QQl","smMarginBottomN1":"nJV","smMarginLeftN1":"PvB","smPaddingY1":"Nzy","smPaddingX1":"tuI","smMarginStart2":"oKe","smMarginEnd2":"L7H","smMarginStartN2":"sLc","smMarginEndN2":"MNH","smMarginTop2":"THn","smMarginRight2":"Q12","smMarginBottom2":"PdC","smMarginLeft2":"lNR","smMarginTopN2":"NoR","smMarginRightN2":"yS5","smMarginBottomN2":"xUA","smMarginLeftN2":"iHC","smPaddingY2":"hCD","smPaddingX2":"c-A","smMarginStart3":"c92","smMarginEnd3":"JRt","smMarginStartN3":"y4M","smMarginEndN3":"Wuh","smMarginTop3":"bJD","smMarginRight3":"k2h","smMarginBottom3":"EVE","smMarginLeft3":"Wa2","smMarginTopN3":"_DO","smMarginRightN3":"eQ1","smMarginBottomN3":"aVq","smMarginLeftN3":"H4N","smPaddingY3":"ydS","smPaddingX3":"H0r","smMarginStart4":"J1r","smMarginEnd4":"DRg","smMarginStartN4":"oa0","smMarginEndN4":"sOL","smMarginTop4":"PB_","smMarginRight4":"v_H","smMarginBottom4":"SV2","smMarginLeft4":"dRT","smMarginTopN4":"vOi","smMarginRightN4":"pxb","smMarginBottomN4":"xwY","smMarginLeftN4":"spp","smPaddingY4":"dwY","smPaddingX4":"_VW","smMarginStart5":"WKc","smMarginEnd5":"Mra","smMarginStartN5":"W8s","smMarginEndN5":"Ehr","smMarginTop5":"lek","smMarginRight5":"ypO","smMarginBottom5":"idm","smMarginLeft5":"oPi","smMarginTopN5":"X3B","smMarginRightN5":"FMa","smMarginBottomN5":"P6b","smMarginLeftN5":"HKo","smPaddingY5":"whM","smPaddingX5":"L-L","smMarginStart6":"Uxg","smMarginEnd6":"b9X","smMarginStartN6":"nUU","smMarginEndN6":"mac","smMarginTop6":"Ovc","smMarginRight6":"nRg","smMarginBottom6":"DzC","smMarginLeft6":"WjQ","smMarginTopN6":"IL1","smMarginRightN6":"c6f","smMarginBottomN6":"P5p","smMarginLeftN6":"cyd","smPaddingY6":"gux","smPaddingX6":"qaR","smMarginStart7":"s_b","smMarginEnd7":"K2I","smMarginStartN7":"z9d","smMarginEndN7":"Prp","smMarginTop7":"J9t","smMarginRight7":"yhK","smMarginBottom7":"Ppv","smMarginLeft7":"UpC","smMarginTopN7":"mJQ","smMarginRightN7":"S8O","smMarginBottomN7":"uxh","smMarginLeftN7":"OkY","smPaddingY7":"O8I","smPaddingX7":"wck","smMarginStart8":"FUA","smMarginEnd8":"pNn","smMarginStartN8":"Qo5","smMarginEndN8":"Arx","smMarginTop8":"iqv","smMarginRight8":"ka2","smMarginBottom8":"E0F","smMarginLeft8":"BrS","smMarginTopN8":"kRT","smMarginRightN8":"ME7","smMarginBottomN8":"HmQ","smMarginLeftN8":"t7R","smPaddingY8":"Ger","smPaddingX8":"ynl","smMarginStart9":"u9O","smMarginEnd9":"OTd","smMarginStartN9":"pH8","smMarginEndN9":"IsE","smMarginTop9":"t5d","smMarginRight9":"wUg","smMarginBottom9":"y5U","smMarginLeft9":"UNV","smMarginTopN9":"uz6","smMarginRightN9":"PxX","smMarginBottomN9":"Wwk","smMarginLeftN9":"y0P","smPaddingY9":"_EA","smPaddingX9":"tPb","smMarginStart10":"vwP","smMarginEnd10":"wdO","smMarginStartN10":"Qi0","smMarginEndN10":"SSs","smMarginTop10":"ZE2","smMarginRight10":"l-q","smMarginBottom10":"RTY","smMarginLeft10":"nLH","smMarginTopN10":"FCI","smMarginRightN10":"vGP","smMarginBottomN10":"hpC","smMarginLeftN10":"SlI","smPaddingY10":"hsT","smPaddingX10":"zbx","smMarginStart11":"CoG","smMarginEnd11":"jXh","smMarginStartN11":"rwL","smMarginEndN11":"jb_","smMarginTop11":"i34","smMarginRight11":"A7E","smMarginBottom11":"ngz","smMarginLeft11":"fwp","smMarginTopN11":"e2v","smMarginRightN11":"JU5","smMarginBottomN11":"ZII","smMarginLeftN11":"fYp","smPaddingY11":"HV1","smPaddingX11":"pKp","smMarginStart12":"eCQ","smMarginEnd12":"kbl","smMarginStartN12":"gl9","smMarginEndN12":"V9b","smMarginTop12":"qXr","smMarginRight12":"u03","smMarginBottom12":"J0h","smMarginLeft12":"EYn","smMarginTopN12":"FvJ","smMarginRightN12":"L4s","smMarginBottomN12":"Vfb","smMarginLeftN12":"dJ2","smPaddingY12":"INL","smPaddingX12":"Hmw","mdMarginStart1":"dNW","mdMarginEnd1":"X55","mdMarginStartN1":"PRF","mdMarginEndN1":"rrG","mdMarginTop1":"Ctk","mdMarginRight1":"gih","mdMarginBottom1":"VpK","mdMarginLeft1":"HvT","mdMarginTopN1":"SP3","mdMarginRightN1":"pk2","mdMarginBottomN1":"nty","mdMarginLeftN1":"EUw","mdPaddingY1":"hYR","mdPaddingX1":"Jbl","mdMarginStart2":"l9y","mdMarginEnd2":"n23","mdMarginStartN2":"tiw","mdMarginEndN2":"qxN","mdMarginTop2":"zXr","mdMarginRight2":"vFO","mdMarginBottom2":"HSI","mdMarginLeft2":"T3h","mdMarginTopN2":"DbB","mdMarginRightN2":"Yel","mdMarginBottomN2":"lRW","mdMarginLeftN2":"pDE","mdPaddingY2":"QyJ","mdPaddingX2":"zXR","mdMarginStart3":"sbv","mdMarginEnd3":"wQe","mdMarginStartN3":"l7Q","mdMarginEndN3":"dbu","mdMarginTop3":"zf5","mdMarginRight3":"HUO","mdMarginBottom3":"Imv","mdMarginLeft3":"Q0N","mdMarginTopN3":"Ir5","mdMarginRightN3":"_z0","mdMarginBottomN3":"O5V","mdMarginLeftN3":"GdN","mdPaddingY3":"xTL","mdPaddingX3":"xJA","mdMarginStart4":"c96","mdMarginEnd4":"rp5","mdMarginStartN4":"Nyq","mdMarginEndN4":"DrW","mdMarginTop4":"usG","mdMarginRight4":"XMf","mdMarginBottom4":"YeC","mdMarginLeft4":"VeN","mdMarginTopN4":"WOm","mdMarginRightN4":"hGE","mdMarginBottomN4":"kRc","mdMarginLeftN4":"f9N","mdPaddingY4":"b8i","mdPaddingX4":"dz0","mdMarginStart5":"ngM","mdMarginEnd5":"bho","mdMarginStartN5":"Baz","mdMarginEndN5":"hXs","mdMarginTop5":"j0g","mdMarginRight5":"eot","mdMarginBottom5":"a38","mdMarginLeft5":"smZ","mdMarginTopN5":"kIo","mdMarginRightN5":"FD4","mdMarginBottomN5":"ZYa","mdMarginLeftN5":"bYo","mdPaddingY5":"xgw","mdPaddingX5":"mEU","mdMarginStart6":"bo4","mdMarginEnd6":"zn2","mdMarginStartN6":"utr","mdMarginEndN6":"xeh","mdMarginTop6":"bKb","mdMarginRight6":"T9P","mdMarginBottom6":"fXc","mdMarginLeft6":"y_z","mdMarginTopN6":"_zR","mdMarginRightN6":"Vyo","mdMarginBottomN6":"PDE","mdMarginLeftN6":"vMx","mdPaddingY6":"Iqj","mdPaddingX6":"_X7","mdMarginStart7":"aEO","mdMarginEnd7":"dBK","mdMarginStartN7":"RIN","mdMarginEndN7":"aL4","mdMarginTop7":"iP0","mdMarginRight7":"zNZ","mdMarginBottom7":"BFq","mdMarginLeft7":"fDT","mdMarginTopN7":"M5v","mdMarginRightN7":"yjP","mdMarginBottomN7":"dWF","mdMarginLeftN7":"tDH","mdPaddingY7":"JsH","mdPaddingX7":"ld3","mdMarginStart8":"Bfr","mdMarginEnd8":"sVz","mdMarginStartN8":"KnD","mdMarginEndN8":"FnC","mdMarginTop8":"rdA","mdMarginRight8":"cty","mdMarginBottom8":"XrP","mdMarginLeft8":"hFm","mdMarginTopN8":"zOu","mdMarginRightN8":"Sqb","mdMarginBottomN8":"fBQ","mdMarginLeftN8":"wzL","mdPaddingY8":"EKn","mdPaddingX8":"JYy","mdMarginStart9":"blI","mdMarginEnd9":"egt","mdMarginStartN9":"wWp","mdMarginEndN9":"TVJ","mdMarginTop9":"L4W","mdMarginRight9":"Crl","mdMarginBottom9":"SU5","mdMarginLeft9":"RRQ","mdMarginTopN9":"W2O","mdMarginRightN9":"XJq","mdMarginBottomN9":"Syd","mdMarginLeftN9":"vtM","mdPaddingY9":"K4G","mdPaddingX9":"Hmo","mdMarginStart10":"gA8","mdMarginEnd10":"Q4Z","mdMarginStartN10":"WRW","mdMarginEndN10":"xK-","mdMarginTop10":"PHK","mdMarginRight10":"ay0","mdMarginBottom10":"_jf","mdMarginLeft10":"NWA","mdMarginTopN10":"pdI","mdMarginRightN10":"DSy","mdMarginBottomN10":"zXD","mdMarginLeftN10":"_GW","mdPaddingY10":"Hhi","mdPaddingX10":"FGl","mdMarginStart11":"O3e","mdMarginEnd11":"qZY","mdMarginStartN11":"j88","mdMarginEndN11":"fu-","mdMarginTop11":"HP6","mdMarginRight11":"wAY","mdMarginBottom11":"sfp","mdMarginLeft11":"yDF","mdMarginTopN11":"htC","mdMarginRightN11":"VqQ","mdMarginBottomN11":"B1G","mdMarginLeftN11":"Gno","mdPaddingY11":"OiD","mdPaddingX11":"gRN","mdMarginStart12":"MYx","mdMarginEnd12":"US2","mdMarginStartN12":"JeA","mdMarginEndN12":"h2s","mdMarginTop12":"bHN","mdMarginRight12":"qtC","mdMarginBottom12":"r8B","mdMarginLeft12":"Ujf","mdMarginTopN12":"dm8","mdMarginRightN12":"oue","mdMarginBottomN12":"cCH","mdMarginLeftN12":"g8h","mdPaddingY12":"tfF","mdPaddingX12":"lxJ","lgMarginStart1":"GZc","lgMarginEnd1":"ZWO","lgMarginStartN1":"C4R","lgMarginEndN1":"Mm6","lgMarginTop1":"_7z","lgMarginRight1":"Do-","lgMarginBottom1":"mKZ","lgMarginLeft1":"e2U","lgMarginTopN1":"tWr","lgMarginRightN1":"LUw","lgMarginBottomN1":"rhe","lgMarginLeftN1":"dTY","lgPaddingY1":"NXQ","lgPaddingX1":"UiP","lgMarginStart2":"jW-","lgMarginEnd2":"hHg","lgMarginStartN2":"O6n","lgMarginEndN2":"K3-","lgMarginTop2":"q1b","lgMarginRight2":"qp_","lgMarginBottom2":"anz","lgMarginLeft2":"r3b","lgMarginTopN2":"UHw","lgMarginRightN2":"nsb","lgMarginBottomN2":"teB","lgMarginLeftN2":"Q62","lgPaddingY2":"Qwh","lgPaddingX2":"azY","lgMarginStart3":"bOM","lgMarginEnd3":"NgB","lgMarginStartN3":"InG","lgMarginEndN3":"vJs","lgMarginTop3":"FE_","lgMarginRight3":"R_r","lgMarginBottom3":"DbS","lgMarginLeft3":"QGw","lgMarginTopN3":"Rfg","lgMarginRightN3":"Ic5","lgMarginBottomN3":"QOZ","lgMarginLeftN3":"KJa","lgPaddingY3":"ftd","lgPaddingX3":"MHw","lgMarginStart4":"lUN","lgMarginEnd4":"eCf","lgMarginStartN4":"ajY","lgMarginEndN4":"Ebi","lgMarginTop4":"A9H","lgMarginRight4":"UuS","lgMarginBottom4":"ewa","lgMarginLeft4":"qCE","lgMarginTopN4":"J9s","lgMarginRightN4":"ezp","lgMarginBottomN4":"emj","lgMarginLeftN4":"wQo","lgPaddingY4":"c3l","lgPaddingX4":"B4M","lgMarginStart5":"XcK","lgMarginEnd5":"fH2","lgMarginStartN5":"Yve","lgMarginEndN5":"pMc","lgMarginTop5":"IOs","lgMarginRight5":"ByX","lgMarginBottom5":"XN6","lgMarginLeft5":"YiL","lgMarginTopN5":"Pqr","lgMarginRightN5":"IvR","lgMarginBottomN5":"Gjs","lgMarginLeftN5":"yxs","lgPaddingY5":"w8G","lgPaddingX5":"Dkn","lgMarginStart6":"SXU","lgMarginEnd6":"Zwb","lgMarginStartN6":"Duw","lgMarginEndN6":"Hln","lgMarginTop6":"tWt","lgMarginRight6":"OV-","lgMarginBottom6":"mgl","lgMarginLeft6":"C59","lgMarginTopN6":"eGv","lgMarginRightN6":"ZL4","lgMarginBottomN6":"_Y9","lgMarginLeftN6":"z8s","lgPaddingY6":"Kyn","lgPaddingX6":"em2","lgMarginStart7":"Gao","lgMarginEnd7":"qRO","lgMarginStartN7":"ya6","lgMarginEndN7":"cER","lgMarginTop7":"Ysn","lgMarginRight7":"D9Y","lgMarginBottom7":"O_7","lgMarginLeft7":"CnO","lgMarginTopN7":"iot","lgMarginRightN7":"oX7","lgMarginBottomN7":"H0V","lgMarginLeftN7":"mcV","lgPaddingY7":"RyI","lgPaddingX7":"kPz","lgMarginStart8":"AQe","lgMarginEnd8":"lpW","lgMarginStartN8":"URa","lgMarginEndN8":"cYL","lgMarginTop8":"dFw","lgMarginRight8":"huN","lgMarginBottom8":"dl4","lgMarginLeft8":"ZDH","lgMarginTopN8":"IvC","lgMarginRightN8":"QvB","lgMarginBottomN8":"TAW","lgMarginLeftN8":"Ugj","lgPaddingY8":"Zjh","lgPaddingX8":"Xp9","lgMarginStart9":"J4D","lgMarginEnd9":"dlQ","lgMarginStartN9":"vTn","lgMarginEndN9":"zlU","lgMarginTop9":"ito","lgMarginRight9":"syD","lgMarginBottom9":"zyU","lgMarginLeft9":"fxs","lgMarginTopN9":"Pt2","lgMarginRightN9":"rwa","lgMarginBottomN9":"Whv","lgMarginLeftN9":"RRq","lgPaddingY9":"ODF","lgPaddingX9":"Bto","lgMarginStart10":"AEu","lgMarginEnd10":"_ss","lgMarginStartN10":"N4A","lgMarginEndN10":"XQe","lgMarginTop10":"T9p","lgMarginRight10":"gPV","lgMarginBottom10":"W1m","lgMarginLeft10":"HYB","lgMarginTopN10":"OuJ","lgMarginRightN10":"gRb","lgMarginBottomN10":"_t9","lgMarginLeftN10":"GxJ","lgPaddingY10":"oqL","lgPaddingX10":"adH","lgMarginStart11":"f53","lgMarginEnd11":"klb","lgMarginStartN11":"AU2","lgMarginEndN11":"FvD","lgMarginTop11":"Iz0","lgMarginRight11":"rOZ","lgMarginBottom11":"JCh","lgMarginLeft11":"ulG","lgMarginTopN11":"MUh","lgMarginRightN11":"uSX","lgMarginBottomN11":"fwy","lgMarginLeftN11":"t9b","lgPaddingY11":"zK2","lgPaddingX11":"HA4","lgMarginStart12":"ofl","lgMarginEnd12":"Mgh","lgMarginStartN12":"Y3B","lgMarginEndN12":"rjG","lgMarginTop12":"V3k","lgMarginRight12":"MdX","lgMarginBottom12":"g9B","lgMarginLeft12":"M-l","lgMarginTopN12":"l29","lgMarginRightN12":"onD","lgMarginBottomN12":"zP_","lgMarginLeftN12":"CVf","lgPaddingY12":"C0G","lgPaddingX12":"kLA","marginStartAuto":"s7I","marginEndAuto":"feh","marginTopAuto":"MMh","marginRightAuto":"zoQ","marginBottomAuto":"_Y5","marginLeftAuto":"yfN","smMarginStartAuto":"mo5","smMarginEndAuto":"rFn","smMarginTopAuto":"jOT","smMarginRightAuto":"Qte","smMarginBottomAuto":"Vfe","smMarginLeftAuto":"ScD","mdMarginStartAuto":"WC8","mdMarginEndAuto":"V49","mdMarginTopAuto":"OHp","mdMarginRightAuto":"Sk8","mdMarginBottomAuto":"db5","mdMarginLeftAuto":"yE2","lgMarginStartAuto":"EzO","lgMarginEndAuto":"Xqy","lgMarginTopAuto":"XhV","lgMarginRightAuto":"SE5","lgMarginBottomAuto":"XsV","lgMarginLeftAuto":"I6D"};/*

Style is a monoid that capture the "to-be-applied" styles (inline and classes)
for a Box. It's basically set that is closed under an associative binary
operation and has an identity element such that for all HA HA HA. Yes, it's a
monoid, which sounds scary but it's not really and actually super useful. All
that means is that basically you can do two things with it:

    1. concat(concat(a, b), c) === concat(a, concat(b, c));
    2. concat(identity(), a) === concat(a, identity()) === a;

What that means is that it's really easy to compose styles together and the
order in which you do so doesn't really matter.

*/ // TODO: This type should be opaque, however the Babel parser doesn't support
//       the opaque syntax yet.
var identity=function identity(){return {className:new Set(),inlineStyle:{}};};var fromClassName=function fromClassName(){for(var _len=arguments.length,classNames=new Array(_len),_key=0;_key<_len;_key++){classNames[_key]=arguments[_key];}return {className:new Set(classNames),inlineStyle:{}};};var fromInlineStyle=function fromInlineStyle(inlineStyle){return {className:new Set(),inlineStyle:inlineStyle};};var concat=function concat(styles){return styles.reduce(function(_ref,_ref2){var classNameA=_ref.className,inlineStyleA=_ref.inlineStyle;var classNameB=_ref2.className,inlineStyleB=_ref2.inlineStyle;return {className:new Set([].concat(_toConsumableArray(classNameA),_toConsumableArray(classNameB))),inlineStyle:_objectSpread2(_objectSpread2({},inlineStyleA),inlineStyleB)};},identity());};var mapClassName=function mapClassName(fn){return function(_ref3){var className=_ref3.className,inlineStyle=_ref3.inlineStyle;return {className:new Set(Array.from(className).map(fn)),inlineStyle:inlineStyle};};};var toProps=function toProps(_ref4){var className=_ref4.className,inlineStyle=_ref4.inlineStyle;var props={};if(className.size>0){// Sorting here ensures that classNames are always stable, reducing diff
// churn. Box usually has a small number of properties so it's not a perf
// concern.
props.className=Array.from(className).sort().join(' ');}if(Object.keys(inlineStyle).length>0){props.style=inlineStyle;}return props;};/*

Transforms

These are a collection of a few functors that take values and returns Style's. OMG, I used the word functor - it's really just a fancy word for function.

*/ // Adds a classname when a property is present.
//
//     <Box top />
//
var toggle=function toggle(){for(var _len=arguments.length,classNames=new Array(_len),_key=0;_key<_len;_key++){classNames[_key]=arguments[_key];}return function(val){return val?fromClassName.apply(void 0,classNames):identity();};};// Maps string values to classes
//
//     <Box alignItems="center" />
//
var mapping=function mapping(map){return function(val){return Object.prototype.hasOwnProperty.call(map,val)?fromClassName(map[val]):identity();};};// Maps a range of integers to a range of classnames
//
//     <Box padding={1} />
//
var range=function range(scale){return function(n){return fromClassName("".concat(scale).concat(n<0?"N".concat(Math.abs(n)):n));};};// Like `range`, maps a range of integers to a range of classnames, excluding
// zero values.
//
//     <Box padding={0} />
var rangeWithoutZero=function rangeWithoutZero(scale){return function(n){return n===0?identity():range(scale)(n);};};// Binds a string classname to the value in an object. Useful when interacting
// with ranges that need to come dynamically from a style object. This is
// similar to the NPM package 'classnames/bind'.
function bind(fn,scope){var map=mapClassName(function(name){return scope[name];});return function(val){return map(fn(val));};}// This takes a series of the previously defined functors, runs them all
// against a value and returns the set of their classnames.
var union=function union(){for(var _len2=arguments.length,fns=new Array(_len2),_key2=0;_key2<_len2;_key2++){fns[_key2]=arguments[_key2];}return function(val){return concat(fns.map(function(fn){return fn(val);}));};};/*

# PropTypes

Box's type definition is exhaustive. With the exception of `dangerouslySetInlineStyle`, values
shouldn't be ambigious. That means that we have to type out things like boints, but that's also
where Box's magic lies. Also, by putting in extra effort around type definitions here, we can skip
extra runtime typechecks in the transformers for performance.

*/ // --
/*

# Transformers

This is where the meat and the bones of Box's transforms are. You can read more about the DSL in `./transforms.js`, but basically they are a small declarative way of specifying how a property (i.e. `marginTop={4}`) gets turned into a CSS class (`marginTop4`).

There's a little preamble here, but it culminates in a big object mapping the actual property names to the transformer values.

*/var transformNumberOrPassthrough=function transformNumberOrPassthrough(selector){return function(m){if(typeof m==='number'){return bind(rangeWithoutZero(selector),whitespace)(m);}if(m==='auto'){return fromClassName(whitespace["".concat(selector,"Auto")]);}return identity();};};var rounding=function rounding(r){if(typeof r==='number'){return bind(range('rounding'),borders)(r);}if(r==='circle'){return fromClassName(borders.circle);}if(r==='pill'){return fromClassName(borders.pill);}return identity();};var marginStart=transformNumberOrPassthrough('marginStart');var marginEnd=transformNumberOrPassthrough('marginEnd');var marginTop=transformNumberOrPassthrough('marginTop');var marginRight=transformNumberOrPassthrough('marginRight');var marginBottom=transformNumberOrPassthrough('marginBottom');var marginLeft=transformNumberOrPassthrough('marginLeft');var margin=union(marginTop,marginBottom,marginLeft,marginRight);var smMarginTop=transformNumberOrPassthrough('smMarginTop');var smMarginRight=transformNumberOrPassthrough('smMarginRight');var smMarginBottom=transformNumberOrPassthrough('smMarginBottom');var smMarginLeft=transformNumberOrPassthrough('smMarginLeft');var smMargin=union(smMarginTop,smMarginBottom,smMarginLeft,smMarginRight);var mdMarginTop=transformNumberOrPassthrough('mdMarginTop');var mdMarginRight=transformNumberOrPassthrough('mdMarginRight');var mdMarginBottom=transformNumberOrPassthrough('mdMarginBottom');var mdMarginLeft=transformNumberOrPassthrough('mdMarginLeft');var mdMargin=union(mdMarginTop,mdMarginBottom,mdMarginLeft,mdMarginRight);var lgMarginTop=transformNumberOrPassthrough('lgMarginTop');var lgMarginRight=transformNumberOrPassthrough('lgMarginRight');var lgMarginBottom=transformNumberOrPassthrough('lgMarginBottom');var lgMarginLeft=transformNumberOrPassthrough('lgMarginLeft');var lgMargin=union(lgMarginTop,lgMarginBottom,lgMarginLeft,lgMarginRight);var paddingX=bind(rangeWithoutZero('paddingX'),whitespace);var paddingY=bind(rangeWithoutZero('paddingY'),whitespace);var padding=union(paddingX,paddingY);var smPaddingX=bind(rangeWithoutZero('smPaddingX'),whitespace);var smPaddingY=bind(rangeWithoutZero('smPaddingY'),whitespace);var smPadding=union(smPaddingX,smPaddingY);var mdPaddingX=bind(rangeWithoutZero('mdPaddingX'),whitespace);var mdPaddingY=bind(rangeWithoutZero('mdPaddingY'),whitespace);var mdPadding=union(mdPaddingX,mdPaddingY);var lgPaddingX=bind(rangeWithoutZero('lgPaddingX'),whitespace);var lgPaddingY=bind(rangeWithoutZero('lgPaddingY'),whitespace);var lgPadding=union(lgPaddingX,lgPaddingY);var opacityMap=mapClassName(function(name){return styles[name];});var opacity=function opacity(val){if(val>0&&val<1){return opacityMap(range('opacity0')(val*10));}return opacityMap(range('opacity')(val));};/*

These functions are legacy. I'd like to get rid of most of this file's dependency on importing `./style.js` directly once these are removed.

*/var prefix=function prefix(pre){return mapClassName(function(name){return "".concat(pre).concat(name);});};var display=function display(value){switch(value){case'flex':return fromClassName('DisplayFlex','DirectionRow');case'flexColumn':return fromClassName('DisplayFlex','DirectionColumn');case'inlineBlock':return fromClassName('DisplayInlineBlock');case'visuallyHidden':return fromClassName('DisplayVisuallyHidden');case false:return fromClassName('DisplayNone');default:/* block */return fromClassName('DisplayBlock');}};var column=range('Col');/*

It's preferable to put new properties into that object directly just so it's easier to read.

*/var propToFn={xs:function xs(value){if(!value){return identity();}return mapClassName(function(c){return styles[c];})(prefix('xs')(concat([value.column?column(value.column):identity(),typeof value.display!=='undefined'?display(value.display):identity()])));},sm:function sm(value){if(!value){return identity();}return mapClassName(function(c){return styles[c];})(prefix('sm')(concat([value.column?column(value.column):identity(),typeof value.display!=='undefined'?display(value.display):identity()])));},md:function md(value){if(!value){return identity();}return mapClassName(function(c){return styles[c];})(prefix('md')(concat([value.column?column(value.column):identity(),typeof value.display!=='undefined'?display(value.display):identity()])));},lg:function lg(value){if(!value){return identity();}return mapClassName(function(c){return styles[c];})(prefix('lg')(concat([value.column?column(value.column):identity(),typeof value.display!=='undefined'?display(value.display):identity()])));},display:mapping({none:styles.xsDisplayNone,flex:styles.xsDisplayFlex,block:styles.xsDisplayBlock,inlineBlock:styles.xsDisplayInlineBlock,visuallyHidden:styles.xsDisplayVisuallyHidden}),column:bind(range('xsCol'),styles),direction:mapping({row:styles.xsDirectionRow,column:styles.xsDirectionColumn}),smDisplay:mapping({none:styles.smDisplayNone,flex:styles.smDisplayFlex,block:styles.smDisplayBlock,inlineBlock:styles.smDisplayInlineBlock,visuallyHidden:styles.smDisplayVisuallyHidden}),smColumn:bind(range('smCol'),styles),smDirection:mapping({row:styles.smDirectionRow,column:styles.smDirectionColumn}),mdDisplay:mapping({none:styles.mdDisplayNone,flex:styles.mdDisplayFlex,block:styles.mdDisplayBlock,inlineBlock:styles.mdDisplayInlineBlock,visuallyHidden:styles.mdDisplayVisuallyHidden}),mdColumn:bind(range('mdCol'),styles),mdDirection:mapping({row:styles.mdDirectionRow,column:styles.mdDirectionColumn}),lgDisplay:mapping({none:styles.lgDisplayNone,flex:styles.lgDisplayFlex,block:styles.lgDisplayBlock,inlineBlock:styles.lgDisplayInlineBlock,visuallyHidden:styles.lgDisplayVisuallyHidden}),lgColumn:bind(range('lgCol'),styles),lgDirection:mapping({row:styles.lgDirectionRow,column:styles.lgDirectionColumn}),alignContent:mapping({start:layout.contentStart,end:layout.contentEnd,center:layout.contentCenter,between:layout.contentBetween,around:layout.contentAround,evenly:layout.contentEvenly// default: stretch
}),alignItems:mapping({start:layout.itemsStart,end:layout.itemsEnd,center:layout.itemsCenter,baseline:layout.itemsBaseline// default: stretch
}),alignSelf:mapping({start:layout.selfStart,end:layout.selfEnd,center:layout.selfCenter,baseline:layout.selfBaseline,stretch:layout.selfStretch// default: auto
}),bottom:toggle(layout.bottom0),borderSize:function borderSize(value){return concat([mapping({sm:borders.sizeSm,lg:borders.sizeLg// default: none
})(value),fromClassName(borders.solid),fromClassName(borders.borderColorLightGray)]);},color:mapping({blue:colors.blueBg,darkGray:colors.darkGrayBg,pine:colors.pineBg,gray:colors.grayBg,red:colors.redBg,olive:colors.oliveBg,lightGray:colors.lightGrayBg,white:colors.whiteBg,orange:colors.orangeBg,green:colors.greenBg,navy:colors.navyBg,midnight:colors.midnightBg,purple:colors.purpleBg,orchid:colors.orchidBg,eggplant:colors.eggplantBg,maroon:colors.maroonBg,watermelon:colors.watermelonBg,lightWash:colors.lightWashBg,darkWash:colors.darkWashBg,transparentDarkGray:colors.transparentDarkGrayBg// default: transparent
}),fit:toggle(layout.fit),flex:mapping({grow:layout.flexGrow,none:layout.flexNone// default: shrink
}),height:function height(_height){return fromInlineStyle({height:_height});},justifyContent:mapping({end:layout.justifyEnd,center:layout.justifyCenter,between:layout.justifyBetween,around:layout.justifyAround,evenly:layout.justifyEvenly// default: start
}),left:toggle(layout.left0),marginStart:marginStart,marginEnd:marginEnd,margin:margin,marginTop:marginTop,marginRight:marginRight,marginBottom:marginBottom,marginLeft:marginLeft,smMargin:smMargin,smMarginTop:smMarginTop,smMarginRight:smMarginRight,smMarginBottom:smMarginBottom,smMarginLeft:smMarginLeft,mdMargin:mdMargin,mdMarginTop:mdMarginTop,mdMarginRight:mdMarginRight,mdMarginBottom:mdMarginBottom,mdMarginLeft:mdMarginLeft,lgMargin:lgMargin,lgMarginTop:lgMarginTop,lgMarginRight:lgMarginRight,lgMarginBottom:lgMarginBottom,lgMarginLeft:lgMarginLeft,maxHeight:function maxHeight(_maxHeight){return fromInlineStyle({maxHeight:_maxHeight});},maxWidth:function maxWidth(_maxWidth){return fromInlineStyle({maxWidth:_maxWidth});},minHeight:function minHeight(_minHeight){return fromInlineStyle({minHeight:_minHeight});},minWidth:function minWidth(_minWidth){return fromInlineStyle({minWidth:_minWidth});},opacity:opacity,overflow:mapping({hidden:layout.overflowHidden,scroll:layout.overflowScroll,auto:layout.overflowAuto,scrollX:layout.overflowScrollX,scrollY:layout.overflowScrollY// default: visible
}),padding:padding,paddingX:paddingX,paddingY:paddingY,smPadding:smPadding,smPaddingX:smPaddingX,smPaddingY:smPaddingY,mdPadding:mdPadding,mdPaddingX:mdPaddingX,mdPaddingY:mdPaddingY,lgPadding:lgPadding,lgPaddingX:lgPaddingX,lgPaddingY:lgPaddingY,position:mapping({absolute:layout.absolute,relative:layout.relative,fixed:layout.fixed// default: static
}),right:toggle(layout.right0),rounding:rounding,top:toggle(layout.top0),width:function width(_width){return fromInlineStyle({width:_width});},wrap:toggle(layout.flexWrap),dangerouslySetInlineStyle:function dangerouslySetInlineStyle(value){return(/* eslint-disable-next-line no-underscore-dangle */value&&value.__style?fromInlineStyle(value.__style):identity());}};/*

# The Component

*/var contains=function contains(key,arr){return arr.indexOf(key)>=0;};var omit=function omit(keys,obj){return Object.keys(obj).reduce(function(acc,k){if(contains(k,keys)){return acc;}return _objectSpread2(_objectSpread2({},acc),{},_defineProperty$1({},k,obj[k]));},{});};// Box is a "pass-through" component, meaning that if you pass properties to it
// that it doesn't know about (`aria-label` for instance) it passes directly
// back to the underlying `<div/>`. That's generally useful, but we'd also like
// to strip out a few naughty properties that break style encapsulation
// (className, style) or accessibility (onClick).
var blacklistProps=['onClick','className','style'];// $FlowIssue https://github.com/facebook/flow/issues/6103
var Box=forwardRef(function(_ref,ref){var children=_ref.children,props=_objectWithoutProperties(_ref,["children"]);// Flow can't reason about the constant nature of Object.keys so we can't use
// a functional (reduce) style here.
// All Box's are box-sized by default, so we start off building up the styles
// to be applied with a Box base class.
var s=fromClassName(styles.box);// Init the list of props we'll omit from passthrough. We'll add to this
// list as we match props against the transforms list.
var omitProps=[].concat(blacklistProps);// This loops through each property and if it exists in the previously
// defined transform map, concatentes the resulting styles to the base
// styles. If there's a match, we also don't pass through that property. This
// means Box's runtime is only dependent on the number of properties passed
// to it (which is typically small) instead of the total number of possible
// properties (~30 or so). While it may ~feel~ like Box is innefficient, its
// biggest performance impact is on startup time because there's so much code
// here.
// eslint-disable-next-line no-restricted-syntax
for(var prop in props){if(Object.prototype.hasOwnProperty.call(propToFn,prop)){var fn=propToFn[prop];var value=props[prop];omitProps.push(prop);s=concat([s,fn(value)]);}}// And... magic!
return/*#__PURE__*/createElement("div",_extends$1({},omit(omitProps,props),toProps(s),{ref:ref}),children);});//  NOTE: This is needed in order to override the ForwardRef display name that is
//  used in dev tools and in snapshot testing.
Box.displayName='Box';/*

# PropTypes

And we're done here :)

*/var AlignContentPropType=PropTypes.oneOf(['start','end','center','between','around','evenly','stretch']);var AlignItemsPropType=PropTypes.oneOf(['start','end','center','baseline','stretch']);var AlignSelfPropType=PropTypes.oneOf(['auto','start','end','center','baseline','stretch']);var ColumnPropType=PropTypes.oneOf([0,1,2,3,4,5,6,7,8,9,10,11,12]);var DimensionPropType=PropTypes.oneOfType([PropTypes.number,PropTypes.string]);var DirectionPropType=PropTypes.oneOf(['row','column']);var DisplayPropType=PropTypes.oneOf(['none','flex','block','inlineBlock','visuallyHidden']);var FlexPropType=PropTypes.oneOf(['grow','shrink','none']);var JustifyContentPropType=PropTypes.oneOf(['start','end','center','between','around','evenly']);var MarginPropType=PropTypes.oneOf([-12,-11,-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,'auto']);var OverflowPropType=PropTypes.oneOf(['visible','hidden','scroll','scrollX','scrollY','auto']);var PaddingPropType=PropTypes.oneOf([0,1,2,3,4,5,6,7,8,9,10,11,12]);var RoundingPropType=PropTypes.oneOf([0,1,2,3,4,5,6,7,8,'circle','pill']);var SizeDisplayPropType=PropTypes.oneOf(['flex','flexColumn','inlineBlock']);// $FlowIssue https://github.com/facebook/flow/issues/7484
Box.propTypes={children:PropTypes.node,dangerouslySetInlineStyle:PropTypes.exact({__style:PropTypes.object}),xs:PropTypes.exact({display:PropTypes.oneOfType([PropTypes.bool,SizeDisplayPropType]),column:PropTypes.number}),sm:PropTypes.exact({display:PropTypes.oneOfType([PropTypes.bool,SizeDisplayPropType]),column:PropTypes.number}),md:PropTypes.exact({display:PropTypes.oneOfType([PropTypes.bool,SizeDisplayPropType]),column:PropTypes.number}),lg:PropTypes.exact({display:PropTypes.oneOfType([PropTypes.bool,SizeDisplayPropType]),column:PropTypes.number}),display:DisplayPropType,direction:DirectionPropType,column:ColumnPropType,smDisplay:DisplayPropType,smDirection:DirectionPropType,smColumn:ColumnPropType,mdDisplay:DisplayPropType,mdDirection:DirectionPropType,mdColumn:ColumnPropType,lgDisplay:DisplayPropType,lgDirection:DirectionPropType,lgColumn:ColumnPropType,alignContent:AlignContentPropType,alignItems:AlignItemsPropType,alignSelf:AlignSelfPropType,bottom:PropTypes.bool,borderSize:PropTypes.oneOf(['sm','lg','none']),color:PropTypes.oneOf(['blue','darkGray','darkWash','eggplant','gray','green','lightGray','lightWash','maroon','midnight','navy','olive','orange','orchid','pine','purple','red','transparent','transparentDarkGray','watermelon','white']),fit:PropTypes.bool,flex:FlexPropType,height:DimensionPropType,justifyContent:JustifyContentPropType,left:PropTypes.bool,marginStart:MarginPropType,marginEnd:MarginPropType,margin:MarginPropType,marginTop:MarginPropType,marginRight:MarginPropType,marginBottom:MarginPropType,marginLeft:MarginPropType,smMargin:MarginPropType,smMarginTop:MarginPropType,smMarginRight:MarginPropType,smMarginBottom:MarginPropType,smMarginLeft:MarginPropType,mdMargin:MarginPropType,mdMarginTop:MarginPropType,mdMarginRight:MarginPropType,mdMarginBottom:MarginPropType,mdMarginLeft:MarginPropType,lgMargin:MarginPropType,lgMarginTop:MarginPropType,lgMarginRight:MarginPropType,lgMarginBottom:MarginPropType,lgMarginLeft:MarginPropType,maxHeight:DimensionPropType,maxWidth:DimensionPropType,minHeight:DimensionPropType,minWidth:DimensionPropType,opacity:PropTypes.oneOf([0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1]),overflow:OverflowPropType,padding:PaddingPropType,paddingX:PaddingPropType,paddingY:PaddingPropType,smPadding:PaddingPropType,smPaddingX:PaddingPropType,smPaddingY:PaddingPropType,mdPadding:PaddingPropType,mdPaddingX:PaddingPropType,mdPaddingY:PaddingPropType,lgPadding:PaddingPropType,lgPaddingX:PaddingPropType,lgPaddingY:PaddingPropType,position:PropTypes.oneOf(['static','absolute','relative','fixed']),right:PropTypes.bool,rounding:RoundingPropType,top:PropTypes.bool,width:DimensionPropType,wrap:PropTypes.bool};var styles$1={"icon":"gUZ","iconBlock":"U9O kVc","rtlSupport":"Hn_"};var ad='M17 1a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H7a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h10zM7 20h10v-4H7v4z';var add='M22 10h-8V2a2 2 0 0 0-4 0v8H2a2 2 0 0 0 0 4h8v8a2 2 0 0 0 4 0v-8h8a2 2 0 0 0 0-4';var addCircle='M17.75 13.25h-4.5v4.5a1.25 1.25 0 0 1-2.5 0v-4.5h-4.5a1.25 1.25 0 0 1 0-2.5h4.5v-4.5a1.25 1.25 0 0 1 2.5 0v4.5h4.5a1.25 1.25 0 0 1 0 2.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';var addLayout='M21 12h-6.5V5.5H20c.551 0 1 .449 1 1V12zm0 8c0 .551-.449 1-1 1H6.5c-.551 0-1-.449-1-1v-5.5H21V20zM4.75 7.5A.75.75 0 0 1 4 6.75V5.5H2.75a.75.75 0 0 1 0-1.5H4V2.75a.75.75 0 0 1 1.5 0V4h1.25a.75.75 0 0 1 0 1.5H5.5v1.25a.75.75 0 0 1-.75.75zm4.674-2H12V12H5.5V9.424A4.727 4.727 0 0 0 9.424 5.5zM20 2.5H8.909C8.105 1.018 6.555 0 4.75 0A4.75 4.75 0 0 0 0 4.75c0 1.805 1.018 3.355 2.5 4.159V20a4 4 0 0 0 4 4H20a4 4 0 0 0 4-4V6.5a4 4 0 0 0-4-4z';var addPin='M21.5 8.69c1.49.87 2.5 2.46 2.5 4.31h-4v7.96L19 23l-1-2.04V13h-4c0-1.85 1.01-3.44 2.5-4.31V2.93c-.86-.22-1.5-1-1.5-1.93h8c0 .93-.64 1.71-1.5 1.93v5.76zm-11.25.81a1.25 1.25 0 0 1 0 2.5H7v3.25a1.25 1.25 0 0 1-2.5 0V12H1.25a1.25 1.25 0 0 1 0-2.5H4.5V6.25a1.25 1.25 0 0 1 2.5 0V9.5h3.25z';var adGroup='M9 11a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H9zm1-2h4V7h-4v2zm10 4a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1h6zm-5 9h4v-2h-4v2zm-5-9a1 1 0 0 1 1 1v9a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-9a1 1 0 0 1 1-1h6zm-5 9h4v-2H5v2z';var adsStats='M4.75 12c.32 0 .64-.122.884-.366L9.5 7.768l3 3 5.5-5.5v.982a1.25 1.25 0 0 0 2.5 0V1h-5.25a1.25 1.25 0 0 0 0 2.5h.982L12.5 7.232l-3-3-5.634 5.634A1.25 1.25 0 0 0 4.75 12M14 14h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1m8 0h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1M7 15v7a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-7a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1';var adsOverview='M2.5 19a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 2.5 19m19 0h-14a1.5 1.5 0 1 0 0 3h14a1.5 1.5 0 1 0 0-3m-19-5a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 2.5 14m19 0h-14a1.5 1.5 0 1 0 0 3h14a1.5 1.5 0 1 0 0-3M10 11h4a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1m12-9h-4a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1M1 10V3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1';var alert='M14.177 7.819l-1.698 5.824c-.142.476-.816.475-.958-.001L9.822 7.819h.009a2.227 2.227 0 0 1-.081-.569 2.25 2.25 0 1 1 4.5 0c0 .198-.034.386-.082.569h.009zM12 19a1.75 1.75 0 1 1 0-3.5 1.75 1.75 0 0 1 0 3.5zm0-19C5.372 0 0 5.372 0 12c0 6.627 5.372 12 12 12 6.627 0 12-5.373 12-12 0-6.628-5.373-12-12-12z';var alignBottom='M4.25 3.5h15.5a.75.75 0 0 1 .75.75V14h-17V4.25a.75.75 0 0 1 .75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';var alignBottomCenter='M20.5 19.75c0 .413-.337.75-.75.75H15.5V14h-7v6.5H4.25a.752.752 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var alignBottomLeft='M20.5 19.75c0 .413-.337.75-.75.75H10V14H3.5V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var alignBottomRight='M3.5 19.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75V14H14v6.5H4.25a.752.752 0 0 1-.75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';var alignMiddle='M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V15.5h17v4.25a.75.75 0 0 1-.75.75m-15.5-17h15.5a.75.75 0 0 1 .75.75V8.5h-17V4.25a.75.75 0 0 1 .75-.75M19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';var alignTop='M19.75 20.5H4.25a.752.752 0 0 1-.75-.75V10h17v9.75c0 .413-.337.75-.75.75m0-19.5H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';var alignTopCenter='M20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75H8.5V10h7V3.5h4.25a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var alignTopLeft='M20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V10H10V3.5h9.75a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var alignTopRight='M19.75 20.5H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75H14V10h6.5v9.75a.75.75 0 0 1-.75.75m0-19.5H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1';var androidShare='M19 16c-1.028 0-1.957.399-2.666 1.037L8.919 12.8c.053-.258.081-.526.081-.8s-.028-.542-.081-.8l7.415-4.237C17.043 7.601 17.972 8 19 8c2.209 0 4-1.791 4-4s-1.791-4-4-4-4 1.791-4 4c0 .274.028.542.081.8L7.666 9.037C6.957 8.399 6.028 8 5 8c-2.209 0-4 1.791-4 4s1.791 4 4 4c1.028 0 1.957-.399 2.666-1.037l7.415 4.237c-.053.258-.081.526-.081.8 0 2.209 1.791 4 4 4s4-1.791 4-4-1.791-4-4-4';var angledPin='M13.988,19.153 C15.485,17.656 15.985,15.446 15.481,13.537 L19.740,9.074 L22.662,8.807 L22.645,8.789 C22.739,8.804 22.837,8.780 22.909,8.708 C23.030,8.587 23.031,8.391 22.910,8.271 L15.730,1.090 C15.609,0.970 15.413,0.970 15.292,1.091 C15.220,1.163 15.197,1.262 15.211,1.356 L15.194,1.338 L14.927,4.261 L10.463,8.520 C8.554,8.015 6.344,8.516 4.847,10.012 L8.656,13.821 L3.324,19.153 C2.562,19.915 0.711,22.108 1.039,22.962 C1.892,23.290 4.086,21.438 4.847,20.676 C5.609,19.915 10.179,15.344 10.179,15.344 L13.988,19.153 Z';var apps='M20 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m-8 16a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m0-8a3 3 0 1 0 0 6 3 3 0 0 0 0-6m3-5a3 3 0 1 1-6 0 3 3 0 0 1 6 0';var arrowBack='M17.28 24c-.57 0-1.14-.22-1.58-.66L4.5 12 15.7.66a2.21 2.21 0 0 1 3.15 0c.87.88.87 2.3 0 3.18L10.79 12l8.06 8.16c.87.88.87 2.3 0 3.18-.44.44-1 .66-1.57.66';var arrowCircleDown='M0 12c0 6.63 5.37 12 12 12s12-5.37 12-12S18.63 0 12 0 0 5.37 0 12zm10.77-3.75a1.25 1.25 0 0 1 2.5 0v3.95l1.03-1.03a1.25 1.25 0 0 1 1.77 0c.48.49.48 1.28 0 1.77L12 17l-4.07-4.06c-.48-.49-.48-1.28 0-1.77a1.25 1.25 0 0 1 1.77 0l1.07 1.06V8.25z';var arrowCircleForward='M12.94 16.07c-.49.48-1.28.48-1.77 0a1.25 1.25 0 0 1 0-1.77l1.06-1.07H8.25a1.25 1.25 0 0 1 0-2.5h3.95L11.17 9.7a1.25 1.25 0 0 1 0-1.77c.49-.48 1.28-.48 1.77 0L17 12l-4.06 4.07zM12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0z';var arrowCircleUp='M24 12c0-6.627-5.372-12-12-12C5.373 0 0 5.373 0 12s5.373 12 12 12c6.628 0 12-5.373 12-12zm-10.767 3.75a1.25 1.25 0 0 1-2.5 0v-3.948l-1.031 1.031a1.25 1.25 0 0 1-1.768-1.768L12 7l4.066 4.065a1.25 1.25 0 0 1-1.768 1.768l-1.065-1.065v3.982z';var arrowDown='M12 19.5L.66 8.29c-.88-.86-.88-2.27 0-3.14.88-.87 2.3-.87 3.18 0L12 13.21l8.16-8.06c.88-.87 2.3-.87 3.18 0 .88.87.88 2.28 0 3.14L12 19.5z';var arrowEnd='M18 2v20a2 2 0 0 0 4 0V2a2 2 0 0 0-4 0zm-6.83 10L2.587 3.414A2 2 0 1 1 5.414.586L16.829 12 5.414 23.414A1.99 1.99 0 0 1 4 24a2 2 0 0 1-1.414-3.414L11.17 12z';var arrowForward='M6.72 24c.57 0 1.14-.22 1.57-.66L19.5 12 8.29.66c-.86-.88-2.27-.88-3.14 0-.87.88-.87 2.3 0 3.18L13.21 12l-8.06 8.16c-.87.88-.87 2.3 0 3.18.43.44 1 .66 1.57.66';var arrowStart='M4 0a2 2 0 0 0-2 2v20a2 2 0 0 0 4 0V2a2 2 0 0 0-2-2zm17.414 20.586a2 2 0 1 1-2.828 2.828L7.171 12 18.586.586a2 2 0 1 1 2.828 2.828L12.829 12l8.585 8.586z';var arrowUp='M21.75 19.5c-.58 0-1.15-.22-1.59-.65L12 10.79l-8.16 8.06c-.88.87-2.3.87-3.18 0a2.21 2.21 0 0 1 0-3.15L12 4.5l11.34 11.2c.88.87.88 2.28 0 3.15-.44.43-1.01.65-1.59.65';var arrowUpRight='M4.9283,1 C3.6273,1 2.5713,2.054 2.5713,3.357 C2.5713,4.66 3.6273,5.714 4.9283,5.714 L14.9523,5.714 L1.6893,18.976 C0.7703,19.896 0.7703,21.389 1.6893,22.31 C2.1503,22.771 2.7533,23 3.3573,23 C3.9603,23 4.5633,22.771 5.0243,22.31 L18.2853,9.047 L18.2853,19.071 C18.2853,20.374 19.3413,21.429 20.6433,21.429 C21.9443,21.429 23.0003,20.374 23.0003,19.071 L23.0003,1 L4.9283,1 Z';var bell='M12 24c-1.66 0-3-1.34-3-3h6c0 1.66-1.34 3-3 3zm7-10.83c1.58 1.52 2.67 3.55 3 5.83H2c.33-2.28 1.42-4.31 3-5.83V7c0-3.87 3.13-7 7-7s7 3.13 7 7v6.17z';var calendar='M4 20V9h16v11H4zm2-4h5v-5H6v5zM20 4h-2.5V2.5a1.5 1.5 0 1 0-3 0V4h-5V2.5a1.5 1.5 0 1 0-3 0V4H4C2.35 4 1 5.35 1 7v13c0 1.65 1.35 3 3 3h16c1.65 0 3-1.35 3-3V7c0-1.65-1.35-3-3-3z';var camera='M6.36 4.99L8.56 2h6.88l2.2 2.99h3.09c1.8 0 3.27 1.49 3.27 3.33v10.35c0 1.84-1.47 3.33-3.27 3.33H3.27C1.47 22 0 20.51 0 18.67V8.32c0-1.84 1.47-3.33 3.27-3.33h3.09zM12 7.22a5.74 5.74 0 1 0 0 11.48 5.74 5.74 0 0 0 0-11.48m0 2.73c1.66 0 3.01 1.35 3.01 3.01 0 1.66-1.35 3.01-3.01 3.01-1.66 0-3.01-1.35-3.01-3.01 0-1.66 1.35-3.01 3.01-3.01';var cameraRoll='M8 10c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2M6.25 3.5h11.5c1.52 0 2.75 1.23 2.75 2.75v8.25L17 11l-6 6-3.5-3.5-4 4V6.25c0-1.52 1.23-2.75 2.75-2.75M17.75 1H6.25A5.25 5.25 0 0 0 1 6.25v11.5C1 20.64 3.35 23 6.25 23h11.5c2.89 0 5.25-2.36 5.25-5.25V6.25C23 3.35 20.64 1 17.75 1';var cancel='M15.18 12l7.16-7.16c.88-.88.88-2.3 0-3.18-.88-.88-2.3-.88-3.18 0L12 8.82 4.84 1.66c-.88-.88-2.3-.88-3.18 0-.88.88-.88 2.3 0 3.18L8.82 12l-7.16 7.16c-.88.88-.88 2.3 0 3.18.44.44 1.01.66 1.59.66.58 0 1.15-.22 1.59-.66L12 15.18l7.16 7.16c.44.44 1.01.66 1.59.66.58 0 1.15-.22 1.59-.66.88-.88.88-2.3 0-3.18L15.18 12z';var canonicalPin='M19 20c0 .551-.448 1-1 1h-7.471c-.551 0-1-.449-1-1v-2H14a2 2 0 0 0 2-2V8h2c.552 0 1 .449 1 1v11zM5.705 9.996a1.126 1.126 0 0 1 1.59-1.591L8.7 9.809l3.004-3.004a1.125 1.125 0 1 1 1.592 1.591L8.7 12.991 5.705 9.996zM18 6h-2V3a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h2.529v2c0 1.654 1.346 3 3 3H18c1.654 0 3-1.346 3-3V9c0-1.654-1.346-3-3-3z';var check='M9.17 21.75L.73 12.79c-.97-1.04-.97-2.71 0-3.75a2.403 2.403 0 0 1 3.53 0l4.91 5.22L19.74 3.03c.98-1.04 2.55-1.04 3.53 0 .97 1.03.97 2.71 0 3.74L9.17 21.75z';var checkCircle='M12 0a12 12 0 100 24 12 12 0 000-24zM6.37 11.61a1.25 1.25 0 011.76 0l2.37 2.36 5.37-5.35a1.25 1.25 0 011.76 1.76L10.5 17.5l-4.13-4.13a1.25 1.25 0 010-1.76z';var circleOutline='M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';var clear='M15.18 16.95L12 13.77l-3.18 3.18c-.49.49-1.28.49-1.77 0a1.25 1.25 0 0 1 0-1.77L10.23 12 7.05 8.82a1.25 1.25 0 0 1 0-1.77 1.25 1.25 0 0 1 1.77 0L12 10.23l3.18-3.18a1.25 1.25 0 0 1 1.77 0c.49.49.49 1.28 0 1.77L13.77 12l3.18 3.18c.49.49.49 1.28 0 1.77s-1.28.49-1.77 0M24 12c0-6.63-5.37-12-12-12S0 5.37 0 12s5.37 12 12 12 12-5.37 12-12';var clock='M17.83 17.83c-.37.36-.85.55-1.33.55-.48 0-.96-.19-1.33-.55l-5.04-5.05V6c0-1.04.83-1.87 1.87-1.87s1.88.83 1.88 1.87v5.22l3.95 3.95c.73.74.73 1.92 0 2.66M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';var code='M11.99 17.38a.75.75 0 01-1.48-.26l1.5-8.53a.75.75 0 011.48.25zm-2.1-7.04c.21.35.11.82-.23 1.04L7.14 13l2.52 1.62a.75.75 0 11-.82 1.26l-3.5-2.25a.75.75 0 010-1.26l3.5-2.25a.75.75 0 011.04.22zM16.85 13l-2.52-1.62a.75.75 0 01.82-1.26l3.5 2.25a.75.75 0 010 1.26l-3.5 2.25a.75.75 0 01-.82-1.26zM1 4a3 3 0 013-3h16a3 3 0 013 3v16a3 3 0 01-3 3H4a3 3 0 01-3-3zm3.5 0a.5.5 0 100-1 .5.5 0 000 1zM20 6H4v14h16zM6.5 3a.5.5 0 100 1 .5.5 0 000-1zm2 1a.5.5 0 100-1 .5.5 0 000 1z';var cog='M6.25 2L.5 12l5.75 10h11.5l5.75-10-5.75-10H6.25zm1.703 10a4 4 0 1 1 8 0 4 4 0 0 1-8 0z';var colorPicker='M1.73 18.751l8.23-8.231 3.52 3.52-8.232 8.23a2.487 2.487 0 0 1-3.519 0 2.487 2.487 0 0 1 0-3.519zM22.026 1.972a3.318 3.318 0 0 1 0 4.693l-3.907 3.908.116.118a1.493 1.493 0 1 1-2.111 2.111l-4.928-4.927a1.494 1.494 0 0 1 2.112-2.112l.117.117 3.908-3.908a3.318 3.318 0 0 1 4.693 0z';var compass='M12.868 12.9A1.25 1.25 0 1 0 11.1 11.13a1.25 1.25 0 0 0 1.77 1.768m2.268 1.134c-.207.517-.62.924-1.139 1.124L5.62 18.38l3.223-8.377c.2-.52.607-.933 1.124-1.139l8.617-3.447-3.447 8.617zm5.348-10.519c-4.686-4.686-12.284-4.686-16.97 0-4.687 4.687-4.687 12.285 0 16.971 4.686 4.686 12.284 4.686 16.97 0 4.686-4.686 4.686-12.284 0-16.97z';var compose='M2.337 19.942l5.671-1.977L19.265 6.706c.981-.98.981-2.57 0-3.55l-1.42-1.421a2.51 2.51 0 0 0-3.55 0L3.036 12.992l-1.978 5.671a1.005 1.005 0 0 0 1.279 1.279M23 22c0 .55-.45 1-1 1H2c-.55 0-1-.45-1-1s.45-1 1-1h20c.55 0 1 .45 1 1';var conversionTag='M14.03 4.03c.67.16 1.1.83.94 1.5l-3 13a1.25 1.25 0 01-2.44-.56l3-13c.16-.67.83-1.1 1.5-.94zm4.08 4.33L22 12.19l-3.88 3.94a1.25 1.25 0 11-1.78-1.76l2.12-2.15-2.1-2.08a1.25 1.25 0 011.75-1.78zm-10.45.01c.48.5.48 1.29-.02 1.77l-2.1 2.08 2.12 2.15a1.25 1.25 0 11-1.78 1.76L2 12.19l3.9-3.83a1.25 1.25 0 011.76.01z';var creditCard='M6 13.75a1.25 1.25 0 100 2.5h5a1.25 1.25 0 100-2.5zM0 18a3 3 0 003 3h18a3 3 0 003-3V6a3 3 0 00-3-3H3a3 3 0 00-3 3zM21.5 6v2h-19V6c0-.28.22-.5.5-.5h18c.28 0 .5.22.5.5zM3 18.5a.5.5 0 01-.5-.5v-6h19v6a.5.5 0 01-.5.5z';var crop='M22.5 4a1.5 1.5 0 1 1 0 3H20v11.5a1.5 1.5 0 0 1-1.5 1.5H7v2.5a1.5 1.5 0 1 1-3 0V20H1.5a1.5 1.5 0 1 1 0-3H4V5.5A1.5 1.5 0 0 1 5.5 4H17V1.5a1.5 1.5 0 1 1 3 0V4h2.5zM7 17h10V7H7v10zm5-3a2 2 0 1 1 .001-4.001A2 2 0 0 1 12 14z';var dash='M20 16H4c-2.2 0-4-1.8-4-4s1.8-4 4-4h16c2.2 0 4 1.8 4 4s-1.8 4-4 4';var directionalArrowLeft='M8.415 4.586a2 2 0 1 1 2.828 2.828L8.657 10H21a2 2 0 0 1 0 4H8.657l2.586 2.586a2 2 0 1 1-2.828 2.828L1 12l7.415-7.414z';var directionalArrowRight='M15.585 4.586a2 2 0 1 0-2.828 2.828L15.343 10H3a2 2 0 0 0 0 4h12.343l-2.586 2.586a2 2 0 1 0 2.828 2.828L23 12l-7.415-7.414z';var download='M21 14a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-6a2 2 0 0 1 4 0v4h14v-4a2 2 0 0 1 2-2zM8.815 6.987l1.176 1.178V2a2 2 0 0 1 4 0v6.178l1.196-1.193a2 2 0 1 1 2.826 2.831l-6.025 6.013-6.004-6.016a2 2 0 0 1 2.831-2.826z';var duplicate='M19.5 9.75c0-.69-.56-1.25-1.25-1.25H15.5V5.75a1.25 1.25 0 0 0-2.5 0V8.5h-2.75a1.25 1.25 0 0 0 0 2.5H13v2.75a1.25 1.25 0 0 0 2.5 0V11h2.75c.69 0 1.25-.56 1.25-1.25m3.5-6.5v13a2.25 2.25 0 0 1-2.25 2.25h-13a2.25 2.25 0 0 1-2.25-2.25v-13A2.25 2.25 0 0 1 7.75 1h13A2.25 2.25 0 0 1 23 3.25m-6 18.5c0 .69-.56 1.25-1.25 1.25h-8.5A6.257 6.257 0 0 1 1 16.75v-8.5a1.25 1.25 0 0 1 2.5 0v8.5a3.754 3.754 0 0 0 3.75 3.75h8.5c.69 0 1.25.56 1.25 1.25';var edit='M13.386 6.018l4.596 4.596L7.097 21.499 1 22.999l1.501-6.096L13.386 6.018zm8.662-4.066a3.248 3.248 0 0 1 0 4.596L19.75 8.848 15.154 4.25l2.298-2.299a3.248 3.248 0 0 1 4.596 0z';var ellipsis='M12 9c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3M3 9c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm18 0c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3z';var ellipsisCircleOutline='M12 10.5c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5-1.5-.6-1.5-1.5.6-1.5 1.5-1.5zm-4.5 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S6 12.9 6 12s.6-1.5 1.5-1.5zm9 0c.9 0 1.5.6 1.5 1.5s-.6 1.5-1.5 1.5S15 12.9 15 12s.6-1.5 1.5-1.5zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';var envelope='M21.53 7.508l-7.586 7.452c-.536.526-1.24.79-1.944.79a2.77 2.77 0 0 1-1.945-.79L2.47 7.508a.728.728 0 0 1 0-1.043.76.76 0 0 1 1.061 0l7.586 7.452c.487.48 1.28.48 1.768 0l7.585-7.452a.76.76 0 0 1 1.061 0 .728.728 0 0 1 0 1.043zM1 19h22V5H1v14z';var eye='M10,12 C10,13.105 10.895,14 12,14 C13.105,14 14,13.105 14,12 C14,10.895 13.105,10 12,10 C10.895,10 10,10.895 10,12 Z M12,17 C9.239,17 7,14.761 7,12 C7,9.239 9.239,7 12,7 C14.761,7 17,9.239 17,12 C17,14.761 14.761,17 12,17 M12,3.5 C6.455,3.5 1.751,7.051 0,12 C1.751,16.949 6.455,20.5 12,20.5 C17.545,20.5 22.249,16.949 24,12 C22.249,7.051 17.545,3.5 12,3.5';var facebook='M17.75 3.984l-2.312.001c-1.811 0-2.163.842-2.163 2.077v2.724h4.323l-.563 4.267h-3.76V24H8.769V13.053H5V8.786h3.769V5.64C8.769 1.988 11.05 0 14.383 0c1.596 0 2.967.116 3.367.168v3.816z';var faceHappy='M12.023 20.713c-2.944 0-5.378-1.96-5.356-4.906.017-2.117 1.728-.536 5.33-.545 3.6-.01 5.322-1.645 5.327.548.007 2.946-2.356 4.903-5.3 4.903m4.439-9.83a1.675 1.675 0 1 1 0-3.351 1.675 1.675 0 0 1 0 3.35M6.093 9.207a1.675 1.675 0 1 1 3.35 0 1.675 1.675 0 0 1-3.35 0m17.906 2.782C23.994 5.367 18.623 0 12 0 5.373 0 0 5.373 0 12c0 6.628 5.373 12 12 12C18.624 24 23.995 18.633 24 12.01L24 12l-.001-.01';var faceSad='M17.088 17.841a1.2 1.2 0 0 1-1.593.58 4.517 4.517 0 0 0-.744-.217c-.738-.168-1.653-.27-2.75-.271-1.098 0-2.012.103-2.752.27-.411.094-.657.18-.741.217a1.199 1.199 0 1 1-1.014-2.174c.237-.11.643-.251 1.223-.383.915-.207 2.008-.33 3.284-.33 1.276.001 2.369.123 3.281.33.582.132.988.273 1.226.384.601.279.86.992.58 1.594zm-.624-6.959a1.675 1.675 0 1 1 0-3.35 1.675 1.675 0 0 1 0 3.35zM6.093 9.207a1.675 1.675 0 1 1 3.35 0 1.675 1.675 0 0 1-3.35 0zM24 11.989C23.995 5.367 18.624 0 12.002 0 5.373 0 0 5.373 0 12c0 6.628 5.373 12 12.002 12C18.623 24 23.995 18.633 24 12.01v-.02z';var faceSmiley='M16.5 11a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m.449 5.95A6.947 6.947 0 0 1 12 19a6.96 6.96 0 0 1-4.948-2.048.999.999 0 0 1 0-1.414.999.999 0 0 1 1.414-.001A4.968 4.968 0 0 0 12 17c1.336 0 2.592-.52 3.535-1.464a1 1 0 0 1 1.414 1.414M6 9.5a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0';var fileUnknown='M15 5.875V1l6 6h-4.875C15.505 7 15 6.495 15 5.875zm-1.573 9.652c-.305.172-.645.748-.645 1.26 0 .424-.351.77-.782.77a.777.777 0 0 1-.782-.77c0-1.035.6-2.126 1.429-2.595.26-.148.541-.519.541-.983A1.18 1.18 0 0 0 12 12.04a1.18 1.18 0 0 0-1.187 1.169c0 .426-.35.771-.781.771a.778.778 0 0 1-.782-.771c0-1.494 1.233-2.709 2.75-2.709s2.75 1.215 2.75 2.709c0 .952-.52 1.862-1.323 2.318zM12 20a.82.82 0 0 1-.825-.814.82.82 0 0 1 .825-.814.82.82 0 0 1 .825.814A.82.82 0 0 1 12 20zm4.125-11.25a2.879 2.879 0 0 1-2.875-2.875V1H5.5A2.5 2.5 0 0 0 3 3.5v17A2.5 2.5 0 0 0 5.5 23h13a2.5 2.5 0 0 0 2.5-2.5V8.75h-4.875z';var fillOpaque='M6 18h12V6H6v12zm14.5 1.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var fillTransparent='M15 18h3v-3h-3v3zm-6 0h3v-3H9v3zm3-3h3v-3h-3v3zm-6 0h3v-3H6v3zm9-3h3V9h-3v3zm-6 0h3V9H9v3zm3-3h3V6h-3v3zM6 9h3V6H6v3zM4.25 3.5a.75.75 0 0 0-.75.75v15.5c0 .414.337.75.75.75h15.5a.75.75 0 0 0 .75-.75V4.25a.75.75 0 0 0-.75-.75H4.25zM19.75 23H4.25A3.254 3.254 0 0 1 1 19.75V4.25A3.254 3.254 0 0 1 4.25 1h15.5A3.254 3.254 0 0 1 23 4.25v15.5A3.254 3.254 0 0 1 19.75 23z';var filter='M9 19.5a1.75 1.75 0 1 1 .001-3.501A1.75 1.75 0 0 1 9 19.5M22.25 16h-8.321c-.724-2.034-2.646-3.5-4.929-3.5S4.795 13.966 4.071 16H1.75a1.75 1.75 0 0 0 0 3.5h2.321C4.795 21.534 6.717 23 9 23s4.205-1.466 4.929-3.5h8.321a1.75 1.75 0 0 0 0-3.5M15 4.5a1.75 1.75 0 1 1-.001 3.501A1.75 1.75 0 0 1 15 4.5M1.75 8h8.321c.724 2.034 2.646 3.5 4.929 3.5s4.205-1.466 4.929-3.5h2.321a1.75 1.75 0 0 0 0-3.5h-2.321C19.205 2.466 17.283 1 15 1s-4.205 1.466-4.929 3.5H1.75a1.75 1.75 0 0 0 0 3.5';var flag='M17 7.5L22 0H2v22c0 1.1.9 2 2 2s2-.9 2-2v-7h16l-5-7.5z';var flash='M17.45 0L3.5 14h6.586L6.55 24 20.5 10h-6.586z';var flashlight='M19 1h-3v2h3c1.103 0 2 .897 2 2v3h2V5c0-2.206-1.794-4-4-4zm2 18c0 1.103-.897 2-2 2h-3v2h3c2.206 0 4-1.794 4-4v-3h-2zM3 19v-3H1v3c0 2.206 1.794 4 4 4h3v-2H5c-1.103 0-2-.897-2-2zM3 5c0-1.103.897-2 2-2h3V1H5C2.794 1 1 2.794 1 5v3h2zm6 6.5C9 10.122 10.122 9 11.5 9s2.5 1.122 2.5 2.5-1.122 2.5-2.5 2.5S9 12.878 9 11.5zm7.5 6.5a1.502 1.502 0 0 0 1.061-2.561l-2.012-2.011A4.444 4.444 0 0 0 16 11.5C16 9.019 13.981 7 11.5 7S7 9.019 7 11.5 9.019 16 11.5 16c.693 0 1.341-.17 1.928-.451l2.011 2.012c.293.293.677.439 1.061.439z';var flipHorizontal='M12 4.118v16.384H3.815L12 4.118zm10.778 15.975L13.792 2.107A1.98 1.98 0 0 0 12 1c-.712 0-1.423.37-1.792 1.107L1.22 20.093C.541 21.422 1.51 23 3.006 23h17.99c1.495 0 2.462-1.578 1.782-2.907z';var flipVertical='M19.882 12H3.498V3.814L19.882 12zm2.012-1.792L3.907 1.22A1.98 1.98 0 0 0 2.999 1C1.951 1 1 1.843 1 3.005v17.99C1 22.157 1.951 23 3 23c.3 0 .61-.07.907-.221l17.987-8.987c1.475-.737 1.475-2.847 0-3.584z';var folder='M11 5v-.5A2.5 2.5 0 0 0 8.5 2h-5A2.5 2.5 0 0 0 1 4.5v15A2.5 2.5 0 0 0 3.5 22h17a2.5 2.5 0 0 0 2.5-2.5v-12A2.5 2.5 0 0 0 20.5 5H11z';var gif='M19.5 3h-15C2.02 3 0 5.03 0 7.5v9C0 18.98 2.02 21 4.5 21h15c2.47 0 4.5-2.02 4.5-4.5v-9C24 5.03 21.97 3 19.5 3zm-7.41 12.88v-7.8h1.59v7.8h-1.59zm3.45-7.8h5.58v1.34h-4v1.88h3.39v1.35h-3.39v3.23h-1.58v-7.8zm-11.4 6.83c-.33-.37-.58-.79-.76-1.28-.17-.49-.26-1.03-.26-1.62 0-.66.11-1.26.33-1.8.22-.55.53-1.01.95-1.39.32-.29.68-.51 1.1-.66.41-.15.88-.23 1.4-.23.49 0 .93.06 1.32.19s.72.31 1 .54c.27.23.5.51.67.83.17.32.29.67.35 1.04H8.69a1.67 1.67 0 0 0-.56-.93c-.29-.24-.69-.36-1.19-.36-.37 0-.7.07-.97.21-.27.14-.5.34-.69.59-.18.25-.32.54-.41.88-.09.34-.13.7-.13 1.09 0 .4.05.77.15 1.1.1.34.25.63.43.88.19.24.42.43.69.57.27.14.57.21.9.21.31 0 .59-.05.83-.16.25-.1.46-.23.64-.4.17-.17.31-.36.4-.57.1-.21.14-.42.14-.64v-.04H7.05v-1.22h3.28v4.14H9.14l-.05-1.05h-.03c-.27.45-.58.77-.94.94a2.8 2.8 0 0 1-1.25.27c-.59 0-1.11-.1-1.56-.3-.46-.2-.85-.48-1.17-.83z';var globe='M15.49 20.83c.87-2.01 1.37-4.75 1.48-7.58h4.44a9.53 9.53 0 0 1-5.92 7.58zm-12.9-7.58h4.44c.11 2.83.61 5.57 1.49 7.58-3.15-1.25-5.47-4.12-5.93-7.58zM8.52 3.17c-.88 2.01-1.38 4.75-1.49 7.58H2.59c.46-3.46 2.78-6.33 5.93-7.58zm1.01 7.58C9.76 5.43 11.4 2.54 12 2.5h.01c.67.06 2.24 3.01 2.46 8.25H9.53zm2.48 10.75H12c-.6-.04-2.24-2.93-2.47-8.25h4.94c-.22 5.24-1.79 8.19-2.46 8.25zm9.4-10.75h-4.44c-.11-2.83-.61-5.57-1.48-7.58a9.53 9.53 0 0 1 5.92 7.58zM24 12C24 5.39 18.62.01 12.01 0H12C5.38 0 0 5.38 0 12s5.38 12 12 12h.01C18.62 24 24 18.61 24 12z';var globeChecked='M6.8 9.8H3.1C3.5 7 5.4 4.6 8 3.6c-.7 1.7-1.1 3.9-1.2 6.2m-3.7 2.1h3.7c.1 2.3.5 4.6 1.2 6.2-2.6-1-4.5-3.3-4.9-6.2m7.8-8.8c.5 0 1.8 2.4 2 6.7H8.8c.2-4.3 1.6-6.7 2.1-6.7M9.5 16.3c-.3-1.1-.6-2.6-.7-4.4h2.7c.9-1 2.1-1.7 3.5-2.1-.1-2.3-.5-4.5-1.3-6.2 2.6 1 4.4 3.3 4.9 6.1.7.1 1.5.4 2.1.8-.2-5.3-4.5-9.5-9.8-9.5C5.4 1 1 5.4 1 10.9c0 5.3 4.2 9.6 9.5 9.8-.6-1.1-1-2.3-1-3.7v-.7m10.8-.5L16.2 20l-2.5-2.5c-.3-.3-.3-.8 0-1.1.3-.3.8-.3 1 0l1.5 1.5 3.1-3.2c.2-.3.7-.3 1 0 .3.3.3.8 0 1.1M17 11c-3.3 0-6 2.7-6 6s2.7 6 6 6 6-2.7 6-6-2.7-6-6-6';var gmail='M3.173 4L12 10.194 20.556 4H3.173zM12 13.29L1 5.806V20h22V5.548L12 13.29z';var googlePlus='M7 11v2.4h3.97c-.16 1.029-1.2 3.02-3.97 3.02-2.39 0-4.34-1.979-4.34-4.42 0-2.44 1.95-4.42 4.34-4.42 1.36 0 2.27.58 2.79 1.08l1.9-1.83C10.47 5.69 8.89 5 7 5c-3.87 0-7 3.13-7 7s3.13 7 7 7c4.04 0 6.721-2.84 6.721-6.84 0-.46-.051-.81-.111-1.16H7zm17 0v2h-3v3h-2v-3h-3v-2h3V8h2v3h3z';var graphBar='M1 23V10h5v13H1zm8.5 0V1h5v22h-5zm8.5 0V7h4.999v16H18z';var handle='M3 15h18a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm0-4h18a1 1 0 0 1 0 2H3a1 1 0 0 1 0-2zm0-4h18a1 1 0 0 1 0 2H3a1 1 0 1 1 0-2z';var handPointing='M17.776,22.390 C13.775,23.978 9.246,22.359 7.219,18.770 C7.040,18.503 6.860,18.218 6.688,17.910 C5.132,15.163 3.028,13.782 2.588,13.581 C2.149,13.378 0.595,12.613 1.100,11.692 C1.381,11.180 2.163,10.801 2.878,10.726 C4.000,10.481 5.897,11.034 7.772,12.222 L4.054,3.419 C3.741,2.677 3.989,1.850 4.609,1.379 C4.612,1.376 4.616,1.373 4.621,1.369 C4.676,1.327 4.734,1.289 4.796,1.253 C4.810,1.247 4.821,1.239 4.835,1.231 C4.901,1.195 4.970,1.160 5.042,1.132 C5.044,1.131 5.044,1.131 5.045,1.131 C5.045,1.131 5.045,1.131 5.047,1.129 C5.119,1.101 5.193,1.079 5.267,1.060 C5.281,1.057 5.295,1.054 5.309,1.049 C5.380,1.035 5.449,1.021 5.518,1.013 C5.525,1.013 5.529,1.011 5.534,1.011 C6.317,0.928 7.093,1.347 7.406,2.088 L9.592,7.261 C9.643,6.623 10.055,6.035 10.709,5.776 C11.633,5.410 12.689,5.839 13.069,6.734 C13.071,6.742 13.074,6.752 13.077,6.759 C13.143,6.136 13.552,5.565 14.191,5.312 C15.117,4.946 16.173,5.373 16.551,6.271 C16.567,6.305 16.578,6.341 16.591,6.379 C16.680,5.784 17.079,5.249 17.695,5.006 C18.619,4.640 19.619,4.970 19.999,5.867 L20.001,5.872 C20.001,5.872 21.115,8.039 22.366,11.651 C22.413,11.791 22.457,11.931 22.495,12.072 C24.027,16.161 21.967,20.728 17.776,22.390';var heart='M22.178 13.583l-9.131 8.992a1.502 1.502 0 0 1-2.094 0l-9.131-8.992a6.192 6.192 0 0 1 0-8.773c2.439-2.413 6.395-2.413 8.834 0L12 6.154l1.344-1.344c2.439-2.413 6.395-2.413 8.834 0a6.192 6.192 0 0 1 0 8.773';var heartOutline='M17.76 3a6.263 6.263 0 0 0-4.416 1.809L12 6.154l-1.344-1.345A6.265 6.265 0 0 0 6.239 3a6.262 6.262 0 0 0-4.417 1.809 6.193 6.193 0 0 0 0 8.774l9.13 8.991a1.499 1.499 0 0 0 2.095 0l9.13-8.991a6.193 6.193 0 0 0 0-8.774A6.263 6.263 0 0 0 17.762 3m0 2c1.139 0 2.208.437 3.005 1.226.796.793 1.234 1.848 1.234 2.97s-.438 2.177-1.225 2.962L12 20.798l-8.766-8.632C2.438 11.373 2 10.318 2 9.196s.438-2.177 1.228-2.965A4.253 4.253 0 0 1 6.238 5c1.139 0 2.208.437 3.003 1.224l1.344 1.344L12 8.983l1.414-1.415 1.337-1.337A4.249 4.249 0 0 1 17.76 5';var heartBroken='M11.98 22.25L1.82 11.95C-.28 9.83-.65 6.4 1.18 4.03a5.763 5.763 0 0 1 8.7-.56l2.1 2.14 1.95-1.98c2.1-2.13 5.48-2.5 7.82-.65 2.8 2.23 2.99 6.35.55 8.82L11.98 22.25zM15.3 9.54c.4-.4.4-1.06 0-1.46-.4-.4-1.05-.4-1.45 0L12 9.94l-1.85-1.86c-.4-.4-1.05-.4-1.45 0-.4.4-.4 1.06 0 1.46l1.85 1.86-1.85 1.86c-.4.4-.4 1.05 0 1.45.4.4 1.05.41 1.45 0L12 12.85l1.85 1.86c.4.41 1.05.41 1.45 0 .4-.4.4-1.05 0-1.45l-1.85-1.86 1.85-1.86z';var impressum='M10 12c0-1.103.897-2 2-2s2 .897 2 2-.897 2-2 2-2-.897-2-2m2-5c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2h3c0-2.757-2.243-5-5-5S7 2.243 7 5a4.98 4.98 0 0 0 1.438 3.5A4.98 4.98 0 0 0 7 12c0 2.757 2.243 5 5 5 1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2H7c0 2.757 2.243 5 5 5s5-2.243 5-5a4.98 4.98 0 0 0-1.438-3.5A4.98 4.98 0 0 0 17 12c0-2.757-2.243-5-5-5';var infoCircle='M12 9a1.5 1.5 0 1 1-.001-2.999A1.5 1.5 0 0 1 12 9zm1.5 7.5a1.5 1.5 0 1 1-3 0v-5a1.5 1.5 0 1 1 3 0v5zM12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0z';var key='M6 14.5A2.503 2.503 0 0 1 3.5 12c0-1.378 1.122-2.5 2.5-2.5s2.5 1.122 2.5 2.5-1.122 2.5-2.5 2.5zm18-4.25H11.739a6 6 0 1 0 0 3.5H18V17h4v-3.25h2v-3.5z';var knoop='M15 10.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m0 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5m-6-6c-.83 0-1.5-.67-1.5-1.5S8.17 7.5 9 7.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5m0 6c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';var lightbulb='M20 8c0 2.23-.91 4.24-2.39 5.7h.02c-.99.97-1.6 2.31-1.63 3.8V19H8v-1.5c-.03-1.5-.65-2.85-1.64-3.83A7.955 7.955 0 0 1 4 8c0-4.42 3.58-8 8-8s8 3.58 8 8zM8 22.5V21h8v1.5c0 .83-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z';var lightningBoltCircle='M16.424 10.92l-5.149 8.58h-1.048l.902-5.625H8.024a.525.525 0 0 1-.449-.796L12.724 4.5h1.048l-.9 5.625h3.102c.41 0 .662.445.45.795M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12s12-5.373 12-12c0-6.628-5.373-12-12-12';var link='M21 15.05c1.1 0 2 .9 2 2V21c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2V3c0-1.1.9-2 2-2h4a2 2 0 1 1 0 4H5v14h14v-1.95c0-1.1.9-2 2-2zM12 14c-.51 0-1.02-.2-1.41-.59-.79-.78-.79-2.04 0-2.82L16.16 5 14 5.01c-1.1 0-2-.9-2-2 0-1.11.89-2 2-2L20.99 1h2v2l.01 7a2 2 0 1 1-4 0V7.83l-5.59 5.58c-.39.39-.9.59-1.41.59z';var location='M12 4.5c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3m7.5 3C19.5 3.36 16.14 0 12 0 7.86 0 4.5 3.36 4.5 7.5c0 1.3.36 2.5.94 3.56H5.4L12 24l6.6-12.94h-.04c.58-1.06.94-2.26.94-3.56';var lock='M8 10V7c0-2.206 1.794-4 4-4s4 1.794 4 4v3H8zm11 .017V7c0-3.86-3.141-7-7-7S5 3.14 5 7v3.017a8.698 8.698 0 0 0-1.75 5.233 8.75 8.75 0 1 0 17.5 0A8.698 8.698 0 0 0 19 10.017z';var logoLarge='M18.656 11.196l-3.333 2.573 1.25 4.089c.25.817-.687 1.477-1.359.958L12 16.334l-3.214 2.482c-.673.519-1.609-.141-1.359-.958l1.25-4.09-3.334-2.572c-.66-.511-.304-1.578.53-1.578h4.073L11.17 5.62c.252-.826 1.41-.826 1.662 0l1.222 3.998h4.075c.833 0 1.19 1.067.528 1.578zM21.75 3.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5zm0 19.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5z';var logoSmall='M15.804 14.54L13.9 16.01l.714 2.337c.143.467-.392.845-.777.547L12 17.477l-1.837 1.418c-.384.297-.92-.08-.776-.547l.714-2.337-1.904-1.47c-.378-.293-.174-.902.3-.902h2.329l.7-2.285a.495.495 0 0 1 .949 0l.699 2.285h2.328c.476 0 .68.61.302.902zM21.75 9.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5zm0 13.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5z';var logout='M12 14a2 2 0 0 0 2-2V3a2 2 0 0 0-4 0v9a2 2 0 0 0 2 2m11-2c0 2.938-1.144 5.701-3.222 7.778A10.925 10.925 0 0 1 12 23a10.925 10.925 0 0 1-7.778-3.222A10.925 10.925 0 0 1 1 12c0-2.938 1.144-5.701 3.222-7.778A2 2 0 0 1 7.05 7.051 6.952 6.952 0 0 0 5 12c0 1.87.728 3.627 2.05 4.949A6.953 6.953 0 0 0 12 19c1.87 0 3.627-.728 4.949-2.05A6.953 6.953 0 0 0 19 12c0-1.87-.728-3.627-2.05-4.949a2 2 0 1 1 2.828-2.829A10.925 10.925 0 0 1 23 12';var marginsLarge='M18.75 1A4.255 4.255 0 0 1 23 5.25v13.5A4.255 4.255 0 0 1 18.75 23H5.25A4.255 4.255 0 0 1 1 18.75V5.25A4.255 4.255 0 0 1 5.25 1h13.5zM5.5 18.5h13v-13h-13v13zm9.97-1.97l-1.5-1.5-1.47 1.47v-4h4l-1.47 1.47 1.5 1.5-1.06 1.06zM7.5 11.5l1.47-1.47-1.5-1.5 1.06-1.06 1.5 1.5L11.5 7.5v4h-4z';var marginsMedium='M7.53 6.47l1.5 1.5L10.5 6.5v4h-4l1.47-1.47-1.5-1.5 1.06-1.06zm9.97 7.03l-1.47 1.47 1.5 1.5-1.06 1.06-1.5-1.5-1.47 1.47v-4h4zm2 5.75a.25.25 0 0 1-.25.25H4.75a.25.25 0 0 1-.25-.25V4.75a.25.25 0 0 1 .25-.25h14.5a.25.25 0 0 1 .25.25v14.5zM19.25 1H4.75A3.754 3.754 0 0 0 1 4.75v14.5A3.754 3.754 0 0 0 4.75 23h14.5A3.754 3.754 0 0 0 23 19.25V4.75A3.754 3.754 0 0 0 19.25 1z';var marginsSmall='M18.5 14.5l-1.47 1.47 1.5 1.5-1.06 1.06-1.5-1.5-1.47 1.47v-4h4zM6.53 5.47l1.5 1.5L9.5 5.5v4h-4l1.47-1.47-1.5-1.5 1.06-1.06zM20.5 19.75a.75.75 0 0 1-.75.75H4.25a.75.75 0 0 1-.75-.75V4.25a.75.75 0 0 1 .75-.75h15.5a.75.75 0 0 1 .75.75v15.5zM19.75 1H4.25A3.254 3.254 0 0 0 1 4.25v15.5A3.254 3.254 0 0 0 4.25 23h15.5A3.254 3.254 0 0 0 23 19.75V4.25A3.254 3.254 0 0 0 19.75 1z';var maximize='M11 2.25c0 .69-.56 1.25-1.25 1.25H5.268l5.366 5.366a1.25 1.25 0 0 1-1.768 1.768L3.5 5.268V9.75a1.25 1.25 0 0 1-2.5 0V1h8.75c.69 0 1.25.56 1.25 1.25zM21.75 13c.69 0 1.25.56 1.25 1.25V23h-8.75a1.25 1.25 0 0 1 0-2.5h4.482l-5.366-5.366a1.25 1.25 0 0 1 1.768-1.768l5.366 5.366V14.25c0-.69.56-1.25 1.25-1.25z';var megaphone='M14 17.5c0 1.378-1.122 2.5-2.5 2.5A2.503 2.503 0 0 1 9 17.5V17h5v.5zm8.947-1.87L18.701 2.712a1.022 1.022 0 0 0-1.566-.521l-15.7 11.24c-.37.264-.525.744-.382 1.179l.551 1.678c.14.425.532.712.974.712H7v.5a4.5 4.5 0 0 0 9 0V17h5.973c.7 0 1.195-.696.974-1.37z';var menu='M21.5 9.5c1.38 0 2.5 1.13 2.5 2.5a2.5 2.5 0 0 1-2.5 2.5h-19C1.13 14.5 0 13.38 0 12c0-1.37 1.13-2.5 2.5-2.5h19zm-19-3C1.13 6.5 0 5.38 0 4c0-1.37 1.13-2.5 2.5-2.5h19C22.88 1.5 24 2.63 24 4a2.5 2.5 0 0 1-2.5 2.5h-19zm19 11c1.38 0 2.5 1.13 2.5 2.5a2.5 2.5 0 0 1-2.5 2.5h-19C1.13 22.5 0 21.38 0 20c0-1.37 1.13-2.5 2.5-2.5h19z';var minimize='M1 9.75c0-.69.56-1.25 1.25-1.25h4.482L1.366 3.134a1.25 1.25 0 0 1 1.768-1.768L8.5 6.732V2.25a1.25 1.25 0 0 1 2.5 0V11H2.25C1.56 11 1 10.44 1 9.75zM14.25 23c-.69 0-1.25-.56-1.25-1.25V13h8.75a1.25 1.25 0 0 1 0 2.5h-4.482l5.366 5.366a1.25 1.25 0 0 1-1.768 1.768L15.5 17.268v4.482c0 .69-.56 1.25-1.25 1.25z';var move='M14.3 18.17a1.25 1.25 0 0 1 1.77 0c.49.49.49 1.28 0 1.76L12 24l-4.07-4.07c-.48-.48-.48-1.27 0-1.76a1.25 1.25 0 0 1 1.77 0l1.05 1.04v-3.96a1.25 1.25 0 0 1 2.5 0v3.96l1.05-1.04zm-9.51-4.92l1.04 1.05c.49.49.49 1.28 0 1.77-.48.48-1.28.48-1.76 0L0 12l4.07-4.07c.48-.48 1.28-.48 1.76 0 .49.49.49 1.28 0 1.77l-1.04 1.05h3.96a1.25 1.25 0 0 1 0 2.5H4.79zm15.14-5.32L24 12l-4.07 4.07c-.48.48-1.27.48-1.76 0a1.25 1.25 0 0 1 0-1.77l1.04-1.05h-3.96a1.25 1.25 0 0 1 0-2.5h3.96L18.17 9.7a1.25 1.25 0 0 1 0-1.77c.49-.48 1.28-.48 1.76 0zM9.7 5.83c-.49.49-1.28.49-1.77 0-.48-.49-.48-1.28 0-1.76L12 0l4.07 4.07c.49.48.49 1.27 0 1.76s-1.28.49-1.77 0l-1.05-1.04v3.96a1.25 1.25 0 0 1-2.5 0V4.79L9.7 5.83z';var mute='M5.00,7.94 L5.00,7.96 L12.00,1.00 L12.00,23.00 L5.00,16.91 L5.00,16.94 L2.00,16.94 C0.90,16.94 0.00,16.04 0.00,14.94 L0.00,9.94 C0.00,8.83 0.90,7.94 2.00,7.94 L5.00,7.94 Z M23.63,14.12 C24.12,14.60 24.12,15.39 23.63,15.88 C23.15,16.37 22.35,16.37 21.87,15.88 L19.75,13.77 L17.63,15.88 C17.15,16.37 16.35,16.37 15.87,15.88 C15.38,15.39 15.38,14.60 15.87,14.12 L17.98,12.00 L15.87,9.88 C15.38,9.39 15.38,8.60 15.87,8.12 C16.35,7.63 17.15,7.63 17.63,8.12 L19.75,10.23 L21.86,8.12 C22.35,7.63 23.15,7.63 23.63,8.12 C24.12,8.60 24.12,9.40 23.63,9.88 L21.52,12.00 L23.63,14.12 Z';var overlayText='M20 1a3 3 0 0 1 3 3v16a3 3 0 0 1-3 3H4a3 3 0 0 1-3-3V4a3 3 0 0 1 3-3h16zm-6.718 4.133a1.403 1.403 0 0 0-2.564 0l-5.597 12.6a1.396 1.396 0 0 0 .714 1.846 1.401 1.401 0 0 0 1.85-.711L8.56 16.9h6.882l.874 1.967a1.404 1.404 0 0 0 1.851.71 1.397 1.397 0 0 0 .713-1.845l-5.597-12.6zM9.803 14.1L12 9.155l2.197 4.945H9.803z';var pause='M7 0c1.65 0 3 1.35 3 3v18c0 1.65-1.35 3-3 3s-3-1.35-3-3V3c0-1.65 1.35-3 3-3zm10 0c1.65 0 3 1.35 3 3v18c0 1.65-1.35 3-3 3s-3-1.35-3-3V3c0-1.65 1.35-3 3-3z';var people='M8 11a4.5 4.5 0 1 1 0-9 4.5 4.5 0 0 1 0 9zm10 3c3.314 0 6 2.713 6 6.061V22H0v-1.919C0 15.618 3.582 12 8 12c2.614 0 4.927 1.272 6.387 3.23A5.927 5.927 0 0 1 18 14zm0-1a3.25 3.25 0 1 1 0-6.5 3.25 3.25 0 0 1 0 6.5z';var PersonSvg='M12 12c5.523 0 10 4.477 10 10v2H2v-2c0-5.523 4.477-10 10-10zm0-1a5.5 5.5 0 1 1 0-11 5.5 5.5 0 1 1 0 11z';var personAdd='M16.5 12a7.5 7.5 0 0 1 7.5 7.5V21H9v-1.5a7.5 7.5 0 0 1 7.5-7.5zm0-1a4 4 0 1 1 0-8 4 4 0 0 1 0 8zm-7.25 1H6.5v2.75a1.25 1.25 0 0 1-2.5 0V12H1.25a1.25 1.25 0 0 1 0-2.5H4V6.75a1.25 1.25 0 0 1 2.5 0V9.5h2.75a1.25 1.25 0 0 1 0 2.5z';var phone='M21.7 21.7a4.5 4.5 0 01-4.09 1.22A20.29 20.29 0 011.11 6.51 4.5 4.5 0 018.7 2.32 4.5 4.5 0 016.86 9.8a15.87 15.87 0 007.38 7.38 4.46 4.46 0 017.45-1.83 4.5 4.5 0 010 6.36';var pin='M18 13.5c0-2.22-1.21-4.15-3-5.19V2.45A2.5 2.5 0 0 0 17 0H7a2.5 2.5 0 0 0 2 2.45v5.86c-1.79 1.04-3 2.97-3 5.19h5v8.46L12 24l1-2.04V13.5h5z';var pinHide='M9.13 6.37c.49.48.49 1.27 0 1.76l-2.61 2.62 2.61 2.62c.49.48.49 1.27 0 1.76-.48.49-1.27.49-1.76 0l-2.62-2.61-2.62 2.61c-.48.49-1.28.49-1.76 0-.49-.49-.49-1.28 0-1.76l2.61-2.62L.37 8.13c-.49-.49-.49-1.28 0-1.76.48-.49 1.28-.49 1.76 0l2.62 2.61 2.62-2.61c.49-.49 1.28-.49 1.76 0zM20.5 8.69c1.49.87 2.5 2.46 2.5 4.31h-4v7.96L18 23l-1-2.04V13h-4c0-1.85 1.01-3.44 2.5-4.31V2.93c-.86-.22-1.5-1-1.5-1.93h8c0 .93-.64 1.71-1.5 1.93v5.76z';var pinterest='M0 12c0 5.123 3.211 9.497 7.73 11.218-.11-.937-.227-2.482.025-3.566.217-.932 1.401-5.938 1.401-5.938s-.357-.715-.357-1.774c0-1.66.962-2.9 2.161-2.9 1.02 0 1.512.765 1.512 1.682 0 1.025-.653 2.557-.99 3.978-.281 1.189.597 2.159 1.769 2.159 2.123 0 3.756-2.239 3.756-5.471 0-2.861-2.056-4.86-4.991-4.86-3.398 0-5.393 2.549-5.393 5.184 0 1.027.395 2.127.889 2.726a.36.36 0 0 1 .083.343c-.091.378-.293 1.189-.332 1.355-.053.218-.173.265-.4.159-1.492-.694-2.424-2.875-2.424-4.627 0-3.769 2.737-7.229 7.892-7.229 4.144 0 7.365 2.953 7.365 6.899 0 4.117-2.595 7.431-6.199 7.431-1.211 0-2.348-.63-2.738-1.373 0 0-.599 2.282-.744 2.84-.282 1.084-1.064 2.456-1.549 3.235C9.584 23.815 10.77 24 12 24c6.627 0 12-5.373 12-12S18.627 0 12 0 0 5.373 0 12';var play='M20.62 9.48L6.63.48C4.63-.8 2 .63 2 3v18c0 2.37 2.63 3.8 4.63 2.52l13.99-9c1.84-1.18 1.84-3.86 0-5.04';var questionMark='M14.34 21.2c0 1.57-1.19 2.8-2.78 2.8-1.58 0-2.77-1.23-2.77-2.8 0-1.57 1.19-2.8 2.77-2.8 1.59 0 2.78 1.23 2.78 2.8m-2.53-10.88c1.41-1.23 3.3-2.05 3.3-3.87 0-1.45-1.24-2.36-2.95-2.36-2.12 0-3.52 1.48-3.55 3.43H3.75C3.88 3.3 6.96 0 12.34 0c4.86 0 7.91 2.52 7.91 6.32 0 2.36-1.09 3.81-2.3 4.78-1.68 1.33-2.84 1.89-3.49 2.61-.5.57-.62 1.04-.65 1.95H9.45c0-2.64.65-3.9 2.36-5.34';var refresh='M4.465 4H2.5a1.5 1.5 0 1 1 0-3h7v7.5a1.5 1.5 0 1 1-3 0V6.216C4.942 7.705 4 9.783 4 12c0 4.411 3.589 8 8 8s8-3.589 8-8a7.976 7.976 0 0 0-7.156-7.956 1.5 1.5 0 0 1 .312-2.983A10.967 10.967 0 0 1 23 12c0 6.065-4.934 11-11 11-6.065 0-11-4.935-11-11 0-3.068 1.299-5.951 3.465-8';var remove='M17.75 13.25H6.25a1.25 1.25 0 0 1 0-2.5h11.5a1.25 1.25 0 0 1 0 2.5M12 0C5.37 0 0 5.37 0 12s5.37 12 12 12 12-5.37 12-12S18.63 0 12 0';var reorderImages='M22 4.25a1.25 1.25 0 0 0-2.5 0v1.618C17.473 3.465 14.493 2 11.299 2 7.606 2 4.205 3.887 2.201 7.048a1.292 1.292 0 0 0 .375 1.769 1.243 1.243 0 0 0 1.739-.381c1.539-2.427 4.15-3.876 6.984-3.876 2.436 0 4.706 1.115 6.261 2.94h-1.31a1.25 1.25 0 0 0 0 2.5H22V4.25zM19 12a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1h-4zm-8 0a1 1 0 0 0-1 1v7a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-7a1 1 0 0 0-1-1h-4zm-4-1H1a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z';var replace='M9.75 20.5h-2c-.965 0-1.75-.785-1.75-1.75v-1l.437.437a1.248 1.248 0 0 0 1.768 0 1.25 1.25 0 0 0 0-1.768L4.786 13l-3.42 3.419a1.25 1.25 0 0 0 1.768 1.768l.366-.366v.929A4.255 4.255 0 0 0 7.75 23h2a1.25 1.25 0 0 0 0-2.5zm4.5-17h2c.965 0 1.75.785 1.75 1.75v1l-.438-.437a1.25 1.25 0 1 0-1.767 1.768L19.214 11l3.42-3.419a1.25 1.25 0 0 0-1.768-1.768l-.366.366V5.25A4.255 4.255 0 0 0 16.25 1h-2a1.25 1.25 0 0 0 0 2.5zm1.25 17h5v-5h-5v5zM23 15v6a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-6a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2zM11 3v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2z';var report='M7.91 18.89A8.013 8.013 0 0 0 18.89 7.91L7.91 18.89zm-2.82-2.83L16.06 5.09A8.015 8.015 0 0 0 5.09 16.06zM12 24C5.37 24 0 18.63 0 12S5.37 0 12 0s12 5.37 12 12-5.37 12-12 12z';var rotate='M11.003 9.96c1.105 0 2 .899 2 2.006v9.028a2.004 2.004 0 0 1-2 2.006H2.001C.896 23 0 22.102 0 20.994v-9.028C0 10.86.896 9.96 2 9.96h9.003zm12.63 1.872c.489.49.489 1.283 0 1.773l-3.885 3.896-3.878-3.897a1.256 1.256 0 0 1 .002-1.773 1.248 1.248 0 0 1 1.768.002l.865.87V7.27a3.76 3.76 0 0 0-3.75-3.762H7.251c-.69 0-1.25-.562-1.25-1.254 0-.693.56-1.254 1.25-1.254h7.502c3.447 0 6.252 2.812 6.252 6.27v5.424l.86-.862c.489-.49 1.28-.49 1.768 0z';var scale='M20.5 6.75V5.268L13.768 12l6.732 6.732V17.25a1.25 1.25 0 0 1 2.5 0V23h-5.75a1.25 1.25 0 0 1 0-2.5h1.482L12 13.768 5.268 20.5H6.75a1.25 1.25 0 0 1 0 2.5H1v-5.75a1.25 1.25 0 0 1 2.5 0v1.482L10.232 12 3.5 5.268V6.75a1.25 1.25 0 0 1-2.5 0V1h5.75a1.25 1.25 0 0 1 0 2.5H5.268L12 10.232 18.732 3.5H17.25a1.25 1.25 0 0 1 0-2.5H23v5.75a1.25 1.25 0 0 1-2.5 0';var search='M10 16c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6m13.12 2.88l-4.26-4.26A9.842 9.842 0 0 0 20 10c0-5.52-4.48-10-10-10S0 4.48 0 10s4.48 10 10 10c1.67 0 3.24-.41 4.62-1.14l4.26 4.26a3 3 0 0 0 4.24 0 3 3 0 0 0 0-4.24';var security='M21 9.587c0 6.06-3.721 11.246-9 13.413-5.279-2.167-9-7.353-9-13.413V3a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.587z';var send='M.461 2.427L.43 2.46a1.474 1.474 0 0 0-.282 1.68L3 10.5 16 12 3 13.5.147 19.86a1.474 1.474 0 0 0 .277 1.674l.041.042c.403.388 1.013.56 1.626.3l20.99-8.493c.185-.078.343-.184.472-.31l.034-.033c.686-.71.517-1.994-.507-2.423L2.09 2.123A1.52 1.52 0 0 0 1.496 2c-.398 0-.764.164-1.035.427z';var share='M21 14c1.1 0 2 .9 2 2v6c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2v-6c0-1.1.9-2 2-2s2 .9 2 2v4h14v-4c0-1.1.9-2 2-2zM8.82 8.84c-.78.78-2.05.79-2.83 0-.78-.78-.79-2.04-.01-2.82L11.99 0l6.02 6.01c.78.78.79 2.05.01 2.83-.78.78-2.05.79-2.83 0l-1.2-1.19v6.18a2 2 0 1 1-4 0V7.66L8.82 8.84z';var shoppingBag='M9.5 5a2.5 2.5 0 0 1 5 0v2h-5V5zM17 7V5c0-2.76-2.24-5-5-5S7 2.24 7 5v2H2v15c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7h-5z';var smiley='M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71z';var smileyOutline='M12.03 19.29h-.06c-3.48-.03-4.92-2.31-4.98-2.41a.896.896 0 0 1 .27-1.22.82.82 0 0 1 1.17.26c.06.08 1.06 1.58 3.57 1.59 2.51-.01 3.52-1.6 3.56-1.67.25-.41.78-.54 1.18-.28.39.26.52.8.28 1.21-.06.1-1.5 2.49-4.99 2.52zM18 9.43c0 .95-.77 1.71-1.71 1.71-.95 0-1.72-.76-1.72-1.71s.77-1.72 1.72-1.72c.94 0 1.71.77 1.71 1.72zm-12 0c0-.95.77-1.72 1.71-1.72.95 0 1.72.77 1.72 1.72s-.77 1.71-1.72 1.71c-.94 0-1.71-.76-1.71-1.71zM12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 22.2C6.45 22.2 1.8 17.7 1.8 12 1.8 6.3 6.3 1.8 12 1.8c5.7 0 10.2 4.5 10.2 10.2 0 5.7-4.65 10.2-10.2 10.2z';var sound='M20.48 3.51A11.92 11.92 0 0 1 24 12c0 3.2-1.25 6.22-3.51 8.48-.25.25-.57.37-.89.37-.32 0-.64-.12-.88-.37-.49-.48-.49-1.27 0-1.76A9.465 9.465 0 0 0 21.5 12c0-2.54-.99-4.93-2.79-6.72-.48-.49-.48-1.28 0-1.77a1.25 1.25 0 0 1 1.77 0zM5 7.94v.02L12 1v22l-7-6.09v.03H2c-1.1 0-2-.9-2-2v-5a2 2 0 0 1 2-2h3zm11.95-.89A6.96 6.96 0 0 1 19 12c0 1.87-.73 3.63-2.05 4.95-.24.24-.56.36-.88.36-.32 0-.64-.12-.89-.36a1.25 1.25 0 0 1 0-1.77c.85-.85 1.32-1.98 1.32-3.18 0-1.2-.47-2.33-1.32-3.18a1.25 1.25 0 0 1 0-1.77 1.25 1.25 0 0 1 1.77 0z';var sortAscending='M4.586 8.415a2 2 0 1 0 2.828 2.828L10 8.657V21a2 2 0 0 0 4 0V8.657l2.586 2.586a2 2 0 1 0 2.828-2.828L12 1 4.586 8.415z';var sortDescending='M4.586 15.585a2 2 0 1 1 2.828-2.828L10 15.343V3a2 2 0 0 1 4 0v12.343l2.586-2.586a2 2 0 1 1 2.828 2.828L12 23l-7.414-7.415z';var speech='M12 0C5.85 0 .75 4.94.75 11.08c0 2.7.9 5.24 2.7 7.19L2.1 23.51c-.15.3.3.6.6.45l5.25-2.55c1.35.45 2.7.75 4.05.75 6.15 0 11.25-4.94 11.25-11.08S18.15 0 12 0';var speechEllipsis='M18 12.5a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 18 12.5m-6 0a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 12 12.5m-6 0a1.5 1.5 0 1 1 .001-3.001A1.5 1.5 0 0 1 6 12.5M12 0C5.925 0 1 4.925 1 11c0 2.653.94 5.086 2.504 6.986L2 24l5.336-3.049A10.93 10.93 0 0 0 12 22c6.075 0 11-4.925 11-11S18.075 0 12 0';var star='M23.56 10.6c.86-.87.39-2.4-.8-2.58l-5.78-.87a1.46 1.46 0 0 1-1.1-.83L13.3.84a1.42 1.42 0 0 0-2.6 0L8.11 6.32c-.2.44-.61.75-1.09.83l-5.78.87C.05 8.2-.42 9.73.44 10.61l4.18 4.26c.34.35.5.85.42 1.34l-.99 6.01c-.2 1.24 1.04 2.19 2.1 1.6l5.18-2.84a1.4 1.4 0 0 1 1.35 0l5.16 2.84c1.07.59 2.31-.36 2.1-1.6l-.98-6.01c-.08-.5.08-1 .42-1.34l4.18-4.26z';var starHalf='M12 0c-.52 0-1.03.28-1.3.84L8.12 6.33c-.22.44-.62.75-1.1.83l-5.78.87c-1.19.19-1.66 1.71-.8 2.59l4.18 4.26c.34.35.5.85.42 1.34l-.99 6.02c-.2 1.23 1.04 2.18 2.1 1.6l5.17-2.85c.22-.11.45-.17.68-.17V0z';var storyPin='M15.25 0h-6.5a1.75 1.75 0 000 3.5h6.5c2.9 0 5.25 2.35 5.25 5.25v6.5a1.75 1.75 0 103.5 0v-6.5A8.76 8.76 0 0015.25 0m-.75 6.5H3a3 3 0 00-3 3V21a3 3 0 003 3h11.5a3 3 0 003-3V9.5a3 3 0 00-3-3';var switchAccount='M7.184 22.56a1.5 1.5 0 0 0-.002-2.121l-1.442-1.44 8.76-.003a1.5 1.5 0 1 0-.001-3l-8.755.003 1.437-1.44a1.5 1.5 0 1 0-2.123-2.118L0 17.508l5.063 5.054a1.5 1.5 0 0 0 2.121-.002m9.637-10.998a1.501 1.501 0 0 1-.002-2.121L18.256 8 9.5 8.005a1.5 1.5 0 0 1-.001-3L18.26 5l-1.442-1.44a1.494 1.494 0 0 1-.441-1.061 1.498 1.498 0 0 1 2.56-1.061L24 6.493l-5.058 5.067a1.5 1.5 0 0 1-2.121.002';var tag='M6 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2m7.36-6.2l8.84 8.84a2.71 2.71 0 0 1 0 3.85l-7.71 7.71a2.71 2.71 0 0 1-3.85 0L1.8 13.36c-.51-.51-.8-1.2-.8-1.92V3.73C1 2.22 2.22 1 3.73 1h7.71c.72 0 1.41.29 1.92.8';var terms='M21 18H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 17a3 3 0 1 0 0 6 3 3 0 0 0 0-6m17-7H11a2 2 0 1 0 0 4h10a2 2 0 1 0 0-4M4 9a3 3 0 1 0 0 6 3 3 0 0 0 0-6m7-3h10a2 2 0 1 0 0-4H11a2 2 0 1 0 0 4M7 4a3 3 0 1 1-6 0 3 3 0 0 1 6 0';var textAlignCenter='M0 4.5h24v-3H0v3zm3 6h18V7.499H3V10.5zm-3 6h24v-3H0v3zm3 6h18v-3H3v3z';var textAlignLeft='M0 4.5h24v-3H0v3zm0 6h18V7.499H0V10.5zm0 6h24v-3H0v3zm0 6h18v-3H0v3z';var textAlignRight='M24 4.5H0v-3h24v3zm0 6H6v-3h18v3zm0 6H0v-3h24v3zm0 6H6v-3h18v3z';var textAllCaps='M16.774 13.704L18.5 9.689l1.726 4.015h-3.453zm7.13 2.948L19.509 6.426A1.102 1.102 0 0 0 18.5 5.75c-.436 0-.831.265-1.008.676l-4.398 10.226a1.152 1.152 0 0 0 .56 1.5c.146.066.297.098.447.098.423 0 .826-.253 1.008-.676l.687-1.597h5.407l.687 1.597c.247.573.897.833 1.454.578.556-.255.807-.926.56-1.5zm-20.13-2.948L5.5 9.689l1.726 4.015H3.774zm2.734-7.278A1.102 1.102 0 0 0 5.5 5.75c-.436 0-.831.265-1.008.676L.095 16.652a1.152 1.152 0 0 0 .56 1.5c.146.066.297.098.447.098.423 0 .826-.253 1.008-.676l.687-1.597h5.407l.687 1.597c.247.573.897.833 1.454.578.556-.255.807-.926.56-1.5L6.508 6.426z';var textExtraSmall='M2.25 11.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 9a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 13c.218 0 .416.127.504.324l2.199 4.91A.545.545 0 0 1 14.2 19a.55.55 0 0 1-.504-.325l-.344-.766h-2.703l-.344.766a.553.553 0 0 1-.727.278.543.543 0 0 1-.28-.72l2.198-4.909A.553.553 0 0 1 12 13zm-.863 3.818h1.727L12 14.891l-.863 1.927z';var textLarge='M2.25 3.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 17a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 5c.508 0 .968.297 1.174.757l5.131 11.454a1.266 1.266 0 0 1-.654 1.678 1.288 1.288 0 0 1-1.696-.647l-.8-1.788h-6.31l-.8 1.788a1.29 1.29 0 0 1-1.697.647 1.266 1.266 0 0 1-.654-1.678l5.13-11.454C11.03 5.297 11.491 5 12 5zm-2.014 8.908h4.027L12 9.413l-2.014 4.495z';var textLineHeight='M16 9l-4-4-4 4h2.5v6H8l4 4 4-4h-2.5V9H16zm5.75 11.5H2.25a1.25 1.25 0 0 0 0 2.5h19.5a1.25 1.25 0 0 0 0-2.5zM1 2.25C1 1.56 1.56 1 2.25 1h19.5a1.25 1.25 0 0 1 0 2.5H2.25C1.56 3.5 1 2.94 1 2.25z';var textMedium='M2.25 6.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 14a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 8c.399 0 .762.232.923.595l4.032 9a.996.996 0 0 1-.515 1.319 1.013 1.013 0 0 1-1.333-.51L14.479 17H9.522l-.629 1.404a1.014 1.014 0 0 1-1.333.51.996.996 0 0 1-.515-1.319l4.031-9A1.01 1.01 0 0 1 12 8zm-1.582 7h3.164L12 11.467 10.418 15z';var textSentenceCase='M19.793 16.028h-2.759a.831.831 0 0 1-.827-.833c0-.46.371-.834.827-.834h2.759v1.667zm-.828-7.778h-3.31c-.609 0-1.103.498-1.103 1.111 0 .614.494 1.111 1.103 1.111h3.31c.457 0 .828.374.828.834v.833h-2.759c-1.673 0-3.034 1.371-3.034 3.056s1.361 3.055 3.034 3.055h3.862c.61 0 1.104-.497 1.104-1.111v-5.833c0-1.685-1.362-3.056-3.035-3.056zM5.774 13.705L7.5 9.69l1.726 4.015H5.774zm7.131 2.948L8.507 6.426A1.1 1.1 0 0 0 7.5 5.75a1.1 1.1 0 0 0-1.007.676L2.095 16.653c-.247.574.004 1.245.561 1.499.145.067.296.098.446.098.422 0 .825-.252 1.008-.676l.686-1.597h5.408l.686 1.597c.247.574.897.833 1.454.578.557-.254.808-.925.561-1.499z';var textSize='M2.916 16.545l1.334-3.051 1.334 3.051H2.916zm2.112-5.532a.85.85 0 0 0-.778-.513.852.852 0 0 0-.78.513L.074 18.786a.869.869 0 0 0 .434 1.139.846.846 0 0 0 1.123-.439l.53-1.214H6.34l.53 1.214a.852.852 0 0 0 .78.514.844.844 0 0 0 .344-.075.869.869 0 0 0 .434-1.139l-3.4-7.773zm9.446 3.168l2.276-5.138 2.276 5.138h-4.552zm9.4 3.774l-5.796-13.09a1.453 1.453 0 0 0-2.656 0l-5.797 13.09a1.455 1.455 0 0 0 .739 1.919 1.451 1.451 0 0 0 1.917-.74l.905-2.044h7.128l.905 2.044a1.453 1.453 0 1 0 2.656-1.179z';var textSmall='M2.25 9.5a1.25 1.25 0 0 1 0-2.5h19.5a1.25 1.25 0 0 1 0 2.5H2.25zm19.5 11a1.25 1.25 0 0 1 0 2.5H2.25a1.25 1.25 0 0 1 0-2.5h19.5zM12 11c.29 0 .554.169.671.433l2.932 6.545a.724.724 0 0 1-.67 1.022.735.735 0 0 1-.673-.432l-.458-1.023h-3.604l-.458 1.023a.74.74 0 0 1-.97.37.725.725 0 0 1-.374-.96l2.932-6.545A.734.734 0 0 1 12 11zm-1.15 5.09h2.301l-1.15-2.568-1.152 2.569z';var textSpacing='M20 15l4 4-4 4v-2.5H4V23l-4-4 4-4v2.5h16V15zM5.5 4.782l1.727 3.854H3.774L5.5 4.782zM.656 12.906a1.104 1.104 0 0 0 1.454-.555l.686-1.533h5.408l.686 1.533c.247.551.897.8 1.454.555.557-.244.808-.889.561-1.44L6.508 1.649A1.103 1.103 0 0 0 5.5 1a1.1 1.1 0 0 0-1.007.649L.095 11.466a1.087 1.087 0 0 0 .561 1.44zm15.526-4.815h4.273a1.365 1.365 0 0 1 0 2.727h-4.273V8.091zm0-4.909h3.727c.752 0 1.364.612 1.364 1.363 0 .752-.612 1.364-1.364 1.364h-3.727V3.182zM15.091 13h5.364A3.55 3.55 0 0 0 24 9.455a3.54 3.54 0 0 0-1.295-2.738c.468-.6.75-1.353.75-2.172A3.55 3.55 0 0 0 19.909 1h-4.818A1.09 1.09 0 0 0 14 2.091v9.818A1.09 1.09 0 0 0 15.091 13z';var trashCan='M4.878 22.116A2 2 0 0 0 6.875 24h10.229a2 2 0 0 0 1.995-1.881L20 7H4l.88 15.116zM22 3.5A1.5 1.5 0 0 1 20.5 5h-17a1.5 1.5 0 0 1 0-3h6V1a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v1h6A1.5 1.5 0 0 1 22 3.5z';var twitter='M7.548 21.5c9.056 0 14.01-7.31 14.01-13.65 0-.208 0-.414-.015-.62A9.88 9.88 0 0 0 24 4.747c-.899.388-1.852.642-2.828.754a4.838 4.838 0 0 0 2.165-2.653c-.967.559-2.024.953-3.127 1.164-1.526-1.58-3.952-1.968-5.916-.944-1.964 1.025-2.98 3.205-2.475 5.32C7.859 8.194 4.17 6.372 1.67 3.375.363 5.567 1.031 8.372 3.195 9.78a4.986 4.986 0 0 1-2.235-.6v.06c0 2.284 1.653 4.25 3.95 4.703a5.042 5.042 0 0 1-2.223.082c.645 1.954 2.494 3.293 4.6 3.332A10.048 10.048 0 0 1 0 19.345a14.21 14.21 0 0 0 7.548 2.151';var videoCamera='M16 8v8c0 1.1-.9 2-2 2H3c-1.1 0-2-.9-2-2V8c0-1.1.9-2 2-2h11c1.1 0 2 .9 2 2zm6.18-.38l-3.67 3.26a1.5 1.5 0 0 0 0 2.24l3.67 3.26c.32.28.82.04.82-.39V8.01c0-.43-.5-.67-.82-.39z';var viewTypeDefault='M13.5 24V13.5H24V24H13.5zM0 10.5V0h10.5v10.5H0zm13.5 0V0H24v10.5H13.5zM0 24V13.5h10.5V24H0z';var viewTypeDense='M17.999 24H24v-6h-6.001v6zm-9-17.999V0h6v6.001H9zM0 6.001V0h6v6.001H0zm17.999 0V0H24v6.001h-6.001zM0 15.001V9h6v6H0zm9 0V9h6v6H9zm8.999 0V9H24v6h-6.001zM0 24v-6h6v6H0zm9 0v-6h6v6H9z';var viewTypeList='M0 13.502v-3h24v3H0zm0-7.5V3h24v3.002H0zm0 15v-3h24v3H0z';var workflowStatusAll='M11 6c0 2.76-2.24 5-5 5S1 8.76 1 6s2.24-5 5-5 5 2.24 5 5zm7 5c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM6 13c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm12 0c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5z';var workflowStatusHalted='M10.5 9v6a1.5 1.5 0 1 1-3 0V9a1.5 1.5 0 1 1 3 0zM15 7.5c-.83 0-1.5.67-1.5 1.5v6a1.5 1.5 0 1 0 3 0V9c0-.83-.67-1.5-1.5-1.5zm9 4.5a12 12 0 1 1-24 0 12 12 0 0 1 24 0zm-3 0c0-4.96-4.04-9-9-9s-9 4.04-9 9 4.04 9 9 9 9-4.04 9-9z';var workflowStatusInProgress='M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zM3 12c0-4.96 4.04-9 9-9v18c-4.96 0-9-4.04-9-9z';var workflowStatusOk='M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm5.56 10.06l-6 6a1.5 1.5 0 0 1-2.12 0l-3-3a1.5 1.5 0 0 1 0-2.12 1.5 1.5 0 0 1 2.12 0l1.94 1.94 4.94-4.94a1.5 1.5 0 0 1 2.12 0 1.5 1.5 0 0 1 0 2.12z';var workflowStatusProblem='M23.6 18.5L14.63 2.53a3 3 0 0 0-5.24 0L.4 18.5A3.02 3.02 0 0 0 3 23h18c2.29 0 3.74-2.49 2.6-4.5zm-7.54-1.06a1.5 1.5 0 0 1 0 2.12 1.5 1.5 0 0 1-2.12 0l-1.95-1.94-1.94 1.94a1.5 1.5 0 0 1-2.12 0 1.5 1.5 0 0 1 0-2.12l1.94-1.94-1.94-1.94a1.5 1.5 0 0 1 0-2.12 1.5 1.5 0 0 1 2.12 0L12 13.38l1.95-1.94a1.5 1.5 0 0 1 2.12 0 1.5 1.5 0 0 1 0 2.12l-1.94 1.94 1.94 1.94z';var workflowStatusUnstarted='M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm0 21c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm1.75-9c0 .97-.78 1.75-1.75 1.75s-1.75-.78-1.75-1.75.78-1.75 1.75-1.75 1.75.78 1.75 1.75z';var workflowStatusWarning='M23.12 9.87l-9-9a3.01 3.01 0 0 0-4.25 0l-9 9a3.01 3.01 0 0 0 0 4.26l9 9a3.01 3.01 0 0 0 4.26 0l9-9a3.01 3.01 0 0 0 0-4.26zM12 19.01a1.56 1.56 0 1 1 0-3.13 1.56 1.56 0 0 1 0 3.13zm1.57-6.22a1.56 1.56 0 0 1-3.13 0V6.55a1.56 1.56 0 0 1 3.13 0v6.24z';var icons={ad:ad,'ad-group':adGroup,add:add,'add-circle':addCircle,'add-layout':addLayout,'add-pin':addPin,'ads-stats':adsStats,'ads-overview':adsOverview,alert:alert,'align-bottom-center':alignBottomCenter,'align-bottom-left':alignBottomLeft,'align-bottom-right':alignBottomRight,'align-bottom':alignBottom,'align-middle':alignMiddle,'align-top-center':alignTopCenter,'align-top-left':alignTopLeft,'align-top-right':alignTopRight,'align-top':alignTop,'android-share':androidShare,'angled-pin':angledPin,apps:apps,'arrow-back':arrowBack,'arrow-circle-down':arrowCircleDown,'arrow-circle-forward':arrowCircleForward,'arrow-circle-up':arrowCircleUp,'arrow-down':arrowDown,'arrow-end':arrowEnd,'arrow-forward':arrowForward,'arrow-start':arrowStart,'arrow-up':arrowUp,'arrow-up-right':arrowUpRight,bell:bell,calendar:calendar,camera:camera,'camera-roll':cameraRoll,cancel:cancel,'canonical-pin':canonicalPin,'color-picker':colorPicker,check:check,'check-circle':checkCircle,'circle-outline':circleOutline,clear:clear,clock:clock,code:code,cog:cog,compass:compass,compose:compose,crop:crop,dash:dash,'conversion-tag':conversionTag,'credit-card':creditCard,'directional-arrow-left':directionalArrowLeft,'directional-arrow-right':directionalArrowRight,download:download,duplicate:duplicate,edit:edit,ellipsis:ellipsis,'ellipsis-circle-outline':ellipsisCircleOutline,envelope:envelope,eye:eye,facebook:facebook,'face-happy':faceHappy,'face-sad':faceSad,'face-smiley':faceSmiley,'file-unknown':fileUnknown,'fill-opaque':fillOpaque,'fill-transparent':fillTransparent,filter:filter,flag:flag,flash:flash,flashlight:flashlight,flipHorizontal:flipHorizontal,flipVertical:flipVertical,folder:folder,gif:gif,globe:globe,'globe-checked':globeChecked,gmail:gmail,'google-plus':googlePlus,'graph-bar':graphBar,handle:handle,'hand-pointing':handPointing,heart:heart,'heart-outline':heartOutline,'heart-broken':heartBroken,impressum:impressum,'info-circle':infoCircle,key:key,knoop:knoop,lightbulb:lightbulb,'lightning-bolt-circle':lightningBoltCircle,link:link,location:location,lock:lock,'logo-large':logoLarge,'logo-small':logoSmall,logout:logout,'margins-large':marginsLarge,'margins-medium':marginsMedium,'margins-small':marginsSmall,maximize:maximize,megaphone:megaphone,menu:menu,minimize:minimize,move:move,mute:mute,'overlay-text':overlayText,pause:pause,people:people,person:PersonSvg,'person-add':personAdd,phone:phone,pin:pin,'pin-hide':pinHide,pinterest:pinterest,play:play,refresh:refresh,'question-mark':questionMark,remove:remove,'reorder-images':reorderImages,replace:replace,report:report,rotate:rotate,scale:scale,search:search,security:security,'shopping-bag':shoppingBag,smiley:smiley,'smiley-outline':smileyOutline,send:send,share:share,sound:sound,'sort-ascending':sortAscending,'sort-descending':sortDescending,speech:speech,'speech-ellipsis':speechEllipsis,star:star,'star-half':starHalf,'story-pin':storyPin,'switch-account':switchAccount,tag:tag,terms:terms,'text-align-left':textAlignLeft,'text-align-center':textAlignCenter,'text-align-right':textAlignRight,'text-all-caps':textAllCaps,'text-extra-small':textExtraSmall,'text-large':textLarge,'text-line-height':textLineHeight,'text-medium':textMedium,'text-sentence-case':textSentenceCase,'text-size':textSize,'text-small':textSmall,'text-spacing':textSpacing,'trash-can':trashCan,twitter:twitter,'video-camera':videoCamera,'view-type-default':viewTypeDefault,'view-type-dense':viewTypeDense,'view-type-list':viewTypeList,'workflow-status-all':workflowStatusAll,'workflow-status-halted':workflowStatusHalted,'workflow-status-in-progress':workflowStatusInProgress,'workflow-status-ok':workflowStatusOk,'workflow-status-problem':workflowStatusProblem,'workflow-status-unstarted':workflowStatusUnstarted,'workflow-status-warning':workflowStatusWarning};var IconNames=Object.keys(icons);var flipOnRtlIconNames=['ads-stats','ads-overview','arrow-back','arrow-circle-forward','arrow-end','arrow-forward','arrow-start','arrow-up-right','compose','directional-arrow-left','directional-arrow-right','flipVertical','hand-pointing','link','reorder-images','send','sound','speech','speech-ellipsis','switch-account','text-size'];function Icon(props){var accessibilityLabel=props.accessibilityLabel,_props$color=props.color,color=_props$color===void 0?'gray':_props$color,dangerouslySetSvgPath=props.dangerouslySetSvgPath,icon=props.icon,inline=props.inline,_props$size=props.size,size=_props$size===void 0?16:_props$size;var cs=classnames(flipOnRtlIconNames.includes(icon)&&styles$1.rtlSupport,styles$1.icon,colors[color],_defineProperty$1({},styles$1.iconBlock,!inline));var path=icon&&icons[icon]||/* eslint-disable-next-line no-underscore-dangle */dangerouslySetSvgPath&&dangerouslySetSvgPath.__path||undefined;var ariaHidden=accessibilityLabel===''?true:null;return/*#__PURE__*/createElement("svg",{className:cs,height:size,width:size,viewBox:"0 0 24 24","aria-hidden":ariaHidden,"aria-label":accessibilityLabel,role:"img"},/*#__PURE__*/createElement("path",{d:path}));}Icon.icons=IconNames;Icon.propTypes={accessibilityLabel:PropTypes.string.isRequired,color:PropTypes.oneOf(['blue','darkGray','eggplant','gray','green','lightGray','maroon','midnight','navy','olive','orange','orchid','pine','purple','red','watermelon','white']),dangerouslySetSvgPath:PropTypes.shape({__path:PropTypes.string}),icon:PropTypes.oneOf(IconNames),inline:PropTypes.bool,size:PropTypes.oneOfType([PropTypes.number,PropTypes.string])};var styles$2={"img":"hCL kVc L4E MIw","scaled-img":"PC4 XiG","contain":"Jwr PC4 XiG","cover":"zIH PC4 XiG"};var shouldScaleImage=function shouldScaleImage(fit){return fit==='cover'||fit==='contain';};var Image=/*#__PURE__*/function(_React$PureComponent){_inherits$1(Image,_React$PureComponent);var _super=_createSuper$1(Image);function Image(){var _this;_classCallCheck$1(this,Image);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"handleLoad",function(){if(_this.props.onLoad){_this.props.onLoad();}});_defineProperty$1(_assertThisInitialized$1(_this),"handleError",function(){if(_this.props.onError){_this.props.onError();}});return _this;}_createClass$1(Image,[{key:"componentDidMount",value:function componentDidMount(){if(shouldScaleImage(this.props.fit)){this.loadImage();}}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){var _this$props=this.props,fit=_this$props.fit,src=_this$props.src;if(shouldScaleImage(fit)&&prevProps.src!==src){this.loadImage();}}},{key:"loadImage",value:function loadImage(){if(typeof window!=='undefined'){var image=new window.Image();image.onload=this.handleLoad;image.onerror=this.handleError;image.src=this.props.src;}}},{key:"render",value:function render(){var _this$props2=this.props,alt=_this$props2.alt,color=_this$props2.color,children=_this$props2.children,fit=_this$props2.fit,importance=_this$props2.importance,loading=_this$props2.loading,naturalHeight=_this$props2.naturalHeight,naturalWidth=_this$props2.naturalWidth,sizes=_this$props2.sizes,src=_this$props2.src,srcSet=_this$props2.srcSet;var isScaledImage=shouldScaleImage(fit);var childContent=children?/*#__PURE__*/createElement(Box,{position:"absolute",top:true,left:true,bottom:true,right:true,overflow:"hidden"},children):null;return isScaledImage?/*#__PURE__*/createElement("div",{"aria-label":alt,className:fit==='contain'||fit==='cover'?styles$2[fit]:null,style:{backgroundColor:color,backgroundImage:"url('".concat(src,"')")},role:"img"},childContent):/*#__PURE__*/createElement(Box,{position:"relative",dangerouslySetInlineStyle:{__style:{backgroundColor:color,paddingBottom:"".concat(naturalHeight/naturalWidth*100,"%")}}},/*#__PURE__*/createElement("img",{alt:alt,className:styles$2.img,importance:importance,loading:loading,onError:this.handleError,onLoad:this.handleLoad,sizes:sizes,src:src,srcSet:srcSet}),childContent);}}]);return Image;}(PureComponent);_defineProperty$1(Image,"propTypes",{alt:PropTypes.string.isRequired,children:PropTypes.node,color:PropTypes.string,fit:PropTypes.oneOf(['contain','cover','none']),importance:PropTypes.oneOf(['high','low','auto']),loading:PropTypes.oneOf(['eager','lazy','auto']),naturalHeight:PropTypes.number.isRequired,naturalWidth:PropTypes.number.isRequired,onError:PropTypes.func,onLoad:PropTypes.func,sizes:PropTypes.string,src:PropTypes.string.isRequired,srcSet:PropTypes.string});_defineProperty$1(Image,"defaultProps",{color:'transparent',fit:'none',importance:'auto',loading:'auto'});var styles$3={"Mask":"Pj7 sLG XiG","willChangeTransform":"m1e","wash":"KPc MIw ojN Rym p6V QLY"};var getRoundingStyle=function getRoundingStyle(r){if(typeof r==='number'){return bind(range('rounding'),borders)(r);}if(r==='circle'){return fromClassName(borders.circle);}return identity();};function Mask(props){var children=props.children,_props$rounding=props.rounding,rounding=_props$rounding===void 0?0:_props$rounding,width=props.width,height=props.height,_props$willChangeTran=props.willChangeTransform,willChangeTransform=_props$willChangeTran===void 0?true:_props$willChangeTran,_props$wash=props.wash,wash=_props$wash===void 0?false:_props$wash;return/*#__PURE__*/createElement("div",{className:classnames(styles$3.Mask,toProps(getRoundingStyle(rounding)).className,_defineProperty$1({},styles$3.willChangeTransform,willChangeTransform)),style:{width:width,height:height}},children,wash&&/*#__PURE__*/createElement("div",{className:styles$3.wash}));}var RoundingPropType$1=PropTypes.oneOf([0,1,2,3,4,5,6,7,8,'circle']);Mask.propTypes={children:PropTypes.node,height:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),rounding:RoundingPropType$1,width:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),willChangeTransform:PropTypes.bool,wash:PropTypes.bool};var typography={"antialiased":"dyH","sansSerif":"iFc","fontWeightNormal":"swG","fontWeightBold":"mWe","fontStyleRegular":"VEk","fontStyleItalic":"SVm","underline":"R7a","noUnderline":"xQ4","breakWord":"IZT","truncate":"z-6","alignLeft":"DrD","alignRight":"J0X","alignCenter":"tg7","alignJustify":"sdb"};var Square=function Square(props){return/*#__PURE__*/createElement(Box,_extends$1({},props,{position:"relative"}),/*#__PURE__*/createElement(Box,{dangerouslySetInlineStyle:{__style:{paddingBottom:'100%'}},position:"relative"}),/*#__PURE__*/createElement(Box,{position:"absolute",top:true,left:true,bottom:true,right:true},props.children));};var DefaultAvatar=function DefaultAvatar(_ref){var name=_ref.name,useDefaultIcon=_ref.useDefaultIcon;var firstInitial=name?_toConsumableArray(name)[0].toUpperCase():'';return/*#__PURE__*/createElement(Square,{color:"lightGray",rounding:"circle",overflow:"hidden"},useDefaultIcon||!firstInitial?/*#__PURE__*/createElement("svg",{preserveAspectRatio:"xMidYMid meet",role:"img",version:"1.1",viewBox:"-3 -8 30 100",xmlns:"http://www.w3.org/2000/svg"},name&&/*#__PURE__*/createElement("title",null,name),/*#__PURE__*/createElement("path",{d:PersonSvg,fill:"#111"})):/*#__PURE__*/createElement("svg",{width:"100%",viewBox:"-50 -50 100 100",version:"1.1",preserveAspectRatio:"xMidYMid meet",xmlns:"http://www.w3.org/2000/svg"},/*#__PURE__*/createElement("title",null,name),/*#__PURE__*/createElement("text",{fontSize:"40px",fill:"#111",dy:"0.35em",textAnchor:"middle",className:[typography.antialiased,typography.sansSerif,typography.fontWeightBold].join(' ')},firstInitial)));};var sizes={xs:24,sm:32,md:48,lg:64,xl:120};function Avatar(props){var _React$useState=useState(true),_React$useState2=_slicedToArray$1(_React$useState,2),isImageLoaded=_React$useState2[0],setIsImageLoaded=_React$useState2[1];var name=props.name,outline=props.outline,_props$size=props.size,size=_props$size===void 0?'fit':_props$size,src=props.src,verified=props.verified,_props$__dangerouslyU=props.__dangerouslyUseDefaultIcon,useDefaultIcon=_props$__dangerouslyU===void 0?false:_props$__dangerouslyU;var width=size==='fit'?'100%':sizes[size];var height=size==='fit'?'':sizes[size];var handleImageError=function handleImageError(){return setIsImageLoaded(false);};return/*#__PURE__*/createElement(Box,_extends$1({color:"white"},outline?{dangerouslySetInlineStyle:{__style:{boxShadow:'0 0 0 1px #fff'}}}:{},{width:width,height:height,position:"relative",rounding:"circle"}),src&&isImageLoaded?/*#__PURE__*/createElement(Mask,{rounding:"circle",wash:true},/*#__PURE__*/createElement(Image,{alt:name,color:"#EFEFEF",naturalHeight:1,naturalWidth:1,src:src,onError:handleImageError})):/*#__PURE__*/createElement(DefaultAvatar,{name:name,useDefaultIcon:useDefaultIcon}),verified&&/*#__PURE__*/createElement(Box,{position:"absolute",width:"25%",height:"25%",minWidth:12,minHeight:12,dangerouslySetInlineStyle:{__style:{bottom:'4%',right:'4%'}}},/*#__PURE__*/createElement(Box,{color:"white",width:"100%",height:"100%",rounding:"circle"},/*#__PURE__*/createElement(Icon,{color:"red",icon:"check-circle",accessibilityLabel:"",size:"100%"}))));}Avatar.propTypes={name:PropTypes.string.isRequired,outline:PropTypes.bool,src:PropTypes.string,size:PropTypes.oneOf(['xs','sm','md','lg','xl','fit']),verified:PropTypes.bool};var sizes$1={md:48,lg:64};function AvatarPair(_ref){var collaborators=_ref.collaborators,_ref$size=_ref.size,size=_ref$size===void 0?'fit':_ref$size;var width=size==='fit'?'100%':sizes$1[size];return/*#__PURE__*/createElement(Box,{position:"relative",width:width},/*#__PURE__*/createElement(Box,{dangerouslySetInlineStyle:{__style:{paddingBottom:'100%'}}}),(collaborators||[]).slice(0,2).map(function(_ref2,index){var name=_ref2.name,src=_ref2.src;return/*#__PURE__*/createElement(Box,{key:"".concat(name,"-").concat(index),position:"absolute",height:"75%",width:"75%",dangerouslySetInlineStyle:{__style:{left:index===0?0:'25%',top:index===0?0:'25%'}}},/*#__PURE__*/createElement(Avatar,{src:src,name:name,outline:true}));}));}AvatarPair.propTypes={collaborators:PropTypes.arrayOf(PropTypes.exact({name:PropTypes.string.isRequired,src:PropTypes.string})).isRequired,size:PropTypes.oneOf(['md','lg','fit'])};var styles$4={"Badge":"bI_ dyH iFc KhY Pja erh mWe","middle":"buY","top":"DP5"};function Badge(props){var _props$position=props.position,position=_props$position===void 0?'middle':_props$position,text=props.text;var cs=classnames(styles$4.Badge,styles$4[position],colors.blueBg);return/*#__PURE__*/createElement("span",{className:cs},text);}Badge.propTypes={position:PropTypes.oneOf(['middle','top']),text:PropTypes.string.isRequired};var styles$5={"button":"RCK Hsu USg","solid":"GmH adn","sm":"DZT I56 Zr3 C9q","md":"Vxj aZc Zr3 hA-","lg":"F10 xD4 fZz hUC","block":"gn8 L4E kVc","inline":"NTm KhY","enabled":"hNT iyn BG7","disabled":"OWt gpV","selected":"G0a BsF","gray":"a_A gpV","red":"Il7 Jrn","blue":"sKP rTt","transparent":"qQ7 YbY","white":"bmw qJc"};var styles$6={"Text":"tBJ dyH iFc","fontSize1":"_yT","fontSize2":"MF7","fontSize3":"yTZ"};var SIZE_SCALE={sm:1,md:2,lg:3};function Text(_ref){var _ref$align=_ref.align,align=_ref$align===void 0?'left':_ref$align,children=_ref.children,_ref$color=_ref.color,color=_ref$color===void 0?'darkGray':_ref$color,_ref$inline=_ref.inline,inline=_ref$inline===void 0?false:_ref$inline,_ref$italic=_ref.italic,italic=_ref$italic===void 0?false:_ref$italic,_ref$overflow=_ref.overflow,overflow=_ref$overflow===void 0?'breakWord':_ref$overflow,_ref$size=_ref.size,size=_ref$size===void 0?'lg':_ref$size,_ref$truncate=_ref.truncate,truncate=_ref$truncate===void 0?false:_ref$truncate,_ref$weight=_ref.weight,weight=_ref$weight===void 0?'normal':_ref$weight;var scale=SIZE_SCALE[size];var cs=classnames(styles$6.Text,styles$6["fontSize".concat(scale)],color==='blue'&&colors.blue,color==='darkGray'&&colors.darkGray,color==='eggplant'&&colors.eggplant,color==='gray'&&colors.gray,color==='green'&&colors.green,color==='lightGray'&&colors.lightGray,color==='maroon'&&colors.maroon,color==='midnight'&&colors.midnight,color==='navy'&&colors.navy,color==='olive'&&colors.olive,color==='orange'&&colors.orange,color==='orchid'&&colors.orchid,color==='pine'&&colors.pine,color==='purple'&&colors.purple,color==='red'&&colors.red,color==='watermelon'&&colors.watermelon,color==='white'&&colors.white,align==='center'&&typography.alignCenter,align==='justify'&&typography.alignJustify,align==='left'&&typography.alignLeft,align==='right'&&typography.alignRight,overflow==='breakWord'&&typography.breakWord,italic&&typography.fontStyleItalic,weight==='bold'&&typography.fontWeightBold,weight==='normal'&&typography.fontWeightNormal,truncate&&typography.truncate);var Tag=inline?'span':'div';return/*#__PURE__*/createElement(Tag,_extends$1({className:cs},truncate&&typeof children==='string'?{title:children}:null),children);}Text.propTypes={align:PropTypes.oneOf(['left','right','center','justify']),children:PropTypes.node,color:PropTypes.oneOf(['green','pine','olive','blue','navy','midnight','purple','orchid','eggplant','maroon','watermelon','orange','darkGray','gray','lightGray','red','white']),inline:PropTypes.bool,italic:PropTypes.bool,overflow:PropTypes.oneOf(['normal','breakWord']),size:PropTypes.oneOf(['sm','md','lg']),truncate:PropTypes.bool,weight:PropTypes.oneOf(['bold','normal'])};var DEFAULT_TEXT_COLORS={blue:'white',gray:'darkGray',red:'white',transparent:'white',white:'darkGray'};var SIZE_NAME_TO_PIXEL={sm:10,md:12,lg:12};function Button(props){var _classnames;var accessibilityExpanded=props.accessibilityExpanded,accessibilityHaspopup=props.accessibilityHaspopup,accessibilityLabel=props.accessibilityLabel,_props$color=props.color,color=_props$color===void 0?'gray':_props$color,_props$disabled=props.disabled,disabled=_props$disabled===void 0?false:_props$disabled,iconEnd=props.iconEnd,_props$inline=props.inline,inline=_props$inline===void 0?false:_props$inline,name=props.name,_onClick=props.onClick,_props$selected=props.selected,selected=_props$selected===void 0?false:_props$selected,_props$size=props.size,size=_props$size===void 0?'md':_props$size,text=props.text,textColorProp=props.textColor,_props$type=props.type,type=_props$type===void 0?'button':_props$type;var classes=classnames(styles$5.button,(_classnames={},_defineProperty$1(_classnames,styles$5.sm,size==='sm'),_defineProperty$1(_classnames,styles$5.md,size==='md'),_defineProperty$1(_classnames,styles$5.lg,size==='lg'),_defineProperty$1(_classnames,styles$5.solid,color!=='transparent'),_defineProperty$1(_classnames,styles$5[color],!disabled&&!selected),_defineProperty$1(_classnames,styles$5.selected,!disabled&&selected),_defineProperty$1(_classnames,styles$5.disabled,disabled),_defineProperty$1(_classnames,styles$5.enabled,!disabled),_defineProperty$1(_classnames,styles$5.inline,inline),_defineProperty$1(_classnames,styles$5.block,!inline),_classnames));var textColor=disabled&&'gray'||selected&&'white'||textColorProp||DEFAULT_TEXT_COLORS[color];var buttonText=/*#__PURE__*/React__default.createElement(Text,{align:"center",color:textColor,overflow:"normal",weight:"bold"},text);/* eslint-disable react/button-has-type */return/*#__PURE__*/React__default.createElement("button",{"aria-expanded":accessibilityExpanded,"aria-haspopup":accessibilityHaspopup,"aria-label":accessibilityLabel,className:classes,disabled:disabled,name:name,onClick:function onClick(event){return _onClick&&_onClick({event:event});},type:type},iconEnd?/*#__PURE__*/React__default.createElement(Box,{alignItems:"center",display:"flex"},buttonText,/*#__PURE__*/React__default.createElement(Box,{display:"inlineBlock",flex:"none",marginStart:2},/*#__PURE__*/React__default.createElement(Icon,{accessibilityLabel:"",color:textColor,icon:iconEnd,size:SIZE_NAME_TO_PIXEL[size]}))):buttonText);/* eslint-enable react/button-has-type */}Button.propTypes={accessibilityExpanded:PropTypes.bool,accessibilityHaspopup:PropTypes.bool,accessibilityLabel:PropTypes.string,color:PropTypes.oneOf(['blue','gray','red','transparent','white']),disabled:PropTypes.bool,iconEnd:PropTypes.oneOf(Object.keys(icons)),inline:PropTypes.bool,name:PropTypes.string,onClick:PropTypes.func,selected:PropTypes.bool,size:PropTypes.oneOf(['sm','md','lg']),text:PropTypes.string.isRequired,textColor:PropTypes.oneOf(['white','darkGray','blue','red']),type:PropTypes.oneOf(['button','submit'])};var styles$7={"card":"X-y MIw DUt QLY p6V ojN Rym jr-","hover":"ocv","animateIn":"mCQ"};function Card(props){var _React$useState=useState(false),_React$useState2=_slicedToArray$1(_React$useState,2),hovered=_React$useState2[0],setHovered=_React$useState2[1];var active=props.active,children=props.children,image=props.image,onMouseEnter=props.onMouseEnter,onMouseLeave=props.onMouseLeave;var handleMouseEnter=function handleMouseEnter(event){setHovered(true);if(onMouseEnter){onMouseEnter({event:event});}};var handleMouseLeave=function handleMouseLeave(event){setHovered(false);if(onMouseLeave){onMouseLeave({event:event});}};var classes=classnames(styles$7.card,_defineProperty$1({},styles$7.hover,active||active==null&&hovered));return/*#__PURE__*/createElement(Box,{onMouseEnter:handleMouseEnter,onMouseLeave:handleMouseLeave,position:"relative"},image&&/*#__PURE__*/createElement(Box,{marginBottom:1},image),/*#__PURE__*/createElement(Box,null,children),/*#__PURE__*/createElement("div",{className:classes}));}Card.propTypes={active:PropTypes.bool,children:PropTypes.node,image:PropTypes.node,onMouseEnter:PropTypes.func,onMouseLeave:PropTypes.func};var styles$8={"border":"Lur LJB","borderDarkGray":"BPD nG5","borderDisabled":"oNr Fvo","borderError":"fS4 xbp","borderHovered":"MVj dPY","borderRadiusSm":"UnB Pja","borderRadiusMd":"m8s DUt","check":"QRd kVc Hsu _O1 gjz mQ8 XgI Pw5","checkFocused":"Kji C1J","inputEnabled":"F7p BG7"};var controlStyles={"input":"M8E MIw e43","sizeSm":"ruV","sizeMd":"xpn"};function FormErrorMessage(_ref){var id=_ref.id,_ref$text=_ref.text,text=_ref$text===void 0?'':_ref$text;return/*#__PURE__*/createElement(Box,{marginTop:2},/*#__PURE__*/createElement(Text,{color:"red",size:"sm"},/*#__PURE__*/createElement("span",{id:"".concat(id,"-error")},text)));}FormErrorMessage.propTypes={id:PropTypes.string.isRequired,text:PropTypes.string};var styles$9={"label":"PPe kVc BG7"};function Label(props){var children=props.children,htmlFor=props.htmlFor;return/*#__PURE__*/createElement("label",{className:styles$9.label,htmlFor:htmlFor},children);}Label.propTypes={children:PropTypes.node,htmlFor:PropTypes.string.isRequired};function Checkbox(_ref){var _ref$checked=_ref.checked,checked=_ref$checked===void 0?false:_ref$checked,_ref$disabled=_ref.disabled,disabled=_ref$disabled===void 0?false:_ref$disabled,errorMessage=_ref.errorMessage,_ref$hasError=_ref.hasError,hasError=_ref$hasError===void 0?false:_ref$hasError,id=_ref.id,_ref$indeterminate=_ref.indeterminate,indeterminate=_ref$indeterminate===void 0?false:_ref$indeterminate,label=_ref.label,name=_ref.name,onChange=_ref.onChange,onClick=_ref.onClick,_ref$size=_ref.size,size=_ref$size===void 0?'md':_ref$size;var inputElement=useRef(null);var _React$useState=useState(false),_React$useState2=_slicedToArray$1(_React$useState,2),focused=_React$useState2[0],setFocused=_React$useState2[1];var _React$useState3=useState(false),_React$useState4=_slicedToArray$1(_React$useState3,2),hovered=_React$useState4[0],setHover=_React$useState4[1];useEffect(function(){if(inputElement&&inputElement.current){inputElement.current.indeterminate=indeterminate;}},[indeterminate]);var handleChange=function handleChange(event){if(onChange){onChange({event:event,checked:event.target.checked});}};var handleClick=function handleClick(event){if(onClick){onClick({event:event,checked:event.currentTarget.checked});}};var handleHover=function handleHover(){setHover(!hovered);};var bgStyle=colors.whiteBg;if(disabled){bgStyle=colors.lightGrayBg;}else if(checked||indeterminate){bgStyle=colors.darkGrayBg;}var borderStyle=styles$8.border;if(disabled){borderStyle=styles$8.borderDisabled;}else if(!disabled&&(checked||indeterminate)){borderStyle=styles$8.borderDarkGray;}else if(hasError||errorMessage){borderStyle=styles$8.borderError;}else if(!disabled&&hovered){borderStyle=styles$8.borderHovered;}var borderRadiusStyle=size==='sm'?styles$8.borderRadiusSm:styles$8.borderRadiusMd;var styleSize=size==='sm'?controlStyles.sizeSm:controlStyles.sizeMd;return/*#__PURE__*/createElement(Box,null,/*#__PURE__*/createElement(Box,{alignItems:"center",display:"flex",justifyContent:"start",marginLeft:-1,marginRight:-1},/*#__PURE__*/createElement(Label,{htmlFor:id},/*#__PURE__*/createElement(Box,{paddingX:1,position:"relative"},/*#__PURE__*/createElement("input",{checked:checked,className:classnames(controlStyles.input,styleSize,_defineProperty$1({},styles$8.inputEnabled,!disabled)),disabled:disabled,id:id,name:name,onBlur:function onBlur(){return setFocused(false);},onChange:handleChange,onClick:handleClick,onFocus:function onFocus(){return setFocused(true);},onMouseEnter:handleHover,onMouseLeave:handleHover,ref:inputElement,type:"checkbox"}),/*#__PURE__*/createElement("div",{className:classnames(bgStyle,borderStyle,borderRadiusStyle,styleSize,styles$8.check,_defineProperty$1({},styles$8.checkFocused,focused))},(checked||indeterminate)&&/*#__PURE__*/createElement(Icon,{accessibilityLabel:"",color:"white",icon:indeterminate?'dash':'check',size:size==='sm'?8:12})))),label&&/*#__PURE__*/createElement(Label,{htmlFor:id},/*#__PURE__*/createElement(Box,{paddingX:1},/*#__PURE__*/createElement(Text,{color:disabled?'gray':undefined,size:size==='sm'?'md':'lg'},label)))),errorMessage&&/*#__PURE__*/createElement(Box,{marginTop:2},/*#__PURE__*/createElement(Text,{color:"red",size:"sm"},/*#__PURE__*/createElement(FormErrorMessage,{id:id,text:errorMessage}))));}Checkbox.propTypes={checked:PropTypes.bool,disabled:PropTypes.bool,errorMessage:PropTypes.string,hasError:PropTypes.bool,id:PropTypes.string.isRequired,indeterminate:PropTypes.bool,label:PropTypes.string,name:PropTypes.string,onChange:PropTypes.func.isRequired,onClick:PropTypes.func,size:PropTypes.oneOf(['sm','md'])};var Collection=/*#__PURE__*/function(_React$PureComponent){_inherits$1(Collection,_React$PureComponent);var _super=_createSuper$1(Collection);function Collection(){_classCallCheck$1(this,Collection);return _super.apply(this,arguments);}_createClass$1(Collection,[{key:"render",value:function render(){var _this$props=this.props,Item=_this$props.Item,layout$1=_this$props.layout,_this$props$viewportT=_this$props.viewportTop,viewportTop=_this$props$viewportT===void 0?0:_this$props$viewportT,_this$props$viewportL=_this$props.viewportLeft,viewportLeft=_this$props$viewportL===void 0?0:_this$props$viewportL;// Calculate the full dimensions of the item layer
var width=Math.max.apply(Math,_toConsumableArray(layout$1.map(function(item){return item.left+item.width;})));var height=Math.max.apply(Math,_toConsumableArray(layout$1.map(function(item){return item.top+item.height;})));// Default the viewport to being the full width of the content layer
var _this$props2=this.props,_this$props2$viewport=_this$props2.viewportWidth,viewportWidth=_this$props2$viewport===void 0?width:_this$props2$viewport,_this$props2$viewport2=_this$props2.viewportHeight,viewportHeight=_this$props2$viewport2===void 0?height:_this$props2$viewport2;// Calculates which items from the item layer to render in the viewport
// layer.
var items=layout$1.reduce(function(acc,position,idx){if(position.top+position.height>viewportTop&&position.top<viewportHeight+viewportTop&&position.left<viewportWidth+viewportLeft&&position.left+position.width>viewportLeft){acc.push(_objectSpread2({idx:idx},position));}return acc;},[]);return/*#__PURE__*/createElement("div",{className:layout.relative,style:{width:width,height:height}},items.map(function(_ref){var idx=_ref.idx,style=_objectWithoutProperties(_ref,["idx"]);return/*#__PURE__*/createElement("div",{key:idx,className:layout.absolute,style:style},/*#__PURE__*/createElement(Item,{idx:idx}));}));}}]);return Collection;}(PureComponent);_defineProperty$1(Collection,"propTypes",{// eslint-disable-next-line react/forbid-prop-types
Item:PropTypes.any,layout:PropTypes.arrayOf(PropTypes.exact({top:PropTypes.number.isRequired,left:PropTypes.number.isRequired,width:PropTypes.number.isRequired,height:PropTypes.number.isRequired}).isRequired),viewportHeight:PropTypes.number,viewportLeft:PropTypes.number,viewportTop:PropTypes.number,viewportWidth:PropTypes.number});_defineProperty$1(Collection,"defaultProps",{layout:[],viewportLeft:0,viewportTop:0});/*

This function just implements the design constraints for asymetrical columns in
a very simple way. It's not perfect, but it's very predictible. If you do
anything, improve it so that it takes these constraints and generates them
for n > 4.

1 + n columns:
  first column is 50/50
  can't have 3 columns in a row be 50/50

*/var UP=[0.75,0.25];var DOWN=[0.25,0.75];var MID=[0.5,0.5];var columnLayout=function columnLayout(numOfColumns){switch(numOfColumns){case 1:return [[MID],[UP],[DOWN]];case 2:return [[UP,MID],[DOWN,MID],[MID,UP],[MID,DOWN]];case 4:return [[MID,UP,MID,MID],[MID,DOWN,MID,MID],[MID,MID,UP,MID],[MID,MID,DOWN,MID],[MID,UP,MID,DOWN],[MID,DOWN,MID,UP]];case 3:default:return [[MID,UP,MID],[MID,DOWN,MID],[MID,MID,UP],[MID,MID,DOWN]];}};var paddingAll=function paddingAll(gutter,positions){return positions.map(function(_ref){var top=_ref.top,left=_ref.left,width=_ref.width,height=_ref.height;return {top:top,left:left,width:width-gutter,height:height-gutter};});};var mindex=function mindex(arr){return arr.reduce(function(minIndex,item,i){return item<arr[minIndex]?i:minIndex;},0);};var columnsForCollageWithCover=function columnsForCollageWithCover(numOfColumns){return numOfColumns===4?2:1;};function getCollageLayout(_ref2){var gutter=_ref2.gutter,cover=_ref2.cover,numCols=_ref2.columns,h=_ref2.height,w=_ref2.width,layoutKey=_ref2.layoutKey;var positions=[];var width=w+gutter;var height=h+gutter;// If there's a cover image, we'll add that later. It should be a little
// less than half the width of the collage. We do this now (and not later
// when we add the cover image) because of `columnLayout`'s constraints
// needing the exact number of columns that are displayed.
var gridCols=cover?columnsForCollageWithCover(numCols):numCols;// Selects the layout that we're going to use for the grid
var columns=columnLayout(gridCols);var layoutIdx=layoutKey%columns.length;var layout=columns[layoutIdx];// This does a really simple version of our masonry layout. Why replicate
// that here? a.) fewer dependencies and b.) we need the algorithm to
// roughly preserve the order of the collages from when they were ordered
// by Masonry.
var colHeights=new Array(gridCols).fill(0);var colCounts=new Array(gridCols).fill(0);// We iterate over every position that we think we could _potentially_ have
// so that we can fill them with empty sections if need be.
for(var i=0;i<2*gridCols;i+=1){var col=mindex(colHeights);var colIdx=colCounts[col];var itemHeight=layout[col][colIdx]*height;positions.push({top:colHeights[col],left:col*(width/numCols),width:width/numCols,height:itemHeight});colHeights[col]+=itemHeight;colCounts[col]+=1;}// If we have a cover image, figure out how big it is, then move all the
// existing columns over.
if(cover){var coverImageWidth=Math.ceil(numCols/2)*(width/numCols);positions=positions.map(function(position){return _objectSpread2(_objectSpread2({},position),{},{left:coverImageWidth+position.left});});positions.unshift({top:0,left:0,width:coverImageWidth,height:height});}// This adds the space between any items that we have. It's nice to do
// this as a separate pass after everything else, because the math earlier
// becomes easier and it's less brittle to change.
if(gutter){positions=paddingAll(gutter,positions);}return positions;}function Collage(props){var columns=props.columns,cover=props.cover,gutter=props.gutter,height=props.height,layoutKey=props.layoutKey,renderImage=props.renderImage,width=props.width;var positions=getCollageLayout({columns:columns,cover:!!cover,width:width,height:height,gutter:gutter||0,layoutKey:layoutKey||0});return/*#__PURE__*/createElement(Collection,{Item:function Item(_ref3){var index=_ref3.idx;return renderImage({index:index,width:positions[index].width,height:positions[index].height});},layout:positions});}Collage.propTypes={columns:PropTypes.oneOf([2,3,4]).isRequired,cover:PropTypes.bool,gutter:PropTypes.number,height:PropTypes.number.isRequired,layoutKey:PropTypes.number,renderImage:PropTypes.func.isRequired,width:PropTypes.number.isRequired};var styles$a={"deprecatedColumn":"xKQ","xsCol0":"NON","xsCol1":"Fu1 wA7","xsCol2":"ozo sxy","xsCol3":"TPW xEW","xsCol4":"Wvj MRE","xsCol5":"xVb tYG","xsCol6":"pcD UHc","xsCol7":"r7z ojd","xsCol8":"qAQ PX-","xsCol9":"wAa Qfr","xsCol10":"gd8 vdP","xsCol11":"lhx kaP","xsCol12":"YoG L4E","smCol0":"Mwx","smCol1":"hyE Djc","smCol2":"j44 tar","smCol3":"s7A QS3","smCol4":"SOC V_L","smCol5":"UO- kh1","smCol6":"PaW Fue","smCol7":"mD- cgB","smCol8":"FSP DkM","smCol9":"tVU AXh","smCol10":"OlN UtM","smCol11":"EEW Wyy","smCol12":"Hqt dXC","mdCol0":"is6","mdCol1":"YAl U8q","mdCol2":"N5L shx","mdCol3":"owy EGm","mdCol4":"Znf XMp","mdCol5":"BLm H2Q","mdCol6":"f1g HHc","mdCol7":"LOE JWr","mdCol8":"UU3 h5B","mdCol9":"XyD Eeb","mdCol10":"I4T TIo","mdCol11":"F9- rPE","mdCol12":"m4U QwK","lgCol0":"Sze","lgCol1":"t_l VSa","lgCol2":"TIZ aml","lgCol3":"qWI huk","lgCol4":"oY2 Vnj","lgCol5":"_bH KgZ","lgCol6":"kwW c2A","lgCol7":"BiY IGd","lgCol8":"kl_ hMf","lgCol9":"uVz swh","lgCol10":"jgd Hs0","lgCol11":"UZP YXE","lgCol12":"MFv XTp"};function Column(props){var children=props.children;var cs=classnames((props.xs!==undefined||props.sm!==undefined||props.md!==undefined||props.lg!==undefined)&&styles$a.deprecatedColumn,props.xs&&styles$a["xsCol".concat(props.xs)],props.sm&&styles$a["smCol".concat(props.sm)],props.md&&styles$a["mdCol".concat(props.md)],props.lg&&styles$a["lgCol".concat(props.lg)],props.span!=null&&styles$a["xsCol".concat(props.span)],props.smSpan!=null&&styles$a["smCol".concat(props.smSpan)],props.mdSpan!=null&&styles$a["mdCol".concat(props.mdSpan)],props.lgSpan!=null&&styles$a["lgCol".concat(props.lgSpan)]);return/*#__PURE__*/createElement("div",{className:cs},children);}Column.propTypes={children:PropTypes.node,xs:PropTypes.number,sm:PropTypes.number,md:PropTypes.number,lg:PropTypes.number,span:PropTypes.number,smSpan:PropTypes.number,mdSpan:PropTypes.number,lgSpan:PropTypes.number};function Container(props){var children=props.children;return/*#__PURE__*/createElement(Box,{justifyContent:"center",display:"flex"},/*#__PURE__*/createElement(Box,{maxWidth:800,width:"100%"},children));}Container.propTypes={children:PropTypes.node};function Caret(props){var direction=props.direction;var path;switch(direction){case'up':path='M0 0 L12 12 L24 0';break;case'right':path='M24 0 L12 12 L24 24';break;case'down':path='M0 24 L12 12 L24 24';break;case'left':path='M0 0 L12 12 L0 24';break;}return/*#__PURE__*/createElement("svg",{width:"24",height:"24"},/*#__PURE__*/createElement("path",{d:path}));}Caret.propTypes={direction:PropTypes.oneOf(['up','right','down','left'])};var styles$c={"container":"YDx MIw","contents":"fll kVc Hsu","border":"Dl7","maxDimensions":"DHH","minDimensions":"kFh","innerContents":"ygj _O1 XbT","caret":"BR9 MIw"};/* Needed until this Flow issue is fixed: https://github.com/facebook/flow/issues/380 */ /* eslint quote-props: 0 */var SPACES_INDEX_MAP={'0':'up','1':'right','2':'down','3':'left'};var DIR_INDEX_MAP={up:0,right:1,down:2,left:3};var MARGIN=24;var CARET_HEIGHT=24;var CARET_OFFSET_FROM_SIDE=24;var BORDER_RADIUS=8;/**
 * Determines the main direction the flyout opens
 */function getMainDir(flyoutSize,idealDirection,triggerRect,windowSize){// Calculates the available space if we were to place the flyout in the 4 main directions
// to determine which 'quadrant' to position the flyout inside of
var up=triggerRect.top-flyoutSize.height-CARET_HEIGHT;var right=windowSize.width-flyoutSize.width-CARET_HEIGHT-triggerRect.right;var down=windowSize.height-flyoutSize.height-CARET_HEIGHT-triggerRect.bottom;var left=triggerRect.left-flyoutSize.width-CARET_HEIGHT;// overrides available space when the trigger is close to the edge of the screen
// trigger is too close to top/bottom of screen for left & right flyouts
if(triggerRect.top<BORDER_RADIUS||windowSize.height-triggerRect.bottom<BORDER_RADIUS){left=0;right=0;}// trigger is too close to the left/right of screen for up & down flyouts
if(triggerRect.left<BORDER_RADIUS||windowSize.width-triggerRect.right<BORDER_RADIUS){up=0;down=0;}var spaces=[up,right,down,left];// Identify best direction of available spaces
var max=Math.max.apply(Math,spaces);// Chose the main direction for the flyout based on available spaces & user preference
var mainDir;if(idealDirection&&spaces[DIR_INDEX_MAP[idealDirection]]>0){// user pref
mainDir=idealDirection;}else {// If no direction pref, chose the direction in which there is the most space available
mainDir=SPACES_INDEX_MAP[spaces.indexOf(max)];}return mainDir;}/**
 * Determines the sub direction of how the flyout is positioned within the main dir
 */function getSubDir(flyoutSize,mainDir,triggerRect,windowSize){// Now that we have the main direction, chose from 3 caret placements for that direction
var offset;var triggerMid;var windowSpaceAvailable;if(mainDir==='right'||mainDir==='left'){offset=flyoutSize.height/2;triggerMid=triggerRect.top+(triggerRect.bottom-triggerRect.top)/2;windowSpaceAvailable=windowSize.height;}else {// (mainDir === 'up' || mainDir === 'down')
offset=flyoutSize.width/2;triggerMid=triggerRect.left+(triggerRect.right-triggerRect.left)/2;windowSpaceAvailable=windowSize.width;}var aboveOrLeft=triggerMid-offset-MARGIN;var belowOrRight=windowSpaceAvailable-triggerMid-offset-MARGIN;var subDir;if(aboveOrLeft>0&&belowOrRight>0){// caret should go in middle b/c it can
subDir='middle';}else if(belowOrRight>0){// caret should go at top for left/right and left for up/down
subDir=mainDir==='left'||mainDir==='right'?'up':'left';}else {// caret should go at bottom for left/right and right for up/down
subDir=mainDir==='left'||mainDir==='right'?'down':'right';}return subDir;}/**
 * Calculates the amount the flyout & caret need to shift over to align with designs
 */function calcEdgeShifts(subDir,triggerRect,windowSize){// Target values for flyout and caret shifts
var flyoutVerticalShift=CARET_OFFSET_FROM_SIDE-(triggerRect.height-CARET_HEIGHT)/2;var flyoutHorizontalShift=CARET_OFFSET_FROM_SIDE-(triggerRect.width-CARET_HEIGHT)/2;var caretVerticalShift=CARET_HEIGHT;var caretHorizontalShift=CARET_HEIGHT;// Covers edge case where trigger is in a corner and we need to adjust the offset of the caret
// to something smaller than normal in order
var isCloseVertically=triggerRect.top-flyoutVerticalShift<0||triggerRect.bottom+flyoutVerticalShift>windowSize.height;var isCloseHorizontally=triggerRect.left-flyoutHorizontalShift<0||triggerRect.right+flyoutHorizontalShift>windowSize.width;if(isCloseVertically){flyoutVerticalShift=BORDER_RADIUS-(triggerRect.height-CARET_HEIGHT)/2;caretVerticalShift=BORDER_RADIUS;}if(isCloseHorizontally){flyoutHorizontalShift=BORDER_RADIUS-(triggerRect.width-CARET_HEIGHT)/2;caretHorizontalShift=BORDER_RADIUS;}return {flyout:{x:flyoutHorizontalShift,y:flyoutVerticalShift},caret:{x:caretHorizontalShift,y:caretVerticalShift}};}/**
 * Calculates flyout and caret offsets for styling
 */function adjustOffsets(base,edgeShift,flyoutSize,mainDir,subDir,triggerRect){var flyoutLeft=base.left;var flyoutTop=base.top;var caretTop=mainDir==='down'?-CARET_HEIGHT:null;var caretRight=mainDir==='left'?-CARET_HEIGHT+2:null;var caretBottom=mainDir==='up'?-CARET_HEIGHT:null;var caretLeft=mainDir==='right'?-CARET_HEIGHT+2:null;if(subDir==='up'){flyoutTop=base.top-edgeShift.flyout.y;caretTop=edgeShift.caret.y;}else if(subDir==='down'){flyoutTop=base.top-flyoutSize.height+triggerRect.height+edgeShift.flyout.y;caretBottom=edgeShift.caret.y;}else if(subDir==='left'){flyoutLeft=base.left-edgeShift.flyout.x;caretLeft=edgeShift.caret.x;}else if(subDir==='right'){flyoutLeft=base.left-flyoutSize.width+triggerRect.width+edgeShift.flyout.x;caretRight=edgeShift.caret.x;}else if(subDir==='middle'){if(mainDir==='left'||mainDir==='right'){var triggerMid=flyoutTop+triggerRect.height/2;flyoutTop=triggerMid-flyoutSize.height/2;caretTop=(flyoutSize.height-CARET_HEIGHT)/2;}if(mainDir==='up'||mainDir==='down'){var _triggerMid=flyoutLeft+triggerRect.width/2;flyoutLeft=_triggerMid-flyoutSize.width/2;caretLeft=(flyoutSize.width-CARET_HEIGHT)/2;}}return {flyoutOffset:{top:flyoutTop,left:flyoutLeft},caretOffset:{top:caretTop,right:caretRight,bottom:caretBottom,left:caretLeft}};}/* Calculates baseline top and left offset for flyout */function baseOffsets(hasCaret,relativeOffset,flyoutSize,mainDir,triggerRect,windowSize){var SPACING_OUTSIDE=hasCaret?CARET_HEIGHT/2:8;// TOP OFFSET
var top;if(mainDir==='down'){top=windowSize.scrollY+triggerRect.bottom+SPACING_OUTSIDE;}else if(mainDir==='up'){top=windowSize.scrollY+(triggerRect.top-flyoutSize.height-SPACING_OUTSIDE);}else {// left and right
top=windowSize.scrollY+triggerRect.top;}// LEFT OFFSET
var left;if(mainDir==='left'){left=windowSize.scrollX+(triggerRect.left-flyoutSize.width-SPACING_OUTSIDE);}else if(mainDir==='right'){left=windowSize.scrollX+triggerRect.right+SPACING_OUTSIDE;}else {// down and up
left=windowSize.scrollX+triggerRect.left;}// Adjusts for the relative parent container
top-=relativeOffset.y;left-=relativeOffset.x;return {top:top,left:left};}var Contents=/*#__PURE__*/function(_React$Component){_inherits$1(Contents,_React$Component);var _super=_createSuper$1(Contents);function Contents(){var _this;_classCallCheck$1(this,Contents);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"state",{flyoutOffset:{top:undefined,left:undefined},caretOffset:{top:undefined,right:undefined,bottom:undefined,left:undefined},mainDir:null,flyoutRef:null});_defineProperty$1(_assertThisInitialized$1(_this),"setFlyoutRef",function(flyoutRef){if(!_this.state.flyoutRef){_this.setState({flyoutRef:flyoutRef});}});return _this;}_createClass$1(Contents,[{key:"componentDidMount",value:function componentDidMount(){var _this2=this;var _this$props=this.props,onResize=_this$props.onResize,onKeyDown=_this$props.onKeyDown;var flyoutRef=this.state.flyoutRef;setTimeout(function(){if(_this2.props.shouldFocus&&flyoutRef){flyoutRef.focus();}});window.addEventListener('resize',onResize);window.addEventListener('keydown',onKeyDown);}},{key:"componentWillUnmount",value:function componentWillUnmount(){var _this$props2=this.props,onResize=_this$props2.onResize,onKeyDown=_this$props2.onKeyDown;window.removeEventListener('resize',onResize);window.removeEventListener('keydown',onKeyDown);}/**
     * Determines the main direciton, sub direction, and corresponding offsets needed
     * to correctly position the offset
     */},{key:"render",value:function render(){var _this$props3=this.props,bgColor=_this$props3.bgColor,border=_this$props3.border,caret=_this$props3.caret,children=_this$props3.children,rounding=_this$props3.rounding,width=_this$props3.width;var _this$state=this.state,caretOffset=_this$state.caretOffset,flyoutOffset=_this$state.flyoutOffset,mainDir=_this$state.mainDir;// Needed to prevent UI thrashing
var visibility=mainDir===null?'hidden':'visible';var background="".concat(bgColor,"Bg");var stroke=bgColor==='white'?'#efefef':null;return/*#__PURE__*/createElement("div",{className:styles$c.container,style:_objectSpread2({stroke:stroke,visibility:visibility},flyoutOffset)},/*#__PURE__*/createElement("div",{className:classnames(rounding===2&&borders.rounding2,rounding===4&&borders.rounding4,styles$c.contents,styles$c.maxDimensions,width!==null&&styles$c.minDimensions),ref:this.setFlyoutRef,tabIndex:-1},caret&&/*#__PURE__*/createElement("div",{className:classnames(colors[bgColor],styles$c.caret),style:_objectSpread2({},caretOffset)},/*#__PURE__*/createElement(Caret,{direction:mainDir})),/*#__PURE__*/createElement("div",{className:classnames(border&&styles$c.border,colors[background],colors[bgColor],rounding===2&&borders.rounding2,rounding===4&&borders.rounding4,styles$c.innerContents,styles$c.maxDimensions,width!==null&&styles$c.minDimensions),style:{maxWidth:width}},children)));}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(_ref,_ref2){var caret=_ref.caret,idealDirection=_ref.idealDirection,positionRelativeToAnchor=_ref.positionRelativeToAnchor,relativeOffset=_ref.relativeOffset,triggerRect=_ref.triggerRect,width=_ref.width;var flyoutRef=_ref2.flyoutRef;// Scroll not needed for relative elements
// We can't use window.scrollX / window.scrollY since it's not supported by IE11
var scrollX=positionRelativeToAnchor?0:window.pageXOffset||document.documentElement&&document.documentElement.scrollLeft||0;var scrollY=positionRelativeToAnchor?0:window.pageYOffset||document.documentElement&&document.documentElement.scrollTop||0;var windowSize={height:window.innerHeight,width:window.innerWidth,scrollX:scrollX,scrollY:scrollY};var flyoutSize={height:flyoutRef?flyoutRef.clientHeight:0,width:(flyoutRef?flyoutRef.clientWidth:width)||0};// First choose one of 4 main direction
var mainDir=getMainDir(flyoutSize,idealDirection,triggerRect,windowSize);// Now that we have the main direction, chose from 3 caret placements for that direction
var subDir=getSubDir(flyoutSize,mainDir,triggerRect,windowSize);// Gets the base offset that positions the flyout based on the main direction only
var base=baseOffsets(Boolean(caret),relativeOffset,flyoutSize,mainDir,triggerRect,windowSize);// Gets the edge shifts for the flyout
var edgeShifts=calcEdgeShifts(subDir,triggerRect,windowSize);// Adjusts for the subdirection of the caret
var _adjustOffsets=adjustOffsets(base,edgeShifts,flyoutSize,mainDir,subDir,triggerRect),flyoutOffset=_adjustOffsets.flyoutOffset,caretOffset=_adjustOffsets.caretOffset;return {caretOffset:caretOffset,flyoutOffset:flyoutOffset,mainDir:mainDir};}// Copy the flyout DOM node to state. This is required because we need to
// derive the flyout location from it in getDerivedStateFromProps, and because
// this method is static, it doesn't have access to the component instance.
// Instead, we rely on React passing the state values into that method.
}]);return Contents;}(Component);_defineProperty$1(Contents,"propTypes",{bgColor:PropTypes.oneOf(['blue','darkGray','orange','red','white']),border:PropTypes.bool,caret:PropTypes.bool,children:PropTypes.node,idealDirection:PropTypes.oneOf(['up','right','down','left']),onKeyDown:PropTypes.func.isRequired,onResize:PropTypes.func.isRequired,relativeOffset:PropTypes.exact({x:PropTypes.number,y:PropTypes.number}),positionRelativeToAnchor:PropTypes.bool,rounding:PropTypes.oneOf([2,4]),shouldFocus:PropTypes.bool,triggerRect:PropTypes.exact({bottom:PropTypes.number,height:PropTypes.number,left:PropTypes.number,right:PropTypes.number,top:PropTypes.number,width:PropTypes.number}),width:PropTypes.number});_defineProperty$1(Contents,"defaultProps",{border:true,caret:true});function OutsideEventBehavior(_ref){var children=_ref.children,onClick=_ref.onClick;var element=useRef(null);useEffect(function(){var handleClickEvent=function handleClickEvent(event){if(!onClick||!element||event.target instanceof Node&&element.current&&element.current.contains(event.target)){return;}onClick(event);};document.addEventListener('click',handleClickEvent,{capture:true});return function cleanup(){document.removeEventListener('click',handleClickEvent,{capture:true});};},[onClick]);return/*#__PURE__*/createElement("div",{ref:element},children);}var SIZE_WIDTH_MAP={xs:180,sm:230,md:284,lg:320,xl:360};var ESCAPE_KEY_CODE=27;function getTriggerRect(anchor,positionRelativeToAnchor){var triggerBoundingRect;var relativeOffset;if(anchor){triggerBoundingRect=anchor.getBoundingClientRect();// Needed for correct positioning within Contents.js
relativeOffset={x:positionRelativeToAnchor?triggerBoundingRect.left-anchor.offsetLeft:0,y:positionRelativeToAnchor?triggerBoundingRect.top-anchor.offsetTop:0};}return {relativeOffset:relativeOffset,triggerBoundingRect:triggerBoundingRect};}var Controller=/*#__PURE__*/function(_React$Component){_inherits$1(Controller,_React$Component);var _super=_createSuper$1(Controller);function Controller(){var _this;_classCallCheck$1(this,Controller);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"state",{relativeOffset:{x:0,y:0},triggerBoundingRect:{bottom:0,height:0,left:0,right:0,top:0,width:0}});_defineProperty$1(_assertThisInitialized$1(_this),"handleKeyDown",function(event){var onDismiss=_this.props.onDismiss;if(event.keyCode===ESCAPE_KEY_CODE){onDismiss();}});_defineProperty$1(_assertThisInitialized$1(_this),"handlePageClick",function(event){var _this$props=_this.props,anchor=_this$props.anchor,onDismiss=_this$props.onDismiss;if(event.target instanceof Node&&!anchor.contains(event.target)){onDismiss();}});_defineProperty$1(_assertThisInitialized$1(_this),"handleResize",function(){_this.updateTriggerRect(_this.props);});_defineProperty$1(_assertThisInitialized$1(_this),"updateTriggerRect",function(_ref){var anchor=_ref.anchor,positionRelativeToAnchor=_ref.positionRelativeToAnchor;var _getTriggerRect=getTriggerRect(anchor,positionRelativeToAnchor),relativeOffset=_getTriggerRect.relativeOffset,triggerBoundingRect=_getTriggerRect.triggerBoundingRect;_this.setState({relativeOffset:relativeOffset,triggerBoundingRect:triggerBoundingRect});});return _this;}_createClass$1(Controller,[{key:"componentDidMount",value:function componentDidMount(){this.updateTriggerRect(this.props);}},{key:"render",value:function render(){var _this$props2=this.props,bgColor=_this$props2.bgColor,border=_this$props2.border,caret=_this$props2.caret,children=_this$props2.children,idealDirection=_this$props2.idealDirection,positionRelativeToAnchor=_this$props2.positionRelativeToAnchor,rounding=_this$props2.rounding,shouldFocus=_this$props2.shouldFocus,size=_this$props2.size;var _this$state=this.state,relativeOffset=_this$state.relativeOffset,triggerBoundingRect=_this$state.triggerBoundingRect;var width=typeof size==='string'?SIZE_WIDTH_MAP[size]:size;return/*#__PURE__*/createElement(OutsideEventBehavior,{onClick:this.handlePageClick},/*#__PURE__*/createElement(Contents,{bgColor:bgColor,border:border,caret:caret,idealDirection:idealDirection,onKeyDown:this.handleKeyDown,onResize:this.handleResize,positionRelativeToAnchor:positionRelativeToAnchor,relativeOffset:relativeOffset,rounding:rounding,shouldFocus:shouldFocus,triggerRect:triggerBoundingRect,width:width},children));}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(_ref2){var anchor=_ref2.anchor,positionRelativeToAnchor=_ref2.positionRelativeToAnchor;return getTriggerRect(anchor,positionRelativeToAnchor);}}]);return Controller;}(Component);_defineProperty$1(Controller,"propTypes",{anchor:PropTypes.shape({contains:PropTypes.func,getBoundingClientRect:PropTypes.func}),bgColor:PropTypes.oneOf(['blue','darkGray','orange','red','white']),border:PropTypes.bool,caret:PropTypes.bool,children:PropTypes.node,idealDirection:PropTypes.oneOf(['up','right','down','left']),onDismiss:PropTypes.func.isRequired,positionRelativeToAnchor:PropTypes.bool,rounding:PropTypes.oneOf([2,4]),shouldFocus:PropTypes.bool,size:PropTypes.oneOfType([PropTypes.number,PropTypes.oneOf(['xs','sm','md','lg','xl'])// default: sm
])});_defineProperty$1(Controller,"defaultProps",{// Default size only applies when size is omitted,
// if passed as null it will remain null
size:'sm'});function Flyout(props){var anchor=props.anchor,children=props.children,idealDirection=props.idealDirection,onDismiss=props.onDismiss,_props$positionRelati=props.positionRelativeToAnchor,positionRelativeToAnchor=_props$positionRelati===void 0?true:_props$positionRelati,_props$color=props.color,color=_props$color===void 0?'white':_props$color,_props$shouldFocus=props.shouldFocus,shouldFocus=_props$shouldFocus===void 0?true:_props$shouldFocus,_props$showCaret=props.showCaret,showCaret=_props$showCaret===void 0?false:_props$showCaret,size=props.size;if(!anchor){return null;}return/*#__PURE__*/createElement(Controller,{anchor:anchor,bgColor:color,border:true,caret:showCaret,idealDirection:idealDirection,onDismiss:onDismiss,positionRelativeToAnchor:positionRelativeToAnchor,rounding:4,shouldFocus:shouldFocus,size:size==='flexible'?null:size},children);}Flyout.propTypes={anchor:PropTypes.shape({contains:PropTypes.func,getBoundingClientRect:PropTypes.func}),children:PropTypes.node,idealDirection:PropTypes.oneOf(['up','right','down','left']),onDismiss:PropTypes.func.isRequired,positionRelativeToAnchor:PropTypes.bool,color:PropTypes.oneOf(['blue','orange','red','white','darkGray']),size:PropTypes.oneOfType([PropTypes.number,PropTypes.oneOf(['xs','sm','md','lg','xl'])// default: sm
]),showCaret:PropTypes.bool};var styles$d={"wash":"mLe MIw QLY Rym p6V ojN"};function zip(a,b){return a.map(function(item,idx){return [item,b[idx]];});}var BORDER_WIDTH=2;var AVATAR_SIZES={xs:24,sm:32,md:48,lg:64,xl:120};var avatarLayout=function avatarLayout(n,size){switch(n){case 0:case 1:return [{top:0,left:0,width:size,height:size,textLayout:'center'}];case 2:return [{top:0,left:0,width:"calc(50% - ".concat(BORDER_WIDTH/2,"px)"),height:size,textLayout:'center'},{top:0,left:"calc(50% + ".concat(BORDER_WIDTH/2,"px)"),width:"calc(50% - ".concat(BORDER_WIDTH/2,"px)"),height:size,textLayout:'center'}];default:return [{top:0,left:0,width:"calc(50% - ".concat(BORDER_WIDTH/2,"px)"),height:size,textLayout:'center'},{top:0,left:"calc(50% + ".concat(BORDER_WIDTH/2,"px)"),width:'calc(50%)',height:"calc(50% - ".concat(BORDER_WIDTH/2,"px)"),textLayout:'topLeft'},{top:"calc(50% + ".concat(BORDER_WIDTH/2,"px)"),left:"calc(50% + ".concat(BORDER_WIDTH/2,"px)"),width:'calc(50%)',height:"calc(50% - ".concat(BORDER_WIDTH/2,"px)"),textLayout:'bottomLeft'}];}};var degToRad=function degToRad(deg){return deg*(Math.PI/180);};var DefaultAvatar$1=function DefaultAvatar(props){var size=props.size,name=props.name,textLayout=props.textLayout;var quarterPadding="calc(".concat(Math.sin(degToRad(45))," * (").concat(size,") / 2)");var initial=/*#__PURE__*/createElement("svg",{width:"100%",viewBox:"-50 -50 100 100",version:"1.1",preserveAspectRatio:"xMidYMid meet",xmlns:"http://www.w3.org/2000/svg"},/*#__PURE__*/createElement("title",null,name),/*#__PURE__*/createElement("text",{fontSize:"40px",fill:"#111",dominantBaseline:"central",textAnchor:"middle",className:[typography.antialiased,typography.sansSerif,typography.fontWeightBold].join(' ')},name?_toConsumableArray(name)[0].toUpperCase():''));switch(textLayout){case'bottomLeft':return/*#__PURE__*/createElement(Box,{"aria-label":name,color:"lightGray",height:"100%",display:"flex",alignItems:"end",dangerouslySetInlineStyle:{__style:{paddingBottom:quarterPadding,paddingRight:quarterPadding}}},initial);case'topLeft':return/*#__PURE__*/createElement(Box,{"aria-label":name,color:"lightGray",height:"100%",display:"flex",alignItems:"start",dangerouslySetInlineStyle:{__style:{paddingTop:quarterPadding,paddingRight:quarterPadding}}},initial);default:return/*#__PURE__*/createElement(Box,{"aria-label":name,color:"lightGray",height:"100%",display:"flex",alignItems:"center",justifyContent:"center"},initial);}};function GroupAvatar(props){var collaborators=props.collaborators,outline=props.outline,_props$size=props.size,size=_props$size===void 0?'fit':_props$size;var avatarWidth=size==='fit'?'100%':AVATAR_SIZES[size];var avatarHeight=size==='fit'?'':AVATAR_SIZES[size];var positions=avatarLayout(collaborators.length,avatarWidth);return/*#__PURE__*/createElement(Box,{color:"white",overflow:"hidden",rounding:"circle",width:avatarWidth,height:avatarHeight,position:"relative",dangerouslySetInlineStyle:{__style:_objectSpread2(_objectSpread2({},outline?{boxShadow:'0 0 0 2px #fff'}:{}),{},{// willChange: transform fixes a strange behavior where the border of the children
// are not properly trimmed even though overflow: hidden is set
willChange:'transform'})}},/*#__PURE__*/createElement(Box,{dangerouslySetInlineStyle:{__style:{paddingBottom:'100%'}}}),zip(positions,collaborators).map(function(_ref,idx){var _ref2=_slicedToArray$1(_ref,2),position=_ref2[0],_ref2$=_ref2[1],collaborator=_ref2$===void 0?{name:'',src:undefined}:_ref2$;var width=position.width,height=position.height,top=position.top,left=position.left,textLayout=position.textLayout;var name=collaborator.name,src=collaborator.src;return/*#__PURE__*/createElement(Box,{key:idx,position:"absolute",width:width,height:height,dangerouslySetInlineStyle:{__style:{top:top,left:left}}},src?/*#__PURE__*/createElement(Image,{alt:name,color:"#EFEFEF",src:src,naturalWidth:1,naturalHeight:1,fit:"cover"}):/*#__PURE__*/createElement(DefaultAvatar$1,{name:name,textLayout:textLayout,size:height}),/*#__PURE__*/createElement("div",{className:styles$d.wash}));}));}GroupAvatar.propTypes={collaborators:PropTypes.arrayOf(PropTypes.exact({name:PropTypes.string.isRequired,src:PropTypes.string})).isRequired,outline:PropTypes.bool,size:PropTypes.oneOf(['xs','sm','md','lg','xl','fit'])};var styles$e={"Heading":"lH1 dyH iFc","fontSize1":"kON","fontSize2":"ut5","fontSize3":"ky3"};var defaultHeadingLevels={sm:3,md:2,lg:1};var SIZE_SCALE$1={sm:1,md:2,lg:3};function Heading(props){var accessibilityLevel=props.accessibilityLevel,_props$align=props.align,align=_props$align===void 0?'left':_props$align,children=props.children,_props$color=props.color,color=_props$color===void 0?'darkGray':_props$color,_props$id=props.id,id=_props$id===void 0?null:_props$id,_props$overflow=props.overflow,overflow=_props$overflow===void 0?'breakWord':_props$overflow,_props$size=props.size,size=_props$size===void 0?'lg':_props$size,_props$truncate=props.truncate,truncate=_props$truncate===void 0?false:_props$truncate;var cs=classnames(styles$e.Heading,styles$e["fontSize".concat(SIZE_SCALE$1[size])],colors[color],align==='center'&&typography.alignCenter,align==='justify'&&typography.alignJustify,align==='left'&&typography.alignLeft,align==='right'&&typography.alignRight,overflow==='breakWord'&&typography.breakWord,truncate&&typography.truncate);var headingLevel=accessibilityLevel||defaultHeadingLevels[size];var newProps={className:cs};if(id){newProps=_objectSpread2(_objectSpread2({},newProps),{},{id:id});}if(truncate&&typeof children==='string'){newProps=_objectSpread2(_objectSpread2({},newProps),{},{title:children});}return createElement("h".concat(headingLevel),newProps,children);}Heading.propTypes={accessibilityLevel:PropTypes.oneOf([1,2,3,4,5,6]),align:PropTypes.oneOf(['left','right','center','justify']),children:PropTypes.node,color:PropTypes.oneOf(['blue','darkGray','eggplant','gray','green','lightGray','maroon','midnight','navy','olive','orange','orchid','pine','purple','red','watermelon','white']),id:PropTypes.string,overflow:PropTypes.oneOf(['normal','breakWord']),size:PropTypes.oneOf(['sm','md','lg']),truncate:PropTypes.bool};var styles$f={"button":"rYa kVc adn yQo","enabled":"qrs BG7","disabled":"iTe"};var styles$g={"pog":"x8f INd _O1 gjz mQ8","focused":"Xsi C1J","selected":"y91 BsF","transparent":"OGJ YbY","transparentDarkGray":"lEC prG","hovered":"bPW","white":"NSs u97","active":"s4m","lightGray":"WhU gpV","gray":"JhO gfP","darkGray":"Adb BsF","red":"pHl Jrn"};var SIZE_NAME_TO_PIXEL$1={xs:24,sm:32,md:40,lg:48,xl:56};var SIZE_NAME_TO_ICON_SIZE_PIXEL={xs:12,sm:16,md:18,lg:20,xl:24};var defaultIconButtonIconColors={darkGray:'white',gray:'white',lightGray:'gray',transparent:'gray',red:'white',transparentDarkGray:'white',white:'gray'};function Pog(props){var _classnames;var _props$active=props.active,active=_props$active===void 0?false:_props$active,_props$bgColor=props.bgColor,bgColor=_props$bgColor===void 0?'transparent':_props$bgColor,dangerouslySetSvgPath=props.dangerouslySetSvgPath,_props$focused=props.focused,focused=_props$focused===void 0?false:_props$focused,_props$hovered=props.hovered,hovered=_props$hovered===void 0?false:_props$hovered,icon=props.icon,iconColor=props.iconColor,_props$selected=props.selected,selected=_props$selected===void 0?false:_props$selected,_props$size=props.size,size=_props$size===void 0?'md':_props$size;var iconSize=SIZE_NAME_TO_ICON_SIZE_PIXEL[size];var color=selected&&'white'||iconColor||defaultIconButtonIconColors[bgColor];var inlineStyle={height:SIZE_NAME_TO_PIXEL$1[size],width:SIZE_NAME_TO_PIXEL$1[size]};var classes=classnames(styles$g.pog,(_classnames={},_defineProperty$1(_classnames,styles$g[bgColor],!selected),_defineProperty$1(_classnames,styles$g.selected,selected),_defineProperty$1(_classnames,styles$g.active,active),_defineProperty$1(_classnames,styles$g.focused,focused),_defineProperty$1(_classnames,styles$g.hovered,hovered&&!focused&&!active),_classnames));return/*#__PURE__*/createElement("div",{className:classes,style:inlineStyle},/*#__PURE__*/createElement(Box,{rounding:"circle"},/*#__PURE__*/createElement(Icon,{accessibilityLabel:"",color:color,dangerouslySetSvgPath:dangerouslySetSvgPath,icon:icon,size:iconSize})));}Pog.propTypes={active:PropTypes.bool,bgColor:PropTypes.oneOf(['transparent','darkGray','transparentDarkGray','gray','lightGray','white']),dangerouslySetSvgPath:PropTypes.shape({__path:PropTypes.string}),focused:PropTypes.bool,hovered:PropTypes.bool,icon:PropTypes.oneOf(Object.keys(icons)),iconColor:PropTypes.oneOf(['gray','darkGray','red','white']),selected:PropTypes.bool,size:PropTypes.oneOf(Object.keys(SIZE_NAME_TO_PIXEL$1))};function IconButton(_ref){var accessibilityExpanded=_ref.accessibilityExpanded,accessibilityHaspopup=_ref.accessibilityHaspopup,accessibilityLabel=_ref.accessibilityLabel,bgColor=_ref.bgColor,dangerouslySetSvgPath=_ref.dangerouslySetSvgPath,disabled=_ref.disabled,icon=_ref.icon,iconColor=_ref.iconColor,selected=_ref.selected,size=_ref.size,_onClick=_ref.onClick;var _React$useState=useState(false),_React$useState2=_slicedToArray$1(_React$useState,2),isActive=_React$useState2[0],setActive=_React$useState2[1];var _React$useState3=useState(false),_React$useState4=_slicedToArray$1(_React$useState3,2),isFocused=_React$useState4[0],setFocused=_React$useState4[1];var _React$useState5=useState(false),_React$useState6=_slicedToArray$1(_React$useState5,2),isHovered=_React$useState6[0],setHovered=_React$useState6[1];return/*#__PURE__*/createElement("button",{"aria-expanded":accessibilityExpanded,"aria-haspopup":accessibilityHaspopup,"aria-label":accessibilityLabel,className:classnames(styles$f.button,disabled?styles$f.disabled:styles$f.enabled),disabled:disabled,onBlur:function onBlur(){return setFocused(false);},onClick:function onClick(event){return _onClick&&_onClick({event:event});},onFocus:function onFocus(){return setFocused(true);},onMouseDown:function onMouseDown(){return setActive(true);},onMouseEnter:function onMouseEnter(){return setHovered(true);},onMouseLeave:function onMouseLeave(){setActive(false);setHovered(false);},onMouseUp:function onMouseUp(){return setActive(false);},type:"button"},/*#__PURE__*/createElement(Pog,{active:!disabled&&isActive,bgColor:bgColor,dangerouslySetSvgPath:dangerouslySetSvgPath,focused:!disabled&&isFocused,hovered:!disabled&&isHovered,icon:icon,iconColor:iconColor,selected:selected,size:size}));}IconButton.propTypes={accessibilityExpanded:PropTypes.bool,accessibilityHaspopup:PropTypes.bool,accessibilityLabel:PropTypes.string.isRequired,bgColor:PropTypes.oneOf(['transparent','darkGray','transparentDarkGray','gray','lightGray','white','red']),dangerouslySetSvgPath:PropTypes.shape({__path:PropTypes.string}),disabled:PropTypes.bool,icon:PropTypes.oneOf(Object.keys(icons)),iconColor:PropTypes.oneOf(['gray','darkGray','red','white']),onClick:PropTypes.func,selected:PropTypes.bool,size:PropTypes.oneOf(['xs','sm','md','lg','xl'])};/*
  Much of the math and understanding about this component comes from @vjeaux's
  excellent blog post on image resizing.

  http://blog.vjeux.com/2013/image/css-container-and-cover.html

  I highly recommend you read that first before continuing on reading.
*/var aspectRatio=function aspectRatio(width,height){return width/height;};function Letterbox(_ref){var children=_ref.children,contentAspectRatio=_ref.contentAspectRatio,height=_ref.height,width=_ref.width;var viewportAspectRatio=aspectRatio(width,height);var contentHeight;var contentWidth;if(contentAspectRatio<viewportAspectRatio){contentWidth=width;contentHeight=width/contentAspectRatio;}else {contentWidth=height*contentAspectRatio;contentHeight=height;}var offsetTop=(contentHeight-height)/-2;var offsetLeft=(contentWidth-width)/-2;return/*#__PURE__*/createElement(Mask,{width:width,height:height},/*#__PURE__*/createElement("div",{style:{marginTop:offsetTop,marginLeft:offsetLeft}},/*#__PURE__*/createElement(Mask,{width:contentWidth,height:contentHeight},children)));}Letterbox.propTypes={children:PropTypes.node,contentAspectRatio:PropTypes.number.isRequired,height:PropTypes.number.isRequired,width:PropTypes.number.isRequired};var styles$h={"link":"Wk9 xQ4","accessibleFocusStyle":"WMU iyn","block":"ljY kVc"};var TAB_KEY_CODE=9;function Link(_ref){var children=_ref.children,href=_ref.href,_ref$inline=_ref.inline,inline=_ref$inline===void 0?false:_ref$inline,onClick=_ref.onClick,_ref$target=_ref.target,target=_ref$target===void 0?null:_ref$target;var _React$useState=useState(true),_React$useState2=_slicedToArray$1(_React$useState,2),enableFocusStyles=_React$useState2[0],setEnableFocusStyles=_React$useState2[1];var rel=target==='blank'?'noopener noreferrer':null;var linkTarget=target?"_".concat(target):null;var handleClick=function handleClick(event){if(onClick&&href){onClick({event:event});}};var handleMouseDown=function handleMouseDown(){if(target==='blank'&&href){setEnableFocusStyles(false);}};var handleKeyUp=function handleKeyUp(event){if(target==='blank'&&event.keyCode===TAB_KEY_CODE&&href){setEnableFocusStyles(true);}};return/*#__PURE__*/createElement("a",{className:classnames(styles$h.link,enableFocusStyles?styles$h.accessibleFocusStyle:'',inline?'':styles$h.block),href:href,onMouseDown:handleMouseDown,onKeyUp:handleKeyUp,onClick:handleClick,rel:rel,target:linkTarget},children);}Link.propTypes={children:PropTypes.node.isRequired,href:PropTypes.string.isRequired,inline:PropTypes.bool,onClick:PropTypes.func,target:PropTypes.oneOf([null,'self','blank'])};/**
 * debounce prevents a particular function from being called until after a given
 * cooldown period (default 100ms). Every time the function is called, it resets
 * the cooldown.
 */function debounce(fn){var threshhold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;var deferTimer=null;var debounced=function debounced(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(deferTimer){clearTimeout(deferTimer);}deferTimer=setTimeout(function(){deferTimer=null;fn.apply(void 0,args);},threshhold);};debounced.clearTimeout=function(){if(deferTimer){clearTimeout(deferTimer);}};return debounced;}var FetchItems=/*#__PURE__*/function(_React$PureComponent){_inherits$1(FetchItems,_React$PureComponent);var _super=_createSuper$1(FetchItems);function FetchItems(){var _this;_classCallCheck$1(this,FetchItems);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"check",function(){var _this$props=_this.props,containerHeight=_this$props.containerHeight,isAtEnd=_this$props.isAtEnd,isFetching=_this$props.isFetching,fetchMore=_this$props.fetchMore,scrollHeight=_this$props.scrollHeight,scrollTop=_this$props.scrollTop;if(isAtEnd||isFetching||!fetchMore){return;}var scrollBuffer=containerHeight*3;if(scrollTop+scrollBuffer>scrollHeight){fetchMore();}});return _this;}_createClass$1(FetchItems,[{key:"componentDidMount",value:function componentDidMount(){setTimeout(this.check);}},{key:"componentDidUpdate",value:function componentDidUpdate(){this.check();}},{key:"render",value:function render(){return null;}}]);return FetchItems;}(PureComponent);_defineProperty$1(FetchItems,"propTypes",{containerHeight:PropTypes.number.isRequired,isAtEnd:PropTypes.bool,isFetching:PropTypes.bool.isRequired,fetchMore:PropTypes.func,scrollHeight:PropTypes.number.isRequired,scrollTop:PropTypes.number.isRequired});var styles$i={"Masonry":"vbI XiG","Masonry__Item":"Yl- MIw","Masonry__Item__Mounted":"Hb7"};function getScrollContainer(scrollContainer){return typeof scrollContainer==='function'?scrollContainer():scrollContainer;}var ScrollContainer=/*#__PURE__*/function(_React$Component){_inherits$1(ScrollContainer,_React$Component);var _super=_createSuper$1(ScrollContainer);function ScrollContainer(){var _this;_classCallCheck$1(this,ScrollContainer);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"scrollContainer",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"getScrollContainerRef",function(){return _this.scrollContainer;});_defineProperty$1(_assertThisInitialized$1(_this),"handleScroll",function(event){_this.props.onScroll(event);});return _this;}_createClass$1(ScrollContainer,[{key:"componentDidMount",value:function componentDidMount(){var scrollContainer=getScrollContainer(this.props.scrollContainer);if(scrollContainer){this.updateScrollContainer(scrollContainer);}}},{key:"componentDidUpdate",value:function componentDidUpdate(){var nextScrollContainer=getScrollContainer(this.props.scrollContainer);if(nextScrollContainer&&nextScrollContainer!==this.scrollContainer){this.updateScrollContainer(nextScrollContainer);}}},{key:"componentWillUnmount",value:function componentWillUnmount(){if(this.scrollContainer){this.scrollContainer.removeEventListener('scroll',this.handleScroll);}}},{key:"updateScrollContainer",value:function updateScrollContainer(scrollContainer){if(this.scrollContainer){// cleanup existing scroll container if it exists
this.scrollContainer.removeEventListener('scroll',this.handleScroll);}this.scrollContainer=scrollContainer;this.scrollContainer.addEventListener('scroll',this.handleScroll);}},{key:"render",value:function render(){return Children.only(this.props.children);}}]);return ScrollContainer;}(Component);_defineProperty$1(ScrollContainer,"propTypes",{children:PropTypes.node.isRequired,onScroll:PropTypes.func.isRequired,scrollContainer:PropTypes.oneOfType([PropTypes.object,PropTypes.func]).isRequired});/**
 * throttle limits the number of times a function can be called to a
 * given threshhold (100ms by default). The function is always called
 * on the leading and trailing edge.
 */function throttle(fn){var threshhold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:100;var last;var deferTimer;var throttled=function throttled(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var now=Date.now();if(last!==undefined&&now-last<threshhold){clearTimeout(deferTimer);deferTimer=setTimeout(function(){last=now;fn.apply(void 0,args);},threshhold-(now-last));}else {last=now;fn.apply(void 0,args);}};throttled.clearTimeout=function(){if(deferTimer){clearTimeout(deferTimer);}};return throttled;}var MeasurementStore=/*#__PURE__*/function(){function MeasurementStore(){_classCallCheck$1(this,MeasurementStore);_defineProperty$1(this,"map",new WeakMap());}_createClass$1(MeasurementStore,[{key:"get",value:function get(key){return this.map.get(key);}},{key:"has",value:function has(key){return this.map.has(key);}},{key:"set",value:function set(key,value){this.map.set(key,value);}},{key:"reset",value:function reset(){this.map=new WeakMap();}}]);return MeasurementStore;}();/**
 * Measuring scroll positions, element heights, etc is different between
 * different browsers and the window object vs other DOM nodes. These
 * utils abstract away these differences.
 */function getElementHeight(element){return element===window?window.innerHeight:element.clientHeight;}function getWindowScrollPos(){if(window.scrollY!==undefined){// Modern browser
return window.scrollY;}if(document.documentElement&&document.documentElement.scrollTop!==undefined){// IE support.
return document.documentElement.scrollTop;}return 0;}function getRelativeScrollTop(element){return element===window?getWindowScrollPos():element.scrollTop-element.getBoundingClientRect().top;}function getScrollHeight(element){return element===window&&document.documentElement?document.documentElement.scrollHeight:element.scrollHeight;}function getScrollPos(element){return element===window?getWindowScrollPos():element.scrollTop;}var UniformRowLayoutSymbol=Symbol('uniformRow');var mindex$1=function mindex(arr){var idx=0;for(var i=0;i<arr.length;i+=1){if(arr[i]<arr[idx]){idx=i;}}return idx;};var offscreen=function offscreen(width){var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Infinity;return {top:-9999,left:-9999,width:width,height:height};};var defaultLayout=function defaultLayout(_ref){var cache=_ref.cache,_ref$columnWidth=_ref.columnWidth,columnWidth=_ref$columnWidth===void 0?236:_ref$columnWidth,_ref$gutter=_ref.gutter,gutter=_ref$gutter===void 0?14:_ref$gutter,_ref$minCols=_ref.minCols,minCols=_ref$minCols===void 0?2:_ref$minCols,width=_ref.width;return function(items){if(width==null){return items.map(function(){return offscreen(columnWidth);});}var columnWidthAndGutter=columnWidth+gutter;var columnCount=Math.max(Math.floor((width+gutter)/columnWidthAndGutter),minCols);// the total height of each column
var heights=new Array(columnCount).fill(0);var centerOffset=Math.max(Math.floor((width-columnWidthAndGutter*columnCount+gutter)/2),0);return items.reduce(function(acc,item){var positions=acc;var height=cache.get(item);var position;if(height==null){position=offscreen(columnWidth);}else {var heightAndGutter=height+gutter;var col=mindex$1(heights);var top=heights[col];var left=col*columnWidthAndGutter+centerOffset;heights[col]+=heightAndGutter;position={top:top,left:left,width:columnWidth,height:height};}positions.push(position);return positions;},[]);};};var offscreen$1=function offscreen(width){var height=arguments.length>1&&arguments[1]!==undefined?arguments[1]:Infinity;return {top:-9999,left:-9999,width:width,height:height};};var uniformRowLayout=function uniformRowLayout(_ref){var cache=_ref.cache,_ref$columnWidth=_ref.columnWidth,columnWidth=_ref$columnWidth===void 0?236:_ref$columnWidth,_ref$gutter=_ref.gutter,gutter=_ref$gutter===void 0?14:_ref$gutter,width=_ref.width,_ref$minCols=_ref.minCols,minCols=_ref$minCols===void 0?3:_ref$minCols;return function(items){if(width==null){return items.map(function(){return offscreen$1(columnWidth);});}var columnWidthAndGutter=columnWidth+gutter;var columnCount=Math.max(Math.floor((width+gutter)/columnWidthAndGutter),minCols);var positions=[];var heights=[];for(var i=0;i<items.length;i+=1){var position=void 0;var height=cache.get(items[i]);if(height==null){position=offscreen$1(columnWidth);}else {var column=i%columnCount;var row=Math.floor(i/columnCount);if(column===0||height>heights[row]){heights[row]=height;}var top=row>0?heights.slice(0,row).reduce(function(sum,y){return sum+y+gutter;},0):0;position={top:top,left:column*columnWidthAndGutter,width:columnWidth,height:height};}positions.push(position);}return positions;};};var mindex$2=function mindex(arr){var idx=0;for(var i=0;i<arr.length;i+=1){if(arr[i]<arr[idx]){idx=i;}}return idx;};var fullWidthLayout=function fullWidthLayout(_ref){var _ref$gutter=_ref.gutter,gutter=_ref$gutter===void 0?0:_ref$gutter,cache=_ref.cache,_ref$minCols=_ref.minCols,minCols=_ref$minCols===void 0?2:_ref$minCols,_ref$idealColumnWidth=_ref.idealColumnWidth,idealColumnWidth=_ref$idealColumnWidth===void 0?240:_ref$idealColumnWidth,width=_ref.width;if(width==null){return function(items){return items.map(function(){return {top:Infinity,left:Infinity,width:Infinity,height:Infinity};});};}// "This is kind of crazy!" - you
// Yes, indeed. The "guessing" here is meant to replicate the pass that the
// original implementation takes with CSS.
var colguess=Math.floor(width/idealColumnWidth);var columnCount=Math.max(Math.floor((width-colguess*gutter)/idealColumnWidth),minCols);var columnWidth=Math.floor(width/columnCount);return function(items){// the total height of each column
var heights=new Array(columnCount).fill(0);return items.reduce(function(acc,item){var positions=acc;var height=cache.get(item);var position;if(height==null){position={top:Infinity,left:Infinity,width:columnWidth,height:Infinity};}else {var col=mindex$2(heights);var top=heights[col];var left=col*columnWidth+gutter/2;heights[col]+=height;position={top:top,left:left,width:columnWidth-gutter,height:height};}positions.push(position);return positions;},[]);};};var MasonryLayout=function MasonryLayout(){_classCallCheck$1(this,MasonryLayout);};var UniformRowLayout=function UniformRowLayout(){_classCallCheck$1(this,UniformRowLayout);};var RESIZE_DEBOUNCE=300;// Multiplied against container height.
// The amount of extra buffer space for populating visible items.
var VIRTUAL_BUFFER_FACTOR=0.7;var layoutNumberToCssDimension=function layoutNumberToCssDimension(n){return n!==Infinity?n:undefined;};var Masonry=/*#__PURE__*/function(_React$Component){_inherits$1(Masonry,_React$Component);var _super=_createSuper$1(Masonry);_createClass$1(Masonry,null,[{key:"createMeasurementStore",value:function createMeasurementStore(){return new MeasurementStore();}/**
     * Delays resize handling in case the scroll container is still being resized.
     */}]);function Masonry(props){var _this;_classCallCheck$1(this,Masonry);_this=_super.call(this,props);_defineProperty$1(_assertThisInitialized$1(_this),"handleResize",debounce(function(){if(_this.gridWrapper){_this.setState({width:_this.gridWrapper.clientWidth});}},RESIZE_DEBOUNCE));_defineProperty$1(_assertThisInitialized$1(_this),"updateScrollPosition",throttle(function(){if(!_this.scrollContainer){return;}var scrollContainer=_this.scrollContainer.getScrollContainerRef();if(!scrollContainer){return;}_this.setState({scrollTop:getScrollPos(scrollContainer)});}));_defineProperty$1(_assertThisInitialized$1(_this),"measureContainerAsync",debounce(function(){_this.measureContainer();},0));_defineProperty$1(_assertThisInitialized$1(_this),"containerHeight",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"containerOffset",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"gridWrapper",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"insertAnimationFrame",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"measureTimeout",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"scrollContainer",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"setGridWrapperRef",function(ref){_this.gridWrapper=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"setScrollContainerRef",function(ref){_this.scrollContainer=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"fetchMore",function(){var _this$props=_this.props,loadItems=_this$props.loadItems,items=_this$props.items;if(loadItems&&typeof loadItems==='function'){_this.setState({isFetching:true},function(){return loadItems({from:items.length});});}});_defineProperty$1(_assertThisInitialized$1(_this),"renderMasonryComponent",function(itemData,idx,position){var _this$props2=_this.props,Component=_this$props2.comp,scrollContainer=_this$props2.scrollContainer,virtualize=_this$props2.virtualize,virtualBoundsTop=_this$props2.virtualBoundsTop,virtualBoundsBottom=_this$props2.virtualBoundsBottom;var top=position.top,left=position.left,width=position.width,height=position.height;var isVisible;if(scrollContainer){var virtualBuffer=_this.containerHeight*VIRTUAL_BUFFER_FACTOR;var offsetScrollPos=_this.state.scrollTop-_this.containerOffset;var viewportTop=virtualBoundsTop?offsetScrollPos-virtualBoundsTop:offsetScrollPos-virtualBuffer;var viewportBottom=virtualBoundsBottom?offsetScrollPos+_this.containerHeight+virtualBoundsBottom:offsetScrollPos+_this.containerHeight+virtualBuffer;isVisible=!(position.top+position.height<viewportTop||position.top>viewportBottom);}else {// if no scroll container is passed in, items should always be visible
isVisible=true;}var itemComponent=/*#__PURE__*/createElement("div",{key:"item-".concat(idx),className:[styles$i.Masonry__Item,styles$i.Masonry__Item__Mounted].join(' '),"data-grid-item":true,style:{top:0,left:0,transform:"translateX(".concat(left,"px) translateY(").concat(top,"px)"),WebkitTransform:"translateX(".concat(left,"px) translateY(").concat(top,"px)"),width:layoutNumberToCssDimension(width),height:layoutNumberToCssDimension(height)}},/*#__PURE__*/createElement(Component,{data:itemData,itemIdx:idx,isMeasuring:false}));return virtualize?isVisible&&itemComponent||null:itemComponent;});_this.containerHeight=0;_this.containerOffset=0;var measurementStore=props.measurementStore||Masonry.createMeasurementStore();// eslint-disable-next-line react/state-in-constructor
_this.state={hasPendingMeasurements:props.items.some(function(item){return !!item&&!measurementStore.has(item);}),isFetching:false,items:props.items,measurementStore:measurementStore,scrollTop:0,width:undefined};return _this;}/**
   * Adds hooks after the component mounts.
   */_createClass$1(Masonry,[{key:"componentDidMount",value:function componentDidMount(){var _this2=this;window.addEventListener('resize',this.handleResize);this.measureContainer();var scrollTop=this.state.scrollTop;if(this.scrollContainer!=null){var scrollContainer=this.scrollContainer.getScrollContainerRef();if(scrollContainer){scrollTop=getScrollPos(scrollContainer);}}this.setState(function(prevState){return {scrollTop:scrollTop,width:_this2.gridWrapper?_this2.gridWrapper.clientWidth:prevState.width};});}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps,prevState){var _this3=this;var items=this.props.items;var measurementStore=this.state.measurementStore;this.measureContainerAsync();if(prevState.width!=null&&this.state.width!==prevState.width){measurementStore.reset();}// calculate whether we still have pending measurements
var hasPendingMeasurements=items.some(function(item){return !!item&&!measurementStore.has(item);});if(hasPendingMeasurements||hasPendingMeasurements!==this.state.hasPendingMeasurements||prevState.width==null){this.insertAnimationFrame=requestAnimationFrame(function(){_this3.setState({hasPendingMeasurements:hasPendingMeasurements});});}}/**
     * Remove listeners when unmounting.
     */},{key:"componentWillUnmount",value:function componentWillUnmount(){if(this.insertAnimationFrame){cancelAnimationFrame(this.insertAnimationFrame);}// Make sure async methods are cancelled.
this.measureContainerAsync.clearTimeout();this.handleResize.clearTimeout();this.updateScrollPosition.clearTimeout();window.removeEventListener('resize',this.handleResize);}},{key:"measureContainer",value:function measureContainer(){if(this.scrollContainer!=null){var scrollContainer=this.scrollContainer;var scrollContainerRef=scrollContainer.getScrollContainerRef();if(scrollContainerRef){this.containerHeight=getElementHeight(scrollContainerRef);var el=this.gridWrapper;if(el instanceof HTMLElement){var relativeScrollTop=getRelativeScrollTop(scrollContainerRef);this.containerOffset=el.getBoundingClientRect().top+relativeScrollTop;}}}}/**
     * Clear measurements/positions and force a reflow of the entire grid.
     * Only use this if absolutely necessary - ex: We need to reflow items if the
     * number of columns we would display should change after a resize.
     */},{key:"reflow",value:function reflow(){var measurementStore=this.props.measurementStore;if(measurementStore){measurementStore.reset();}this.state.measurementStore.reset();this.measureContainer();this.forceUpdate();}},{key:"render",value:function render(){var _this4=this;var _this$props3=this.props,columnWidth=_this$props3.columnWidth,Component=_this$props3.comp,flexible=_this$props3.flexible,gutter=_this$props3.gutterWidth,items=_this$props3.items,layout=_this$props3.layout,minCols=_this$props3.minCols,scrollContainer=_this$props3.scrollContainer;var _this$state=this.state,hasPendingMeasurements=_this$state.hasPendingMeasurements,measurementStore=_this$state.measurementStore,width=_this$state.width;var getPositions;if((flexible||layout==='flexible')&&width!==null){getPositions=fullWidthLayout({gutter:gutter,cache:measurementStore,minCols:minCols,idealColumnWidth:columnWidth,width:width});}else if(layout===UniformRowLayoutSymbol||layout instanceof UniformRowLayout||layout==='uniformRow'){getPositions=uniformRowLayout({cache:measurementStore,columnWidth:columnWidth,gutter:gutter,minCols:minCols,width:width});}else {getPositions=defaultLayout({cache:measurementStore,columnWidth:columnWidth,gutter:gutter,minCols:minCols,width:width});}var gridBody;if(width==null&&hasPendingMeasurements){// When hyrdating from a server render, we don't have the width of the grid
// and the measurement store is empty
gridBody=/*#__PURE__*/createElement("div",{className:styles$i.Masonry,style:{height:0,width:'100%'},ref:this.setGridWrapperRef},items.filter(function(item){return item;}).map(function(item,i){return/*#__PURE__*/createElement("div",{// keep this in sync with renderMasonryComponent
className:"static","data-grid-item":true,key:i,style:{top:0,left:0,transform:'translateX(0px) translateY(0px)',WebkitTransform:'translateX(0px) translateY(0px)',width:flexible||layout==='flexible'?undefined:layoutNumberToCssDimension(columnWidth)// we can't set a width for server rendered flexible items
},ref:function ref(el){if(el&&!(flexible||layout==='flexible')){// only measure flexible items on client
measurementStore.set(item,el.clientHeight);}}},/*#__PURE__*/createElement(Component,{data:item,itemIdx:i,isMeasuring:false}));}));}else if(width==null){// When the width is empty (usually after a re-mount) render an empty
// div to collect the width for layout
gridBody=/*#__PURE__*/createElement("div",{style:{width:'100%'},ref:this.setGridWrapperRef});}else {// Full layout is possible
var itemsToRender=items.filter(function(item){return item&&measurementStore.has(item);});var itemsToMeasure=items.filter(function(item){return item&&!measurementStore.has(item);}).slice(0,minCols);var positions=getPositions(itemsToRender);var measuringPositions=getPositions(itemsToMeasure);// Math.max() === -Infinity when there are no positions
var height=positions.length?Math.max.apply(Math,_toConsumableArray(positions.map(function(pos){return pos.top+pos.height;}))):0;gridBody=/*#__PURE__*/createElement("div",{style:{width:'100%'},ref:this.setGridWrapperRef},/*#__PURE__*/createElement("div",{className:styles$i.Masonry,style:{height:height,width:width}},itemsToRender.map(function(item,i){return _this4.renderMasonryComponent(item,i,positions[i]);})),/*#__PURE__*/createElement("div",{className:styles$i.Masonry,style:{width:width}},itemsToMeasure.map(function(data,i){// itemsToMeasure is always the length of minCols, so i will always be 0..minCols.length
// we normalize the index here relative to the item list as a whole so that itemIdx is correct
// and so that React doesnt reuse the measurement nodes
var measurementIndex=itemsToRender.length+i;var position=measuringPositions[i];return/*#__PURE__*/createElement("div",{key:"measuring-".concat(measurementIndex),style:{visibility:'hidden',position:'absolute',top:layoutNumberToCssDimension(position.top),left:layoutNumberToCssDimension(position.left),width:layoutNumberToCssDimension(position.width),height:layoutNumberToCssDimension(position.height)},ref:function ref(el){if(el){measurementStore.set(data,el.clientHeight);}}},/*#__PURE__*/createElement(Component,{data:data,itemIdx:measurementIndex,isMeasuring:true}));})),this.scrollContainer&&/*#__PURE__*/createElement(FetchItems,{containerHeight:this.containerHeight,fetchMore:this.fetchMore,isFetching:this.state.isFetching||this.state.hasPendingMeasurements,scrollHeight:height+this.containerOffset,scrollTop:this.state.scrollTop}));}return scrollContainer?/*#__PURE__*/createElement(ScrollContainer,{ref:this.setScrollContainerRef,onScroll:this.updateScrollPosition,scrollContainer:scrollContainer},gridBody):gridBody;}}],[{key:"getDerivedStateFromProps",value:function getDerivedStateFromProps(props,state){var items=props.items;var measurementStore=state.measurementStore;// whenever we're receiving new props, determine whether any items need to be measured
// TODO - we should treat items as immutable
var hasPendingMeasurements=items.some(function(item){return !measurementStore.has(item);});// Shallow compare all items, if any change reflow the grid.
for(var i=0;i<items.length;i+=1){// We've reached the end of our current props and everything matches.
// If we hit this case it means we need to insert new items.
if(state.items[i]===undefined){return {hasPendingMeasurements:hasPendingMeasurements,items:items,isFetching:false};}// Reset grid items when:
if(// An item object ref does not match.
items[i]!==state.items[i]||// Or less items than we currently have are passed in.
items.length<state.items.length){return {hasPendingMeasurements:hasPendingMeasurements,items:items,isFetching:false};}}// Reset items if new items array is empty.
if(items.length===0&&state.items.length>0){return {hasPendingMeasurements:hasPendingMeasurements,items:items,isFetching:false};}if(hasPendingMeasurements!==state.hasPendingMeasurements){// make sure we always update hasPendingMeasurements
return {hasPendingMeasurements:hasPendingMeasurements,items:items};}// Return null to indicate no change to state.
return null;}}]);return Masonry;}(Component);_defineProperty$1(Masonry,"propTypes",{/**
   * The preferred/target item width. If `flexible` is set, the item width will
   * grow to fill column space, and shrink to fit if below min columns.
   */columnWidth:PropTypes.number,/**
   * The component to render.
   */ /* eslint react/no-unused-prop-types: 0 */comp:PropTypes.func.isRequired,/**
   * The preferred/target item width. Item width will grow to fill
   * column space, and shrink to fit if below min columns.
   */flexible:PropTypes.bool,/**
   * The amount of space between each item.
   */gutterWidth:PropTypes.number,/**
   * An array of all objects to display in the grid.
   */items:PropTypes.arrayOf(PropTypes.shape({})).isRequired,/**
   * Measurement Store
   */measurementStore:PropTypes.instanceOf(MeasurementStore),/**
   * Layout system to use for items
   */layout:PropTypes.oneOfType([PropTypes.instanceOf(MasonryLayout),PropTypes.instanceOf(UniformRowLayout),PropTypes.symbol,PropTypes.string]),/**
   * A callback which the grid calls when we need to load more items as the user scrolls.
   * The callback should update the state of the items, and pass those in as props
   * to this component.
   */loadItems:PropTypes.func,/**
   * Minimum number of columns to display.
   */minCols:PropTypes.number,/**
   * Function that the grid calls to get the scroll container.
   * This is required if the grid is expected to be scrollable.
   */scrollContainer:PropTypes.func,/**
   * Whether or not to use actual virtualization
   */virtualize:PropTypes.bool});_defineProperty$1(Masonry,"defaultProps",{columnWidth:236,minCols:3,layout:'basic',loadItems:function loadItems(){},virtualize:false});var NoScrollBehavior=/*#__PURE__*/function(_React$Component){_inherits$1(NoScrollBehavior,_React$Component);var _super=_createSuper$1(NoScrollBehavior);function NoScrollBehavior(props){var _this;_classCallCheck$1(this,NoScrollBehavior);_this=_super.call(this,props);_defineProperty$1(_assertThisInitialized$1(_this),"prevOverflow",void 0);_this.prevOverflow=null;return _this;}_createClass$1(NoScrollBehavior,[{key:"componentDidMount",value:function componentDidMount(){if(typeof window!=='undefined'){this.prevOverflow=window.document.body.style.overflow;window.document.body.style.overflow='hidden';}}},{key:"componentWillUnmount",value:function componentWillUnmount(){if(typeof window!=='undefined'){window.document.body.style.overflow=this.prevOverflow;}}},{key:"render",value:function render(){return this.props.children;}}]);return NoScrollBehavior;}(Component);function queryFocusableAll(el){var selector=['a[href]','area[href]','input:not([disabled])','select:not([disabled])','textarea:not([disabled])','button:not([disabled])','iframe','object','embed','[tabindex="-1"]','[tabindex="0"]','[contenteditable]','audio[controls]','video[controls]','summary'].join(',');return el.querySelectorAll(selector);}var focusElement=function focusElement(el){if(typeof el.focus==='function'){el.focus();}};var TrapFocusBehavior=/*#__PURE__*/function(_React$Component){_inherits$1(TrapFocusBehavior,_React$Component);var _super=_createSuper$1(TrapFocusBehavior);function TrapFocusBehavior(){var _this;_classCallCheck$1(this,TrapFocusBehavior);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"el",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"previouslyFocusedEl",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"setElRef",function(el){if(el){_this.el=el;}});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(event){if(!_this.el||event.target instanceof Node&&_this.el.contains(event.target)){return;}event.stopPropagation();event.preventDefault();_this.focusFirstChild();});return _this;}_createClass$1(TrapFocusBehavior,[{key:"componentDidMount",value:function componentDidMount(){this.previouslyFocusedEl=document.activeElement;this.focusFirstChild();document.addEventListener('focus',this.handleFocus,true);}},{key:"componentWillUnmount",value:function componentWillUnmount(){document.removeEventListener('focus',this.handleFocus,true);if(this.previouslyFocusedEl){focusElement(this.previouslyFocusedEl);}}},{key:"focusFirstChild",value:function focusFirstChild(){var el=this.el;if(el){focusElement(queryFocusableAll(el)[0]);}}},{key:"render",value:function render(){return/*#__PURE__*/createElement("div",{ref:this.setElRef},this.props.children);}}]);return TrapFocusBehavior;}(Component);var styles$j={"backdrop":"oM2 MIw Rym QLY p6V ojN Smz","container":"Fwt _he Hsu _O1 mQ8 Rym QLY gjz L4E","wrapper":"ZHw XiG sLG _O1 qJc OVX L3z lTs","shadowContainer":"XpS Hsu XiG xuU","shadow":"d2I"};var SIZE_WIDTH_MAP$1={sm:540,md:720,lg:900};var ESCAPE_KEY_CODE$1=27;function Backdrop(_ref){var children=_ref.children,onClick=_ref.onClick;var handleClick=function handleClick(event){if(event.target!==event.currentTarget){return;}if(onClick){onClick(event);}};return/*#__PURE__*/createElement(Fragment,null,/*#__PURE__*/createElement("div",{className:styles$j.backdrop,onClick:handleClick}),children);}function Header(_ref2){var heading=_ref2.heading;if(typeof heading!=='string'){return heading;}return/*#__PURE__*/createElement(Box,{display:"flex",justifyContent:"center",padding:8},/*#__PURE__*/createElement(Heading,{size:"md",accessibilityLevel:1},heading));}function Modal(_ref3){var accessibilityModalLabel=_ref3.accessibilityModalLabel,children=_ref3.children,_ref3$closeOnOutsideC=_ref3.closeOnOutsideClick,closeOnOutsideClick=_ref3$closeOnOutsideC===void 0?true:_ref3$closeOnOutsideC,onDismiss=_ref3.onDismiss,footer=_ref3.footer,heading=_ref3.heading,_ref3$role=_ref3.role,role=_ref3$role===void 0?'dialog':_ref3$role,_ref3$size=_ref3.size,size=_ref3$size===void 0?'sm':_ref3$size;var _React$useState=useState(false),_React$useState2=_slicedToArray$1(_React$useState,2),showTopShadow=_React$useState2[0],setShowTopShadow=_React$useState2[1];var _React$useState3=useState(false),_React$useState4=_slicedToArray$1(_React$useState3,2),showBottomShadow=_React$useState4[0],setShowBottomShadow=_React$useState4[1];var content=useRef(null);useEffect(function(){function handleKeyUp(event){if(event.keyCode===ESCAPE_KEY_CODE$1){onDismiss();}}window.addEventListener('keyup',handleKeyUp);return function cleanup(){window.removeEventListener('keyup',handleKeyUp);};},[onDismiss]);var handleOutsideClick=function handleOutsideClick(){if(closeOnOutsideClick){onDismiss();}};var updateShadows=function updateShadows(){var target=content.current;if(!target){return;}var hasVerticalScrollbar=target.clientHeight<target.scrollHeight;setShowTopShadow(hasVerticalScrollbar&&target.scrollTop>0);setShowBottomShadow(hasVerticalScrollbar&&target.offsetHeight+target.scrollTop<target.scrollHeight);};useEffect(function(){window.addEventListener('resize',updateShadows);return function(){window.removeEventListener('resize',updateShadows);};},[]);useEffect(function(){updateShadows();},[]);var width=typeof size==='string'?SIZE_WIDTH_MAP$1[size]:size;return/*#__PURE__*/createElement(NoScrollBehavior,null,/*#__PURE__*/createElement(TrapFocusBehavior,null,/*#__PURE__*/createElement("div",{"aria-label":accessibilityModalLabel,className:styles$j.container,role:role},/*#__PURE__*/createElement(Backdrop,{onClick:handleOutsideClick},/*#__PURE__*/createElement("div",{className:styles$j.wrapper,tabIndex:-1,style:{width:width}},/*#__PURE__*/createElement(Box,{flex:"grow",position:"relative",display:"flex",direction:"column",width:"100%"},heading&&/*#__PURE__*/createElement("div",{className:classnames(styles$j.shadowContainer,_defineProperty$1({},styles$j.shadow,showTopShadow))},/*#__PURE__*/createElement(Header,{heading:heading})),/*#__PURE__*/createElement(Box,{flex:"grow",overflow:"auto",onScroll:updateShadows,ref:content},children),footer&&/*#__PURE__*/createElement("div",{className:classnames(styles$j.shadowContainer,_defineProperty$1({},styles$j.shadow,showBottomShadow))},/*#__PURE__*/createElement(Box,{padding:8},footer))))))));}Modal.propTypes={accessibilityModalLabel:PropTypes.string.isRequired,children:PropTypes.node,closeOnOutsideClick:PropTypes.bool,footer:PropTypes.node,heading:PropTypes.oneOfType([PropTypes.string,PropTypes.node]),onDismiss:PropTypes.func,role:PropTypes.oneOf(['alertdialog','dialog']),size:PropTypes.oneOfType([PropTypes.number,PropTypes.oneOf(['sm','md','lg'])])};var styles$k={"innerCircle":"DgX Hsu","PulseAnimation":"wD9","outerCircle":"uWM","AppearAnimation":"B0Z"};function Pulsar(_ref){var paused=_ref.paused,_ref$size=_ref.size,size=_ref$size===void 0?135:_ref$size;return/*#__PURE__*/createElement(Box,{dangerouslySetInlineStyle:{__style:{animationIterationCount:paused?0:'infinite',outline:'none',boxShadow:'none'}},display:paused?'none':'block',height:size,position:"relative",width:size},/*#__PURE__*/createElement("div",{className:styles$k.innerCircle},/*#__PURE__*/createElement("div",{className:styles$k.outerCircle})));}Pulsar.propTypes={paused:PropTypes.bool,size:PropTypes.number};var styles$l={"RadioButton":"ty9 kVc Hsu INd _O1 gjz mQ8 XiG Pw5","RadioButtonIsFocused":"HGa C1J","Border":"fRe LJB","BorderCheckedSm":"LSV","BorderCheckedMd":"dJq","BorderDarkGray":"y-t nG5","BorderDisabled":"CVS adn","BorderDisabledChecked":"JtD Fvo","BorderHovered":"dxz dPY","BorderUnchecked":"qs6 XgI","BgDisabled":"K4t gpV","BgEnabled":"E0x qJc","InputEnabled":"ac9 BG7"};var RadioButton=/*#__PURE__*/function(_React$Component){_inherits$1(RadioButton,_React$Component);var _super=_createSuper$1(RadioButton);function RadioButton(){var _this;_classCallCheck$1(this,RadioButton);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false,hovered:false});_defineProperty$1(_assertThisInitialized$1(_this),"handleChange",function(event){var onChange=_this.props.onChange;var checked=event.target.checked;onChange({checked:checked,event:event});});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(){return _this.setState({focused:false});});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(){return _this.setState({focused:true});});_defineProperty$1(_assertThisInitialized$1(_this),"handleHover",function(hovered){_this.setState({hovered:hovered});});return _this;}_createClass$1(RadioButton,[{key:"render",value:function render(){var _this2=this;var _this$props=this.props,checked=_this$props.checked,disabled=_this$props.disabled,id=_this$props.id,label=_this$props.label,name=_this$props.name,size=_this$props.size,value=_this$props.value;var _this$state=this.state,focused=_this$state.focused,hovered=_this$state.hovered;var borderStyle=styles$l.Border;if(disabled&&checked){borderStyle=styles$l.BorderDisabledChecked;}else if(!disabled&&checked){borderStyle=styles$l.BorderDarkGray;}else if(!disabled&&hovered){borderStyle=styles$l.BorderHovered;}var borderWidth=styles$l.BorderUnchecked;if(disabled&&!checked){borderWidth=styles$l.BorderDisabled;}else if(checked&&size==='sm'){borderWidth=styles$l.BorderCheckedSm;}else if(checked&&size==='md'){borderWidth=styles$l.BorderCheckedMd;}var styleSize=size==='sm'?controlStyles.sizeSm:controlStyles.sizeMd;var bgStyle=disabled&&!checked?styles$l.BgDisabled:styles$l.BgEnabled;return/*#__PURE__*/createElement(Box,{alignItems:"center",display:"flex",justifyContent:"start",marginLeft:-1,marginRight:-1},/*#__PURE__*/createElement(Label,{htmlFor:id},/*#__PURE__*/createElement(Box,{paddingX:1},/*#__PURE__*/createElement("div",{className:classnames(bgStyle,borderStyle,borderWidth,styleSize,styles$l.RadioButton,_defineProperty$1({},styles$l.RadioButtonIsFocused,focused))},/*#__PURE__*/createElement("input",{checked:checked,className:classnames(controlStyles.input,styleSize,_defineProperty$1({},styles$l.InputEnabled,!disabled)),disabled:disabled,id:id,name:name,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onMouseEnter:function onMouseEnter(){return _this2.handleHover(true);},onMouseLeave:function onMouseLeave(){return _this2.handleHover(false);},type:"radio",value:value})))),label&&/*#__PURE__*/createElement(Label,{htmlFor:id},/*#__PURE__*/createElement(Box,{paddingX:1},/*#__PURE__*/createElement(Text,{color:disabled?'gray':undefined,size:size==='sm'?'md':'lg'},label))));}}]);return RadioButton;}(Component);_defineProperty$1(RadioButton,"propTypes",{checked:PropTypes.bool,disabled:PropTypes.bool,id:PropTypes.string.isRequired,label:PropTypes.string,name:PropTypes.string,onChange:PropTypes.func.isRequired,value:PropTypes.string.isRequired,size:PropTypes.oneOf(['sm','md'])});_defineProperty$1(RadioButton,"defaultProps",{checked:false,disabled:false,size:'md'});function FlexBox(props){return/*#__PURE__*/createElement(Box,_extends$1({display:"flex"},props));}FlexBox.propTypes={alignContent:AlignContentPropType,alignItems:AlignItemsPropType,alignSelf:AlignSelfPropType,children:PropTypes.node,direction:DirectionPropType,fit:PropTypes.bool,flex:FlexPropType,height:DimensionPropType,justifyContent:JustifyContentPropType,maxHeight:DimensionPropType,maxWidth:DimensionPropType,minHeight:DimensionPropType,minWidth:DimensionPropType,overflow:OverflowPropType,padding:PaddingPropType,paddingX:PaddingPropType,paddingY:PaddingPropType,smPadding:PaddingPropType,smPaddingX:PaddingPropType,smPaddingY:PaddingPropType,mdPadding:PaddingPropType,mdPaddingX:PaddingPropType,mdPaddingY:PaddingPropType,lgPadding:PaddingPropType,lgPaddingX:PaddingPropType,lgPaddingY:PaddingPropType,width:DimensionPropType,wrap:PropTypes.bool};function Row(_ref){var _ref$alignItems=_ref.alignItems,alignItems=_ref$alignItems===void 0?'center':_ref$alignItems,children=_ref.children,_ref$gap=_ref.gap,gap=_ref$gap===void 0?0:_ref$gap,height=_ref.height,_ref$justifyContent=_ref.justifyContent,justifyContent=_ref$justifyContent===void 0?'start':_ref$justifyContent,width=_ref.width,rest=_objectWithoutProperties(_ref,["alignItems","children","gap","height","justifyContent","width"]);return/*#__PURE__*/createElement(Box,{height:height,marginStart:gap?-gap:0,marginEnd:gap?-gap:0,width:width},/*#__PURE__*/createElement(FlexBox,_extends$1({alignItems:alignItems,direction:"row",height:height,justifyContent:justifyContent,width:width},rest),Children.map(children,function(child){return/*#__PURE__*/createElement(Box,{paddingX:gap},child);})));}Row.propTypes={alignContent:AlignContentPropType,alignItems:AlignItemsPropType,alignSelf:AlignSelfPropType,children:PropTypes.node,flex:FlexPropType,gap:PaddingPropType,height:DimensionPropType,justifyContent:JustifyContentPropType,maxHeight:DimensionPropType,maxWidth:DimensionPropType,minHeight:DimensionPropType,minWidth:DimensionPropType,overflow:OverflowPropType,width:DimensionPropType,wrap:PropTypes.bool};var ScrollFetch=/*#__PURE__*/function(_React$PureComponent){_inherits$1(ScrollFetch,_React$PureComponent);var _super=_createSuper$1(ScrollFetch);function ScrollFetch(){var _this;_classCallCheck$1(this,ScrollFetch);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"updatePosition",throttle(function(){_this.setState(_this.getScrollState());}));_defineProperty$1(_assertThisInitialized$1(_this),"state",{containerHeight:0,scrollHeight:0,scrollTop:0});_defineProperty$1(_assertThisInitialized$1(_this),"getScrollHeight",function(){var container=_this.props.container;if(!container){return 0;}return getScrollHeight(container);});return _this;}_createClass$1(ScrollFetch,[{key:"componentDidMount",/**
     * Adds scroll listener after the component mounts.
     */value:function componentDidMount(){var _this2=this;var container=this.props.container;if(!container){return;}setTimeout(function(){_this2.setState(_objectSpread2({containerHeight:getElementHeight(container)},_this2.getScrollState()));});}/**
     * Update scroll buffer and check after the component updates.
     */},{key:"componentDidUpdate",value:function componentDidUpdate(){// setTimeout so the parent component can calculate renderHeight().
this.updatePosition();}/**
     * Returns the scrollable content height.
     */},{key:"getScrollState",value:function getScrollState(){var _this$props=this.props,container=_this$props.container,renderHeight=_this$props.renderHeight;if(!container){return null;}var scrollHeight=renderHeight||this.getScrollHeight;return {scrollHeight:scrollHeight(),scrollTop:getScrollPos(container)};}},{key:"render",value:function render(){var _this$state=this.state,containerHeight=_this$state.containerHeight,scrollHeight=_this$state.scrollHeight,scrollTop=_this$state.scrollTop;var _this$props2=this.props,container=_this$props2.container,fetchMore=_this$props2.fetchMore,isAtEnd=_this$props2.isAtEnd,isFetching=_this$props2.isFetching;var props={containerHeight:containerHeight,fetchMore:fetchMore,isAtEnd:isAtEnd,isFetching:isFetching,scrollHeight:scrollHeight,scrollTop:scrollTop};if(!container||isAtEnd){return null;}return/*#__PURE__*/createElement(ScrollContainer,{onScroll:this.updatePosition,scrollContainer:container},/*#__PURE__*/createElement(FetchItems,props));}}]);return ScrollFetch;}(PureComponent);_defineProperty$1(ScrollFetch,"propTypes",{/**
   * The scroll container to use. Defaults to window.
   */container:PropTypes.shape({addEventListener:PropTypes.func,removeEventListener:PropTypes.func}),renderHeight:PropTypes.func,isAtEnd:PropTypes.bool,isFetching:PropTypes.bool,fetchMore:PropTypes.func});_defineProperty$1(ScrollFetch,"defaultProps",{container:typeof window!=='undefined'?window:undefined});var styles$m={"input":"ta7 iyn KI_ Lfz XgI Hsu pBj tBJ dyH iFc yTZ L4E","inputActive":"uKU","inputHovered":"Zj6 dPY BG7","clear":"StA wc1 adn Shl C9q BG7 p6V YbY"};var SearchField=/*#__PURE__*/function(_React$Component){_inherits$1(SearchField,_React$Component);var _super=_createSuper$1(SearchField);function SearchField(){var _this;_classCallCheck$1(this,SearchField);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false,hovered:false});_defineProperty$1(_assertThisInitialized$1(_this),"handleChange",function(event){var onChange=_this.props.onChange;onChange({value:event.currentTarget.value,syntheticEvent:event});});_defineProperty$1(_assertThisInitialized$1(_this),"handleClear",function(event){var onChange=_this.props.onChange;onChange({value:'',syntheticEvent:event});});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseEnter",function(){return _this.setState({hovered:true});});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseLeave",function(){return _this.setState({hovered:false});});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(event){var onFocus=_this.props.onFocus;_this.setState({focused:true});if(onFocus){onFocus({value:event.currentTarget.value,syntheticEvent:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(event){var onBlur=_this.props.onBlur;_this.setState({focused:false});if(onBlur){onBlur({event:event});}});return _this;}_createClass$1(SearchField,[{key:"render",value:function render(){var _classnames;var _this$props=this.props,accessibilityLabel=_this$props.accessibilityLabel,autoComplete=_this$props.autoComplete,id=_this$props.id,placeholder=_this$props.placeholder,_this$props$size=_this$props.size,size=_this$props$size===void 0?'md':_this$props$size,value=_this$props.value;var _this$state=this.state,focused=_this$state.focused,hovered=_this$state.hovered;var hasValue=value&&value.length>0;var hideSearchIcon=focused||hasValue;var className=classnames(styles$m.input,(_classnames={},_defineProperty$1(_classnames,layout.medium,size==='md'),_defineProperty$1(_classnames,layout.large,size==='lg'),_defineProperty$1(_classnames,styles$m.inputActive,focused||hasValue),_defineProperty$1(_classnames,styles$m.inputHovered,hovered),_classnames));var clearButtonSize=size==='lg'?24:20;var clearIconSize=size==='lg'?12:10;return/*#__PURE__*/React__default.createElement(Box,{alignItems:"center",display:"flex",onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,onFocus:this.handleFocus,onBlur:this.handleBlur,position:"relative"},!hideSearchIcon&&/*#__PURE__*/React__default.createElement(Box,{dangerouslySetInlineStyle:{__style:{pointerEvents:'none',// Added the following lines for Safari support
top:'50%',transform:'translateY(-50%)'}},left:true,paddingX:4,position:"absolute"},/*#__PURE__*/React__default.createElement(Icon,{icon:"search",accessibilityLabel:""})),/*#__PURE__*/React__default.createElement("input",{"aria-label":accessibilityLabel,autoComplete:autoComplete,className:className,id:id,onChange:this.handleChange,placeholder:placeholder,role:"searchbox",type:"search",value:value}),hasValue&&/*#__PURE__*/React__default.createElement("button",{className:styles$m.clear,onClick:this.handleClear,tabIndex:-1,type:"button"},/*#__PURE__*/React__default.createElement(Box,{alignItems:"center",color:focused?'darkGray':'transparent',display:"flex",height:clearButtonSize,justifyContent:"center",rounding:"circle",width:clearButtonSize},/*#__PURE__*/React__default.createElement(Icon,{accessibilityLabel:"",color:focused?'white':'darkGray',icon:"cancel",size:clearIconSize}))));}}]);return SearchField;}(React__default.Component);_defineProperty$1(SearchField,"propTypes",{accessibilityLabel:PropTypes.string.isRequired,autoComplete:PropTypes.oneOf(['on','off','username','name']),id:PropTypes.string.isRequired,onBlur:PropTypes.func,onChange:PropTypes.func.isRequired,onFocus:PropTypes.func,placeholder:PropTypes.string,size:PropTypes.oneOf(['md','lg']),value:PropTypes.string});var styles$n={"SegmentedControl":"l92 Hsu gpV _O1 b8T ho-","item":"ope iyn ujU e43 adn BG7","itemIsNotSelected":"izI","itemIsSelected":"zHr qJc"};function SegmentedControl(props){var items=props.items,onChange=props.onChange,responsive=props.responsive,selectedItemIndex=props.selectedItemIndex,_props$size=props.size,size=_props$size===void 0?'md':_props$size;var buttonWidth=responsive?undefined:"".concat(Math.floor(100/Math.max(1,items.length)),"%");return/*#__PURE__*/createElement("div",{className:classnames(styles$n.SegmentedControl,size==='md'?layout.medium:layout.large),role:"tablist"},items.map(function(item,i){var _classnames;var isSelected=i===selectedItemIndex;var cs=classnames(styles$n.item,(_classnames={},_defineProperty$1(_classnames,styles$n.itemIsNotSelected,!isSelected),_defineProperty$1(_classnames,styles$n.itemIsSelected,isSelected),_classnames));return/*#__PURE__*/createElement("button",{"aria-selected":isSelected,className:cs,key:i,onClick:function onClick(event){return onChange({event:event,activeIndex:i});},role:"tab",type:"button",style:{width:buttonWidth}},typeof item==='string'?/*#__PURE__*/createElement(Text,{color:isSelected?'darkGray':'gray',align:"center",size:size,weight:"bold"},item):/*#__PURE__*/createElement(Box,{display:"flex",justifyContent:"center"},item));}));}SegmentedControl.propTypes={items:PropTypes.arrayOf(PropTypes.node).isRequired,onChange:PropTypes.func.isRequired,responsive:PropTypes.bool,selectedItemIndex:PropTypes.number.isRequired,size:PropTypes.oneOf(['md','lg'])};var formElement={"base":"unP iyn","normal":"aKM","disabled":"RJl B9u gpV","errored":"k8j","enabled":"Pve pBj qJc"};function FormHelperText(_ref){var text=_ref.text;return/*#__PURE__*/createElement(Box,{marginTop:2},/*#__PURE__*/createElement(Text,{color:"gray",size:"sm"},text));}FormHelperText.propTypes={text:PropTypes.string.isRequired};var styles$o={"formLabel":"Qoc"};function FormLabel(_ref){var id=_ref.id,label=_ref.label;return/*#__PURE__*/createElement(Label,{htmlFor:id},/*#__PURE__*/createElement("div",{className:styles$o.formLabel},/*#__PURE__*/createElement(Text,{size:"sm"},label)));}FormLabel.propTypes={id:PropTypes.string.isRequired,label:PropTypes.string.isRequired};var styles$p={"select":"eMC tBJ dyH iFc yTZ pBj BG7 XiG YbY L4E"};var SelectList=/*#__PURE__*/function(_React$Component){_inherits$1(SelectList,_React$Component);var _super=_createSuper$1(SelectList);function SelectList(){var _this;_classCallCheck$1(this,SelectList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"select",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false});_defineProperty$1(_assertThisInitialized$1(_this),"setSelectListRef",function(ref){_this.select=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"handleOnChange",function(event){var _this$props=_this.props,onChange=_this$props.onChange,value=_this$props.value;if(event.target instanceof HTMLSelectElement&&value!==event.target.value){onChange({event:event,value:event.target.value});}});return _this;}_createClass$1(SelectList,[{key:"render",value:function render(){var _this$props2=this.props,disabled=_this$props2.disabled,errorMessage=_this$props2.errorMessage,helperText=_this$props2.helperText,id=_this$props2.id,label=_this$props2.label,name=_this$props2.name,options=_this$props2.options,placeholder=_this$props2.placeholder,size=_this$props2.size,value=_this$props2.value;var focused=this.state.focused;var classes=classnames(styles$p.select,formElement.base,disabled?formElement.disabled:formElement.enabled,errorMessage?formElement.errored:formElement.normal,size==='md'?layout.medium:layout.large);var showPlaceholder=placeholder&&!value;return/*#__PURE__*/createElement(Box,null,label&&/*#__PURE__*/createElement(FormLabel,{id:id,label:label}),/*#__PURE__*/createElement(Box,{color:disabled?'lightGray':'white',display:"flex",position:"relative",rounding:4,width:"100%"},/*#__PURE__*/createElement(Box,{alignItems:"center",bottom:true,dangerouslySetInlineStyle:{__style:{paddingRight:14,paddingTop:2}},display:"flex",position:"absolute",right:true,top:true},/*#__PURE__*/createElement(Icon,{icon:"arrow-down",size:12,color:disabled?'gray':'darkGray',accessibilityLabel:""})),/*#__PURE__*/createElement("select",{"aria-describedby":errorMessage&&focused?"".concat(id,"-error"):null,"aria-invalid":errorMessage?'true':'false',className:classes,disabled:disabled,id:id,name:name,onBlur:this.handleOnChange,onChange:this.handleOnChange,ref:this.setSelectListRef,value:showPlaceholder?placeholder:value},showPlaceholder&&/*#__PURE__*/createElement("option",{disabled:true,value:placeholder,hidden:true},placeholder),options.map(function(option){return/*#__PURE__*/createElement("option",{key:option.value,value:option.value},option.label);}))),helperText&&!errorMessage?/*#__PURE__*/createElement(FormHelperText,{text:helperText}):null,errorMessage&&/*#__PURE__*/createElement(FormErrorMessage,{id:id,text:errorMessage}));}}]);return SelectList;}(Component);_defineProperty$1(SelectList,"propTypes",{disabled:PropTypes.bool,errorMessage:PropTypes.string,helperText:PropTypes.string,id:PropTypes.string.isRequired,label:PropTypes.string,name:PropTypes.string,onChange:PropTypes.func.isRequired,options:PropTypes.arrayOf(PropTypes.exact({label:PropTypes.string.isRequired,value:PropTypes.string.isRequired})),placeholder:PropTypes.string,size:PropTypes.oneOf(['md','lg']),value:PropTypes.string});_defineProperty$1(SelectList,"defaultProps",{disabled:false,size:'md',options:[]});var styles$q={"icon":"YHq kVc","spin":"jfh","delay":"O-T"};var SIZE_NAME_TO_PIXEL$2={sm:32,md:40};function Spinner(_ref){var accessibilityLabel=_ref.accessibilityLabel,_ref$delay=_ref.delay,delay=_ref$delay===void 0?true:_ref$delay,show=_ref.show,_ref$size=_ref.size,size=_ref$size===void 0?'md':_ref$size;return show?/*#__PURE__*/createElement(Box,{display:"flex",justifyContent:"around",overflow:"hidden"},/*#__PURE__*/createElement("div",{className:classnames(styles$q.icon,_defineProperty$1({},styles$q.delay,delay))},/*#__PURE__*/createElement(Icon,{icon:"knoop",accessibilityLabel:accessibilityLabel,size:SIZE_NAME_TO_PIXEL$2[size]}))):/*#__PURE__*/createElement("div",null);}Spinner.propTypes={show:PropTypes.bool.isRequired,accessibilityLabel:PropTypes.string.isRequired,delay:PropTypes.bool,size:PropTypes.oneOf(['sm','md'])};function Stack(_ref){var _ref$alignItems=_ref.alignItems,alignItems=_ref$alignItems===void 0?'start':_ref$alignItems,children=_ref.children,_ref$gap=_ref.gap,gap=_ref$gap===void 0?0:_ref$gap,height=_ref.height,_ref$justifyContent=_ref.justifyContent,justifyContent=_ref$justifyContent===void 0?'center':_ref$justifyContent,width=_ref.width,rest=_objectWithoutProperties(_ref,["alignItems","children","gap","height","justifyContent","width"]);return/*#__PURE__*/createElement(Box,{height:height,marginTop:gap?-gap:0,marginBottom:gap?-gap:0,width:width},/*#__PURE__*/createElement(FlexBox,_extends$1({alignItems:alignItems,direction:"column",height:height,justifyContent:justifyContent,width:width},rest),Children.map(children,function(child){return/*#__PURE__*/createElement(Box,{paddingY:gap},child);})));}Stack.propTypes={alignContent:AlignContentPropType,alignItems:AlignItemsPropType,alignSelf:AlignSelfPropType,children:PropTypes.node,flex:FlexPropType,gap:PaddingPropType,height:DimensionPropType,justifyContent:JustifyContentPropType,maxHeight:DimensionPropType,maxWidth:DimensionPropType,minHeight:DimensionPropType,minWidth:DimensionPropType,overflow:OverflowPropType,width:DimensionPropType,wrap:PropTypes.bool};function Sticky(props){var _props$dangerouslySet=props.dangerouslySetZIndex,dangerouslySetZIndex=_props$dangerouslySet===void 0?{__zIndex:1}:_props$dangerouslySet,children=props.children;var style={top:props.top!=null?props.top:undefined,left:props.left!=null?props.left:undefined,right:props.right!=null?props.right:undefined,bottom:props.bottom!=null?props.bottom:undefined,// eslint-disable-next-line no-underscore-dangle
zIndex:dangerouslySetZIndex.__zIndex};return/*#__PURE__*/createElement("div",{className:layout.sticky,style:style},children);}Sticky.propTypes={children:PropTypes.node,dangerouslySetZIndex:PropTypes.exact({__zIndex:PropTypes.number}),top:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),left:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),bottom:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),right:PropTypes.oneOfType([PropTypes.number,PropTypes.string])};var styles$r={"switch":"jPl kVc Hsu XiG","focused":"My7 C1J","switchDarkGray":"dD6 BsF","switchGray":"GOX gfP tk0","switchLightGray":"v-K gpV tk0","switchWhite":"NYx qJc tk0","slider":"U7Q Hsu MIw qJc INd","sliderRight":"taI","sliderLeft":"RDh","sliderDark":"GEq","sliderLight":"fhX tk0","checkbox":"sAX MIw L4E e43 adn yQo","checkboxEnabled":"C8A BG7"};var Switch=/*#__PURE__*/function(_React$Component){_inherits$1(Switch,_React$Component);var _super=_createSuper$1(Switch);function Switch(){var _this;_classCallCheck$1(this,Switch);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(){return _this.setState({focused:false});});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(){return _this.setState({focused:true});});_defineProperty$1(_assertThisInitialized$1(_this),"handleChange",function(event){var onChange=_this.props.onChange;var checked=event.target.checked;onChange({event:event,value:checked});});return _this;}_createClass$1(Switch,[{key:"render",value:function render(){var _this$props=this.props,disabled=_this$props.disabled,id=_this$props.id,name=_this$props.name,switched=_this$props.switched;var switchStyles=classnames(styles$r.switch,_defineProperty$1({},styles$r.focused,this.state.focused),// eslint-disable-next-line no-nested-ternary
disabled?switched?styles$r.switchGray:styles$r.switchLightGray:switched?styles$r.switchDarkGray:styles$r.switchWhite);var sliderStyles=classnames(styles$r.slider,switched?styles$r.sliderRight:styles$r.sliderLeft,switched&&!disabled?styles$r.sliderDark:styles$r.sliderLight);var inputStyles=classnames(styles$r.checkbox,_defineProperty$1({},styles$r.checkboxEnabled,!disabled));return/*#__PURE__*/createElement("div",{className:switchStyles},/*#__PURE__*/createElement("input",{checked:switched,className:inputStyles,disabled:disabled,id:id,name:name,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,type:"checkbox"}),/*#__PURE__*/createElement("div",{className:sliderStyles}));}}]);return Switch;}(Component);_defineProperty$1(Switch,"propTypes",{disabled:PropTypes.bool,id:PropTypes.string.isRequired,name:PropTypes.string,onChange:PropTypes.func.isRequired,switched:PropTypes.bool});_defineProperty$1(Switch,"defaultProps",{disabled:false,switched:false});var styles$t={"touchable":"rLK iyn","fullHeight":"XJa","fullWidth":"FTD L4E","pointer":"DI9 BG7","zoomIn":"MNX LIa","zoomOut":"KPW Smz","copy":"u-8 q-D","move":"_qV c8z","noDrop":"_j4 rEw","grab":"vYN K8T","grabbing":"uy2 RMk"};var SPACE_CHAR_CODE=32;var ENTER_CHAR_CODE=13;var RoundingPropType$2=PropTypes.oneOf([0,1,2,3,4,5,6,7,8,'circle','pill']);var getRoundingStyle$1=function getRoundingStyle(r){if(typeof r==='number'){return bind(range('rounding'),borders)(r);}if(r==='circle'){return fromClassName(borders.circle);}if(r==='pill'){return fromClassName(borders.pill);}return identity();};var Touchable=/*#__PURE__*/function(_React$Component){_inherits$1(Touchable,_React$Component);var _super=_createSuper$1(Touchable);function Touchable(){var _this;_classCallCheck$1(this,Touchable);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"handleKeyPress",function(event){var onTouch=_this.props.onTouch;// Check to see if space or enter were pressed
if(onTouch&&(event.charCode===SPACE_CHAR_CODE||event.charCode===ENTER_CHAR_CODE)){// Prevent the default action to stop scrolling when space is pressed
event.preventDefault();onTouch({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(event){var onBlur=_this.props.onBlur;if(onBlur){onBlur({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(event){var onFocus=_this.props.onFocus;if(onFocus){onFocus({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseEnter",function(event){var onMouseEnter=_this.props.onMouseEnter;if(onMouseEnter){onMouseEnter({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseLeave",function(event){var onMouseLeave=_this.props.onMouseLeave;if(onMouseLeave){onMouseLeave({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleClick",function(event){var onTouch=_this.props.onTouch;if(onTouch){onTouch({event:event});}});return _this;}_createClass$1(Touchable,[{key:"render",value:function render(){var _classnames;var _this$props=this.props,children=_this$props.children,_this$props$fullWidth=_this$props.fullWidth,fullWidth=_this$props$fullWidth===void 0?true:_this$props$fullWidth,fullHeight=_this$props.fullHeight,_this$props$mouseCurs=_this$props.mouseCursor,mouseCursor=_this$props$mouseCurs===void 0?'pointer':_this$props$mouseCurs,_this$props$rounding=_this$props.rounding,rounding=_this$props$rounding===void 0?0:_this$props$rounding;var classes=classnames(styles$t.touchable,styles$t[mouseCursor],toProps(getRoundingStyle$1(rounding)).className,(_classnames={},_defineProperty$1(_classnames,styles$t.fullHeight,fullHeight),_defineProperty$1(_classnames,styles$t.fullWidth,fullWidth),_classnames));return/*#__PURE__*/createElement("div",{className:classes,onClick:this.handleClick,onBlur:this.handleBlur,onFocus:this.handleFocus,onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,onKeyPress:this.handleKeyPress,role:"button",tabIndex:"0"},children);}}]);return Touchable;}(Component);_defineProperty$1(Touchable,"propTypes",{children:PropTypes.node,fullHeight:PropTypes.bool,fullWidth:PropTypes.bool,mouseCursor:PropTypes.oneOf(['copy','grab','grabbing','move','noDrop','pointer','zoomIn','zoomOut']),onBlur:PropTypes.func,onFocus:PropTypes.func,onTouch:PropTypes.func,onMouseEnter:PropTypes.func,onMouseLeave:PropTypes.func,rounding:RoundingPropType$2});var styles$u={"Tabs":"FaT _O1","tab":"Tbq iyn Hsu _O1 qT6 gjz mQ8 USg adn Lfz e43 BG7 fZz hA-","tabIsNotActive":"f-T qJc","tabIsActive":"oOE BsF erh"};function Tabs(_ref){var activeTabIndex=_ref.activeTabIndex,onChange=_ref.onChange,_ref$size=_ref.size,size=_ref$size===void 0?'md':_ref$size,tabs=_ref.tabs,wrap=_ref.wrap;var handleTabClick=function handleTabClick(i,e){return onChange({activeTabIndex:i,event:e});};return/*#__PURE__*/createElement("div",{className:classnames(styles$u.Tabs,wrap&&layout.flexWrap,size==='md'?layout.medium:layout.large),role:"tablist"},tabs.map(function(_ref2,i){var _classnames;var text=_ref2.text,href=_ref2.href;var isActive=i===activeTabIndex;var cs=classnames(styles$u.tab,(_classnames={},_defineProperty$1(_classnames,styles$u.tabIsNotActive,!isActive),_defineProperty$1(_classnames,styles$u.tabIsActive,isActive),_classnames));return/*#__PURE__*/createElement("a",{"aria-selected":isActive,className:cs,href:href,key:"".concat(i).concat(href),onClick:function onClick(e){return handleTabClick(i,e);},role:"tab"},/*#__PURE__*/createElement(Text,{color:isActive?'white':'darkGray',weight:"bold"},text));}));}Tabs.propTypes={activeTabIndex:PropTypes.number.isRequired,tabs:PropTypes.arrayOf(PropTypes.exact({text:PropTypes.node,href:PropTypes.string})).isRequired,onChange:PropTypes.func.isRequired,wrap:PropTypes.bool};var styles$v={"textArea":"Gnj Hsu tBJ dyH iFc yTZ L4E"};var TextArea=/*#__PURE__*/function(_React$Component){_inherits$1(TextArea,_React$Component);var _super=_createSuper$1(TextArea);function TextArea(){var _this;_classCallCheck$1(this,TextArea);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"textarea",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false});_defineProperty$1(_assertThisInitialized$1(_this),"setTextAreaRef",function(ref){_this.textarea=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"handleChange",function(event){var onChange=_this.props.onChange;onChange({event:event,value:event.currentTarget.value});});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(event){var onBlur=_this.props.onBlur;if(onBlur){onBlur({event:event,value:event.currentTarget.value});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(event){var onFocus=_this.props.onFocus;if(onFocus){onFocus({event:event,value:event.currentTarget.value});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleKeyDown",function(event){var onKeyDown=_this.props.onKeyDown;if(onKeyDown){onKeyDown({event:event,value:event.currentTarget.value});}});return _this;}_createClass$1(TextArea,[{key:"render",value:function render(){var _this$props=this.props,disabled=_this$props.disabled,errorMessage=_this$props.errorMessage,hasError=_this$props.hasError,helperText=_this$props.helperText,id=_this$props.id,label=_this$props.label,name=_this$props.name,placeholder=_this$props.placeholder,rows=_this$props.rows,value=_this$props.value;var focused=this.state.focused;var classes=classnames(styles$v.textArea,formElement.base,disabled?formElement.disabled:formElement.enabled,hasError||errorMessage?formElement.errored:formElement.normal);return/*#__PURE__*/createElement("span",null,label&&/*#__PURE__*/createElement(FormLabel,{id:id,label:label}),/*#__PURE__*/createElement("textarea",{"aria-describedby":errorMessage&&focused?"".concat(id,"-error"):null,"aria-invalid":errorMessage||hasError?'true':'false',className:classes,disabled:disabled,id:id,name:name,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,placeholder:placeholder,ref:this.setTextAreaRef,rows:rows,value:value}),helperText&&!errorMessage?/*#__PURE__*/createElement(FormHelperText,{text:helperText}):null,errorMessage&&/*#__PURE__*/createElement(FormErrorMessage,{id:id,text:errorMessage}));}}]);return TextArea;}(Component);_defineProperty$1(TextArea,"propTypes",{disabled:PropTypes.bool,errorMessage:PropTypes.string,hasError:PropTypes.bool,helperText:PropTypes.string,id:PropTypes.string.isRequired,name:PropTypes.string,label:PropTypes.string,onBlur:PropTypes.func,onChange:PropTypes.func.isRequired,onFocus:PropTypes.func,onKeyDown:PropTypes.func,placeholder:PropTypes.string,rows:PropTypes.number,value:PropTypes.string});_defineProperty$1(TextArea,"defaultProps",{disabled:false,hasError:false,rows:3});var styles$w={"textField":"wyq Hsu tBJ dyH iFc yTZ L4E"};var TextField=/*#__PURE__*/function(_React$Component){_inherits$1(TextField,_React$Component);var _super=_createSuper$1(TextField);function TextField(){var _this;_classCallCheck$1(this,TextField);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"textfield",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"state",{focused:false});_defineProperty$1(_assertThisInitialized$1(_this),"setTextFieldRef",function(ref){_this.textfield=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"handleChange",function(event){var onChange=_this.props.onChange;onChange({event:event,value:event.currentTarget.value});});_defineProperty$1(_assertThisInitialized$1(_this),"handleBlur",function(event){var onBlur=_this.props.onBlur;if(onBlur){onBlur({event:event,value:event.currentTarget.value});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleFocus",function(event){var onFocus=_this.props.onFocus;if(onFocus){onFocus({event:event,value:event.currentTarget.value});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleKeyDown",function(event){var onKeyDown=_this.props.onKeyDown;if(onKeyDown){onKeyDown({event:event,value:event.currentTarget.value});}});return _this;}_createClass$1(TextField,[{key:"render",value:function render(){var _this$props=this.props,autoComplete=_this$props.autoComplete,disabled=_this$props.disabled,errorMessage=_this$props.errorMessage,hasError=_this$props.hasError,helperText=_this$props.helperText,id=_this$props.id,label=_this$props.label,name=_this$props.name,placeholder=_this$props.placeholder,size=_this$props.size,type=_this$props.type,value=_this$props.value;var focused=this.state.focused;var classes=classnames(styles$w.textField,formElement.base,disabled?formElement.disabled:formElement.enabled,hasError||errorMessage?formElement.errored:formElement.normal,size==='md'?layout.medium:layout.large);// type='number' doesn't work on ios safari without a pattern
// https://stackoverflow.com/questions/14447668/input-type-number-is-not-showing-a-number-keypad-on-ios
var pattern=type==='number'?'\\d*':undefined;return/*#__PURE__*/createElement("span",null,label&&/*#__PURE__*/createElement(FormLabel,{id:id,label:label}),/*#__PURE__*/createElement("input",{"aria-describedby":errorMessage&&focused?"".concat(id,"-error"):null,"aria-invalid":errorMessage||hasError?'true':'false',autoComplete:autoComplete,className:classes,disabled:disabled,id:id,name:name,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,pattern:pattern,placeholder:placeholder,ref:this.setTextFieldRef,type:type,value:value}),helperText&&!errorMessage?/*#__PURE__*/createElement(FormHelperText,{text:helperText}):null,errorMessage&&/*#__PURE__*/createElement(FormErrorMessage,{id:id,text:errorMessage}));}}]);return TextField;}(Component);_defineProperty$1(TextField,"propTypes",{autoComplete:PropTypes.oneOf(['current-password','new-password','on','off','username']),disabled:PropTypes.bool,errorMessage:PropTypes.string,hasError:PropTypes.bool,helperText:PropTypes.string,id:PropTypes.string.isRequired,label:PropTypes.string,name:PropTypes.string,onBlur:PropTypes.func,onChange:PropTypes.func.isRequired,onFocus:PropTypes.func,onKeyDown:PropTypes.func,placeholder:PropTypes.string,size:PropTypes.oneOf(['md','lg']),type:PropTypes.oneOf(['date','email','number','password','text','url']),value:PropTypes.string});_defineProperty$1(TextField,"defaultProps",{disabled:false,hasError:false,size:'md',type:'text'});function Toast(_ref){var button=_ref.button,_ref$color=_ref.color,color=_ref$color===void 0?'darkGray':_ref$color,text=_ref.text,thumbnail=_ref.thumbnail,_ref$thumbnailShape=_ref.thumbnailShape,thumbnailShape=_ref$thumbnailShape===void 0?'square':_ref$thumbnailShape;return/*#__PURE__*/createElement(Box,{marginBottom:3,paddingX:4,maxWidth:360,width:"100vw"},/*#__PURE__*/createElement(Box,{color:color,fit:true,padding:6,rounding:"pill"},/*#__PURE__*/createElement(Box,{display:"flex",marginLeft:-2,marginRight:-2,alignItems:"center"},thumbnail?/*#__PURE__*/createElement(Box,{display:"flex",flex:"none",justifyContent:"center",paddingX:2},/*#__PURE__*/createElement(Mask,{rounding:thumbnailShape==='circle'?'circle':2,height:thumbnailShape==='rectangle'?64:48,width:48},thumbnail)):null,/*#__PURE__*/createElement(Box,{display:"flex",direction:"column",flex:"grow",justifyContent:"center",paddingX:2},/*#__PURE__*/createElement(Text,{color:"white",align:!thumbnail&&!button?'center':'left'},text)),button?/*#__PURE__*/createElement(Box,{flex:"none",paddingX:2},button):null)));}Toast.propTypes={button:PropTypes.node,color:PropTypes.oneOf(['darkGray','red']),text:PropTypes.oneOfType([PropTypes.string,PropTypes.element]).isRequired,thumbnail:PropTypes.node,thumbnailShape:PropTypes.oneOf(['circle','rectangle','square'])};var styles$x={"video":"hwa kVc MIw L4E","player":"iCM XiG L4E","playhead":"QCH _O1 gjz L4E BG7","controls":"hoF MIw _O1 gjz ojN Rym p6V wYR hA-"};var VideoPlayhead=/*#__PURE__*/function(_React$PureComponent){_inherits$1(VideoPlayhead,_React$PureComponent);var _super=_createSuper$1(VideoPlayhead);function VideoPlayhead(){var _this;_classCallCheck$1(this,VideoPlayhead);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"playhead",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"state",{seeking:false});_defineProperty$1(_assertThisInitialized$1(_this),"setPlayheadRef",function(ref){_this.playhead=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"seek",function(clientX){if(_this.playhead){var _this$props=_this.props,duration=_this$props.duration,seek=_this$props.seek;var _this$playhead$getBou=_this.playhead.getBoundingClientRect(),left=_this$playhead$getBou.left,width=_this$playhead$getBou.width;var percent=Math.max(0,Math.min((clientX-left)/width,1));var newTime=percent*duration;seek(newTime);}});_defineProperty$1(_assertThisInitialized$1(_this),"stopClick",function(event){return event.stopPropagation();});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseDown",function(event){event.preventDefault();var onPlayheadDown=_this.props.onPlayheadDown;onPlayheadDown(event);_this.setState({seeking:true});_this.seek(event.clientX);});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseLeave",function(event){var onPlayheadUp=_this.props.onPlayheadUp;var seeking=_this.state.seeking;// If the user is seeking and mouse leaves playhead then end the seek
if(seeking){_this.setState({seeking:false});onPlayheadUp(event);}});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseMove",function(event){event.preventDefault();var seeking=_this.state.seeking;if(seeking){_this.seek(event.clientX);}});_defineProperty$1(_assertThisInitialized$1(_this),"handleMouseUp",function(event){var onPlayheadUp=_this.props.onPlayheadUp;_this.setState({seeking:false});onPlayheadUp(event);});return _this;}_createClass$1(VideoPlayhead,[{key:"render",value:function render(){var _this$props2=this.props,currentTime=_this$props2.currentTime,duration=_this$props2.duration;var width="".concat(Math.floor(currentTime*10000/duration)/100,"%");return/*#__PURE__*/createElement(Box,{position:"relative",display:"flex",flex:"grow",alignItems:"center",height:16},/*#__PURE__*/createElement("div",{"aria-valuemax":duration,"aria-valuemin":"0","aria-valuenow":currentTime,className:styles$x.playhead,onClick:this.stopClick,onKeyPress:this.stopClick,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onMouseMove:this.handleMouseMove,onMouseUp:this.handleMouseUp,ref:this.setPlayheadRef,role:"progressbar",tabIndex:"-1"},/*#__PURE__*/createElement(Box,{left:true,right:true,position:"absolute",color:"lightGray",rounding:2,height:4},/*#__PURE__*/createElement(Box,{color:"white",rounding:2,height:"100%",width:width})),/*#__PURE__*/createElement(Box,{position:"absolute",rounding:2,height:4,dangerouslySetInlineStyle:{__style:{left:width}}},/*#__PURE__*/createElement(Box,{rounding:"circle",width:16,height:16,color:"white",marginLeft:-2,dangerouslySetInlineStyle:{__style:{marginTop:-6}}}))));}}]);return VideoPlayhead;}(PureComponent);_defineProperty$1(VideoPlayhead,"propTypes",{currentTime:PropTypes.number.isRequired,duration:PropTypes.number.isRequired,onPlayheadDown:PropTypes.func.isRequired,onPlayheadUp:PropTypes.func.isRequired,seek:PropTypes.func.isRequired});var fullscreenEnabled=function fullscreenEnabled(){return document.fullscreenEnabled||// $FlowIssue - vendor prefix missing from Flow
document.webkitFullscreenEnabled||// $FlowIssue - vendor prefix missing from Flow
document.mozFullScreenEnabled||// $FlowIssue - vendor prefix missing from Flow
document.msFullscreenEnabled;};var timeToString=function timeToString(time){var rounded=Math.floor(time||0);var minutes=Math.floor(rounded/60);var seconds=rounded-minutes*60;var minutesStr=minutes<10?"0".concat(minutes):minutes;var secondsStr=seconds<10?"0".concat(seconds):seconds;return "".concat(minutesStr,":").concat(secondsStr);};var VideoControls=/*#__PURE__*/function(_React$Component){_inherits$1(VideoControls,_React$Component);var _super=_createSuper$1(VideoControls);function VideoControls(){var _this;_classCallCheck$1(this,VideoControls);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"handleFullscreenChange",function(_ref){var event=_ref.event;var onFullscreenChange=_this.props.onFullscreenChange;event.stopPropagation();onFullscreenChange();});_defineProperty$1(_assertThisInitialized$1(_this),"handlePlayingChange",function(_ref2){var event=_ref2.event;var _this$props=_this.props,playing=_this$props.playing,onPause=_this$props.onPause,onPlay=_this$props.onPlay;if(playing){onPause(event);}else {onPlay(event);}});_defineProperty$1(_assertThisInitialized$1(_this),"handleVolumeChange",function(_ref3){var event=_ref3.event;var onVolumeChange=_this.props.onVolumeChange;onVolumeChange(event);});return _this;}_createClass$1(VideoControls,[{key:"render",value:function render(){var _this$props2=this.props,accessibilityMaximizeLabel=_this$props2.accessibilityMaximizeLabel,accessibilityMinimizeLabel=_this$props2.accessibilityMinimizeLabel,accessibilityMuteLabel=_this$props2.accessibilityMuteLabel,accessibilityPauseLabel=_this$props2.accessibilityPauseLabel,accessibilityPlayLabel=_this$props2.accessibilityPlayLabel,accessibilityUnmuteLabel=_this$props2.accessibilityUnmuteLabel,currentTime=_this$props2.currentTime,duration=_this$props2.duration,fullscreen=_this$props2.fullscreen,onPlayheadDown=_this$props2.onPlayheadDown,onPlayheadUp=_this$props2.onPlayheadUp,playing=_this$props2.playing,seek=_this$props2.seek,volume=_this$props2.volume;var muted=volume===0;var showFullscreenButton=typeof document!=='undefined'&&!!fullscreenEnabled();return/*#__PURE__*/createElement("div",{className:styles$x.controls},/*#__PURE__*/createElement(Box,{padding:2},/*#__PURE__*/createElement(Touchable,{onTouch:this.handlePlayingChange,fullWidth:false},/*#__PURE__*/createElement(Icon,{accessibilityLabel:playing?accessibilityPauseLabel:accessibilityPlayLabel,color:"white",icon:playing?'pause':'play',size:20}))),/*#__PURE__*/createElement(Box,{width:50,padding:2},/*#__PURE__*/createElement(Text,{align:"right",color:"white",overflow:"normal",size:"sm"},timeToString(currentTime))),/*#__PURE__*/createElement(Box,{padding:2,flex:"grow"},/*#__PURE__*/createElement(VideoPlayhead,{currentTime:currentTime,duration:duration,onPlayheadDown:onPlayheadDown,onPlayheadUp:onPlayheadUp,seek:seek})),/*#__PURE__*/createElement(Box,{width:50,padding:2},/*#__PURE__*/createElement(Text,{align:"right",color:"white",overflow:"normal",size:"sm"},timeToString(duration))),/*#__PURE__*/createElement(Box,{padding:2},/*#__PURE__*/createElement(Touchable,{onTouch:this.handleVolumeChange,fullWidth:false},/*#__PURE__*/createElement(Icon,{accessibilityLabel:muted?accessibilityUnmuteLabel:accessibilityMuteLabel,color:"white",icon:muted?'mute':'sound',size:20}))),showFullscreenButton&&/*#__PURE__*/createElement(Box,{padding:2},/*#__PURE__*/createElement(Touchable,{onTouch:this.handleFullscreenChange,fullWidth:false},/*#__PURE__*/createElement(Icon,{accessibilityLabel:fullscreen?accessibilityMinimizeLabel:accessibilityMaximizeLabel,color:"white",icon:fullscreen?'minimize':'maximize',size:20}))));}}]);return VideoControls;}(Component);_defineProperty$1(VideoControls,"propTypes",{accessibilityMaximizeLabel:PropTypes.string.isRequired,accessibilityMinimizeLabel:PropTypes.string.isRequired,accessibilityMuteLabel:PropTypes.string.isRequired,accessibilityPauseLabel:PropTypes.string.isRequired,accessibilityPlayLabel:PropTypes.string.isRequired,accessibilityUnmuteLabel:PropTypes.string.isRequired,currentTime:PropTypes.number.isRequired,duration:PropTypes.number.isRequired,fullscreen:PropTypes.bool.isRequired,onFullscreenChange:PropTypes.func.isRequired,onPause:PropTypes.func.isRequired,onPlay:PropTypes.func.isRequired,onPlayheadDown:PropTypes.func.isRequired,onPlayheadUp:PropTypes.func.isRequired,onVolumeChange:PropTypes.func.isRequired,playing:PropTypes.bool.isRequired,seek:PropTypes.func.isRequired,volume:PropTypes.number.isRequired});// For more information on fullscreen and vendor prefixes see
// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API
var requestFullscreen=function requestFullscreen(element){if(element.requestFullscreen){element.requestFullscreen();// $FlowIssue - vendor prefix missing from Flow
}else if(element.webkitRequestFullscreen){// $FlowIssue - vendor prefix missing from Flow
element.webkitRequestFullscreen();// $FlowIssue - vendor prefix missing from Flow
}else if(element.mozRequestFullScreen){// $FlowIssue - vendor prefix missing from Flow
element.mozRequestFullScreen();// $FlowIssue - vendor prefix missing from Flow
}else if(element.msRequestFullscreen){// $FlowIssue - vendor prefix missing from Flow
element.msRequestFullscreen();}};var exitFullscreen=function exitFullscreen(){if(document.exitFullscreen){document.exitFullscreen();// $FlowIssue - vendor prefix missing from Flow
}else if(document.webkitExitFullscreen){// $FlowIssue - vendor prefix missing from Flow
document.webkitExitFullscreen();// $FlowIssue - vendor prefix missing from Flow
}else if(document.mozCancelFullScreen){// $FlowIssue - vendor prefix missing from Flow
document.mozCancelFullScreen();// $FlowIssue - vendor prefix missing from Flow
}else if(document.msExitFullscreen){// $FlowIssue - vendor prefix missing from Flow
document.msExitFullscreen();}};// Normally document.fullscreen suffices here as a flag, but IE11 does not
// have a vendor specific version so we must instead use the actual element
var isFullscreen=function isFullscreen(){return document.fullscreenElement||// $FlowIssue - vendor prefix missing from Flow
document.webkitFullscreenElement||// $FlowIssue - vendor prefix missing from Flow
document.mozFullScreenElement||// $FlowIssue - vendor prefix missing from Flow
document.msFullscreenElement;};var addFullscreenEventListener=function addFullscreenEventListener(listener){document.addEventListener('fullscreenchange',listener);document.addEventListener('webkitfullscreenchange',listener);document.addEventListener('mozfullscreenchange',listener);document.addEventListener('MSFullscreenChange',listener);};var removeFullscreenEventListener=function removeFullscreenEventListener(listener){document.removeEventListener('fullscreenchange',listener);document.removeEventListener('webkitfullscreenchange',listener);document.removeEventListener('mozfullscreenchange',listener);document.removeEventListener('MSFullscreenChange',listener);};var isNewSource=function isNewSource(oldSource,newSource){if(_typeof$1(oldSource)!==_typeof$1(newSource)){// If the source type changed from string to Array
// or vice versa, we have a new source
return true;}if(Array.isArray(newSource)){if(oldSource.length!==newSource.length){// If the sources are both an Array, and the lengths
// do not match we evaluate as a new source
return true;}// If the sources are both an Array and the same length,
// verify every element stayed the same
return newSource.some(function(source,index){return !Array.isArray(oldSource)||source.type!==oldSource[index].type||source.src!==oldSource[index].src;});}// If the sources are both a string, simply compare
// the new with the old
return newSource!==oldSource;};var Video=/*#__PURE__*/function(_React$PureComponent){_inherits$1(Video,_React$PureComponent);var _super=_createSuper$1(Video);function Video(){var _this;_classCallCheck$1(this,Video);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty$1(_assertThisInitialized$1(_this),"video",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"player",void 0);_defineProperty$1(_assertThisInitialized$1(_this),"state",{currentTime:0,duration:0,fullscreen:false});_defineProperty$1(_assertThisInitialized$1(_this),"setPlayerRef",function(ref){_this.player=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"setVideoRef",function(ref){_this.video=ref;});_defineProperty$1(_assertThisInitialized$1(_this),"setPlaybackRate",function(playbackRate){if(_this.video){_this.video.playbackRate=playbackRate;}});_defineProperty$1(_assertThisInitialized$1(_this),"setVolume",function(volume){if(_this.video){_this.video.volume=volume;}});_defineProperty$1(_assertThisInitialized$1(_this),"load",function(){if(_this.video&&_this.video.load){_this.video.load();}});_defineProperty$1(_assertThisInitialized$1(_this),"pause",function(){if(_this.video){_this.video.pause();}});_defineProperty$1(_assertThisInitialized$1(_this),"play",function(){if(_this.video){_this.video.play();}});_defineProperty$1(_assertThisInitialized$1(_this),"seek",function(time){if(_this.video){_this.video.currentTime=time;}});_defineProperty$1(_assertThisInitialized$1(_this),"toggleFullscreen",function(){if(isFullscreen()){exitFullscreen();}else if(_this.player){requestFullscreen(_this.player);}});_defineProperty$1(_assertThisInitialized$1(_this),"handleCanPlay",function(event){var onReady=_this.props.onReady;if(onReady){onReady({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleDurationChange",function(event){var onDurationChange=_this.props.onDurationChange;var duration=_this.video&&_this.video.duration||0;_this.setState({duration:duration});if(onDurationChange){onDurationChange({event:event,duration:duration});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleEnded",function(event){var onEnded=_this.props.onEnded;if(onEnded){onEnded({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleFullscreenChange",function(event){var onFullscreenChange=_this.props.onFullscreenChange;var fullscreen=!!isFullscreen();_this.setState({fullscreen:fullscreen});if(onFullscreenChange){onFullscreenChange({event:event,fullscreen:fullscreen});}});_defineProperty$1(_assertThisInitialized$1(_this),"handlePlay",function(event){var onPlay=_this.props.onPlay;if(onPlay){onPlay({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handlePlayheadDown",function(event){var onPlayheadDown=_this.props.onPlayheadDown;if(onPlayheadDown){onPlayheadDown({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handlePlayheadUp",function(event){var onPlayheadUp=_this.props.onPlayheadUp;if(onPlayheadUp){onPlayheadUp({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handlePause",function(event){var onPause=_this.props.onPause;if(onPause){onPause({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleProgress",function(event){var onLoadedChange=_this.props.onLoadedChange;var _ref=_this.video||{},buffered=_ref.buffered;var loaded=buffered&&buffered.length>0?buffered.end(buffered.length-1):0;if(onLoadedChange){onLoadedChange({event:event,loaded:loaded});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleSeek",function(event){var onSeek=_this.props.onSeek;if(onSeek){onSeek({event:event});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleTimeUpdate",function(event){var onTimeChange=_this.props.onTimeChange;var currentTime=_this.video&&_this.video.currentTime||0;_this.setState({currentTime:currentTime});if(onTimeChange){onTimeChange({event:event,time:currentTime});}});_defineProperty$1(_assertThisInitialized$1(_this),"handleVolumeChange",function(event){var onVolumeChange=_this.props.onVolumeChange;var muted=_this.video&&_this.video.muted||false;if(onVolumeChange){onVolumeChange({event:event,volume:muted?1:0});}});return _this;}_createClass$1(Video,[{key:"componentDidMount",/**
     * React lifecycle hooks pertinent to Video
     */value:function componentDidMount(){var _this$props=this.props,playbackRate=_this$props.playbackRate,playing=_this$props.playing,volume=_this$props.volume;// Set up event listeners to catch backdoors in fullscreen
// changes such as using the ESC key to exit
if(typeof document!=='undefined'){addFullscreenEventListener(this.handleFullscreenChange);}// Load the video to hydrate the DOM after a server render
this.load();// Set the initial volume
this.setVolume(volume);// Set the initial playback rate
this.setPlaybackRate(playbackRate);// Simulate an autoplay effect if the component
if(playing){this.play();}}},{key:"componentDidUpdate",value:function componentDidUpdate(prevProps){// If the video source changed, reload the video
if(isNewSource(prevProps.src,this.props.src)){this.load();}// If the volume changed, set the new volume
if(prevProps.volume!==this.props.volume){this.setVolume(this.props.volume);}// If the playback rate changed, set the new rate
if(prevProps.playbackRate!==this.props.playbackRate){this.setPlaybackRate(this.props.playbackRate);}// If the playback changed, play or pause the video
if(prevProps.playing!==this.props.playing){if(this.props.playing){this.play();}else {this.pause();}}}},{key:"componentWillUnmount",value:function componentWillUnmount(){removeFullscreenEventListener(this.handleFullscreenChange);}/**
     * DOM reference housekeeping that is needed for functionality
     */ // The player element encapsulates the actual video DOM
// element as well as the controls to bring both fullscreen
},{key:"render",value:function render(){var _this$props2=this.props,aspectRatio=_this$props2.aspectRatio,captions=_this$props2.captions,children=_this$props2.children,loop=_this$props2.loop,playing=_this$props2.playing,playsInline=_this$props2.playsInline,poster=_this$props2.poster,preload=_this$props2.preload,src=_this$props2.src,volume=_this$props2.volume;var _this$state=this.state,currentTime=_this$state.currentTime,duration=_this$state.duration,fullscreen=_this$state.fullscreen;var paddingBottom=fullscreen&&'0'||"".concat(1/aspectRatio*100,"%");return/*#__PURE__*/createElement("div",{ref:this.setPlayerRef,className:styles$x.player,style:{paddingBottom:paddingBottom,height:fullscreen?'100%':0}},/*#__PURE__*/createElement("video",{autoPlay:playing,loop:loop,muted:volume===0,playsInline:playsInline,poster:poster,preload:preload,src:typeof src==='string'?src:undefined,ref:this.setVideoRef,className:styles$x.video,onCanPlay:this.handleCanPlay,onDurationChange:this.handleDurationChange,onEnded:this.handleEnded,onSeeked:this.handleSeek,onTimeUpdate:this.handleTimeUpdate,onProgress:this.handleProgress},Array.isArray(src)&&src.map(function(source){return/*#__PURE__*/createElement("source",{key:source.src,src:source.src,type:source.type});}),/*#__PURE__*/createElement("track",{kind:"captions",src:captions})),children&&/*#__PURE__*/createElement(Box,{position:"absolute",top:true,left:true,bottom:true,right:true,overflow:"hidden"},children),this.props.controls&&/*#__PURE__*/createElement(VideoControls,{accessibilityMaximizeLabel:this.props.accessibilityMaximizeLabel,accessibilityMinimizeLabel:this.props.accessibilityMinimizeLabel,accessibilityMuteLabel:this.props.accessibilityMuteLabel,accessibilityPauseLabel:this.props.accessibilityPauseLabel,accessibilityPlayLabel:this.props.accessibilityPlayLabel,accessibilityUnmuteLabel:this.props.accessibilityUnmuteLabel,currentTime:currentTime,duration:duration,fullscreen:fullscreen,onPlay:this.handlePlay,onPlayheadDown:this.handlePlayheadDown,onPlayheadUp:this.handlePlayheadUp,onPause:this.handlePause,onFullscreenChange:this.toggleFullscreen,onVolumeChange:this.handleVolumeChange,playing:playing,seek:this.seek,volume:volume}));}}]);return Video;}(PureComponent);_defineProperty$1(Video,"propTypes",{accessibilityMaximizeLabel:PropTypes.string,accessibilityMinimizeLabel:PropTypes.string,accessibilityMuteLabel:PropTypes.string,accessibilityPauseLabel:PropTypes.string,accessibilityPlayLabel:PropTypes.string,accessibilityUnmuteLabel:PropTypes.string,aspectRatio:PropTypes.number.isRequired,captions:PropTypes.string.isRequired,children:PropTypes.node,controls:PropTypes.bool,loop:PropTypes.bool,onDurationChange:PropTypes.func,onEnded:PropTypes.func,onFullscreenChange:PropTypes.func,onLoadedChange:PropTypes.func,onPlay:PropTypes.func,onPause:PropTypes.func,onReady:PropTypes.func,onSeek:PropTypes.func,onTimeChange:PropTypes.func,onVolumeChange:PropTypes.func,playbackRate:PropTypes.number,playing:PropTypes.bool,playsInline:PropTypes.bool,poster:PropTypes.string,preload:PropTypes.oneOf(['auto','metadata','none']),src:PropTypes.oneOfType([PropTypes.string,PropTypes.arrayOf(PropTypes.shape({type:PropTypes.oneOf(['video/m3u8','video/mp4','video/ogg']).isRequired,src:PropTypes.string.isRequired}))]).isRequired,volume:PropTypes.number});_defineProperty$1(Video,"defaultProps",{playbackRate:1,playing:false,preload:'auto',volume:1});

var DatePickerTextField = /*#__PURE__*/function (_React$Component) {
  _inherits(DatePickerTextField, _React$Component);

  var _super = _createSuper(DatePickerTextField);

  function DatePickerTextField() {
    var _this;

    _classCallCheck(this, DatePickerTextField);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "setTextFieldRef", function (component) {
      var forwardedRef = _this.props.forwardedRef;

      if (component && component.textfield) {
        forwardedRef(component.textfield);
      } else {
        forwardedRef(null);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (_ref) {
      var event = _ref.event;
      var onBlur = _this.props.onBlur;

      if (onBlur) {
        onBlur(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (_ref2) {
      var event = _ref2.event;
      var onChange = _this.props.onChange;

      if (onChange) {
        onChange(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function (_ref3) {
      var event = _ref3.event;
      var onFocus = _this.props.onFocus;

      if (onFocus) {
        onFocus(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (_ref4) {
      var event = _ref4.event;
      var onKeyDown = _this.props.onKeyDown;

      if (onKeyDown) {
        onKeyDown(event);
      }
    });

    return _this;
  }

  _createClass(DatePickerTextField, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          accessibilityLabelIcon = _this$props.accessibilityLabelIcon,
          disabled = _this$props.disabled,
          id = _this$props.id,
          _this$props$isRTL = _this$props.isRTL,
          isRTL = _this$props$isRTL === void 0 ? false : _this$props$isRTL,
          onClick = _this$props.onClick,
          placeholder = _this$props.placeholder,
          value = _this$props.value;
      return /*#__PURE__*/createElement(Touchable, {
        onTouch: onClick
      }, /*#__PURE__*/createElement(Box, {
        alignItems: "center",
        column: 12,
        flex: "grow",
        display: "flex",
        position: "relative"
      }, /*#__PURE__*/createElement(Box, {
        column: 12,
        flex: "grow"
      }, /*#__PURE__*/createElement(TextField, {
        disabled: disabled,
        id: id,
        onBlur: this.handleBlur,
        onChange: this.handleChange,
        onFocus: this.handleFocus,
        onKeyDown: this.handleKeyDown,
        placeholder: placeholder,
        ref: this.setTextFieldRef,
        size: "lg",
        value: value
      })), /*#__PURE__*/createElement(Box, {
        position: "absolute",
        right: !isRTL,
        left: isRTL
      }, /*#__PURE__*/createElement(Box, {
        position: "relative",
        marginEnd: 4
      }, /*#__PURE__*/createElement(Icon, {
        accessibilityLabel: accessibilityLabelIcon,
        color: "darkGray",
        icon: "calendar",
        inline: true
      })))));
    }
  }]);

  return DatePickerTextField;
}(Component); // $FlowIssue React.forwardRef is still missing https://github.com/facebook/flow/issues/6103


var DatePickerTextField$1 = forwardRef(function (props, ref) {
  return /*#__PURE__*/createElement(DatePickerTextField, _extends({}, props, {
    forwardedRef: ref
  }));
});

function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'أقل من ثانية واحدة',
    two: 'أقل من ثانتين',
    threeToTen: 'أقل من {{count}} ثواني',
    other: 'أقل من {{count}} ثانية'
  },
  xSeconds: {
    one: 'ثانية واحدة',
    two: 'ثانتين',
    threeToTen: '{{count}} ثواني',
    other: '{{count}} ثانية'
  },
  halfAMinute: 'نصف دقيقة',
  lessThanXMinutes: {
    one: 'أقل من دقيقة',
    two: 'أقل من دقيقتين',
    threeToTen: 'أقل من {{count}} دقائق',
    other: 'أقل من {{count}} دقيقة'
  },
  xMinutes: {
    one: 'دقيقة واحدة',
    two: 'دقيقتين',
    threeToTen: '{{count}} دقائق',
    other: '{{count}} دقيقة'
  },
  aboutXHours: {
    one: 'ساعة واحدة تقريباً',
    two: 'ساعتين تقريباً',
    threeToTen: '{{count}} ساعات تقريباً',
    other: '{{count}} ساعة تقريباً'
  },
  xHours: {
    one: 'ساعة واحدة',
    two: 'ساعتين',
    threeToTen: '{{count}} ساعات',
    other: '{{count}} ساعة'
  },
  xDays: {
    one: 'يوم واحد',
    two: 'يومين',
    threeToTen: '{{count}} أيام',
    other: '{{count}} يوم'
  },
  aboutXWeeks: {
    one: 'أسبوع واحد تقريباً',
    two: 'أسبوعين تقريباً',
    threeToTen: '{{count}} أسابيع تقريباً',
    other: '{{count}} أسبوع تقريباً'
  },
  xWeeks: {
    one: 'أسبوع واحد',
    two: 'أسبوعين',
    threeToTen: '{{count}} أسابيع',
    other: '{{count}} أسبوع'
  },
  aboutXMonths: {
    one: 'شهر واحد تقريباً',
    two: 'شهرين تقريباً',
    threeToTen: '{{count}} أشهر تقريباً',
    other: '{{count}} شهر تقريباً'
  },
  xMonths: {
    one: 'شهر واحد',
    two: 'شهرين',
    threeToTen: '{{count}} أشهر',
    other: '{{count}} شهر'
  },
  aboutXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  },
  xYears: {
    one: 'عام واحد',
    two: 'عامين',
    threeToTen: '{{count}} أعوام',
    other: '{{count}} عام'
  },
  overXYears: {
    one: 'أكثر من عام',
    two: 'أكثر من عامين',
    threeToTen: 'أكثر من {{count}} أعوام',
    other: 'أكثر من {{count}} عام'
  },
  almostXYears: {
    one: 'عام واحد تقريباً',
    two: 'عامين تقريباً',
    threeToTen: '{{count}} أعوام تقريباً',
    other: '{{count}} عام تقريباً'
  }
};
function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else if (count === 2) {
    result = formatDistanceLocale[token].two;
  } else if (count <= 10) {
    result = formatDistanceLocale[token].threeToTen.replace('{{count}}', count);
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'في خلال ' + result;
    } else {
      return 'منذ ' + result;
    }
  }

  return result;
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'عند' {{time}}",
  long: "{{date}} 'عند' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'أخر' eeee 'عند' p",
  yesterday: "'أمس عند' p",
  today: "'اليوم عند' p",
  tomorrow: "'غداً عند' p",
  nextWeek: "eeee 'عند' p",
  other: 'P'
};
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

var eraValues = {
  narrow: ['ق', 'ب'],
  abbreviated: ['ق.م.', 'ب.م.'],
  wide: ['قبل الميلاد', 'بعد الميلاد']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ر1', 'ر2', 'ر3', 'ر4'],
  wide: ['الربع الأول', 'الربع الثاني', 'الربع الثالث', 'الربع الرابع']
};
var monthValues = {
  narrow: ['ي', 'ف', 'م', 'أ', 'م', 'ي', 'ي', 'أ', 'س', 'أ', 'ن', 'د'],
  abbreviated: ['ينا', 'فبر', 'مارس', 'أبريل', 'مايو', 'يونـ', 'يولـ', 'أغسـ', 'سبتـ', 'أكتـ', 'نوفـ', 'ديسـ'],
  wide: ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر']
};
var dayValues = {
  narrow: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  short: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  abbreviated: ['أحد', 'اثنـ', 'ثلا', 'أربـ', 'خميـ', 'جمعة', 'سبت'],
  wide: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']
};
var dayPeriodValues = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'صباحاً',
    afternoon: 'بعد الظهر',
    evening: 'مساءاً',
    night: 'ليلاً'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'ص',
    pm: 'م',
    midnight: 'ن',
    noon: 'ظ',
    morning: 'في الصباح',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  },
  abbreviated: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    morning: 'في الصباح',
    evening: 'في المساء',
    night: 'في الليل'
  },
  wide: {
    am: 'ص',
    pm: 'م',
    midnight: 'نصف الليل',
    noon: 'ظهر',
    afternoon: 'بعد الظـهر',
    evening: 'في المساء',
    night: 'في الليل'
  }
};

function ordinalNumber(dirtyNumber) {
  return String(dirtyNumber);
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var parseEraPatterns = {
  any: [/^قبل/i, /^بعد/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[يفمأمسند]/i,
  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
  wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
};
var parseMonthPatterns = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^ين/i, /^ف/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^أغ/i, /^س/i, /^أك/i, /^ن/i, /^د/i]
};
var matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Arabic locale (Sauid Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Dhaifallah Alwadani [@dalwadani]{@link https://github.com/dalwadani}
 */

var locale = {
  code: 'ar-SA',
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// See issue: https://github.com/date-fns/date-fns/issues/376

function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  requiredArgs(2, arguments);
  var dateLeftStartOfWeek = startOfUTCWeek(dirtyDateLeft, options);
  var dateRightStartOfWeek = startOfUTCWeek(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}

var formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: {
      regular: 'méně než vteřina',
      past: 'před méně než vteřinou',
      future: 'za méně než vteřinu'
    },
    few: {
      regular: 'méně než {{count}} vteřiny',
      past: 'před méně než {{count}} vteřinami',
      future: 'za méně než {{count}} vteřiny'
    },
    many: {
      regular: 'méně než {{count}} vteřin',
      past: 'před méně než {{count}} vteřinami',
      future: 'za méně než {{count}} vteřin'
    }
  },
  xSeconds: {
    one: {
      regular: 'vteřina',
      past: 'před vteřinou',
      future: 'za vteřinu'
    },
    few: {
      regular: '{{count}} vteřiny',
      past: 'před {{count}} vteřinami',
      future: 'za {{count}} vteřiny'
    },
    many: {
      regular: '{{count}} vteřin',
      past: 'před {{count}} vteřinami',
      future: 'za {{count}} vteřin'
    }
  },
  halfAMinute: {
    other: {
      regular: 'půl minuty',
      past: 'před půl minutou',
      future: 'za půl minuty'
    }
  },
  lessThanXMinutes: {
    one: {
      regular: 'méně než minuta',
      past: 'před méně než minutou',
      future: 'za méně než minutu'
    },
    few: {
      regular: 'méně než {{count}} minuty',
      past: 'před méně než {{count}} minutami',
      future: 'za méně než {{count}} minuty'
    },
    many: {
      regular: 'méně než {{count}} minut',
      past: 'před méně než {{count}} minutami',
      future: 'za méně než {{count}} minut'
    }
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'před minutou',
      future: 'za minutu'
    },
    few: {
      regular: '{{count}} minuty',
      past: 'před {{count}} minutami',
      future: 'za {{count}} minuty'
    },
    many: {
      regular: '{{count}} minut',
      past: 'před {{count}} minutami',
      future: 'za {{count}} minut'
    }
  },
  aboutXHours: {
    one: {
      regular: 'přibližně hodina',
      past: 'přibližně před hodinou',
      future: 'přibližně za hodinu'
    },
    few: {
      regular: 'přibližně {{count}} hodiny',
      past: 'přibližně před {{count}} hodinami',
      future: 'přibližně za {{count}} hodiny'
    },
    many: {
      regular: 'přibližně {{count}} hodin',
      past: 'přibližně před {{count}} hodinami',
      future: 'přibližně za {{count}} hodin'
    }
  },
  xHours: {
    one: {
      regular: 'hodina',
      past: 'před hodinou',
      future: 'za hodinu'
    },
    few: {
      regular: '{{count}} hodiny',
      past: 'před {{count}} hodinami',
      future: 'za {{count}} hodiny'
    },
    many: {
      regular: '{{count}} hodin',
      past: 'před {{count}} hodinami',
      future: 'za {{count}} hodin'
    }
  },
  xDays: {
    one: {
      regular: 'den',
      past: 'před dnem',
      future: 'za den'
    },
    few: {
      regular: '{{count}} dny',
      past: 'před {{count}} dny',
      future: 'za {{count}} dny'
    },
    many: {
      regular: '{{count}} dní',
      past: 'před {{count}} dny',
      future: 'za {{count}} dní'
    }
  },
  aboutXWeeks: {
    one: {
      regular: 'přibližně týden',
      past: 'přibližně před týdnem',
      future: 'přibližně za týden'
    },
    few: {
      regular: 'přibližně {{count}} týdny',
      past: 'přibližně před {{count}} týdny',
      future: 'přibližně za {{count}} týdny'
    },
    many: {
      regular: 'přibližně {{count}} týdnů',
      past: 'přibližně před {{count}} týdny',
      future: 'přibližně za {{count}} týdnů'
    }
  },
  xWeeks: {
    one: {
      regular: 'týden',
      past: 'před týdnem',
      future: 'za týden'
    },
    few: {
      regular: '{{count}} týdny',
      past: 'před {{count}} týdny',
      future: 'za {{count}} týdny'
    },
    many: {
      regular: '{{count}} týdnů',
      past: 'před {{count}} týdny',
      future: 'za {{count}} týdnů'
    }
  },
  aboutXMonths: {
    one: {
      regular: 'přibližně měsíc',
      past: 'přibližně před měsícem',
      future: 'přibližně za měsíc'
    },
    few: {
      regular: 'přibližně {{count}} měsíce',
      past: 'přibližně před {{count}} měsíci',
      future: 'přibližně za {{count}} měsíce'
    },
    many: {
      regular: 'přibližně {{count}} měsíců',
      past: 'přibližně před {{count}} měsíci',
      future: 'přibližně za {{count}} měsíců'
    }
  },
  xMonths: {
    one: {
      regular: 'měsíc',
      past: 'před měsícem',
      future: 'za měsíc'
    },
    few: {
      regular: '{{count}} měsíce',
      past: 'před {{count}} měsíci',
      future: 'za {{count}} měsíce'
    },
    many: {
      regular: '{{count}} měsíců',
      past: 'před {{count}} měsíci',
      future: 'za {{count}} měsíců'
    }
  },
  aboutXYears: {
    one: {
      regular: 'přibližně rok',
      past: 'přibližně před rokem',
      future: 'přibližně za rok'
    },
    few: {
      regular: 'přibližně {{count}} roky',
      past: 'přibližně před {{count}} roky',
      future: 'přibližně za {{count}} roky'
    },
    many: {
      regular: 'přibližně {{count}} roků',
      past: 'přibližně před {{count}} roky',
      future: 'přibližně za {{count}} roků'
    }
  },
  xYears: {
    one: {
      regular: 'rok',
      past: 'před rokem',
      future: 'za rok'
    },
    few: {
      regular: '{{count}} roky',
      past: 'před {{count}} roky',
      future: 'za {{count}} roky'
    },
    many: {
      regular: '{{count}} roků',
      past: 'před {{count}} roky',
      future: 'za {{count}} roků'
    }
  },
  overXYears: {
    one: {
      regular: 'více než rok',
      past: 'před více než rokem',
      future: 'za více než rok'
    },
    few: {
      regular: 'více než {{count}} roky',
      past: 'před více než {{count}} roky',
      future: 'za více než {{count}} roky'
    },
    many: {
      regular: 'více než {{count}} roků',
      past: 'před více než {{count}} roky',
      future: 'za více než {{count}} roků'
    }
  },
  almostXYears: {
    one: {
      regular: 'skoro rok',
      past: 'skoro před rokem',
      future: 'skoro za rok'
    },
    few: {
      regular: 'skoro {{count}} roky',
      past: 'skoro před {{count}} roky',
      future: 'skoro za {{count}} roky'
    },
    many: {
      regular: 'skoro {{count}} roků',
      past: 'skoro před {{count}} roky',
      future: 'skoro za {{count}} roků'
    }
  }
};
function formatDistance$1(token, count, options) {
  options = options || {};
  var scheme = formatDistanceLocale$1[token]; // cs pluralization

  var pluralToken;

  if (_typeof(scheme.other) === 'object') {
    pluralToken = 'other';
  } else if (count === 1) {
    pluralToken = 'one';
  } else if (count > 1 && count < 5 || count === 0) {
    pluralToken = 'few';
  } else {
    pluralToken = 'many';
  } // times


  var suffixExist = options.addSuffix === true;
  var comparison = options.comparison;
  var timeToken;

  if (suffixExist && comparison === -1) {
    timeToken = 'past';
  } else if (suffixExist && comparison === 1) {
    timeToken = 'future';
  } else {
    timeToken = 'regular';
  }

  return scheme[pluralToken][timeToken].replace('{{count}}', count);
}

var dateFormats$1 = {
  full: 'EEEE, d. MMMM yyyy',
  long: 'd. MMMM yyyy',
  medium: 'd.M.yyyy',
  short: 'd.M.yy'
};
var timeFormats$1 = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$1 = {
  full: "{{date}} 'v' {{time}}",
  long: "{{date}} 'v' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$1 = {
  date: buildFormatLongFn({
    formats: dateFormats$1,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$1,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$1,
    defaultWidth: 'full'
  })
};

var accusativeWeekdays = ['neděli', 'pondělí', 'úterý', 'středu', 'čtvrtek', 'pátek', 'sobotu'];
var formatRelativeLocale$1 = {
  lastWeek: "'poslední' eeee 've' p",
  yesterday: "'včera v' p",
  today: "'dnes v' p",
  tomorrow: "'zítra v' p",
  nextWeek: function nextWeek(date, _baseDate, _options) {
    var day = date.getUTCDay();
    return "'v " + accusativeWeekdays[day] + " o' p";
  },
  other: 'P'
};
function formatRelative$1(token, date, baseDate, options) {
  var format = formatRelativeLocale$1[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$1 = {
  narrow: ['př. n. l.', 'n. l.'],
  abbreviated: ['př. n. l.', 'n. l.'],
  wide: ['před naším letopočtem', 'našeho letopočtu']
};
var quarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí'],
  wide: ['1. čtvrtletí', '2. čtvrtletí', '3. čtvrtletí', '4. čtvrtletí']
};
var monthValues$1 = {
  narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
  abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
  wide: ['leden', 'únor', 'březen', 'duben', 'květen', 'červen', 'červenec', 'srpen', 'září', 'říjen', 'listopad', 'prosinec']
};
var formattingMonthValues = {
  narrow: ['L', 'Ú', 'B', 'D', 'K', 'Č', 'Č', 'S', 'Z', 'Ř', 'L', 'P'],
  abbreviated: ['led', 'úno', 'bře', 'dub', 'kvě', 'čvn', 'čvc', 'srp', 'zář', 'říj', 'lis', 'pro'],
  wide: ['ledna', 'února', 'března', 'dubna', 'května', 'června', 'července', 'srpna', 'září', 'října', 'listopadu', 'prosince']
};
var dayValues$1 = {
  narrow: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
  short: ['ne', 'po', 'út', 'st', 'čt', 'pá', 'so'],
  abbreviated: ['ned', 'pon', 'úte', 'stř', 'čtv', 'pát', 'sob'],
  wide: ['neděle', 'pondělí', 'úterý', 'středa', 'čtvrtek', 'pátek', 'sobota']
};
var dayPeriodValues$1 = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  }
};
var formattingDayPeriodValues$1 = {
  narrow: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  abbreviated: {
    am: 'dop.',
    pm: 'odp.',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'dopoledne',
    pm: 'odpoledne',
    midnight: 'půlnoc',
    noon: 'poledne',
    morning: 'ráno',
    afternoon: 'odpoledne',
    evening: 'večer',
    night: 'noc'
  }
};

function ordinalNumber$1(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$1 = {
  ordinalNumber: ordinalNumber$1,
  era: buildLocalizeFn({
    values: eraValues$1,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$1,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$1,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$1,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$1,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$1,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$1 = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$1 = /\d+/i;
var matchEraPatterns$1 = {
  narrow: /^(p[řr]ed Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pe[řr]ed Kr\.|pe[řr]ed n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(p[řr]ed Kristem|pred na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
};
var parseEraPatterns$1 = {
  any: [/^p[řr]/i, /^(po|n)/i]
};
var matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
  wide: /^[1234]\. [čc]tvrtlet[íi]/i
};
var parseQuarterPatterns$1 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$1 = {
  narrow: /^[lúubdkčcszřrlp]/i,
  abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
  wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
};
var parseMonthPatterns$1 = {
  narrow: [/^l/i, /^[úu]/i, /^b/i, /^d/i, /^k/i, /^[čc]/i, /^[čc]/i, /^s/i, /^z/i, /^[řr]/i, /^l/i, /^p/i],
  any: [/^led/i, /^[úu]n/i, /^b[řr]e/i, /^dub/i, /^kv[ěe]/i, /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i, /^[čc]vc|[čc]erven(ec|ce)/i, /^srp/i, /^z[áa][řr]/i, /^[řr][íi]j/i, /^lis/i, /^pro/i]
};
var matchDayPatterns$1 = {
  narrow: /^[npuúsčps]/i,
  short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
  abbreviated: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
  wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
};
var parseDayPatterns$1 = {
  narrow: [/^n/i, /^p/i, /^[úu]/i, /^s/i, /^[čc]/i, /^p/i, /^s/i],
  any: [/^ne/i, /^po/i, /^ut/i, /^st/i, /^[čc]t/i, /^p/i, /^so/i]
};
var matchDayPeriodPatterns$1 = {
  any: /^dopoledne|dop\.?|odpoledne|odp\.?|půlnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci/i
};
var parseDayPeriodPatterns$1 = {
  any: {
    am: /^dop/i,
    pm: /^odp/i,
    midnight: /^p[ůu]lnoc/i,
    noon: /^poledne/i,
    morning: /r[áa]no/i,
    afternoon: /odpoledne/i,
    evening: /ve[čc]er/i,
    night: /noc/i
  }
};
var match$1 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Czech locale.
 * @language Czech
 * @iso-639-2 ces
 * @author David Rus [@davidrus]{@link https://github.com/davidrus}
 * @author Pavel Hrách [@SilenY]{@link https://github.com/SilenY}
 * @author Jozef Bíroš [@JozefBiros]{@link https://github.com/JozefBiros}
 */

var locale$1 = {
  code: 'cs',
  formatDistance: formatDistance$1,
  formatLong: formatLong$1,
  formatRelative: formatRelative$1,
  localize: localize$1,
  match: match$1,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$2 = {
  lessThanXSeconds: {
    one: 'mindre end ét sekund',
    other: 'mindre end {{count}} sekunder'
  },
  xSeconds: {
    one: '1 sekund',
    other: '{{count}} sekunder'
  },
  halfAMinute: 'ét halvt minut',
  lessThanXMinutes: {
    one: 'mindre end ét minut',
    other: 'mindre end {{count}} minutter'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minutter'
  },
  aboutXHours: {
    one: 'cirka 1 time',
    other: 'cirka {{count}} timer'
  },
  xHours: {
    one: '1 time',
    other: '{{count}} timer'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dage'
  },
  aboutXWeeks: {
    one: 'cirka 1 uge',
    other: 'cirka {{count}} uger'
  },
  xWeeks: {
    one: '1 uge',
    other: '{{count}} uger'
  },
  aboutXMonths: {
    one: 'cirka 1 måned',
    other: 'cirka {{count}} måneder'
  },
  xMonths: {
    one: '1 måned',
    other: '{{count}} måneder'
  },
  aboutXYears: {
    one: 'cirka 1 år',
    other: 'cirka {{count}} år'
  },
  xYears: {
    one: '1 år',
    other: '{{count}} år'
  },
  overXYears: {
    one: 'over 1 år',
    other: 'over {{count}} år'
  },
  almostXYears: {
    one: 'næsten 1 år',
    other: 'næsten {{count}} år'
  }
};
function formatDistance$2(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$2[token] === 'string') {
    result = formatDistanceLocale$2[token];
  } else if (count === 1) {
    result = formatDistanceLocale$2[token].one;
  } else {
    result = formatDistanceLocale$2[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }

  return result;
}

var dateFormats$2 = {
  full: "EEEE 'den' d. MMMM y",
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd/MM/y'
};
var timeFormats$2 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$2 = {
  full: "{{date}} 'kl'. {{time}}",
  long: "{{date}} 'kl'. {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$2 = {
  date: buildFormatLongFn({
    formats: dateFormats$2,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$2,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$2,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$2 = {
  lastWeek: "'sidste' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "'på' eeee 'kl.' p",
  other: 'P'
};
function formatRelative$2(token, _date, _baseDate, _options) {
  return formatRelativeLocale$2[token];
}

var eraValues$2 = {
  narrow: ['fvt', 'vt'],
  abbreviated: ['f.v.t.', 'v.t.'],
  wide: ['før vesterlandsk tidsregning', 'vesterlandsk tidsregning']
};
var quarterValues$2 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1. kvt.', '2. kvt.', '3. kvt.', '4. kvt.'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$2 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december'] // Note that 'Days - abbreviated - Formatting' has periods at the end.
  // https://www.unicode.org/cldr/charts/32/summary/da.html#1760
  // This makes grammatical sense in danish, as most abbreviations have periods.

};
var dayValues$2 = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
  abbreviated: ['søn.', 'man.', 'tir.', 'ons.', 'tor.', 'fre.', 'lør.'],
  wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
};
var dayPeriodValues$2 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'morgen',
    afternoon: 'eftermiddag',
    evening: 'aften',
    night: 'nat'
  }
};
var formattingDayPeriodValues$2 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnat',
    noon: 'middag',
    morning: 'om morgenen',
    afternoon: 'om eftermiddagen',
    evening: 'om aftenen',
    night: 'om natten'
  }
};

function ordinalNumber$2(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$2 = {
  ordinalNumber: ordinalNumber$2,
  era: buildLocalizeFn({
    values: eraValues$2,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$2,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$2,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$2,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$2,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$2,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$2 = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$2 = /\d+/i;
var matchEraPatterns$2 = {
  narrow: /^(fKr|fvt|eKr|vt)/i,
  abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
  wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
};
var parseEraPatterns$2 = {
  any: [/^f/i, /^(v|e)/i]
};
var matchQuarterPatterns$2 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]. kvt\./i,
  wide: /^[1234]\.? kvartal/i
};
var parseQuarterPatterns$2 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$2 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
};
var parseMonthPatterns$2 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$2 = {
  narrow: /^[smtofl]/i,
  short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns$2 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$2 = {
  narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
  any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
};
var parseDayPeriodPatterns$2 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /midnat/i,
    noon: /middag/i,
    morning: /morgen/i,
    afternoon: /eftermiddag/i,
    evening: /aften/i,
    night: /nat/i
  }
};
var match$2 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$2,
    parsePattern: parseOrdinalNumberPattern$2,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$2,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$2,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$2,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$2,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$2,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$2,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$2,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Danish locale.
 * @language Danish
 * @iso-639-2 dan
 * @author Mathias Wøbbe [@MathiasKandelborg]{@link https://github.com/MathiasKandelborg}
 * @author Anders B. Hansen [@Andersbiha]{@link https://github.com/Andersbiha}
 * @author [@kgram]{@link https://github.com/kgram}
 * @author [@stefanbugge]{@link https://github.com/stefanbugge}
 */

var locale$2 = {
  code: 'da',
  formatDistance: formatDistance$2,
  formatLong: formatLong$2,
  formatRelative: formatRelative$2,
  localize: localize$2,
  match: match$2,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$3 = {
  lessThanXSeconds: {
    standalone: {
      one: 'weniger als eine Sekunde',
      other: 'weniger als {{count}} Sekunden'
    },
    withPreposition: {
      one: 'weniger als einer Sekunde',
      other: 'weniger als {{count}} Sekunden'
    }
  },
  xSeconds: {
    standalone: {
      one: 'eine Sekunde',
      other: '{{count}} Sekunden'
    },
    withPreposition: {
      one: 'einer Sekunde',
      other: '{{count}} Sekunden'
    }
  },
  halfAMinute: {
    standalone: 'eine halbe Minute',
    withPreposition: 'einer halben Minute'
  },
  lessThanXMinutes: {
    standalone: {
      one: 'weniger als eine Minute',
      other: 'weniger als {{count}} Minuten'
    },
    withPreposition: {
      one: 'weniger als einer Minute',
      other: 'weniger als {{count}} Minuten'
    }
  },
  xMinutes: {
    standalone: {
      one: 'eine Minute',
      other: '{{count}} Minuten'
    },
    withPreposition: {
      one: 'einer Minute',
      other: '{{count}} Minuten'
    }
  },
  aboutXHours: {
    standalone: {
      one: 'etwa eine Stunde',
      other: 'etwa {{count}} Stunden'
    },
    withPreposition: {
      one: 'etwa einer Stunde',
      other: 'etwa {{count}} Stunden'
    }
  },
  xHours: {
    standalone: {
      one: 'eine Stunde',
      other: '{{count}} Stunden'
    },
    withPreposition: {
      one: 'einer Stunde',
      other: '{{count}} Stunden'
    }
  },
  xDays: {
    standalone: {
      one: 'ein Tag',
      other: '{{count}} Tage'
    },
    withPreposition: {
      one: 'einem Tag',
      other: '{{count}} Tagen'
    }
  },
  aboutXWeeks: {
    standalone: {
      one: 'etwa ein Woche',
      other: 'etwa {{count}} Wochen'
    },
    withPreposition: {
      one: 'etwa einem Woche',
      other: 'etwa {{count}} Wochen'
    }
  },
  xWeeks: {
    standalone: {
      one: 'ein Woche',
      other: '{{count}} Wochen'
    },
    withPreposition: {
      one: 'einem Woche',
      other: '{{count}} Wochen'
    }
  },
  aboutXMonths: {
    standalone: {
      one: 'etwa ein Monat',
      other: 'etwa {{count}} Monate'
    },
    withPreposition: {
      one: 'etwa einem Monat',
      other: 'etwa {{count}} Monaten'
    }
  },
  xMonths: {
    standalone: {
      one: 'ein Monat',
      other: '{{count}} Monate'
    },
    withPreposition: {
      one: 'einem Monat',
      other: '{{count}} Monaten'
    }
  },
  aboutXYears: {
    standalone: {
      one: 'etwa ein Jahr',
      other: 'etwa {{count}} Jahre'
    },
    withPreposition: {
      one: 'etwa einem Jahr',
      other: 'etwa {{count}} Jahren'
    }
  },
  xYears: {
    standalone: {
      one: 'ein Jahr',
      other: '{{count}} Jahre'
    },
    withPreposition: {
      one: 'einem Jahr',
      other: '{{count}} Jahren'
    }
  },
  overXYears: {
    standalone: {
      one: 'mehr als ein Jahr',
      other: 'mehr als {{count}} Jahre'
    },
    withPreposition: {
      one: 'mehr als einem Jahr',
      other: 'mehr als {{count}} Jahren'
    }
  },
  almostXYears: {
    standalone: {
      one: 'fast ein Jahr',
      other: 'fast {{count}} Jahre'
    },
    withPreposition: {
      one: 'fast einem Jahr',
      other: 'fast {{count}} Jahren'
    }
  }
};
function formatDistance$3(token, count, options) {
  options = options || {};
  var usageGroup = options.addSuffix ? formatDistanceLocale$3[token].withPreposition : formatDistanceLocale$3[token].standalone;
  var result;

  if (typeof usageGroup === 'string') {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return 'vor ' + result;
    }
  }

  return result;
}

var dateFormats$3 = {
  full: 'EEEE, do MMMM y',
  // Montag, 7. Januar 2018
  long: 'do MMMM y',
  // 7. Januar 2018
  medium: 'do MMM. y',
  // 7. Jan. 2018
  short: 'dd.MM.y' // 07.01.2018

};
var timeFormats$3 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$3 = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$3 = {
  date: buildFormatLongFn({
    formats: dateFormats$3,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$3,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$3,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$3 = {
  lastWeek: "'letzten' eeee 'um' p",
  yesterday: "'gestern um' p",
  today: "'heute um' p",
  tomorrow: "'morgen um' p",
  nextWeek: "eeee 'um' p",
  other: 'P'
};
function formatRelative$3(token, _date, _baseDate, _options) {
  return formatRelativeLocale$3[token];
}

var eraValues$3 = {
  narrow: ['v.Chr.', 'n.Chr.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['vor Christus', 'nach Christus']
};
var quarterValues$3 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. Quartal', '2. Quartal', '3. Quartal', '4. Quartal'] // Note: in German, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues$3 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  wide: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember']
};
var dayValues$3 = {
  narrow: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  short: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  abbreviated: ['So.', 'Mo.', 'Di.', 'Mi.', 'Do.', 'Fr.', 'Sa.'],
  wide: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'] // https://www.unicode.org/cldr/charts/32/summary/de.html#1881

};
var dayPeriodValues$3 = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachm.',
    evening: 'Abend',
    night: 'Nacht'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'Morgen',
    afternoon: 'Nachmittag',
    evening: 'Abend',
    night: 'Nacht'
  }
};
var formattingDayPeriodValues$3 = {
  narrow: {
    am: 'vm.',
    pm: 'nm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachm.',
    evening: 'abends',
    night: 'nachts'
  },
  abbreviated: {
    am: 'vorm.',
    pm: 'nachm.',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  },
  wide: {
    am: 'vormittags',
    pm: 'nachmittags',
    midnight: 'Mitternacht',
    noon: 'Mittag',
    morning: 'morgens',
    afternoon: 'nachmittags',
    evening: 'abends',
    night: 'nachts'
  }
};

function ordinalNumber$3(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$3 = {
  ordinalNumber: ordinalNumber$3,
  era: buildLocalizeFn({
    values: eraValues$3,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$3,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$3,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$3,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$3,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$3,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$3 = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$3 = /\d+/i;
var matchEraPatterns$3 = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
var parseEraPatterns$3 = {
  any: [/^v/i, /^n/i]
};
var matchQuarterPatterns$3 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var parseQuarterPatterns$3 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$3 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mär|apr|mai|jun|jul|aug|sep|okt|nov|dez)/i,
  wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
var parseMonthPatterns$3 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$3 = {
  narrow: /^[smdmf]/i,
  short: /^(so|mo|di|mi|do|fr|sa)/i,
  abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
  wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
var parseDayPatterns$3 = {
  any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$3 = {
  narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
var parseDayPeriodPatterns$3 = {
  any: {
    am: /^v/i,
    pm: /^n/i,
    midnight: /^Mitte/i,
    noon: /^Mitta/i,
    morning: /morgens/i,
    afternoon: /nachmittags/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /abends/i,
    night: /nachts/i // will never be matched. Night is matched by `pm`

  }
};
var match$3 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$3,
    parsePattern: parseOrdinalNumberPattern$3,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$3,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$3,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$3,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$3,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$3,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$3,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Asia [@asia-t]{@link https://github.com/asia-t}
 * @author Van Vuong Ngo [@vanvuongngo]{@link https://github.com/vanvuongngo}
 * @author RomanErnst [@pex]{@link https://github.com/pex}
 * @author Philipp Keck [@Philipp91]{@link https://github.com/Philipp91}
 */

var locale$3 = {
  code: 'de',
  formatDistance: formatDistance$3,
  formatLong: formatLong$3,
  formatRelative: formatRelative$3,
  localize: localize$3,
  match: match$3,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$4 = {
  lessThanXSeconds: {
    one: 'λιγότερο από ένα δευτερόλεπτο',
    other: 'λιγότερο από {{count}} δευτερόλεπτα'
  },
  xSeconds: {
    one: '1 δευτερόλεπτο',
    other: '{{count}} δευτερόλεπτα'
  },
  halfAMinute: 'μισό λεπτό',
  lessThanXMinutes: {
    one: 'λιγότερο από ένα λεπτό',
    other: 'λιγότερο από {{count}} λεπτά'
  },
  xMinutes: {
    one: '1 λεπτό',
    other: '{{count}} λεπτά'
  },
  aboutXHours: {
    one: 'περίπου 1 ώρα',
    other: 'περίπου {{count}} ώρες'
  },
  xHours: {
    one: '1 ώρα',
    other: '{{count}} ώρες'
  },
  xDays: {
    one: '1 ημέρα',
    other: '{{count}} ημέρες'
  },
  aboutXWeeks: {
    one: 'περίπου 1 εβδομάδα',
    other: 'περίπου {{count}} εβδομάδες'
  },
  xWeeks: {
    one: '1 εβδομάδα',
    other: '{{count}} εβδομάδες'
  },
  aboutXMonths: {
    one: 'περίπου 1 μήνας',
    other: 'περίπου {{count}} μήνες'
  },
  xMonths: {
    one: '1 μήνας',
    other: '{{count}} μήνες'
  },
  aboutXYears: {
    one: 'περίπου 1 χρόνο',
    other: 'περίπου {{count}} χρόνια'
  },
  xYears: {
    one: '1 χρόνο',
    other: '{{count}} χρόνια'
  },
  overXYears: {
    one: 'πάνω από 1 χρόνο',
    other: 'πάνω από {{count}} χρόνια'
  },
  almostXYears: {
    one: 'περίπου 1 χρόνο',
    other: 'περίπου {{count}} χρόνια'
  }
};
function formatDistance$4(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$4[token] === 'string') {
    result = formatDistanceLocale$4[token];
  } else if (count === 1) {
    result = formatDistanceLocale$4[token].one;
  } else {
    result = formatDistanceLocale$4[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'σε ' + result;
    } else {
      return result + ' πριν';
    }
  }

  return result;
}

var dateFormats$4 = {
  full: 'EEEE, d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'd/M/yy'
};
var timeFormats$4 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$4 = {
  full: '{{date}} - {{time}}',
  long: '{{date}} - {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$4 = {
  date: buildFormatLongFn({
    formats: dateFormats$4,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$4,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$4,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$4 = {
  lastWeek: "'την προηγούμενη' eeee 'στις' p",
  yesterday: "'χθες στις' p",
  today: "'σήμερα στις' p",
  tomorrow: "'αύριο στις' p",
  nextWeek: "eeee 'στις' p",
  other: 'P'
};
function formatRelative$4(token, _date, _baseDate, _options) {
  return formatRelativeLocale$4[token];
}

var eraValues$4 = {
  narrow: ['πΧ', 'μΧ'],
  abbreviated: ['π.Χ.', 'μ.Χ.'],
  wide: ['προ Χριστού', 'μετά Χριστόν']
};
var quarterValues$4 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Τ1', 'Τ2', 'Τ3', 'Τ4'],
  wide: ['1ο τρίμηνο', '2ο τρίμηνο', '3ο τρίμηνο', '4ο τρίμηνο']
};
var monthValues$4 = {
  narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
  abbreviated: ['Ιαν', 'Φεβ', 'Μάρ', 'Απρ', 'Μάι', 'Ιούν', 'Ιούλ', 'Αύγ', 'Σεπ', 'Οκτ', 'Νοέ', 'Δεκ'],
  wide: ['Ιανουάριος', 'Φεβρουάριος', 'Μάρτιος', 'Απρίλιος', 'Μάιος', 'Ιούνιος', 'Ιούλιος', 'Αύγουστος', 'Σεπτέμβριος', 'Οκτώβριος', 'Νοέμβριος', 'Δεκέμβριος']
};
var formattingMonthValues$1 = {
  narrow: ['Ι', 'Φ', 'Μ', 'Α', 'Μ', 'Ι', 'Ι', 'Α', 'Σ', 'Ο', 'Ν', 'Δ'],
  abbreviated: ['Ιαν', 'Φεβ', 'Μαρ', 'Απρ', 'Μαΐ', 'Ιουν', 'Ιουλ', 'Αυγ', 'Σεπ', 'Οκτ', 'Νοε', 'Δεκ'],
  wide: ['Ιανουαρίου', 'Φεβρουαρίου', 'Μαρτίου', 'Απριλίου', 'Μαΐου', 'Ιουνίου', 'Ιουλίου', 'Αυγούστου', 'Σεπτεμβρίου', 'Οκτωβρίου', 'Νοεμβρίου', 'Δεκεμβρίου']
};
var dayValues$4 = {
  narrow: ['Κ', 'Δ', 'T', 'Τ', 'Π', 'Π', 'Σ'],
  short: ['Κυ', 'Δε', 'Τρ', 'Τε', 'Πέ', 'Πα', 'Σά'],
  abbreviated: ['Κυρ', 'Δευ', 'Τρί', 'Τετ', 'Πέμ', 'Παρ', 'Σάβ'],
  wide: ['Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο']
};
var dayPeriodValues$4 = {
  narrow: {
    am: 'πμ',
    pm: 'μμ',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  },
  abbreviated: {
    am: 'π.μ.',
    pm: 'μ.μ.',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  },
  wide: {
    am: 'π.μ.',
    pm: 'μ.μ.',
    midnight: 'μεσάνυχτα',
    noon: 'μεσημέρι',
    morning: 'πρωί',
    afternoon: 'απόγευμα',
    evening: 'βράδυ',
    night: 'νύχτα'
  }
};

function ordinalNumber$4(dirtyNumber, dirtyOptions) {
  var options = dirtyOptions || {};
  var unit = String(options.unit);
  var suffix;

  if (unit === 'year' || unit === 'month') {
    suffix = 'ος';
  } else if (unit === 'week' || unit === 'dayOfYear' || unit === 'day' || unit === 'hour' || unit === 'date') {
    suffix = 'η';
  } else {
    suffix = 'ο';
  }

  return dirtyNumber + suffix;
}

var localize$4 = {
  ordinalNumber: ordinalNumber$4,
  era: buildLocalizeFn({
    values: eraValues$4,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$4,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$4,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$1,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$4,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$4,
    defaultWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$4 = /^(\d+)(ος|η|ο)?/i;
var parseOrdinalNumberPattern$4 = /\d+/i;
var matchEraPatterns$4 = {
  narrow: /^(πΧ|μΧ)/i,
  abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
  wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
};
var parseEraPatterns$4 = {
  any: [/^π/i, /^(μ|κ)/i]
};
var matchQuarterPatterns$4 = {
  narrow: /^[1234]/i,
  abbreviated: /^τ[1234]/i,
  wide: /^[1234]ο? τρ(ί|ι)μηνο/i
};
var parseQuarterPatterns$4 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$4 = {
  narrow: /^[ιφμαμιιασονδ]/i,
  abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
  wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
};
var parseMonthPatterns$4 = {
  narrow: [/^ι/i, /^φ/i, /^μ/i, /^α/i, /^μ/i, /^ι/i, /^ι/i, /^α/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i],
  any: [/^ια/i, /^φ/i, /^μ[άα]ρ/i, /^απ/i, /^μ[άα][ιΐ]/i, /^ιο[ύυ]ν/i, /^ιο[ύυ]λ/i, /^α[ύυ]/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i]
};
var matchDayPatterns$4 = {
  narrow: /^[κδτπσ]/i,
  short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
  abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
  wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
};
var parseDayPatterns$4 = {
  narrow: [/^κ/i, /^δ/i, /^τ/i, /^τ/i, /^π/i, /^π/i, /^σ/i],
  any: [/^κ/i, /^δ/i, /^τρ/i, /^τε/i, /^π[εέ]/i, /^π[αά]/i, /^σ/i]
};
var matchDayPeriodPatterns$4 = {
  narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
  any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
};
var parseDayPeriodPatterns$4 = {
  any: {
    am: /^πμ|π\.\s?μ\./i,
    pm: /^μμ|μ\.\s?μ\./i,
    midnight: /^μεσάν/i,
    noon: /^μεσημ(έ|ε)/i,
    morning: /πρω(ί|ι)/i,
    afternoon: /απ(ό|ο)γευμα/i,
    evening: /βρ(ά|α)δυ/i,
    night: /ν(ύ|υ)χτα/i
  }
};
var match$4 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$4,
    parsePattern: parseOrdinalNumberPattern$4,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$4,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$4,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$4,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$4,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$4,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$4,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$4,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Greek locale.
 * @language Greek
 * @iso-639-2 ell
 * @author Fanis Katsimpas [@fanixk]{@link https://github.com/fanixk}
 * @author Theodoros Orfanidis [@teoulas]{@link https://github.com/teoulas}
 */

var locale$4 = {
  code: 'el',
  formatDistance: formatDistance$4,
  formatLong: formatLong$4,
  formatRelative: formatRelative$4,
  localize: localize$4,
  match: match$4,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$5 = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
function formatDistance$5(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$5[token] === 'string') {
    result = formatDistanceLocale$5[token];
  } else if (count === 1) {
    result = formatDistanceLocale$5[token].one;
  } else {
    result = formatDistanceLocale$5[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

var formatRelativeLocale$5 = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
function formatRelative$5(token, _date, _baseDate, _options) {
  return formatRelativeLocale$5[token];
}

var eraValues$5 = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues$5 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues$5 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues$5 = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues$5 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues$4 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber$5(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize$5 = {
  ordinalNumber: ordinalNumber$5,
  era: buildLocalizeFn({
    values: eraValues$5,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$5,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$5,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$5,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$5,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$4,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$5 = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern$5 = /\d+/i;
var matchEraPatterns$5 = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns$5 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$5 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns$5 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$5 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns$5 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$5 = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns$5 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns$5 = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns$5 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match$5 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$5,
    parsePattern: parseOrdinalNumberPattern$5,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$5,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$5,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$5,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$5,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$5,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$5,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$5,
    defaultParseWidth: 'any'
  })
};

var dateFormats$5 = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$5 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$5 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$5 = {
  date: buildFormatLongFn({
    formats: dateFormats$5,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$5,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$5,
    defaultWidth: 'full'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United Kingdom).
 * @language English
 * @iso-639-2 eng
 * @author Alex [@glintik]{@link https://github.com/glintik}
 */

var locale$5 = {
  code: 'en-GB',
  formatDistance: formatDistance$5,
  formatLong: formatLong$5,
  formatRelative: formatRelative$5,
  localize: localize$5,
  match: match$5,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var dateFormats$6 = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats$6 = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats$6 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$6 = {
  date: buildFormatLongFn({
    formats: dateFormats$6,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$6,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$6,
    defaultWidth: 'full'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale$6 = {
  code: 'en-US',
  formatDistance: formatDistance$5,
  formatLong: formatLong$6,
  formatRelative: formatRelative$5,
  localize: localize$5,
  match: match$5,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$6 = {
  lessThanXSeconds: {
    one: 'menos de un segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'medio minuto',
  lessThanXMinutes: {
    one: 'menos de un minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'alrededor de 1 hora',
    other: 'alrededor de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 día',
    other: '{{count}} días'
  },
  aboutXWeeks: {
    one: 'alrededor de 1 semana',
    other: 'alrededor de {{count}} semanas'
  },
  xWeeks: {
    one: '1 semana',
    other: '{{count}} semanas'
  },
  aboutXMonths: {
    one: 'alrededor de 1 mes',
    other: 'alrededor de {{count}} meses'
  },
  xMonths: {
    one: '1 mes',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'alrededor de 1 año',
    other: 'alrededor de {{count}} años'
  },
  xYears: {
    one: '1 año',
    other: '{{count}} años'
  },
  overXYears: {
    one: 'más de 1 año',
    other: 'más de {{count}} años'
  },
  almostXYears: {
    one: 'casi 1 año',
    other: 'casi {{count}} años'
  }
};
function formatDistance$6(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$6[token] === 'string') {
    result = formatDistanceLocale$6[token];
  } else if (count === 1) {
    result = formatDistanceLocale$6[token].one;
  } else {
    result = formatDistanceLocale$6[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'en ' + result;
    } else {
      return 'hace ' + result;
    }
  }

  return result;
}

var dateFormats$7 = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$7 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$7 = {
  full: "{{date}} 'a las' {{time}}",
  long: "{{date}} 'a las' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$7 = {
  date: buildFormatLongFn({
    formats: dateFormats$7,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$7,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$7,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$6 = {
  lastWeek: "'el' eeee 'pasado a la' LT",
  yesterday: "'ayer a la' p",
  today: "'hoy a la' p",
  tomorrow: "'mañana a la' p",
  nextWeek: "eeee 'a la' p",
  other: 'P'
};
var formatRelativeLocalePlural = {
  lastWeek: "'el' eeee 'pasado a las' p",
  yesterday: "'ayer a las' p",
  today: "'hoy a las' p",
  tomorrow: "'mañana a las' p",
  nextWeek: "eeee 'a las' p",
  other: 'P'
};
function formatRelative$6(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }

  return formatRelativeLocale$6[token];
}

var eraValues$6 = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'después de cristo']
};
var quarterValues$6 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$6 = {
  narrow: ['e', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['ene', 'feb', 'mar', 'abr', 'may', 'jun', 'jul', 'ago', 'sep', 'oct', 'nov', 'dic'],
  wide: ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
};
var dayValues$6 = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['do', 'lu', 'ma', 'mi', 'ju', 'vi', 'sa'],
  abbreviated: ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sab'],
  wide: ['domingo', 'lunes', 'martes', 'miércoles', 'jueves', 'viernes', 'sábado']
};
var dayPeriodValues$6 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'mañana',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noche'
  }
};
var formattingDayPeriodValues$5 = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'medianoche',
    noon: 'mediodia',
    morning: 'de la mañana',
    afternoon: 'de la tarde',
    evening: 'de la tarde',
    night: 'de la noche'
  }
};

function ordinalNumber$6(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + 'º';
}

var localize$6 = {
  ordinalNumber: ordinalNumber$6,
  era: buildLocalizeFn({
    values: eraValues$6,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$6,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$6,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$6,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$6,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$5,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$6 = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$6 = /\d+/i;
var matchEraPatterns$6 = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
};
var parseEraPatterns$6 = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
};
var matchQuarterPatterns$6 = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$6 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$6 = {
  narrow: /^[efmajsond]/i,
  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
};
var parseMonthPatterns$6 = {
  narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
};
var matchDayPatterns$6 = {
  narrow: /^[dlmjvs]/i,
  short: /^(do|lu|ma|mi|ju|vi|sa)/i,
  abbreviated: /^(dom|lun|mar|mie|jue|vie|sab)/i,
  wide: /^(domingo|lunes|martes|miercoles|jueves|viernes|s[áa]bado)/i
};
var parseDayPatterns$6 = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
};
var matchDayPeriodPatterns$6 = {
  narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
  any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
};
var parseDayPeriodPatterns$6 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /mañana/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noche/i
  }
};
var match$6 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$6,
    parsePattern: parseOrdinalNumberPattern$6,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$6,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$6,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$6,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$6,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$6,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$6,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$6,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Spanish locale.
 * @language Spanish
 * @iso-639-2 spa
 * @author Juan Angosto [@juanangosto]{@link https://github.com/juanangosto}
 * @author Guillermo Grau [@guigrpa]{@link https://github.com/guigrpa}
 * @author Fernando Agüero [@fjaguero]{@link https://github.com/fjaguero}
 * @author Gastón Haro [@harogaston]{@link https://github.com/harogaston}
 * @author Yago Carballo [@YagoCarballo]{@link https://github.com/YagoCarballo}
 */

var locale$7 = {
  code: 'es',
  formatDistance: formatDistance$6,
  formatLong: formatLong$7,
  formatRelative: formatRelative$6,
  localize: localize$6,
  match: match$6,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

function futureSeconds(text) {
  return text.replace(/sekuntia?/, 'sekunnin');
}

function futureMinutes(text) {
  return text.replace(/minuuttia?/, 'minuutin');
}

function futureHours(text) {
  return text.replace(/tuntia?/, 'tunnin');
}

function futureDays(text) {
  return text.replace(/päivää?/, 'päivän');
}

function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, 'viikon');
}

function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, 'kuukauden');
}

function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, 'vuoden');
}

var formatDistanceLocale$7 = {
  lessThanXSeconds: {
    one: 'alle sekunti',
    other: 'alle {{count}} sekuntia',
    futureTense: futureSeconds
  },
  xSeconds: {
    one: 'sekunti',
    other: '{{count}} sekuntia',
    futureTense: futureSeconds
  },
  halfAMinute: {
    one: 'puoli minuuttia',
    other: 'puoli minuuttia',
    futureTense: function futureTense(_text) {
      return 'puolen minuutin';
    }
  },
  lessThanXMinutes: {
    one: 'alle minuutti',
    other: 'alle {{count}} minuuttia',
    futureTense: futureMinutes
  },
  xMinutes: {
    one: 'minuutti',
    other: '{{count}} minuuttia',
    futureTense: futureMinutes
  },
  aboutXHours: {
    one: 'noin tunti',
    other: 'noin {{count}} tuntia',
    futureTense: futureHours
  },
  xHours: {
    one: 'tunti',
    other: '{{count}} tuntia',
    futureTense: futureHours
  },
  xDays: {
    one: 'päivä',
    other: '{{count}} päivää',
    futureTense: futureDays
  },
  aboutXWeeks: {
    one: 'noin viikko',
    other: 'noin {{count}} viikkoa',
    futureTense: futureWeeks
  },
  xWeeks: {
    one: 'viikko',
    other: '{{count}} viikkoa',
    futureTense: futureWeeks
  },
  aboutXMonths: {
    one: 'noin kuukausi',
    other: 'noin {{count}} kuukautta',
    futureTense: futureMonths
  },
  xMonths: {
    one: 'kuukausi',
    other: '{{count}} kuukautta',
    futureTense: futureMonths
  },
  aboutXYears: {
    one: 'noin vuosi',
    other: 'noin {{count}} vuotta',
    futureTense: futureYears
  },
  xYears: {
    one: 'vuosi',
    other: '{{count}} vuotta',
    futureTense: futureYears
  },
  overXYears: {
    one: 'yli vuosi',
    other: 'yli {{count}} vuotta',
    futureTense: futureYears
  },
  almostXYears: {
    one: 'lähes vuosi',
    other: 'lähes {{count}} vuotta',
    futureTense: futureYears
  }
};
function formatDistance$7(token, count, options) {
  options = options || {};
  var distance = formatDistanceLocale$7[token];
  var result = count === 1 ? distance.one : distance.other.replace('{{count}}', count);

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return distance.futureTense(result) + ' kuluttua';
    } else {
      return result + ' sitten';
    }
  }

  return result;
}

var dateFormats$8 = {
  full: 'eeee d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'd.M.y'
};
var timeFormats$8 = {
  full: 'HH.mm.ss zzzz',
  long: 'HH.mm.ss z',
  medium: 'HH.mm.ss',
  short: 'HH.mm'
};
var dateTimeFormats$8 = {
  full: "{{date}} 'klo' {{time}}",
  long: "{{date}} 'klo' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$8 = {
  date: buildFormatLongFn({
    formats: dateFormats$8,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$8,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$8,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$7 = {
  lastWeek: "'viime' eeee 'klo' p",
  yesterday: "'eilen klo' p",
  today: "'tänään klo' p",
  tomorrow: "'huomenna klo' p",
  nextWeek: "'ensi' eeee 'klo' p",
  other: 'P'
};
function formatRelative$7(token, _date, _baseDate, _options) {
  return formatRelativeLocale$7[token];
}

var eraValues$7 = {
  narrow: ['eaa.', 'jaa.'],
  abbreviated: ['eaa.', 'jaa.'],
  wide: ['ennen ajanlaskun alkua', 'jälkeen ajanlaskun alun']
};
var quarterValues$7 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartaali', '2. kvartaali', '3. kvartaali', '4. kvartaali']
};
var monthValues$7 = {
  narrow: ['T', 'H', 'M', 'H', 'T', 'K', 'H', 'E', 'S', 'L', 'M', 'J'],
  abbreviated: ['tammi', 'helmi', 'maalis', 'huhti', 'touko', 'kesä', 'heinä', 'elo', 'syys', 'loka', 'marras', 'joulu'],
  wide: ['tammikuu', 'helmikuu', 'maaliskuu', 'huhtikuu', 'toukokuu', 'kesäkuu', 'heinäkuu', 'elokuu', 'syyskuu', 'lokakuu', 'marraskuu', 'joulukuu']
};
var formattingMonthValues$2 = {
  narrow: monthValues$7.narrow,
  abbreviated: monthValues$7.abbreviated,
  wide: monthValues$7.wide.map(function (name) {
    return name + 'ta';
  })
};
var dayValues$7 = {
  narrow: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
  short: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
  abbreviated: ['sunn.', 'maan.', 'tiis.', 'kesk.', 'torst.', 'perj.', 'la'],
  wide: ['sunnuntai', 'maanantai', 'tiistai', 'keskiviikko', 'torstai', 'perjantai', 'lauantai']
};
var formattingDayValues = {
  narrow: dayValues$7.narrow,
  short: dayValues$7.short,
  abbreviated: dayValues$7.abbreviated,
  wide: dayValues$7.wide.map(function (name) {
    return name + 'na';
  })
};
var dayPeriodValues$7 = {
  narrow: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyö',
    noon: 'keskipäivä',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'yöllä'
  },
  abbreviated: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyö',
    noon: 'keskipäivä',
    morning: 'ap',
    afternoon: 'ip',
    evening: 'illalla',
    night: 'yöllä'
  },
  wide: {
    am: 'ap',
    pm: 'ip',
    midnight: 'keskiyöllä',
    noon: 'keskipäivällä',
    morning: 'aamupäivällä',
    afternoon: 'iltapäivällä',
    evening: 'illalla',
    night: 'yöllä'
  }
};

function ordinalNumber$7(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$7 = {
  ordinalNumber: ordinalNumber$7,
  era: buildLocalizeFn({
    values: eraValues$7,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$7,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$7,
    formattingValues: formattingMonthValues$2,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$7,
    formattingValues: formattingDayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$7,
    defaultWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$7 = /^(\d+)(\.)/i;
var parseOrdinalNumberPattern$7 = /\d+/i;
var matchEraPatterns$7 = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
};
var parseEraPatterns$7 = {
  any: [/^e/i, /^j/i]
};
var matchQuarterPatterns$7 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i
};
var parseQuarterPatterns$7 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$7 = {
  narrow: /^[thmkeslj]/i,
  abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
var parseMonthPatterns$7 = {
  narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
  any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
};
var matchDayPatterns$7 = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
var parseDayPatterns$7 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
};
var matchDayPeriodPatterns$7 = {
  narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
  any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
};
var parseDayPeriodPatterns$7 = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiyö/i,
    noon: /^keskipäivä/i,
    morning: /aamupäivällä/i,
    afternoon: /iltapäivällä/i,
    evening: /illalla/i,
    night: /yöllä/i
  }
};
var match$7 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$7,
    parsePattern: parseOrdinalNumberPattern$7,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$7,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$7,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$7,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$7,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$7,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$7,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$7,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Finnish locale.
 * @language Finnish
 * @iso-639-2 fin
 * @author Pyry-Samuli Lahti [@Pyppe]{@link https://github.com/Pyppe}
 * @author Edo Rivai [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Samu Juvonen [@sjuvonen]{@link https://github.com/sjuvonen}
 */

var locale$8 = {
  code: 'fi',
  formatDistance: formatDistance$7,
  formatLong: formatLong$8,
  formatRelative: formatRelative$7,
  localize: localize$7,
  match: match$7,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$8 = {
  lessThanXSeconds: {
    one: 'moins d’une seconde',
    other: 'moins de {{count}} secondes'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} secondes'
  },
  halfAMinute: '30 secondes',
  lessThanXMinutes: {
    one: 'moins d’une minute',
    other: 'moins de {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'environ 1 heure',
    other: 'environ {{count}} heures'
  },
  xHours: {
    one: '1 heure',
    other: '{{count}} heures'
  },
  xDays: {
    one: '1 jour',
    other: '{{count}} jours'
  },
  aboutXWeeks: {
    one: 'environ 1 semaine',
    other: 'environ {{count}} semaines'
  },
  xWeeks: {
    one: '1 semaine',
    other: '{{count}} semaines'
  },
  aboutXMonths: {
    one: 'environ 1 mois',
    other: 'environ {{count}} mois'
  },
  xMonths: {
    one: '1 mois',
    other: '{{count}} mois'
  },
  aboutXYears: {
    one: 'environ 1 an',
    other: 'environ {{count}} ans'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ans'
  },
  overXYears: {
    one: 'plus d’un an',
    other: 'plus de {{count}} ans'
  },
  almostXYears: {
    one: 'presqu’un an',
    other: 'presque {{count}} ans'
  }
};
function formatDistance$8(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$8[token] === 'string') {
    result = formatDistanceLocale$8[token];
  } else if (count === 1) {
    result = formatDistanceLocale$8[token].one;
  } else {
    result = formatDistanceLocale$8[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'dans ' + result;
    } else {
      return 'il y a ' + result;
    }
  }

  return result;
}

var dateFormats$9 = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$9 = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$9 = {
  full: "{{date}} 'à' {{time}}",
  long: "{{date}} 'à' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$9 = {
  date: buildFormatLongFn({
    formats: dateFormats$9,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$9,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$9,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$8 = {
  lastWeek: "eeee 'dernier à' p",
  yesterday: "'hier à' p",
  today: "'aujourd’hui à' p",
  tomorrow: "'demain à' p'",
  nextWeek: "eeee 'prochain à' p",
  other: 'P'
};
function formatRelative$8(token, _date, _baseDate, _options) {
  return formatRelativeLocale$8[token];
}

var eraValues$8 = {
  narrow: ['av. J.-C', 'ap. J.-C'],
  abbreviated: ['av. J.-C', 'ap. J.-C'],
  wide: ['avant Jésus-Christ', 'après Jésus-Christ']
};
var quarterValues$8 = {
  narrow: ['T1', 'T2', 'T3', 'T4'],
  abbreviated: ['1er trim.', '2ème trim.', '3ème trim.', '4ème trim.'],
  wide: ['1er trimestre', '2ème trimestre', '3ème trimestre', '4ème trimestre']
};
var monthValues$8 = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juil.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'],
  wide: ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre']
};
var dayValues$8 = {
  narrow: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  short: ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'],
  abbreviated: ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'],
  wide: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi']
};
var dayPeriodValues$8 = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'mat.',
    afternoon: 'ap.m.',
    evening: 'soir',
    night: 'mat.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'matin',
    afternoon: 'après-midi',
    evening: 'soir',
    night: 'matin'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'minuit',
    noon: 'midi',
    morning: 'du matin',
    afternoon: 'de l’après-midi',
    evening: 'du soir',
    night: 'du matin'
  }
};

function ordinalNumber$8(dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber);
  var options = dirtyOptions || {};
  var unit = String(options.unit);
  var suffix;

  if (number === 0) {
    return number;
  }

  if (unit === 'year' || unit === 'hour' || unit === 'week') {
    if (number === 1) {
      suffix = 'ère';
    } else {
      suffix = 'ème';
    }
  } else {
    if (number === 1) {
      suffix = 'er';
    } else {
      suffix = 'ème';
    }
  }

  return number + suffix;
}

var localize$8 = {
  ordinalNumber: ordinalNumber$8,
  era: buildLocalizeFn({
    values: eraValues$8,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$8,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$8,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$8,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$8,
    defaultWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$8 = /^(\d+)(ième|ère|ème|er|e)?/i;
var parseOrdinalNumberPattern$8 = /\d+/i;
var matchEraPatterns$8 = {
  narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
  abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
};
var parseEraPatterns$8 = {
  any: [/^av/i, /^ap/i]
};
var matchQuarterPatterns$8 = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](er|ème|e)? trimestre/i
};
var parseQuarterPatterns$8 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$8 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
  wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
};
var parseMonthPatterns$8 = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$8 = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|lu|ma|me|je|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
  wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
};
var parseDayPatterns$8 = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
};
var matchDayPeriodPatterns$8 = {
  narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
  any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
};
var parseDayPeriodPatterns$8 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /soir/i,
    night: /nuit/i
  }
};
var match$8 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$8,
    parsePattern: parseOrdinalNumberPattern$8,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$8,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$8,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$8,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$8,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$8,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$8,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$8,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary French locale.
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau]{@link https://github.com/izeau}
 * @author François B [@fbonzon]{@link https://github.com/fbonzon}
 */

var locale$9 = {
  code: 'fr',
  formatDistance: formatDistance$8,
  formatLong: formatLong$9,
  formatRelative: formatRelative$8,
  localize: localize$8,
  match: match$8,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

var numberValues = {
  locale: {
    '1': '१',
    '2': '२',
    '3': '३',
    '4': '४',
    '5': '५',
    '6': '६',
    '7': '७',
    '8': '८',
    '9': '९',
    '0': '०'
  },
  number: {
    '१': '1',
    '२': '2',
    '३': '3',
    '४': '4',
    '५': '5',
    '६': '6',
    '७': '7',
    '८': '8',
    '९': '9',
    '०': '0'
  } // CLDR #1585 - #1592

};
var eraValues$9 = {
  narrow: ['ईसा-पूर्व', 'ईस्वी'],
  abbreviated: ['ईसा-पूर्व', 'ईस्वी'],
  wide: ['ईसा-पूर्व', 'ईसवी सन'] // CLDR #1593 - #1616

};
var quarterValues$9 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['ति1', 'ति2', 'ति3', 'ति4'],
  wide: ['पहली तिमाही', 'दूसरी तिमाही', 'तीसरी तिमाही', 'चौथी तिमाही'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
  // https://www.unicode.org/cldr/charts/32/summary/hi.html
  // CLDR #1617 - #1688

};
var monthValues$9 = {
  narrow: ['ज', 'फ़', 'मा', 'अ', 'मई', 'जू', 'जु', 'अग', 'सि', 'अक्तू', 'न', 'दि'],
  abbreviated: ['जन', 'फ़र', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुल', 'अग', 'सित', 'अक्तू', 'नव', 'दिस'],
  wide: ['जनवरी', 'फ़रवरी', 'मार्च', 'अप्रैल', 'मई', 'जून', 'जुलाई', 'अगस्त', 'सितंबर', 'अक्तूबर', 'नवंबर', 'दिसंबर'] // CLDR #1689 - #1744

};
var dayValues$9 = {
  narrow: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
  short: ['र', 'सो', 'मं', 'बु', 'गु', 'शु', 'श'],
  abbreviated: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
  wide: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार']
};
var dayPeriodValues$9 = {
  narrow: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  abbreviated: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  wide: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  }
};
var formattingDayPeriodValues$6 = {
  narrow: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  abbreviated: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  },
  wide: {
    am: 'पूर्वाह्न',
    pm: 'अपराह्न',
    midnight: 'मध्यरात्रि',
    noon: 'दोपहर',
    morning: 'सुबह',
    afternoon: 'दोपहर',
    evening: 'शाम',
    night: 'रात'
  }
};

function ordinalNumber$9(dirtyNumber) {
  var number = localize$9.localeToNumber(dirtyNumber);
  var localeNumber = localize$9.numberToLocale(number);
  var rem10 = number % 10;

  switch (rem10) {
    case 2:
    case 3:
    case 4:
    case 6:
    case 1:
    case 5:
    case 7:
    case 8:
    case 9:
    case 0:
      return localeNumber;
  }
}

function localeToNumber(locale) {
  var number = locale.toString().replace(/[१२३४५६७८९०]/g, function (match) {
    return numberValues.number[match];
  });
  return Number(number);
}

function numberToLocale(number) {
  return number.toString().replace(/\d/g, function (match) {
    return numberValues.locale[match];
  });
}

var localize$9 = {
  localeToNumber: localeToNumber,
  numberToLocale: numberToLocale,
  ordinalNumber: ordinalNumber$9,
  era: buildLocalizeFn({
    values: eraValues$9,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$9,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$9,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$9,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$9,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$6,
    defaultFormattingWidth: 'wide'
  })
};

var formatDistanceLocale$9 = {
  lessThanXSeconds: {
    one: '१ सेकंड से कम',
    // CLDR #1310
    other: '{{count}} सेकंड से कम'
  },
  xSeconds: {
    one: '१ सेकंड',
    other: '{{count}} सेकंड'
  },
  halfAMinute: 'आधा मिनट',
  lessThanXMinutes: {
    one: '१ मिनट से कम',
    other: '{{count}} मिनट से कम'
  },
  xMinutes: {
    one: '१ मिनट',
    // CLDR #1307
    other: '{{count}} मिनट'
  },
  aboutXHours: {
    one: 'लगभग १ घंटा',
    other: 'लगभग {{count}} घंटे'
  },
  xHours: {
    one: '१ घंटा',
    // CLDR #1304
    other: '{{count}} घंटे' // CLDR #4467

  },
  xDays: {
    one: '१ दिन',
    // CLDR #1286
    other: '{{count}} दिन'
  },
  aboutXWeeks: {
    one: 'लगभग १ सप्ताह',
    other: 'लगभग {{count}} सप्ताह'
  },
  xWeeks: {
    one: '१ सप्ताह',
    other: '{{count}} सप्ताह'
  },
  aboutXMonths: {
    one: 'लगभग १ महीना',
    other: 'लगभग {{count}} महीने'
  },
  xMonths: {
    one: '१ महीना',
    other: '{{count}} महीने'
  },
  aboutXYears: {
    one: 'लगभग १ वर्ष',
    other: 'लगभग {{count}} वर्ष' // CLDR #4823

  },
  xYears: {
    one: '१ वर्ष',
    other: '{{count}} वर्ष'
  },
  overXYears: {
    one: '१ वर्ष से अधिक',
    other: '{{count}} वर्ष से अधिक'
  },
  almostXYears: {
    one: 'लगभग १ वर्ष',
    other: 'लगभग {{count}} वर्ष'
  }
};
function formatDistance$9(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$9[token] === 'string') {
    result = formatDistanceLocale$9[token];
  } else if (count === 1) {
    result = formatDistanceLocale$9[token].one;
  } else {
    result = formatDistanceLocale$9[token].other.replace('{{count}}', localize$9.numberToLocale(count));
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + 'मे ';
    } else {
      return result + ' पहले';
    }
  }

  return result;
}

var dateFormats$a = {
  full: 'EEEE, do MMMM, y',
  // CLDR #1787
  long: 'do MMMM, y',
  // CLDR #1788
  medium: 'd MMM, y',
  // CLDR #1789
  short: 'dd/MM/yyyy' // CLDR #1790

};
var timeFormats$a = {
  full: 'h:mm:ss a zzzz',
  // CLDR #1791
  long: 'h:mm:ss a z',
  // CLDR #1792
  medium: 'h:mm:ss a',
  // CLDR #1793
  short: 'h:mm a' // CLDR #1794

};
var dateTimeFormats$a = {
  full: "{{date}} 'को' {{time}}",
  // CLDR #1795
  long: "{{date}} 'को' {{time}}",
  // CLDR #1796
  medium: '{{date}}, {{time}}',
  // CLDR #1797
  short: '{{date}}, {{time}}' // CLDR #1798

};
var formatLong$a = {
  date: buildFormatLongFn({
    formats: dateFormats$a,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$a,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$a,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$9 = {
  lastWeek: "'पिछले' eeee p",
  yesterday: "'कल' p",
  today: "'आज' p",
  tomorrow: "'कल' p",
  nextWeek: "eeee 'को' p",
  other: 'P'
};
function formatRelative$9(token, _date, _baseDate, _options) {
  return formatRelativeLocale$9[token];
}

var matchOrdinalNumberPattern$9 = /^[०१२३४५६७८९]+/i;
var parseOrdinalNumberPattern$9 = /^[०१२३४५६७८९]+/i;
var matchEraPatterns$9 = {
  narrow: /^(ईसा-पूर्व|ईस्वी)/i,
  abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
  wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
};
var parseEraPatterns$9 = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns$9 = {
  narrow: /^[1234]/i,
  abbreviated: /^ति[1234]/i,
  wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
};
var parseQuarterPatterns$9 = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$9 = {
  narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
  abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
  wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
};
var parseMonthPatterns$9 = {
  narrow: [/^ज/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^न/i, /^दि/i],
  any: [/^जन/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^नव/i, /^दिस/i]
};
var matchDayPatterns$9 = {
  narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
  short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
};
var parseDayPatterns$9 = {
  narrow: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i],
  any: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i]
};
var matchDayPeriodPatterns$9 = {
  narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
  any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
};
var parseDayPeriodPatterns$9 = {
  any: {
    am: /^पूर्वाह्न/i,
    pm: /^अपराह्न/i,
    midnight: /^मध्य/i,
    noon: /^दो/i,
    morning: /सु/i,
    afternoon: /दो/i,
    evening: /शा/i,
    night: /रा/i
  }
};
var match$9 = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$9,
    parsePattern: parseOrdinalNumberPattern$9,
    valueCallback: localize$9.localeToNumber
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$9,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$9,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$9,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$9,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$9,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$9,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$9,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Hindi locale (India).
 * @language Hindi
 * @iso-639-2 hin
 * @author Mukesh Mandiwal [@mukeshmandiwal]{@link https://github.com/mukeshmandiwal}
 */

var locale$a = {
  code: 'hi',
  formatDistance: formatDistance$9,
  formatLong: formatLong$a,
  formatRelative: formatRelative$9,
  localize: localize$9,
  match: match$9,
  options: {
    weekStartsOn: 0
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var _xseconds, _halfaminute, _xminutes, _xhours, _xdays, _xweeks, _xmonths, _xyears;

var translations = {
  about: 'körülbelül',
  over: 'több mint',
  almost: 'majdnem',
  lessthan: 'kevesebb mint'
};
var withoutSuffixes = {
  xseconds: ' másodperc',
  halfaminute: 'fél perc',
  xminutes: ' perc',
  xhours: ' óra',
  xdays: ' nap',
  xweeks: ' hét',
  xmonths: ' hónap',
  xyears: ' év'
};
var withSuffixes = {
  xseconds: (_xseconds = {}, _defineProperty(_xseconds, -1, ' másodperccel ezelőtt'), _defineProperty(_xseconds, 1, ' másodperc múlva'), _defineProperty(_xseconds, 0, ' másodperce'), _xseconds),
  halfaminute: (_halfaminute = {}, _defineProperty(_halfaminute, -1, 'fél perccel ezelőtt'), _defineProperty(_halfaminute, 1, 'fél perc múlva'), _defineProperty(_halfaminute, 0, 'fél perce'), _halfaminute),
  xminutes: (_xminutes = {}, _defineProperty(_xminutes, -1, ' perccel ezelőtt'), _defineProperty(_xminutes, 1, ' perc múlva'), _defineProperty(_xminutes, 0, ' perce'), _xminutes),
  xhours: (_xhours = {}, _defineProperty(_xhours, -1, ' órával ezelőtt'), _defineProperty(_xhours, 1, ' óra múlva'), _defineProperty(_xhours, 0, ' órája'), _xhours),
  xdays: (_xdays = {}, _defineProperty(_xdays, -1, ' nappal ezelőtt'), _defineProperty(_xdays, 1, ' nap múlva'), _defineProperty(_xdays, 0, ' napja'), _xdays),
  xweeks: (_xweeks = {}, _defineProperty(_xweeks, -1, ' héttel ezelőtt'), _defineProperty(_xweeks, 1, ' hét múlva'), _defineProperty(_xweeks, 0, ' hete'), _xweeks),
  xmonths: (_xmonths = {}, _defineProperty(_xmonths, -1, ' hónappal ezelőtt'), _defineProperty(_xmonths, 1, ' hónap múlva'), _defineProperty(_xmonths, 0, ' hónapja'), _xmonths),
  xyears: (_xyears = {}, _defineProperty(_xyears, -1, ' évvel ezelőtt'), _defineProperty(_xyears, 1, ' év múlva'), _defineProperty(_xyears, 0, ' éve'), _xyears)
};

function translate(number, addSuffix, key, comparison) {
  var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];

  if (key === 'halfaminute') {
    return translated;
  }

  return number + translated;
}

function formatDistance$a(token, count, options) {
  options = options || {};
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = token.replace(adverb, '');
  var result;
  result = translate(count, options.addSuffix, unit.toLowerCase(), options.comparison);

  if (adverb) {
    result = translations[adverb[0].toLowerCase()] + ' ' + result;
  }

  return result;
}

var dateFormats$b = {
  full: 'y. MMMM d., EEEE',
  long: 'y. MMMM d.',
  medium: 'y. MMM d.',
  short: 'y. MM. dd.'
};
var timeFormats$b = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$b = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$b = {
  date: buildFormatLongFn({
    formats: dateFormats$b,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$b,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$b,
    defaultWidth: 'full'
  })
};

var accusativeWeekdays$1 = ['vasárnap', 'hétfőn', 'kedden', 'szerdán', 'csütörtökön', 'pénteken', 'szombaton'];

function week(isFuture) {
  return function (date, _baseDate, _options) {
    var day = date.getUTCDay();
    return (isFuture ? '' : "'múlt' ") + "'" + accusativeWeekdays$1[day] + "'" + " p'-kor'";
  };
}

var formatRelativeLocale$a = {
  lastWeek: week(false),
  yesterday: "'tegnap' p'-kor'",
  today: "'ma' p'-kor'",
  tomorrow: "'holnap' p'-kor'",
  nextWeek: week(true),
  other: 'P'
};
function formatRelative$a(token, date, baseDate, options) {
  var format = formatRelativeLocale$a[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$a = {
  narrow: ['ie.', 'isz.'],
  abbreviated: ['i. e.', 'i. sz.'],
  wide: ['Krisztus előtt', 'időszámításunk szerint']
};
var quarterValues$a = {
  narrow: ['1.', '2.', '3.', '4.'],
  abbreviated: ['1. n.év', '2. n.év', '3. n.év', '4. n.év'],
  wide: ['1. negyedév', '2. negyedév', '3. negyedév', '4. negyedév']
};
var formattingQuarterValues = {
  narrow: ['I.', 'II.', 'III.', 'IV.'],
  abbreviated: ['I. n.év', 'II. n.év', 'III. n.év', 'IV. n.év'],
  wide: ['I. negyedév', 'II. negyedév', 'III. negyedév', 'IV. negyedév']
};
var monthValues$a = {
  narrow: ['J', 'F', 'M', 'Á', 'M', 'J', 'J', 'A', 'Sz', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'febr.', 'márc.', 'ápr.', 'máj.', 'jún.', 'júl.', 'aug.', 'szept.', 'okt.', 'nov.', 'dec.'],
  wide: ['január', 'február', 'március', 'április', 'május', 'június', 'július', 'augusztus', 'szeptember', 'október', 'november', 'december']
};
var dayValues$a = {
  narrow: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
  short: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  abbreviated: ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'],
  wide: ['vasárnap', 'hétfő', 'kedd', 'szerda', 'csütörtök', 'péntek', 'szombat']
};
var dayPeriodValues$a = {
  narrow: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: 'éjjel'
  },
  abbreviated: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'du.',
    evening: 'este',
    night: 'éjjel'
  },
  wide: {
    am: 'de.',
    pm: 'du.',
    midnight: 'éjfél',
    noon: 'dél',
    morning: 'reggel',
    afternoon: 'délután',
    evening: 'este',
    night: 'éjjel'
  }
};

function ordinalNumber$a(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$a = {
  ordinalNumber: ordinalNumber$a,
  era: buildLocalizeFn({
    values: eraValues$a,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$a,
    defaultWidth: 'wide',
    formattingValues: formattingQuarterValues,
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$a,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$a,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$a,
    defaultWidth: 'wide',
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$a = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$a = /\d+/i;
var matchEraPatterns$a = {
  narrow: /^(ie\.|isz\.)/i,
  abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
  wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
};
var parseEraPatterns$a = {
  narrow: [/ie/i, /isz/i],
  abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
  any: [/előtt/i, /(szerint|i. sz.)/i]
};
var matchQuarterPatterns$a = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^[1234]?\.?\s?n\.év/i,
  wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
};
var parseQuarterPatterns$a = {
  any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
};
var matchMonthPatterns$a = {
  narrow: /^[jfmaásond]|sz/i,
  abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
  wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
};
var parseMonthPatterns$a = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a|á/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^már/i, /^áp/i, /^máj/i, /^jún/i, /^júl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$a = {
  narrow: /^([vhkpc]|sz|cs|sz)/i,
  short: /^([vhkp]|sze|cs|szo)/i,
  abbreviated: /^([vhkp]|sze|cs|szo)/i,
  wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
};
var parseDayPatterns$a = {
  narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
  any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
};
var matchDayPeriodPatterns$a = {
  any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
};
var parseDayPeriodPatterns$a = {
  any: {
    am: /^de\.?/i,
    pm: /^du\.?/i,
    midnight: /^éjf/i,
    noon: /^dé/i,
    morning: /reg/i,
    afternoon: /^délu\.?/i,
    evening: /es/i,
    night: /éjj/i
  }
};
var match$a = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$a,
    parsePattern: parseOrdinalNumberPattern$a,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$a,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$a,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$a,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$a,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$a,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$a,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$a,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 *
 * @summary Hungarian locale.
 * @language Hungarian
 *
 * @iso-639-2 hun
 *
 * @author Pavlo Shpak [@pshpak]{@link https://github.com/pshpak}
 * @author Eduardo Pardo [@eduardopsll]{@link https://github.com/eduardopsll}
 * @author Zoltan Szepesi [@twodcube]{@link https://github.com/twodcube}
 */

var locale$b = {
  code: 'hu',
  formatDistance: formatDistance$a,
  formatLong: formatLong$b,
  formatRelative: formatRelative$a,
  localize: localize$a,
  match: match$a,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$a = {
  lessThanXSeconds: {
    one: 'kurang dari 1 detik',
    other: 'kurang dari {{count}} detik'
  },
  xSeconds: {
    one: '1 detik',
    other: '{{count}} detik'
  },
  halfAMinute: 'setengah menit',
  lessThanXMinutes: {
    one: 'kurang dari 1 menit',
    other: 'kurang dari {{count}} menit'
  },
  xMinutes: {
    one: '1 menit',
    other: '{{count}} menit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
function formatDistance$b(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$a[token] === 'string') {
    result = formatDistanceLocale$a[token];
  } else if (count === 1) {
    result = formatDistanceLocale$a[token].one;
  } else {
    result = formatDistanceLocale$a[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'dalam waktu ' + result;
    } else {
      return result + ' yang lalu';
    }
  }

  return result;
}

var dateFormats$c = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var timeFormats$c = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var dateTimeFormats$c = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$c = {
  date: buildFormatLongFn({
    formats: dateFormats$c,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$c,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$c,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$b = {
  lastWeek: "eeee 'lalu pukul' p",
  yesterday: "'Kemarin pukul' p",
  today: "'Hari ini pukul' p",
  tomorrow: "'Besok pukul' p",
  nextWeek: "eeee 'pukul' p",
  other: 'P'
};
function formatRelative$b(token, _date, _baseDate, _options) {
  return formatRelativeLocale$b[token];
}

// https://www.unicode.org/cldr/charts/32/summary/id.html

var eraValues$b = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masehi', 'Masehi']
};
var quarterValues$b = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['Kuartal ke-1', 'Kuartal ke-2', 'Kuartal ke-3', 'Kuartal ke-4'] // Note: in Indonesian, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues$b = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Ags', 'Sep', 'Okt', 'Nov', 'Des'],
  wide: ['Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni', 'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember']
};
var dayValues$b = {
  narrow: ['M', 'S', 'S', 'R', 'K', 'J', 'S'],
  short: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  abbreviated: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
  wide: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu']
};
var dayPeriodValues$b = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};
var formattingDayPeriodValues$7 = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'siang',
    evening: 'sore',
    night: 'malam'
  }
};

function ordinalNumber$b(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // Can't use "pertama", "kedua" because can't be parsed

  switch (number) {
    default:
      return 'ke-' + number;
  }
}

var localize$b = {
  ordinalNumber: ordinalNumber$b,
  era: buildLocalizeFn({
    values: eraValues$b,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$b,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$b,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$b,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$b,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$7,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$b = /^ke-(\d+)?/i;
var parseOrdinalNumberPattern$b = /\d+/i;
var matchEraPatterns$b = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
  wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
};
var parseEraPatterns$b = {
  any: [/^s/i, /^(m|e)/i]
};
var matchQuarterPatterns$b = {
  narrow: /^[1234]/i,
  abbreviated: /^K-?\s[1234]/i,
  wide: /^Kuartal ke-?\s?[1234]/i
};
var parseQuarterPatterns$b = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$b = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
  wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
};
var parseMonthPatterns$b = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$b = {
  narrow: /^[srkjm]/i,
  short: /^(min|sen|sel|rab|kam|jum|sab)/i,
  abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
  wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
};
var parseDayPatterns$b = {
  narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var matchDayPeriodPatterns$b = {
  narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
};
var parseDayPeriodPatterns$b = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pagi/i,
    afternoon: /siang/i,
    evening: /sore/i,
    night: /malam/i
  }
};
var match$b = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$b,
    parsePattern: parseOrdinalNumberPattern$b,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$b,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$b,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$b,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$b,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$b,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$b,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$b,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Indonesian locale.
 * @language Indonesian
 * @iso-639-2 ind
 * @author Rahmat Budiharso [@rbudiharso]{@link https://github.com/rbudiharso}
 * @author Benget Nata [@bentinata]{@link https://github.com/bentinata}
 * @author Budi Irawan [@deerawan]{@link https://github.com/deerawan}
 * @author Try Ajitiono [@imballinst]{@link https://github.com/imballinst}
 */

var locale$c = {
  code: 'id',
  formatDistance: formatDistance$b,
  formatLong: formatLong$c,
  formatRelative: formatRelative$b,
  localize: localize$b,
  match: match$b,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$b = {
  lessThanXSeconds: {
    one: 'meno di un secondo',
    other: 'meno di {{count}} secondi'
  },
  xSeconds: {
    one: 'un secondo',
    other: '{{count}} secondi'
  },
  halfAMinute: 'alcuni secondi',
  lessThanXMinutes: {
    one: 'meno di un minuto',
    other: 'meno di {{count}} minuti'
  },
  xMinutes: {
    one: 'un minuto',
    other: '{{count}} minuti'
  },
  aboutXHours: {
    one: "circa un'ora",
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: "un'ora",
    other: '{{count}} ore'
  },
  xDays: {
    one: 'un giorno',
    other: '{{count}} giorni'
  },
  aboutXWeeks: {
    one: 'circa una settimana',
    other: 'circa {{count}} settimane'
  },
  xWeeks: {
    one: 'una settimana',
    other: '{{count}} settimane'
  },
  aboutXMonths: {
    one: 'circa un mese',
    other: 'circa {{count}} mesi'
  },
  xMonths: {
    one: 'un mese',
    other: '{{count}} mesi'
  },
  aboutXYears: {
    one: 'circa un anno',
    other: 'circa {{count}} anni'
  },
  xYears: {
    one: 'un anno',
    other: '{{count}} anni'
  },
  overXYears: {
    one: 'più di un anno',
    other: 'più di {{count}} anni'
  },
  almostXYears: {
    one: 'quasi un anno',
    other: 'quasi {{count}} anni'
  }
};
function formatDistance$c(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$b[token] === 'string') {
    result = formatDistanceLocale$b[token];
  } else if (count === 1) {
    result = formatDistanceLocale$b[token].one;
  } else {
    result = formatDistanceLocale$b[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'tra ' + result;
    } else {
      return result + ' fa';
    }
  }

  return result;
}

var dateFormats$d = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/y'
};
var timeFormats$d = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$d = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$d = {
  date: buildFormatLongFn({
    formats: dateFormats$d,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$d,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$d,
    defaultWidth: 'full'
  })
};

var weekdays = ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato'];

function _lastWeek(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";

    default:
      return "'" + weekdays[day] + " scorso alle' p";
  }
}

function thisWeek(day) {
  return "'" + weekdays[day] + " alle' p";
}

function _nextWeek(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";

    default:
      return "'" + weekdays[day] + " prossimo alle' p";
  }
}

var formatRelativeLocale$c = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek(day);
    } else {
      return _lastWeek(day);
    }
  },
  yesterday: "'ieri alle' p",
  today: "'oggi alle' p",
  tomorrow: "'domani alle' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek(day);
    } else {
      return _nextWeek(day);
    }
  },
  other: 'P'
};
function formatRelative$c(token, date, baseDate, options) {
  var format = formatRelativeLocale$c[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$c = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['avanti Cristo', 'dopo Cristo']
};
var quarterValues$c = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$c = {
  narrow: ['G', 'F', 'M', 'A', 'M', 'G', 'L', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['gen', 'feb', 'mar', 'apr', 'mag', 'giu', 'lug', 'ago', 'set', 'ott', 'nov', 'dic'],
  wide: ['gennaio', 'febbraio', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre']
};
var dayValues$c = {
  narrow: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
  short: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  abbreviated: ['dom', 'lun', 'mar', 'mer', 'gio', 'ven', 'sab'],
  wide: ['domenica', 'lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato']
};
var dayPeriodValues$c = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'mattina',
    afternoon: 'pomeriggio',
    evening: 'sera',
    night: 'notte'
  }
};
var formattingDayPeriodValues$8 = {
  narrow: {
    am: 'm.',
    pm: 'p.',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'mezzanotte',
    noon: 'mezzogiorno',
    morning: 'di mattina',
    afternoon: 'del pomeriggio',
    evening: 'di sera',
    night: 'di notte'
  }
};

function ordinalNumber$c(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + 'º';
}

var localize$c = {
  ordinalNumber: ordinalNumber$c,
  era: buildLocalizeFn({
    values: eraValues$c,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$c,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$c,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$c,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$c,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$8,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$c = /^(\d+)(º)?/i;
var parseOrdinalNumberPattern$c = /\d+/i;
var matchEraPatterns$c = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
  wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
};
var parseEraPatterns$c = {
  any: [/^a/i, /^(d|e)/i]
};
var matchQuarterPatterns$c = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$c = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$c = {
  narrow: /^[gfmalsond]/i,
  abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
  wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
};
var parseMonthPatterns$c = {
  narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$c = {
  narrow: /^[dlmgvs]/i,
  short: /^(do|lu|ma|me|gi|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
  wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
};
var parseDayPatterns$c = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
};
var matchDayPeriodPatterns$c = {
  narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
  any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
};
var parseDayPeriodPatterns$c = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mezza/i,
    noon: /^mezzo/i,
    morning: /mattina/i,
    afternoon: /pomeriggio/i,
    evening: /sera/i,
    night: /notte/i
  }
};
var match$c = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$c,
    parsePattern: parseOrdinalNumberPattern$c,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$c,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$c,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$c,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$c,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$c,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$c,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$c,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Italian locale.
 * @language Italian
 * @iso-639-2 ita
 * @author Alberto Restifo [@albertorestifo]{@link https://github.com/albertorestifo}
 * @author Giovanni Polimeni [@giofilo]{@link https://github.com/giofilo}
 * @author Vincenzo Carrese [@vin-car]{@link https://github.com/vin-car}
 */

var locale$d = {
  code: 'it',
  formatDistance: formatDistance$c,
  formatLong: formatLong$d,
  formatRelative: formatRelative$c,
  localize: localize$c,
  match: match$c,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$c = {
  lessThanXSeconds: {
    one: '1秒未満',
    other: '{{count}}秒未満',
    oneWithSuffix: '約1秒',
    otherWithSuffix: '約{{count}}秒'
  },
  xSeconds: {
    one: '1秒',
    other: '{{count}}秒'
  },
  halfAMinute: '30秒',
  lessThanXMinutes: {
    one: '1分未満',
    other: '{{count}}分未満',
    oneWithSuffix: '約1分',
    otherWithSuffix: '約{{count}}分'
  },
  xMinutes: {
    one: '1分',
    other: '{{count}}分'
  },
  aboutXHours: {
    one: '約1時間',
    other: '約{{count}}時間'
  },
  xHours: {
    one: '1時間',
    other: '{{count}}時間'
  },
  xDays: {
    one: '1日',
    other: '{{count}}日'
  },
  aboutXWeeks: {
    one: '約1週間',
    other: '約{{count}}週間'
  },
  xWeeks: {
    one: '1週間',
    other: '{{count}}週間'
  },
  aboutXMonths: {
    one: '約1か月',
    other: '約{{count}}か月'
  },
  xMonths: {
    one: '1か月',
    other: '{{count}}か月'
  },
  aboutXYears: {
    one: '約1年',
    other: '約{{count}}年'
  },
  xYears: {
    one: '1年',
    other: '{{count}}年'
  },
  overXYears: {
    one: '1年以上',
    other: '{{count}}年以上'
  },
  almostXYears: {
    one: '1年近く',
    other: '{{count}}年近く'
  }
};
function formatDistance$d(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$c[token] === 'string') {
    result = formatDistanceLocale$c[token];
  } else if (count === 1) {
    if (options.addSuffix && formatDistanceLocale$c[token].oneWithSuffix) {
      result = formatDistanceLocale$c[token].oneWithSuffix;
    } else {
      result = formatDistanceLocale$c[token].one;
    }
  } else {
    if (options.addSuffix && formatDistanceLocale$c[token].otherWithSuffix) {
      result = formatDistanceLocale$c[token].otherWithSuffix.replace('{{count}}', count);
    } else {
      result = formatDistanceLocale$c[token].other.replace('{{count}}', count);
    }
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + '後';
    } else {
      return result + '前';
    }
  }

  return result;
}

var dateFormats$e = {
  full: 'y年M月d日EEEE',
  long: 'y年M月d日',
  medium: 'y/MM/dd',
  short: 'y/MM/dd'
};
var timeFormats$e = {
  full: 'H時mm分ss秒 zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$e = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$e = {
  date: buildFormatLongFn({
    formats: dateFormats$e,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$e,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$e,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$d = {
  lastWeek: '先週のeeeeのp',
  yesterday: '昨日のp',
  today: '今日のp',
  tomorrow: '明日のp',
  nextWeek: '翌週のeeeeのp',
  other: 'P'
};
function formatRelative$d(token, _date, _baseDate, _options) {
  return formatRelativeLocale$d[token];
}

var eraValues$d = {
  narrow: ['BC', 'AC'],
  abbreviated: ['紀元前', '西暦'],
  wide: ['紀元前', '西暦']
};
var quarterValues$d = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['第1四半期', '第2四半期', '第3四半期', '第4四半期']
};
var monthValues$d = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月']
};
var dayValues$d = {
  narrow: ['日', '月', '火', '水', '木', '金', '土'],
  short: ['日', '月', '火', '水', '木', '金', '土'],
  abbreviated: ['日', '月', '火', '水', '木', '金', '土'],
  wide: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日']
};
var dayPeriodValues$d = {
  narrow: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  abbreviated: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  wide: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  }
};
var formattingDayPeriodValues$9 = {
  narrow: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  abbreviated: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  },
  wide: {
    am: '午前',
    pm: '午後',
    midnight: '深夜',
    noon: '正午',
    morning: '朝',
    afternoon: '午後',
    evening: '夜',
    night: '深夜'
  }
};

function ordinalNumber$d(dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var options = dirtyOptions || {};
  var unit = String(options.unit);

  if (unit === 'date') {
    return number + '日';
  }

  return number;
}

var localize$d = {
  ordinalNumber: ordinalNumber$d,
  era: buildLocalizeFn({
    values: eraValues$d,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$d,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$d,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$d,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$d,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$9,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$d = /^第?\d+(日)?/i;
var parseOrdinalNumberPattern$d = /\d+/i;
var matchEraPatterns$d = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(紀元[前後]|西暦)/i,
  wide: /^(紀元[前後]|西暦)/i
};
var parseEraPatterns$d = {
  narrow: [/^B/i, /^A/i],
  any: [/^(紀元前)/i, /^(西暦|紀元後)/i]
};
var matchQuarterPatterns$d = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^第[1234一二三四１２３４]四半期/i
};
var parseQuarterPatterns$d = {
  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
};
var matchMonthPatterns$d = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])月/i,
  wide: /^([123456789]|1[012])月/i
};
var parseMonthPatterns$d = {
  any: [/^1/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var matchDayPatterns$d = {
  narrow: /^[日月火水木金土]/,
  short: /^[日月火水木金土]/,
  abbreviated: /^[日月火水木金土]/,
  wide: /^[日月火水木金土]曜日/
};
var parseDayPatterns$d = {
  any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]
};
var matchDayPeriodPatterns$d = {
  any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
};
var parseDayPeriodPatterns$d = {
  any: {
    am: /^(A|午前)/i,
    pm: /^(P|午後)/i,
    midnight: /^深夜|真夜中/i,
    noon: /^正午/i,
    morning: /^朝/i,
    afternoon: /^午後/i,
    evening: /^夜/i,
    night: /^深夜/i
  }
};
var match$d = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$d,
    parsePattern: parseOrdinalNumberPattern$d,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$d,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$d,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$d,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$d,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$d,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$d,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$d,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Japanese locale.
 * @language Japanese
 * @iso-639-2 jpn
 * @author Thomas Eilmsteiner [@DeMuu]{@link https://github.com/DeMuu}
 * @author Yamagishi Kazutoshi [@ykzts]{@link https://github.com/ykzts}
 * @author Luca Ban [@mesqueeb]{@link https://github.com/mesqueeb}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */

var locale$e = {
  code: 'ja',
  formatDistance: formatDistance$d,
  formatLong: formatLong$e,
  formatRelative: formatRelative$d,
  localize: localize$d,
  match: match$d,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$d = {
  lessThanXSeconds: {
    one: '1초 미만',
    other: '{{count}}초 미만'
  },
  xSeconds: {
    one: '1초',
    other: '{{count}}초'
  },
  halfAMinute: '30초',
  lessThanXMinutes: {
    one: '1분 미만',
    other: '{{count}}분 미만'
  },
  xMinutes: {
    one: '1분',
    other: '{{count}}분'
  },
  aboutXHours: {
    one: '약 1시간',
    other: '약 {{count}}시간'
  },
  xHours: {
    one: '1시간',
    other: '{{count}}시간'
  },
  xDays: {
    one: '1일',
    other: '{{count}}일'
  },
  aboutXWeeks: {
    one: '약 1주',
    other: '약 {{count}}주'
  },
  xWeeks: {
    one: '1주',
    other: '{{count}}주'
  },
  aboutXMonths: {
    one: '약 1개월',
    other: '약 {{count}}개월'
  },
  xMonths: {
    one: '1개월',
    other: '{{count}}개월'
  },
  aboutXYears: {
    one: '약 1년',
    other: '약 {{count}}년'
  },
  xYears: {
    one: '1년',
    other: '{{count}}년'
  },
  overXYears: {
    one: '1년 이상',
    other: '{{count}}년 이상'
  },
  almostXYears: {
    one: '거의 1년',
    other: '거의 {{count}}년'
  }
};
function formatDistance$e(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$d[token] === 'string') {
    result = formatDistanceLocale$d[token];
  } else if (count === 1) {
    result = formatDistanceLocale$d[token].one;
  } else {
    result = formatDistanceLocale$d[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + ' 후';
    } else {
      return result + ' 전';
    }
  }

  return result;
}

var dateFormats$f = {
  full: 'y년 M월 d일 EEEE',
  long: 'y년 M월 d일',
  medium: 'y.MM.dd',
  short: 'y.MM.dd'
};
var timeFormats$f = {
  full: 'a H시 mm분 ss초 zzzz',
  long: 'a H:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$f = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$f = {
  date: buildFormatLongFn({
    formats: dateFormats$f,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$f,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$f,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$e = {
  lastWeek: "'지난' eeee p",
  yesterday: "'어제' p",
  today: "'오늘' p",
  tomorrow: "'내일' p",
  nextWeek: "'다음' eeee p",
  other: 'P'
};
function formatRelative$e(token, _date, _baseDate, _options) {
  return formatRelativeLocale$e[token];
}

var eraValues$e = {
  narrow: ['BC', 'AD'],
  abbreviated: ['BC', 'AD'],
  wide: ['기원전', '서기']
};
var quarterValues$e = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1분기', '2분기', '3분기', '4분기']
};
var monthValues$e = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
  wide: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']
};
var dayValues$e = {
  narrow: ['일', '월', '화', '수', '목', '금', '토'],
  short: ['일', '월', '화', '수', '목', '금', '토'],
  abbreviated: ['일', '월', '화', '수', '목', '금', '토'],
  wide: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일']
};
var dayPeriodValues$e = {
  narrow: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  abbreviated: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  wide: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  }
};
var formattingDayPeriodValues$a = {
  narrow: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  abbreviated: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  },
  wide: {
    am: '오전',
    pm: '오후',
    midnight: '자정',
    noon: '정오',
    morning: '아침',
    afternoon: '오후',
    evening: '저녁',
    night: '밤'
  }
};

function ordinalNumber$e(dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber);
  var options = dirtyOptions || {};
  var unit = String(options.unit);

  switch (unit) {
    case 'minute':
    case 'second':
      return number;

    case 'date':
      return number + '일';

    default:
      return number + '번째';
  }
}

var localize$e = {
  ordinalNumber: ordinalNumber$e,
  era: buildLocalizeFn({
    values: eraValues$e,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$e,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$e,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$e,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$e,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$a,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$e = /^(\d+)(일|번째)?/i;
var parseOrdinalNumberPattern$e = /\d+/i;
var matchEraPatterns$e = {
  narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(기원전|서기)/i
};
var parseEraPatterns$e = {
  any: [/^(bc|기원전)/i, /^(ad|서기)/i]
};
var matchQuarterPatterns$e = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]사?분기/i
};
var parseQuarterPatterns$e = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$e = {
  narrow: /^(1[012]|[123456789])/,
  abbreviated: /^(1[012]|[123456789])월/i,
  wide: /^(1[012]|[123456789])월/i
};
var parseMonthPatterns$e = {
  any: [/^1월?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var matchDayPatterns$e = {
  narrow: /^[일월화수목금토]/,
  short: /^[일월화수목금토]/,
  abbreviated: /^[일월화수목금토]/,
  wide: /^[일월화수목금토]요일/
};
var parseDayPatterns$e = {
  any: [/^일/, /^월/, /^화/, /^수/, /^목/, /^금/, /^토/]
};
var matchDayPeriodPatterns$e = {
  any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
};
var parseDayPeriodPatterns$e = {
  any: {
    am: /^(am|오전)/i,
    pm: /^(pm|오후)/i,
    midnight: /^자정/i,
    noon: /^정오/i,
    morning: /^아침/i,
    afternoon: /^오후/i,
    evening: /^저녁/i,
    night: /^밤/i
  }
};
var match$e = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$e,
    parsePattern: parseOrdinalNumberPattern$e,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$e,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$e,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$e,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$e,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$e,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$e,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$e,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Korean locale.
 * @language Korean
 * @iso-639-2 kor
 * @author Hong Chulju [@angdev]{@link https://github.com/angdev}
 * @author Lee Seoyoen [@iamssen]{@link https://github.com/iamssen}
 * @author Taiki IKeda [@so99ynoodles]{@link https://github.com/so99ynoodles}
 */

var locale$f = {
  code: 'ko',
  formatDistance: formatDistance$e,
  formatLong: formatLong$f,
  formatRelative: formatRelative$e,
  localize: localize$e,
  match: match$e,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$e = {
  lessThanXSeconds: {
    one: 'kurang dari 1 saat',
    other: 'kurang dari {{count}} saat'
  },
  xSeconds: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  halfAMinute: 'setengah minit',
  lessThanXMinutes: {
    one: 'kurang dari 1 minit',
    other: 'kurang dari {{count}} minit'
  },
  xMinutes: {
    one: '1 minit',
    other: '{{count}} minit'
  },
  aboutXHours: {
    one: 'sekitar 1 jam',
    other: 'sekitar {{count}} jam'
  },
  xHours: {
    one: '1 jam',
    other: '{{count}} jam'
  },
  xDays: {
    one: '1 hari',
    other: '{{count}} hari'
  },
  aboutXWeeks: {
    one: 'sekitar 1 minggu',
    other: 'sekitar {{count}} minggu'
  },
  xWeeks: {
    one: '1 minggu',
    other: '{{count}} minggu'
  },
  aboutXMonths: {
    one: 'sekitar 1 bulan',
    other: 'sekitar {{count}} bulan'
  },
  xMonths: {
    one: '1 bulan',
    other: '{{count}} bulan'
  },
  aboutXYears: {
    one: 'sekitar 1 tahun',
    other: 'sekitar {{count}} tahun'
  },
  xYears: {
    one: '1 tahun',
    other: '{{count}} tahun'
  },
  overXYears: {
    one: 'lebih dari 1 tahun',
    other: 'lebih dari {{count}} tahun'
  },
  almostXYears: {
    one: 'hampir 1 tahun',
    other: 'hampir {{count}} tahun'
  }
};
function formatDistance$f(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$e[token] === 'string') {
    result = formatDistanceLocale$e[token];
  } else if (count === 1) {
    result = formatDistanceLocale$e[token].one;
  } else {
    result = formatDistanceLocale$e[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'dalam masa ' + result;
    } else {
      return result + ' yang lalu';
    }
  }

  return result;
}

var dateFormats$g = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'd/M/yyyy'
};
var timeFormats$g = {
  full: 'HH.mm.ss',
  long: 'HH.mm.ss',
  medium: 'HH.mm',
  short: 'HH.mm'
};
var dateTimeFormats$g = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$g = {
  date: buildFormatLongFn({
    formats: dateFormats$g,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$g,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$g,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$f = {
  lastWeek: "eeee 'lepas pada jam' p",
  yesterday: "'Semalam pada jam' p",
  today: "'Hari ini pada jam' p",
  tomorrow: "'Esok pada jam' p",
  nextWeek: "eeee 'pada jam' p",
  other: 'P'
};
function formatRelative$f(token, _date, _baseDate, _options) {
  return formatRelativeLocale$f[token];
}

// https://www.unicode.org/cldr/charts/32/summary/ms.html

var eraValues$f = {
  narrow: ['SM', 'M'],
  abbreviated: ['SM', 'M'],
  wide: ['Sebelum Masihi', 'Masihi']
};
var quarterValues$f = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['S1', 'S2', 'S3', 'S4'],
  wide: ['Suku pertama', 'Suku kedua', 'Suku ketiga', 'Suku keempat'] // Note: in Malay, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues$f = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'O', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogo', 'Sep', 'Okt', 'Nov', 'Dis'],
  wide: ['Januari', 'Februari', 'Mac', 'April', 'Mei', 'Jun', 'Julai', 'Ogos', 'September', 'Oktober', 'November', 'Disember']
};
var dayValues$f = {
  narrow: ['A', 'I', 'S', 'R', 'K', 'J', 'S'],
  short: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  abbreviated: ['Ahd', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
  wide: ['Ahad', 'Isnin', 'Selasa', 'Rabu', 'Khamis', 'Jumaat', 'Sabtu']
};
var dayPeriodValues$f = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tgh malam',
    noon: 'tgh hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};
var formattingDayPeriodValues$b = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'tengah malam',
    noon: 'tengah hari',
    morning: 'pagi',
    afternoon: 'tengah hari',
    evening: 'petang',
    night: 'malam'
  }
};

function ordinalNumber$f(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // Can't use "pertama", "kedua" because can't be parsed

  switch (number) {
    default:
      return 'ke-' + number;
  }
}

var localize$f = {
  ordinalNumber: ordinalNumber$f,
  era: buildLocalizeFn({
    values: eraValues$f,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$f,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$f,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$f,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$f,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$b,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$f = /^ke-(\d+)?/i;
var parseOrdinalNumberPattern$f = /petama|\d+/i;
var matchEraPatterns$f = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
  wide: /^(sebelum masihi|masihi)/i
};
var parseEraPatterns$f = {
  any: [/^s/i, /^(m)/i]
};
var matchQuarterPatterns$f = {
  narrow: /^[1234]/i,
  abbreviated: /^S[1234]/i,
  wide: /Suku (pertama|kedua|ketiga|keempat)/i
};
var parseQuarterPatterns$f = {
  any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
};
var matchMonthPatterns$f = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
  wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
};
var parseMonthPatterns$f = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var matchDayPatterns$f = {
  narrow: /^[aisrkj]/i,
  short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
};
var parseDayPatterns$f = {
  narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var matchDayPeriodPatterns$f = {
  narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
};
var parseDayPeriodPatterns$f = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pa/i,
    afternoon: /tengah h/i,
    evening: /pe/i,
    night: /m/i
  }
};
var match$f = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$f,
    parsePattern: parseOrdinalNumberPattern$f,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$f,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$f,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$f,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$f,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$f,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$f,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$f,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Malay locale.
 * @language Malay
 * @iso-639-2 msa
 * @author Ruban Selvarajah [@Zyten]{@link https://github.com/Zyten}
 */

var locale$g = {
  code: 'ms',
  formatDistance: formatDistance$f,
  formatLong: formatLong$g,
  formatRelative: formatRelative$f,
  localize: localize$f,
  match: match$f,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$f = {
  lessThanXSeconds: {
    singular: 'mindre enn ett sekund',
    plural: 'mindre enn {{count}} sekunder'
  },
  xSeconds: {
    singular: 'ett sekund',
    plural: '{{count}} sekunder'
  },
  halfAMinute: 'et halvt minutt',
  lessThanXMinutes: {
    singular: 'mindre enn ett minutt',
    plural: 'mindre enn {{count}} minutter'
  },
  xMinutes: {
    singular: 'ett minutt',
    plural: '{{count}} minutter'
  },
  aboutXHours: {
    singular: 'omtrent en time',
    plural: 'omtrent {{count}} timer'
  },
  xHours: {
    singular: 'en time',
    plural: '{{count}} timer'
  },
  xDays: {
    singular: 'en dag',
    plural: '{{count}} dager'
  },
  aboutXWeeks: {
    singular: 'omtrent en uke',
    plural: 'omtrent {{count}} uker'
  },
  xWeeks: {
    singular: 'en uke',
    plural: '{{count}} uker'
  },
  aboutXMonths: {
    singular: 'omtrent en måned',
    plural: 'omtrent {{count}} måneder'
  },
  xMonths: {
    singular: 'en måned',
    plural: '{{count}} måneder'
  },
  aboutXYears: {
    singular: 'omtrent ett år',
    plural: 'omtrent {{count}} år'
  },
  xYears: {
    singular: 'ett år',
    plural: '{{count}} år'
  },
  overXYears: {
    singular: 'over ett år',
    plural: 'over {{count}} år'
  },
  almostXYears: {
    singular: 'nesten ett år',
    plural: 'nesten {{count}} år'
  }
};
var wordMapping = ['null', 'en', 'to', 'tre', 'fire', 'fem', 'seks', 'sju', 'åtte', 'ni', 'ti', 'elleve', 'tolv'];
function formatDistance$g(token, count, options) {
  options = options || {
    onlyNumeric: false
  };
  var translation = formatDistanceLocale$f[token];
  var result;

  if (typeof translation === 'string') {
    result = translation;
  } else if (count === 0 || count > 1) {
    if (options.onlyNumeric) {
      result = translation.plural.replace('{{count}}', count);
    } else {
      result = translation.plural.replace('{{count}}', count < 13 ? wordMapping[count] : count);
    }
  } else {
    result = translation.singular;
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' siden';
    }
  }

  return result;
}

var dateFormats$h = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. MMM y',
  short: 'dd.MM.y'
};
var timeFormats$h = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$h = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$h = {
  date: buildFormatLongFn({
    formats: dateFormats$h,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$h,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$h,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$g = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i går kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
function formatRelative$g(token, _date, _baseDate, _options) {
  return formatRelativeLocale$g[token];
}

var eraValues$g = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['før Kristus', 'etter Kristus']
};
var quarterValues$g = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. kvartal', '2. kvartal', '3. kvartal', '4. kvartal']
};
var monthValues$g = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'mai', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'des.'],
  wide: ['januar', 'februar', 'mars', 'april', 'mai', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'desember']
};
var dayValues$g = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sø', 'ma', 'ti', 'on', 'to', 'fr', 'lø'],
  abbreviated: ['søn', 'man', 'tir', 'ons', 'tor', 'fre', 'lør'],
  wide: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag']
};
var dayPeriodValues$g = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten'
  },
  abbreviated: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på etterm.',
    evening: 'på kvelden',
    night: 'på natten'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgenen',
    afternoon: 'på ettermiddagen',
    evening: 'på kvelden',
    night: 'på natten'
  }
};

function ordinalNumber$g(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$g = {
  ordinalNumber: ordinalNumber$g,
  era: buildLocalizeFn({
    values: eraValues$g,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$g,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$g,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$g,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$g,
    defaultWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$g = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$g = /\d+/i;
var matchEraPatterns$g = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var parseEraPatterns$g = {
  any: [/^f/i, /^e/i]
};
var matchQuarterPatterns$g = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var parseQuarterPatterns$g = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$g = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var parseMonthPatterns$g = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$g = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var parseDayPatterns$g = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$g = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
var parseDayPeriodPatterns$g = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var match$g = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$g,
    parsePattern: parseOrdinalNumberPattern$g,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$g,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$g,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$g,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$g,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$g,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$g,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$g,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Norwegian Bokmål locale.
 * @language Norwegian Bokmål
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse]{@link https://github.com/Hanse}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Dag Stuan [@dagstuan]{@link https://github.com/dagstuan}
 */

var locale$h = {
  code: 'nb',
  formatDistance: formatDistance$g,
  formatLong: formatLong$h,
  formatRelative: formatRelative$g,
  localize: localize$g,
  match: match$g,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$g = {
  lessThanXSeconds: {
    one: 'minder dan een seconde',
    other: 'minder dan {{count}} seconden'
  },
  xSeconds: {
    one: '1 seconde',
    other: '{{count}} seconden'
  },
  halfAMinute: 'een halve minuut',
  lessThanXMinutes: {
    one: 'minder dan een minuut',
    other: 'minder dan {{count}} minuten'
  },
  xMinutes: {
    one: 'een minuut',
    other: '{{count}} minuten'
  },
  aboutXHours: {
    one: 'ongeveer 1 uur',
    other: 'ongeveer {{count}} uur'
  },
  xHours: {
    one: '1 uur',
    other: '{{count}} uur'
  },
  xDays: {
    one: '1 dag',
    other: '{{count}} dagen'
  },
  aboutXWeeks: {
    one: 'ongeveer 1 week',
    other: 'ongeveer {{count}} weken'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weken'
  },
  aboutXMonths: {
    one: 'ongeveer 1 maand',
    other: 'ongeveer {{count}} maanden'
  },
  xMonths: {
    one: '1 maand',
    other: '{{count}} maanden'
  },
  aboutXYears: {
    one: 'ongeveer 1 jaar',
    other: 'ongeveer {{count}} jaar'
  },
  xYears: {
    one: '1 jaar',
    other: '{{count}} jaar'
  },
  overXYears: {
    one: 'meer dan 1 jaar',
    other: 'meer dan {{count}} jaar'
  },
  almostXYears: {
    one: 'bijna 1 jaar',
    other: 'bijna {{count}} jaar'
  }
};
function formatDistance$h(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$g[token] === 'string') {
    result = formatDistanceLocale$g[token];
  } else if (count === 1) {
    result = formatDistanceLocale$g[token].one;
  } else {
    result = formatDistanceLocale$g[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'over ' + result;
    } else {
      return result + ' geleden';
    }
  }

  return result;
}

var dateFormats$i = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd-MM-y'
};
var timeFormats$i = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$i = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$i = {
  date: buildFormatLongFn({
    formats: dateFormats$i,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$i,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$i,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$h = {
  lastWeek: "'afgelopen' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: 'P'
};
function formatRelative$h(token, _date, _baseDate, _options) {
  return formatRelativeLocale$h[token];
}

var eraValues$h = {
  narrow: ['v.C.', 'n.C.'],
  abbreviated: ['v.Chr.', 'n.Chr.'],
  wide: ['voor Christus', 'na Christus']
};
var quarterValues$h = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['K1', 'K2', 'K3', 'K4'],
  wide: ['1e kwartaal', '2e kwartaal', '3e kwartaal', '4e kwartaal']
};
var monthValues$h = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mrt.', 'apr.', 'mei', 'jun.', 'jul.', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december']
};
var dayValues$h = {
  narrow: ['Z', 'M', 'D', 'W', 'D', 'V', 'Z'],
  short: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  abbreviated: ['zon', 'maa', 'din', 'woe', 'don', 'vri', 'zat'],
  wide: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag']
};
var dayPeriodValues$h = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'middernacht',
    noon: 'het middaguur',
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};

function ordinalNumber$h(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + 'e';
}

var localize$h = {
  ordinalNumber: ordinalNumber$h,
  era: buildLocalizeFn({
    values: eraValues$h,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$h,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$h,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$h,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$h,
    defaultWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$h = /^(\d+)e?/i;
var parseOrdinalNumberPattern$h = /\d+/i;
var matchEraPatterns$h = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns$h = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns$h = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var parseQuarterPatterns$h = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$h = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var parseMonthPatterns$h = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var matchDayPatterns$h = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var parseDayPatterns$h = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var matchDayPeriodPatterns$h = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var parseDayPeriodPatterns$h = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var match$h = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$h,
    parsePattern: parseOrdinalNumberPattern$h,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$h,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$h,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$h,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$h,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$h,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$h,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$h,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder]{@link https://github.com/jtangelder}
 * @author Ruben Stolk [@rubenstolk]{@link https://github.com/rubenstolk}
 * @author Lode Vanhove [@bitcrumb]{@link https://github.com/bitcrumb}
 * @author Edo Rivai [@edorivai]{@link https://github.com/edorivai}
 * @author Niels Keurentjes [@curry684]{@link https://github.com/curry684}
 * @author Stefan Vermaas [@stefanvermaas]{@link https://github.com/stefanvermaas}
 */

var locale$i = {
  code: 'nl',
  formatDistance: formatDistance$h,
  formatLong: formatLong$i,
  formatRelative: formatRelative$h,
  localize: localize$h,
  match: match$h,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }

  var rem100 = count % 100; // ends with 11-20

  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }

  var rem10 = rem100 % 10; // ends with 2, 3, 4

  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }

  return scheme.other;
}

function declension(scheme, count, time) {
  time = time || 'regular';
  var group = declensionGroup(scheme, count);
  var finalText = group[time] || group;
  return finalText.replace('{{count}}', count);
}

var formatDistanceLocale$h = {
  lessThanXSeconds: {
    one: {
      regular: 'mniej niż sekunda',
      past: 'mniej niż sekundę',
      future: 'mniej niż sekundę'
    },
    twoFour: 'mniej niż {{count}} sekundy',
    other: 'mniej niż {{count}} sekund'
  },
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundę',
      future: 'sekundę'
    },
    twoFour: '{{count}} sekundy',
    other: '{{count}} sekund'
  },
  halfAMinute: {
    one: 'pół minuty',
    twoFour: 'pół minuty',
    other: 'pół minuty'
  },
  lessThanXMinutes: {
    one: {
      regular: 'mniej niż minuta',
      past: 'mniej niż minutę',
      future: 'mniej niż minutę'
    },
    twoFour: 'mniej niż {{count}} minuty',
    other: 'mniej niż {{count}} minut'
  },
  xMinutes: {
    one: {
      regular: 'minuta',
      past: 'minutę',
      future: 'minutę'
    },
    twoFour: '{{count}} minuty',
    other: '{{count}} minut'
  },
  aboutXHours: {
    one: {
      regular: 'około godzina',
      past: 'około godziny',
      future: 'około godzinę'
    },
    twoFour: 'około {{count}} godziny',
    other: 'około {{count}} godzin'
  },
  xHours: {
    one: {
      regular: 'godzina',
      past: 'godzinę',
      future: 'godzinę'
    },
    twoFour: '{{count}} godziny',
    other: '{{count}} godzin'
  },
  xDays: {
    one: {
      regular: 'dzień',
      past: 'dzień',
      future: '1 dzień'
    },
    twoFour: '{{count}} dni',
    other: '{{count}} dni'
  },
  aboutXWeeks: {
    one: 'około tygodnia',
    twoFour: 'około {{count}} tygodni',
    other: 'około {{count}} tygodni'
  },
  xWeeks: {
    one: 'tydzień',
    twoFour: '{{count}} tygodnie',
    other: '{{count}} tygodni'
  },
  aboutXMonths: {
    one: 'około miesiąc',
    twoFour: 'około {{count}} miesiące',
    other: 'około {{count}} miesięcy'
  },
  xMonths: {
    one: 'miesiąc',
    twoFour: '{{count}} miesiące',
    other: '{{count}} miesięcy'
  },
  aboutXYears: {
    one: 'około rok',
    twoFour: 'około {{count}} lata',
    other: 'około {{count}} lat'
  },
  xYears: {
    one: 'rok',
    twoFour: '{{count}} lata',
    other: '{{count}} lat'
  },
  overXYears: {
    one: 'ponad rok',
    twoFour: 'ponad {{count}} lata',
    other: 'ponad {{count}} lat'
  },
  almostXYears: {
    one: 'prawie rok',
    twoFour: 'prawie {{count}} lata',
    other: 'prawie {{count}} lat'
  }
};
function formatDistance$i(token, count, options) {
  options = options || {};
  var scheme = formatDistanceLocale$h[token];

  if (!options.addSuffix) {
    return declension(scheme, count);
  }

  if (options.comparison > 0) {
    return 'za ' + declension(scheme, count, 'future');
  } else {
    return declension(scheme, count, 'past') + ' temu';
  }
}

var dateFormats$j = {
  full: 'EEEE, do MMMM y',
  long: 'do MMMM y',
  medium: 'do MMM y',
  short: 'dd.MM.y'
};
var timeFormats$j = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$j = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$j = {
  date: buildFormatLongFn({
    formats: dateFormats$j,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$j,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$j,
    defaultWidth: 'full'
  })
};

var adjectivesLastWeek = {
  masculine: 'ostatni',
  feminine: 'ostatnia'
};
var adjectivesThisWeek = {
  masculine: 'ten',
  feminine: 'ta'
};
var adjectivesNextWeek = {
  masculine: 'następny',
  feminine: 'następna'
};
var dayGrammaticalGender = {
  0: 'feminine',
  1: 'masculine',
  2: 'masculine',
  3: 'feminine',
  4: 'masculine',
  5: 'masculine',
  6: 'feminine'
};

function getAdjectives(token, date, baseDate, options) {
  if (isSameUTCWeek(date, baseDate, options)) {
    return adjectivesThisWeek;
  } else if (token === 'lastWeek') {
    return adjectivesLastWeek;
  } else if (token === 'nextWeek') {
    return adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
}

function getAdjective(token, date, baseDate, options) {
  var day = date.getUTCDay();
  var adjectives = getAdjectives(token, date, baseDate, options);
  var grammaticalGender = dayGrammaticalGender[day];
  return adjectives[grammaticalGender];
}

function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjective = getAdjective(token, date, baseDate, options);
  return "'".concat(adjective, "' eeee 'o' p");
}

var formatRelativeLocale$i = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: 'P'
};
function formatRelative$i(token, date, baseDate, options) {
  var format = formatRelativeLocale$i[token];

  if (typeof format === 'function') {
    return format(token, date, baseDate, options);
  }

  return format;
}

function ordinalNumber$i(dirtyNumber) {
  var number = Number(dirtyNumber);
  return String(number);
}

var eraValues$i = {
  narrow: ['p.n.e.', 'n.e.'],
  abbreviated: ['p.n.e.', 'n.e.'],
  wide: ['przed naszą erą', 'naszej ery']
};
var quarterValues$i = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['I kw.', 'II kw.', 'III kw.', 'IV kw.'],
  wide: ['I kwartał', 'II kwartał', 'III kwartał', 'IV kwartał']
};
var monthValues$i = {
  narrow: ['S', 'L', 'M', 'K', 'M', 'C', 'L', 'S', 'W', 'P', 'L', 'G'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['styczeń', 'luty', 'marzec', 'kwiecień', 'maj', 'czerwiec', 'lipiec', 'sierpień', 'wrzesień', 'październik', 'listopad', 'grudzień']
};
var monthFormattingValues = {
  narrow: ['s', 'l', 'm', 'k', 'm', 'c', 'l', 's', 'w', 'p', 'l', 'g'],
  abbreviated: ['sty', 'lut', 'mar', 'kwi', 'maj', 'cze', 'lip', 'sie', 'wrz', 'paź', 'lis', 'gru'],
  wide: ['stycznia', 'lutego', 'marca', 'kwietnia', 'maja', 'czerwca', 'lipca', 'sierpnia', 'września', 'października', 'listopada', 'grudnia']
};
var dayValues$i = {
  narrow: ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayFormattingValues = {
  narrow: ['n', 'p', 'w', 'ś', 'c', 'p', 's'],
  short: ['nie', 'pon', 'wto', 'śro', 'czw', 'pią', 'sob'],
  abbreviated: ['niedz.', 'pon.', 'wt.', 'śr.', 'czw.', 'pt.', 'sob.'],
  wide: ['niedziela', 'poniedziałek', 'wtorek', 'środa', 'czwartek', 'piątek', 'sobota']
};
var dayPeriodValues$i = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'półn.',
    noon: 'poł',
    morning: 'rano',
    afternoon: 'popoł.',
    evening: 'wiecz.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'północ',
    noon: 'południe',
    morning: 'rano',
    afternoon: 'popołudnie',
    evening: 'wieczór',
    night: 'noc'
  }
};
var dayPeriodFormattingValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'o półn.',
    noon: 'w poł.',
    morning: 'rano',
    afternoon: 'po poł.',
    evening: 'wiecz.',
    night: 'w nocy'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o północy',
    noon: 'w południe',
    morning: 'rano',
    afternoon: 'po południu',
    evening: 'wieczorem',
    night: 'w nocy'
  }
};
var localize$i = {
  ordinalNumber: ordinalNumber$i,
  era: buildLocalizeFn({
    values: eraValues$i,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$i,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$i,
    defaultWidth: 'wide',
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$i,
    defaultWidth: 'wide',
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$i,
    defaultWidth: 'wide',
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$i = /^(\d+)?/i;
var parseOrdinalNumberPattern$i = /\d+/i;
var matchEraPatterns$i = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
};
var parseEraPatterns$i = {
  any: [/^p/i, /^n/i]
};
var matchQuarterPatterns$i = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
};
var parseQuarterPatterns$i = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
};
var matchMonthPatterns$i = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
};
var parseMonthPatterns$i = {
  narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
  any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
};
var matchDayPatterns$i = {
  narrow: /^[npwścs]/i,
  short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
};
var parseDayPatterns$i = {
  narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
  any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
};
var matchDayPeriodPatterns$i = {
  narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
};
var parseDayPeriodPatterns$i = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  }
};
var match$i = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$i,
    parsePattern: parseOrdinalNumberPattern$i,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$i,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$i,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$i,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$i,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$i,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$i,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$i,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks]{@link https://github.com/ertrzyiks}
 * @author Just RAG [@justrag]{@link https://github.com/justrag}
 * @author Mikolaj Grzyb [@mikolajgrzyb]{@link https://github.com/mikolajgrzyb}
 * @author Mateusz Tokarski [@mutisz]{@link https://github.com/mutisz}
 */

var locale$j = {
  code: 'pl',
  formatDistance: formatDistance$i,
  formatLong: formatLong$j,
  formatRelative: formatRelative$i,
  localize: localize$i,
  match: match$i,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$i = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'aproximadamente 1 hora',
    other: 'aproximadamente {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'aproximadamente 1 mês',
    // TODO
    other: 'aproximadamente {{count}} meses' // TODO

  },
  xWeeks: {
    one: '1 mês',
    // TODO
    other: '{{count}} meses' // TODO

  },
  aboutXMonths: {
    one: 'aproximadamente 1 mês',
    other: 'aproximadamente {{count}} meses'
  },
  xMonths: {
    one: '1 mês',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'aproximadamente 1 ano',
    other: 'aproximadamente {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
function formatDistance$j(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$i[token] === 'string') {
    result = formatDistanceLocale$i[token];
  } else if (count === 1) {
    result = formatDistanceLocale$i[token].one;
  } else {
    result = formatDistanceLocale$i[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'daqui a ' + result;
    } else {
      return 'há ' + result;
    }
  }

  return result;
}

var dateFormats$k = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d 'de' MMM 'de' y",
  short: 'dd/MM/y'
};
var timeFormats$k = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$k = {
  full: "{{date}} 'às' {{time}}",
  long: "{{date}} 'às' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$k = {
  date: buildFormatLongFn({
    formats: dateFormats$k,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$k,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$k,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$j = {
  lastWeek: "'na última' eeee 'às' p",
  yesterday: "'ontem às' p",
  today: "'hoje às' p",
  tomorrow: "'amanhã às' p",
  nextWeek: "eeee 'às' p",
  other: 'P'
};
function formatRelative$j(token, _date, _baseDate, _options) {
  return formatRelativeLocale$j[token];
}

function ordinalNumber$j(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + 'º';
}

var eraValues$j = {
  narrow: ['aC', 'dC'],
  abbreviated: ['a.C.', 'd.C.'],
  wide: ['antes de Cristo', 'depois de Cristo']
};
var quarterValues$j = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$j = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var dayValues$j = {
  narrow: ['d', 's', 't', 'q', 'q', 's', 's'],
  short: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
  abbreviated: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
  wide: ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado']
};
var dayPeriodValues$j = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'noite',
    night: 'madrugada'
  }
};
var formattingDayPeriodValues$c = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da noite',
    night: 'da madrugada'
  }
};
var localize$j = {
  ordinalNumber: ordinalNumber$j,
  era: buildLocalizeFn({
    values: eraValues$j,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$j,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$j,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$j,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$j,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$c,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$j = /^(\d+)(º|ª)?/i;
var parseOrdinalNumberPattern$j = /\d+/i;
var matchEraPatterns$j = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
};
var parseEraPatterns$j = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
};
var matchQuarterPatterns$j = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º|ª)? trimestre/i
};
var parseQuarterPatterns$j = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$j = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var parseMonthPatterns$j = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$j = {
  narrow: /^[dstq]/i,
  short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
};
var parseDayPatterns$j = {
  narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[áa]/i]
};
var matchDayPeriodPatterns$j = {
  narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
  any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
};
var parseDayPeriodPatterns$j = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^meia/i,
    noon: /^meio/i,
    morning: /manh[ãa]/i,
    afternoon: /tarde/i,
    evening: /noite/i,
    night: /madrugada/i
  }
};
var match$j = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$j,
    parsePattern: parseOrdinalNumberPattern$j,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$j,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$j,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$j,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$j,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$j,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$j,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$j,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale.
 * @language Portuguese
 * @iso-639-2 por
 * @author Dário Freire [@dfreire]{@link https://github.com/dfreire}
 * @author Adrián de la Rosa [@adrm]{@link https://github.com/adrm}
 */

var locale$k = {
  code: 'pt',
  formatDistance: formatDistance$j,
  formatLong: formatLong$k,
  formatRelative: formatRelative$j,
  localize: localize$j,
  match: match$j,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$j = {
  lessThanXSeconds: {
    one: 'menos de um segundo',
    other: 'menos de {{count}} segundos'
  },
  xSeconds: {
    one: '1 segundo',
    other: '{{count}} segundos'
  },
  halfAMinute: 'meio minuto',
  lessThanXMinutes: {
    one: 'menos de um minuto',
    other: 'menos de {{count}} minutos'
  },
  xMinutes: {
    one: '1 minuto',
    other: '{{count}} minutos'
  },
  aboutXHours: {
    one: 'cerca de 1 hora',
    other: 'cerca de {{count}} horas'
  },
  xHours: {
    one: '1 hora',
    other: '{{count}} horas'
  },
  xDays: {
    one: '1 dia',
    other: '{{count}} dias'
  },
  aboutXWeeks: {
    one: 'cerca de 1 mês',
    other: 'cerca de {{count}} meses'
  },
  xWeeks: {
    one: '1 mês',
    other: '{{count}} meses'
  },
  aboutXMonths: {
    one: 'cerca de 1 mês',
    other: 'cerca de {{count}} meses'
  },
  xMonths: {
    one: '1 mês',
    other: '{{count}} meses'
  },
  aboutXYears: {
    one: 'cerca de 1 ano',
    other: 'cerca de {{count}} anos'
  },
  xYears: {
    one: '1 ano',
    other: '{{count}} anos'
  },
  overXYears: {
    one: 'mais de 1 ano',
    other: 'mais de {{count}} anos'
  },
  almostXYears: {
    one: 'quase 1 ano',
    other: 'quase {{count}} anos'
  }
};
function formatDistance$k(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$j[token] === 'string') {
    result = formatDistanceLocale$j[token];
  } else if (count === 1) {
    result = formatDistanceLocale$j[token].one;
  } else {
    result = formatDistanceLocale$j[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'em ' + result;
    } else {
      return 'há ' + result;
    }
  }

  return result;
}

var dateFormats$l = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$l = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$l = {
  full: "{{date}} 'às' {{time}}",
  long: "{{date}} 'às' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$l = {
  date: buildFormatLongFn({
    formats: dateFormats$l,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$l,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$l,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$k = {
  lastWeek: function lastWeek(date, _baseDate, _options) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? 'último' : 'última';
    return "'" + last + "' eeee 'às' p";
  },
  yesterday: "'ontem às' p",
  today: "'hoje às' p",
  tomorrow: "'amanhã às' p",
  nextWeek: "eeee 'às' p",
  other: 'P'
};
function formatRelative$k(token, date, baseDate, options) {
  var format = formatRelativeLocale$k[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$k = {
  narrow: ['AC', 'DC'],
  abbreviated: ['AC', 'DC'],
  wide: ['antes de cristo', 'depois de cristo']
};
var quarterValues$k = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['1º trimestre', '2º trimestre', '3º trimestre', '4º trimestre']
};
var monthValues$k = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'fev', 'mar', 'abr', 'mai', 'jun', 'jul', 'ago', 'set', 'out', 'nov', 'dez'],
  wide: ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro']
};
var dayValues$k = {
  narrow: ['do', '2ª', '3ª', '4ª', '5ª', '6ª', 'sá'],
  short: ['do', '2ª', '3ª', '4ª', '5ª', '6ª', 'sá'],
  abbreviated: ['dom', 'seg', 'ter', 'qua', 'qui', 'sex', 'sáb'],
  wide: ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado']
};
var dayPeriodValues$k = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'manhã',
    afternoon: 'tarde',
    evening: 'tarde',
    night: 'noite'
  }
};
var formattingDayPeriodValues$d = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'md',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'meia-noite',
    noon: 'meio-dia',
    morning: 'da manhã',
    afternoon: 'da tarde',
    evening: 'da tarde',
    night: 'da noite'
  }
};

function ordinalNumber$k(dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber);
  var options = dirtyOptions || {};
  var unit = String(options.unit);

  if (unit === 'week' || unit === 'isoWeek') {
    return number + 'ª';
  }

  return number + 'º';
}

var localize$k = {
  ordinalNumber: ordinalNumber$k,
  era: buildLocalizeFn({
    values: eraValues$k,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$k,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$k,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$k,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$k,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$d,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$k = /^(\d+)[ºªo]?/i;
var parseOrdinalNumberPattern$k = /\d+/i;
var matchEraPatterns$k = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i
};
var parseEraPatterns$k = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i]
};
var matchQuarterPatterns$k = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var parseQuarterPatterns$k = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$k = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var parseMonthPatterns$k = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
};
var matchDayPatterns$k = {
  narrow: /^(dom|[23456]ª?|s[aá]b)/i,
  short: /^(dom|[23456]ª?|s[aá]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
  wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
};
var parseDayPatterns$k = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
};
var matchDayPeriodPatterns$k = {
  narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
};
var parseDayPeriodPatterns$k = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manhã/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i
  }
};
var match$k = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$k,
    parsePattern: parseOrdinalNumberPattern$k,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$k,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$k,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$k,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$k,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$k,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$k,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$k,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Portuguese locale (Brazil).
 * @language Portuguese
 * @iso-639-2 por
 * @author Lucas Duailibe [@duailibe]{@link https://github.com/duailibe}
 * @author Yago Carballo [@yagocarballo]{@link https://github.com/YagoCarballo}
 */

var locale$l = {
  code: 'pt-BR',
  formatDistance: formatDistance$k,
  formatLong: formatLong$l,
  formatRelative: formatRelative$k,
  localize: localize$k,
  match: match$k,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$k = {
  lessThanXSeconds: {
    one: 'mai puțin de o secundă',
    other: 'mai puțin de {{count}} secunde'
  },
  xSeconds: {
    one: '1 secundă',
    other: '{{count}} secunde'
  },
  halfAMinute: 'jumătate de minut',
  lessThanXMinutes: {
    one: 'mai puțin de un minut',
    other: 'mai puțin de {{count}} minute'
  },
  xMinutes: {
    one: '1 minut',
    other: '{{count}} minute'
  },
  aboutXHours: {
    one: 'circa 1 oră',
    other: 'circa {{count}} ore'
  },
  xHours: {
    one: '1 oră',
    other: '{{count}} ore'
  },
  xDays: {
    one: '1 zi',
    other: '{{count}} zile'
  },
  aboutXWeeks: {
    one: 'circa o săptămână',
    other: 'circa {{count}} săptămâni'
  },
  xWeeks: {
    one: '1 săptămână',
    other: '{{count}} săptămâni'
  },
  aboutXMonths: {
    one: 'circa 1 lună',
    other: 'circa {{count}} luni'
  },
  xMonths: {
    one: '1 lună',
    other: '{{count}} luni'
  },
  aboutXYears: {
    one: 'circa 1 an',
    other: 'circa {{count}} ani'
  },
  xYears: {
    one: '1 an',
    other: '{{count}} ani'
  },
  overXYears: {
    one: 'peste 1 an',
    other: 'peste {{count}} ani'
  },
  almostXYears: {
    one: 'aproape 1 an',
    other: 'aproape {{count}} ani'
  }
};
function formatDistance$l(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$k[token] === 'string') {
    result = formatDistanceLocale$k[token];
  } else if (count === 1) {
    result = formatDistanceLocale$k[token].one;
  } else {
    result = formatDistanceLocale$k[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'în ' + result;
    } else {
      return result + ' în urmă';
    }
  }

  return result;
}

var dateFormats$m = {
  full: 'EEEE, d MMMM yyyy',
  long: 'd MMMM yyyy',
  medium: 'd MMM yyyy',
  short: 'dd/MM/yyyy'
};
var timeFormats$m = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$m = {
  full: "{{date}} 'la' {{time}}",
  long: "{{date}} 'la' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$m = {
  date: buildFormatLongFn({
    formats: dateFormats$m,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$m,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$m,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$l = {
  lastWeek: "eeee 'trecută la' p",
  yesterday: "'ieri la' p",
  today: "'astăzi la' p",
  tomorrow: "'mâine la' p",
  nextWeek: "eeee 'viitoare la' p",
  other: 'P'
};
function formatRelative$l(token, _date, _baseDate, _options) {
  return formatRelativeLocale$l[token];
}

var eraValues$l = {
  narrow: ['Î', 'D'],
  abbreviated: ['Î.d.C.', 'D.C.'],
  wide: ['Înainte de Cristos', 'După Cristos']
};
var quarterValues$l = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['T1', 'T2', 'T3', 'T4'],
  wide: ['primul trimestru', 'al doilea trimestru', 'al treilea trimestru', 'al patrulea trimestru']
};
var monthValues$l = {
  narrow: ['I', 'F', 'M', 'A', 'M', 'I', 'I', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['ian', 'feb', 'mar', 'apr', 'mai', 'iun', 'iul', 'aug', 'sep', 'oct', 'noi', 'dec'],
  wide: ['ianuarie', 'februarie', 'martie', 'aprilie', 'mai', 'iunie', 'iulie', 'august', 'septembrie', 'octombrie', 'noiembrie', 'decembrie']
};
var dayValues$l = {
  narrow: ['d', 'l', 'm', 'm', 'j', 'v', 's'],
  short: ['du', 'lu', 'ma', 'mi', 'jo', 'vi', 'sâ'],
  abbreviated: ['dum', 'lun', 'mar', 'mie', 'joi', 'vin', 'sâm'],
  wide: ['duminică', 'luni', 'marți', 'miercuri', 'joi', 'vineri', 'sâmbătă']
};
var dayPeriodValues$l = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'ami',
    morning: 'dim',
    afternoon: 'da',
    evening: 's',
    night: 'n'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  }
};
var formattingDayPeriodValues$e = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mn',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'miezul nopții',
    noon: 'amiază',
    morning: 'dimineață',
    afternoon: 'după-amiază',
    evening: 'seară',
    night: 'noapte'
  }
};

function ordinalNumber$l(dirtyNumber) {
  var number = Number(dirtyNumber);
  return String(number);
}

var localize$l = {
  ordinalNumber: ordinalNumber$l,
  era: buildLocalizeFn({
    values: eraValues$l,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$l,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$l,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$l,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$l,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$e,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$l = /^(\d+)?/i;
var parseOrdinalNumberPattern$l = /\d+/i;
var matchEraPatterns$l = {
  narrow: /^(Î|D)/i,
  abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
  wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
};
var parseEraPatterns$l = {
  any: [/^ÎC/i, /^DC/i],
  wide: [/^(Înainte de Cristos|Înaintea erei noastre)/i, /^(După Cristos|Era noastră)/i]
};
var matchQuarterPatterns$l = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^trimestrul [1234]/i
};
var parseQuarterPatterns$l = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$l = {
  narrow: /^[ifmaasond]/i,
  abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
  wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
};
var parseMonthPatterns$l = {
  narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$l = {
  narrow: /^[dlmjvs]/i,
  short: /^(d|l|ma|mi|j|v|s)/i,
  abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
  wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
};
var parseDayPatterns$l = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
};
var matchDayPeriodPatterns$l = {
  narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
  any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
};
var parseDayPeriodPatterns$l = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /amiaza/i,
    morning: /dimineaţa/i,
    afternoon: /după-amiaza/i,
    evening: /seara/i,
    night: /noaptea/i
  }
};
var match$l = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$l,
    parsePattern: parseOrdinalNumberPattern$l,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$l,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$l,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$l,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$l,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$l,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$l,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$l,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Romanian locale.
 * @language Romanian
 * @iso-639-2 ron
 * @author Sergiu Munteanu [@jsergiu]{@link https://github.com/jsergiu}
 * @author Adrian Ocneanu [@aocneanu]{@link https://github.com/aocneanu}
 * @author Mihai Ocneanu [@gandesc]{@link https://github.com/gandesc}
 */

var locale$m = {
  code: 'ro',
  formatDistance: formatDistance$l,
  formatLong: formatLong$m,
  formatRelative: formatRelative$l,
  localize: localize$l,
  match: match$l,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

function declension$1(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  var rem10 = count % 10;
  var rem100 = count % 100; // 1, 21, 31, ...

  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', count);
  }
}

function buildLocalizeTokenFn(scheme) {
  return function (count, options) {
    if (options.addSuffix) {
      if (options.comparison > 0) {
        if (scheme.future) {
          return declension$1(scheme.future, count);
        } else {
          return 'через ' + declension$1(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$1(scheme.past, count);
        } else {
          return declension$1(scheme.regular, count) + ' назад';
        }
      }
    } else {
      return declension$1(scheme.regular, count);
    }
  };
}

var formatDistanceLocale$l = {
  lessThanXSeconds: buildLocalizeTokenFn({
    regular: {
      one: 'меньше секунды',
      singularNominative: 'меньше {{count}} секунды',
      singularGenitive: 'меньше {{count}} секунд',
      pluralGenitive: 'меньше {{count}} секунд'
    },
    future: {
      one: 'меньше, чем через секунду',
      singularNominative: 'меньше, чем через {{count}} секунду',
      singularGenitive: 'меньше, чем через {{count}} секунды',
      pluralGenitive: 'меньше, чем через {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунды',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду назад',
      singularGenitive: '{{count}} секунды назад',
      pluralGenitive: '{{count}} секунд назад'
    },
    future: {
      singularNominative: 'через {{count}} секунду',
      singularGenitive: 'через {{count}} секунды',
      pluralGenitive: 'через {{count}} секунд'
    }
  }),
  halfAMinute: function halfAMinute(_, options) {
    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'через полминуты';
      } else {
        return 'полминуты назад';
      }
    }

    return 'полминуты';
  },
  lessThanXMinutes: buildLocalizeTokenFn({
    regular: {
      one: 'меньше минуты',
      singularNominative: 'меньше {{count}} минуты',
      singularGenitive: 'меньше {{count}} минут',
      pluralGenitive: 'меньше {{count}} минут'
    },
    future: {
      one: 'меньше, чем через минуту',
      singularNominative: 'меньше, чем через {{count}} минуту',
      singularGenitive: 'меньше, чем через {{count}} минуты',
      pluralGenitive: 'меньше, чем через {{count}} минут'
    }
  }),
  xMinutes: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} минута',
      singularGenitive: '{{count}} минуты',
      pluralGenitive: '{{count}} минут'
    },
    past: {
      singularNominative: '{{count}} минуту назад',
      singularGenitive: '{{count}} минуты назад',
      pluralGenitive: '{{count}} минут назад'
    },
    future: {
      singularNominative: 'через {{count}} минуту',
      singularGenitive: 'через {{count}} минуты',
      pluralGenitive: 'через {{count}} минут'
    }
  }),
  aboutXHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'около {{count}} часа',
      singularGenitive: 'около {{count}} часов',
      pluralGenitive: 'около {{count}} часов'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} час',
      singularGenitive: 'приблизительно через {{count}} часа',
      pluralGenitive: 'приблизительно через {{count}} часов'
    }
  }),
  xHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} час',
      singularGenitive: '{{count}} часа',
      pluralGenitive: '{{count}} часов'
    }
  }),
  xDays: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} день',
      singularGenitive: '{{count}} дня',
      pluralGenitive: '{{count}} дней'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'около {{count}} недели',
      singularGenitive: 'около {{count}} недель',
      pluralGenitive: 'около {{count}} недель'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} неделю',
      singularGenitive: 'приблизительно через {{count}} недели',
      pluralGenitive: 'приблизительно через {{count}} недель'
    }
  }),
  xWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} неделя',
      singularGenitive: '{{count}} недели',
      pluralGenitive: '{{count}} недель'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'около {{count}} месяца',
      singularGenitive: 'около {{count}} месяцев',
      pluralGenitive: 'около {{count}} месяцев'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} месяц',
      singularGenitive: 'приблизительно через {{count}} месяца',
      pluralGenitive: 'приблизительно через {{count}} месяцев'
    }
  }),
  xMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} месяц',
      singularGenitive: '{{count}} месяца',
      pluralGenitive: '{{count}} месяцев'
    }
  }),
  aboutXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'около {{count}} года',
      singularGenitive: 'около {{count}} лет',
      pluralGenitive: 'около {{count}} лет'
    },
    future: {
      singularNominative: 'приблизительно через {{count}} год',
      singularGenitive: 'приблизительно через {{count}} года',
      pluralGenitive: 'приблизительно через {{count}} лет'
    }
  }),
  xYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: '{{count}} год',
      singularGenitive: '{{count}} года',
      pluralGenitive: '{{count}} лет'
    }
  }),
  overXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'больше {{count}} года',
      singularGenitive: 'больше {{count}} лет',
      pluralGenitive: 'больше {{count}} лет'
    },
    future: {
      singularNominative: 'больше, чем через {{count}} год',
      singularGenitive: 'больше, чем через {{count}} года',
      pluralGenitive: 'больше, чем через {{count}} лет'
    }
  }),
  almostXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: 'почти {{count}} год',
      singularGenitive: 'почти {{count}} года',
      pluralGenitive: 'почти {{count}} лет'
    },
    future: {
      singularNominative: 'почти через {{count}} год',
      singularGenitive: 'почти через {{count}} года',
      pluralGenitive: 'почти через {{count}} лет'
    }
  })
};
function formatDistance$m(token, count, options) {
  options = options || {};
  return formatDistanceLocale$l[token](count, options);
}

var dateFormats$n = {
  full: "EEEE, do MMMM y 'г.'",
  long: "do MMMM y 'г.'",
  medium: "d MMM y 'г.'",
  short: 'dd.MM.y'
};
var timeFormats$n = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$n = {
  any: '{{date}}, {{time}}'
};
var formatLong$n = {
  date: buildFormatLongFn({
    formats: dateFormats$n,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$n,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$n,
    defaultWidth: 'any'
  })
};

var accusativeWeekdays$2 = ['воскресенье', 'понедельник', 'вторник', 'среду', 'четверг', 'пятницу', 'субботу'];

function _lastWeek$1(day) {
  var weekday = accusativeWeekdays$2[day];

  switch (day) {
    case 0:
      return "'в прошлое " + weekday + " в' p";

    case 1:
    case 2:
    case 4:
      return "'в прошлый " + weekday + " в' p";

    case 3:
    case 5:
    case 6:
      return "'в прошлую " + weekday + " в' p";
  }
}

function thisWeek$1(day) {
  var weekday = accusativeWeekdays$2[day];

  if (day === 2
  /* Tue */
  ) {
      return "'во " + weekday + " в' p";
    } else {
    return "'в " + weekday + " в' p";
  }
}

function _nextWeek$1(day) {
  var weekday = accusativeWeekdays$2[day];

  switch (day) {
    case 0:
      return "'в следующее " + weekday + " в' p";

    case 1:
    case 2:
    case 4:
      return "'в следующий " + weekday + " в' p";

    case 3:
    case 5:
    case 6:
      return "'в следующую " + weekday + " в' p";
  }
}

var formatRelativeLocale$m = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return _lastWeek$1(day);
    }
  },
  yesterday: "'вчера в' p",
  today: "'сегодня в' p",
  tomorrow: "'завтра в' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return _nextWeek$1(day);
    }
  },
  other: 'P'
};
function formatRelative$m(token, date, baseDate, options) {
  var format = formatRelativeLocale$m[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$m = {
  narrow: ['до н.э.', 'н.э.'],
  abbreviated: ['до н. э.', 'н. э.'],
  wide: ['до нашей эры', 'нашей эры']
};
var quarterValues$m = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
  wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
};
var monthValues$m = {
  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
  abbreviated: ['янв.', 'фев.', 'март', 'апр.', 'май', 'июнь', 'июль', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
  wide: ['январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
};
var formattingMonthValues$3 = {
  narrow: ['Я', 'Ф', 'М', 'А', 'М', 'И', 'И', 'А', 'С', 'О', 'Н', 'Д'],
  abbreviated: ['янв.', 'фев.', 'мар.', 'апр.', 'мая', 'июн.', 'июл.', 'авг.', 'сент.', 'окт.', 'нояб.', 'дек.'],
  wide: ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
};
var dayValues$m = {
  narrow: ['В', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  abbreviated: ['вск', 'пнд', 'втр', 'срд', 'чтв', 'птн', 'суб'],
  wide: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота']
};
var dayPeriodValues$m = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утро',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ночь'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утро',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ночь'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полночь',
    noon: 'полдень',
    morning: 'утро',
    afternoon: 'день',
    evening: 'вечер',
    night: 'ночь'
  }
};
var formattingDayPeriodValues$f = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночи'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полн.',
    noon: 'полд.',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночи'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'полночь',
    noon: 'полдень',
    morning: 'утра',
    afternoon: 'дня',
    evening: 'вечера',
    night: 'ночи'
  }
};

function ordinalNumber$m(dirtyNumber, dirtyOptions) {
  var options = dirtyOptions || {};
  var unit = String(options.unit);
  var suffix;

  if (unit === 'date') {
    suffix = '-е';
  } else if (unit === 'week' || unit === 'minute' || unit === 'second') {
    suffix = '-я';
  } else {
    suffix = '-й';
  }

  return dirtyNumber + suffix;
}

var localize$m = {
  ordinalNumber: ordinalNumber$m,
  era: buildLocalizeFn({
    values: eraValues$m,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$m,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$m,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$3,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$m,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$m,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$f,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$m = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
var parseOrdinalNumberPattern$m = /\d+/i;
var matchEraPatterns$m = {
  narrow: /^((до )?н\.?\s?э\.?)/i,
  abbreviated: /^((до )?н\.?\s?э\.?)/i,
  wide: /^(до нашей эры|нашей эры|наша эра)/i
};
var parseEraPatterns$m = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$m = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
  wide: /^[1234](-?[ыои]?й?)? квартал/i
};
var parseQuarterPatterns$m = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$m = {
  narrow: /^[яфмаисонд]/i,
  abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)/i,
  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
};
var parseMonthPatterns$m = {
  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^я/i],
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var matchDayPatterns$m = {
  narrow: /^[впсч]/i,
  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
};
var parseDayPatterns$m = {
  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$m = {
  narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
};
var parseDayPeriodPatterns$m = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^полн/i,
    noon: /^полд/i,
    morning: /^у/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$m = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$m,
    parsePattern: parseOrdinalNumberPattern$m,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$m,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$m,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$m,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$m,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$m,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$m,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Russian locale.
 * @language Russian
 * @iso-639-2 rus
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale$n = {
  code: 'ru',
  formatDistance: formatDistance$m,
  formatLong: formatLong$n,
  formatRelative: formatRelative$m,
  localize: localize$m,
  match: match$m,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

// NOTE: should prolly be improved
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
function declensionGroup$1(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }

  if (count >= 2 && count <= 4) {
    return scheme.twoFour;
  } // if count === null || count === 0 || count >= 5


  return scheme.other;
}

function declension$2(scheme, count, time) {
  var group = declensionGroup$1(scheme, count);
  var finalText = group[time] || group;
  return finalText.replace('{{count}}', count);
}

function extractPreposition(token) {
  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {
    return !!token.match(new RegExp('^' + preposition));
  });
  return result[0];
}

function prefixPreposition(preposition) {
  var translation = '';

  if (preposition === 'almost') {
    translation = 'takmer';
  }

  if (preposition === 'about') {
    translation = 'približne';
  }

  return translation.length > 0 ? translation + ' ' : '';
}

function suffixPreposition(preposition) {
  var translation = '';

  if (preposition === 'lessThan') {
    translation = 'menej než';
  }

  if (preposition === 'over') {
    translation = 'viac než';
  }

  return translation.length > 0 ? translation + ' ' : '';
}

function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}

var formatDistanceLocale$m = {
  xSeconds: {
    one: {
      regular: 'sekunda',
      past: 'sekundou',
      future: 'sekundu'
    },
    twoFour: {
      regular: '{{count}} sekundy',
      past: '{{count}} sekundami',
      future: '{{count}} sekundy'
    },
    other: {
      regular: '{{count}} sekúnd',
      past: '{{count}} sekundami',
      future: '{{count}} sekúnd'
    }
  },
  halfAMinute: {
    other: {
      regular: 'pol minúty',
      past: 'pol minútou',
      future: 'pol minúty'
    }
  },
  xMinutes: {
    one: {
      regular: 'minúta',
      past: 'minútou',
      future: 'minútu'
    },
    twoFour: {
      regular: '{{count}} minúty',
      past: '{{count}} minútami',
      future: '{{count}} minúty'
    },
    other: {
      regular: '{{count}} minút',
      past: '{{count}} minútami',
      future: '{{count}} minút'
    }
  },
  xHours: {
    one: {
      regular: 'hodina',
      past: 'hodinou',
      future: 'hodinu'
    },
    twoFour: {
      regular: '{{count}} hodiny',
      past: '{{count}} hodinami',
      future: '{{count}} hodiny'
    },
    other: {
      regular: '{{count}} hodín',
      past: '{{count}} hodinami',
      future: '{{count}} hodín'
    }
  },
  xDays: {
    one: {
      regular: 'deň',
      past: 'dňom',
      future: 'deň'
    },
    twoFour: {
      regular: '{{count}} dni',
      past: '{{count}} dňami',
      future: '{{count}} dni'
    },
    other: {
      regular: '{{count}} dní',
      past: '{{count}} dňami',
      future: '{{count}} dní'
    }
  },
  xWeeks: {
    one: {
      regular: 'mesiac',
      // TODO
      past: 'mesiacom',
      // TODO
      future: 'mesiac' // TODO

    },
    twoFour: {
      regular: '{{count}} mesiace',
      // TODO
      past: '{{count}} mesiacmi',
      // TODO
      future: '{{count}} mesiace' // TODO

    },
    other: {
      regular: '{{count}} mesiacov',
      // TODO
      past: '{{count}} mesiacmi',
      // TODO
      future: '{{count}} mesiacov' // TODO

    }
  },
  xMonths: {
    one: {
      regular: 'mesiac',
      past: 'mesiacom',
      future: 'mesiac'
    },
    twoFour: {
      regular: '{{count}} mesiace',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiace'
    },
    other: {
      regular: '{{count}} mesiacov',
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiacov'
    }
  },
  xYears: {
    one: {
      regular: 'rok',
      past: 'rokom',
      future: 'rok'
    },
    twoFour: {
      regular: '{{count}} roky',
      past: '{{count}} rokmi',
      future: '{{count}} roky'
    },
    other: {
      regular: '{{count}} rokov',
      past: '{{count}} rokmi',
      future: '{{count}} rokov'
    }
  }
};
function formatDistance$n(token, count, options) {
  options = options || {};
  var preposition = extractPreposition(token) || '';
  var key = lowercaseFirstLetter(token.substring(preposition.length));
  var scheme = formatDistanceLocale$m[key];

  if (!options.addSuffix) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + declension$2(scheme, count, 'regular');
  }

  if (options.comparison > 0) {
    return prefixPreposition(preposition) + 'o ' + suffixPreposition(preposition) + declension$2(scheme, count, 'future');
  } else {
    return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension$2(scheme, count, 'past');
  }
}

var dateFormats$o = {
  full: 'EEEE d. MMMM y',
  long: 'd. MMMM y',
  medium: 'd. M. y',
  short: 'd. M. y' // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149

};
var timeFormats$o = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm' // https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994

};
var dateTimeFormats$o = {
  full: '{{date}}, {{time}}',
  long: '{{date}}, {{time}}',
  medium: '{{date}}, {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$o = {
  date: buildFormatLongFn({
    formats: dateFormats$o,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$o,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$o,
    defaultWidth: 'full'
  })
};

var accusativeWeekdays$3 = ['nedeľu', 'pondelok', 'utorok', 'stredu', 'štvrtok', 'piatok', 'sobotu'];

function _lastWeek$2(day) {
  var weekday = accusativeWeekdays$3[day];

  switch (day) {
    case 0:
    /* Sun */

    case 3:
    /* Wed */

    case 6
    /* Sat */
    :
      return "'minulú " + weekday + " o' p";

    default:
      return "'minulý' eeee 'o' p";
  }
}

function thisWeek$2(day) {
  var weekday = accusativeWeekdays$3[day];

  if (day === 4
  /* Thu */
  ) {
      return "'vo' eeee 'o' p";
    } else {
    return "'v " + weekday + " o' p";
  }
}

function _nextWeek$2(day) {
  var weekday = accusativeWeekdays$3[day];

  switch (day) {
    case 0:
    /* Sun */

    case 4:
    /* Wed */

    case 6
    /* Sat */
    :
      return "'budúcu' " + weekday + " 'o' p";

    default:
      return "'budúci' eeee 'o' p";
  }
}

var formatRelativeLocale$n = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return _lastWeek$2(day);
    }
  },
  yesterday: "'včera o' p",
  today: "'dnes o' p",
  tomorrow: "'zajtra o' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return _nextWeek$2(day);
    }
  },
  other: 'P'
};
function formatRelative$n(token, date, baseDate, options) {
  var format = formatRelativeLocale$n[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$n = {
  narrow: ['pred Kr.', 'po Kr.'],
  abbreviated: ['pred Kr.', 'po Kr.'],
  wide: ['pred Kristom', 'po Kristovi'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1780

};
var quarterValues$n = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1. štvrťrok', '2. štvrťrok', '3. štvrťrok', '4. štvrťrok'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1804

};
var monthValues$n = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['január', 'február', 'marec', 'apríl', 'máj', 'jún', 'júl', 'august', 'september', 'október', 'november', 'december']
};
var formattingMonthValues$4 = {
  narrow: ['j', 'f', 'm', 'a', 'm', 'j', 'j', 'a', 's', 'o', 'n', 'd'],
  abbreviated: ['jan', 'feb', 'mar', 'apr', 'máj', 'jún', 'júl', 'aug', 'sep', 'okt', 'nov', 'dec'],
  wide: ['januára', 'februára', 'marca', 'apríla', 'mája', 'júna', 'júla', 'augusta', 'septembra', 'októbra', 'novembra', 'decembra'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1876

};
var dayValues$n = {
  narrow: ['n', 'p', 'u', 's', 'š', 'p', 's'],
  short: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
  abbreviated: ['ne', 'po', 'ut', 'st', 'št', 'pi', 'so'],
  wide: ['nedeľa', 'pondelok', 'utorok', 'streda', 'štvrtok', 'piatok', 'sobota'] // https://www.unicode.org/cldr/charts/32/summary/sk.html#1932

};
var dayPeriodValues$n = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'ráno',
    afternoon: 'pop.',
    evening: 'več.',
    night: 'noc'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'poln.',
    noon: 'pol.',
    morning: 'ráno',
    afternoon: 'popol.',
    evening: 'večer',
    night: 'noc'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'polnoc',
    noon: 'poludnie',
    morning: 'ráno',
    afternoon: 'popoludnie',
    evening: 'večer',
    night: 'noc'
  }
};
var formattingDayPeriodValues$g = {
  narrow: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'nap.',
    morning: 'ráno',
    afternoon: 'pop.',
    evening: 'več.',
    night: 'v n.'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o poln.',
    noon: 'napol.',
    morning: 'ráno',
    afternoon: 'popol.',
    evening: 'večer',
    night: 'v noci'
  },
  wide: {
    am: 'AM',
    pm: 'PM',
    midnight: 'o polnoci',
    noon: 'napoludnie',
    morning: 'ráno',
    afternoon: 'popoludní',
    evening: 'večer',
    night: 'v noci'
  }
};

function ordinalNumber$n(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$n = {
  ordinalNumber: ordinalNumber$n,
  era: buildLocalizeFn({
    values: eraValues$n // defaultWidth: 'wide'

  }),
  quarter: buildLocalizeFn({
    values: quarterValues$n,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$n,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$4,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$n,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$n,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$g,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$n = /^(\d+)\.?/i;
var parseOrdinalNumberPattern$n = /\d+/i;
var matchEraPatterns$n = {
  narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
};
var parseEraPatterns$n = {
  any: [/^pr/i, /^(po|n)/i]
};
var matchQuarterPatterns$n = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\. [šs]tvr[ťt]rok/i
};
var parseQuarterPatterns$n = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$n = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
  wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
};
var parseMonthPatterns$n = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[áa]j/i, /^j[úu]n/i, /^j[úu]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$n = {
  narrow: /^[npusšp]/i,
  short: /^(ne|po|ut|st|št|pi|so)/i,
  abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
  wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
};
var parseDayPatterns$n = {
  narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^š/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(št|stv)/i, /^pi/i, /^so/i]
};
var matchDayPeriodPatterns$n = {
  narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
  abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
  any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
};
var parseDayPeriodPatterns$n = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /poln/i,
    noon: /^(nap|(na)?pol(\.|u))/i,
    morning: /^r[áa]no/i,
    afternoon: /^pop/i,
    evening: /^ve[čc]/i,
    night: /^(noc|v n\.)/i
  }
};
var match$n = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$n,
    parsePattern: parseOrdinalNumberPattern$n,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$n,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$n,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$n,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$n,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$n,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$n,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$n,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Slovak locale.
 * @language Slovak
 * @iso-639-2 slk
 * @author Marek Suscak [@mareksuscak]{@link https://github.com/mareksuscak}
 */

var locale$o = {
  code: 'sk',
  formatDistance: formatDistance$n,
  formatLong: formatLong$o,
  formatRelative: formatRelative$n,
  localize: localize$n,
  match: match$n,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$n = {
  lessThanXSeconds: {
    singular: 'mindre än en sekund',
    plural: 'mindre än {{count}} sekunder'
  },
  xSeconds: {
    singular: 'en sekund',
    plural: '{{count}} sekunder'
  },
  halfAMinute: 'en halv minut',
  lessThanXMinutes: {
    singular: 'mindre än en minut',
    plural: 'mindre än {{count}} minuter'
  },
  xMinutes: {
    singular: 'en minut',
    plural: '{{count}} minuter'
  },
  aboutXHours: {
    singular: 'ungefär en timme',
    plural: 'ungefär {{count}} timmar'
  },
  xHours: {
    singular: 'en timme',
    plural: '{{count}} timmar'
  },
  xDays: {
    singular: 'en dag',
    plural: '{{count}} dagar'
  },
  aboutXWeeks: {
    singular: 'ungefär en vecka',
    plural: 'ungefär {{count}} vecka'
  },
  xWeeks: {
    singular: 'en vecka',
    plural: '{{count}} vecka'
  },
  aboutXMonths: {
    singular: 'ungefär en månad',
    plural: 'ungefär {{count}} månader'
  },
  xMonths: {
    singular: 'en månad',
    plural: '{{count}} månader'
  },
  aboutXYears: {
    singular: 'ungefär ett år',
    plural: 'ungefär {{count}} år'
  },
  xYears: {
    singular: 'ett år',
    plural: '{{count}} år'
  },
  overXYears: {
    singular: 'över ett år',
    plural: 'över {{count}} år'
  },
  almostXYears: {
    singular: 'nästan ett år',
    plural: 'nästan {{count}} år'
  }
};
var wordMapping$1 = ['noll', 'en', 'två', 'tre', 'fyra', 'fem', 'sex', 'sju', 'åtta', 'nio', 'tio', 'elva', 'tolv'];
function formatDistance$o(token, count, options) {
  options = options || {
    onlyNumeric: false
  };
  var translation = formatDistanceLocale$n[token];
  var result;

  if (typeof translation === 'string') {
    result = translation;
  } else if (count === 0 || count > 1) {
    if (options.onlyNumeric) {
      result = translation.plural.replace('{{count}}', count);
    } else {
      result = translation.plural.replace('{{count}}', count < 13 ? wordMapping$1[count] : count);
    }
  } else {
    result = translation.singular;
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'om ' + result;
    } else {
      return result + ' sedan';
    }
  }

  return result;
}

var dateFormats$p = {
  full: 'EEEE d MMMM y',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'y-MM-dd'
};
var timeFormats$p = {
  full: "'kl'. HH:mm:ss zzzz",
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$p = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$p = {
  date: buildFormatLongFn({
    formats: dateFormats$p,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$p,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$p,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$o = {
  lastWeek: "'i' EEEE's kl.' p",
  yesterday: "'igår kl.' p",
  today: "'idag kl.' p",
  tomorrow: "'imorgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: 'P'
};
function formatRelative$o(token, _date, _baseDate, _options) {
  return formatRelativeLocale$o[token];
}

var eraValues$o = {
  narrow: ['f.Kr.', 'e.Kr.'],
  abbreviated: ['f.Kr.', 'e.Kr.'],
  wide: ['före Kristus', 'efter Kristus']
};
var quarterValues$o = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1:a kvartalet', '2:a kvartalet', '3:e kvartalet', '4:e kvartalet']
};
var monthValues$o = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['jan.', 'feb.', 'mars', 'apr.', 'maj', 'juni', 'juli', 'aug.', 'sep.', 'okt.', 'nov.', 'dec.'],
  wide: ['januari', 'februari', 'mars', 'april', 'maj', 'juni', 'juli', 'augusti', 'september', 'oktober', 'november', 'december']
};
var dayValues$o = {
  narrow: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  short: ['sö', 'må', 'ti', 'on', 'to', 'fr', 'lö'],
  abbreviated: ['sön', 'mån', 'tis', 'ons', 'tor', 'fre', 'lör'],
  wide: ['söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag'] // https://www.unicode.org/cldr/charts/32/summary/sv.html#1888

};
var dayPeriodValues$o = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morg.',
    afternoon: 'efterm.',
    evening: 'kväll',
    night: 'natt'
  },
  abbreviated: {
    am: 'f.m.',
    pm: 'e.m.',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'efterm.',
    evening: 'kväll',
    night: 'natt'
  },
  wide: {
    am: 'förmiddag',
    pm: 'eftermiddag',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'morgon',
    afternoon: 'eftermiddag',
    evening: 'kväll',
    night: 'natt'
  }
};
var formattingDayPeriodValues$h = {
  narrow: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på efterm.',
    evening: 'på kvällen',
    night: 'på natten'
  },
  abbreviated: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morg.',
    afternoon: 'på efterm.',
    evening: 'på kvällen',
    night: 'på natten'
  },
  wide: {
    am: 'fm',
    pm: 'em',
    midnight: 'midnatt',
    noon: 'middag',
    morning: 'på morgonen',
    afternoon: 'på eftermiddagen',
    evening: 'på kvällen',
    night: 'på natten'
  }
};

function ordinalNumber$o(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
      case 2:
        return number + ':a';
    }
  }

  return number + ':e';
}

var localize$o = {
  ordinalNumber: ordinalNumber$o,
  era: buildLocalizeFn({
    values: eraValues$o,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$o,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$o,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$o,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$o,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$h,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$o = /^(\d+)(:a|:e)?/i;
var parseOrdinalNumberPattern$o = /\d+/i;
var matchEraPatterns$o = {
  narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
};
var parseEraPatterns$o = {
  any: [/^f/i, /^[ev]/i]
};
var matchQuarterPatterns$o = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](:a|:e)? kvartalet/i
};
var parseQuarterPatterns$o = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$o = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|aug|sep|okt|nov|dec)\.?/i,
  wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
};
var parseMonthPatterns$o = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns$o = {
  narrow: /^[smtofl]/i,
  short: /^(sö|må|ti|on|to|fr|lö)/i,
  abbreviated: /^(sön|mån|tis|ons|tor|fre|lör)/i,
  wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
};
var parseDayPatterns$o = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var matchDayPeriodPatterns$o = {
  any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
};
var parseDayPeriodPatterns$o = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /eftermiddag/i,
    evening: /kväll/i,
    night: /natt/i
  }
};
var match$o = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$o,
    parsePattern: parseOrdinalNumberPattern$o,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$o,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$o,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$o,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$o,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$o,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$o,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$o,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Swedish locale.
 * @language Swedish
 * @iso-639-2 swe
 * @author Johannes Ulén [@ejulen]{@link https://github.com/ejulen}
 * @author Alexander Nanberg [@alexandernanberg]{@link https://github.com/alexandernanberg}
 * @author Henrik Andersson [@limelights]{@link https://github.com/limelights}
 */

var locale$p = {
  code: 'sv',
  formatDistance: formatDistance$o,
  formatLong: formatLong$p,
  formatRelative: formatRelative$o,
  localize: localize$o,
  match: match$o,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$o = {
  lessThanXSeconds: {
    one: 'น้อยกว่า 1 วินาที',
    other: 'น้อยกว่า {{count}} วินาที'
  },
  xSeconds: {
    one: '1 วินาที',
    other: '{{count}} วินาที'
  },
  halfAMinute: 'ครึ่งนาที',
  lessThanXMinutes: {
    one: 'น้อยกว่า 1 นาที',
    other: 'น้อยกว่า {{count}} นาที'
  },
  xMinutes: {
    one: '1 นาที',
    other: '{{count}} นาที'
  },
  aboutXHours: {
    one: 'ประมาณ 1 ชั่วโมง',
    other: 'ประมาณ {{count}} ชั่วโมง'
  },
  xHours: {
    one: '1 ชั่วโมง',
    other: '{{count}} ชั่วโมง'
  },
  xDays: {
    one: '1 วัน',
    other: '{{count}} วัน'
  },
  aboutXWeeks: {
    one: 'ประมาณ 1 สัปดาห์',
    other: 'ประมาณ {{count}} สัปดาห์'
  },
  xWeeks: {
    one: '1 สัปดาห์',
    other: '{{count}} สัปดาห์'
  },
  aboutXMonths: {
    one: 'ประมาณ 1 เดือน',
    other: 'ประมาณ {{count}} เดือน'
  },
  xMonths: {
    one: '1 เดือน',
    other: '{{count}} เดือน'
  },
  aboutXYears: {
    one: 'ประมาณ 1 ปี',
    other: 'ประมาณ {{count}} ปี'
  },
  xYears: {
    one: '1 ปี',
    other: '{{count}} ปี'
  },
  overXYears: {
    one: 'มากกว่า 1 ปี',
    other: 'มากกว่า {{count}} ปี'
  },
  almostXYears: {
    one: 'เกือบ 1 ปี',
    other: 'เกือบ {{count}} ปี'
  }
};
function formatDistance$p(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$o[token] === 'string') {
    result = formatDistanceLocale$o[token];
  } else if (count === 1) {
    result = formatDistanceLocale$o[token].one;
  } else {
    result = formatDistanceLocale$o[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      if (token === 'halfAMinute') {
        return 'ใน' + result;
      } else {
        return 'ใน ' + result;
      }
    } else {
      return result + 'ที่ผ่านมา';
    }
  }

  return result;
}

var dateFormats$q = {
  full: 'วันEEEEที่ do MMMM y',
  long: 'do MMMM y',
  medium: 'd MMM y',
  short: 'dd/MM/yyyy'
};
var timeFormats$q = {
  full: 'H:mm:ss น. zzzz',
  long: 'H:mm:ss น. z',
  medium: 'H:mm:ss น.',
  short: 'H:mm น.'
};
var dateTimeFormats$q = {
  full: "{{date}} 'เวลา' {{time}}",
  long: "{{date}} 'เวลา' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$q = {
  date: buildFormatLongFn({
    formats: dateFormats$q,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$q,
    defaultWidth: 'medium'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$q,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$p = {
  lastWeek: "eeee'ที่แล้วเวลา' p",
  yesterday: "'เมื่อวานนี้เวลา' p",
  today: "'วันนี้เวลา' p",
  tomorrow: "'พรุ่งนี้เวลา' p",
  nextWeek: "eeee 'เวลา' p",
  other: 'P'
};
function formatRelative$p(token, _date, _baseDate, _options) {
  return formatRelativeLocale$p[token];
}

var eraValues$p = {
  narrow: ['B', 'คศ'],
  abbreviated: ['BC', 'ค.ศ.'],
  wide: ['ปีก่อนคริสตกาล', 'คริสต์ศักราช']
};
var quarterValues$p = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['ไตรมาสแรก', 'ไตรมาสที่สอง', 'ไตรมาสที่สาม', 'ไตรมาสที่สี่']
};
var dayValues$p = {
  narrow: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  short: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  abbreviated: ['อา.', 'จ.', 'อ.', 'พ.', 'พฤ.', 'ศ.', 'ส.'],
  wide: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์']
};
var monthValues$p = {
  narrow: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
  abbreviated: ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'],
  wide: ['มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน', 'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม']
};
var dayPeriodValues$p = {
  narrow: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  },
  abbreviated: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  },
  wide: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'เช้า',
    afternoon: 'บ่าย',
    evening: 'เย็น',
    night: 'กลางคืน'
  }
};
var formattingDayPeriodValues$i = {
  narrow: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  },
  abbreviated: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  },
  wide: {
    am: 'ก่อนเที่ยง',
    pm: 'หลังเที่ยง',
    midnight: 'เที่ยงคืน',
    noon: 'เที่ยง',
    morning: 'ตอนเช้า',
    afternoon: 'ตอนกลางวัน',
    evening: 'ตอนเย็น',
    night: 'ตอนกลางคืน'
  }
};

function ordinalNumber$p(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number;
}

var localize$p = {
  ordinalNumber: ordinalNumber$p,
  era: buildLocalizeFn({
    values: eraValues$p,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$p,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$p,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$p,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$p,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$i,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$p = /^\d+/i;
var parseOrdinalNumberPattern$p = /\d+/i;
var matchEraPatterns$p = {
  narrow: /^([bB]|[aA]|คศ)/i,
  abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
  wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
};
var parseEraPatterns$p = {
  any: [/^[bB]/i, /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i]
};
var matchQuarterPatterns$p = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^ไตรมาส(ที่)? ?[1234]/i
};
var parseQuarterPatterns$p = {
  any: [/(1|แรก|หนึ่ง)/i, /(2|สอง)/i, /(3|สาม)/i, /(4|สี่)/i]
};
var matchMonthPatterns$p = {
  narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
  abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
  wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
};
var parseMonthPatterns$p = {
  wide: [/^มก/i, /^กุม/i, /^มี/i, /^เม/i, /^พฤษ/i, /^มิ/i, /^กรก/i, /^ส/i, /^กัน/i, /^ต/i, /^พฤศ/i, /^ธ/i],
  any: [/^ม\.?ค\.?/i, /^ก\.?พ\.?/i, /^มี\.?ค\.?/i, /^เม\.?ย\.?/i, /^พ\.?ค\.?/i, /^มิ\.?ย\.?/i, /^ก\.?ค\.?/i, /^ส\.?ค\.?/i, /^ก\.?ย\.?/i, /^ต\.?ค\.?/i, /^พ\.?ย\.?/i, /^ธ\.?ค\.?/i]
};
var matchDayPatterns$p = {
  narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
};
var parseDayPatterns$p = {
  wide: [/^อา/i, /^จั/i, /^อั/i, /^พุธ/i, /^พฤ/i, /^ศ/i, /^เส/i],
  any: [/^อา/i, /^จ/i, /^อ/i, /^พ(?!ฤ)/i, /^พฤ/i, /^ศ/i, /^ส/i]
};
var matchDayPeriodPatterns$p = {
  any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
};
var parseDayPeriodPatterns$p = {
  any: {
    am: /^ก่อนเที่ยง/i,
    pm: /^หลังเที่ยง/i,
    midnight: /^เที่ยงคืน/i,
    noon: /^เที่ยง/i,
    morning: /เช้า/i,
    afternoon: /บ่าย/i,
    evening: /เย็น/i,
    night: /กลางคืน/i
  }
};
var match$p = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$p,
    parsePattern: parseOrdinalNumberPattern$p,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$p,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$p,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$p,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$p,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$p,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$p,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$p,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Thai locale.
 * @language Thai
 * @iso-639-2 tha
 * @author Athiwat Hirunworawongkun [@athivvat]{@link https://github.com/athivvat}
 * @author [@hawkup]{@link https://github.com/hawkup}
 * @author  Jirawat I. [@nodtem66]{@link https://github.com/nodtem66}
 */

var locale$q = {
  code: 'th',
  formatDistance: formatDistance$p,
  formatLong: formatLong$q,
  formatRelative: formatRelative$p,
  localize: localize$p,
  match: match$p,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$p = {
  lessThanXSeconds: {
    one: 'bir saniyeden az',
    other: '{{count}} saniyeden az'
  },
  xSeconds: {
    one: '1 saniye',
    other: '{{count}} saniye'
  },
  halfAMinute: 'yarım dakika',
  lessThanXMinutes: {
    one: 'bir dakikadan az',
    other: '{{count}} dakikadan az'
  },
  xMinutes: {
    one: '1 dakika',
    other: '{{count}} dakika'
  },
  aboutXHours: {
    one: 'yaklaşık 1 saat',
    other: 'yaklaşık {{count}} saat'
  },
  xHours: {
    one: '1 saat',
    other: '{{count}} saat'
  },
  xDays: {
    one: '1 gün',
    other: '{{count}} gün'
  },
  aboutXWeeks: {
    one: 'yaklaşık 1 hafta',
    other: 'yaklaşık {{count}} hafta'
  },
  xWeeks: {
    one: '1 hafta',
    other: '{{count}} hafta'
  },
  aboutXMonths: {
    one: 'yaklaşık 1 ay',
    other: 'yaklaşık {{count}} ay'
  },
  xMonths: {
    one: '1 ay',
    other: '{{count}} ay'
  },
  aboutXYears: {
    one: 'yaklaşık 1 yıl',
    other: 'yaklaşık {{count}} yıl'
  },
  xYears: {
    one: '1 yıl',
    other: '{{count}} yıl'
  },
  overXYears: {
    one: '1 yıldan fazla',
    other: '{{count}} yıldan fazla'
  },
  almostXYears: {
    one: 'neredeyse 1 yıl',
    other: 'neredeyse {{count}} yıl'
  }
};
function formatDistance$q(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$p[token] === 'string') {
    result = formatDistanceLocale$p[token];
  } else if (count === 1) {
    result = formatDistanceLocale$p[token].one;
  } else {
    result = formatDistanceLocale$p[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + ' sonra';
    } else {
      return result + ' önce';
    }
  }

  return result;
}

var dateFormats$r = {
  full: 'd MMMM y EEEE',
  long: 'd MMMM y',
  medium: 'd MMM y',
  short: 'dd.MM.yyyy'
};
var timeFormats$r = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$r = {
  full: "{{date}} 'saat' {{time}}",
  long: "{{date}} 'saat' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$r = {
  date: buildFormatLongFn({
    formats: dateFormats$r,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$r,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$r,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$q = {
  lastWeek: "'geçen hafta' eeee 'saat' p",
  yesterday: "'dün saat' p",
  today: "'bugün saat' p",
  tomorrow: "'yarın saat' p",
  nextWeek: "eeee 'saat' p",
  other: 'P'
};
function formatRelative$q(token, _date, _baseDate, _options) {
  return formatRelativeLocale$q[token];
}

var eraValues$q = {
  abbreviated: ['MÖ', 'MS'],
  narrow: ['MÖ', 'MS'],
  wide: ['Milattan Önce', 'Milattan Sonra']
};
var quarterValues$q = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1Ç', '2Ç', '3Ç', '4Ç'],
  wide: ['İlk çeyrek', 'İkinci Çeyrek', 'Üçüncü çeyrek', 'Son çeyrek']
};
var monthValues$q = {
  narrow: ['O', 'Ş', 'M', 'N', 'M', 'H', 'T', 'A', 'E', 'E', 'K', 'A'],
  abbreviated: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
  wide: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık']
};
var dayValues$q = {
  narrow: ['P', 'P', 'S', 'Ç', 'P', 'C', 'C'],
  short: ['Pz', 'Pt', 'Sa', 'Ça', 'Pe', 'Cu', 'Ct'],
  abbreviated: ['Paz', 'Pts', 'Sal', 'Çar', 'Per', 'Cum', 'Cts'],
  wide: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi']
};
var dayPeriodValues$q = {
  narrow: {
    am: 'öö',
    pm: 'ös',
    midnight: 'gy',
    noon: 'ö',
    morning: 'sa',
    afternoon: 'ös',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: 'ÖÖ',
    pm: 'ÖS',
    midnight: 'gece yarısı',
    noon: 'öğle',
    morning: 'sabah',
    afternoon: 'öğleden sonra',
    evening: 'akşam',
    night: 'gece'
  },
  wide: {
    am: 'Ö.Ö.',
    pm: 'Ö.S.',
    midnight: 'gece yarısı',
    noon: 'öğle',
    morning: 'sabah',
    afternoon: 'öğleden sonra',
    evening: 'akşam',
    night: 'gece'
  }
};
var formattingDayPeriodValues$j = {
  narrow: {
    am: 'öö',
    pm: 'ös',
    midnight: 'gy',
    noon: 'ö',
    morning: 'sa',
    afternoon: 'ös',
    evening: 'ak',
    night: 'ge'
  },
  abbreviated: {
    am: 'ÖÖ',
    pm: 'ÖS',
    midnight: 'gece yarısı',
    noon: 'öğlen',
    morning: 'sabahleyin',
    afternoon: 'öğleden sonra',
    evening: 'akşamleyin',
    night: 'geceleyin'
  },
  wide: {
    am: 'ö.ö.',
    pm: 'ö.s.',
    midnight: 'gece yarısı',
    noon: 'öğlen',
    morning: 'sabahleyin',
    afternoon: 'öğleden sonra',
    evening: 'akşamleyin',
    night: 'geceleyin'
  }
};

function ordinalNumber$q(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber);
  return number + '.';
}

var localize$q = {
  ordinalNumber: ordinalNumber$q,
  era: buildLocalizeFn({
    values: eraValues$q,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$q,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$q,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$q,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$q,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$j,
    defaulFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$q = /^(\d+)(\.)?/i;
var parseOrdinalNumberPattern$q = /\d+/i;
var matchEraPatterns$q = {
  narrow: /^(mö|ms)/i,
  abbreviated: /^(mö|ms)/i,
  wide: /^(milattan önce|milattan sonra)/i
};
var parseEraPatterns$q = {
  any: [/(^mö|^milattan önce)/i, /(^ms|^milattan sonra)/i]
};
var matchQuarterPatterns$q = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]ç/i,
  wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
};
var parseQuarterPatterns$q = {
  any: [/1/i, /2/i, /3/i, /4/i],
  abbreviated: [/1ç/i, /2ç/i, /3ç/i, /4ç/i],
  wide: [/^(i|İ)lk çeyrek/i, /(i|İ)kinci çeyrek/i, /üçüncü çeyrek/i, /son çeyrek/i]
};
var matchMonthPatterns$q = {
  narrow: /^[oşmnhtaek]/i,
  abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
  wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
};
var parseMonthPatterns$q = {
  narrow: [/^o/i, /^ş/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
  any: [/^o/i, /^ş/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^ağ/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
};
var matchDayPatterns$q = {
  narrow: /^[psçc]/i,
  short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
  abbreviated: /^(paz|pts|sal|çar|per|cum|cts)/i,
  wide: /^(pazar|pazartesi|salı|çarşamba|perşembe|cuma|cumartesi)/i
};
var parseDayPatterns$q = {
  narrow: [/^p/i, /^p/i, /^s/i, /^ç/i, /^p/i, /^c/i, /^c/i],
  any: [/^pz/i, /^pt/i, /^sa/i, /^ça/i, /^pe/i, /^cu/i, /^ct/i],
  wide: [/^pazar/i, /^pazartesi/i, /^salı/i, /^çarşamba/i, /^perşembe/i, /^cuma/i, /cumartesi/i]
};
var matchDayPeriodPatterns$q = {
  narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
  any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
};
var parseDayPeriodPatterns$q = {
  any: {
    am: /^ö\.?ö\.?/i,
    pm: /^ö\.?s\.?/i,
    midnight: /^(gy|gece yarısı)/i,
    noon: /^öğ/i,
    morning: /^sa/i,
    afternoon: /^öğleden sonra/i,
    evening: /^ak/i,
    night: /^ge/i
  }
};
var match$q = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$q,
    parsePattern: parseOrdinalNumberPattern$q,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$q,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$q,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$q,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$q,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$q,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$q,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$q,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Turkish locale.
 * @language Turkish
 * @iso-639-2 tur
 * @author Alpcan Aydın [@alpcanaydin]{@link https://github.com/alpcanaydin}
 * @author Berkay Sargın [@berkaey]{@link https://github.com/berkaey}
 * @author Ismail Demirbilek [@dbtek]{@link https://github.com/dbtek}
 * @author İsmail Kayar [@ikayar]{@link https://github.com/ikayar}
 *
 *
 */

var locale$r = {
  code: 'tr',
  formatDistance: formatDistance$q,
  formatLong: formatLong$r,
  formatRelative: formatRelative$q,
  localize: localize$q,
  match: match$q,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

function declension$3(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  var rem10 = count % 10;
  var rem100 = count % 100; // 1, 21, 31, ...

  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace('{{count}}', count); // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace('{{count}}', count); // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace('{{count}}', count);
  }
}

function buildLocalizeTokenFn$1(scheme) {
  return function (count, options) {
    if (options.addSuffix) {
      if (options.comparison > 0) {
        if (scheme.future) {
          return declension$3(scheme.future, count);
        } else {
          return 'за ' + declension$3(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$3(scheme.past, count);
        } else {
          return declension$3(scheme.regular, count) + ' тому';
        }
      }
    } else {
      return declension$3(scheme.regular, count);
    }
  };
}

var formatDistanceLocale$q = {
  lessThanXSeconds: buildLocalizeTokenFn$1({
    regular: {
      one: 'менше секунди',
      singularNominative: 'менше {{count}} секунди',
      singularGenitive: 'менше {{count}} секунд',
      pluralGenitive: 'менше {{count}} секунд'
    },
    future: {
      one: 'менше, ніж за секунду',
      singularNominative: 'менше, ніж за {{count}} секунду',
      singularGenitive: 'менше, ніж за {{count}} секунди',
      pluralGenitive: 'менше, ніж за {{count}} секунд'
    }
  }),
  xSeconds: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} секунда',
      singularGenitive: '{{count}} секунди',
      pluralGenitive: '{{count}} секунд'
    },
    past: {
      singularNominative: '{{count}} секунду тому',
      singularGenitive: '{{count}} секунди тому',
      pluralGenitive: '{{count}} секунд тому'
    },
    future: {
      singularNominative: 'за {{count}} секунду',
      singularGenitive: 'за {{count}} секунди',
      pluralGenitive: 'за {{count}} секунд'
    }
  }),
  halfAMinute: function halfAMinute(_, options) {
    if (options.addSuffix) {
      if (options.comparison > 0) {
        return 'за півхвилини';
      } else {
        return 'півхвилини тому';
      }
    }

    return 'півхвилини';
  },
  lessThanXMinutes: buildLocalizeTokenFn$1({
    regular: {
      one: 'менше хвилини',
      singularNominative: 'менше {{count}} хвилини',
      singularGenitive: 'менше {{count}} хвилин',
      pluralGenitive: 'менше {{count}} хвилин'
    },
    future: {
      one: 'менше, ніж за хвилину',
      singularNominative: 'менше, ніж за {{count}} хвилину',
      singularGenitive: 'менше, ніж за {{count}} хвилини',
      pluralGenitive: 'менше, ніж за {{count}} хвилин'
    }
  }),
  xMinutes: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} хвилина',
      singularGenitive: '{{count}} хвилини',
      pluralGenitive: '{{count}} хвилин'
    },
    past: {
      singularNominative: '{{count}} хвилину тому',
      singularGenitive: '{{count}} хвилини тому',
      pluralGenitive: '{{count}} хвилин тому'
    },
    future: {
      singularNominative: 'за {{count}} хвилину',
      singularGenitive: 'за {{count}} хвилини',
      pluralGenitive: 'за {{count}} хвилин'
    }
  }),
  aboutXHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'близько {{count}} години',
      singularGenitive: 'близько {{count}} годин',
      pluralGenitive: 'близько {{count}} годин'
    },
    future: {
      singularNominative: 'приблизно за {{count}} годину',
      singularGenitive: 'приблизно за {{count}} години',
      pluralGenitive: 'приблизно за {{count}} годин'
    }
  }),
  xHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} годину',
      singularGenitive: '{{count}} години',
      pluralGenitive: '{{count}} годин'
    }
  }),
  xDays: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} день',
      singularGenitive: '{{count}} дня',
      pluralGenitive: '{{count}} днів'
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'близько {{count}} тижня',
      singularGenitive: 'близько {{count}} тижнів',
      pluralGenitive: 'близько {{count}} тижнів'
    },
    future: {
      singularNominative: 'приблизно за {{count}} тиждень',
      singularGenitive: 'приблизно за {{count}} тижні',
      pluralGenitive: 'приблизно за {{count}} тижні'
    }
  }),
  xWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} тиждень',
      singularGenitive: '{{count}} тижня',
      pluralGenitive: '{{count}} тижні'
    }
  }),
  aboutXMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'близько {{count}} місяця',
      singularGenitive: 'близько {{count}} місяців',
      pluralGenitive: 'близько {{count}} місяців'
    },
    future: {
      singularNominative: 'приблизно за {{count}} місяць',
      singularGenitive: 'приблизно за {{count}} місяця',
      pluralGenitive: 'приблизно за {{count}} місяців'
    }
  }),
  xMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} місяць',
      singularGenitive: '{{count}} місяця',
      pluralGenitive: '{{count}} місяців'
    }
  }),
  aboutXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'близько {{count}} року',
      singularGenitive: 'близько {{count}} років',
      pluralGenitive: 'близько {{count}} років'
    },
    future: {
      singularNominative: 'приблизно за {{count}} рік',
      singularGenitive: 'приблизно за {{count}} роки',
      pluralGenitive: 'приблизно за {{count}} років'
    }
  }),
  xYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: '{{count}} рік',
      singularGenitive: '{{count}} роки',
      pluralGenitive: '{{count}} років'
    }
  }),
  overXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'більше {{count}} року',
      singularGenitive: 'більше {{count}} років',
      pluralGenitive: 'більше {{count}} років'
    },
    future: {
      singularNominative: 'більше, ніж за {{count}} рік',
      singularGenitive: 'більше, ніж за {{count}} роки',
      pluralGenitive: 'більше, ніж за {{count}} років'
    }
  }),
  almostXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: 'майже {{count}} рік',
      singularGenitive: 'майже {{count}} роки',
      pluralGenitive: 'майже {{count}} років'
    },
    future: {
      singularNominative: 'майже за {{count}} рік',
      singularGenitive: 'майже за {{count}} роки',
      pluralGenitive: 'майже за {{count}} років'
    }
  })
};
function formatDistance$r(token, count, options) {
  options = options || {};
  return formatDistanceLocale$q[token](count, options);
}

var dateFormats$s = {
  full: "EEEE, do MMMM y 'р.'",
  long: "do MMMM y 'р.'",
  medium: "d MMM y 'р.'",
  short: 'dd.MM.y'
};
var timeFormats$s = {
  full: 'H:mm:ss zzzz',
  long: 'H:mm:ss z',
  medium: 'H:mm:ss',
  short: 'H:mm'
};
var dateTimeFormats$s = {
  full: "{{date}} 'о' {{time}}",
  long: "{{date}} 'о' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong$s = {
  date: buildFormatLongFn({
    formats: dateFormats$s,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$s,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$s,
    defaultWidth: 'full'
  })
};

var accusativeWeekdays$4 = ['неділю', 'понеділок', 'вівторок', 'середу', 'четвер', 'п’ятницю', 'суботу'];

function _lastWeek$3(day) {
  var weekday = accusativeWeekdays$4[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у минулу " + weekday + " о' p";

    case 1:
    case 2:
    case 4:
      return "'у минулий " + weekday + " о' p";
  }
}

function thisWeek$3(day) {
  var weekday = accusativeWeekdays$4[day];
  return "'у " + weekday + " о' p";
}

function _nextWeek$3(day) {
  var weekday = accusativeWeekdays$4[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'у наступну " + weekday + " о' p";

    case 1:
    case 2:
    case 4:
      return "'у наступний " + weekday + " о' p";
  }
}

var formatRelativeLocale$r = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return _lastWeek$3(day);
    }
  },
  yesterday: "'вчора о' p",
  today: "'сьогодні о' p",
  tomorrow: "'завтра о' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();

    if (isSameUTCWeek(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return _nextWeek$3(day);
    }
  },
  other: 'P'
};
function formatRelative$r(token, date, baseDate, options) {
  var format = formatRelativeLocale$r[token];

  if (typeof format === 'function') {
    return format(date, baseDate, options);
  }

  return format;
}

var eraValues$r = {
  narrow: ['до н.е.', 'н.е.'],
  abbreviated: ['до н. е.', 'н. е.'],
  wide: ['до нашої ери', 'нашої ери']
};
var quarterValues$r = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['1-й кв.', '2-й кв.', '3-й кв.', '4-й кв.'],
  wide: ['1-й квартал', '2-й квартал', '3-й квартал', '4-й квартал']
};
var monthValues$r = {
  // ДСТУ 3582:2013
  narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
  abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
  wide: ['січень', 'лютий', 'березень', 'квітень', 'травень', 'червень', 'липень', 'серпень', 'вересень', 'жовтень', 'листопад', 'грудень']
};
var formattingMonthValues$5 = {
  narrow: ['С', 'Л', 'Б', 'К', 'Т', 'Ч', 'Л', 'С', 'В', 'Ж', 'Л', 'Г'],
  abbreviated: ['січ.', 'лют.', 'берез.', 'квіт.', 'трав.', 'черв.', 'лип.', 'серп.', 'верес.', 'жовт.', 'листоп.', 'груд.'],
  wide: ['січня', 'лютого', 'березня', 'квітня', 'травня', 'червня', 'липня', 'серпня', 'вересня', 'жовтня', 'листопада', 'грудня']
};
var dayValues$r = {
  narrow: ['Н', 'П', 'В', 'С', 'Ч', 'П', 'С'],
  short: ['нд', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  abbreviated: ['нед', 'пон', 'вів', 'сер', 'чтв', 'птн', 'суб'],
  wide: ['неділя', 'понеділок', 'вівторок', 'середа', 'четвер', 'п’ятниця', 'субота']
};
var dayPeriodValues$r = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ніч'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'веч.',
    night: 'ніч'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'північ',
    noon: 'полудень',
    morning: 'ранок',
    afternoon: 'день',
    evening: 'вечір',
    night: 'ніч'
  }
};
var formattingDayPeriodValues$k = {
  narrow: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  },
  abbreviated: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'півн.',
    noon: 'пол.',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  },
  wide: {
    am: 'ДП',
    pm: 'ПП',
    midnight: 'північ',
    noon: 'полудень',
    morning: 'ранку',
    afternoon: 'дня',
    evening: 'веч.',
    night: 'ночі'
  }
};

function ordinalNumber$r(dirtyNumber, dirtyOptions) {
  var options = dirtyOptions || {};
  var unit = String(options.unit);
  var suffix;

  if (unit === 'date') {
    if (dirtyNumber === 3 || dirtyNumber === 23) {
      suffix = '-є';
    } else {
      suffix = '-е';
    }
  } else if (unit === 'minute' || unit === 'second' || unit === 'hour') {
    suffix = '-а';
  } else {
    suffix = '-й';
  }

  return dirtyNumber + suffix;
}

var localize$r = {
  ordinalNumber: ordinalNumber$r,
  era: buildLocalizeFn({
    values: eraValues$r,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$r,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$r,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$5,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$r,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$r,
    defaultWidth: 'any',
    formattingValues: formattingDayPeriodValues$k,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$r = /^(\d+)(-?(е|й|є|а|я))?/i;
var parseOrdinalNumberPattern$r = /\d+/i;
var matchEraPatterns$r = {
  narrow: /^((до )?н\.?\s?е\.?)/i,
  abbreviated: /^((до )?н\.?\s?е\.?)/i,
  wide: /^(до нашої ери|нашої ери|наша ера)/i
};
var parseEraPatterns$r = {
  any: [/^д/i, /^н/i]
};
var matchQuarterPatterns$r = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
  wide: /^[1234](-?[иі]?й?)? квартал/i
};
var parseQuarterPatterns$r = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns$r = {
  narrow: /^[слбктчвжг]/i,
  abbreviated: /^(січ|лют|бер|берез|кві|трав?|чер|лип|сер|вер|жов|лис(топ)?|груд)\.?/i,
  wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопада?|грудень|грудня)/i
};
var parseMonthPatterns$r = {
  narrow: [/^с/i, /^л/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^с/i, /^в/i, /^ж/i, /^л/i, /^г/i],
  any: [/^сі/i, /^лю/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^лип/i, /^се/i, /^в/i, /^ж/i, /^лис/i, /^г/i]
};
var matchDayPatterns$r = {
  narrow: /^[нпвсч]/i,
  short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
  abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
  wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
};
var parseDayPatterns$r = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[он]/i, /^в/i, /^с[ер]/i, /^ч/i, /^п\W*?[ят]/i, /^с[уб]/i]
};
var matchDayPeriodPatterns$r = {
  narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
};
var parseDayPeriodPatterns$r = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^півн/i,
    noon: /^пол/i,
    morning: /^р/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var match$r = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$r,
    parsePattern: parseOrdinalNumberPattern$r,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$r,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$r,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$r,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$r,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$r,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPeriodPatterns$r,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Ukrainian locale.
 * @language Ukrainian
 * @iso-639-2 ukr
 * @author Andrii Korzh [@korzhyk]{@link https://github.com/korzhyk}
 * @author Andriy Shcherbyak [@shcherbyakdev]{@link https://github.com/shcherbyakdev}
 */

var locale$s = {
  code: 'uk',
  formatDistance: formatDistance$r,
  formatLong: formatLong$s,
  formatRelative: formatRelative$r,
  localize: localize$r,
  match: match$r,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
  }
};

var formatDistanceLocale$r = {
  lessThanXSeconds: {
    one: 'dưới 1 giây',
    other: 'dưới {{count}} giây'
  },
  xSeconds: {
    one: '1 giây',
    other: '{{count}} giây'
  },
  halfAMinute: 'nửa phút',
  lessThanXMinutes: {
    one: 'dưới 1 phút',
    other: 'dưới {{count}} phút'
  },
  xMinutes: {
    one: '1 phút',
    other: '{{count}} phút'
  },
  aboutXHours: {
    one: 'khoảng 1 giờ',
    other: 'khoảng {{count}} giờ'
  },
  xHours: {
    one: '1 giờ',
    other: '{{count}} giờ'
  },
  xDays: {
    one: '1 ngày',
    other: '{{count}} ngày'
  },
  aboutXWeeks: {
    one: 'khoảng 1 tuần',
    other: 'khoảng {{count}} tuần'
  },
  xWeeks: {
    one: '1 tuần',
    other: '{{count}} tuần'
  },
  aboutXMonths: {
    one: 'khoảng 1 tháng',
    other: 'khoảng {{count}} tháng'
  },
  xMonths: {
    one: '1 tháng',
    other: '{{count}} tháng'
  },
  aboutXYears: {
    one: 'khoảng 1 năm',
    other: 'khoảng {{count}} năm'
  },
  xYears: {
    one: '1 năm',
    other: '{{count}} năm'
  },
  overXYears: {
    one: 'hơn 1 năm',
    other: 'hơn {{count}} năm'
  },
  almostXYears: {
    one: 'gần 1 năm',
    other: 'gần {{count}} năm'
  }
};
function formatDistance$s(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$r[token] === 'string') {
    result = formatDistanceLocale$r[token];
  } else if (count === 1) {
    result = formatDistanceLocale$r[token].one;
  } else {
    result = formatDistanceLocale$r[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + ' nữa';
    } else {
      return result + ' trước';
    }
  }

  return result;
}

var dateFormats$t = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017
  full: "EEEE, 'ngày' d MMMM 'năm' y",
  // ngày 25 tháng 08 năm 2017
  long: "'ngày' d MMMM 'năm' y",
  // 25 thg 08 năm 2017
  medium: "d MMM 'năm' y",
  // 25/08/2017
  short: 'dd/MM/y'
};
var timeFormats$t = {
  full: 'HH:mm:ss zzzz',
  long: 'HH:mm:ss z',
  medium: 'HH:mm:ss',
  short: 'HH:mm'
};
var dateTimeFormats$t = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
  full: '{{date}} {{time}}',
  // ngày 25 tháng 08 năm 2017 23:25
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$t = {
  date: buildFormatLongFn({
    formats: dateFormats$t,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$t,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$t,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$s = {
  lastWeek: "eeee 'tuần trước vào lúc' p",
  yesterday: "'hôm qua vào lúc' p",
  today: "'hôm nay vào lúc' p",
  tomorrow: "'ngày mai vào lúc' p",
  nextWeek: "eeee 'tới vào lúc' p",
  other: 'P'
};
function formatRelative$s(token, _date, _baseDate, _options) {
  return formatRelativeLocale$s[token];
}

// Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134

var eraValues$s = {
  narrow: ['TCN', 'SCN'],
  abbreviated: ['trước CN', 'sau CN'],
  wide: ['trước Công Nguyên', 'sau Công Nguyên']
};
var quarterValues$s = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['Quý 1', 'Quý 2', 'Quý 3', 'Quý 4']
};
var formattingQuarterValues$1 = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  // I notice many news outlet use this "quý II/2018"
  wide: ['quý I', 'quý II', 'quý III', 'quý IV'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues$s = {
  narrow: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
  abbreviated: ['Thg 1', 'Thg 2', 'Thg 3', 'Thg 4', 'Thg 5', 'Thg 6', 'Thg 7', 'Thg 8', 'Thg 9', 'Thg 10', 'Thg 11', 'Thg 12'],
  wide: ['Tháng Một', 'Tháng Hai', 'Tháng Ba', 'Tháng Tư', 'Tháng Năm', 'Tháng Sáu', 'Tháng Bảy', 'Tháng Tám', 'Tháng Chín', 'Tháng Mười', 'Tháng Mười Một', 'Tháng Mười Hai'] // In Vietnamese date formatting, month number less than 10 expected to have leading zero

};
var formattingMonthValues$6 = {
  narrow: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
  abbreviated: ['thg 1', 'thg 2', 'thg 3', 'thg 4', 'thg 5', 'thg 6', 'thg 7', 'thg 8', 'thg 9', 'thg 10', 'thg 11', 'thg 12'],
  wide: ['tháng 01', 'tháng 02', 'tháng 03', 'tháng 04', 'tháng 05', 'tháng 06', 'tháng 07', 'tháng 08', 'tháng 09', 'tháng 10', 'tháng 11', 'tháng 12']
};
var dayValues$s = {
  narrow: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
  short: ['CN', 'Th 2', 'Th 3', 'Th 4', 'Th 5', 'Th 6', 'Th 7'],
  abbreviated: ['CN', 'Thứ 2', 'Thứ 3', 'Thứ 4', 'Thứ 5', 'Thứ 6', 'Thứ 7'],
  wide: ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'] // Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
  // `abbreviated` are just like English but I'm leaving the `wide`
  // format being localized with abbreviations found in some systems (SÁng / CHiều);
  // however, personally, I don't think `Chiều` sounds appropriate for `PM`

};
var dayPeriodValues$s = {
  // narrow date period is extremely rare in Vietnamese
  // I used abbreviated form for noon, morning and afternoon
  // which are regconizable by Vietnamese, others cannot be any shorter
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'nửa đêm',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 'tối',
    night: 'đêm'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  }
};
var formattingDayPeriodValues$l = {
  narrow: {
    am: 'am',
    pm: 'pm',
    midnight: 'nửa đêm',
    noon: 'tr',
    morning: 'sg',
    afternoon: 'ch',
    evening: 'tối',
    night: 'đêm'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'nửa đêm',
    noon: 'trưa',
    morning: 'sáng',
    afternoon: 'chiều',
    evening: 'tối',
    night: 'đêm'
  },
  wide: {
    am: 'SA',
    pm: 'CH',
    midnight: 'nửa đêm',
    noon: 'giữa trưa',
    morning: 'vào buổi sáng',
    afternoon: 'vào buổi chiều',
    evening: 'vào buổi tối',
    night: 'vào ban đêm'
  } // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'month', 'quarter', 'week', 'isoWeek', 'dayOfYear',
  // 'dayOfMonth' or 'dayOfWeek'

};

function ordinalNumber$s(dirtyNumber, dirtyOptions) {
  var options = dirtyOptions || {};
  var unit = String(options.unit);
  var number = parseInt(dirtyNumber, 10);

  if (unit === 'quarter') {
    // many news outlets use "quý I"...
    switch (number) {
      case 1:
        return 'I';

      case 2:
        return 'II';

      case 3:
        return 'III';

      case 4:
        return 'IV';
    }
  } else if (unit === 'day') {
    // day of week in Vietnamese has ordinal number meaning,
    // so we should use them, else it'll sound weird
    switch (number) {
      case 1:
        return 'thứ 2';
      // meaning 2nd day but it's the first day of the week :D

      case 2:
        return 'thứ 3';
      // meaning 3rd day

      case 3:
        return 'thứ 4';
      // meaning 4th day and so on

      case 4:
        return 'thứ 5';

      case 5:
        return 'thứ 6';

      case 6:
        return 'thứ 7';

      case 7:
        return 'chủ nhật';
      // meaning Sunday, there's no 8th day :D
    }
  } else if (unit === 'week') {
    if (number === 1) {
      return 'thứ nhất';
    } else {
      return 'thứ ' + number;
    }
  } else if (unit === 'dayOfYear') {
    if (number === 1) {
      return 'đầu tiên';
    } else {
      return 'thứ ' + number;
    }
  } // there are no different forms of ordinal numbers in Vietnamese


  return number;
}

var localize$s = {
  ordinalNumber: ordinalNumber$s,
  era: buildLocalizeFn({
    values: eraValues$s,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$s,
    defaultWidth: 'wide',
    formattingValues: formattingQuarterValues$1,
    defaultFormattingWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$s,
    defaultWidth: 'wide',
    formattingValues: formattingMonthValues$6,
    defaultFormattingWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$s,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$s,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$l,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$s = /^(\d+)/i;
var parseOrdinalNumberPattern$s = /\d+/i;
var matchEraPatterns$s = {
  narrow: /^(tcn|scn)/i,
  abbreviated: /^(trước CN|sau CN)/i,
  wide: /^(trước Công Nguyên|sau Công Nguyên)/i
};
var parseEraPatterns$s = {
  any: [/^t/i, /^s/i]
};
var matchQuarterPatterns$s = {
  narrow: /^([1234]|i{1,3}v?)/i,
  abbreviated: /^q([1234]|i{1,3}v?)/i,
  wide: /^quý ([1234]|i{1,3}v?)/i
};
var parseQuarterPatterns$s = {
  any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
};
var matchMonthPatterns$s = {
  // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
  // note the order of '1' since it is a sub-string of '10', so must be lower priority
  narrow: /^(0?[2-9]|10|11|12|0?1)/i,
  // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
  abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
  // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
  wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
};
var parseMonthPatterns$s = {
  narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
  abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
  wide: [/^tháng ?(Một|0?1(?!\d))/i, /^tháng ?(Hai|0?2)/i, /^tháng ?(Ba|0?3)/i, /^tháng ?(Tư|0?4)/i, /^tháng ?(Năm|0?5)/i, /^tháng ?(Sáu|0?6)/i, /^tháng ?(Bảy|0?7)/i, /^tháng ?(Tám|0?8)/i, /^tháng ?(Chín|0?9)/i, /^tháng ?(Mười|10)/i, /^tháng ?(Mười ?Một|11)/i, /^tháng ?(Mười ?Hai|12)/i]
};
var matchDayPatterns$s = {
  narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
  short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
};
var parseDayPatterns$s = {
  narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  wide: [/(Chủ|Chúa) ?Nhật/i, /Hai/i, /Ba/i, /Tư/i, /Năm/i, /Sáu/i, /Bảy/i]
};
var matchDayPeriodPatterns$s = {
  narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
};
var parseDayPeriodPatterns$s = {
  any: {
    am: /^(a|sa)/i,
    pm: /^(p|ch[^i]*)/i,
    midnight: /nửa đêm/i,
    noon: /trưa/i,
    morning: /sáng/i,
    afternoon: /chiều/i,
    evening: /tối/i,
    night: /^đêm/i
  }
};
var match$s = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$s,
    parsePattern: parseOrdinalNumberPattern$s,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$s,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$s,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$s,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$s,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$s,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$s,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$s,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Vietnamese locale (Vietnam).
 * @language Vietnamese
 * @iso-639-2 vie
 * @author Thanh Tran [@trongthanh]{@link https://github.com/trongthanh}
 * @author Leroy Hopson [@lihop]{@link https://github.com/lihop}
 */

var locale$t = {
  code: 'vi',
  formatDistance: formatDistance$s,
  formatLong: formatLong$t,
  formatRelative: formatRelative$s,
  localize: localize$s,
  match: match$s,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 1
    /* First week of new year contains Jan 1st  */

  }
};

var formatDistanceLocale$s = {
  lessThanXSeconds: {
    one: '不到 1 秒',
    other: '不到 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分钟',
  lessThanXMinutes: {
    one: '不到 1 分钟',
    other: '不到 {{count}} 分钟'
  },
  xMinutes: {
    one: '1 分钟',
    other: '{{count}} 分钟'
  },
  xHours: {
    one: '1 小时',
    other: '{{count}} 小时'
  },
  aboutXHours: {
    one: '大约 1 小时',
    other: '大约 {{count}} 小时'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大约 1 个星期',
    other: '大约 {{count}} 个星期'
  },
  xWeeks: {
    one: '1 个星期',
    other: '{{count}} 个星期'
  },
  aboutXMonths: {
    one: '大约 1 个月',
    other: '大约 {{count}} 个月'
  },
  xMonths: {
    one: '1 个月',
    other: '{{count}} 个月'
  },
  aboutXYears: {
    one: '大约 1 年',
    other: '大约 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超过 1 年',
    other: '超过 {{count}} 年'
  },
  almostXYears: {
    one: '将近 1 年',
    other: '将近 {{count}} 年'
  }
};
function formatDistance$t(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$s[token] === 'string') {
    result = formatDistanceLocale$s[token];
  } else if (count === 1) {
    result = formatDistanceLocale$s[token].one;
  } else {
    result = formatDistanceLocale$s[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + '内';
    } else {
      return result + '前';
    }
  }

  return result;
}

var dateFormats$u = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats$u = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats$u = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$u = {
  date: buildFormatLongFn({
    formats: dateFormats$u,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$u,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$u,
    defaultWidth: 'full'
  })
};

function checkWeek(_date, _baseDate, _options, baseFormat) {
  if (isSameUTCWeek(_date, _baseDate, _options)) {
    return baseFormat; // in same week
  } else if (_date.getTime() > _baseDate.getTime()) {
    return "'下个'" + baseFormat; // in next week
  }

  return "'上个'" + baseFormat; // in last week
}

var formatRelativeLocale$t = {
  lastWeek: checkWeek,
  // days before yesterday, maybe in this week or last week
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: checkWeek,
  // days after tomorrow, maybe in this week or next week
  other: 'PP p'
};
function formatRelative$t(token, _date, _baseDate, _options) {
  var format = formatRelativeLocale$t[token];

  if (typeof format === 'function') {
    return format(_date, _baseDate, _options, 'eeee p');
  }

  return format;
}

var eraValues$t = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues$t = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一刻', '第二刻', '第三刻', '第四刻'],
  wide: ['第一刻钟', '第二刻钟', '第三刻钟', '第四刻钟']
};
var monthValues$t = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues$t = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues$t = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};
var formattingDayPeriodValues$m = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜间'
  }
};

function ordinalNumber$t(dirtyNumber, dirtyOptions) {
  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'
  var number = Number(dirtyNumber);
  var options = dirtyOptions || {};
  var unit = String(options.unit);

  switch (unit) {
    case 'date':
      return number.toString() + '日';

    case 'hour':
      return number.toString() + '时';

    case 'minute':
      return number.toString() + '分';

    case 'second':
      return number.toString() + '秒';

    default:
      return '第 ' + number.toString();
  }
}

var localize$t = {
  ordinalNumber: ordinalNumber$t,
  era: buildLocalizeFn({
    values: eraValues$t,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$t,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$t,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$t,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$t,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$m,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$t = /^(第\s*)?\d+(日|时|分|秒)?/i;
var parseOrdinalNumberPattern$t = /\d+/i;
var matchEraPatterns$t = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns$t = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns$t = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻钟/i
};
var parseQuarterPatterns$t = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns$t = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns$t = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns$t = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^周[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns$t = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns$t = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
};
var parseDayPeriodPatterns$t = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match$t = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$t,
    parsePattern: parseOrdinalNumberPattern$t,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$t,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$t,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$t,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$t,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$t,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$t,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$t,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario]{@link https://github.com/KingMario}
 * @author Song Shuoyun [@fnlctrl]{@link https://github.com/fnlctrl}
 * @author sabrinaM [@sabrinamiao]{@link https://github.com/sabrinamiao}
 * @author Carney Wu [@cubicwork]{@link https://github.com/cubicwork}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */

var locale$u = {
  code: 'zh-CN',
  formatDistance: formatDistance$t,
  formatLong: formatLong$u,
  formatRelative: formatRelative$t,
  localize: localize$t,
  match: match$t,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var formatDistanceLocale$t = {
  lessThanXSeconds: {
    one: '少於 1 秒',
    other: '少於 {{count}} 秒'
  },
  xSeconds: {
    one: '1 秒',
    other: '{{count}} 秒'
  },
  halfAMinute: '半分鐘',
  lessThanXMinutes: {
    one: '少於 1 分鐘',
    other: '少於 {{count}} 分鐘'
  },
  xMinutes: {
    one: '1 分鐘',
    other: '{{count}} 分鐘'
  },
  xHours: {
    one: '1 小時',
    other: '{{count}} 小時'
  },
  aboutXHours: {
    one: '大約 1 小時',
    other: '大約 {{count}} 小時'
  },
  xDays: {
    one: '1 天',
    other: '{{count}} 天'
  },
  aboutXWeeks: {
    one: '大約 1 个星期',
    other: '大約 {{count}} 个星期'
  },
  xWeeks: {
    one: '1 个星期',
    other: '{{count}} 个星期'
  },
  aboutXMonths: {
    one: '大約 1 個月',
    other: '大約 {{count}} 個月'
  },
  xMonths: {
    one: '1 個月',
    other: '{{count}} 個月'
  },
  aboutXYears: {
    one: '大約 1 年',
    other: '大約 {{count}} 年'
  },
  xYears: {
    one: '1 年',
    other: '{{count}} 年'
  },
  overXYears: {
    one: '超過 1 年',
    other: '超過 {{count}} 年'
  },
  almostXYears: {
    one: '將近 1 年',
    other: '將近 {{count}} 年'
  }
};
function formatDistance$u(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale$t[token] === 'string') {
    result = formatDistanceLocale$t[token];
  } else if (count === 1) {
    result = formatDistanceLocale$t[token].one;
  } else {
    result = formatDistanceLocale$t[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return result + '內';
    } else {
      return result + '前';
    }
  }

  return result;
}

var dateFormats$v = {
  full: "y'年'M'月'd'日' EEEE",
  long: "y'年'M'月'd'日'",
  medium: 'yyyy-MM-dd',
  short: 'yy-MM-dd'
};
var timeFormats$v = {
  full: 'zzzz a h:mm:ss',
  long: 'z a h:mm:ss',
  medium: 'a h:mm:ss',
  short: 'a h:mm'
};
var dateTimeFormats$v = {
  full: '{{date}} {{time}}',
  long: '{{date}} {{time}}',
  medium: '{{date}} {{time}}',
  short: '{{date}} {{time}}'
};
var formatLong$v = {
  date: buildFormatLongFn({
    formats: dateFormats$v,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats$v,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats$v,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale$u = {
  lastWeek: "'上個' eeee p",
  yesterday: "'昨天' p",
  today: "'今天' p",
  tomorrow: "'明天' p",
  nextWeek: "'下個' eeee p",
  other: 'P'
};
function formatRelative$u(token, _date, _baseDate, _options) {
  return formatRelativeLocale$u[token];
}

var eraValues$u = {
  narrow: ['前', '公元'],
  abbreviated: ['前', '公元'],
  wide: ['公元前', '公元']
};
var quarterValues$u = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['第一刻', '第二刻', '第三刻', '第四刻'],
  wide: ['第一刻鐘', '第二刻鐘', '第三刻鐘', '第四刻鐘']
};
var monthValues$u = {
  narrow: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  abbreviated: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  wide: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']
};
var dayValues$u = {
  narrow: ['日', '一', '二', '三', '四', '五', '六'],
  short: ['日', '一', '二', '三', '四', '五', '六'],
  abbreviated: ['週日', '週一', '週二', '週三', '週四', '週五', '週六'],
  wide: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
};
var dayPeriodValues$u = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  }
};
var formattingDayPeriodValues$n = {
  narrow: {
    am: '上',
    pm: '下',
    midnight: '凌晨',
    noon: '午',
    morning: '早',
    afternoon: '下午',
    evening: '晚',
    night: '夜'
  },
  abbreviated: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  },
  wide: {
    am: '上午',
    pm: '下午',
    midnight: '凌晨',
    noon: '中午',
    morning: '早晨',
    afternoon: '中午',
    evening: '晚上',
    night: '夜間'
  }
};

function ordinalNumber$u(dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var options = dirtyOptions || {};
  var unit = String(options.unit);

  switch (unit) {
    case 'date':
      return number.toString() + '日';

    case 'hour':
      return number.toString() + '時';

    case 'minute':
      return number.toString() + '分';

    case 'second':
      return number.toString() + '秒';

    default:
      return '第 ' + number.toString();
  }
}

var localize$u = {
  ordinalNumber: ordinalNumber$u,
  era: buildLocalizeFn({
    values: eraValues$u,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues$u,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues$u,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues$u,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues$u,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues$n,
    defaultFormattingWidth: 'wide'
  })
};

var matchOrdinalNumberPattern$u = /^(第\s*)?\d+(日|時|分|秒)?/i;
var parseOrdinalNumberPattern$u = /\d+/i;
var matchEraPatterns$u = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var parseEraPatterns$u = {
  any: [/^(前)/i, /^(公元)/i]
};
var matchQuarterPatterns$u = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻鐘/i
};
var parseQuarterPatterns$u = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var matchMonthPatterns$u = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var parseMonthPatterns$u = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var matchDayPatterns$u = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^週[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var parseDayPatterns$u = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var matchDayPeriodPatterns$u = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
var parseDayPeriodPatterns$u = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var match$u = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern$u,
    parsePattern: parseOrdinalNumberPattern$u,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns$u,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns$u,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns$u,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns$u,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns$u,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns$u,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns$u,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author tonypai [@tpai]{@link https://github.com/tpai}
 * @author Jack Hsu [@jackhsu978]{@link https://github.com/jackhsu978}
 * @author Terrence Lam [@skyuplam]{@link https://github.com/skyuplam}
 */

var locale$v = {
  code: 'zh-TW',
  formatDistance: formatDistance$u,
  formatLong: formatLong$v,
  formatRelative: formatRelative$u,
  localize: localize$u,
  match: match$u,
  options: {
    weekStartsOn: 1
    /* Monday */
    ,
    firstWeekContainsDate: 4
  }
};

var map = {
  'ar-SA': locale,
  // Arabic (Saudi Arabia)
  'cs-CZ': locale$1,
  // Czech
  'da-DK': locale$2,
  // Danish
  de: locale$3,
  // German
  'el-GR': locale$4,
  // Greek
  'en-AU': locale$5,
  // English (Australia)
  'en-GB': locale$5,
  // English (British)
  'en-IN': locale$5,
  // English (India)
  'en-US': locale$6,
  // English (US)
  'es-419': locale$7,
  // Spanish (Latin America)
  'es-AR': locale$7,
  // Spanish (Argentina)
  'es-ES': locale$7,
  // Spanish (Spain)
  'es-MX': locale$7,
  // Spanish (Mexico)
  'fi-FI': locale$8,
  // Finnish
  fr: locale$9,
  // French
  'hi-IN': locale$a,
  // Hindi
  'hu-HU': locale$b,
  // Hungarian
  'id-ID': locale$c,
  // Indonesian
  it: locale$d,
  // Italian
  ja: locale$e,
  // Japanese
  'ko-KR': locale$f,
  // Korean
  'ms-MY': locale$g,
  // Malay
  'nb-NO': locale$h,
  // Norwegian (Bokm\u00e5l)
  nl: locale$i,
  // Dutch
  'pl-PL': locale$j,
  // Polish (Poland)
  'pt-BR': locale$l,
  // Portuguese (Brazilian)
  'pt-PT': locale$k,
  // Portuguese (Portugal)
  'ro-RO': locale$m,
  // Romanian
  'ru-RU': locale$n,
  // Russian
  'sk-SK': locale$o,
  // Slovak
  'sv-SE': locale$p,
  // Swedish
  'th-TH': locale$q,
  // Thai
  tr: locale$r,
  // Turkish
  'uk-UA': locale$s,
  // Ukrainian
  'vi-VN': locale$t,
  // Vietnamese
  'zh-CN': locale$u,
  // Chinese (Simplified)
  'zh-TW': locale$v // Chinese (Traditional)

};
function datePickerUpdateLocale(_x) {
  return _datePickerUpdateLocale.apply(this, arguments);
} // const localeLoaders = {
//   'ar-SA': () => import('date-fns/locale/ar-SA/index.js'), // Arabic (Saudi Arabia)
//   'cs-CZ': () => import('date-fns/locale/cs/index.js'), // Czech
//   'da-DK': () => import('date-fns/locale/da/index.js'), // Danish
//   de: () => import('date-fns/locale/de/index.js'), // German
//   'el-GR': () => import('date-fns/locale/el/index.js'), // Greek
//   'en-AU': () => import('date-fns/locale/en-GB/index.js'), // English (Australia)
//   'en-GB': () => import('date-fns/locale/en-GB/index.js'), // English (British)
//   'en-IN': () => import('date-fns/locale/en-GB/index.js'), // English (India)
//   'en-US': () => import('date-fns/locale/en-US/index.js'), // English (US)
//   'es-419': () => import('date-fns/locale/es/index.js'), // Spanish (Latin America)
//   'es-AR': () => import('date-fns/locale/es/index.js'), // Spanish (Argentina)
//   'es-ES': () => import('date-fns/locale/es/index.js'), // Spanish (Spain)
//   'es-MX': () => import('date-fns/locale/es/index.js'), // Spanish (Mexico)
//   'fi-FI': () => import('date-fns/locale/fi/index.js'), // Finnish
//   fr: () => import('date-fns/locale/fr/index.js'), // French
//   'hi-IN': () => import('date-fns/locale/hi/index.js'), // Hindi
//   'hu-HU': () => import('date-fns/locale/hu/index.js'), // Hungarian
//   'id-ID': () => import('date-fns/locale/id/index.js'), // Indonesian
//   it: () => import('date-fns/locale/it/index.js'), // Italian
//   ja: () => import('date-fns/locale/ja/index.js'), // Japanese
//   'ko-KR': () => import('date-fns/locale/ko/index.js'), // Korean
//   'ms-MY': () => import('date-fns/locale/ms/index.js'), // Malay
//   'nb-NO': () => import('date-fns/locale/nb/index.js'), // Norwegian (Bokm\u00e5l)
//   nl: () => import('date-fns/locale/nl/index.js'), // Dutch
//   'pl-PL': () => import('date-fns/locale/pl/index.js'), // Polish (Poland)
//   'pt-BR': () => import('date-fns/locale/pt-BR/index.js'), // Portuguese (Brazilian)
//   'pt-PT': () => import('date-fns/locale/pt/index.js'), // Portuguese (Portugal)
//   'ro-RO': () => import('date-fns/locale/ro/index.js'), // Romanian
//   'ru-RU': () => import('date-fns/locale/ru/index.js'), // Russian
//   'sk-SK': () => import('date-fns/locale/sk/index.js'), // Slovak
//   'sv-SE': () => import('date-fns/locale/sv/index.js'), // Swedish
//   'th-TH': () => import('date-fns/locale/th/index.js'), // Thai
//   tr: () => import('date-fns/locale/tr/index.js'), // Turkish
//   'uk-UA': () => import('date-fns/locale/uk/index.js'), // Ukrainian
//   'vi-VN': () => import('date-fns/locale/vi/index.js'), // Vietnamese
//   'zh-CN': () => import('date-fns/locale/zh-CN/index.js'), // Chinese (Simplified)
//   'zh-TW': () => import('date-fns/locale/zh-TW/index.js'), // Chinese (Traditional)
// };
// export default async function datePickerUpdateLocale(locale: string) {
//   if (!(locale in localeLoaders)) {
//     return Promise.resolve(null);
//   }
//   const importedLocale = await localeLoaders[locale]();
//   registerLocale(locale, importedLocale);
//   return importedLocale;
// }

function _datePickerUpdateLocale() {
  _datePickerUpdateLocale = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(locale) {
    var importedLocale;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (map[locale]) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", Promise.resolve(null));

          case 2:
            _context.next = 4;
            return map[locale];

          case 4:
            importedLocale = _context.sent;
            registerLocale(locale, importedLocale);
            return _context.abrupt("return", importedLocale);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _datePickerUpdateLocale.apply(this, arguments);
}

var styles$b = {"react-datepicker":"Udq","react-datepicker__day":"KnD","react-datepicker-popper":"MP1"};

var ARROW_ICON_SIZE = 16;
function DatePicker(props) {
  var accessibilityLabelIcon = props.accessibilityLabelIcon,
      accessibilityLabelNext = props.accessibilityLabelNext,
      accessibilityLabelPrevious = props.accessibilityLabelPrevious,
      helperText = props.helperText,
      disabled = props.disabled,
      endDate = props.endDate,
      errorMessage = props.errorMessage,
      excludeDates = props.excludeDates,
      id = props.id,
      _props$idealDirection = props.idealDirection,
      idealDirection = _props$idealDirection === void 0 ? 'down' : _props$idealDirection,
      includeDates = props.includeDates,
      _props$isRTL = props.isRTL,
      isRTL = _props$isRTL === void 0 ? false : _props$isRTL,
      label = props.label,
      locale = props.locale,
      maxDate = props.maxDate,
      minDate = props.minDate,
      onChange = props.onChange,
      placeholder = props.placeholder,
      selectsEnd = props.selectsEnd,
      selectsStart = props.selectsStart,
      startDate = props.startDate,
      selected = props.value;

  var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      dateFormat = _useState2[0],
      setDateFormat = _useState2[1];

  var _useState3 = useState(),
      _useState4 = _slicedToArray(_useState3, 2),
      setMonth = _useState4[1]; // $FlowFixMe


  var pickerRef = useRef();

  var handleChange = function handleChange(value, event) {
    return onChange({
      event: event,
      value: value
    });
  }; // Re-render flyout when month changes since height will vary by where days fall
  // in the month and we need to keep the flyout pointed at the input correctly


  var handleMonthChange = function handleMonthChange(newMonth) {
    setMonth(newMonth.getMonth());
  };

  var customInput = /*#__PURE__*/React__default.createElement(DatePickerTextField$1, {
    accessibilityLabelIcon: accessibilityLabelIcon,
    icon: "calendar",
    id: id,
    isRTL: isRTL
  });
  var nextMonthButtonLabel = /*#__PURE__*/React__default.createElement(Icon, {
    icon: isRTL ? 'arrow-back' : 'arrow-forward',
    accessibilityLabel: accessibilityLabelNext,
    color: "darkGray",
    size: ARROW_ICON_SIZE
  });
  var previousMonthButtonLabel = /*#__PURE__*/React__default.createElement(Icon, {
    icon: isRTL ? 'arrow-forward' : 'arrow-back',
    accessibilityLabel: accessibilityLabelPrevious,
    color: "darkGray",
    size: ARROW_ICON_SIZE
  });
  var popperPlacement = {
    up: 'top',
    right: 'right',
    down: 'bottom',
    left: 'left'
  };

  var changeDateFormat = function changeDateFormat(localeData) {
    if (localeData) {
      setDateFormat(localeData.formatLong && localeData.formatLong.date({
        width: 'short'
      }));
    }
  };

  datePickerUpdateLocale(locale).then(changeDateFormat);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "_gestalt"
  }, label && /*#__PURE__*/React__default.createElement(Label, {
    htmlFor: id
  }, /*#__PURE__*/React__default.createElement(Box, {
    marginBottom: 2
  }, /*#__PURE__*/React__default.createElement(Text, {
    size: "sm"
  }, label))), /*#__PURE__*/React__default.createElement(ReactDatePicker, {
    customInput: customInput,
    dateFormat: dateFormat,
    disabled: disabled,
    excludeDates: excludeDates,
    id: id,
    includeDates: includeDates,
    maxDate: selectsEnd ? maxDate : endDate || maxDate,
    minDate: selectsStart ? minDate : startDate || minDate,
    nextMonthButtonLabel: nextMonthButtonLabel,
    locale: locale,
    onChange: handleChange,
    onMonthChange: handleMonthChange,
    placeholderText: placeholder,
    calendarClassName: classnames(styles$b['react-datepicker']),
    popperClassName: classnames(styles$b['react-datepicker-popper'], styles$b["react-datepicker-popper-".concat(popperPlacement[idealDirection])]),
    dayClassName: function dayClassName() {
      return classnames(styles$b['react-datepicker__day'], styles$b['react-datepicker__day:hover'], styles$b['react-datepicker__day:focus']);
    },
    popperPlacement: popperPlacement[idealDirection],
    previousMonthButtonLabel: previousMonthButtonLabel,
    ref: pickerRef,
    selected: selected,
    selectsEnd: selectsEnd,
    selectsStart: selectsStart,
    showPopperArrow: false,
    startDate: startDate,
    endDate: endDate
  }), (!!errorMessage || !!helperText) && /*#__PURE__*/React__default.createElement(Box, {
    marginTop: 2
  }, /*#__PURE__*/React__default.createElement(Text, {
    color: errorMessage ? 'red' : 'gray',
    size: "sm"
  }, errorMessage || helperText)));
}

export { DatePicker };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdGFsdC1kYXRlcGlja2VyLmVzLmpzIiwic291cmNlcyI6WyIuLi8uLi9nZXN0YWx0L2Rpc3QvZ2VzdGFsdC5lcy5qcyIsIi4uL3NyYy9EYXRlUGlja2VyVGV4dEZpZWxkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9hci1TQS9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvYXItU0EvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvYXItU0EvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2FyLVNBL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9hci1TQS9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvYXItU0EvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2lzU2FtZVVUQ1dlZWsvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9jcy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvY3MvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvY3MvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2NzL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9jcy9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvY3MvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9kYS9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGEvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGEvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2RhL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9kYS9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGEvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9kZS9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGUvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGUvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2RlL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9kZS9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZGUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbC9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZWwvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZWwvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VsL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbC9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZWwvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tR0IvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tR0IvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VzL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lcy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lcy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZXMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VzL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lcy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2ZpL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9maS9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9maS9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZmkvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2ZpL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9maS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2ZyL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9mci9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9mci9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZnIvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2ZyL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9mci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2hpL19saWIvbG9jYWxpemUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9oaS9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvaGkvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvaGkvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2hpL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9oaS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2h1L19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9odS9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9odS9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvaHUvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2h1L19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9odS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2lkL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pZC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pZC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvaWQvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2lkL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pZC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2l0L19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pdC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pdC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvaXQvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2l0L19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9pdC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2phL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9qYS9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9qYS9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvamEvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2phL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9qYS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2tvL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9rby9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9rby9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUva28vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2tvL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9rby9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL21zL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9tcy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9tcy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvbXMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL21zL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9tcy9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL25iL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9uYi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9uYi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvbmIvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL25iL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9uYi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL25sL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ubC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ubC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvbmwvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL25sL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ubC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3BsL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wbC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wbC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvcGwvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3BsL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wbC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3B0L19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvcHQvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3B0L19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3B0LUJSL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC1CUi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC1CUi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvcHQtQlIvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3B0LUJSL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9wdC1CUi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3JvL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9yby9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9yby9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvcm8vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3JvL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9yby9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3J1L19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ydS9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ydS9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvcnUvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3J1L19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9ydS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3NrL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zay9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zay9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvc2svX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3NrL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zay9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3N2L19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zdi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zdi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvc3YvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3N2L19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9zdi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3RoL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90aC9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90aC9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvdGgvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3RoL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90aC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3RyL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90ci9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90ci9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvdHIvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3RyL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS90ci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3VrL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS91ay9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS91ay9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvdWsvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3VrL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS91ay9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3ZpL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS92aS9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS92aS9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvdmkvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3ZpL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS92aS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3poLUNOL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1DTi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1DTi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvemgtQ04vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3poLUNOL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1DTi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3poLVRXL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1UVy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1UVy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvemgtVFcvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL3poLVRXL19saWIvbWF0Y2gvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS96aC1UVy9pbmRleC5qcyIsIi4uL3NyYy9kYXRlUGlja2VyVXBkYXRlTG9jYWxlLmpzIiwiLi4vc3JjL0RhdGVQaWNrZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0X19kZWZhdWx0LCB7IGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIFB1cmVDb21wb25lbnQsIHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCwgQ29tcG9uZW50LCBDaGlsZHJlbiwgRnJhZ21lbnQsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tICdyZWFjdC1kb20nO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgIHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7XG5cbiAgICAgIHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgc3R5bGVzID0ge1wiYm94XCI6XCJ6STcgaXluIEhzdVwiLFwieHNEaXNwbGF5Tm9uZVwiOlwiRVNtXCIsXCJ4c0Rpc3BsYXlGbGV4XCI6XCJKZWFcIixcInhzRGlzcGxheUJsb2NrXCI6XCJveThcIixcInhzRGlzcGxheUlubGluZUJsb2NrXCI6XCJGTnNcIixcInhzRGlzcGxheVZpc3VhbGx5SGlkZGVuXCI6XCJOVk5cIixcInNtRGlzcGxheU5vbmVcIjpcIl9Bc1wiLFwic21EaXNwbGF5RmxleFwiOlwiZDVRXCIsXCJzbURpc3BsYXlCbG9ja1wiOlwiQkZ2XCIsXCJzbURpc3BsYXlJbmxpbmVCbG9ja1wiOlwiX0pkXCIsXCJzbURpc3BsYXlWaXN1YWxseUhpZGRlblwiOlwiQWZnXCIsXCJtZERpc3BsYXlOb25lXCI6XCJUSnNcIixcIm1kRGlzcGxheUZsZXhcIjpcImlfY1wiLFwibWREaXNwbGF5QmxvY2tcIjpcIlByRlwiLFwibWREaXNwbGF5SW5saW5lQmxvY2tcIjpcIkZyelwiLFwibWREaXNwbGF5VmlzdWFsbHlIaWRkZW5cIjpcIk1Qa1wiLFwibGdEaXNwbGF5Tm9uZVwiOlwialphXCIsXCJsZ0Rpc3BsYXlGbGV4XCI6XCJHRFBcIixcImxnRGlzcGxheUJsb2NrXCI6XCJWMXRcIixcImxnRGlzcGxheUlubGluZUJsb2NrXCI6XCJ5aXdcIixcImxnRGlzcGxheVZpc3VhbGx5SGlkZGVuXCI6XCJHT2RcIixcInhzRGlyZWN0aW9uUm93XCI6XCJoczBcIixcInhzRGlyZWN0aW9uQ29sdW1uXCI6XCJqelNcIixcInNtRGlyZWN0aW9uUm93XCI6XCJjY0ZcIixcInNtRGlyZWN0aW9uQ29sdW1uXCI6XCJGRGxcIixcIm1kRGlyZWN0aW9uUm93XCI6XCJUOWZcIixcIm1kRGlyZWN0aW9uQ29sdW1uXCI6XCJocUlcIixcImxnRGlyZWN0aW9uUm93XCI6XCJJUjJcIixcImxnRGlyZWN0aW9uQ29sdW1uXCI6XCJlOEdcIixcInhzQ29sMFwiOlwiWVBRXCIsXCJ4c0NvbDFcIjpcImQ1UyB3QTdcIixcInhzQ29sMlwiOlwiZFNIIHN4eVwiLFwieHNDb2wzXCI6XCJHb2EgeEVXXCIsXCJ4c0NvbDRcIjpcImN6XyBNUkVcIixcInhzQ29sNVwiOlwiZ1BiIHRZR1wiLFwieHNDb2w2XCI6XCJHQ3MgVUhjXCIsXCJ4c0NvbDdcIjpcImFvaCBvamRcIixcInhzQ29sOFwiOlwid1h1IFBYLVwiLFwieHNDb2w5XCI6XCJ6LW0gUWZyXCIsXCJ4c0NvbDEwXCI6XCJxdUogdmRQXCIsXCJ4c0NvbDExXCI6XCJRMzUga2FQXCIsXCJ4c0NvbDEyXCI6XCJ4Y3YgTDRFXCIsXCJzbUNvbDBcIjpcIk5ZcFwiLFwic21Db2wxXCI6XCJwTXAgRGpjXCIsXCJzbUNvbDJcIjpcImZ1dCB0YXJcIixcInNtQ29sM1wiOlwiSnJhIFFTM1wiLFwic21Db2w0XCI6XCJuVUUgVl9MXCIsXCJzbUNvbDVcIjpcIlFNMCBraDFcIixcInNtQ29sNlwiOlwiZVVfIEZ1ZVwiLFwic21Db2w3XCI6XCJZaE8gY2dCXCIsXCJzbUNvbDhcIjpcInhQayBEa01cIixcInNtQ29sOVwiOlwickROIEFYaFwiLFwic21Db2wxMFwiOlwiUGQxIFV0TVwiLFwic21Db2wxMVwiOlwiZkMxIFd5eVwiLFwic21Db2wxMlwiOlwiTlVmIGRYQ1wiLFwibWRDb2wwXCI6XCJfOHZcIixcIm1kQ29sMVwiOlwidEpZIFU4cVwiLFwibWRDb2wyXCI6XCJkb2sgc2h4XCIsXCJtZENvbDNcIjpcIkhVdSBFR21cIixcIm1kQ29sNFwiOlwiY1hLIFhNcFwiLFwibWRDb2w1XCI6XCJhZDkgSDJRXCIsXCJtZENvbDZcIjpcIkJENSBISGNcIixcIm1kQ29sN1wiOlwiYmk4IEpXclwiLFwibWRDb2w4XCI6XCJpX3MgaDVCXCIsXCJtZENvbDlcIjpcImdvZyBFZWJcIixcIm1kQ29sMTBcIjpcImZFQyBUSW9cIixcIm1kQ29sMTFcIjpcIk01YiByUEVcIixcIm1kQ29sMTJcIjpcIklSaiBRd0tcIixcImxnQ29sMFwiOlwiX0htXCIsXCJsZ0NvbDFcIjpcImRUTyBWU2FcIixcImxnQ29sMlwiOlwiTkNnIGFtbFwiLFwibGdDb2wzXCI6XCJ6NU8gaHVrXCIsXCJsZ0NvbDRcIjpcIm4tTiBWbmpcIixcImxnQ29sNVwiOlwiTTd6IEtnWlwiLFwibGdDb2w2XCI6XCJQNnogYzJBXCIsXCJsZ0NvbDdcIjpcInFURyBJR2RcIixcImxnQ29sOFwiOlwicnRQIGhNZlwiLFwibGdDb2w5XCI6XCJ5MjIgc3doXCIsXCJsZ0NvbDEwXCI6XCJ4UXkgSHMwXCIsXCJsZ0NvbDExXCI6XCJrTTEgWVhFXCIsXCJsZ0NvbDEyXCI6XCJBaVEgWFRwXCIsXCJvcGFjaXR5MFwiOlwiQmZJXCIsXCJvcGFjaXR5MDFcIjpcImszOVwiLFwib3BhY2l0eTAyXCI6XCJhOGxcIixcIm9wYWNpdHkwM1wiOlwiQlhNXCIsXCJvcGFjaXR5MDRcIjpcIlpWMFwiLFwib3BhY2l0eTA1XCI6XCJ5RDZcIixcIm9wYWNpdHkwNlwiOlwienFUXCIsXCJvcGFjaXR5MDdcIjpcIlJmSVwiLFwib3BhY2l0eTA4XCI6XCJ0TTVcIixcIm9wYWNpdHkwOVwiOlwiUkJFXCIsXCJvcGFjaXR5MVwiOlwiWlpTXCJ9O1xuXG52YXIgYm9yZGVycyA9IHtcImJvcmRlclwiOlwiS0lfXCIsXCJib3JkZXJDb2xvckdyYXlcIjpcInRrMFwiLFwiYm9yZGVyQ29sb3JEYXJrR3JheVwiOlwibkc1XCIsXCJib3JkZXJDb2xvckxpZ2h0R3JheVwiOlwiTEpCXCIsXCJib3JkZXJDb2xvclJlZFwiOlwieGJwXCIsXCJib3JkZXJDb2xvckxpZ2h0R3JheUhvdmVyZWRcIjpcImRQWVwiLFwiYm9yZGVyQ29sb3JMaWdodEdyYXlEaXNhYmxlZFwiOlwiRnZvXCIsXCJib3JkZXJUb3BcIjpcInVOdVwiLFwiYm9yZGVyUmlnaHRcIjpcInc3bFwiLFwiYm9yZGVyQm90dG9tXCI6XCJ2Q0VcIixcImJvcmRlckxlZnRcIjpcIm1RQ1wiLFwiY2lyY2xlXCI6XCJJTmRcIixcInBpbGxcIjpcIkxmelwiLFwicm91bmRpbmcwXCI6XCJlRWpcIixcInJvdW5kaW5nMVwiOlwiUGphXCIsXCJyb3VuZGluZzJcIjpcIkRVdFwiLFwicm91bmRpbmczXCI6XCJzMm5cIixcInJvdW5kaW5nNFwiOlwiaG8tXCIsXCJyb3VuZGluZzVcIjpcIlBjS1wiLFwicm91bmRpbmc2XCI6XCJmZXZcIixcInJvdW5kaW5nN1wiOlwidl8zXCIsXCJyb3VuZGluZzhcIjpcIk9WWFwiLFwibm9Cb3JkZXJcIjpcImFkblwiLFwic2l6ZVNtXCI6XCJkYVNcIixcInNpemVMZ1wiOlwiWGdJXCIsXCJzb2xpZFwiOlwiUHc1XCJ9O1xuXG52YXIgY29sb3JzID0ge1wicmVkXCI6XCJsWkpcIixcInJlZEJnXCI6XCJKcm5cIixcIndoaXRlXCI6XCJlcmhcIixcIndoaXRlQmdcIjpcInFKY1wiLFwibGlnaHRHcmF5XCI6XCJvZE5cIixcImxpZ2h0R3JheUJnXCI6XCJncFZcIixcImdyYXlcIjpcIkI5dVwiLFwiZ3JheUJnXCI6XCJnZlBcIixcImRhcmtHcmF5XCI6XCJwQmpcIixcImRhcmtHcmF5QmdcIjpcIkJzRlwiLFwiZ3JlZW5cIjpcInlYYlwiLFwiZ3JlZW5CZ1wiOlwiVkZWXCIsXCJwaW5lXCI6XCJhbVJcIixcInBpbmVCZ1wiOlwiUHltXCIsXCJvbGl2ZVwiOlwibXdXXCIsXCJvbGl2ZUJnXCI6XCJiNVpcIixcImJsdWVcIjpcIm1pLVwiLFwiYmx1ZUJnXCI6XCJyVHRcIixcIm5hdnlcIjpcInh4b1wiLFwibmF2eUJnXCI6XCJoei1cIixcIm1pZG5pZ2h0XCI6XCJJbWVcIixcIm1pZG5pZ2h0QmdcIjpcIkUxNFwiLFwicHVycGxlXCI6XCJOTDlcIixcInB1cnBsZUJnXCI6XCJ2Zk9cIixcIm9yY2hpZFwiOlwibXlSXCIsXCJvcmNoaWRCZ1wiOlwiZi15XCIsXCJlZ2dwbGFudFwiOlwib0tYXCIsXCJlZ2dwbGFudEJnXCI6XCJiUE1cIixcIm1hcm9vblwiOlwic2thXCIsXCJtYXJvb25CZ1wiOlwiWl9UXCIsXCJ3YXRlcm1lbG9uXCI6XCJXbzNcIixcIndhdGVybWVsb25CZ1wiOlwiaVJ2XCIsXCJvcmFuZ2VcIjpcIkdvUFwiLFwib3JhbmdlQmdcIjpcIkxnY1wiLFwidHJhbnNwYXJlbnRCZ1wiOlwiWWJZXCIsXCJ0cmFuc3BhcmVudERhcmtHcmF5XCI6XCJ3Y3lcIixcInRyYW5zcGFyZW50RGFya0dyYXlCZ1wiOlwicHJHXCIsXCJ0cmFuc3BhcmVudFdoaXRlQmdcIjpcInU5N1wiLFwibGlnaHRXYXNoQmdcIjpcImVaU1wiLFwiZGFya1dhc2hCZ1wiOlwiaGxlXCJ9O1xuXG52YXIgbGF5b3V0ID0ge1wiYmxvY2tcIjpcImtWY1wiLFwiaW5saW5lXCI6XCJnb0lcIixcImlubGluZUJsb2NrXCI6XCJLaFlcIixcInRhYmxlXCI6XCJ6c1JcIixcIm92ZXJmbG93SGlkZGVuXCI6XCJzTEdcIixcIm92ZXJmbG93U2Nyb2xsXCI6XCJ4cVNcIixcIm92ZXJmbG93U2Nyb2xsWFwiOlwidlZjXCIsXCJvdmVyZmxvd1Njcm9sbFlcIjpcIkNpaVwiLFwib3ZlcmZsb3dBdXRvXCI6XCJYYlRcIixcImZpdFwiOlwieHVVXCIsXCJyZWxhdGl2ZVwiOlwiWGlHXCIsXCJmaXhlZFwiOlwiX2hlXCIsXCJhYnNvbHV0ZVwiOlwiTUl3XCIsXCJzdGlja3lcIjpcInFpQlwiLFwidG9wMFwiOlwiUUxZXCIsXCJyaWdodDBcIjpcInA2VlwiLFwiYm90dG9tMFwiOlwib2pOXCIsXCJsZWZ0MFwiOlwiUnltXCIsXCJzbWFsbFwiOlwiSTU2XCIsXCJtZWRpdW1cIjpcImFaY1wiLFwibGFyZ2VcIjpcInhENFwiLFwiYm9yZGVyQm94XCI6XCJIc3VcIixcImNvbnRlbnRCb3hcIjpcImpyLVwiLFwiZmxleFwiOlwiX08xXCIsXCJzbUZsZXhcIjpcInBSYVwiLFwibWRGbGV4XCI6XCJ0NlRcIixcImxnRmxleFwiOlwiaTBxXCIsXCJmbGV4Q29sdW1uXCI6XCJxVDZcIixcImZsZXhXcmFwXCI6XCJrelpcIixcIml0ZW1zU3RhcnRcIjpcIkZqZVwiLFwiaXRlbXNFbmRcIjpcInBQM1wiLFwiaXRlbXNDZW50ZXJcIjpcImdqelwiLFwiaXRlbXNCYXNlbGluZVwiOlwiUm5qXCIsXCJpdGVtc1N0cmV0Y2hcIjpcIndIcFwiLFwic2VsZlN0YXJ0XCI6XCJYMGZcIixcInNlbGZFbmRcIjpcImdSeVwiLFwic2VsZkNlbnRlclwiOlwiWjJLXCIsXCJzZWxmQmFzZWxpbmVcIjpcIk9wNlwiLFwic2VsZlN0cmV0Y2hcIjpcIlp2c1wiLFwianVzdGlmeVN0YXJ0XCI6XCJycktcIixcImp1c3RpZnlFbmRcIjpcImp4LVwiLFwianVzdGlmeUNlbnRlclwiOlwibVE4XCIsXCJqdXN0aWZ5QmV0d2VlblwiOlwiYjhUXCIsXCJqdXN0aWZ5QXJvdW5kXCI6XCJBaDBcIixcImp1c3RpZnlFdmVubHlcIjpcIm50NVwiLFwiY29udGVudFN0YXJ0XCI6XCJ5T1NcIixcImNvbnRlbnRFbmRcIjpcImh3R1wiLFwiY29udGVudENlbnRlclwiOlwiVHBEXCIsXCJjb250ZW50QmV0d2VlblwiOlwiYmtJXCIsXCJjb250ZW50QXJvdW5kXCI6XCJ4OU9cIixcImNvbnRlbnRFdmVubHlcIjpcInp1c1wiLFwiY29udGVudFN0cmV0Y2hcIjpcImtCT1wiLFwiZmxleEdyb3dcIjpcInVqVVwiLFwiZmxleE5vbmVcIjpcIkVxaFwiLFwib3JkZXJGaXJzdFwiOlwib1RhXCIsXCJvcmRlckxhc3RcIjpcIm5FTlwiLFwibWluV2lkdGg2MFwiOlwiVVNnXCJ9O1xuXG52YXIgd2hpdGVzcGFjZSA9IHtcIm1hcmdpblN0YXJ0MVwiOlwieHZFXCIsXCJtYXJnaW5FbmQxXCI6XCJSejZcIixcIm1hcmdpblN0YXJ0TjFcIjpcIkY2bFwiLFwibWFyZ2luRW5kTjFcIjpcImsxQVwiLFwibWFyZ2luVG9wMVwiOlwiaERXXCIsXCJtYXJnaW5SaWdodDFcIjpcIkhiOVwiLFwibWFyZ2luQm90dG9tMVwiOlwiWDZ0XCIsXCJtYXJnaW5MZWZ0MVwiOlwia01BXCIsXCJtYXJnaW5Ub3BOMVwiOlwiWEJlXCIsXCJtYXJnaW5SaWdodE4xXCI6XCJmMDNcIixcIm1hcmdpbkJvdHRvbU4xXCI6XCJVZXhcIixcIm1hcmdpbkxlZnROMVwiOlwidXJvXCIsXCJwYWRkaW5nWTFcIjpcIkM5cVwiLFwicGFkZGluZ1gxXCI6XCJTaGxcIixcIm1hcmdpblN0YXJ0MlwiOlwiSk1FXCIsXCJtYXJnaW5FbmQyXCI6XCJ3YzFcIixcIm1hcmdpblN0YXJ0TjJcIjpcIndmclwiLFwibWFyZ2luRW5kTjJcIjpcIno0X1wiLFwibWFyZ2luVG9wMlwiOlwiaGpqXCIsXCJtYXJnaW5SaWdodDJcIjpcIkdkMVwiLFwibWFyZ2luQm90dG9tMlwiOlwiVnhMXCIsXCJtYXJnaW5MZWZ0MlwiOlwibjltXCIsXCJtYXJnaW5Ub3BOMlwiOlwiQ1AwXCIsXCJtYXJnaW5SaWdodE4yXCI6XCJkMmpcIixcIm1hcmdpbkJvdHRvbU4yXCI6XCJVeHdcIixcIm1hcmdpbkxlZnROMlwiOlwiVkRQXCIsXCJwYWRkaW5nWTJcIjpcImhBLVwiLFwicGFkZGluZ1gyXCI6XCJ3WVJcIixcIm1hcmdpblN0YXJ0M1wiOlwiUHlnXCIsXCJtYXJnaW5FbmQzXCI6XCJVbWtcIixcIm1hcmdpblN0YXJ0TjNcIjpcImV5T1wiLFwibWFyZ2luRW5kTjNcIjpcImZtd1wiLFwibWFyZ2luVG9wM1wiOlwiSHZwXCIsXCJtYXJnaW5SaWdodDNcIjpcIm9jdVwiLFwibWFyZ2luQm90dG9tM1wiOlwic25XXCIsXCJtYXJnaW5MZWZ0M1wiOlwiWFRmXCIsXCJtYXJnaW5Ub3BOM1wiOlwiY2sxXCIsXCJtYXJnaW5SaWdodE4zXCI6XCJ3LVdcIixcIm1hcmdpbkJvdHRvbU4zXCI6XCJLZ29cIixcIm1hcmdpbkxlZnROM1wiOlwiUU1KXCIsXCJwYWRkaW5nWTNcIjpcImhVQ1wiLFwicGFkZGluZ1gzXCI6XCJacjNcIixcIm1hcmdpblN0YXJ0NFwiOlwickRBXCIsXCJtYXJnaW5FbmQ0XCI6XCJqYXJcIixcIm1hcmdpblN0YXJ0TjRcIjpcInFhQ1wiLFwibWFyZ2luRW5kTjRcIjpcInZDVFwiLFwibWFyZ2luVG9wNFwiOlwiS080XCIsXCJtYXJnaW5SaWdodDRcIjpcImxUc1wiLFwibWFyZ2luQm90dG9tNFwiOlwiUkRjXCIsXCJtYXJnaW5MZWZ0NFwiOlwiTDN6XCIsXCJtYXJnaW5Ub3BONFwiOlwiSjk1XCIsXCJtYXJnaW5SaWdodE40XCI6XCJRZTFcIixcIm1hcmdpbkJvdHRvbU40XCI6XCJoZXNcIixcIm1hcmdpbkxlZnRONFwiOlwicXdFXCIsXCJwYWRkaW5nWTRcIjpcInFEZlwiLFwicGFkZGluZ1g0XCI6XCJmWnpcIixcIm1hcmdpblN0YXJ0NVwiOlwiaUQ1XCIsXCJtYXJnaW5FbmQ1XCI6XCJ3emtcIixcIm1hcmdpblN0YXJ0TjVcIjpcImJ2dVwiLFwibWFyZ2luRW5kTjVcIjpcIlhRYVwiLFwibWFyZ2luVG9wNVwiOlwiTU1yXCIsXCJtYXJnaW5SaWdodDVcIjpcIlIxd1wiLFwibWFyZ2luQm90dG9tNVwiOlwia0tVXCIsXCJtYXJnaW5MZWZ0NVwiOlwidlB0XCIsXCJtYXJnaW5Ub3BONVwiOlwiallLXCIsXCJtYXJnaW5SaWdodE41XCI6XCJrTFZcIixcIm1hcmdpbkJvdHRvbU41XCI6XCJBaG5cIixcIm1hcmdpbkxlZnRONVwiOlwiSGw3XCIsXCJwYWRkaW5nWTVcIjpcIk1oclwiLFwicGFkZGluZ1g1XCI6XCJsN1RcIixcIm1hcmdpblN0YXJ0NlwiOlwiZnRlXCIsXCJtYXJnaW5FbmQ2XCI6XCJkeG1cIixcIm1hcmdpblN0YXJ0TjZcIjpcIlpnZ1wiLFwibWFyZ2luRW5kTjZcIjpcIkNqQ1wiLFwibWFyZ2luVG9wNlwiOlwiVHRlXCIsXCJtYXJnaW5SaWdodDZcIjpcIklfd1wiLFwibWFyZ2luQm90dG9tNlwiOlwiUEtYXCIsXCJtYXJnaW5MZWZ0NlwiOlwiZklmXCIsXCJtYXJnaW5Ub3BONlwiOlwiam9PXCIsXCJtYXJnaW5SaWdodE42XCI6XCJLdW9cIixcIm1hcmdpbkJvdHRvbU42XCI6XCJJNXpcIixcIm1hcmdpbkxlZnRONlwiOlwiVU9MXCIsXCJwYWRkaW5nWTZcIjpcImZCdlwiLFwicGFkZGluZ1g2XCI6XCJRREFcIixcIm1hcmdpblN0YXJ0N1wiOlwiV0MtXCIsXCJtYXJnaW5FbmQ3XCI6XCJENF9cIixcIm1hcmdpblN0YXJ0TjdcIjpcIlk3X1wiLFwibWFyZ2luRW5kTjdcIjpcImxfeFwiLFwibWFyZ2luVG9wN1wiOlwiSmNNXCIsXCJtYXJnaW5SaWdodDdcIjpcInlBOVwiLFwibWFyZ2luQm90dG9tN1wiOlwiWS1HXCIsXCJtYXJnaW5MZWZ0N1wiOlwiZGF4XCIsXCJtYXJnaW5Ub3BON1wiOlwiUk9TXCIsXCJtYXJnaW5SaWdodE43XCI6XCJJZnNcIixcIm1hcmdpbkJvdHRvbU43XCI6XCJBNDRcIixcIm1hcmdpbkxlZnRON1wiOlwicjdQXCIsXCJwYWRkaW5nWTdcIjpcImtsaVwiLFwicGFkZGluZ1g3XCI6XCJodk9cIixcIm1hcmdpblN0YXJ0OFwiOlwiVmc1XCIsXCJtYXJnaW5FbmQ4XCI6XCJrVEFcIixcIm1hcmdpblN0YXJ0TjhcIjpcIm44dFwiLFwibWFyZ2luRW5kTjhcIjpcImRkY1wiLFwibWFyZ2luVG9wOFwiOlwiQ0RwXCIsXCJtYXJnaW5SaWdodDhcIjpcIlFyV1wiLFwibWFyZ2luQm90dG9tOFwiOlwibTJGXCIsXCJtYXJnaW5MZWZ0OFwiOlwieEJFXCIsXCJtYXJnaW5Ub3BOOFwiOlwidDZ4XCIsXCJtYXJnaW5SaWdodE44XCI6XCJHekFcIixcIm1hcmdpbkJvdHRvbU44XCI6XCJGQnlcIixcIm1hcmdpbkxlZnROOFwiOlwiTkdVXCIsXCJwYWRkaW5nWThcIjpcIkxlalwiLFwicGFkZGluZ1g4XCI6XCJMQ05cIixcIm1hcmdpblN0YXJ0OVwiOlwiUm96XCIsXCJtYXJnaW5FbmQ5XCI6XCJIZ2JcIixcIm1hcmdpblN0YXJ0TjlcIjpcIlhrZVwiLFwibWFyZ2luRW5kTjlcIjpcImNVdVwiLFwibWFyZ2luVG9wOVwiOlwidmtzXCIsXCJtYXJnaW5SaWdodDlcIjpcInk3V1wiLFwibWFyZ2luQm90dG9tOVwiOlwibUREXCIsXCJtYXJnaW5MZWZ0OVwiOlwialV2XCIsXCJtYXJnaW5Ub3BOOVwiOlwiWkcyXCIsXCJtYXJnaW5SaWdodE45XCI6XCJIMTVcIixcIm1hcmdpbkJvdHRvbU45XCI6XCJqQ1BcIixcIm1hcmdpbkxlZnROOVwiOlwic1FVXCIsXCJwYWRkaW5nWTlcIjpcIlNNR1wiLFwicGFkZGluZ1g5XCI6XCJreEZcIixcIm1hcmdpblN0YXJ0MTBcIjpcIkJkclwiLFwibWFyZ2luRW5kMTBcIjpcIlVKU1wiLFwibWFyZ2luU3RhcnROMTBcIjpcIllsaFwiLFwibWFyZ2luRW5kTjEwXCI6XCJiTkpcIixcIm1hcmdpblRvcDEwXCI6XCJXYkFcIixcIm1hcmdpblJpZ2h0MTBcIjpcIlZoT1wiLFwibWFyZ2luQm90dG9tMTBcIjpcImxBTVwiLFwibWFyZ2luTGVmdDEwXCI6XCJWY0JcIixcIm1hcmdpblRvcE4xMFwiOlwiWUZBXCIsXCJtYXJnaW5SaWdodE4xMFwiOlwiSmNYXCIsXCJtYXJnaW5Cb3R0b21OMTBcIjpcImp5cVwiLFwibWFyZ2luTGVmdE4xMFwiOlwicjJFXCIsXCJwYWRkaW5nWTEwXCI6XCJaRG1cIixcInBhZGRpbmdYMTBcIjpcIlR3UFwiLFwibWFyZ2luU3RhcnQxMVwiOlwiemlBXCIsXCJtYXJnaW5FbmQxMVwiOlwiSU02XCIsXCJtYXJnaW5TdGFydE4xMVwiOlwiRjk0XCIsXCJtYXJnaW5FbmROMTFcIjpcImZJdFwiLFwibWFyZ2luVG9wMTFcIjpcInUzVVwiLFwibWFyZ2luUmlnaHQxMVwiOlwiSjFBXCIsXCJtYXJnaW5Cb3R0b20xMVwiOlwiSzVMXCIsXCJtYXJnaW5MZWZ0MTFcIjpcIkVWVlwiLFwibWFyZ2luVG9wTjExXCI6XCJlSzRcIixcIm1hcmdpblJpZ2h0TjExXCI6XCJfRVNcIixcIm1hcmdpbkJvdHRvbU4xMVwiOlwiemtjXCIsXCJtYXJnaW5MZWZ0TjExXCI6XCJkUURcIixcInBhZGRpbmdZMTFcIjpcIldHWlwiLFwicGFkZGluZ1gxMVwiOlwid2kzXCIsXCJtYXJnaW5TdGFydDEyXCI6XCJfRVFcIixcIm1hcmdpbkVuZDEyXCI6XCJKRmtcIixcIm1hcmdpblN0YXJ0TjEyXCI6XCJXTDBcIixcIm1hcmdpbkVuZE4xMlwiOlwiS1JSXCIsXCJtYXJnaW5Ub3AxMlwiOlwidXFNXCIsXCJtYXJnaW5SaWdodDEyXCI6XCJqemJcIixcIm1hcmdpbkJvdHRvbTEyXCI6XCJmbWFcIixcIm1hcmdpbkxlZnQxMlwiOlwiVHl4XCIsXCJtYXJnaW5Ub3BOMTJcIjpcImx0VVwiLFwibWFyZ2luUmlnaHROMTJcIjpcIkVMbFwiLFwibWFyZ2luQm90dG9tTjEyXCI6XCJTQXRcIixcIm1hcmdpbkxlZnROMTJcIjpcIlQ5RVwiLFwicGFkZGluZ1kxMlwiOlwiXzRUXCIsXCJwYWRkaW5nWDEyXCI6XCJvcXZcIixcInNtTWFyZ2luU3RhcnQxXCI6XCJLdl9cIixcInNtTWFyZ2luRW5kMVwiOlwieXFrXCIsXCJzbU1hcmdpblN0YXJ0TjFcIjpcIk9nc1wiLFwic21NYXJnaW5FbmROMVwiOlwiSGdRXCIsXCJzbU1hcmdpblRvcDFcIjpcInFxbFwiLFwic21NYXJnaW5SaWdodDFcIjpcInpWblwiLFwic21NYXJnaW5Cb3R0b20xXCI6XCJ6WnRcIixcInNtTWFyZ2luTGVmdDFcIjpcIlk4ZlwiLFwic21NYXJnaW5Ub3BOMVwiOlwiTU5PXCIsXCJzbU1hcmdpblJpZ2h0TjFcIjpcIlFRbFwiLFwic21NYXJnaW5Cb3R0b21OMVwiOlwibkpWXCIsXCJzbU1hcmdpbkxlZnROMVwiOlwiUHZCXCIsXCJzbVBhZGRpbmdZMVwiOlwiTnp5XCIsXCJzbVBhZGRpbmdYMVwiOlwidHVJXCIsXCJzbU1hcmdpblN0YXJ0MlwiOlwib0tlXCIsXCJzbU1hcmdpbkVuZDJcIjpcIkw3SFwiLFwic21NYXJnaW5TdGFydE4yXCI6XCJzTGNcIixcInNtTWFyZ2luRW5kTjJcIjpcIk1OSFwiLFwic21NYXJnaW5Ub3AyXCI6XCJUSG5cIixcInNtTWFyZ2luUmlnaHQyXCI6XCJRMTJcIixcInNtTWFyZ2luQm90dG9tMlwiOlwiUGRDXCIsXCJzbU1hcmdpbkxlZnQyXCI6XCJsTlJcIixcInNtTWFyZ2luVG9wTjJcIjpcIk5vUlwiLFwic21NYXJnaW5SaWdodE4yXCI6XCJ5UzVcIixcInNtTWFyZ2luQm90dG9tTjJcIjpcInhVQVwiLFwic21NYXJnaW5MZWZ0TjJcIjpcImlIQ1wiLFwic21QYWRkaW5nWTJcIjpcImhDRFwiLFwic21QYWRkaW5nWDJcIjpcImMtQVwiLFwic21NYXJnaW5TdGFydDNcIjpcImM5MlwiLFwic21NYXJnaW5FbmQzXCI6XCJKUnRcIixcInNtTWFyZ2luU3RhcnROM1wiOlwieTRNXCIsXCJzbU1hcmdpbkVuZE4zXCI6XCJXdWhcIixcInNtTWFyZ2luVG9wM1wiOlwiYkpEXCIsXCJzbU1hcmdpblJpZ2h0M1wiOlwiazJoXCIsXCJzbU1hcmdpbkJvdHRvbTNcIjpcIkVWRVwiLFwic21NYXJnaW5MZWZ0M1wiOlwiV2EyXCIsXCJzbU1hcmdpblRvcE4zXCI6XCJfRE9cIixcInNtTWFyZ2luUmlnaHROM1wiOlwiZVExXCIsXCJzbU1hcmdpbkJvdHRvbU4zXCI6XCJhVnFcIixcInNtTWFyZ2luTGVmdE4zXCI6XCJINE5cIixcInNtUGFkZGluZ1kzXCI6XCJ5ZFNcIixcInNtUGFkZGluZ1gzXCI6XCJIMHJcIixcInNtTWFyZ2luU3RhcnQ0XCI6XCJKMXJcIixcInNtTWFyZ2luRW5kNFwiOlwiRFJnXCIsXCJzbU1hcmdpblN0YXJ0TjRcIjpcIm9hMFwiLFwic21NYXJnaW5FbmRONFwiOlwic09MXCIsXCJzbU1hcmdpblRvcDRcIjpcIlBCX1wiLFwic21NYXJnaW5SaWdodDRcIjpcInZfSFwiLFwic21NYXJnaW5Cb3R0b200XCI6XCJTVjJcIixcInNtTWFyZ2luTGVmdDRcIjpcImRSVFwiLFwic21NYXJnaW5Ub3BONFwiOlwidk9pXCIsXCJzbU1hcmdpblJpZ2h0TjRcIjpcInB4YlwiLFwic21NYXJnaW5Cb3R0b21ONFwiOlwieHdZXCIsXCJzbU1hcmdpbkxlZnRONFwiOlwic3BwXCIsXCJzbVBhZGRpbmdZNFwiOlwiZHdZXCIsXCJzbVBhZGRpbmdYNFwiOlwiX1ZXXCIsXCJzbU1hcmdpblN0YXJ0NVwiOlwiV0tjXCIsXCJzbU1hcmdpbkVuZDVcIjpcIk1yYVwiLFwic21NYXJnaW5TdGFydE41XCI6XCJXOHNcIixcInNtTWFyZ2luRW5kTjVcIjpcIkVoclwiLFwic21NYXJnaW5Ub3A1XCI6XCJsZWtcIixcInNtTWFyZ2luUmlnaHQ1XCI6XCJ5cE9cIixcInNtTWFyZ2luQm90dG9tNVwiOlwiaWRtXCIsXCJzbU1hcmdpbkxlZnQ1XCI6XCJvUGlcIixcInNtTWFyZ2luVG9wTjVcIjpcIlgzQlwiLFwic21NYXJnaW5SaWdodE41XCI6XCJGTWFcIixcInNtTWFyZ2luQm90dG9tTjVcIjpcIlA2YlwiLFwic21NYXJnaW5MZWZ0TjVcIjpcIkhLb1wiLFwic21QYWRkaW5nWTVcIjpcIndoTVwiLFwic21QYWRkaW5nWDVcIjpcIkwtTFwiLFwic21NYXJnaW5TdGFydDZcIjpcIlV4Z1wiLFwic21NYXJnaW5FbmQ2XCI6XCJiOVhcIixcInNtTWFyZ2luU3RhcnRONlwiOlwiblVVXCIsXCJzbU1hcmdpbkVuZE42XCI6XCJtYWNcIixcInNtTWFyZ2luVG9wNlwiOlwiT3ZjXCIsXCJzbU1hcmdpblJpZ2h0NlwiOlwiblJnXCIsXCJzbU1hcmdpbkJvdHRvbTZcIjpcIkR6Q1wiLFwic21NYXJnaW5MZWZ0NlwiOlwiV2pRXCIsXCJzbU1hcmdpblRvcE42XCI6XCJJTDFcIixcInNtTWFyZ2luUmlnaHRONlwiOlwiYzZmXCIsXCJzbU1hcmdpbkJvdHRvbU42XCI6XCJQNXBcIixcInNtTWFyZ2luTGVmdE42XCI6XCJjeWRcIixcInNtUGFkZGluZ1k2XCI6XCJndXhcIixcInNtUGFkZGluZ1g2XCI6XCJxYVJcIixcInNtTWFyZ2luU3RhcnQ3XCI6XCJzX2JcIixcInNtTWFyZ2luRW5kN1wiOlwiSzJJXCIsXCJzbU1hcmdpblN0YXJ0TjdcIjpcIno5ZFwiLFwic21NYXJnaW5FbmRON1wiOlwiUHJwXCIsXCJzbU1hcmdpblRvcDdcIjpcIko5dFwiLFwic21NYXJnaW5SaWdodDdcIjpcInloS1wiLFwic21NYXJnaW5Cb3R0b203XCI6XCJQcHZcIixcInNtTWFyZ2luTGVmdDdcIjpcIlVwQ1wiLFwic21NYXJnaW5Ub3BON1wiOlwibUpRXCIsXCJzbU1hcmdpblJpZ2h0TjdcIjpcIlM4T1wiLFwic21NYXJnaW5Cb3R0b21ON1wiOlwidXhoXCIsXCJzbU1hcmdpbkxlZnRON1wiOlwiT2tZXCIsXCJzbVBhZGRpbmdZN1wiOlwiTzhJXCIsXCJzbVBhZGRpbmdYN1wiOlwid2NrXCIsXCJzbU1hcmdpblN0YXJ0OFwiOlwiRlVBXCIsXCJzbU1hcmdpbkVuZDhcIjpcInBOblwiLFwic21NYXJnaW5TdGFydE44XCI6XCJRbzVcIixcInNtTWFyZ2luRW5kTjhcIjpcIkFyeFwiLFwic21NYXJnaW5Ub3A4XCI6XCJpcXZcIixcInNtTWFyZ2luUmlnaHQ4XCI6XCJrYTJcIixcInNtTWFyZ2luQm90dG9tOFwiOlwiRTBGXCIsXCJzbU1hcmdpbkxlZnQ4XCI6XCJCclNcIixcInNtTWFyZ2luVG9wTjhcIjpcImtSVFwiLFwic21NYXJnaW5SaWdodE44XCI6XCJNRTdcIixcInNtTWFyZ2luQm90dG9tTjhcIjpcIkhtUVwiLFwic21NYXJnaW5MZWZ0TjhcIjpcInQ3UlwiLFwic21QYWRkaW5nWThcIjpcIkdlclwiLFwic21QYWRkaW5nWDhcIjpcInlubFwiLFwic21NYXJnaW5TdGFydDlcIjpcInU5T1wiLFwic21NYXJnaW5FbmQ5XCI6XCJPVGRcIixcInNtTWFyZ2luU3RhcnROOVwiOlwicEg4XCIsXCJzbU1hcmdpbkVuZE45XCI6XCJJc0VcIixcInNtTWFyZ2luVG9wOVwiOlwidDVkXCIsXCJzbU1hcmdpblJpZ2h0OVwiOlwid1VnXCIsXCJzbU1hcmdpbkJvdHRvbTlcIjpcInk1VVwiLFwic21NYXJnaW5MZWZ0OVwiOlwiVU5WXCIsXCJzbU1hcmdpblRvcE45XCI6XCJ1ejZcIixcInNtTWFyZ2luUmlnaHROOVwiOlwiUHhYXCIsXCJzbU1hcmdpbkJvdHRvbU45XCI6XCJXd2tcIixcInNtTWFyZ2luTGVmdE45XCI6XCJ5MFBcIixcInNtUGFkZGluZ1k5XCI6XCJfRUFcIixcInNtUGFkZGluZ1g5XCI6XCJ0UGJcIixcInNtTWFyZ2luU3RhcnQxMFwiOlwidndQXCIsXCJzbU1hcmdpbkVuZDEwXCI6XCJ3ZE9cIixcInNtTWFyZ2luU3RhcnROMTBcIjpcIlFpMFwiLFwic21NYXJnaW5FbmROMTBcIjpcIlNTc1wiLFwic21NYXJnaW5Ub3AxMFwiOlwiWkUyXCIsXCJzbU1hcmdpblJpZ2h0MTBcIjpcImwtcVwiLFwic21NYXJnaW5Cb3R0b20xMFwiOlwiUlRZXCIsXCJzbU1hcmdpbkxlZnQxMFwiOlwibkxIXCIsXCJzbU1hcmdpblRvcE4xMFwiOlwiRkNJXCIsXCJzbU1hcmdpblJpZ2h0TjEwXCI6XCJ2R1BcIixcInNtTWFyZ2luQm90dG9tTjEwXCI6XCJocENcIixcInNtTWFyZ2luTGVmdE4xMFwiOlwiU2xJXCIsXCJzbVBhZGRpbmdZMTBcIjpcImhzVFwiLFwic21QYWRkaW5nWDEwXCI6XCJ6YnhcIixcInNtTWFyZ2luU3RhcnQxMVwiOlwiQ29HXCIsXCJzbU1hcmdpbkVuZDExXCI6XCJqWGhcIixcInNtTWFyZ2luU3RhcnROMTFcIjpcInJ3TFwiLFwic21NYXJnaW5FbmROMTFcIjpcImpiX1wiLFwic21NYXJnaW5Ub3AxMVwiOlwiaTM0XCIsXCJzbU1hcmdpblJpZ2h0MTFcIjpcIkE3RVwiLFwic21NYXJnaW5Cb3R0b20xMVwiOlwibmd6XCIsXCJzbU1hcmdpbkxlZnQxMVwiOlwiZndwXCIsXCJzbU1hcmdpblRvcE4xMVwiOlwiZTJ2XCIsXCJzbU1hcmdpblJpZ2h0TjExXCI6XCJKVTVcIixcInNtTWFyZ2luQm90dG9tTjExXCI6XCJaSUlcIixcInNtTWFyZ2luTGVmdE4xMVwiOlwiZllwXCIsXCJzbVBhZGRpbmdZMTFcIjpcIkhWMVwiLFwic21QYWRkaW5nWDExXCI6XCJwS3BcIixcInNtTWFyZ2luU3RhcnQxMlwiOlwiZUNRXCIsXCJzbU1hcmdpbkVuZDEyXCI6XCJrYmxcIixcInNtTWFyZ2luU3RhcnROMTJcIjpcImdsOVwiLFwic21NYXJnaW5FbmROMTJcIjpcIlY5YlwiLFwic21NYXJnaW5Ub3AxMlwiOlwicVhyXCIsXCJzbU1hcmdpblJpZ2h0MTJcIjpcInUwM1wiLFwic21NYXJnaW5Cb3R0b20xMlwiOlwiSjBoXCIsXCJzbU1hcmdpbkxlZnQxMlwiOlwiRVluXCIsXCJzbU1hcmdpblRvcE4xMlwiOlwiRnZKXCIsXCJzbU1hcmdpblJpZ2h0TjEyXCI6XCJMNHNcIixcInNtTWFyZ2luQm90dG9tTjEyXCI6XCJWZmJcIixcInNtTWFyZ2luTGVmdE4xMlwiOlwiZEoyXCIsXCJzbVBhZGRpbmdZMTJcIjpcIklOTFwiLFwic21QYWRkaW5nWDEyXCI6XCJIbXdcIixcIm1kTWFyZ2luU3RhcnQxXCI6XCJkTldcIixcIm1kTWFyZ2luRW5kMVwiOlwiWDU1XCIsXCJtZE1hcmdpblN0YXJ0TjFcIjpcIlBSRlwiLFwibWRNYXJnaW5FbmROMVwiOlwicnJHXCIsXCJtZE1hcmdpblRvcDFcIjpcIkN0a1wiLFwibWRNYXJnaW5SaWdodDFcIjpcImdpaFwiLFwibWRNYXJnaW5Cb3R0b20xXCI6XCJWcEtcIixcIm1kTWFyZ2luTGVmdDFcIjpcIkh2VFwiLFwibWRNYXJnaW5Ub3BOMVwiOlwiU1AzXCIsXCJtZE1hcmdpblJpZ2h0TjFcIjpcInBrMlwiLFwibWRNYXJnaW5Cb3R0b21OMVwiOlwibnR5XCIsXCJtZE1hcmdpbkxlZnROMVwiOlwiRVV3XCIsXCJtZFBhZGRpbmdZMVwiOlwiaFlSXCIsXCJtZFBhZGRpbmdYMVwiOlwiSmJsXCIsXCJtZE1hcmdpblN0YXJ0MlwiOlwibDl5XCIsXCJtZE1hcmdpbkVuZDJcIjpcIm4yM1wiLFwibWRNYXJnaW5TdGFydE4yXCI6XCJ0aXdcIixcIm1kTWFyZ2luRW5kTjJcIjpcInF4TlwiLFwibWRNYXJnaW5Ub3AyXCI6XCJ6WHJcIixcIm1kTWFyZ2luUmlnaHQyXCI6XCJ2Rk9cIixcIm1kTWFyZ2luQm90dG9tMlwiOlwiSFNJXCIsXCJtZE1hcmdpbkxlZnQyXCI6XCJUM2hcIixcIm1kTWFyZ2luVG9wTjJcIjpcIkRiQlwiLFwibWRNYXJnaW5SaWdodE4yXCI6XCJZZWxcIixcIm1kTWFyZ2luQm90dG9tTjJcIjpcImxSV1wiLFwibWRNYXJnaW5MZWZ0TjJcIjpcInBERVwiLFwibWRQYWRkaW5nWTJcIjpcIlF5SlwiLFwibWRQYWRkaW5nWDJcIjpcInpYUlwiLFwibWRNYXJnaW5TdGFydDNcIjpcInNidlwiLFwibWRNYXJnaW5FbmQzXCI6XCJ3UWVcIixcIm1kTWFyZ2luU3RhcnROM1wiOlwibDdRXCIsXCJtZE1hcmdpbkVuZE4zXCI6XCJkYnVcIixcIm1kTWFyZ2luVG9wM1wiOlwiemY1XCIsXCJtZE1hcmdpblJpZ2h0M1wiOlwiSFVPXCIsXCJtZE1hcmdpbkJvdHRvbTNcIjpcIkltdlwiLFwibWRNYXJnaW5MZWZ0M1wiOlwiUTBOXCIsXCJtZE1hcmdpblRvcE4zXCI6XCJJcjVcIixcIm1kTWFyZ2luUmlnaHROM1wiOlwiX3owXCIsXCJtZE1hcmdpbkJvdHRvbU4zXCI6XCJPNVZcIixcIm1kTWFyZ2luTGVmdE4zXCI6XCJHZE5cIixcIm1kUGFkZGluZ1kzXCI6XCJ4VExcIixcIm1kUGFkZGluZ1gzXCI6XCJ4SkFcIixcIm1kTWFyZ2luU3RhcnQ0XCI6XCJjOTZcIixcIm1kTWFyZ2luRW5kNFwiOlwicnA1XCIsXCJtZE1hcmdpblN0YXJ0TjRcIjpcIk55cVwiLFwibWRNYXJnaW5FbmRONFwiOlwiRHJXXCIsXCJtZE1hcmdpblRvcDRcIjpcInVzR1wiLFwibWRNYXJnaW5SaWdodDRcIjpcIlhNZlwiLFwibWRNYXJnaW5Cb3R0b200XCI6XCJZZUNcIixcIm1kTWFyZ2luTGVmdDRcIjpcIlZlTlwiLFwibWRNYXJnaW5Ub3BONFwiOlwiV09tXCIsXCJtZE1hcmdpblJpZ2h0TjRcIjpcImhHRVwiLFwibWRNYXJnaW5Cb3R0b21ONFwiOlwia1JjXCIsXCJtZE1hcmdpbkxlZnRONFwiOlwiZjlOXCIsXCJtZFBhZGRpbmdZNFwiOlwiYjhpXCIsXCJtZFBhZGRpbmdYNFwiOlwiZHowXCIsXCJtZE1hcmdpblN0YXJ0NVwiOlwibmdNXCIsXCJtZE1hcmdpbkVuZDVcIjpcImJob1wiLFwibWRNYXJnaW5TdGFydE41XCI6XCJCYXpcIixcIm1kTWFyZ2luRW5kTjVcIjpcImhYc1wiLFwibWRNYXJnaW5Ub3A1XCI6XCJqMGdcIixcIm1kTWFyZ2luUmlnaHQ1XCI6XCJlb3RcIixcIm1kTWFyZ2luQm90dG9tNVwiOlwiYTM4XCIsXCJtZE1hcmdpbkxlZnQ1XCI6XCJzbVpcIixcIm1kTWFyZ2luVG9wTjVcIjpcImtJb1wiLFwibWRNYXJnaW5SaWdodE41XCI6XCJGRDRcIixcIm1kTWFyZ2luQm90dG9tTjVcIjpcIlpZYVwiLFwibWRNYXJnaW5MZWZ0TjVcIjpcImJZb1wiLFwibWRQYWRkaW5nWTVcIjpcInhnd1wiLFwibWRQYWRkaW5nWDVcIjpcIm1FVVwiLFwibWRNYXJnaW5TdGFydDZcIjpcImJvNFwiLFwibWRNYXJnaW5FbmQ2XCI6XCJ6bjJcIixcIm1kTWFyZ2luU3RhcnRONlwiOlwidXRyXCIsXCJtZE1hcmdpbkVuZE42XCI6XCJ4ZWhcIixcIm1kTWFyZ2luVG9wNlwiOlwiYktiXCIsXCJtZE1hcmdpblJpZ2h0NlwiOlwiVDlQXCIsXCJtZE1hcmdpbkJvdHRvbTZcIjpcImZYY1wiLFwibWRNYXJnaW5MZWZ0NlwiOlwieV96XCIsXCJtZE1hcmdpblRvcE42XCI6XCJfelJcIixcIm1kTWFyZ2luUmlnaHRONlwiOlwiVnlvXCIsXCJtZE1hcmdpbkJvdHRvbU42XCI6XCJQREVcIixcIm1kTWFyZ2luTGVmdE42XCI6XCJ2TXhcIixcIm1kUGFkZGluZ1k2XCI6XCJJcWpcIixcIm1kUGFkZGluZ1g2XCI6XCJfWDdcIixcIm1kTWFyZ2luU3RhcnQ3XCI6XCJhRU9cIixcIm1kTWFyZ2luRW5kN1wiOlwiZEJLXCIsXCJtZE1hcmdpblN0YXJ0TjdcIjpcIlJJTlwiLFwibWRNYXJnaW5FbmRON1wiOlwiYUw0XCIsXCJtZE1hcmdpblRvcDdcIjpcImlQMFwiLFwibWRNYXJnaW5SaWdodDdcIjpcInpOWlwiLFwibWRNYXJnaW5Cb3R0b203XCI6XCJCRnFcIixcIm1kTWFyZ2luTGVmdDdcIjpcImZEVFwiLFwibWRNYXJnaW5Ub3BON1wiOlwiTTV2XCIsXCJtZE1hcmdpblJpZ2h0TjdcIjpcInlqUFwiLFwibWRNYXJnaW5Cb3R0b21ON1wiOlwiZFdGXCIsXCJtZE1hcmdpbkxlZnRON1wiOlwidERIXCIsXCJtZFBhZGRpbmdZN1wiOlwiSnNIXCIsXCJtZFBhZGRpbmdYN1wiOlwibGQzXCIsXCJtZE1hcmdpblN0YXJ0OFwiOlwiQmZyXCIsXCJtZE1hcmdpbkVuZDhcIjpcInNWelwiLFwibWRNYXJnaW5TdGFydE44XCI6XCJLbkRcIixcIm1kTWFyZ2luRW5kTjhcIjpcIkZuQ1wiLFwibWRNYXJnaW5Ub3A4XCI6XCJyZEFcIixcIm1kTWFyZ2luUmlnaHQ4XCI6XCJjdHlcIixcIm1kTWFyZ2luQm90dG9tOFwiOlwiWHJQXCIsXCJtZE1hcmdpbkxlZnQ4XCI6XCJoRm1cIixcIm1kTWFyZ2luVG9wTjhcIjpcInpPdVwiLFwibWRNYXJnaW5SaWdodE44XCI6XCJTcWJcIixcIm1kTWFyZ2luQm90dG9tTjhcIjpcImZCUVwiLFwibWRNYXJnaW5MZWZ0TjhcIjpcInd6TFwiLFwibWRQYWRkaW5nWThcIjpcIkVLblwiLFwibWRQYWRkaW5nWDhcIjpcIkpZeVwiLFwibWRNYXJnaW5TdGFydDlcIjpcImJsSVwiLFwibWRNYXJnaW5FbmQ5XCI6XCJlZ3RcIixcIm1kTWFyZ2luU3RhcnROOVwiOlwid1dwXCIsXCJtZE1hcmdpbkVuZE45XCI6XCJUVkpcIixcIm1kTWFyZ2luVG9wOVwiOlwiTDRXXCIsXCJtZE1hcmdpblJpZ2h0OVwiOlwiQ3JsXCIsXCJtZE1hcmdpbkJvdHRvbTlcIjpcIlNVNVwiLFwibWRNYXJnaW5MZWZ0OVwiOlwiUlJRXCIsXCJtZE1hcmdpblRvcE45XCI6XCJXMk9cIixcIm1kTWFyZ2luUmlnaHROOVwiOlwiWEpxXCIsXCJtZE1hcmdpbkJvdHRvbU45XCI6XCJTeWRcIixcIm1kTWFyZ2luTGVmdE45XCI6XCJ2dE1cIixcIm1kUGFkZGluZ1k5XCI6XCJLNEdcIixcIm1kUGFkZGluZ1g5XCI6XCJIbW9cIixcIm1kTWFyZ2luU3RhcnQxMFwiOlwiZ0E4XCIsXCJtZE1hcmdpbkVuZDEwXCI6XCJRNFpcIixcIm1kTWFyZ2luU3RhcnROMTBcIjpcIldSV1wiLFwibWRNYXJnaW5FbmROMTBcIjpcInhLLVwiLFwibWRNYXJnaW5Ub3AxMFwiOlwiUEhLXCIsXCJtZE1hcmdpblJpZ2h0MTBcIjpcImF5MFwiLFwibWRNYXJnaW5Cb3R0b20xMFwiOlwiX2pmXCIsXCJtZE1hcmdpbkxlZnQxMFwiOlwiTldBXCIsXCJtZE1hcmdpblRvcE4xMFwiOlwicGRJXCIsXCJtZE1hcmdpblJpZ2h0TjEwXCI6XCJEU3lcIixcIm1kTWFyZ2luQm90dG9tTjEwXCI6XCJ6WERcIixcIm1kTWFyZ2luTGVmdE4xMFwiOlwiX0dXXCIsXCJtZFBhZGRpbmdZMTBcIjpcIkhoaVwiLFwibWRQYWRkaW5nWDEwXCI6XCJGR2xcIixcIm1kTWFyZ2luU3RhcnQxMVwiOlwiTzNlXCIsXCJtZE1hcmdpbkVuZDExXCI6XCJxWllcIixcIm1kTWFyZ2luU3RhcnROMTFcIjpcImo4OFwiLFwibWRNYXJnaW5FbmROMTFcIjpcImZ1LVwiLFwibWRNYXJnaW5Ub3AxMVwiOlwiSFA2XCIsXCJtZE1hcmdpblJpZ2h0MTFcIjpcIndBWVwiLFwibWRNYXJnaW5Cb3R0b20xMVwiOlwic2ZwXCIsXCJtZE1hcmdpbkxlZnQxMVwiOlwieURGXCIsXCJtZE1hcmdpblRvcE4xMVwiOlwiaHRDXCIsXCJtZE1hcmdpblJpZ2h0TjExXCI6XCJWcVFcIixcIm1kTWFyZ2luQm90dG9tTjExXCI6XCJCMUdcIixcIm1kTWFyZ2luTGVmdE4xMVwiOlwiR25vXCIsXCJtZFBhZGRpbmdZMTFcIjpcIk9pRFwiLFwibWRQYWRkaW5nWDExXCI6XCJnUk5cIixcIm1kTWFyZ2luU3RhcnQxMlwiOlwiTVl4XCIsXCJtZE1hcmdpbkVuZDEyXCI6XCJVUzJcIixcIm1kTWFyZ2luU3RhcnROMTJcIjpcIkplQVwiLFwibWRNYXJnaW5FbmROMTJcIjpcImgyc1wiLFwibWRNYXJnaW5Ub3AxMlwiOlwiYkhOXCIsXCJtZE1hcmdpblJpZ2h0MTJcIjpcInF0Q1wiLFwibWRNYXJnaW5Cb3R0b20xMlwiOlwicjhCXCIsXCJtZE1hcmdpbkxlZnQxMlwiOlwiVWpmXCIsXCJtZE1hcmdpblRvcE4xMlwiOlwiZG04XCIsXCJtZE1hcmdpblJpZ2h0TjEyXCI6XCJvdWVcIixcIm1kTWFyZ2luQm90dG9tTjEyXCI6XCJjQ0hcIixcIm1kTWFyZ2luTGVmdE4xMlwiOlwiZzhoXCIsXCJtZFBhZGRpbmdZMTJcIjpcInRmRlwiLFwibWRQYWRkaW5nWDEyXCI6XCJseEpcIixcImxnTWFyZ2luU3RhcnQxXCI6XCJHWmNcIixcImxnTWFyZ2luRW5kMVwiOlwiWldPXCIsXCJsZ01hcmdpblN0YXJ0TjFcIjpcIkM0UlwiLFwibGdNYXJnaW5FbmROMVwiOlwiTW02XCIsXCJsZ01hcmdpblRvcDFcIjpcIl83elwiLFwibGdNYXJnaW5SaWdodDFcIjpcIkRvLVwiLFwibGdNYXJnaW5Cb3R0b20xXCI6XCJtS1pcIixcImxnTWFyZ2luTGVmdDFcIjpcImUyVVwiLFwibGdNYXJnaW5Ub3BOMVwiOlwidFdyXCIsXCJsZ01hcmdpblJpZ2h0TjFcIjpcIkxVd1wiLFwibGdNYXJnaW5Cb3R0b21OMVwiOlwicmhlXCIsXCJsZ01hcmdpbkxlZnROMVwiOlwiZFRZXCIsXCJsZ1BhZGRpbmdZMVwiOlwiTlhRXCIsXCJsZ1BhZGRpbmdYMVwiOlwiVWlQXCIsXCJsZ01hcmdpblN0YXJ0MlwiOlwialctXCIsXCJsZ01hcmdpbkVuZDJcIjpcImhIZ1wiLFwibGdNYXJnaW5TdGFydE4yXCI6XCJPNm5cIixcImxnTWFyZ2luRW5kTjJcIjpcIkszLVwiLFwibGdNYXJnaW5Ub3AyXCI6XCJxMWJcIixcImxnTWFyZ2luUmlnaHQyXCI6XCJxcF9cIixcImxnTWFyZ2luQm90dG9tMlwiOlwiYW56XCIsXCJsZ01hcmdpbkxlZnQyXCI6XCJyM2JcIixcImxnTWFyZ2luVG9wTjJcIjpcIlVId1wiLFwibGdNYXJnaW5SaWdodE4yXCI6XCJuc2JcIixcImxnTWFyZ2luQm90dG9tTjJcIjpcInRlQlwiLFwibGdNYXJnaW5MZWZ0TjJcIjpcIlE2MlwiLFwibGdQYWRkaW5nWTJcIjpcIlF3aFwiLFwibGdQYWRkaW5nWDJcIjpcImF6WVwiLFwibGdNYXJnaW5TdGFydDNcIjpcImJPTVwiLFwibGdNYXJnaW5FbmQzXCI6XCJOZ0JcIixcImxnTWFyZ2luU3RhcnROM1wiOlwiSW5HXCIsXCJsZ01hcmdpbkVuZE4zXCI6XCJ2SnNcIixcImxnTWFyZ2luVG9wM1wiOlwiRkVfXCIsXCJsZ01hcmdpblJpZ2h0M1wiOlwiUl9yXCIsXCJsZ01hcmdpbkJvdHRvbTNcIjpcIkRiU1wiLFwibGdNYXJnaW5MZWZ0M1wiOlwiUUd3XCIsXCJsZ01hcmdpblRvcE4zXCI6XCJSZmdcIixcImxnTWFyZ2luUmlnaHROM1wiOlwiSWM1XCIsXCJsZ01hcmdpbkJvdHRvbU4zXCI6XCJRT1pcIixcImxnTWFyZ2luTGVmdE4zXCI6XCJLSmFcIixcImxnUGFkZGluZ1kzXCI6XCJmdGRcIixcImxnUGFkZGluZ1gzXCI6XCJNSHdcIixcImxnTWFyZ2luU3RhcnQ0XCI6XCJsVU5cIixcImxnTWFyZ2luRW5kNFwiOlwiZUNmXCIsXCJsZ01hcmdpblN0YXJ0TjRcIjpcImFqWVwiLFwibGdNYXJnaW5FbmRONFwiOlwiRWJpXCIsXCJsZ01hcmdpblRvcDRcIjpcIkE5SFwiLFwibGdNYXJnaW5SaWdodDRcIjpcIlV1U1wiLFwibGdNYXJnaW5Cb3R0b200XCI6XCJld2FcIixcImxnTWFyZ2luTGVmdDRcIjpcInFDRVwiLFwibGdNYXJnaW5Ub3BONFwiOlwiSjlzXCIsXCJsZ01hcmdpblJpZ2h0TjRcIjpcImV6cFwiLFwibGdNYXJnaW5Cb3R0b21ONFwiOlwiZW1qXCIsXCJsZ01hcmdpbkxlZnRONFwiOlwid1FvXCIsXCJsZ1BhZGRpbmdZNFwiOlwiYzNsXCIsXCJsZ1BhZGRpbmdYNFwiOlwiQjRNXCIsXCJsZ01hcmdpblN0YXJ0NVwiOlwiWGNLXCIsXCJsZ01hcmdpbkVuZDVcIjpcImZIMlwiLFwibGdNYXJnaW5TdGFydE41XCI6XCJZdmVcIixcImxnTWFyZ2luRW5kTjVcIjpcInBNY1wiLFwibGdNYXJnaW5Ub3A1XCI6XCJJT3NcIixcImxnTWFyZ2luUmlnaHQ1XCI6XCJCeVhcIixcImxnTWFyZ2luQm90dG9tNVwiOlwiWE42XCIsXCJsZ01hcmdpbkxlZnQ1XCI6XCJZaUxcIixcImxnTWFyZ2luVG9wTjVcIjpcIlBxclwiLFwibGdNYXJnaW5SaWdodE41XCI6XCJJdlJcIixcImxnTWFyZ2luQm90dG9tTjVcIjpcIkdqc1wiLFwibGdNYXJnaW5MZWZ0TjVcIjpcInl4c1wiLFwibGdQYWRkaW5nWTVcIjpcInc4R1wiLFwibGdQYWRkaW5nWDVcIjpcIkRrblwiLFwibGdNYXJnaW5TdGFydDZcIjpcIlNYVVwiLFwibGdNYXJnaW5FbmQ2XCI6XCJad2JcIixcImxnTWFyZ2luU3RhcnRONlwiOlwiRHV3XCIsXCJsZ01hcmdpbkVuZE42XCI6XCJIbG5cIixcImxnTWFyZ2luVG9wNlwiOlwidFd0XCIsXCJsZ01hcmdpblJpZ2h0NlwiOlwiT1YtXCIsXCJsZ01hcmdpbkJvdHRvbTZcIjpcIm1nbFwiLFwibGdNYXJnaW5MZWZ0NlwiOlwiQzU5XCIsXCJsZ01hcmdpblRvcE42XCI6XCJlR3ZcIixcImxnTWFyZ2luUmlnaHRONlwiOlwiWkw0XCIsXCJsZ01hcmdpbkJvdHRvbU42XCI6XCJfWTlcIixcImxnTWFyZ2luTGVmdE42XCI6XCJ6OHNcIixcImxnUGFkZGluZ1k2XCI6XCJLeW5cIixcImxnUGFkZGluZ1g2XCI6XCJlbTJcIixcImxnTWFyZ2luU3RhcnQ3XCI6XCJHYW9cIixcImxnTWFyZ2luRW5kN1wiOlwicVJPXCIsXCJsZ01hcmdpblN0YXJ0TjdcIjpcInlhNlwiLFwibGdNYXJnaW5FbmRON1wiOlwiY0VSXCIsXCJsZ01hcmdpblRvcDdcIjpcIllzblwiLFwibGdNYXJnaW5SaWdodDdcIjpcIkQ5WVwiLFwibGdNYXJnaW5Cb3R0b203XCI6XCJPXzdcIixcImxnTWFyZ2luTGVmdDdcIjpcIkNuT1wiLFwibGdNYXJnaW5Ub3BON1wiOlwiaW90XCIsXCJsZ01hcmdpblJpZ2h0TjdcIjpcIm9YN1wiLFwibGdNYXJnaW5Cb3R0b21ON1wiOlwiSDBWXCIsXCJsZ01hcmdpbkxlZnRON1wiOlwibWNWXCIsXCJsZ1BhZGRpbmdZN1wiOlwiUnlJXCIsXCJsZ1BhZGRpbmdYN1wiOlwia1B6XCIsXCJsZ01hcmdpblN0YXJ0OFwiOlwiQVFlXCIsXCJsZ01hcmdpbkVuZDhcIjpcImxwV1wiLFwibGdNYXJnaW5TdGFydE44XCI6XCJVUmFcIixcImxnTWFyZ2luRW5kTjhcIjpcImNZTFwiLFwibGdNYXJnaW5Ub3A4XCI6XCJkRndcIixcImxnTWFyZ2luUmlnaHQ4XCI6XCJodU5cIixcImxnTWFyZ2luQm90dG9tOFwiOlwiZGw0XCIsXCJsZ01hcmdpbkxlZnQ4XCI6XCJaREhcIixcImxnTWFyZ2luVG9wTjhcIjpcIkl2Q1wiLFwibGdNYXJnaW5SaWdodE44XCI6XCJRdkJcIixcImxnTWFyZ2luQm90dG9tTjhcIjpcIlRBV1wiLFwibGdNYXJnaW5MZWZ0TjhcIjpcIlVnalwiLFwibGdQYWRkaW5nWThcIjpcIlpqaFwiLFwibGdQYWRkaW5nWDhcIjpcIlhwOVwiLFwibGdNYXJnaW5TdGFydDlcIjpcIko0RFwiLFwibGdNYXJnaW5FbmQ5XCI6XCJkbFFcIixcImxnTWFyZ2luU3RhcnROOVwiOlwidlRuXCIsXCJsZ01hcmdpbkVuZE45XCI6XCJ6bFVcIixcImxnTWFyZ2luVG9wOVwiOlwiaXRvXCIsXCJsZ01hcmdpblJpZ2h0OVwiOlwic3lEXCIsXCJsZ01hcmdpbkJvdHRvbTlcIjpcInp5VVwiLFwibGdNYXJnaW5MZWZ0OVwiOlwiZnhzXCIsXCJsZ01hcmdpblRvcE45XCI6XCJQdDJcIixcImxnTWFyZ2luUmlnaHROOVwiOlwicndhXCIsXCJsZ01hcmdpbkJvdHRvbU45XCI6XCJXaHZcIixcImxnTWFyZ2luTGVmdE45XCI6XCJSUnFcIixcImxnUGFkZGluZ1k5XCI6XCJPREZcIixcImxnUGFkZGluZ1g5XCI6XCJCdG9cIixcImxnTWFyZ2luU3RhcnQxMFwiOlwiQUV1XCIsXCJsZ01hcmdpbkVuZDEwXCI6XCJfc3NcIixcImxnTWFyZ2luU3RhcnROMTBcIjpcIk40QVwiLFwibGdNYXJnaW5FbmROMTBcIjpcIlhRZVwiLFwibGdNYXJnaW5Ub3AxMFwiOlwiVDlwXCIsXCJsZ01hcmdpblJpZ2h0MTBcIjpcImdQVlwiLFwibGdNYXJnaW5Cb3R0b20xMFwiOlwiVzFtXCIsXCJsZ01hcmdpbkxlZnQxMFwiOlwiSFlCXCIsXCJsZ01hcmdpblRvcE4xMFwiOlwiT3VKXCIsXCJsZ01hcmdpblJpZ2h0TjEwXCI6XCJnUmJcIixcImxnTWFyZ2luQm90dG9tTjEwXCI6XCJfdDlcIixcImxnTWFyZ2luTGVmdE4xMFwiOlwiR3hKXCIsXCJsZ1BhZGRpbmdZMTBcIjpcIm9xTFwiLFwibGdQYWRkaW5nWDEwXCI6XCJhZEhcIixcImxnTWFyZ2luU3RhcnQxMVwiOlwiZjUzXCIsXCJsZ01hcmdpbkVuZDExXCI6XCJrbGJcIixcImxnTWFyZ2luU3RhcnROMTFcIjpcIkFVMlwiLFwibGdNYXJnaW5FbmROMTFcIjpcIkZ2RFwiLFwibGdNYXJnaW5Ub3AxMVwiOlwiSXowXCIsXCJsZ01hcmdpblJpZ2h0MTFcIjpcInJPWlwiLFwibGdNYXJnaW5Cb3R0b20xMVwiOlwiSkNoXCIsXCJsZ01hcmdpbkxlZnQxMVwiOlwidWxHXCIsXCJsZ01hcmdpblRvcE4xMVwiOlwiTVVoXCIsXCJsZ01hcmdpblJpZ2h0TjExXCI6XCJ1U1hcIixcImxnTWFyZ2luQm90dG9tTjExXCI6XCJmd3lcIixcImxnTWFyZ2luTGVmdE4xMVwiOlwidDliXCIsXCJsZ1BhZGRpbmdZMTFcIjpcInpLMlwiLFwibGdQYWRkaW5nWDExXCI6XCJIQTRcIixcImxnTWFyZ2luU3RhcnQxMlwiOlwib2ZsXCIsXCJsZ01hcmdpbkVuZDEyXCI6XCJNZ2hcIixcImxnTWFyZ2luU3RhcnROMTJcIjpcIlkzQlwiLFwibGdNYXJnaW5FbmROMTJcIjpcInJqR1wiLFwibGdNYXJnaW5Ub3AxMlwiOlwiVjNrXCIsXCJsZ01hcmdpblJpZ2h0MTJcIjpcIk1kWFwiLFwibGdNYXJnaW5Cb3R0b20xMlwiOlwiZzlCXCIsXCJsZ01hcmdpbkxlZnQxMlwiOlwiTS1sXCIsXCJsZ01hcmdpblRvcE4xMlwiOlwibDI5XCIsXCJsZ01hcmdpblJpZ2h0TjEyXCI6XCJvbkRcIixcImxnTWFyZ2luQm90dG9tTjEyXCI6XCJ6UF9cIixcImxnTWFyZ2luTGVmdE4xMlwiOlwiQ1ZmXCIsXCJsZ1BhZGRpbmdZMTJcIjpcIkMwR1wiLFwibGdQYWRkaW5nWDEyXCI6XCJrTEFcIixcIm1hcmdpblN0YXJ0QXV0b1wiOlwiczdJXCIsXCJtYXJnaW5FbmRBdXRvXCI6XCJmZWhcIixcIm1hcmdpblRvcEF1dG9cIjpcIk1NaFwiLFwibWFyZ2luUmlnaHRBdXRvXCI6XCJ6b1FcIixcIm1hcmdpbkJvdHRvbUF1dG9cIjpcIl9ZNVwiLFwibWFyZ2luTGVmdEF1dG9cIjpcInlmTlwiLFwic21NYXJnaW5TdGFydEF1dG9cIjpcIm1vNVwiLFwic21NYXJnaW5FbmRBdXRvXCI6XCJyRm5cIixcInNtTWFyZ2luVG9wQXV0b1wiOlwiak9UXCIsXCJzbU1hcmdpblJpZ2h0QXV0b1wiOlwiUXRlXCIsXCJzbU1hcmdpbkJvdHRvbUF1dG9cIjpcIlZmZVwiLFwic21NYXJnaW5MZWZ0QXV0b1wiOlwiU2NEXCIsXCJtZE1hcmdpblN0YXJ0QXV0b1wiOlwiV0M4XCIsXCJtZE1hcmdpbkVuZEF1dG9cIjpcIlY0OVwiLFwibWRNYXJnaW5Ub3BBdXRvXCI6XCJPSHBcIixcIm1kTWFyZ2luUmlnaHRBdXRvXCI6XCJTazhcIixcIm1kTWFyZ2luQm90dG9tQXV0b1wiOlwiZGI1XCIsXCJtZE1hcmdpbkxlZnRBdXRvXCI6XCJ5RTJcIixcImxnTWFyZ2luU3RhcnRBdXRvXCI6XCJFek9cIixcImxnTWFyZ2luRW5kQXV0b1wiOlwiWHF5XCIsXCJsZ01hcmdpblRvcEF1dG9cIjpcIlhoVlwiLFwibGdNYXJnaW5SaWdodEF1dG9cIjpcIlNFNVwiLFwibGdNYXJnaW5Cb3R0b21BdXRvXCI6XCJYc1ZcIixcImxnTWFyZ2luTGVmdEF1dG9cIjpcIkk2RFwifTtcblxuLypcblxuU3R5bGUgaXMgYSBtb25vaWQgdGhhdCBjYXB0dXJlIHRoZSBcInRvLWJlLWFwcGxpZWRcIiBzdHlsZXMgKGlubGluZSBhbmQgY2xhc3NlcylcbmZvciBhIEJveC4gSXQncyBiYXNpY2FsbHkgc2V0IHRoYXQgaXMgY2xvc2VkIHVuZGVyIGFuIGFzc29jaWF0aXZlIGJpbmFyeVxub3BlcmF0aW9uIGFuZCBoYXMgYW4gaWRlbnRpdHkgZWxlbWVudCBzdWNoIHRoYXQgZm9yIGFsbCBIQSBIQSBIQS4gWWVzLCBpdCdzIGFcbm1vbm9pZCwgd2hpY2ggc291bmRzIHNjYXJ5IGJ1dCBpdCdzIG5vdCByZWFsbHkgYW5kIGFjdHVhbGx5IHN1cGVyIHVzZWZ1bC4gQWxsXG50aGF0IG1lYW5zIGlzIHRoYXQgYmFzaWNhbGx5IHlvdSBjYW4gZG8gdHdvIHRoaW5ncyB3aXRoIGl0OlxuXG4gICAgMS4gY29uY2F0KGNvbmNhdChhLCBiKSwgYykgPT09IGNvbmNhdChhLCBjb25jYXQoYiwgYykpO1xuICAgIDIuIGNvbmNhdChpZGVudGl0eSgpLCBhKSA9PT0gY29uY2F0KGEsIGlkZW50aXR5KCkpID09PSBhO1xuXG5XaGF0IHRoYXQgbWVhbnMgaXMgdGhhdCBpdCdzIHJlYWxseSBlYXN5IHRvIGNvbXBvc2Ugc3R5bGVzIHRvZ2V0aGVyIGFuZCB0aGVcbm9yZGVyIGluIHdoaWNoIHlvdSBkbyBzbyBkb2Vzbid0IHJlYWxseSBtYXR0ZXIuXG5cbiovXG4vLyBUT0RPOiBUaGlzIHR5cGUgc2hvdWxkIGJlIG9wYXF1ZSwgaG93ZXZlciB0aGUgQmFiZWwgcGFyc2VyIGRvZXNuJ3Qgc3VwcG9ydFxuLy8gICAgICAgdGhlIG9wYXF1ZSBzeW50YXggeWV0LlxudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gaWRlbnRpdHkoKSB7XG4gIHJldHVybiB7XG4gICAgY2xhc3NOYW1lOiBuZXcgU2V0KCksXG4gICAgaW5saW5lU3R5bGU6IHt9XG4gIH07XG59O1xudmFyIGZyb21DbGFzc05hbWUgPSBmdW5jdGlvbiBmcm9tQ2xhc3NOYW1lKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NOYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc05hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjbGFzc05hbWU6IG5ldyBTZXQoY2xhc3NOYW1lcyksXG4gICAgaW5saW5lU3R5bGU6IHt9XG4gIH07XG59O1xudmFyIGZyb21JbmxpbmVTdHlsZSA9IGZ1bmN0aW9uIGZyb21JbmxpbmVTdHlsZShpbmxpbmVTdHlsZSkge1xuICByZXR1cm4ge1xuICAgIGNsYXNzTmFtZTogbmV3IFNldCgpLFxuICAgIGlubGluZVN0eWxlOiBpbmxpbmVTdHlsZVxuICB9O1xufTtcbnZhciBjb25jYXQgPSBmdW5jdGlvbiBjb25jYXQoc3R5bGVzKSB7XG4gIHJldHVybiBzdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChfcmVmLCBfcmVmMikge1xuICAgIHZhciBjbGFzc05hbWVBID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICAgIGlubGluZVN0eWxlQSA9IF9yZWYuaW5saW5lU3R5bGU7XG4gICAgdmFyIGNsYXNzTmFtZUIgPSBfcmVmMi5jbGFzc05hbWUsXG4gICAgICAgIGlubGluZVN0eWxlQiA9IF9yZWYyLmlubGluZVN0eWxlO1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6IG5ldyBTZXQoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGFzc05hbWVBKSwgX3RvQ29uc3VtYWJsZUFycmF5KGNsYXNzTmFtZUIpKSksXG4gICAgICBpbmxpbmVTdHlsZTogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGlubGluZVN0eWxlQSksIGlubGluZVN0eWxlQilcbiAgICB9O1xuICB9LCBpZGVudGl0eSgpKTtcbn07XG52YXIgbWFwQ2xhc3NOYW1lID0gZnVuY3Rpb24gbWFwQ2xhc3NOYW1lKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gX3JlZjMuY2xhc3NOYW1lLFxuICAgICAgICBpbmxpbmVTdHlsZSA9IF9yZWYzLmlubGluZVN0eWxlO1xuICAgIHJldHVybiB7XG4gICAgICBjbGFzc05hbWU6IG5ldyBTZXQoQXJyYXkuZnJvbShjbGFzc05hbWUpLm1hcChmbikpLFxuICAgICAgaW5saW5lU3R5bGU6IGlubGluZVN0eWxlXG4gICAgfTtcbiAgfTtcbn07XG52YXIgdG9Qcm9wcyA9IGZ1bmN0aW9uIHRvUHJvcHMoX3JlZjQpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWY0LmNsYXNzTmFtZSxcbiAgICAgIGlubGluZVN0eWxlID0gX3JlZjQuaW5saW5lU3R5bGU7XG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIGlmIChjbGFzc05hbWUuc2l6ZSA+IDApIHtcbiAgICAvLyBTb3J0aW5nIGhlcmUgZW5zdXJlcyB0aGF0IGNsYXNzTmFtZXMgYXJlIGFsd2F5cyBzdGFibGUsIHJlZHVjaW5nIGRpZmZcbiAgICAvLyBjaHVybi4gQm94IHVzdWFsbHkgaGFzIGEgc21hbGwgbnVtYmVyIG9mIHByb3BlcnRpZXMgc28gaXQncyBub3QgYSBwZXJmXG4gICAgLy8gY29uY2Vybi5cbiAgICBwcm9wcy5jbGFzc05hbWUgPSBBcnJheS5mcm9tKGNsYXNzTmFtZSkuc29ydCgpLmpvaW4oJyAnKTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhpbmxpbmVTdHlsZSkubGVuZ3RoID4gMCkge1xuICAgIHByb3BzLnN0eWxlID0gaW5saW5lU3R5bGU7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59O1xuXG4vKlxuXG5UcmFuc2Zvcm1zXG5cblRoZXNlIGFyZSBhIGNvbGxlY3Rpb24gb2YgYSBmZXcgZnVuY3RvcnMgdGhhdCB0YWtlIHZhbHVlcyBhbmQgcmV0dXJucyBTdHlsZSdzLiBPTUcsIEkgdXNlZCB0aGUgd29yZCBmdW5jdG9yIC0gaXQncyByZWFsbHkganVzdCBhIGZhbmN5IHdvcmQgZm9yIGZ1bmN0aW9uLlxuXG4qL1xuXG4vLyBBZGRzIGEgY2xhc3NuYW1lIHdoZW4gYSBwcm9wZXJ0eSBpcyBwcmVzZW50LlxuLy9cbi8vICAgICA8Qm94IHRvcCAvPlxuLy9cbnZhciB0b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc05hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzTmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB2YWwgPyBmcm9tQ2xhc3NOYW1lLmFwcGx5KHZvaWQgMCwgY2xhc3NOYW1lcykgOiBpZGVudGl0eSgpO1xuICB9O1xufTsgLy8gTWFwcyBzdHJpbmcgdmFsdWVzIHRvIGNsYXNzZXNcbi8vXG4vLyAgICAgPEJveCBhbGlnbkl0ZW1zPVwiY2VudGVyXCIgLz5cbi8vXG5cbnZhciBtYXBwaW5nID0gZnVuY3Rpb24gbWFwcGluZyhtYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgdmFsKSA/IGZyb21DbGFzc05hbWUobWFwW3ZhbF0pIDogaWRlbnRpdHkoKTtcbiAgfTtcbn07IC8vIE1hcHMgYSByYW5nZSBvZiBpbnRlZ2VycyB0byBhIHJhbmdlIG9mIGNsYXNzbmFtZXNcbi8vXG4vLyAgICAgPEJveCBwYWRkaW5nPXsxfSAvPlxuLy9cblxudmFyIHJhbmdlID0gZnVuY3Rpb24gcmFuZ2Uoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGZyb21DbGFzc05hbWUoXCJcIi5jb25jYXQoc2NhbGUpLmNvbmNhdChuIDwgMCA/IFwiTlwiLmNvbmNhdChNYXRoLmFicyhuKSkgOiBuKSk7XG4gIH07XG59OyAvLyBMaWtlIGByYW5nZWAsIG1hcHMgYSByYW5nZSBvZiBpbnRlZ2VycyB0byBhIHJhbmdlIG9mIGNsYXNzbmFtZXMsIGV4Y2x1ZGluZ1xuLy8gemVybyB2YWx1ZXMuXG4vL1xuLy8gICAgIDxCb3ggcGFkZGluZz17MH0gLz5cblxudmFyIHJhbmdlV2l0aG91dFplcm8gPSBmdW5jdGlvbiByYW5nZVdpdGhvdXRaZXJvKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuID09PSAwID8gaWRlbnRpdHkoKSA6IHJhbmdlKHNjYWxlKShuKTtcbiAgfTtcbn07IC8vIEJpbmRzIGEgc3RyaW5nIGNsYXNzbmFtZSB0byB0aGUgdmFsdWUgaW4gYW4gb2JqZWN0LiBVc2VmdWwgd2hlbiBpbnRlcmFjdGluZ1xuLy8gd2l0aCByYW5nZXMgdGhhdCBuZWVkIHRvIGNvbWUgZHluYW1pY2FsbHkgZnJvbSBhIHN0eWxlIG9iamVjdC4gVGhpcyBpc1xuLy8gc2ltaWxhciB0byB0aGUgTlBNIHBhY2thZ2UgJ2NsYXNzbmFtZXMvYmluZCcuXG5cbmZ1bmN0aW9uIGJpbmQoZm4sIHNjb3BlKSB7XG4gIHZhciBtYXAgPSBtYXBDbGFzc05hbWUoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gc2NvcGVbbmFtZV07XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBtYXAoZm4odmFsKSk7XG4gIH07XG59IC8vIFRoaXMgdGFrZXMgYSBzZXJpZXMgb2YgdGhlIHByZXZpb3VzbHkgZGVmaW5lZCBmdW5jdG9ycywgcnVucyB0aGVtIGFsbFxuLy8gYWdhaW5zdCBhIHZhbHVlIGFuZCByZXR1cm5zIHRoZSBzZXQgb2YgdGhlaXIgY2xhc3NuYW1lcy5cblxudmFyIHVuaW9uID0gZnVuY3Rpb24gdW5pb24oKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZm5zID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgZm5zW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiBjb25jYXQoZm5zLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmbih2YWwpO1xuICAgIH0pKTtcbiAgfTtcbn07XG5cbi8qXG5cbiMgUHJvcFR5cGVzXG5cbkJveCdzIHR5cGUgZGVmaW5pdGlvbiBpcyBleGhhdXN0aXZlLiBXaXRoIHRoZSBleGNlcHRpb24gb2YgYGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGVgLCB2YWx1ZXNcbnNob3VsZG4ndCBiZSBhbWJpZ2lvdXMuIFRoYXQgbWVhbnMgdGhhdCB3ZSBoYXZlIHRvIHR5cGUgb3V0IHRoaW5ncyBsaWtlIGJvaW50cywgYnV0IHRoYXQncyBhbHNvXG53aGVyZSBCb3gncyBtYWdpYyBsaWVzLiBBbHNvLCBieSBwdXR0aW5nIGluIGV4dHJhIGVmZm9ydCBhcm91bmQgdHlwZSBkZWZpbml0aW9ucyBoZXJlLCB3ZSBjYW4gc2tpcFxuZXh0cmEgcnVudGltZSB0eXBlY2hlY2tzIGluIHRoZSB0cmFuc2Zvcm1lcnMgZm9yIHBlcmZvcm1hbmNlLlxuXG4qL1xuXG4vLyAtLVxuXG4vKlxuXG4jIFRyYW5zZm9ybWVyc1xuXG5UaGlzIGlzIHdoZXJlIHRoZSBtZWF0IGFuZCB0aGUgYm9uZXMgb2YgQm94J3MgdHJhbnNmb3JtcyBhcmUuIFlvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoZSBEU0wgaW4gYC4vdHJhbnNmb3Jtcy5qc2AsIGJ1dCBiYXNpY2FsbHkgdGhleSBhcmUgYSBzbWFsbCBkZWNsYXJhdGl2ZSB3YXkgb2Ygc3BlY2lmeWluZyBob3cgYSBwcm9wZXJ0eSAoaS5lLiBgbWFyZ2luVG9wPXs0fWApIGdldHMgdHVybmVkIGludG8gYSBDU1MgY2xhc3MgKGBtYXJnaW5Ub3A0YCkuXG5cblRoZXJlJ3MgYSBsaXR0bGUgcHJlYW1ibGUgaGVyZSwgYnV0IGl0IGN1bG1pbmF0ZXMgaW4gYSBiaWcgb2JqZWN0IG1hcHBpbmcgdGhlIGFjdHVhbCBwcm9wZXJ0eSBuYW1lcyB0byB0aGUgdHJhbnNmb3JtZXIgdmFsdWVzLlxuXG4qL1xudmFyIHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2ggPSBmdW5jdGlvbiB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBiaW5kKHJhbmdlV2l0aG91dFplcm8oc2VsZWN0b3IpLCB3aGl0ZXNwYWNlKShtKTtcbiAgICB9XG5cbiAgICBpZiAobSA9PT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gZnJvbUNsYXNzTmFtZSh3aGl0ZXNwYWNlW1wiXCIuY29uY2F0KHNlbGVjdG9yLCBcIkF1dG9cIildKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaWRlbnRpdHkoKTtcbiAgfTtcbn07XG5cbnZhciByb3VuZGluZyA9IGZ1bmN0aW9uIHJvdW5kaW5nKHIpIHtcbiAgaWYgKHR5cGVvZiByID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBiaW5kKHJhbmdlKCdyb3VuZGluZycpLCBib3JkZXJzKShyKTtcbiAgfVxuXG4gIGlmIChyID09PSAnY2lyY2xlJykge1xuICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKGJvcmRlcnMuY2lyY2xlKTtcbiAgfVxuXG4gIGlmIChyID09PSAncGlsbCcpIHtcbiAgICByZXR1cm4gZnJvbUNsYXNzTmFtZShib3JkZXJzLnBpbGwpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aXR5KCk7XG59O1xuXG52YXIgbWFyZ2luU3RhcnQgPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdtYXJnaW5TdGFydCcpO1xudmFyIG1hcmdpbkVuZCA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ21hcmdpbkVuZCcpO1xudmFyIG1hcmdpblRvcCA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ21hcmdpblRvcCcpO1xudmFyIG1hcmdpblJpZ2h0ID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbWFyZ2luUmlnaHQnKTtcbnZhciBtYXJnaW5Cb3R0b20gPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdtYXJnaW5Cb3R0b20nKTtcbnZhciBtYXJnaW5MZWZ0ID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbWFyZ2luTGVmdCcpO1xudmFyIG1hcmdpbiA9IHVuaW9uKG1hcmdpblRvcCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0LCBtYXJnaW5SaWdodCk7XG52YXIgc21NYXJnaW5Ub3AgPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdzbU1hcmdpblRvcCcpO1xudmFyIHNtTWFyZ2luUmlnaHQgPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdzbU1hcmdpblJpZ2h0Jyk7XG52YXIgc21NYXJnaW5Cb3R0b20gPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdzbU1hcmdpbkJvdHRvbScpO1xudmFyIHNtTWFyZ2luTGVmdCA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ3NtTWFyZ2luTGVmdCcpO1xudmFyIHNtTWFyZ2luID0gdW5pb24oc21NYXJnaW5Ub3AsIHNtTWFyZ2luQm90dG9tLCBzbU1hcmdpbkxlZnQsIHNtTWFyZ2luUmlnaHQpO1xudmFyIG1kTWFyZ2luVG9wID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbWRNYXJnaW5Ub3AnKTtcbnZhciBtZE1hcmdpblJpZ2h0ID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbWRNYXJnaW5SaWdodCcpO1xudmFyIG1kTWFyZ2luQm90dG9tID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbWRNYXJnaW5Cb3R0b20nKTtcbnZhciBtZE1hcmdpbkxlZnQgPSB0cmFuc2Zvcm1OdW1iZXJPclBhc3N0aHJvdWdoKCdtZE1hcmdpbkxlZnQnKTtcbnZhciBtZE1hcmdpbiA9IHVuaW9uKG1kTWFyZ2luVG9wLCBtZE1hcmdpbkJvdHRvbSwgbWRNYXJnaW5MZWZ0LCBtZE1hcmdpblJpZ2h0KTtcbnZhciBsZ01hcmdpblRvcCA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ2xnTWFyZ2luVG9wJyk7XG52YXIgbGdNYXJnaW5SaWdodCA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ2xnTWFyZ2luUmlnaHQnKTtcbnZhciBsZ01hcmdpbkJvdHRvbSA9IHRyYW5zZm9ybU51bWJlck9yUGFzc3Rocm91Z2goJ2xnTWFyZ2luQm90dG9tJyk7XG52YXIgbGdNYXJnaW5MZWZ0ID0gdHJhbnNmb3JtTnVtYmVyT3JQYXNzdGhyb3VnaCgnbGdNYXJnaW5MZWZ0Jyk7XG52YXIgbGdNYXJnaW4gPSB1bmlvbihsZ01hcmdpblRvcCwgbGdNYXJnaW5Cb3R0b20sIGxnTWFyZ2luTGVmdCwgbGdNYXJnaW5SaWdodCk7XG52YXIgcGFkZGluZ1ggPSBiaW5kKHJhbmdlV2l0aG91dFplcm8oJ3BhZGRpbmdYJyksIHdoaXRlc3BhY2UpO1xudmFyIHBhZGRpbmdZID0gYmluZChyYW5nZVdpdGhvdXRaZXJvKCdwYWRkaW5nWScpLCB3aGl0ZXNwYWNlKTtcbnZhciBwYWRkaW5nID0gdW5pb24ocGFkZGluZ1gsIHBhZGRpbmdZKTtcbnZhciBzbVBhZGRpbmdYID0gYmluZChyYW5nZVdpdGhvdXRaZXJvKCdzbVBhZGRpbmdYJyksIHdoaXRlc3BhY2UpO1xudmFyIHNtUGFkZGluZ1kgPSBiaW5kKHJhbmdlV2l0aG91dFplcm8oJ3NtUGFkZGluZ1knKSwgd2hpdGVzcGFjZSk7XG52YXIgc21QYWRkaW5nID0gdW5pb24oc21QYWRkaW5nWCwgc21QYWRkaW5nWSk7XG52YXIgbWRQYWRkaW5nWCA9IGJpbmQocmFuZ2VXaXRob3V0WmVybygnbWRQYWRkaW5nWCcpLCB3aGl0ZXNwYWNlKTtcbnZhciBtZFBhZGRpbmdZID0gYmluZChyYW5nZVdpdGhvdXRaZXJvKCdtZFBhZGRpbmdZJyksIHdoaXRlc3BhY2UpO1xudmFyIG1kUGFkZGluZyA9IHVuaW9uKG1kUGFkZGluZ1gsIG1kUGFkZGluZ1kpO1xudmFyIGxnUGFkZGluZ1ggPSBiaW5kKHJhbmdlV2l0aG91dFplcm8oJ2xnUGFkZGluZ1gnKSwgd2hpdGVzcGFjZSk7XG52YXIgbGdQYWRkaW5nWSA9IGJpbmQocmFuZ2VXaXRob3V0WmVybygnbGdQYWRkaW5nWScpLCB3aGl0ZXNwYWNlKTtcbnZhciBsZ1BhZGRpbmcgPSB1bmlvbihsZ1BhZGRpbmdYLCBsZ1BhZGRpbmdZKTtcbnZhciBvcGFjaXR5TWFwID0gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdHlsZXNbbmFtZV07XG59KTtcblxudmFyIG9wYWNpdHkgPSBmdW5jdGlvbiBvcGFjaXR5KHZhbCkge1xuICBpZiAodmFsID4gMCAmJiB2YWwgPCAxKSB7XG4gICAgcmV0dXJuIG9wYWNpdHlNYXAocmFuZ2UoJ29wYWNpdHkwJykodmFsICogMTApKTtcbiAgfVxuXG4gIHJldHVybiBvcGFjaXR5TWFwKHJhbmdlKCdvcGFjaXR5JykodmFsKSk7XG59O1xuLypcblxuVGhlc2UgZnVuY3Rpb25zIGFyZSBsZWdhY3kuIEknZCBsaWtlIHRvIGdldCByaWQgb2YgbW9zdCBvZiB0aGlzIGZpbGUncyBkZXBlbmRlbmN5IG9uIGltcG9ydGluZyBgLi9zdHlsZS5qc2AgZGlyZWN0bHkgb25jZSB0aGVzZSBhcmUgcmVtb3ZlZC5cblxuKi9cblxuXG52YXIgcHJlZml4ID0gZnVuY3Rpb24gcHJlZml4KHByZSkge1xuICByZXR1cm4gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZSkuY29uY2F0KG5hbWUpO1xuICB9KTtcbn07XG5cbnZhciBkaXNwbGF5ID0gZnVuY3Rpb24gZGlzcGxheSh2YWx1ZSkge1xuICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgY2FzZSAnZmxleCc6XG4gICAgICByZXR1cm4gZnJvbUNsYXNzTmFtZSgnRGlzcGxheUZsZXgnLCAnRGlyZWN0aW9uUm93Jyk7XG5cbiAgICBjYXNlICdmbGV4Q29sdW1uJzpcbiAgICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKCdEaXNwbGF5RmxleCcsICdEaXJlY3Rpb25Db2x1bW4nKTtcblxuICAgIGNhc2UgJ2lubGluZUJsb2NrJzpcbiAgICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKCdEaXNwbGF5SW5saW5lQmxvY2snKTtcblxuICAgIGNhc2UgJ3Zpc3VhbGx5SGlkZGVuJzpcbiAgICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKCdEaXNwbGF5VmlzdWFsbHlIaWRkZW4nKTtcblxuICAgIGNhc2UgZmFsc2U6XG4gICAgICByZXR1cm4gZnJvbUNsYXNzTmFtZSgnRGlzcGxheU5vbmUnKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvKiBibG9jayAqL1xuICAgICAgcmV0dXJuIGZyb21DbGFzc05hbWUoJ0Rpc3BsYXlCbG9jaycpO1xuICB9XG59O1xuXG52YXIgY29sdW1uID0gcmFuZ2UoJ0NvbCcpO1xuLypcblxuSXQncyBwcmVmZXJhYmxlIHRvIHB1dCBuZXcgcHJvcGVydGllcyBpbnRvIHRoYXQgb2JqZWN0IGRpcmVjdGx5IGp1c3Qgc28gaXQncyBlYXNpZXIgdG8gcmVhZC5cblxuKi9cblxudmFyIHByb3BUb0ZuID0ge1xuICB4czogZnVuY3Rpb24geHModmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gc3R5bGVzW2NdO1xuICAgIH0pKHByZWZpeCgneHMnKShjb25jYXQoW3ZhbHVlLmNvbHVtbiA/IGNvbHVtbih2YWx1ZS5jb2x1bW4pIDogaWRlbnRpdHkoKSwgdHlwZW9mIHZhbHVlLmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZGlzcGxheSh2YWx1ZS5kaXNwbGF5KSA6IGlkZW50aXR5KCldKSkpO1xuICB9LFxuICBzbTogZnVuY3Rpb24gc20odmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gc3R5bGVzW2NdO1xuICAgIH0pKHByZWZpeCgnc20nKShjb25jYXQoW3ZhbHVlLmNvbHVtbiA/IGNvbHVtbih2YWx1ZS5jb2x1bW4pIDogaWRlbnRpdHkoKSwgdHlwZW9mIHZhbHVlLmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZGlzcGxheSh2YWx1ZS5kaXNwbGF5KSA6IGlkZW50aXR5KCldKSkpO1xuICB9LFxuICBtZDogZnVuY3Rpb24gbWQodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gc3R5bGVzW2NdO1xuICAgIH0pKHByZWZpeCgnbWQnKShjb25jYXQoW3ZhbHVlLmNvbHVtbiA/IGNvbHVtbih2YWx1ZS5jb2x1bW4pIDogaWRlbnRpdHkoKSwgdHlwZW9mIHZhbHVlLmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZGlzcGxheSh2YWx1ZS5kaXNwbGF5KSA6IGlkZW50aXR5KCldKSkpO1xuICB9LFxuICBsZzogZnVuY3Rpb24gbGcodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwQ2xhc3NOYW1lKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gc3R5bGVzW2NdO1xuICAgIH0pKHByZWZpeCgnbGcnKShjb25jYXQoW3ZhbHVlLmNvbHVtbiA/IGNvbHVtbih2YWx1ZS5jb2x1bW4pIDogaWRlbnRpdHkoKSwgdHlwZW9mIHZhbHVlLmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZGlzcGxheSh2YWx1ZS5kaXNwbGF5KSA6IGlkZW50aXR5KCldKSkpO1xuICB9LFxuICBkaXNwbGF5OiBtYXBwaW5nKHtcbiAgICBub25lOiBzdHlsZXMueHNEaXNwbGF5Tm9uZSxcbiAgICBmbGV4OiBzdHlsZXMueHNEaXNwbGF5RmxleCxcbiAgICBibG9jazogc3R5bGVzLnhzRGlzcGxheUJsb2NrLFxuICAgIGlubGluZUJsb2NrOiBzdHlsZXMueHNEaXNwbGF5SW5saW5lQmxvY2ssXG4gICAgdmlzdWFsbHlIaWRkZW46IHN0eWxlcy54c0Rpc3BsYXlWaXN1YWxseUhpZGRlblxuICB9KSxcbiAgY29sdW1uOiBiaW5kKHJhbmdlKCd4c0NvbCcpLCBzdHlsZXMpLFxuICBkaXJlY3Rpb246IG1hcHBpbmcoe1xuICAgIHJvdzogc3R5bGVzLnhzRGlyZWN0aW9uUm93LFxuICAgIGNvbHVtbjogc3R5bGVzLnhzRGlyZWN0aW9uQ29sdW1uXG4gIH0pLFxuICBzbURpc3BsYXk6IG1hcHBpbmcoe1xuICAgIG5vbmU6IHN0eWxlcy5zbURpc3BsYXlOb25lLFxuICAgIGZsZXg6IHN0eWxlcy5zbURpc3BsYXlGbGV4LFxuICAgIGJsb2NrOiBzdHlsZXMuc21EaXNwbGF5QmxvY2ssXG4gICAgaW5saW5lQmxvY2s6IHN0eWxlcy5zbURpc3BsYXlJbmxpbmVCbG9jayxcbiAgICB2aXN1YWxseUhpZGRlbjogc3R5bGVzLnNtRGlzcGxheVZpc3VhbGx5SGlkZGVuXG4gIH0pLFxuICBzbUNvbHVtbjogYmluZChyYW5nZSgnc21Db2wnKSwgc3R5bGVzKSxcbiAgc21EaXJlY3Rpb246IG1hcHBpbmcoe1xuICAgIHJvdzogc3R5bGVzLnNtRGlyZWN0aW9uUm93LFxuICAgIGNvbHVtbjogc3R5bGVzLnNtRGlyZWN0aW9uQ29sdW1uXG4gIH0pLFxuICBtZERpc3BsYXk6IG1hcHBpbmcoe1xuICAgIG5vbmU6IHN0eWxlcy5tZERpc3BsYXlOb25lLFxuICAgIGZsZXg6IHN0eWxlcy5tZERpc3BsYXlGbGV4LFxuICAgIGJsb2NrOiBzdHlsZXMubWREaXNwbGF5QmxvY2ssXG4gICAgaW5saW5lQmxvY2s6IHN0eWxlcy5tZERpc3BsYXlJbmxpbmVCbG9jayxcbiAgICB2aXN1YWxseUhpZGRlbjogc3R5bGVzLm1kRGlzcGxheVZpc3VhbGx5SGlkZGVuXG4gIH0pLFxuICBtZENvbHVtbjogYmluZChyYW5nZSgnbWRDb2wnKSwgc3R5bGVzKSxcbiAgbWREaXJlY3Rpb246IG1hcHBpbmcoe1xuICAgIHJvdzogc3R5bGVzLm1kRGlyZWN0aW9uUm93LFxuICAgIGNvbHVtbjogc3R5bGVzLm1kRGlyZWN0aW9uQ29sdW1uXG4gIH0pLFxuICBsZ0Rpc3BsYXk6IG1hcHBpbmcoe1xuICAgIG5vbmU6IHN0eWxlcy5sZ0Rpc3BsYXlOb25lLFxuICAgIGZsZXg6IHN0eWxlcy5sZ0Rpc3BsYXlGbGV4LFxuICAgIGJsb2NrOiBzdHlsZXMubGdEaXNwbGF5QmxvY2ssXG4gICAgaW5saW5lQmxvY2s6IHN0eWxlcy5sZ0Rpc3BsYXlJbmxpbmVCbG9jayxcbiAgICB2aXN1YWxseUhpZGRlbjogc3R5bGVzLmxnRGlzcGxheVZpc3VhbGx5SGlkZGVuXG4gIH0pLFxuICBsZ0NvbHVtbjogYmluZChyYW5nZSgnbGdDb2wnKSwgc3R5bGVzKSxcbiAgbGdEaXJlY3Rpb246IG1hcHBpbmcoe1xuICAgIHJvdzogc3R5bGVzLmxnRGlyZWN0aW9uUm93LFxuICAgIGNvbHVtbjogc3R5bGVzLmxnRGlyZWN0aW9uQ29sdW1uXG4gIH0pLFxuICBhbGlnbkNvbnRlbnQ6IG1hcHBpbmcoe1xuICAgIHN0YXJ0OiBsYXlvdXQuY29udGVudFN0YXJ0LFxuICAgIGVuZDogbGF5b3V0LmNvbnRlbnRFbmQsXG4gICAgY2VudGVyOiBsYXlvdXQuY29udGVudENlbnRlcixcbiAgICBiZXR3ZWVuOiBsYXlvdXQuY29udGVudEJldHdlZW4sXG4gICAgYXJvdW5kOiBsYXlvdXQuY29udGVudEFyb3VuZCxcbiAgICBldmVubHk6IGxheW91dC5jb250ZW50RXZlbmx5IC8vIGRlZmF1bHQ6IHN0cmV0Y2hcblxuICB9KSxcbiAgYWxpZ25JdGVtczogbWFwcGluZyh7XG4gICAgc3RhcnQ6IGxheW91dC5pdGVtc1N0YXJ0LFxuICAgIGVuZDogbGF5b3V0Lml0ZW1zRW5kLFxuICAgIGNlbnRlcjogbGF5b3V0Lml0ZW1zQ2VudGVyLFxuICAgIGJhc2VsaW5lOiBsYXlvdXQuaXRlbXNCYXNlbGluZSAvLyBkZWZhdWx0OiBzdHJldGNoXG5cbiAgfSksXG4gIGFsaWduU2VsZjogbWFwcGluZyh7XG4gICAgc3RhcnQ6IGxheW91dC5zZWxmU3RhcnQsXG4gICAgZW5kOiBsYXlvdXQuc2VsZkVuZCxcbiAgICBjZW50ZXI6IGxheW91dC5zZWxmQ2VudGVyLFxuICAgIGJhc2VsaW5lOiBsYXlvdXQuc2VsZkJhc2VsaW5lLFxuICAgIHN0cmV0Y2g6IGxheW91dC5zZWxmU3RyZXRjaCAvLyBkZWZhdWx0OiBhdXRvXG5cbiAgfSksXG4gIGJvdHRvbTogdG9nZ2xlKGxheW91dC5ib3R0b20wKSxcbiAgYm9yZGVyU2l6ZTogZnVuY3Rpb24gYm9yZGVyU2l6ZSh2YWx1ZSkge1xuICAgIHJldHVybiBjb25jYXQoW21hcHBpbmcoe1xuICAgICAgc206IGJvcmRlcnMuc2l6ZVNtLFxuICAgICAgbGc6IGJvcmRlcnMuc2l6ZUxnIC8vIGRlZmF1bHQ6IG5vbmVcblxuICAgIH0pKHZhbHVlKSwgZnJvbUNsYXNzTmFtZShib3JkZXJzLnNvbGlkKSwgZnJvbUNsYXNzTmFtZShib3JkZXJzLmJvcmRlckNvbG9yTGlnaHRHcmF5KV0pO1xuICB9LFxuICBjb2xvcjogbWFwcGluZyh7XG4gICAgYmx1ZTogY29sb3JzLmJsdWVCZyxcbiAgICBkYXJrR3JheTogY29sb3JzLmRhcmtHcmF5QmcsXG4gICAgcGluZTogY29sb3JzLnBpbmVCZyxcbiAgICBncmF5OiBjb2xvcnMuZ3JheUJnLFxuICAgIHJlZDogY29sb3JzLnJlZEJnLFxuICAgIG9saXZlOiBjb2xvcnMub2xpdmVCZyxcbiAgICBsaWdodEdyYXk6IGNvbG9ycy5saWdodEdyYXlCZyxcbiAgICB3aGl0ZTogY29sb3JzLndoaXRlQmcsXG4gICAgb3JhbmdlOiBjb2xvcnMub3JhbmdlQmcsXG4gICAgZ3JlZW46IGNvbG9ycy5ncmVlbkJnLFxuICAgIG5hdnk6IGNvbG9ycy5uYXZ5QmcsXG4gICAgbWlkbmlnaHQ6IGNvbG9ycy5taWRuaWdodEJnLFxuICAgIHB1cnBsZTogY29sb3JzLnB1cnBsZUJnLFxuICAgIG9yY2hpZDogY29sb3JzLm9yY2hpZEJnLFxuICAgIGVnZ3BsYW50OiBjb2xvcnMuZWdncGxhbnRCZyxcbiAgICBtYXJvb246IGNvbG9ycy5tYXJvb25CZyxcbiAgICB3YXRlcm1lbG9uOiBjb2xvcnMud2F0ZXJtZWxvbkJnLFxuICAgIGxpZ2h0V2FzaDogY29sb3JzLmxpZ2h0V2FzaEJnLFxuICAgIGRhcmtXYXNoOiBjb2xvcnMuZGFya1dhc2hCZyxcbiAgICB0cmFuc3BhcmVudERhcmtHcmF5OiBjb2xvcnMudHJhbnNwYXJlbnREYXJrR3JheUJnIC8vIGRlZmF1bHQ6IHRyYW5zcGFyZW50XG5cbiAgfSksXG4gIGZpdDogdG9nZ2xlKGxheW91dC5maXQpLFxuICBmbGV4OiBtYXBwaW5nKHtcbiAgICBncm93OiBsYXlvdXQuZmxleEdyb3csXG4gICAgbm9uZTogbGF5b3V0LmZsZXhOb25lIC8vIGRlZmF1bHQ6IHNocmlua1xuXG4gIH0pLFxuICBoZWlnaHQ6IGZ1bmN0aW9uIGhlaWdodChfaGVpZ2h0KSB7XG4gICAgcmV0dXJuIGZyb21JbmxpbmVTdHlsZSh7XG4gICAgICBoZWlnaHQ6IF9oZWlnaHRcbiAgICB9KTtcbiAgfSxcbiAganVzdGlmeUNvbnRlbnQ6IG1hcHBpbmcoe1xuICAgIGVuZDogbGF5b3V0Lmp1c3RpZnlFbmQsXG4gICAgY2VudGVyOiBsYXlvdXQuanVzdGlmeUNlbnRlcixcbiAgICBiZXR3ZWVuOiBsYXlvdXQuanVzdGlmeUJldHdlZW4sXG4gICAgYXJvdW5kOiBsYXlvdXQuanVzdGlmeUFyb3VuZCxcbiAgICBldmVubHk6IGxheW91dC5qdXN0aWZ5RXZlbmx5IC8vIGRlZmF1bHQ6IHN0YXJ0XG5cbiAgfSksXG4gIGxlZnQ6IHRvZ2dsZShsYXlvdXQubGVmdDApLFxuICBtYXJnaW5TdGFydDogbWFyZ2luU3RhcnQsXG4gIG1hcmdpbkVuZDogbWFyZ2luRW5kLFxuICBtYXJnaW46IG1hcmdpbixcbiAgbWFyZ2luVG9wOiBtYXJnaW5Ub3AsXG4gIG1hcmdpblJpZ2h0OiBtYXJnaW5SaWdodCxcbiAgbWFyZ2luQm90dG9tOiBtYXJnaW5Cb3R0b20sXG4gIG1hcmdpbkxlZnQ6IG1hcmdpbkxlZnQsXG4gIHNtTWFyZ2luOiBzbU1hcmdpbixcbiAgc21NYXJnaW5Ub3A6IHNtTWFyZ2luVG9wLFxuICBzbU1hcmdpblJpZ2h0OiBzbU1hcmdpblJpZ2h0LFxuICBzbU1hcmdpbkJvdHRvbTogc21NYXJnaW5Cb3R0b20sXG4gIHNtTWFyZ2luTGVmdDogc21NYXJnaW5MZWZ0LFxuICBtZE1hcmdpbjogbWRNYXJnaW4sXG4gIG1kTWFyZ2luVG9wOiBtZE1hcmdpblRvcCxcbiAgbWRNYXJnaW5SaWdodDogbWRNYXJnaW5SaWdodCxcbiAgbWRNYXJnaW5Cb3R0b206IG1kTWFyZ2luQm90dG9tLFxuICBtZE1hcmdpbkxlZnQ6IG1kTWFyZ2luTGVmdCxcbiAgbGdNYXJnaW46IGxnTWFyZ2luLFxuICBsZ01hcmdpblRvcDogbGdNYXJnaW5Ub3AsXG4gIGxnTWFyZ2luUmlnaHQ6IGxnTWFyZ2luUmlnaHQsXG4gIGxnTWFyZ2luQm90dG9tOiBsZ01hcmdpbkJvdHRvbSxcbiAgbGdNYXJnaW5MZWZ0OiBsZ01hcmdpbkxlZnQsXG4gIG1heEhlaWdodDogZnVuY3Rpb24gbWF4SGVpZ2h0KF9tYXhIZWlnaHQpIHtcbiAgICByZXR1cm4gZnJvbUlubGluZVN0eWxlKHtcbiAgICAgIG1heEhlaWdodDogX21heEhlaWdodFxuICAgIH0pO1xuICB9LFxuICBtYXhXaWR0aDogZnVuY3Rpb24gbWF4V2lkdGgoX21heFdpZHRoKSB7XG4gICAgcmV0dXJuIGZyb21JbmxpbmVTdHlsZSh7XG4gICAgICBtYXhXaWR0aDogX21heFdpZHRoXG4gICAgfSk7XG4gIH0sXG4gIG1pbkhlaWdodDogZnVuY3Rpb24gbWluSGVpZ2h0KF9taW5IZWlnaHQpIHtcbiAgICByZXR1cm4gZnJvbUlubGluZVN0eWxlKHtcbiAgICAgIG1pbkhlaWdodDogX21pbkhlaWdodFxuICAgIH0pO1xuICB9LFxuICBtaW5XaWR0aDogZnVuY3Rpb24gbWluV2lkdGgoX21pbldpZHRoKSB7XG4gICAgcmV0dXJuIGZyb21JbmxpbmVTdHlsZSh7XG4gICAgICBtaW5XaWR0aDogX21pbldpZHRoXG4gICAgfSk7XG4gIH0sXG4gIG9wYWNpdHk6IG9wYWNpdHksXG4gIG92ZXJmbG93OiBtYXBwaW5nKHtcbiAgICBoaWRkZW46IGxheW91dC5vdmVyZmxvd0hpZGRlbixcbiAgICBzY3JvbGw6IGxheW91dC5vdmVyZmxvd1Njcm9sbCxcbiAgICBhdXRvOiBsYXlvdXQub3ZlcmZsb3dBdXRvLFxuICAgIHNjcm9sbFg6IGxheW91dC5vdmVyZmxvd1Njcm9sbFgsXG4gICAgc2Nyb2xsWTogbGF5b3V0Lm92ZXJmbG93U2Nyb2xsWSAvLyBkZWZhdWx0OiB2aXNpYmxlXG5cbiAgfSksXG4gIHBhZGRpbmc6IHBhZGRpbmcsXG4gIHBhZGRpbmdYOiBwYWRkaW5nWCxcbiAgcGFkZGluZ1k6IHBhZGRpbmdZLFxuICBzbVBhZGRpbmc6IHNtUGFkZGluZyxcbiAgc21QYWRkaW5nWDogc21QYWRkaW5nWCxcbiAgc21QYWRkaW5nWTogc21QYWRkaW5nWSxcbiAgbWRQYWRkaW5nOiBtZFBhZGRpbmcsXG4gIG1kUGFkZGluZ1g6IG1kUGFkZGluZ1gsXG4gIG1kUGFkZGluZ1k6IG1kUGFkZGluZ1ksXG4gIGxnUGFkZGluZzogbGdQYWRkaW5nLFxuICBsZ1BhZGRpbmdYOiBsZ1BhZGRpbmdYLFxuICBsZ1BhZGRpbmdZOiBsZ1BhZGRpbmdZLFxuICBwb3NpdGlvbjogbWFwcGluZyh7XG4gICAgYWJzb2x1dGU6IGxheW91dC5hYnNvbHV0ZSxcbiAgICByZWxhdGl2ZTogbGF5b3V0LnJlbGF0aXZlLFxuICAgIGZpeGVkOiBsYXlvdXQuZml4ZWQgLy8gZGVmYXVsdDogc3RhdGljXG5cbiAgfSksXG4gIHJpZ2h0OiB0b2dnbGUobGF5b3V0LnJpZ2h0MCksXG4gIHJvdW5kaW5nOiByb3VuZGluZyxcbiAgdG9wOiB0b2dnbGUobGF5b3V0LnRvcDApLFxuICB3aWR0aDogZnVuY3Rpb24gd2lkdGgoX3dpZHRoKSB7XG4gICAgcmV0dXJuIGZyb21JbmxpbmVTdHlsZSh7XG4gICAgICB3aWR0aDogX3dpZHRoXG4gICAgfSk7XG4gIH0sXG4gIHdyYXA6IHRvZ2dsZShsYXlvdXQuZmxleFdyYXApLFxuICBkYW5nZXJvdXNseVNldElubGluZVN0eWxlOiBmdW5jdGlvbiBkYW5nZXJvdXNseVNldElubGluZVN0eWxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuICAgICAgdmFsdWUgJiYgdmFsdWUuX19zdHlsZSA/IGZyb21JbmxpbmVTdHlsZSh2YWx1ZS5fX3N0eWxlKSA6IGlkZW50aXR5KClcbiAgICApO1xuICB9XG59O1xuLypcblxuIyBUaGUgQ29tcG9uZW50XG5cbiovXG5cbnZhciBjb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKGtleSwgYXJyKSB7XG4gIHJldHVybiBhcnIuaW5kZXhPZihrZXkpID49IDA7XG59O1xuXG52YXIgb21pdCA9IGZ1bmN0aW9uIG9taXQoa2V5cywgb2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrKSB7XG4gICAgaWYgKGNvbnRhaW5zKGssIGtleXMpKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgYWNjKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaywgb2JqW2tdKSk7XG4gIH0sIHt9KTtcbn07IC8vIEJveCBpcyBhIFwicGFzcy10aHJvdWdoXCIgY29tcG9uZW50LCBtZWFuaW5nIHRoYXQgaWYgeW91IHBhc3MgcHJvcGVydGllcyB0byBpdFxuLy8gdGhhdCBpdCBkb2Vzbid0IGtub3cgYWJvdXQgKGBhcmlhLWxhYmVsYCBmb3IgaW5zdGFuY2UpIGl0IHBhc3NlcyBkaXJlY3RseVxuLy8gYmFjayB0byB0aGUgdW5kZXJseWluZyBgPGRpdi8+YC4gVGhhdCdzIGdlbmVyYWxseSB1c2VmdWwsIGJ1dCB3ZSdkIGFsc28gbGlrZVxuLy8gdG8gc3RyaXAgb3V0IGEgZmV3IG5hdWdodHkgcHJvcGVydGllcyB0aGF0IGJyZWFrIHN0eWxlIGVuY2Fwc3VsYXRpb25cbi8vIChjbGFzc05hbWUsIHN0eWxlKSBvciBhY2Nlc3NpYmlsaXR5IChvbkNsaWNrKS5cblxuXG52YXIgYmxhY2tsaXN0UHJvcHMgPSBbJ29uQ2xpY2snLCAnY2xhc3NOYW1lJywgJ3N0eWxlJ107IC8vICRGbG93SXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzYxMDNcblxudmFyIEJveCA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiY2hpbGRyZW5cIl0pO1xuXG4gIC8vIEZsb3cgY2FuJ3QgcmVhc29uIGFib3V0IHRoZSBjb25zdGFudCBuYXR1cmUgb2YgT2JqZWN0LmtleXMgc28gd2UgY2FuJ3QgdXNlXG4gIC8vIGEgZnVuY3Rpb25hbCAocmVkdWNlKSBzdHlsZSBoZXJlLlxuICAvLyBBbGwgQm94J3MgYXJlIGJveC1zaXplZCBieSBkZWZhdWx0LCBzbyB3ZSBzdGFydCBvZmYgYnVpbGRpbmcgdXAgdGhlIHN0eWxlc1xuICAvLyB0byBiZSBhcHBsaWVkIHdpdGggYSBCb3ggYmFzZSBjbGFzcy5cbiAgdmFyIHMgPSBmcm9tQ2xhc3NOYW1lKHN0eWxlcy5ib3gpOyAvLyBJbml0IHRoZSBsaXN0IG9mIHByb3BzIHdlJ2xsIG9taXQgZnJvbSBwYXNzdGhyb3VnaC4gV2UnbGwgYWRkIHRvIHRoaXNcbiAgLy8gbGlzdCBhcyB3ZSBtYXRjaCBwcm9wcyBhZ2FpbnN0IHRoZSB0cmFuc2Zvcm1zIGxpc3QuXG5cbiAgdmFyIG9taXRQcm9wcyA9IFtdLmNvbmNhdChibGFja2xpc3RQcm9wcyk7IC8vIFRoaXMgbG9vcHMgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBpZiBpdCBleGlzdHMgaW4gdGhlIHByZXZpb3VzbHlcbiAgLy8gZGVmaW5lZCB0cmFuc2Zvcm0gbWFwLCBjb25jYXRlbnRlcyB0aGUgcmVzdWx0aW5nIHN0eWxlcyB0byB0aGUgYmFzZVxuICAvLyBzdHlsZXMuIElmIHRoZXJlJ3MgYSBtYXRjaCwgd2UgYWxzbyBkb24ndCBwYXNzIHRocm91Z2ggdGhhdCBwcm9wZXJ0eS4gVGhpc1xuICAvLyBtZWFucyBCb3gncyBydW50aW1lIGlzIG9ubHkgZGVwZW5kZW50IG9uIHRoZSBudW1iZXIgb2YgcHJvcGVydGllcyBwYXNzZWRcbiAgLy8gdG8gaXQgKHdoaWNoIGlzIHR5cGljYWxseSBzbWFsbCkgaW5zdGVhZCBvZiB0aGUgdG90YWwgbnVtYmVyIG9mIHBvc3NpYmxlXG4gIC8vIHByb3BlcnRpZXMgKH4zMCBvciBzbykuIFdoaWxlIGl0IG1heSB+ZmVlbH4gbGlrZSBCb3ggaXMgaW5uZWZmaWNpZW50LCBpdHNcbiAgLy8gYmlnZ2VzdCBwZXJmb3JtYW5jZSBpbXBhY3QgaXMgb24gc3RhcnR1cCB0aW1lIGJlY2F1c2UgdGhlcmUncyBzbyBtdWNoIGNvZGVcbiAgLy8gaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBwcm9wcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvcFRvRm4sIHByb3ApKSB7XG4gICAgICB2YXIgZm4gPSBwcm9wVG9Gbltwcm9wXTtcbiAgICAgIHZhciB2YWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgICAgb21pdFByb3BzLnB1c2gocHJvcCk7XG4gICAgICBzID0gY29uY2F0KFtzLCBmbih2YWx1ZSldKTtcbiAgICB9XG4gIH0gLy8gQW5kLi4uIG1hZ2ljIVxuXG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBvbWl0KG9taXRQcm9wcywgcHJvcHMpLCB0b1Byb3BzKHMpLCB7XG4gICAgcmVmOiByZWZcbiAgfSksIGNoaWxkcmVuKTtcbn0pOyAvLyAgTk9URTogVGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gb3ZlcnJpZGUgdGhlIEZvcndhcmRSZWYgZGlzcGxheSBuYW1lIHRoYXQgaXNcbi8vICB1c2VkIGluIGRldiB0b29scyBhbmQgaW4gc25hcHNob3QgdGVzdGluZy5cblxuQm94LmRpc3BsYXlOYW1lID0gJ0JveCc7XG4vKlxuXG4jIFByb3BUeXBlc1xuXG5BbmQgd2UncmUgZG9uZSBoZXJlIDopXG5cbiovXG5cbnZhciBBbGlnbkNvbnRlbnRQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCcsICdjZW50ZXInLCAnYmV0d2VlbicsICdhcm91bmQnLCAnZXZlbmx5JywgJ3N0cmV0Y2gnXSk7XG52YXIgQWxpZ25JdGVtc1Byb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsnc3RhcnQnLCAnZW5kJywgJ2NlbnRlcicsICdiYXNlbGluZScsICdzdHJldGNoJ10pO1xudmFyIEFsaWduU2VsZlByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdzdGFydCcsICdlbmQnLCAnY2VudGVyJywgJ2Jhc2VsaW5lJywgJ3N0cmV0Y2gnXSk7XG52YXIgQ29sdW1uUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKTtcbnZhciBEaW1lbnNpb25Qcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKTtcbnZhciBEaXJlY3Rpb25Qcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbJ3JvdycsICdjb2x1bW4nXSk7XG52YXIgRGlzcGxheVByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsnbm9uZScsICdmbGV4JywgJ2Jsb2NrJywgJ2lubGluZUJsb2NrJywgJ3Zpc3VhbGx5SGlkZGVuJ10pO1xudmFyIEZsZXhQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbJ2dyb3cnLCAnc2hyaW5rJywgJ25vbmUnXSk7XG52YXIgSnVzdGlmeUNvbnRlbnRQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbJ3N0YXJ0JywgJ2VuZCcsICdjZW50ZXInLCAnYmV0d2VlbicsICdhcm91bmQnLCAnZXZlbmx5J10pO1xudmFyIE1hcmdpblByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFstMTIsIC0xMSwgLTEwLCAtOSwgLTgsIC03LCAtNiwgLTUsIC00LCAtMywgLTIsIC0xLCAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAnYXV0byddKTtcbnZhciBPdmVyZmxvd1Byb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsndmlzaWJsZScsICdoaWRkZW4nLCAnc2Nyb2xsJywgJ3Njcm9sbFgnLCAnc2Nyb2xsWScsICdhdXRvJ10pO1xudmFyIFBhZGRpbmdQcm9wVHlwZSA9IFByb3BUeXBlcy5vbmVPZihbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pO1xudmFyIFJvdW5kaW5nUHJvcFR5cGUgPSBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsICdjaXJjbGUnLCAncGlsbCddKTtcbnZhciBTaXplRGlzcGxheVByb3BUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFsnZmxleCcsICdmbGV4Q29sdW1uJywgJ2lubGluZUJsb2NrJ10pOyAvLyAkRmxvd0lzc3VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy83NDg0XG5cbkJveC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZTogUHJvcFR5cGVzLmV4YWN0KHtcbiAgICBfX3N0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLFxuICB4czogUHJvcFR5cGVzLmV4YWN0KHtcbiAgICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgU2l6ZURpc3BsYXlQcm9wVHlwZV0pLFxuICAgIGNvbHVtbjogUHJvcFR5cGVzLm51bWJlclxuICB9KSxcbiAgc206IFByb3BUeXBlcy5leGFjdCh7XG4gICAgZGlzcGxheTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFNpemVEaXNwbGF5UHJvcFR5cGVdKSxcbiAgICBjb2x1bW46IFByb3BUeXBlcy5udW1iZXJcbiAgfSksXG4gIG1kOiBQcm9wVHlwZXMuZXhhY3Qoe1xuICAgIGRpc3BsYXk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ib29sLCBTaXplRGlzcGxheVByb3BUeXBlXSksXG4gICAgY29sdW1uOiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pLFxuICBsZzogUHJvcFR5cGVzLmV4YWN0KHtcbiAgICBkaXNwbGF5OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgU2l6ZURpc3BsYXlQcm9wVHlwZV0pLFxuICAgIGNvbHVtbjogUHJvcFR5cGVzLm51bWJlclxuICB9KSxcbiAgZGlzcGxheTogRGlzcGxheVByb3BUeXBlLFxuICBkaXJlY3Rpb246IERpcmVjdGlvblByb3BUeXBlLFxuICBjb2x1bW46IENvbHVtblByb3BUeXBlLFxuICBzbURpc3BsYXk6IERpc3BsYXlQcm9wVHlwZSxcbiAgc21EaXJlY3Rpb246IERpcmVjdGlvblByb3BUeXBlLFxuICBzbUNvbHVtbjogQ29sdW1uUHJvcFR5cGUsXG4gIG1kRGlzcGxheTogRGlzcGxheVByb3BUeXBlLFxuICBtZERpcmVjdGlvbjogRGlyZWN0aW9uUHJvcFR5cGUsXG4gIG1kQ29sdW1uOiBDb2x1bW5Qcm9wVHlwZSxcbiAgbGdEaXNwbGF5OiBEaXNwbGF5UHJvcFR5cGUsXG4gIGxnRGlyZWN0aW9uOiBEaXJlY3Rpb25Qcm9wVHlwZSxcbiAgbGdDb2x1bW46IENvbHVtblByb3BUeXBlLFxuICBhbGlnbkNvbnRlbnQ6IEFsaWduQ29udGVudFByb3BUeXBlLFxuICBhbGlnbkl0ZW1zOiBBbGlnbkl0ZW1zUHJvcFR5cGUsXG4gIGFsaWduU2VsZjogQWxpZ25TZWxmUHJvcFR5cGUsXG4gIGJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG4gIGJvcmRlclNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtJywgJ2xnJywgJ25vbmUnXSksXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydibHVlJywgJ2RhcmtHcmF5JywgJ2RhcmtXYXNoJywgJ2VnZ3BsYW50JywgJ2dyYXknLCAnZ3JlZW4nLCAnbGlnaHRHcmF5JywgJ2xpZ2h0V2FzaCcsICdtYXJvb24nLCAnbWlkbmlnaHQnLCAnbmF2eScsICdvbGl2ZScsICdvcmFuZ2UnLCAnb3JjaGlkJywgJ3BpbmUnLCAncHVycGxlJywgJ3JlZCcsICd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudERhcmtHcmF5JywgJ3dhdGVybWVsb24nLCAnd2hpdGUnXSksXG4gIGZpdDogUHJvcFR5cGVzLmJvb2wsXG4gIGZsZXg6IEZsZXhQcm9wVHlwZSxcbiAgaGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAganVzdGlmeUNvbnRlbnQ6IEp1c3RpZnlDb250ZW50UHJvcFR5cGUsXG4gIGxlZnQ6IFByb3BUeXBlcy5ib29sLFxuICBtYXJnaW5TdGFydDogTWFyZ2luUHJvcFR5cGUsXG4gIG1hcmdpbkVuZDogTWFyZ2luUHJvcFR5cGUsXG4gIG1hcmdpbjogTWFyZ2luUHJvcFR5cGUsXG4gIG1hcmdpblRvcDogTWFyZ2luUHJvcFR5cGUsXG4gIG1hcmdpblJpZ2h0OiBNYXJnaW5Qcm9wVHlwZSxcbiAgbWFyZ2luQm90dG9tOiBNYXJnaW5Qcm9wVHlwZSxcbiAgbWFyZ2luTGVmdDogTWFyZ2luUHJvcFR5cGUsXG4gIHNtTWFyZ2luOiBNYXJnaW5Qcm9wVHlwZSxcbiAgc21NYXJnaW5Ub3A6IE1hcmdpblByb3BUeXBlLFxuICBzbU1hcmdpblJpZ2h0OiBNYXJnaW5Qcm9wVHlwZSxcbiAgc21NYXJnaW5Cb3R0b206IE1hcmdpblByb3BUeXBlLFxuICBzbU1hcmdpbkxlZnQ6IE1hcmdpblByb3BUeXBlLFxuICBtZE1hcmdpbjogTWFyZ2luUHJvcFR5cGUsXG4gIG1kTWFyZ2luVG9wOiBNYXJnaW5Qcm9wVHlwZSxcbiAgbWRNYXJnaW5SaWdodDogTWFyZ2luUHJvcFR5cGUsXG4gIG1kTWFyZ2luQm90dG9tOiBNYXJnaW5Qcm9wVHlwZSxcbiAgbWRNYXJnaW5MZWZ0OiBNYXJnaW5Qcm9wVHlwZSxcbiAgbGdNYXJnaW46IE1hcmdpblByb3BUeXBlLFxuICBsZ01hcmdpblRvcDogTWFyZ2luUHJvcFR5cGUsXG4gIGxnTWFyZ2luUmlnaHQ6IE1hcmdpblByb3BUeXBlLFxuICBsZ01hcmdpbkJvdHRvbTogTWFyZ2luUHJvcFR5cGUsXG4gIGxnTWFyZ2luTGVmdDogTWFyZ2luUHJvcFR5cGUsXG4gIG1heEhlaWdodDogRGltZW5zaW9uUHJvcFR5cGUsXG4gIG1heFdpZHRoOiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWluSGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWluV2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICBvcGFjaXR5OiBQcm9wVHlwZXMub25lT2YoWzAsIDAuMSwgMC4yLCAwLjMsIDAuNCwgMC41LCAwLjYsIDAuNywgMC44LCAwLjksIDFdKSxcbiAgb3ZlcmZsb3c6IE92ZXJmbG93UHJvcFR5cGUsXG4gIHBhZGRpbmc6IFBhZGRpbmdQcm9wVHlwZSxcbiAgcGFkZGluZ1g6IFBhZGRpbmdQcm9wVHlwZSxcbiAgcGFkZGluZ1k6IFBhZGRpbmdQcm9wVHlwZSxcbiAgc21QYWRkaW5nOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHNtUGFkZGluZ1g6IFBhZGRpbmdQcm9wVHlwZSxcbiAgc21QYWRkaW5nWTogUGFkZGluZ1Byb3BUeXBlLFxuICBtZFBhZGRpbmc6IFBhZGRpbmdQcm9wVHlwZSxcbiAgbWRQYWRkaW5nWDogUGFkZGluZ1Byb3BUeXBlLFxuICBtZFBhZGRpbmdZOiBQYWRkaW5nUHJvcFR5cGUsXG4gIGxnUGFkZGluZzogUGFkZGluZ1Byb3BUeXBlLFxuICBsZ1BhZGRpbmdYOiBQYWRkaW5nUHJvcFR5cGUsXG4gIGxnUGFkZGluZ1k6IFBhZGRpbmdQcm9wVHlwZSxcbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ3N0YXRpYycsICdhYnNvbHV0ZScsICdyZWxhdGl2ZScsICdmaXhlZCddKSxcbiAgcmlnaHQ6IFByb3BUeXBlcy5ib29sLFxuICByb3VuZGluZzogUm91bmRpbmdQcm9wVHlwZSxcbiAgdG9wOiBQcm9wVHlwZXMuYm9vbCxcbiAgd2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICB3cmFwOiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIHN0eWxlcyQxID0ge1wiaWNvblwiOlwiZ1VaXCIsXCJpY29uQmxvY2tcIjpcIlU5TyBrVmNcIixcInJ0bFN1cHBvcnRcIjpcIkhuX1wifTtcblxudmFyIGFkID0gJ00xNyAxYTMgMyAwIDAgMSAzIDN2MTZhMyAzIDAgMCAxLTMgM0g3YTMgMyAwIDAgMS0zLTNWNGEzIDMgMCAwIDEgMy0zaDEwek03IDIwaDEwdi00SDd2NHonO1xuXG52YXIgYWRkID0gJ00yMiAxMGgtOFYyYTIgMiAwIDAgMC00IDB2OEgyYTIgMiAwIDAgMCAwIDRoOHY4YTIgMiAwIDAgMCA0IDB2LThoOGEyIDIgMCAwIDAgMC00JztcblxudmFyIGFkZENpcmNsZSA9ICdNMTcuNzUgMTMuMjVoLTQuNXY0LjVhMS4yNSAxLjI1IDAgMCAxLTIuNSAwdi00LjVoLTQuNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoNC41di00LjVhMS4yNSAxLjI1IDAgMCAxIDIuNSAwdjQuNWg0LjVhMS4yNSAxLjI1IDAgMCAxIDAgMi41TTEyIDBDNS4zNyAwIDAgNS4zNyAwIDEyczUuMzcgMTIgMTIgMTIgMTItNS4zNyAxMi0xMlMxOC42MyAwIDEyIDAnO1xuXG52YXIgYWRkTGF5b3V0ID0gJ00yMSAxMmgtNi41VjUuNUgyMGMuNTUxIDAgMSAuNDQ5IDEgMVYxMnptMCA4YzAgLjU1MS0uNDQ5IDEtMSAxSDYuNWMtLjU1MSAwLTEtLjQ0OS0xLTF2LTUuNUgyMVYyMHpNNC43NSA3LjVBLjc1Ljc1IDAgMCAxIDQgNi43NVY1LjVIMi43NWEuNzUuNzUgMCAwIDEgMC0xLjVINFYyLjc1YS43NS43NSAwIDAgMSAxLjUgMFY0aDEuMjVhLjc1Ljc1IDAgMCAxIDAgMS41SDUuNXYxLjI1YS43NS43NSAwIDAgMS0uNzUuNzV6bTQuNjc0LTJIMTJWMTJINS41VjkuNDI0QTQuNzI3IDQuNzI3IDAgMCAwIDkuNDI0IDUuNXpNMjAgMi41SDguOTA5QzguMTA1IDEuMDE4IDYuNTU1IDAgNC43NSAwQTQuNzUgNC43NSAwIDAgMCAwIDQuNzVjMCAxLjgwNSAxLjAxOCAzLjM1NSAyLjUgNC4xNTlWMjBhNCA0IDAgMCAwIDQgNEgyMGE0IDQgMCAwIDAgNC00VjYuNWE0IDQgMCAwIDAtNC00eic7XG5cbnZhciBhZGRQaW4gPSAnTTIxLjUgOC42OWMxLjQ5Ljg3IDIuNSAyLjQ2IDIuNSA0LjMxaC00djcuOTZMMTkgMjNsLTEtMi4wNFYxM2gtNGMwLTEuODUgMS4wMS0zLjQ0IDIuNS00LjMxVjIuOTNjLS44Ni0uMjItMS41LTEtMS41LTEuOTNoOGMwIC45My0uNjQgMS43MS0xLjUgMS45M3Y1Ljc2em0tMTEuMjUuODFhMS4yNSAxLjI1IDAgMCAxIDAgMi41SDd2My4yNWExLjI1IDEuMjUgMCAwIDEtMi41IDBWMTJIMS4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVINC41VjYuMjVhMS4yNSAxLjI1IDAgMCAxIDIuNSAwVjkuNWgzLjI1eic7XG5cbnZhciBhZEdyb3VwID0gJ005IDExYTEgMSAwIDAgMS0xLTFWMWExIDEgMCAwIDEgMS0xaDZhMSAxIDAgMCAxIDEgMXY5YTEgMSAwIDAgMS0xIDFIOXptMS0yaDRWN2gtNHYyem0xMCA0YTEgMSAwIDAgMSAxIDF2OWExIDEgMCAwIDEtMSAxaC02YTEgMSAwIDAgMS0xLTF2LTlhMSAxIDAgMCAxIDEtMWg2em0tNSA5aDR2LTJoLTR2MnptLTUtOWExIDEgMCAwIDEgMSAxdjlhMSAxIDAgMCAxLTEgMUg0YTEgMSAwIDAgMS0xLTF2LTlhMSAxIDAgMCAxIDEtMWg2em0tNSA5aDR2LTJINXYyeic7XG5cbnZhciBhZHNTdGF0cyA9ICdNNC43NSAxMmMuMzIgMCAuNjQtLjEyMi44ODQtLjM2Nkw5LjUgNy43NjhsMyAzIDUuNS01LjV2Ljk4MmExLjI1IDEuMjUgMCAwIDAgMi41IDBWMWgtNS4yNWExLjI1IDEuMjUgMCAwIDAgMCAyLjVoLjk4MkwxMi41IDcuMjMybC0zLTMtNS42MzQgNS42MzRBMS4yNSAxLjI1IDAgMCAwIDQuNzUgMTJNMTQgMTRoLTRhMSAxIDAgMCAwLTEgMXY3YTEgMSAwIDAgMCAxIDFoNGExIDEgMCAwIDAgMS0xdi03YTEgMSAwIDAgMC0xLTFtOCAwaC00YTEgMSAwIDAgMC0xIDF2N2ExIDEgMCAwIDAgMSAxaDRhMSAxIDAgMCAwIDEtMXYtN2ExIDEgMCAwIDAtMS0xTTcgMTV2N2ExIDEgMCAwIDEtMSAxSDJhMSAxIDAgMCAxLTEtMXYtN2ExIDEgMCAwIDEgMS0xaDRhMSAxIDAgMCAxIDEgMSc7XG5cbnZhciBhZHNPdmVydmlldyA9ICdNMi41IDE5YTEuNSAxLjUgMCAxIDAgLjAwMSAzLjAwMUExLjUgMS41IDAgMCAwIDIuNSAxOW0xOSAwaC0xNGExLjUgMS41IDAgMSAwIDAgM2gxNGExLjUgMS41IDAgMSAwIDAtM20tMTktNWExLjUgMS41IDAgMSAwIC4wMDEgMy4wMDFBMS41IDEuNSAwIDAgMCAyLjUgMTRtMTkgMGgtMTRhMS41IDEuNSAwIDEgMCAwIDNoMTRhMS41IDEuNSAwIDEgMCAwLTNNMTAgMTFoNGExIDEgMCAwIDAgMS0xVjNhMSAxIDAgMCAwLTEtMWgtNGExIDEgMCAwIDAtMSAxdjdhMSAxIDAgMCAwIDEgMW0xMi05aC00YTEgMSAwIDAgMC0xIDF2N2ExIDEgMCAwIDAgMSAxaDRhMSAxIDAgMCAwIDEtMVYzYTEgMSAwIDAgMC0xLTFNMSAxMFYzYTEgMSAwIDAgMSAxLTFoNGExIDEgMCAwIDEgMSAxdjdhMSAxIDAgMCAxLTEgMUgyYTEgMSAwIDAgMS0xLTEnO1xuXG52YXIgYWxlcnQgPSAnTTE0LjE3NyA3LjgxOWwtMS42OTggNS44MjRjLS4xNDIuNDc2LS44MTYuNDc1LS45NTgtLjAwMUw5LjgyMiA3LjgxOWguMDA5YTIuMjI3IDIuMjI3IDAgMCAxLS4wODEtLjU2OSAyLjI1IDIuMjUgMCAxIDEgNC41IDBjMCAuMTk4LS4wMzQuMzg2LS4wODIuNTY5aC4wMDl6TTEyIDE5YTEuNzUgMS43NSAwIDEgMSAwLTMuNSAxLjc1IDEuNzUgMCAwIDEgMCAzLjV6bTAtMTlDNS4zNzIgMCAwIDUuMzcyIDAgMTJjMCA2LjYyNyA1LjM3MiAxMiAxMiAxMiA2LjYyNyAwIDEyLTUuMzczIDEyLTEyIDAtNi42MjgtNS4zNzMtMTItMTItMTJ6JztcblxudmFyIGFsaWduQm90dG9tID0gJ000LjI1IDMuNWgxNS41YS43NS43NSAwIDAgMSAuNzUuNzVWMTRoLTE3VjQuMjVhLjc1Ljc1IDAgMCAxIC43NS0uNzVNMTkuNzUgMUg0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDEgNC4yNXYxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDQuMjUgMjNoMTUuNUEzLjI1NCAzLjI1NCAwIDAgMCAyMyAxOS43NVY0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDE5Ljc1IDEnO1xuXG52YXIgYWxpZ25Cb3R0b21DZW50ZXIgPSAnTTIwLjUgMTkuNzVjMCAuNDEzLS4zMzcuNzUtLjc1Ljc1SDE1LjVWMTRoLTd2Ni41SDQuMjVhLjc1Mi43NTIgMCAwIDEtLjc1LS43NVY0LjI1YS43NS43NSAwIDAgMSAuNzUtLjc1aDE1LjVhLjc1Ljc1IDAgMCAxIC43NS43NXYxNS41ek0xOS43NSAxSDQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMSA0LjI1djE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgNC4yNSAyM2gxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDIzIDE5Ljc1VjQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMTkuNzUgMXonO1xuXG52YXIgYWxpZ25Cb3R0b21MZWZ0ID0gJ00yMC41IDE5Ljc1YzAgLjQxMy0uMzM3Ljc1LS43NS43NUgxMFYxNEgzLjVWNC4yNWEuNzUuNzUgMCAwIDEgLjc1LS43NWgxNS41YS43NS43NSAwIDAgMSAuNzUuNzV2MTUuNXpNMTkuNzUgMUg0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDEgNC4yNXYxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDQuMjUgMjNoMTUuNUEzLjI1NCAzLjI1NCAwIDAgMCAyMyAxOS43NVY0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDE5Ljc1IDF6JztcblxudmFyIGFsaWduQm90dG9tUmlnaHQgPSAnTTMuNSAxOS43NVY0LjI1YS43NS43NSAwIDAgMSAuNzUtLjc1aDE1LjVhLjc1Ljc1IDAgMCAxIC43NS43NVYxNEgxNHY2LjVINC4yNWEuNzUyLjc1MiAwIDAgMS0uNzUtLjc1TTE5Ljc1IDFINC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxIDQuMjV2MTUuNUEzLjI1NCAzLjI1NCAwIDAgMCA0LjI1IDIzaDE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgMjMgMTkuNzVWNC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxOS43NSAxJztcblxudmFyIGFsaWduTWlkZGxlID0gJ00xOS43NSAyMC41SDQuMjVhLjc1Ljc1IDAgMCAxLS43NS0uNzVWMTUuNWgxN3Y0LjI1YS43NS43NSAwIDAgMS0uNzUuNzVtLTE1LjUtMTdoMTUuNWEuNzUuNzUgMCAwIDEgLjc1Ljc1VjguNWgtMTdWNC4yNWEuNzUuNzUgMCAwIDEgLjc1LS43NU0xOS43NSAxSDQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMSA0LjI1djE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgNC4yNSAyM2gxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDIzIDE5Ljc1VjQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMTkuNzUgMSc7XG5cbnZhciBhbGlnblRvcCA9ICdNMTkuNzUgMjAuNUg0LjI1YS43NTIuNzUyIDAgMCAxLS43NS0uNzVWMTBoMTd2OS43NWMwIC40MTMtLjMzNy43NS0uNzUuNzVtMC0xOS41SDQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMSA0LjI1djE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgNC4yNSAyM2gxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDIzIDE5Ljc1VjQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMTkuNzUgMSc7XG5cbnZhciBhbGlnblRvcENlbnRlciA9ICdNMjAuNSAxOS43NWEuNzUuNzUgMCAwIDEtLjc1Ljc1SDQuMjVhLjc1Ljc1IDAgMCAxLS43NS0uNzVWNC4yNWEuNzUuNzUgMCAwIDEgLjc1LS43NUg4LjVWMTBoN1YzLjVoNC4yNWEuNzUuNzUgMCAwIDEgLjc1Ljc1djE1LjV6TTE5Ljc1IDFINC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxIDQuMjV2MTUuNUEzLjI1NCAzLjI1NCAwIDAgMCA0LjI1IDIzaDE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgMjMgMTkuNzVWNC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxOS43NSAxeic7XG5cbnZhciBhbGlnblRvcExlZnQgPSAnTTIwLjUgMTkuNzVhLjc1Ljc1IDAgMCAxLS43NS43NUg0LjI1YS43NS43NSAwIDAgMS0uNzUtLjc1VjEwSDEwVjMuNWg5Ljc1YS43NS43NSAwIDAgMSAuNzUuNzV2MTUuNXpNMTkuNzUgMUg0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDEgNC4yNXYxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDQuMjUgMjNoMTUuNUEzLjI1NCAzLjI1NCAwIDAgMCAyMyAxOS43NVY0LjI1QTMuMjU0IDMuMjU0IDAgMCAwIDE5Ljc1IDF6JztcblxudmFyIGFsaWduVG9wUmlnaHQgPSAnTTE5Ljc1IDIwLjVINC4yNWEuNzUuNzUgMCAwIDEtLjc1LS43NVY0LjI1YS43NS43NSAwIDAgMSAuNzUtLjc1SDE0VjEwaDYuNXY5Ljc1YS43NS43NSAwIDAgMS0uNzUuNzVtMC0xOS41SDQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMSA0LjI1djE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgNC4yNSAyM2gxNS41QTMuMjU0IDMuMjU0IDAgMCAwIDIzIDE5Ljc1VjQuMjVBMy4yNTQgMy4yNTQgMCAwIDAgMTkuNzUgMSc7XG5cbnZhciBhbmRyb2lkU2hhcmUgPSAnTTE5IDE2Yy0xLjAyOCAwLTEuOTU3LjM5OS0yLjY2NiAxLjAzN0w4LjkxOSAxMi44Yy4wNTMtLjI1OC4wODEtLjUyNi4wODEtLjhzLS4wMjgtLjU0Mi0uMDgxLS44bDcuNDE1LTQuMjM3QzE3LjA0MyA3LjYwMSAxNy45NzIgOCAxOSA4YzIuMjA5IDAgNC0xLjc5MSA0LTRzLTEuNzkxLTQtNC00LTQgMS43OTEtNCA0YzAgLjI3NC4wMjguNTQyLjA4MS44TDcuNjY2IDkuMDM3QzYuOTU3IDguMzk5IDYuMDI4IDggNSA4Yy0yLjIwOSAwLTQgMS43OTEtNCA0czEuNzkxIDQgNCA0YzEuMDI4IDAgMS45NTctLjM5OSAyLjY2Ni0xLjAzN2w3LjQxNSA0LjIzN2MtLjA1My4yNTgtLjA4MS41MjYtLjA4MS44IDAgMi4yMDkgMS43OTEgNCA0IDRzNC0xLjc5MSA0LTQtMS43OTEtNC00LTQnO1xuXG52YXIgYW5nbGVkUGluID0gJ00xMy45ODgsMTkuMTUzIEMxNS40ODUsMTcuNjU2IDE1Ljk4NSwxNS40NDYgMTUuNDgxLDEzLjUzNyBMMTkuNzQwLDkuMDc0IEwyMi42NjIsOC44MDcgTDIyLjY0NSw4Ljc4OSBDMjIuNzM5LDguODA0IDIyLjgzNyw4Ljc4MCAyMi45MDksOC43MDggQzIzLjAzMCw4LjU4NyAyMy4wMzEsOC4zOTEgMjIuOTEwLDguMjcxIEwxNS43MzAsMS4wOTAgQzE1LjYwOSwwLjk3MCAxNS40MTMsMC45NzAgMTUuMjkyLDEuMDkxIEMxNS4yMjAsMS4xNjMgMTUuMTk3LDEuMjYyIDE1LjIxMSwxLjM1NiBMMTUuMTk0LDEuMzM4IEwxNC45MjcsNC4yNjEgTDEwLjQ2Myw4LjUyMCBDOC41NTQsOC4wMTUgNi4zNDQsOC41MTYgNC44NDcsMTAuMDEyIEw4LjY1NiwxMy44MjEgTDMuMzI0LDE5LjE1MyBDMi41NjIsMTkuOTE1IDAuNzExLDIyLjEwOCAxLjAzOSwyMi45NjIgQzEuODkyLDIzLjI5MCA0LjA4NiwyMS40MzggNC44NDcsMjAuNjc2IEM1LjYwOSwxOS45MTUgMTAuMTc5LDE1LjM0NCAxMC4xNzksMTUuMzQ0IEwxMy45ODgsMTkuMTUzIFonO1xuXG52YXIgYXBwcyA9ICdNMjAgMTdhMyAzIDAgMSAwIDAgNiAzIDMgMCAwIDAgMC02bTAtOGEzIDMgMCAxIDAgMCA2IDMgMyAwIDAgMCAwLTZtMC04YTMgMyAwIDEgMCAwIDYgMyAzIDAgMCAwIDAtNm0tOCAxNmEzIDMgMCAxIDAgMCA2IDMgMyAwIDAgMCAwLTZtMC04YTMgMyAwIDEgMCAwIDYgMyAzIDAgMCAwIDAtNm0wLThhMyAzIDAgMSAwIDAgNiAzIDMgMCAwIDAgMC02TTQgMTdhMyAzIDAgMSAwIDAgNiAzIDMgMCAwIDAgMC02bTAtOGEzIDMgMCAxIDAgMCA2IDMgMyAwIDAgMCAwLTZtMy01YTMgMyAwIDEgMS02IDAgMyAzIDAgMCAxIDYgMCc7XG5cbnZhciBhcnJvd0JhY2sgPSAnTTE3LjI4IDI0Yy0uNTcgMC0xLjE0LS4yMi0xLjU4LS42Nkw0LjUgMTIgMTUuNy42NmEyLjIxIDIuMjEgMCAwIDEgMy4xNSAwYy44Ny44OC44NyAyLjMgMCAzLjE4TDEwLjc5IDEybDguMDYgOC4xNmMuODcuODguODcgMi4zIDAgMy4xOC0uNDQuNDQtMSAuNjYtMS41Ny42Nic7XG5cbnZhciBhcnJvd0NpcmNsZURvd24gPSAnTTAgMTJjMCA2LjYzIDUuMzcgMTIgMTIgMTJzMTItNS4zNyAxMi0xMlMxOC42MyAwIDEyIDAgMCA1LjM3IDAgMTJ6bTEwLjc3LTMuNzVhMS4yNSAxLjI1IDAgMCAxIDIuNSAwdjMuOTVsMS4wMy0xLjAzYTEuMjUgMS4yNSAwIDAgMSAxLjc3IDBjLjQ4LjQ5LjQ4IDEuMjggMCAxLjc3TDEyIDE3bC00LjA3LTQuMDZjLS40OC0uNDktLjQ4LTEuMjggMC0xLjc3YTEuMjUgMS4yNSAwIDAgMSAxLjc3IDBsMS4wNyAxLjA2VjguMjV6JztcblxudmFyIGFycm93Q2lyY2xlRm9yd2FyZCA9ICdNMTIuOTQgMTYuMDdjLS40OS40OC0xLjI4LjQ4LTEuNzcgMGExLjI1IDEuMjUgMCAwIDEgMC0xLjc3bDEuMDYtMS4wN0g4LjI1YTEuMjUgMS4yNSAwIDAgMSAwLTIuNWgzLjk1TDExLjE3IDkuN2ExLjI1IDEuMjUgMCAwIDEgMC0xLjc3Yy40OS0uNDggMS4yOC0uNDggMS43NyAwTDE3IDEybC00LjA2IDQuMDd6TTEyIDBDNS4zNyAwIDAgNS4zNyAwIDEyczUuMzcgMTIgMTIgMTIgMTItNS4zNyAxMi0xMlMxOC42MyAwIDEyIDB6JztcblxudmFyIGFycm93Q2lyY2xlVXAgPSAnTTI0IDEyYzAtNi42MjctNS4zNzItMTItMTItMTJDNS4zNzMgMCAwIDUuMzczIDAgMTJzNS4zNzMgMTIgMTIgMTJjNi42MjggMCAxMi01LjM3MyAxMi0xMnptLTEwLjc2NyAzLjc1YTEuMjUgMS4yNSAwIDAgMS0yLjUgMHYtMy45NDhsLTEuMDMxIDEuMDMxYTEuMjUgMS4yNSAwIDAgMS0xLjc2OC0xLjc2OEwxMiA3bDQuMDY2IDQuMDY1YTEuMjUgMS4yNSAwIDAgMS0xLjc2OCAxLjc2OGwtMS4wNjUtMS4wNjV2My45ODJ6JztcblxudmFyIGFycm93RG93biA9ICdNMTIgMTkuNUwuNjYgOC4yOWMtLjg4LS44Ni0uODgtMi4yNyAwLTMuMTQuODgtLjg3IDIuMy0uODcgMy4xOCAwTDEyIDEzLjIxbDguMTYtOC4wNmMuODgtLjg3IDIuMy0uODcgMy4xOCAwIC44OC44Ny44OCAyLjI4IDAgMy4xNEwxMiAxOS41eic7XG5cbnZhciBhcnJvd0VuZCA9ICdNMTggMnYyMGEyIDIgMCAwIDAgNCAwVjJhMiAyIDAgMCAwLTQgMHptLTYuODMgMTBMMi41ODcgMy40MTRBMiAyIDAgMSAxIDUuNDE0LjU4NkwxNi44MjkgMTIgNS40MTQgMjMuNDE0QTEuOTkgMS45OSAwIDAgMSA0IDI0YTIgMiAwIDAgMS0xLjQxNC0zLjQxNEwxMS4xNyAxMnonO1xuXG52YXIgYXJyb3dGb3J3YXJkID0gJ002LjcyIDI0Yy41NyAwIDEuMTQtLjIyIDEuNTctLjY2TDE5LjUgMTIgOC4yOS42NmMtLjg2LS44OC0yLjI3LS44OC0zLjE0IDAtLjg3Ljg4LS44NyAyLjMgMCAzLjE4TDEzLjIxIDEybC04LjA2IDguMTZjLS44Ny44OC0uODcgMi4zIDAgMy4xOC40My40NCAxIC42NiAxLjU3LjY2JztcblxudmFyIGFycm93U3RhcnQgPSAnTTQgMGEyIDIgMCAwIDAtMiAydjIwYTIgMiAwIDAgMCA0IDBWMmEyIDIgMCAwIDAtMi0yem0xNy40MTQgMjAuNTg2YTIgMiAwIDEgMS0yLjgyOCAyLjgyOEw3LjE3MSAxMiAxOC41ODYuNTg2YTIgMiAwIDEgMSAyLjgyOCAyLjgyOEwxMi44MjkgMTJsOC41ODUgOC41ODZ6JztcblxudmFyIGFycm93VXAgPSAnTTIxLjc1IDE5LjVjLS41OCAwLTEuMTUtLjIyLTEuNTktLjY1TDEyIDEwLjc5bC04LjE2IDguMDZjLS44OC44Ny0yLjMuODctMy4xOCAwYTIuMjEgMi4yMSAwIDAgMSAwLTMuMTVMMTIgNC41bDExLjM0IDExLjJjLjg4Ljg3Ljg4IDIuMjggMCAzLjE1LS40NC40My0xLjAxLjY1LTEuNTkuNjUnO1xuXG52YXIgYXJyb3dVcFJpZ2h0ID0gJ000LjkyODMsMSBDMy42MjczLDEgMi41NzEzLDIuMDU0IDIuNTcxMywzLjM1NyBDMi41NzEzLDQuNjYgMy42MjczLDUuNzE0IDQuOTI4Myw1LjcxNCBMMTQuOTUyMyw1LjcxNCBMMS42ODkzLDE4Ljk3NiBDMC43NzAzLDE5Ljg5NiAwLjc3MDMsMjEuMzg5IDEuNjg5MywyMi4zMSBDMi4xNTAzLDIyLjc3MSAyLjc1MzMsMjMgMy4zNTczLDIzIEMzLjk2MDMsMjMgNC41NjMzLDIyLjc3MSA1LjAyNDMsMjIuMzEgTDE4LjI4NTMsOS4wNDcgTDE4LjI4NTMsMTkuMDcxIEMxOC4yODUzLDIwLjM3NCAxOS4zNDEzLDIxLjQyOSAyMC42NDMzLDIxLjQyOSBDMjEuOTQ0MywyMS40MjkgMjMuMDAwMywyMC4zNzQgMjMuMDAwMywxOS4wNzEgTDIzLjAwMDMsMSBMNC45MjgzLDEgWic7XG5cbnZhciBiZWxsID0gJ00xMiAyNGMtMS42NiAwLTMtMS4zNC0zLTNoNmMwIDEuNjYtMS4zNCAzLTMgM3ptNy0xMC44M2MxLjU4IDEuNTIgMi42NyAzLjU1IDMgNS44M0gyYy4zMy0yLjI4IDEuNDItNC4zMSAzLTUuODNWN2MwLTMuODcgMy4xMy03IDctN3M3IDMuMTMgNyA3djYuMTd6JztcblxudmFyIGNhbGVuZGFyID0gJ000IDIwVjloMTZ2MTFINHptMi00aDV2LTVINnY1ek0yMCA0aC0yLjVWMi41YTEuNSAxLjUgMCAxIDAtMyAwVjRoLTVWMi41YTEuNSAxLjUgMCAxIDAtMyAwVjRINEMyLjM1IDQgMSA1LjM1IDEgN3YxM2MwIDEuNjUgMS4zNSAzIDMgM2gxNmMxLjY1IDAgMy0xLjM1IDMtM1Y3YzAtMS42NS0xLjM1LTMtMy0zeic7XG5cbnZhciBjYW1lcmEgPSAnTTYuMzYgNC45OUw4LjU2IDJoNi44OGwyLjIgMi45OWgzLjA5YzEuOCAwIDMuMjcgMS40OSAzLjI3IDMuMzN2MTAuMzVjMCAxLjg0LTEuNDcgMy4zMy0zLjI3IDMuMzNIMy4yN0MxLjQ3IDIyIDAgMjAuNTEgMCAxOC42N1Y4LjMyYzAtMS44NCAxLjQ3LTMuMzMgMy4yNy0zLjMzaDMuMDl6TTEyIDcuMjJhNS43NCA1Ljc0IDAgMSAwIDAgMTEuNDggNS43NCA1Ljc0IDAgMCAwIDAtMTEuNDhtMCAyLjczYzEuNjYgMCAzLjAxIDEuMzUgMy4wMSAzLjAxIDAgMS42Ni0xLjM1IDMuMDEtMy4wMSAzLjAxLTEuNjYgMC0zLjAxLTEuMzUtMy4wMS0zLjAxIDAtMS42NiAxLjM1LTMuMDEgMy4wMS0zLjAxJztcblxudmFyIGNhbWVyYVJvbGwgPSAnTTggMTBjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyTTYuMjUgMy41aDExLjVjMS41MiAwIDIuNzUgMS4yMyAyLjc1IDIuNzV2OC4yNUwxNyAxMWwtNiA2LTMuNS0zLjUtNCA0VjYuMjVjMC0xLjUyIDEuMjMtMi43NSAyLjc1LTIuNzVNMTcuNzUgMUg2LjI1QTUuMjUgNS4yNSAwIDAgMCAxIDYuMjV2MTEuNUMxIDIwLjY0IDMuMzUgMjMgNi4yNSAyM2gxMS41YzIuODkgMCA1LjI1LTIuMzYgNS4yNS01LjI1VjYuMjVDMjMgMy4zNSAyMC42NCAxIDE3Ljc1IDEnO1xuXG52YXIgY2FuY2VsID0gJ00xNS4xOCAxMmw3LjE2LTcuMTZjLjg4LS44OC44OC0yLjMgMC0zLjE4LS44OC0uODgtMi4zLS44OC0zLjE4IDBMMTIgOC44MiA0Ljg0IDEuNjZjLS44OC0uODgtMi4zLS44OC0zLjE4IDAtLjg4Ljg4LS44OCAyLjMgMCAzLjE4TDguODIgMTJsLTcuMTYgNy4xNmMtLjg4Ljg4LS44OCAyLjMgMCAzLjE4LjQ0LjQ0IDEuMDEuNjYgMS41OS42Ni41OCAwIDEuMTUtLjIyIDEuNTktLjY2TDEyIDE1LjE4bDcuMTYgNy4xNmMuNDQuNDQgMS4wMS42NiAxLjU5LjY2LjU4IDAgMS4xNS0uMjIgMS41OS0uNjYuODgtLjg4Ljg4LTIuMyAwLTMuMThMMTUuMTggMTJ6JztcblxudmFyIGNhbm9uaWNhbFBpbiA9ICdNMTkgMjBjMCAuNTUxLS40NDggMS0xIDFoLTcuNDcxYy0uNTUxIDAtMS0uNDQ5LTEtMXYtMkgxNGEyIDIgMCAwIDAgMi0yVjhoMmMuNTUyIDAgMSAuNDQ5IDEgMXYxMXpNNS43MDUgOS45OTZhMS4xMjYgMS4xMjYgMCAwIDEgMS41OS0xLjU5MUw4LjcgOS44MDlsMy4wMDQtMy4wMDRhMS4xMjUgMS4xMjUgMCAxIDEgMS41OTIgMS41OTFMOC43IDEyLjk5MSA1LjcwNSA5Ljk5NnpNMTggNmgtMlYzYTIgMiAwIDAgMC0yLTJINWEyIDIgMCAwIDAtMiAydjEzYTIgMiAwIDAgMCAyIDJoMi41Mjl2MmMwIDEuNjU0IDEuMzQ2IDMgMyAzSDE4YzEuNjU0IDAgMy0xLjM0NiAzLTNWOWMwLTEuNjU0LTEuMzQ2LTMtMy0zeic7XG5cbnZhciBjaGVjayA9ICdNOS4xNyAyMS43NUwuNzMgMTIuNzljLS45Ny0xLjA0LS45Ny0yLjcxIDAtMy43NWEyLjQwMyAyLjQwMyAwIDAgMSAzLjUzIDBsNC45MSA1LjIyTDE5Ljc0IDMuMDNjLjk4LTEuMDQgMi41NS0xLjA0IDMuNTMgMCAuOTcgMS4wMy45NyAyLjcxIDAgMy43NEw5LjE3IDIxLjc1eic7XG5cbnZhciBjaGVja0NpcmNsZSA9ICdNMTIgMGExMiAxMiAwIDEwMCAyNCAxMiAxMiAwIDAwMC0yNHpNNi4zNyAxMS42MWExLjI1IDEuMjUgMCAwMTEuNzYgMGwyLjM3IDIuMzYgNS4zNy01LjM1YTEuMjUgMS4yNSAwIDAxMS43NiAxLjc2TDEwLjUgMTcuNWwtNC4xMy00LjEzYTEuMjUgMS4yNSAwIDAxMC0xLjc2eic7XG5cbnZhciBjaXJjbGVPdXRsaW5lID0gJ00xMiAwQzUuNCAwIDAgNS40IDAgMTJzNS40IDEyIDEyIDEyIDEyLTUuNCAxMi0xMlMxOC42IDAgMTIgMHptMCAyMi4yQzYuNDUgMjIuMiAxLjggMTcuNyAxLjggMTIgMS44IDYuMyA2LjMgMS44IDEyIDEuOGM1LjcgMCAxMC4yIDQuNSAxMC4yIDEwLjIgMCA1LjctNC42NSAxMC4yLTEwLjIgMTAuMnonO1xuXG52YXIgY2xlYXIgPSAnTTE1LjE4IDE2Ljk1TDEyIDEzLjc3bC0zLjE4IDMuMThjLS40OS40OS0xLjI4LjQ5LTEuNzcgMGExLjI1IDEuMjUgMCAwIDEgMC0xLjc3TDEwLjIzIDEyIDcuMDUgOC44MmExLjI1IDEuMjUgMCAwIDEgMC0xLjc3IDEuMjUgMS4yNSAwIDAgMSAxLjc3IDBMMTIgMTAuMjNsMy4xOC0zLjE4YTEuMjUgMS4yNSAwIDAgMSAxLjc3IDBjLjQ5LjQ5LjQ5IDEuMjggMCAxLjc3TDEzLjc3IDEybDMuMTggMy4xOGMuNDkuNDkuNDkgMS4yOCAwIDEuNzdzLTEuMjguNDktMS43NyAwTTI0IDEyYzAtNi42My01LjM3LTEyLTEyLTEyUzAgNS4zNyAwIDEyczUuMzcgMTIgMTIgMTIgMTItNS4zNyAxMi0xMic7XG5cbnZhciBjbG9jayA9ICdNMTcuODMgMTcuODNjLS4zNy4zNi0uODUuNTUtMS4zMy41NS0uNDggMC0uOTYtLjE5LTEuMzMtLjU1bC01LjA0LTUuMDVWNmMwLTEuMDQuODMtMS44NyAxLjg3LTEuODdzMS44OC44MyAxLjg4IDEuODd2NS4yMmwzLjk1IDMuOTVjLjczLjc0LjczIDEuOTIgMCAyLjY2TTEyIDBDNS4zNyAwIDAgNS4zNyAwIDEyczUuMzcgMTIgMTIgMTIgMTItNS4zNyAxMi0xMlMxOC42MyAwIDEyIDAnO1xuXG52YXIgY29kZSA9ICdNMTEuOTkgMTcuMzhhLjc1Ljc1IDAgMDEtMS40OC0uMjZsMS41LTguNTNhLjc1Ljc1IDAgMDExLjQ4LjI1em0tMi4xLTcuMDRjLjIxLjM1LjExLjgyLS4yMyAxLjA0TDcuMTQgMTNsMi41MiAxLjYyYS43NS43NSAwIDExLS44MiAxLjI2bC0zLjUtMi4yNWEuNzUuNzUgMCAwMTAtMS4yNmwzLjUtMi4yNWEuNzUuNzUgMCAwMTEuMDQuMjJ6TTE2Ljg1IDEzbC0yLjUyLTEuNjJhLjc1Ljc1IDAgMDEuODItMS4yNmwzLjUgMi4yNWEuNzUuNzUgMCAwMTAgMS4yNmwtMy41IDIuMjVhLjc1Ljc1IDAgMDEtLjgyLTEuMjZ6TTEgNGEzIDMgMCAwMTMtM2gxNmEzIDMgMCAwMTMgM3YxNmEzIDMgMCAwMS0zIDNINGEzIDMgMCAwMS0zLTN6bTMuNSAwYS41LjUgMCAxMDAtMSAuNS41IDAgMDAwIDF6TTIwIDZINHYxNGgxNnpNNi41IDNhLjUuNSAwIDEwMCAxIC41LjUgMCAwMDAtMXptMiAxYS41LjUgMCAxMDAtMSAuNS41IDAgMDAwIDF6JztcblxudmFyIGNvZyA9ICdNNi4yNSAyTC41IDEybDUuNzUgMTBoMTEuNWw1Ljc1LTEwLTUuNzUtMTBINi4yNXptMS43MDMgMTBhNCA0IDAgMSAxIDggMCA0IDQgMCAwIDEtOCAweic7XG5cbnZhciBjb2xvclBpY2tlciA9ICdNMS43MyAxOC43NTFsOC4yMy04LjIzMSAzLjUyIDMuNTItOC4yMzIgOC4yM2EyLjQ4NyAyLjQ4NyAwIDAgMS0zLjUxOSAwIDIuNDg3IDIuNDg3IDAgMCAxIDAtMy41MTl6TTIyLjAyNiAxLjk3MmEzLjMxOCAzLjMxOCAwIDAgMSAwIDQuNjkzbC0zLjkwNyAzLjkwOC4xMTYuMTE4YTEuNDkzIDEuNDkzIDAgMSAxLTIuMTExIDIuMTExbC00LjkyOC00LjkyN2ExLjQ5NCAxLjQ5NCAwIDAgMSAyLjExMi0yLjExMmwuMTE3LjExNyAzLjkwOC0zLjkwOGEzLjMxOCAzLjMxOCAwIDAgMSA0LjY5MyAweic7XG5cbnZhciBjb21wYXNzID0gJ00xMi44NjggMTIuOUExLjI1IDEuMjUgMCAxIDAgMTEuMSAxMS4xM2ExLjI1IDEuMjUgMCAwIDAgMS43NyAxLjc2OG0yLjI2OCAxLjEzNGMtLjIwNy41MTctLjYyLjkyNC0xLjEzOSAxLjEyNEw1LjYyIDE4LjM4bDMuMjIzLTguMzc3Yy4yLS41Mi42MDctLjkzMyAxLjEyNC0xLjEzOWw4LjYxNy0zLjQ0Ny0zLjQ0NyA4LjYxN3ptNS4zNDgtMTAuNTE5Yy00LjY4Ni00LjY4Ni0xMi4yODQtNC42ODYtMTYuOTcgMC00LjY4NyA0LjY4Ny00LjY4NyAxMi4yODUgMCAxNi45NzEgNC42ODYgNC42ODYgMTIuMjg0IDQuNjg2IDE2Ljk3IDAgNC42ODYtNC42ODYgNC42ODYtMTIuMjg0IDAtMTYuOTd6JztcblxudmFyIGNvbXBvc2UgPSAnTTIuMzM3IDE5Ljk0Mmw1LjY3MS0xLjk3N0wxOS4yNjUgNi43MDZjLjk4MS0uOTguOTgxLTIuNTcgMC0zLjU1bC0xLjQyLTEuNDIxYTIuNTEgMi41MSAwIDAgMC0zLjU1IDBMMy4wMzYgMTIuOTkybC0xLjk3OCA1LjY3MWExLjAwNSAxLjAwNSAwIDAgMCAxLjI3OSAxLjI3OU0yMyAyMmMwIC41NS0uNDUgMS0xIDFIMmMtLjU1IDAtMS0uNDUtMS0xcy40NS0xIDEtMWgyMGMuNTUgMCAxIC40NSAxIDEnO1xuXG52YXIgY29udmVyc2lvblRhZyA9ICdNMTQuMDMgNC4wM2MuNjcuMTYgMS4xLjgzLjk0IDEuNWwtMyAxM2ExLjI1IDEuMjUgMCAwMS0yLjQ0LS41NmwzLTEzYy4xNi0uNjcuODMtMS4xIDEuNS0uOTR6bTQuMDggNC4zM0wyMiAxMi4xOWwtMy44OCAzLjk0YTEuMjUgMS4yNSAwIDExLTEuNzgtMS43NmwyLjEyLTIuMTUtMi4xLTIuMDhhMS4yNSAxLjI1IDAgMDExLjc1LTEuNzh6bS0xMC40NS4wMWMuNDguNS40OCAxLjI5LS4wMiAxLjc3bC0yLjEgMi4wOCAyLjEyIDIuMTVhMS4yNSAxLjI1IDAgMTEtMS43OCAxLjc2TDIgMTIuMTlsMy45LTMuODNhMS4yNSAxLjI1IDAgMDExLjc2LjAxeic7XG5cbnZhciBjcmVkaXRDYXJkID0gJ002IDEzLjc1YTEuMjUgMS4yNSAwIDEwMCAyLjVoNWExLjI1IDEuMjUgMCAxMDAtMi41ek0wIDE4YTMgMyAwIDAwMyAzaDE4YTMgMyAwIDAwMy0zVjZhMyAzIDAgMDAtMy0zSDNhMyAzIDAgMDAtMyAzek0yMS41IDZ2MmgtMTlWNmMwLS4yOC4yMi0uNS41LS41aDE4Yy4yOCAwIC41LjIyLjUuNXpNMyAxOC41YS41LjUgMCAwMS0uNS0uNXYtNmgxOXY2YS41LjUgMCAwMS0uNS41eic7XG5cbnZhciBjcm9wID0gJ00yMi41IDRhMS41IDEuNSAwIDEgMSAwIDNIMjB2MTEuNWExLjUgMS41IDAgMCAxLTEuNSAxLjVIN3YyLjVhMS41IDEuNSAwIDEgMS0zIDBWMjBIMS41YTEuNSAxLjUgMCAxIDEgMC0zSDRWNS41QTEuNSAxLjUgMCAwIDEgNS41IDRIMTdWMS41YTEuNSAxLjUgMCAxIDEgMyAwVjRoMi41ek03IDE3aDEwVjdIN3YxMHptNS0zYTIgMiAwIDEgMSAuMDAxLTQuMDAxQTIgMiAwIDAgMSAxMiAxNHonO1xuXG52YXIgZGFzaCA9ICdNMjAgMTZINGMtMi4yIDAtNC0xLjgtNC00czEuOC00IDQtNGgxNmMyLjIgMCA0IDEuOCA0IDRzLTEuOCA0LTQgNCc7XG5cbnZhciBkaXJlY3Rpb25hbEFycm93TGVmdCA9ICdNOC40MTUgNC41ODZhMiAyIDAgMSAxIDIuODI4IDIuODI4TDguNjU3IDEwSDIxYTIgMiAwIDAgMSAwIDRIOC42NTdsMi41ODYgMi41ODZhMiAyIDAgMSAxLTIuODI4IDIuODI4TDEgMTJsNy40MTUtNy40MTR6JztcblxudmFyIGRpcmVjdGlvbmFsQXJyb3dSaWdodCA9ICdNMTUuNTg1IDQuNTg2YTIgMiAwIDEgMC0yLjgyOCAyLjgyOEwxNS4zNDMgMTBIM2EyIDIgMCAwIDAgMCA0aDEyLjM0M2wtMi41ODYgMi41ODZhMiAyIDAgMSAwIDIuODI4IDIuODI4TDIzIDEybC03LjQxNS03LjQxNHonO1xuXG52YXIgZG93bmxvYWQgPSAnTTIxIDE0YTIgMiAwIDAgMSAyIDJ2NmEyIDIgMCAwIDEtMiAySDNhMiAyIDAgMCAxLTItMnYtNmEyIDIgMCAwIDEgNCAwdjRoMTR2LTRhMiAyIDAgMCAxIDItMnpNOC44MTUgNi45ODdsMS4xNzYgMS4xNzhWMmEyIDIgMCAwIDEgNCAwdjYuMTc4bDEuMTk2LTEuMTkzYTIgMiAwIDEgMSAyLjgyNiAyLjgzMWwtNi4wMjUgNi4wMTMtNi4wMDQtNi4wMTZhMiAyIDAgMCAxIDIuODMxLTIuODI2eic7XG5cbnZhciBkdXBsaWNhdGUgPSAnTTE5LjUgOS43NWMwLS42OS0uNTYtMS4yNS0xLjI1LTEuMjVIMTUuNVY1Ljc1YTEuMjUgMS4yNSAwIDAgMC0yLjUgMFY4LjVoLTIuNzVhMS4yNSAxLjI1IDAgMCAwIDAgMi41SDEzdjIuNzVhMS4yNSAxLjI1IDAgMCAwIDIuNSAwVjExaDIuNzVjLjY5IDAgMS4yNS0uNTYgMS4yNS0xLjI1bTMuNS02LjV2MTNhMi4yNSAyLjI1IDAgMCAxLTIuMjUgMi4yNWgtMTNhMi4yNSAyLjI1IDAgMCAxLTIuMjUtMi4yNXYtMTNBMi4yNSAyLjI1IDAgMCAxIDcuNzUgMWgxM0EyLjI1IDIuMjUgMCAwIDEgMjMgMy4yNW0tNiAxOC41YzAgLjY5LS41NiAxLjI1LTEuMjUgMS4yNWgtOC41QTYuMjU3IDYuMjU3IDAgMCAxIDEgMTYuNzV2LTguNWExLjI1IDEuMjUgMCAwIDEgMi41IDB2OC41YTMuNzU0IDMuNzU0IDAgMCAwIDMuNzUgMy43NWg4LjVjLjY5IDAgMS4yNS41NiAxLjI1IDEuMjUnO1xuXG52YXIgZWRpdCA9ICdNMTMuMzg2IDYuMDE4bDQuNTk2IDQuNTk2TDcuMDk3IDIxLjQ5OSAxIDIyLjk5OWwxLjUwMS02LjA5NkwxMy4zODYgNi4wMTh6bTguNjYyLTQuMDY2YTMuMjQ4IDMuMjQ4IDAgMCAxIDAgNC41OTZMMTkuNzUgOC44NDggMTUuMTU0IDQuMjVsMi4yOTgtMi4yOTlhMy4yNDggMy4yNDggMCAwIDEgNC41OTYgMHonO1xuXG52YXIgZWxsaXBzaXMgPSAnTTEyIDljLTEuNjYgMC0zIDEuMzQtMyAzczEuMzQgMyAzIDMgMy0xLjM0IDMtMy0xLjM0LTMtMy0zTTMgOWMxLjY2IDAgMyAxLjM0IDMgM3MtMS4zNCAzLTMgMy0zLTEuMzQtMy0zIDEuMzQtMyAzLTN6bTE4IDBjMS42NiAwIDMgMS4zNCAzIDNzLTEuMzQgMy0zIDMtMy0xLjM0LTMtMyAxLjM0LTMgMy0zeic7XG5cbnZhciBlbGxpcHNpc0NpcmNsZU91dGxpbmUgPSAnTTEyIDEwLjVjLjkgMCAxLjUuNiAxLjUgMS41cy0uNiAxLjUtMS41IDEuNS0xLjUtLjYtMS41LTEuNS42LTEuNSAxLjUtMS41em0tNC41IDBjLjkgMCAxLjUuNiAxLjUgMS41cy0uNiAxLjUtMS41IDEuNVM2IDEyLjkgNiAxMnMuNi0xLjUgMS41LTEuNXptOSAwYy45IDAgMS41LjYgMS41IDEuNXMtLjYgMS41LTEuNSAxLjVTMTUgMTIuOSAxNSAxMnMuNi0xLjUgMS41LTEuNXpNMTIgMEM1LjQgMCAwIDUuNCAwIDEyczUuNCAxMiAxMiAxMiAxMi01LjQgMTItMTJTMTguNiAwIDEyIDB6bTAgMjIuMkM2LjQ1IDIyLjIgMS44IDE3LjcgMS44IDEyIDEuOCA2LjMgNi4zIDEuOCAxMiAxLjhjNS43IDAgMTAuMiA0LjUgMTAuMiAxMC4yIDAgNS43LTQuNjUgMTAuMi0xMC4yIDEwLjJ6JztcblxudmFyIGVudmVsb3BlID0gJ00yMS41MyA3LjUwOGwtNy41ODYgNy40NTJjLS41MzYuNTI2LTEuMjQuNzktMS45NDQuNzlhMi43NyAyLjc3IDAgMCAxLTEuOTQ1LS43OUwyLjQ3IDcuNTA4YS43MjguNzI4IDAgMCAxIDAtMS4wNDMuNzYuNzYgMCAwIDEgMS4wNjEgMGw3LjU4NiA3LjQ1MmMuNDg3LjQ4IDEuMjguNDggMS43NjggMGw3LjU4NS03LjQ1MmEuNzYuNzYgMCAwIDEgMS4wNjEgMCAuNzI4LjcyOCAwIDAgMSAwIDEuMDQzek0xIDE5aDIyVjVIMXYxNHonO1xuXG52YXIgZXllID0gJ00xMCwxMiBDMTAsMTMuMTA1IDEwLjg5NSwxNCAxMiwxNCBDMTMuMTA1LDE0IDE0LDEzLjEwNSAxNCwxMiBDMTQsMTAuODk1IDEzLjEwNSwxMCAxMiwxMCBDMTAuODk1LDEwIDEwLDEwLjg5NSAxMCwxMiBaIE0xMiwxNyBDOS4yMzksMTcgNywxNC43NjEgNywxMiBDNyw5LjIzOSA5LjIzOSw3IDEyLDcgQzE0Ljc2MSw3IDE3LDkuMjM5IDE3LDEyIEMxNywxNC43NjEgMTQuNzYxLDE3IDEyLDE3IE0xMiwzLjUgQzYuNDU1LDMuNSAxLjc1MSw3LjA1MSAwLDEyIEMxLjc1MSwxNi45NDkgNi40NTUsMjAuNSAxMiwyMC41IEMxNy41NDUsMjAuNSAyMi4yNDksMTYuOTQ5IDI0LDEyIEMyMi4yNDksNy4wNTEgMTcuNTQ1LDMuNSAxMiwzLjUnO1xuXG52YXIgZmFjZWJvb2sgPSAnTTE3Ljc1IDMuOTg0bC0yLjMxMi4wMDFjLTEuODExIDAtMi4xNjMuODQyLTIuMTYzIDIuMDc3djIuNzI0aDQuMzIzbC0uNTYzIDQuMjY3aC0zLjc2VjI0SDguNzY5VjEzLjA1M0g1VjguNzg2aDMuNzY5VjUuNjRDOC43NjkgMS45ODggMTEuMDUgMCAxNC4zODMgMGMxLjU5NiAwIDIuOTY3LjExNiAzLjM2Ny4xNjh2My44MTZ6JztcblxudmFyIGZhY2VIYXBweSA9ICdNMTIuMDIzIDIwLjcxM2MtMi45NDQgMC01LjM3OC0xLjk2LTUuMzU2LTQuOTA2LjAxNy0yLjExNyAxLjcyOC0uNTM2IDUuMzMtLjU0NSAzLjYtLjAxIDUuMzIyLTEuNjQ1IDUuMzI3LjU0OC4wMDcgMi45NDYtMi4zNTYgNC45MDMtNS4zIDQuOTAzbTQuNDM5LTkuODNhMS42NzUgMS42NzUgMCAxIDEgMC0zLjM1MSAxLjY3NSAxLjY3NSAwIDAgMSAwIDMuMzVNNi4wOTMgOS4yMDdhMS42NzUgMS42NzUgMCAxIDEgMy4zNSAwIDEuNjc1IDEuNjc1IDAgMCAxLTMuMzUgMG0xNy45MDYgMi43ODJDMjMuOTk0IDUuMzY3IDE4LjYyMyAwIDEyIDAgNS4zNzMgMCAwIDUuMzczIDAgMTJjMCA2LjYyOCA1LjM3MyAxMiAxMiAxMkMxOC42MjQgMjQgMjMuOTk1IDE4LjYzMyAyNCAxMi4wMUwyNCAxMmwtLjAwMS0uMDEnO1xuXG52YXIgZmFjZVNhZCA9ICdNMTcuMDg4IDE3Ljg0MWExLjIgMS4yIDAgMCAxLTEuNTkzLjU4IDQuNTE3IDQuNTE3IDAgMCAwLS43NDQtLjIxN2MtLjczOC0uMTY4LTEuNjUzLS4yNy0yLjc1LS4yNzEtMS4wOTggMC0yLjAxMi4xMDMtMi43NTIuMjctLjQxMS4wOTQtLjY1Ny4xOC0uNzQxLjIxN2ExLjE5OSAxLjE5OSAwIDEgMS0xLjAxNC0yLjE3NGMuMjM3LS4xMS42NDMtLjI1MSAxLjIyMy0uMzgzLjkxNS0uMjA3IDIuMDA4LS4zMyAzLjI4NC0uMzMgMS4yNzYuMDAxIDIuMzY5LjEyMyAzLjI4MS4zMy41ODIuMTMyLjk4OC4yNzMgMS4yMjYuMzg0LjYwMS4yNzkuODYuOTkyLjU4IDEuNTk0em0tLjYyNC02Ljk1OWExLjY3NSAxLjY3NSAwIDEgMSAwLTMuMzUgMS42NzUgMS42NzUgMCAwIDEgMCAzLjM1ek02LjA5MyA5LjIwN2ExLjY3NSAxLjY3NSAwIDEgMSAzLjM1IDAgMS42NzUgMS42NzUgMCAwIDEtMy4zNSAwek0yNCAxMS45ODlDMjMuOTk1IDUuMzY3IDE4LjYyNCAwIDEyLjAwMiAwIDUuMzczIDAgMCA1LjM3MyAwIDEyYzAgNi42MjggNS4zNzMgMTIgMTIuMDAyIDEyQzE4LjYyMyAyNCAyMy45OTUgMTguNjMzIDI0IDEyLjAxdi0uMDJ6JztcblxudmFyIGZhY2VTbWlsZXkgPSAnTTE2LjUgMTFhMS41IDEuNSAwIDEgMSAwLTMgMS41IDEuNSAwIDAgMSAwIDNtLjQ0OSA1Ljk1QTYuOTQ3IDYuOTQ3IDAgMCAxIDEyIDE5YTYuOTYgNi45NiAwIDAgMS00Ljk0OC0yLjA0OC45OTkuOTk5IDAgMCAxIDAtMS40MTQuOTk5Ljk5OSAwIDAgMSAxLjQxNC0uMDAxQTQuOTY4IDQuOTY4IDAgMCAwIDEyIDE3YzEuMzM2IDAgMi41OTItLjUyIDMuNTM1LTEuNDY0YTEgMSAwIDAgMSAxLjQxNCAxLjQxNE02IDkuNWExLjUgMS41IDAgMSAxIDMgMCAxLjUgMS41IDAgMCAxLTMgME0xMiAwQzUuMzczIDAgMCA1LjM3MyAwIDEyczUuMzczIDEyIDEyIDEyIDEyLTUuMzczIDEyLTEyUzE4LjYyNyAwIDEyIDAnO1xuXG52YXIgZmlsZVVua25vd24gPSAnTTE1IDUuODc1VjFsNiA2aC00Ljg3NUMxNS41MDUgNyAxNSA2LjQ5NSAxNSA1Ljg3NXptLTEuNTczIDkuNjUyYy0uMzA1LjE3Mi0uNjQ1Ljc0OC0uNjQ1IDEuMjYgMCAuNDI0LS4zNTEuNzctLjc4Mi43N2EuNzc3Ljc3NyAwIDAgMS0uNzgyLS43N2MwLTEuMDM1LjYtMi4xMjYgMS40MjktMi41OTUuMjYtLjE0OC41NDEtLjUxOS41NDEtLjk4M0ExLjE4IDEuMTggMCAwIDAgMTIgMTIuMDRhMS4xOCAxLjE4IDAgMCAwLTEuMTg3IDEuMTY5YzAgLjQyNi0uMzUuNzcxLS43ODEuNzcxYS43NzguNzc4IDAgMCAxLS43ODItLjc3MWMwLTEuNDk0IDEuMjMzLTIuNzA5IDIuNzUtMi43MDlzMi43NSAxLjIxNSAyLjc1IDIuNzA5YzAgLjk1Mi0uNTIgMS44NjItMS4zMjMgMi4zMTh6TTEyIDIwYS44Mi44MiAwIDAgMS0uODI1LS44MTQuODIuODIgMCAwIDEgLjgyNS0uODE0LjgyLjgyIDAgMCAxIC44MjUuODE0QS44Mi44MiAwIDAgMSAxMiAyMHptNC4xMjUtMTEuMjVhMi44NzkgMi44NzkgMCAwIDEtMi44NzUtMi44NzVWMUg1LjVBMi41IDIuNSAwIDAgMCAzIDMuNXYxN0EyLjUgMi41IDAgMCAwIDUuNSAyM2gxM2EyLjUgMi41IDAgMCAwIDIuNS0yLjVWOC43NWgtNC44NzV6JztcblxudmFyIGZpbGxPcGFxdWUgPSAnTTYgMThoMTJWNkg2djEyem0xNC41IDEuNzVhLjc1Ljc1IDAgMCAxLS43NS43NUg0LjI1YS43NS43NSAwIDAgMS0uNzUtLjc1VjQuMjVhLjc1Ljc1IDAgMCAxIC43NS0uNzVoMTUuNWEuNzUuNzUgMCAwIDEgLjc1Ljc1djE1LjV6TTE5Ljc1IDFINC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxIDQuMjV2MTUuNUEzLjI1NCAzLjI1NCAwIDAgMCA0LjI1IDIzaDE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgMjMgMTkuNzVWNC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxOS43NSAxeic7XG5cbnZhciBmaWxsVHJhbnNwYXJlbnQgPSAnTTE1IDE4aDN2LTNoLTN2M3ptLTYgMGgzdi0zSDl2M3ptMy0zaDN2LTNoLTN2M3ptLTYgMGgzdi0zSDZ2M3ptOS0zaDNWOWgtM3Yzem0tNiAwaDNWOUg5djN6bTMtM2gzVjZoLTN2M3pNNiA5aDNWNkg2djN6TTQuMjUgMy41YS43NS43NSAwIDAgMC0uNzUuNzV2MTUuNWMwIC40MTQuMzM3Ljc1Ljc1Ljc1aDE1LjVhLjc1Ljc1IDAgMCAwIC43NS0uNzVWNC4yNWEuNzUuNzUgMCAwIDAtLjc1LS43NUg0LjI1ek0xOS43NSAyM0g0LjI1QTMuMjU0IDMuMjU0IDAgMCAxIDEgMTkuNzVWNC4yNUEzLjI1NCAzLjI1NCAwIDAgMSA0LjI1IDFoMTUuNUEzLjI1NCAzLjI1NCAwIDAgMSAyMyA0LjI1djE1LjVBMy4yNTQgMy4yNTQgMCAwIDEgMTkuNzUgMjN6JztcblxudmFyIGZpbHRlciA9ICdNOSAxOS41YTEuNzUgMS43NSAwIDEgMSAuMDAxLTMuNTAxQTEuNzUgMS43NSAwIDAgMSA5IDE5LjVNMjIuMjUgMTZoLTguMzIxYy0uNzI0LTIuMDM0LTIuNjQ2LTMuNS00LjkyOS0zLjVTNC43OTUgMTMuOTY2IDQuMDcxIDE2SDEuNzVhMS43NSAxLjc1IDAgMCAwIDAgMy41aDIuMzIxQzQuNzk1IDIxLjUzNCA2LjcxNyAyMyA5IDIzczQuMjA1LTEuNDY2IDQuOTI5LTMuNWg4LjMyMWExLjc1IDEuNzUgMCAwIDAgMC0zLjVNMTUgNC41YTEuNzUgMS43NSAwIDEgMS0uMDAxIDMuNTAxQTEuNzUgMS43NSAwIDAgMSAxNSA0LjVNMS43NSA4aDguMzIxYy43MjQgMi4wMzQgMi42NDYgMy41IDQuOTI5IDMuNXM0LjIwNS0xLjQ2NiA0LjkyOS0zLjVoMi4zMjFhMS43NSAxLjc1IDAgMCAwIDAtMy41aC0yLjMyMUMxOS4yMDUgMi40NjYgMTcuMjgzIDEgMTUgMXMtNC4yMDUgMS40NjYtNC45MjkgMy41SDEuNzVhMS43NSAxLjc1IDAgMCAwIDAgMy41JztcblxudmFyIGZsYWcgPSAnTTE3IDcuNUwyMiAwSDJ2MjJjMCAxLjEuOSAyIDIgMnMyLS45IDItMnYtN2gxNmwtNS03LjV6JztcblxudmFyIGZsYXNoID0gJ00xNy40NSAwTDMuNSAxNGg2LjU4Nkw2LjU1IDI0IDIwLjUgMTBoLTYuNTg2eic7XG5cbnZhciBmbGFzaGxpZ2h0ID0gJ00xOSAxaC0zdjJoM2MxLjEwMyAwIDIgLjg5NyAyIDJ2M2gyVjVjMC0yLjIwNi0xLjc5NC00LTQtNHptMiAxOGMwIDEuMTAzLS44OTcgMi0yIDJoLTN2MmgzYzIuMjA2IDAgNC0xLjc5NCA0LTR2LTNoLTJ6TTMgMTl2LTNIMXYzYzAgMi4yMDYgMS43OTQgNCA0IDRoM3YtMkg1Yy0xLjEwMyAwLTItLjg5Ny0yLTJ6TTMgNWMwLTEuMTAzLjg5Ny0yIDItMmgzVjFINUMyLjc5NCAxIDEgMi43OTQgMSA1djNoMnptNiA2LjVDOSAxMC4xMjIgMTAuMTIyIDkgMTEuNSA5czIuNSAxLjEyMiAyLjUgMi41LTEuMTIyIDIuNS0yLjUgMi41UzkgMTIuODc4IDkgMTEuNXptNy41IDYuNWExLjUwMiAxLjUwMiAwIDAgMCAxLjA2MS0yLjU2MWwtMi4wMTItMi4wMTFBNC40NDQgNC40NDQgMCAwIDAgMTYgMTEuNUMxNiA5LjAxOSAxMy45ODEgNyAxMS41IDdTNyA5LjAxOSA3IDExLjUgOS4wMTkgMTYgMTEuNSAxNmMuNjkzIDAgMS4zNDEtLjE3IDEuOTI4LS40NTFsMi4wMTEgMi4wMTJjLjI5My4yOTMuNjc3LjQzOSAxLjA2MS40Mzl6JztcblxudmFyIGZsaXBIb3Jpem9udGFsID0gJ00xMiA0LjExOHYxNi4zODRIMy44MTVMMTIgNC4xMTh6bTEwLjc3OCAxNS45NzVMMTMuNzkyIDIuMTA3QTEuOTggMS45OCAwIDAgMCAxMiAxYy0uNzEyIDAtMS40MjMuMzctMS43OTIgMS4xMDdMMS4yMiAyMC4wOTNDLjU0MSAyMS40MjIgMS41MSAyMyAzLjAwNiAyM2gxNy45OWMxLjQ5NSAwIDIuNDYyLTEuNTc4IDEuNzgyLTIuOTA3eic7XG5cbnZhciBmbGlwVmVydGljYWwgPSAnTTE5Ljg4MiAxMkgzLjQ5OFYzLjgxNEwxOS44ODIgMTJ6bTIuMDEyLTEuNzkyTDMuOTA3IDEuMjJBMS45OCAxLjk4IDAgMCAwIDIuOTk5IDFDMS45NTEgMSAxIDEuODQzIDEgMy4wMDV2MTcuOTlDMSAyMi4xNTcgMS45NTEgMjMgMyAyM2MuMyAwIC42MS0uMDcuOTA3LS4yMjFsMTcuOTg3LTguOTg3YzEuNDc1LS43MzcgMS40NzUtMi44NDcgMC0zLjU4NHonO1xuXG52YXIgZm9sZGVyID0gJ00xMSA1di0uNUEyLjUgMi41IDAgMCAwIDguNSAyaC01QTIuNSAyLjUgMCAwIDAgMSA0LjV2MTVBMi41IDIuNSAwIDAgMCAzLjUgMjJoMTdhMi41IDIuNSAwIDAgMCAyLjUtMi41di0xMkEyLjUgMi41IDAgMCAwIDIwLjUgNUgxMXonO1xuXG52YXIgZ2lmID0gJ00xOS41IDNoLTE1QzIuMDIgMyAwIDUuMDMgMCA3LjV2OUMwIDE4Ljk4IDIuMDIgMjEgNC41IDIxaDE1YzIuNDcgMCA0LjUtMi4wMiA0LjUtNC41di05QzI0IDUuMDMgMjEuOTcgMyAxOS41IDN6bS03LjQxIDEyLjg4di03LjhoMS41OXY3LjhoLTEuNTl6bTMuNDUtNy44aDUuNTh2MS4zNGgtNHYxLjg4aDMuMzl2MS4zNWgtMy4zOXYzLjIzaC0xLjU4di03Ljh6bS0xMS40IDYuODNjLS4zMy0uMzctLjU4LS43OS0uNzYtMS4yOC0uMTctLjQ5LS4yNi0xLjAzLS4yNi0xLjYyIDAtLjY2LjExLTEuMjYuMzMtMS44LjIyLS41NS41My0xLjAxLjk1LTEuMzkuMzItLjI5LjY4LS41MSAxLjEtLjY2LjQxLS4xNS44OC0uMjMgMS40LS4yMy40OSAwIC45My4wNiAxLjMyLjE5cy43Mi4zMSAxIC41NGMuMjcuMjMuNS41MS42Ny44My4xNy4zMi4yOS42Ny4zNSAxLjA0SDguNjlhMS42NyAxLjY3IDAgMCAwLS41Ni0uOTNjLS4yOS0uMjQtLjY5LS4zNi0xLjE5LS4zNi0uMzcgMC0uNy4wNy0uOTcuMjEtLjI3LjE0LS41LjM0LS42OS41OS0uMTguMjUtLjMyLjU0LS40MS44OC0uMDkuMzQtLjEzLjctLjEzIDEuMDkgMCAuNC4wNS43Ny4xNSAxLjEuMS4zNC4yNS42My40My44OC4xOS4yNC40Mi40My42OS41Ny4yNy4xNC41Ny4yMS45LjIxLjMxIDAgLjU5LS4wNS44My0uMTYuMjUtLjEuNDYtLjIzLjY0LS40LjE3LS4xNy4zMS0uMzYuNC0uNTcuMS0uMjEuMTQtLjQyLjE0LS42NHYtLjA0SDcuMDV2LTEuMjJoMy4yOHY0LjE0SDkuMTRsLS4wNS0xLjA1aC0uMDNjLS4yNy40NS0uNTguNzctLjk0Ljk0YTIuOCAyLjggMCAwIDEtMS4yNS4yN2MtLjU5IDAtMS4xMS0uMS0xLjU2LS4zLS40Ni0uMi0uODUtLjQ4LTEuMTctLjgzeic7XG5cbnZhciBnbG9iZSA9ICdNMTUuNDkgMjAuODNjLjg3LTIuMDEgMS4zNy00Ljc1IDEuNDgtNy41OGg0LjQ0YTkuNTMgOS41MyAwIDAgMS01LjkyIDcuNTh6bS0xMi45LTcuNThoNC40NGMuMTEgMi44My42MSA1LjU3IDEuNDkgNy41OC0zLjE1LTEuMjUtNS40Ny00LjEyLTUuOTMtNy41OHpNOC41MiAzLjE3Yy0uODggMi4wMS0xLjM4IDQuNzUtMS40OSA3LjU4SDIuNTljLjQ2LTMuNDYgMi43OC02LjMzIDUuOTMtNy41OHptMS4wMSA3LjU4QzkuNzYgNS40MyAxMS40IDIuNTQgMTIgMi41aC4wMWMuNjcuMDYgMi4yNCAzLjAxIDIuNDYgOC4yNUg5LjUzem0yLjQ4IDEwLjc1SDEyYy0uNi0uMDQtMi4yNC0yLjkzLTIuNDctOC4yNWg0Ljk0Yy0uMjIgNS4yNC0xLjc5IDguMTktMi40NiA4LjI1em05LjQtMTAuNzVoLTQuNDRjLS4xMS0yLjgzLS42MS01LjU3LTEuNDgtNy41OGE5LjUzIDkuNTMgMCAwIDEgNS45MiA3LjU4ek0yNCAxMkMyNCA1LjM5IDE4LjYyLjAxIDEyLjAxIDBIMTJDNS4zOCAwIDAgNS4zOCAwIDEyczUuMzggMTIgMTIgMTJoLjAxQzE4LjYyIDI0IDI0IDE4LjYxIDI0IDEyeic7XG5cbnZhciBnbG9iZUNoZWNrZWQgPSAnTTYuOCA5LjhIMy4xQzMuNSA3IDUuNCA0LjYgOCAzLjZjLS43IDEuNy0xLjEgMy45LTEuMiA2LjJtLTMuNyAyLjFoMy43Yy4xIDIuMy41IDQuNiAxLjIgNi4yLTIuNi0xLTQuNS0zLjMtNC45LTYuMm03LjgtOC44Yy41IDAgMS44IDIuNCAyIDYuN0g4LjhjLjItNC4zIDEuNi02LjcgMi4xLTYuN005LjUgMTYuM2MtLjMtMS4xLS42LTIuNi0uNy00LjRoMi43Yy45LTEgMi4xLTEuNyAzLjUtMi4xLS4xLTIuMy0uNS00LjUtMS4zLTYuMiAyLjYgMSA0LjQgMy4zIDQuOSA2LjEuNy4xIDEuNS40IDIuMS44LS4yLTUuMy00LjUtOS41LTkuOC05LjVDNS40IDEgMSA1LjQgMSAxMC45YzAgNS4zIDQuMiA5LjYgOS41IDkuOC0uNi0xLjEtMS0yLjMtMS0zLjd2LS43bTEwLjgtLjVMMTYuMiAyMGwtMi41LTIuNWMtLjMtLjMtLjMtLjggMC0xLjEuMy0uMy44LS4zIDEgMGwxLjUgMS41IDMuMS0zLjJjLjItLjMuNy0uMyAxIDAgLjMuMy4zLjggMCAxLjFNMTcgMTFjLTMuMyAwLTYgMi43LTYgNnMyLjcgNiA2IDYgNi0yLjcgNi02LTIuNy02LTYtNic7XG5cbnZhciBnbWFpbCA9ICdNMy4xNzMgNEwxMiAxMC4xOTQgMjAuNTU2IDRIMy4xNzN6TTEyIDEzLjI5TDEgNS44MDZWMjBoMjJWNS41NDhMMTIgMTMuMjl6JztcblxudmFyIGdvb2dsZVBsdXMgPSAnTTcgMTF2Mi40aDMuOTdjLS4xNiAxLjAyOS0xLjIgMy4wMi0zLjk3IDMuMDItMi4zOSAwLTQuMzQtMS45NzktNC4zNC00LjQyIDAtMi40NCAxLjk1LTQuNDIgNC4zNC00LjQyIDEuMzYgMCAyLjI3LjU4IDIuNzkgMS4wOGwxLjktMS44M0MxMC40NyA1LjY5IDguODkgNSA3IDVjLTMuODcgMC03IDMuMTMtNyA3czMuMTMgNyA3IDdjNC4wNCAwIDYuNzIxLTIuODQgNi43MjEtNi44NCAwLS40Ni0uMDUxLS44MS0uMTExLTEuMTZIN3ptMTcgMHYyaC0zdjNoLTJ2LTNoLTN2LTJoM1Y4aDJ2M2gzeic7XG5cbnZhciBncmFwaEJhciA9ICdNMSAyM1YxMGg1djEzSDF6bTguNSAwVjFoNXYyMmgtNXptOC41IDBWN2g0Ljk5OXYxNkgxOHonO1xuXG52YXIgaGFuZGxlID0gJ00zIDE1aDE4YTEgMSAwIDAgMSAwIDJIM2ExIDEgMCAwIDEgMC0yem0wLTRoMThhMSAxIDAgMCAxIDAgMkgzYTEgMSAwIDAgMSAwLTJ6bTAtNGgxOGExIDEgMCAwIDEgMCAySDNhMSAxIDAgMSAxIDAtMnonO1xuXG52YXIgaGFuZFBvaW50aW5nID0gJ00xNy43NzYsMjIuMzkwIEMxMy43NzUsMjMuOTc4IDkuMjQ2LDIyLjM1OSA3LjIxOSwxOC43NzAgQzcuMDQwLDE4LjUwMyA2Ljg2MCwxOC4yMTggNi42ODgsMTcuOTEwIEM1LjEzMiwxNS4xNjMgMy4wMjgsMTMuNzgyIDIuNTg4LDEzLjU4MSBDMi4xNDksMTMuMzc4IDAuNTk1LDEyLjYxMyAxLjEwMCwxMS42OTIgQzEuMzgxLDExLjE4MCAyLjE2MywxMC44MDEgMi44NzgsMTAuNzI2IEM0LjAwMCwxMC40ODEgNS44OTcsMTEuMDM0IDcuNzcyLDEyLjIyMiBMNC4wNTQsMy40MTkgQzMuNzQxLDIuNjc3IDMuOTg5LDEuODUwIDQuNjA5LDEuMzc5IEM0LjYxMiwxLjM3NiA0LjYxNiwxLjM3MyA0LjYyMSwxLjM2OSBDNC42NzYsMS4zMjcgNC43MzQsMS4yODkgNC43OTYsMS4yNTMgQzQuODEwLDEuMjQ3IDQuODIxLDEuMjM5IDQuODM1LDEuMjMxIEM0LjkwMSwxLjE5NSA0Ljk3MCwxLjE2MCA1LjA0MiwxLjEzMiBDNS4wNDQsMS4xMzEgNS4wNDQsMS4xMzEgNS4wNDUsMS4xMzEgQzUuMDQ1LDEuMTMxIDUuMDQ1LDEuMTMxIDUuMDQ3LDEuMTI5IEM1LjExOSwxLjEwMSA1LjE5MywxLjA3OSA1LjI2NywxLjA2MCBDNS4yODEsMS4wNTcgNS4yOTUsMS4wNTQgNS4zMDksMS4wNDkgQzUuMzgwLDEuMDM1IDUuNDQ5LDEuMDIxIDUuNTE4LDEuMDEzIEM1LjUyNSwxLjAxMyA1LjUyOSwxLjAxMSA1LjUzNCwxLjAxMSBDNi4zMTcsMC45MjggNy4wOTMsMS4zNDcgNy40MDYsMi4wODggTDkuNTkyLDcuMjYxIEM5LjY0Myw2LjYyMyAxMC4wNTUsNi4wMzUgMTAuNzA5LDUuNzc2IEMxMS42MzMsNS40MTAgMTIuNjg5LDUuODM5IDEzLjA2OSw2LjczNCBDMTMuMDcxLDYuNzQyIDEzLjA3NCw2Ljc1MiAxMy4wNzcsNi43NTkgQzEzLjE0Myw2LjEzNiAxMy41NTIsNS41NjUgMTQuMTkxLDUuMzEyIEMxNS4xMTcsNC45NDYgMTYuMTczLDUuMzczIDE2LjU1MSw2LjI3MSBDMTYuNTY3LDYuMzA1IDE2LjU3OCw2LjM0MSAxNi41OTEsNi4zNzkgQzE2LjY4MCw1Ljc4NCAxNy4wNzksNS4yNDkgMTcuNjk1LDUuMDA2IEMxOC42MTksNC42NDAgMTkuNjE5LDQuOTcwIDE5Ljk5OSw1Ljg2NyBMMjAuMDAxLDUuODcyIEMyMC4wMDEsNS44NzIgMjEuMTE1LDguMDM5IDIyLjM2NiwxMS42NTEgQzIyLjQxMywxMS43OTEgMjIuNDU3LDExLjkzMSAyMi40OTUsMTIuMDcyIEMyNC4wMjcsMTYuMTYxIDIxLjk2NywyMC43MjggMTcuNzc2LDIyLjM5MCc7XG5cbnZhciBoZWFydCA9ICdNMjIuMTc4IDEzLjU4M2wtOS4xMzEgOC45OTJhMS41MDIgMS41MDIgMCAwIDEtMi4wOTQgMGwtOS4xMzEtOC45OTJhNi4xOTIgNi4xOTIgMCAwIDEgMC04Ljc3M2MyLjQzOS0yLjQxMyA2LjM5NS0yLjQxMyA4LjgzNCAwTDEyIDYuMTU0bDEuMzQ0LTEuMzQ0YzIuNDM5LTIuNDEzIDYuMzk1LTIuNDEzIDguODM0IDBhNi4xOTIgNi4xOTIgMCAwIDEgMCA4Ljc3Myc7XG5cbnZhciBoZWFydE91dGxpbmUgPSAnTTE3Ljc2IDNhNi4yNjMgNi4yNjMgMCAwIDAtNC40MTYgMS44MDlMMTIgNi4xNTRsLTEuMzQ0LTEuMzQ1QTYuMjY1IDYuMjY1IDAgMCAwIDYuMjM5IDNhNi4yNjIgNi4yNjIgMCAwIDAtNC40MTcgMS44MDkgNi4xOTMgNi4xOTMgMCAwIDAgMCA4Ljc3NGw5LjEzIDguOTkxYTEuNDk5IDEuNDk5IDAgMCAwIDIuMDk1IDBsOS4xMy04Ljk5MWE2LjE5MyA2LjE5MyAwIDAgMCAwLTguNzc0QTYuMjYzIDYuMjYzIDAgMCAwIDE3Ljc2MiAzbTAgMmMxLjEzOSAwIDIuMjA4LjQzNyAzLjAwNSAxLjIyNi43OTYuNzkzIDEuMjM0IDEuODQ4IDEuMjM0IDIuOTdzLS40MzggMi4xNzctMS4yMjUgMi45NjJMMTIgMjAuNzk4bC04Ljc2Ni04LjYzMkMyLjQzOCAxMS4zNzMgMiAxMC4zMTggMiA5LjE5NnMuNDM4LTIuMTc3IDEuMjI4LTIuOTY1QTQuMjUzIDQuMjUzIDAgMCAxIDYuMjM4IDVjMS4xMzkgMCAyLjIwOC40MzcgMy4wMDMgMS4yMjRsMS4zNDQgMS4zNDRMMTIgOC45ODNsMS40MTQtMS40MTUgMS4zMzctMS4zMzdBNC4yNDkgNC4yNDkgMCAwIDEgMTcuNzYgNSc7XG5cbnZhciBoZWFydEJyb2tlbiA9ICdNMTEuOTggMjIuMjVMMS44MiAxMS45NUMtLjI4IDkuODMtLjY1IDYuNCAxLjE4IDQuMDNhNS43NjMgNS43NjMgMCAwIDEgOC43LS41NmwyLjEgMi4xNCAxLjk1LTEuOThjMi4xLTIuMTMgNS40OC0yLjUgNy44Mi0uNjUgMi44IDIuMjMgMi45OSA2LjM1LjU1IDguODJMMTEuOTggMjIuMjV6TTE1LjMgOS41NGMuNC0uNC40LTEuMDYgMC0xLjQ2LS40LS40LTEuMDUtLjQtMS40NSAwTDEyIDkuOTRsLTEuODUtMS44NmMtLjQtLjQtMS4wNS0uNC0xLjQ1IDAtLjQuNC0uNCAxLjA2IDAgMS40NmwxLjg1IDEuODYtMS44NSAxLjg2Yy0uNC40LS40IDEuMDUgMCAxLjQ1LjQuNCAxLjA1LjQxIDEuNDUgMEwxMiAxMi44NWwxLjg1IDEuODZjLjQuNDEgMS4wNS40MSAxLjQ1IDAgLjQtLjQuNC0xLjA1IDAtMS40NWwtMS44NS0xLjg2IDEuODUtMS44NnonO1xuXG52YXIgaW1wcmVzc3VtID0gJ00xMCAxMmMwLTEuMTAzLjg5Ny0yIDItMnMyIC44OTcgMiAyLS44OTcgMi0yIDItMi0uODk3LTItMm0yLTVjLTEuMTAzIDAtMi0uODk3LTItMnMuODk3LTIgMi0yIDIgLjg5NyAyIDJoM2MwLTIuNzU3LTIuMjQzLTUtNS01UzcgMi4yNDMgNyA1YTQuOTggNC45OCAwIDAgMCAxLjQzOCAzLjVBNC45OCA0Ljk4IDAgMCAwIDcgMTJjMCAyLjc1NyAyLjI0MyA1IDUgNSAxLjEwMyAwIDIgLjg5NyAyIDJzLS44OTcgMi0yIDItMi0uODk3LTItMkg3YzAgMi43NTcgMi4yNDMgNSA1IDVzNS0yLjI0MyA1LTVhNC45OCA0Ljk4IDAgMCAwLTEuNDM4LTMuNUE0Ljk4IDQuOTggMCAwIDAgMTcgMTJjMC0yLjc1Ny0yLjI0My01LTUtNSc7XG5cbnZhciBpbmZvQ2lyY2xlID0gJ00xMiA5YTEuNSAxLjUgMCAxIDEtLjAwMS0yLjk5OUExLjUgMS41IDAgMCAxIDEyIDl6bTEuNSA3LjVhMS41IDEuNSAwIDEgMS0zIDB2LTVhMS41IDEuNSAwIDEgMSAzIDB2NXpNMTIgMEM1LjM3MyAwIDAgNS4zNzMgMCAxMnM1LjM3MyAxMiAxMiAxMiAxMi01LjM3MyAxMi0xMlMxOC42MjcgMCAxMiAweic7XG5cbnZhciBrZXkgPSAnTTYgMTQuNUEyLjUwMyAyLjUwMyAwIDAgMSAzLjUgMTJjMC0xLjM3OCAxLjEyMi0yLjUgMi41LTIuNXMyLjUgMS4xMjIgMi41IDIuNS0xLjEyMiAyLjUtMi41IDIuNXptMTgtNC4yNUgxMS43MzlhNiA2IDAgMSAwIDAgMy41SDE4VjE3aDR2LTMuMjVoMnYtMy41eic7XG5cbnZhciBrbm9vcCA9ICdNMTUgMTAuNWMtLjgzIDAtMS41LS42Ny0xLjUtMS41cy42Ny0xLjUgMS41LTEuNSAxLjUuNjcgMS41IDEuNS0uNjcgMS41LTEuNSAxLjVtMCA2Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVzLjY3LTEuNSAxLjUtMS41IDEuNS42NyAxLjUgMS41LS42NyAxLjUtMS41IDEuNW0tNi02Yy0uODMgMC0xLjUtLjY3LTEuNS0xLjVTOC4xNyA3LjUgOSA3LjVzMS41LjY3IDEuNSAxLjUtLjY3IDEuNS0xLjUgMS41bTAgNmMtLjgzIDAtMS41LS42Ny0xLjUtMS41cy42Ny0xLjUgMS41LTEuNSAxLjUuNjcgMS41IDEuNS0uNjcgMS41LTEuNSAxLjVNMTIgMEM1LjM3IDAgMCA1LjM3IDAgMTJzNS4zNyAxMiAxMiAxMiAxMi01LjM3IDEyLTEyUzE4LjYzIDAgMTIgMCc7XG5cbnZhciBsaWdodGJ1bGIgPSAnTTIwIDhjMCAyLjIzLS45MSA0LjI0LTIuMzkgNS43aC4wMmMtLjk5Ljk3LTEuNiAyLjMxLTEuNjMgMy44VjE5SDh2LTEuNWMtLjAzLTEuNS0uNjUtMi44NS0xLjY0LTMuODNBNy45NTUgNy45NTUgMCAwIDEgNCA4YzAtNC40MiAzLjU4LTggOC04czggMy41OCA4IDh6TTggMjIuNVYyMWg4djEuNWMwIC44My0uNjcgMS41LTEuNSAxLjVoLTVjLS44MyAwLTEuNS0uNjctMS41LTEuNXonO1xuXG52YXIgbGlnaHRuaW5nQm9sdENpcmNsZSA9ICdNMTYuNDI0IDEwLjkybC01LjE0OSA4LjU4aC0xLjA0OGwuOTAyLTUuNjI1SDguMDI0YS41MjUuNTI1IDAgMCAxLS40NDktLjc5NkwxMi43MjQgNC41aDEuMDQ4bC0uOSA1LjYyNWgzLjEwMmMuNDEgMCAuNjYyLjQ0NS40NS43OTVNMTIgMEM1LjM3MyAwIDAgNS4zNzIgMCAxMmMwIDYuNjI3IDUuMzczIDEyIDEyIDEyczEyLTUuMzczIDEyLTEyYzAtNi42MjgtNS4zNzMtMTItMTItMTInO1xuXG52YXIgbGluayA9ICdNMjEgMTUuMDVjMS4xIDAgMiAuOSAyIDJWMjFjMCAxLjEtLjkgMi0yIDJIM2MtMS4xIDAtMi0uOS0yLTJWM2MwLTEuMS45LTIgMi0yaDRhMiAyIDAgMSAxIDAgNEg1djE0aDE0di0xLjk1YzAtMS4xLjktMiAyLTJ6TTEyIDE0Yy0uNTEgMC0xLjAyLS4yLTEuNDEtLjU5LS43OS0uNzgtLjc5LTIuMDQgMC0yLjgyTDE2LjE2IDUgMTQgNS4wMWMtMS4xIDAtMi0uOS0yLTIgMC0xLjExLjg5LTIgMi0yTDIwLjk5IDFoMnYybC4wMSA3YTIgMiAwIDEgMS00IDBWNy44M2wtNS41OSA1LjU4Yy0uMzkuMzktLjkuNTktMS40MS41OXonO1xuXG52YXIgbG9jYXRpb24gPSAnTTEyIDQuNWMxLjY2IDAgMyAxLjM0IDMgM3MtMS4zNCAzLTMgMy0zLTEuMzQtMy0zIDEuMzQtMyAzLTNtNy41IDNDMTkuNSAzLjM2IDE2LjE0IDAgMTIgMCA3Ljg2IDAgNC41IDMuMzYgNC41IDcuNWMwIDEuMy4zNiAyLjUuOTQgMy41Nkg1LjRMMTIgMjRsNi42LTEyLjk0aC0uMDRjLjU4LTEuMDYuOTQtMi4yNi45NC0zLjU2JztcblxudmFyIGxvY2sgPSAnTTggMTBWN2MwLTIuMjA2IDEuNzk0LTQgNC00czQgMS43OTQgNCA0djNIOHptMTEgLjAxN1Y3YzAtMy44Ni0zLjE0MS03LTctN1M1IDMuMTQgNSA3djMuMDE3YTguNjk4IDguNjk4IDAgMCAwLTEuNzUgNS4yMzMgOC43NSA4Ljc1IDAgMSAwIDE3LjUgMEE4LjY5OCA4LjY5OCAwIDAgMCAxOSAxMC4wMTd6JztcblxudmFyIGxvZ29MYXJnZSA9ICdNMTguNjU2IDExLjE5NmwtMy4zMzMgMi41NzMgMS4yNSA0LjA4OWMuMjUuODE3LS42ODcgMS40NzctMS4zNTkuOTU4TDEyIDE2LjMzNGwtMy4yMTQgMi40ODJjLS42NzMuNTE5LTEuNjA5LS4xNDEtMS4zNTktLjk1OGwxLjI1LTQuMDktMy4zMzQtMi41NzJjLS42Ni0uNTExLS4zMDQtMS41NzguNTMtMS41NzhoNC4wNzNMMTEuMTcgNS42MmMuMjUyLS44MjYgMS40MS0uODI2IDEuNjYyIDBsMS4yMjIgMy45OThoNC4wNzVjLjgzMyAwIDEuMTkgMS4wNjcuNTI4IDEuNTc4ek0yMS43NSAzLjVIMi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjV6bTAgMTkuNUgyLjI1YTEuMjUgMS4yNSAwIDAgMSAwLTIuNWgxOS41YTEuMjUgMS4yNSAwIDAgMSAwIDIuNXonO1xuXG52YXIgbG9nb1NtYWxsID0gJ00xNS44MDQgMTQuNTRMMTMuOSAxNi4wMWwuNzE0IDIuMzM3Yy4xNDMuNDY3LS4zOTIuODQ1LS43NzcuNTQ3TDEyIDE3LjQ3N2wtMS44MzcgMS40MThjLS4zODQuMjk3LS45Mi0uMDgtLjc3Ni0uNTQ3bC43MTQtMi4zMzctMS45MDQtMS40N2MtLjM3OC0uMjkzLS4xNzQtLjkwMi4zLS45MDJoMi4zMjlsLjctMi4yODVhLjQ5NS40OTUgMCAwIDEgLjk0OSAwbC42OTkgMi4yODVoMi4zMjhjLjQ3NiAwIC42OC42MS4zMDIuOTAyek0yMS43NSA5LjVIMi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjV6bTAgMTMuNUgyLjI1YTEuMjUgMS4yNSAwIDAgMSAwLTIuNWgxOS41YTEuMjUgMS4yNSAwIDAgMSAwIDIuNXonO1xuXG52YXIgbG9nb3V0ID0gJ00xMiAxNGEyIDIgMCAwIDAgMi0yVjNhMiAyIDAgMCAwLTQgMHY5YTIgMiAwIDAgMCAyIDJtMTEtMmMwIDIuOTM4LTEuMTQ0IDUuNzAxLTMuMjIyIDcuNzc4QTEwLjkyNSAxMC45MjUgMCAwIDEgMTIgMjNhMTAuOTI1IDEwLjkyNSAwIDAgMS03Ljc3OC0zLjIyMkExMC45MjUgMTAuOTI1IDAgMCAxIDEgMTJjMC0yLjkzOCAxLjE0NC01LjcwMSAzLjIyMi03Ljc3OEEyIDIgMCAwIDEgNy4wNSA3LjA1MSA2Ljk1MiA2Ljk1MiAwIDAgMCA1IDEyYzAgMS44Ny43MjggMy42MjcgMi4wNSA0Ljk0OUE2Ljk1MyA2Ljk1MyAwIDAgMCAxMiAxOWMxLjg3IDAgMy42MjctLjcyOCA0Ljk0OS0yLjA1QTYuOTUzIDYuOTUzIDAgMCAwIDE5IDEyYzAtMS44Ny0uNzI4LTMuNjI3LTIuMDUtNC45NDlhMiAyIDAgMSAxIDIuODI4LTIuODI5QTEwLjkyNSAxMC45MjUgMCAwIDEgMjMgMTInO1xuXG52YXIgbWFyZ2luc0xhcmdlID0gJ00xOC43NSAxQTQuMjU1IDQuMjU1IDAgMCAxIDIzIDUuMjV2MTMuNUE0LjI1NSA0LjI1NSAwIDAgMSAxOC43NSAyM0g1LjI1QTQuMjU1IDQuMjU1IDAgMCAxIDEgMTguNzVWNS4yNUE0LjI1NSA0LjI1NSAwIDAgMSA1LjI1IDFoMTMuNXpNNS41IDE4LjVoMTN2LTEzaC0xM3YxM3ptOS45Ny0xLjk3bC0xLjUtMS41LTEuNDcgMS40N3YtNGg0bC0xLjQ3IDEuNDcgMS41IDEuNS0xLjA2IDEuMDZ6TTcuNSAxMS41bDEuNDctMS40Ny0xLjUtMS41IDEuMDYtMS4wNiAxLjUgMS41TDExLjUgNy41djRoLTR6JztcblxudmFyIG1hcmdpbnNNZWRpdW0gPSAnTTcuNTMgNi40N2wxLjUgMS41TDEwLjUgNi41djRoLTRsMS40Ny0xLjQ3LTEuNS0xLjUgMS4wNi0xLjA2em05Ljk3IDcuMDNsLTEuNDcgMS40NyAxLjUgMS41LTEuMDYgMS4wNi0xLjUtMS41LTEuNDcgMS40N3YtNGg0em0yIDUuNzVhLjI1LjI1IDAgMCAxLS4yNS4yNUg0Ljc1YS4yNS4yNSAwIDAgMS0uMjUtLjI1VjQuNzVhLjI1LjI1IDAgMCAxIC4yNS0uMjVoMTQuNWEuMjUuMjUgMCAwIDEgLjI1LjI1djE0LjV6TTE5LjI1IDFINC43NUEzLjc1NCAzLjc1NCAwIDAgMCAxIDQuNzV2MTQuNUEzLjc1NCAzLjc1NCAwIDAgMCA0Ljc1IDIzaDE0LjVBMy43NTQgMy43NTQgMCAwIDAgMjMgMTkuMjVWNC43NUEzLjc1NCAzLjc1NCAwIDAgMCAxOS4yNSAxeic7XG5cbnZhciBtYXJnaW5zU21hbGwgPSAnTTE4LjUgMTQuNWwtMS40NyAxLjQ3IDEuNSAxLjUtMS4wNiAxLjA2LTEuNS0xLjUtMS40NyAxLjQ3di00aDR6TTYuNTMgNS40N2wxLjUgMS41TDkuNSA1LjV2NGgtNGwxLjQ3LTEuNDctMS41LTEuNSAxLjA2LTEuMDZ6TTIwLjUgMTkuNzVhLjc1Ljc1IDAgMCAxLS43NS43NUg0LjI1YS43NS43NSAwIDAgMS0uNzUtLjc1VjQuMjVhLjc1Ljc1IDAgMCAxIC43NS0uNzVoMTUuNWEuNzUuNzUgMCAwIDEgLjc1Ljc1djE1LjV6TTE5Ljc1IDFINC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxIDQuMjV2MTUuNUEzLjI1NCAzLjI1NCAwIDAgMCA0LjI1IDIzaDE1LjVBMy4yNTQgMy4yNTQgMCAwIDAgMjMgMTkuNzVWNC4yNUEzLjI1NCAzLjI1NCAwIDAgMCAxOS43NSAxeic7XG5cbnZhciBtYXhpbWl6ZSA9ICdNMTEgMi4yNWMwIC42OS0uNTYgMS4yNS0xLjI1IDEuMjVINS4yNjhsNS4zNjYgNS4zNjZhMS4yNSAxLjI1IDAgMCAxLTEuNzY4IDEuNzY4TDMuNSA1LjI2OFY5Ljc1YTEuMjUgMS4yNSAwIDAgMS0yLjUgMFYxaDguNzVjLjY5IDAgMS4yNS41NiAxLjI1IDEuMjV6TTIxLjc1IDEzYy42OSAwIDEuMjUuNTYgMS4yNSAxLjI1VjIzaC04Ljc1YTEuMjUgMS4yNSAwIDAgMSAwLTIuNWg0LjQ4MmwtNS4zNjYtNS4zNjZhMS4yNSAxLjI1IDAgMCAxIDEuNzY4LTEuNzY4bDUuMzY2IDUuMzY2VjE0LjI1YzAtLjY5LjU2LTEuMjUgMS4yNS0xLjI1eic7XG5cbnZhciBtZWdhcGhvbmUgPSAnTTE0IDE3LjVjMCAxLjM3OC0xLjEyMiAyLjUtMi41IDIuNUEyLjUwMyAyLjUwMyAwIDAgMSA5IDE3LjVWMTdoNXYuNXptOC45NDctMS44N0wxOC43MDEgMi43MTJhMS4wMjIgMS4wMjIgMCAwIDAtMS41NjYtLjUyMWwtMTUuNyAxMS4yNGMtLjM3LjI2NC0uNTI1Ljc0NC0uMzgyIDEuMTc5bC41NTEgMS42NzhjLjE0LjQyNS41MzIuNzEyLjk3NC43MTJIN3YuNWE0LjUgNC41IDAgMCAwIDkgMFYxN2g1Ljk3M2MuNyAwIDEuMTk1LS42OTYuOTc0LTEuMzd6JztcblxudmFyIG1lbnUgPSAnTTIxLjUgOS41YzEuMzggMCAyLjUgMS4xMyAyLjUgMi41YTIuNSAyLjUgMCAwIDEtMi41IDIuNWgtMTlDMS4xMyAxNC41IDAgMTMuMzggMCAxMmMwLTEuMzcgMS4xMy0yLjUgMi41LTIuNWgxOXptLTE5LTNDMS4xMyA2LjUgMCA1LjM4IDAgNGMwLTEuMzcgMS4xMy0yLjUgMi41LTIuNWgxOUMyMi44OCAxLjUgMjQgMi42MyAyNCA0YTIuNSAyLjUgMCAwIDEtMi41IDIuNWgtMTl6bTE5IDExYzEuMzggMCAyLjUgMS4xMyAyLjUgMi41YTIuNSAyLjUgMCAwIDEtMi41IDIuNWgtMTlDMS4xMyAyMi41IDAgMjEuMzggMCAyMGMwLTEuMzcgMS4xMy0yLjUgMi41LTIuNWgxOXonO1xuXG52YXIgbWluaW1pemUgPSAnTTEgOS43NWMwLS42OS41Ni0xLjI1IDEuMjUtMS4yNWg0LjQ4MkwxLjM2NiAzLjEzNGExLjI1IDEuMjUgMCAwIDEgMS43NjgtMS43NjhMOC41IDYuNzMyVjIuMjVhMS4yNSAxLjI1IDAgMCAxIDIuNSAwVjExSDIuMjVDMS41NiAxMSAxIDEwLjQ0IDEgOS43NXpNMTQuMjUgMjNjLS42OSAwLTEuMjUtLjU2LTEuMjUtMS4yNVYxM2g4Ljc1YTEuMjUgMS4yNSAwIDAgMSAwIDIuNWgtNC40ODJsNS4zNjYgNS4zNjZhMS4yNSAxLjI1IDAgMCAxLTEuNzY4IDEuNzY4TDE1LjUgMTcuMjY4djQuNDgyYzAgLjY5LS41NiAxLjI1LTEuMjUgMS4yNXonO1xuXG52YXIgbW92ZSA9ICdNMTQuMyAxOC4xN2ExLjI1IDEuMjUgMCAwIDEgMS43NyAwYy40OS40OS40OSAxLjI4IDAgMS43NkwxMiAyNGwtNC4wNy00LjA3Yy0uNDgtLjQ4LS40OC0xLjI3IDAtMS43NmExLjI1IDEuMjUgMCAwIDEgMS43NyAwbDEuMDUgMS4wNHYtMy45NmExLjI1IDEuMjUgMCAwIDEgMi41IDB2My45NmwxLjA1LTEuMDR6bS05LjUxLTQuOTJsMS4wNCAxLjA1Yy40OS40OS40OSAxLjI4IDAgMS43Ny0uNDguNDgtMS4yOC40OC0xLjc2IDBMMCAxMmw0LjA3LTQuMDdjLjQ4LS40OCAxLjI4LS40OCAxLjc2IDAgLjQ5LjQ5LjQ5IDEuMjggMCAxLjc3bC0xLjA0IDEuMDVoMy45NmExLjI1IDEuMjUgMCAwIDEgMCAyLjVINC43OXptMTUuMTQtNS4zMkwyNCAxMmwtNC4wNyA0LjA3Yy0uNDguNDgtMS4yNy40OC0xLjc2IDBhMS4yNSAxLjI1IDAgMCAxIDAtMS43N2wxLjA0LTEuMDVoLTMuOTZhMS4yNSAxLjI1IDAgMCAxIDAtMi41aDMuOTZMMTguMTcgOS43YTEuMjUgMS4yNSAwIDAgMSAwLTEuNzdjLjQ5LS40OCAxLjI4LS40OCAxLjc2IDB6TTkuNyA1LjgzYy0uNDkuNDktMS4yOC40OS0xLjc3IDAtLjQ4LS40OS0uNDgtMS4yOCAwLTEuNzZMMTIgMGw0LjA3IDQuMDdjLjQ5LjQ4LjQ5IDEuMjcgMCAxLjc2cy0xLjI4LjQ5LTEuNzcgMGwtMS4wNS0xLjA0djMuOTZhMS4yNSAxLjI1IDAgMCAxLTIuNSAwVjQuNzlMOS43IDUuODN6JztcblxudmFyIG11dGUgPSAnTTUuMDAsNy45NCBMNS4wMCw3Ljk2IEwxMi4wMCwxLjAwIEwxMi4wMCwyMy4wMCBMNS4wMCwxNi45MSBMNS4wMCwxNi45NCBMMi4wMCwxNi45NCBDMC45MCwxNi45NCAwLjAwLDE2LjA0IDAuMDAsMTQuOTQgTDAuMDAsOS45NCBDMC4wMCw4LjgzIDAuOTAsNy45NCAyLjAwLDcuOTQgTDUuMDAsNy45NCBaIE0yMy42MywxNC4xMiBDMjQuMTIsMTQuNjAgMjQuMTIsMTUuMzkgMjMuNjMsMTUuODggQzIzLjE1LDE2LjM3IDIyLjM1LDE2LjM3IDIxLjg3LDE1Ljg4IEwxOS43NSwxMy43NyBMMTcuNjMsMTUuODggQzE3LjE1LDE2LjM3IDE2LjM1LDE2LjM3IDE1Ljg3LDE1Ljg4IEMxNS4zOCwxNS4zOSAxNS4zOCwxNC42MCAxNS44NywxNC4xMiBMMTcuOTgsMTIuMDAgTDE1Ljg3LDkuODggQzE1LjM4LDkuMzkgMTUuMzgsOC42MCAxNS44Nyw4LjEyIEMxNi4zNSw3LjYzIDE3LjE1LDcuNjMgMTcuNjMsOC4xMiBMMTkuNzUsMTAuMjMgTDIxLjg2LDguMTIgQzIyLjM1LDcuNjMgMjMuMTUsNy42MyAyMy42Myw4LjEyIEMyNC4xMiw4LjYwIDI0LjEyLDkuNDAgMjMuNjMsOS44OCBMMjEuNTIsMTIuMDAgTDIzLjYzLDE0LjEyIFonO1xuXG52YXIgb3ZlcmxheVRleHQgPSAnTTIwIDFhMyAzIDAgMCAxIDMgM3YxNmEzIDMgMCAwIDEtMyAzSDRhMyAzIDAgMCAxLTMtM1Y0YTMgMyAwIDAgMSAzLTNoMTZ6bS02LjcxOCA0LjEzM2ExLjQwMyAxLjQwMyAwIDAgMC0yLjU2NCAwbC01LjU5NyAxMi42YTEuMzk2IDEuMzk2IDAgMCAwIC43MTQgMS44NDYgMS40MDEgMS40MDEgMCAwIDAgMS44NS0uNzExTDguNTYgMTYuOWg2Ljg4MmwuODc0IDEuOTY3YTEuNDA0IDEuNDA0IDAgMCAwIDEuODUxLjcxIDEuMzk3IDEuMzk3IDAgMCAwIC43MTMtMS44NDVsLTUuNTk3LTEyLjZ6TTkuODAzIDE0LjFMMTIgOS4xNTVsMi4xOTcgNC45NDVIOS44MDN6JztcblxudmFyIHBhdXNlID0gJ003IDBjMS42NSAwIDMgMS4zNSAzIDN2MThjMCAxLjY1LTEuMzUgMy0zIDNzLTMtMS4zNS0zLTNWM2MwLTEuNjUgMS4zNS0zIDMtM3ptMTAgMGMxLjY1IDAgMyAxLjM1IDMgM3YxOGMwIDEuNjUtMS4zNSAzLTMgM3MtMy0xLjM1LTMtM1YzYzAtMS42NSAxLjM1LTMgMy0zeic7XG5cbnZhciBwZW9wbGUgPSAnTTggMTFhNC41IDQuNSAwIDEgMSAwLTkgNC41IDQuNSAwIDAgMSAwIDl6bTEwIDNjMy4zMTQgMCA2IDIuNzEzIDYgNi4wNjFWMjJIMHYtMS45MTlDMCAxNS42MTggMy41ODIgMTIgOCAxMmMyLjYxNCAwIDQuOTI3IDEuMjcyIDYuMzg3IDMuMjNBNS45MjcgNS45MjcgMCAwIDEgMTggMTR6bTAtMWEzLjI1IDMuMjUgMCAxIDEgMC02LjUgMy4yNSAzLjI1IDAgMCAxIDAgNi41eic7XG5cbnZhciBQZXJzb25TdmcgPSAnTTEyIDEyYzUuNTIzIDAgMTAgNC40NzcgMTAgMTB2Mkgydi0yYzAtNS41MjMgNC40NzctMTAgMTAtMTB6bTAtMWE1LjUgNS41IDAgMSAxIDAtMTEgNS41IDUuNSAwIDEgMSAwIDExeic7XG5cbnZhciBwZXJzb25BZGQgPSAnTTE2LjUgMTJhNy41IDcuNSAwIDAgMSA3LjUgNy41VjIxSDl2LTEuNWE3LjUgNy41IDAgMCAxIDcuNS03LjV6bTAtMWE0IDQgMCAxIDEgMC04IDQgNCAwIDAgMSAwIDh6bS03LjI1IDFINi41djIuNzVhMS4yNSAxLjI1IDAgMCAxLTIuNSAwVjEySDEuMjVhMS4yNSAxLjI1IDAgMCAxIDAtMi41SDRWNi43NWExLjI1IDEuMjUgMCAwIDEgMi41IDBWOS41aDIuNzVhMS4yNSAxLjI1IDAgMCAxIDAgMi41eic7XG5cbnZhciBwaG9uZSA9ICdNMjEuNyAyMS43YTQuNSA0LjUgMCAwMS00LjA5IDEuMjJBMjAuMjkgMjAuMjkgMCAwMTEuMTEgNi41MSA0LjUgNC41IDAgMDE4LjcgMi4zMiA0LjUgNC41IDAgMDE2Ljg2IDkuOGExNS44NyAxNS44NyAwIDAwNy4zOCA3LjM4IDQuNDYgNC40NiAwIDAxNy40NS0xLjgzIDQuNSA0LjUgMCAwMTAgNi4zNic7XG5cbnZhciBwaW4gPSAnTTE4IDEzLjVjMC0yLjIyLTEuMjEtNC4xNS0zLTUuMTlWMi40NUEyLjUgMi41IDAgMCAwIDE3IDBIN2EyLjUgMi41IDAgMCAwIDIgMi40NXY1Ljg2Yy0xLjc5IDEuMDQtMyAyLjk3LTMgNS4xOWg1djguNDZMMTIgMjRsMS0yLjA0VjEzLjVoNXonO1xuXG52YXIgcGluSGlkZSA9ICdNOS4xMyA2LjM3Yy40OS40OC40OSAxLjI3IDAgMS43NmwtMi42MSAyLjYyIDIuNjEgMi42MmMuNDkuNDguNDkgMS4yNyAwIDEuNzYtLjQ4LjQ5LTEuMjcuNDktMS43NiAwbC0yLjYyLTIuNjEtMi42MiAyLjYxYy0uNDguNDktMS4yOC40OS0xLjc2IDAtLjQ5LS40OS0uNDktMS4yOCAwLTEuNzZsMi42MS0yLjYyTC4zNyA4LjEzYy0uNDktLjQ5LS40OS0xLjI4IDAtMS43Ni40OC0uNDkgMS4yOC0uNDkgMS43NiAwbDIuNjIgMi42MSAyLjYyLTIuNjFjLjQ5LS40OSAxLjI4LS40OSAxLjc2IDB6TTIwLjUgOC42OWMxLjQ5Ljg3IDIuNSAyLjQ2IDIuNSA0LjMxaC00djcuOTZMMTggMjNsLTEtMi4wNFYxM2gtNGMwLTEuODUgMS4wMS0zLjQ0IDIuNS00LjMxVjIuOTNjLS44Ni0uMjItMS41LTEtMS41LTEuOTNoOGMwIC45My0uNjQgMS43MS0xLjUgMS45M3Y1Ljc2eic7XG5cbnZhciBwaW50ZXJlc3QgPSAnTTAgMTJjMCA1LjEyMyAzLjIxMSA5LjQ5NyA3LjczIDExLjIxOC0uMTEtLjkzNy0uMjI3LTIuNDgyLjAyNS0zLjU2Ni4yMTctLjkzMiAxLjQwMS01LjkzOCAxLjQwMS01LjkzOHMtLjM1Ny0uNzE1LS4zNTctMS43NzRjMC0xLjY2Ljk2Mi0yLjkgMi4xNjEtMi45IDEuMDIgMCAxLjUxMi43NjUgMS41MTIgMS42ODIgMCAxLjAyNS0uNjUzIDIuNTU3LS45OSAzLjk3OC0uMjgxIDEuMTg5LjU5NyAyLjE1OSAxLjc2OSAyLjE1OSAyLjEyMyAwIDMuNzU2LTIuMjM5IDMuNzU2LTUuNDcxIDAtMi44NjEtMi4wNTYtNC44Ni00Ljk5MS00Ljg2LTMuMzk4IDAtNS4zOTMgMi41NDktNS4zOTMgNS4xODQgMCAxLjAyNy4zOTUgMi4xMjcuODg5IDIuNzI2YS4zNi4zNiAwIDAgMSAuMDgzLjM0M2MtLjA5MS4zNzgtLjI5MyAxLjE4OS0uMzMyIDEuMzU1LS4wNTMuMjE4LS4xNzMuMjY1LS40LjE1OS0xLjQ5Mi0uNjk0LTIuNDI0LTIuODc1LTIuNDI0LTQuNjI3IDAtMy43NjkgMi43MzctNy4yMjkgNy44OTItNy4yMjkgNC4xNDQgMCA3LjM2NSAyLjk1MyA3LjM2NSA2Ljg5OSAwIDQuMTE3LTIuNTk1IDcuNDMxLTYuMTk5IDcuNDMxLTEuMjExIDAtMi4zNDgtLjYzLTIuNzM4LTEuMzczIDAgMC0uNTk5IDIuMjgyLS43NDQgMi44NC0uMjgyIDEuMDg0LTEuMDY0IDIuNDU2LTEuNTQ5IDMuMjM1QzkuNTg0IDIzLjgxNSAxMC43NyAyNCAxMiAyNGM2LjYyNyAwIDEyLTUuMzczIDEyLTEyUzE4LjYyNyAwIDEyIDAgMCA1LjM3MyAwIDEyJztcblxudmFyIHBsYXkgPSAnTTIwLjYyIDkuNDhMNi42My40OEM0LjYzLS44IDIgLjYzIDIgM3YxOGMwIDIuMzcgMi42MyAzLjggNC42MyAyLjUybDEzLjk5LTljMS44NC0xLjE4IDEuODQtMy44NiAwLTUuMDQnO1xuXG52YXIgcXVlc3Rpb25NYXJrID0gJ00xNC4zNCAyMS4yYzAgMS41Ny0xLjE5IDIuOC0yLjc4IDIuOC0xLjU4IDAtMi43Ny0xLjIzLTIuNzctMi44IDAtMS41NyAxLjE5LTIuOCAyLjc3LTIuOCAxLjU5IDAgMi43OCAxLjIzIDIuNzggMi44bS0yLjUzLTEwLjg4YzEuNDEtMS4yMyAzLjMtMi4wNSAzLjMtMy44NyAwLTEuNDUtMS4yNC0yLjM2LTIuOTUtMi4zNi0yLjEyIDAtMy41MiAxLjQ4LTMuNTUgMy40M0gzLjc1QzMuODggMy4zIDYuOTYgMCAxMi4zNCAwYzQuODYgMCA3LjkxIDIuNTIgNy45MSA2LjMyIDAgMi4zNi0xLjA5IDMuODEtMi4zIDQuNzgtMS42OCAxLjMzLTIuODQgMS44OS0zLjQ5IDIuNjEtLjUuNTctLjYyIDEuMDQtLjY1IDEuOTVIOS40NWMwLTIuNjQuNjUtMy45IDIuMzYtNS4zNCc7XG5cbnZhciByZWZyZXNoID0gJ000LjQ2NSA0SDIuNWExLjUgMS41IDAgMSAxIDAtM2g3djcuNWExLjUgMS41IDAgMSAxLTMgMFY2LjIxNkM0Ljk0MiA3LjcwNSA0IDkuNzgzIDQgMTJjMCA0LjQxMSAzLjU4OSA4IDggOHM4LTMuNTg5IDgtOGE3Ljk3NiA3Ljk3NiAwIDAgMC03LjE1Ni03Ljk1NiAxLjUgMS41IDAgMCAxIC4zMTItMi45ODNBMTAuOTY3IDEwLjk2NyAwIDAgMSAyMyAxMmMwIDYuMDY1LTQuOTM0IDExLTExIDExLTYuMDY1IDAtMTEtNC45MzUtMTEtMTEgMC0zLjA2OCAxLjI5OS01Ljk1MSAzLjQ2NS04JztcblxudmFyIHJlbW92ZSA9ICdNMTcuNzUgMTMuMjVINi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTEuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjVNMTIgMEM1LjM3IDAgMCA1LjM3IDAgMTJzNS4zNyAxMiAxMiAxMiAxMi01LjM3IDEyLTEyUzE4LjYzIDAgMTIgMCc7XG5cbnZhciByZW9yZGVySW1hZ2VzID0gJ00yMiA0LjI1YTEuMjUgMS4yNSAwIDAgMC0yLjUgMHYxLjYxOEMxNy40NzMgMy40NjUgMTQuNDkzIDIgMTEuMjk5IDIgNy42MDYgMiA0LjIwNSAzLjg4NyAyLjIwMSA3LjA0OGExLjI5MiAxLjI5MiAwIDAgMCAuMzc1IDEuNzY5IDEuMjQzIDEuMjQzIDAgMCAwIDEuNzM5LS4zODFjMS41MzktMi40MjcgNC4xNS0zLjg3NiA2Ljk4NC0zLjg3NiAyLjQzNiAwIDQuNzA2IDEuMTE1IDYuMjYxIDIuOTRoLTEuMzFhMS4yNSAxLjI1IDAgMCAwIDAgMi41SDIyVjQuMjV6TTE5IDEyYTEgMSAwIDAgMC0xIDF2N2ExIDEgMCAwIDAgMSAxaDRhMSAxIDAgMCAwIDEtMXYtN2ExIDEgMCAwIDAtMS0xaC00em0tOCAwYTEgMSAwIDAgMC0xIDF2N2ExIDEgMCAwIDAgMSAxaDRhMSAxIDAgMCAwIDEtMXYtN2ExIDEgMCAwIDAtMS0xaC00em0tNC0xSDFhMSAxIDAgMCAwLTEgMXY5YTEgMSAwIDAgMCAxIDFoNmExIDEgMCAwIDAgMS0xdi05YTEgMSAwIDAgMC0xLTF6JztcblxudmFyIHJlcGxhY2UgPSAnTTkuNzUgMjAuNWgtMmMtLjk2NSAwLTEuNzUtLjc4NS0xLjc1LTEuNzV2LTFsLjQzNy40MzdhMS4yNDggMS4yNDggMCAwIDAgMS43NjggMCAxLjI1IDEuMjUgMCAwIDAgMC0xLjc2OEw0Ljc4NiAxM2wtMy40MiAzLjQxOWExLjI1IDEuMjUgMCAwIDAgMS43NjggMS43NjhsLjM2Ni0uMzY2di45MjlBNC4yNTUgNC4yNTUgMCAwIDAgNy43NSAyM2gyYTEuMjUgMS4yNSAwIDAgMCAwLTIuNXptNC41LTE3aDJjLjk2NSAwIDEuNzUuNzg1IDEuNzUgMS43NXYxbC0uNDM4LS40MzdhMS4yNSAxLjI1IDAgMSAwLTEuNzY3IDEuNzY4TDE5LjIxNCAxMWwzLjQyLTMuNDE5YTEuMjUgMS4yNSAwIDAgMC0xLjc2OC0xLjc2OGwtLjM2Ni4zNjZWNS4yNUE0LjI1NSA0LjI1NSAwIDAgMCAxNi4yNSAxaC0yYTEuMjUgMS4yNSAwIDAgMCAwIDIuNXptMS4yNSAxN2g1di01aC01djV6TTIzIDE1djZhMiAyIDAgMCAxLTIgMmgtNmEyIDIgMCAwIDEtMi0ydi02YTIgMiAwIDAgMSAyLTJoNmEyIDIgMCAwIDEgMiAyek0xMSAzdjZhMiAyIDAgMCAxLTIgMkgzYTIgMiAwIDAgMS0yLTJWM2EyIDIgMCAwIDEgMi0yaDZhMiAyIDAgMCAxIDIgMnonO1xuXG52YXIgcmVwb3J0ID0gJ003LjkxIDE4Ljg5QTguMDEzIDguMDEzIDAgMCAwIDE4Ljg5IDcuOTFMNy45MSAxOC44OXptLTIuODItMi44M0wxNi4wNiA1LjA5QTguMDE1IDguMDE1IDAgMCAwIDUuMDkgMTYuMDZ6TTEyIDI0QzUuMzcgMjQgMCAxOC42MyAwIDEyUzUuMzcgMCAxMiAwczEyIDUuMzcgMTIgMTItNS4zNyAxMi0xMiAxMnonO1xuXG52YXIgcm90YXRlID0gJ00xMS4wMDMgOS45NmMxLjEwNSAwIDIgLjg5OSAyIDIuMDA2djkuMDI4YTIuMDA0IDIuMDA0IDAgMCAxLTIgMi4wMDZIMi4wMDFDLjg5NiAyMyAwIDIyLjEwMiAwIDIwLjk5NHYtOS4wMjhDMCAxMC44Ni44OTYgOS45NiAyIDkuOTZoOS4wMDN6bTEyLjYzIDEuODcyYy40ODkuNDkuNDg5IDEuMjgzIDAgMS43NzNsLTMuODg1IDMuODk2LTMuODc4LTMuODk3YTEuMjU2IDEuMjU2IDAgMCAxIC4wMDItMS43NzMgMS4yNDggMS4yNDggMCAwIDEgMS43NjguMDAybC44NjUuODdWNy4yN2EzLjc2IDMuNzYgMCAwIDAtMy43NS0zLjc2Mkg3LjI1MWMtLjY5IDAtMS4yNS0uNTYyLTEuMjUtMS4yNTQgMC0uNjkzLjU2LTEuMjU0IDEuMjUtMS4yNTRoNy41MDJjMy40NDcgMCA2LjI1MiAyLjgxMiA2LjI1MiA2LjI3djUuNDI0bC44Ni0uODYyYy40ODktLjQ5IDEuMjgtLjQ5IDEuNzY4IDB6JztcblxudmFyIHNjYWxlID0gJ00yMC41IDYuNzVWNS4yNjhMMTMuNzY4IDEybDYuNzMyIDYuNzMyVjE3LjI1YTEuMjUgMS4yNSAwIDAgMSAyLjUgMFYyM2gtNS43NWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMS40ODJMMTIgMTMuNzY4IDUuMjY4IDIwLjVINi43NWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMXYtNS43NWExLjI1IDEuMjUgMCAwIDEgMi41IDB2MS40ODJMMTAuMjMyIDEyIDMuNSA1LjI2OFY2Ljc1YTEuMjUgMS4yNSAwIDAgMS0yLjUgMFYxaDUuNzVhMS4yNSAxLjI1IDAgMCAxIDAgMi41SDUuMjY4TDEyIDEwLjIzMiAxOC43MzIgMy41SDE3LjI1YTEuMjUgMS4yNSAwIDAgMSAwLTIuNUgyM3Y1Ljc1YTEuMjUgMS4yNSAwIDAgMS0yLjUgMCc7XG5cbnZhciBzZWFyY2ggPSAnTTEwIDE2Yy0zLjMxIDAtNi0yLjY5LTYtNnMyLjY5LTYgNi02IDYgMi42OSA2IDYtMi42OSA2LTYgNm0xMy4xMiAyLjg4bC00LjI2LTQuMjZBOS44NDIgOS44NDIgMCAwIDAgMjAgMTBjMC01LjUyLTQuNDgtMTAtMTAtMTBTMCA0LjQ4IDAgMTBzNC40OCAxMCAxMCAxMGMxLjY3IDAgMy4yNC0uNDEgNC42Mi0xLjE0bDQuMjYgNC4yNmEzIDMgMCAwIDAgNC4yNCAwIDMgMyAwIDAgMCAwLTQuMjQnO1xuXG52YXIgc2VjdXJpdHkgPSAnTTIxIDkuNTg3YzAgNi4wNi0zLjcyMSAxMS4yNDYtOSAxMy40MTMtNS4yNzktMi4xNjctOS03LjM1My05LTEzLjQxM1YzYTIgMiAwIDAgMSAyLTJoMTRhMiAyIDAgMCAxIDIgMnY2LjU4N3onO1xuXG52YXIgc2VuZCA9ICdNLjQ2MSAyLjQyN0wuNDMgMi40NmExLjQ3NCAxLjQ3NCAwIDAgMC0uMjgyIDEuNjhMMyAxMC41IDE2IDEyIDMgMTMuNS4xNDcgMTkuODZhMS40NzQgMS40NzQgMCAwIDAgLjI3NyAxLjY3NGwuMDQxLjA0MmMuNDAzLjM4OCAxLjAxMy41NiAxLjYyNi4zbDIwLjk5LTguNDkzYy4xODUtLjA3OC4zNDMtLjE4NC40NzItLjMxbC4wMzQtLjAzM2MuNjg2LS43MS41MTctMS45OTQtLjUwNy0yLjQyM0wyLjA5IDIuMTIzQTEuNTIgMS41MiAwIDAgMCAxLjQ5NiAyYy0uMzk4IDAtLjc2NC4xNjQtMS4wMzUuNDI3eic7XG5cbnZhciBzaGFyZSA9ICdNMjEgMTRjMS4xIDAgMiAuOSAyIDJ2NmMwIDEuMS0uOSAyLTIgMkgzYy0xLjEgMC0yLS45LTItMnYtNmMwLTEuMS45LTIgMi0yczIgLjkgMiAydjRoMTR2LTRjMC0xLjEuOS0yIDItMnpNOC44MiA4Ljg0Yy0uNzguNzgtMi4wNS43OS0yLjgzIDAtLjc4LS43OC0uNzktMi4wNC0uMDEtMi44MkwxMS45OSAwbDYuMDIgNi4wMWMuNzguNzguNzkgMi4wNS4wMSAyLjgzLS43OC43OC0yLjA1Ljc5LTIuODMgMGwtMS4yLTEuMTl2Ni4xOGEyIDIgMCAxIDEtNCAwVjcuNjZMOC44MiA4Ljg0eic7XG5cbnZhciBzaG9wcGluZ0JhZyA9ICdNOS41IDVhMi41IDIuNSAwIDAgMSA1IDB2MmgtNVY1ek0xNyA3VjVjMC0yLjc2LTIuMjQtNS01LTVTNyAyLjI0IDcgNXYySDJ2MTVjMCAxLjEuOSAyIDIgMmgxNmMxLjEgMCAyLS45IDItMlY3aC01eic7XG5cbnZhciBzbWlsZXkgPSAnTTEyLjAzIDE5LjI5aC0uMDZjLTMuNDgtLjAzLTQuOTItMi4zMS00Ljk4LTIuNDFhLjg5Ni44OTYgMCAwIDEgLjI3LTEuMjIuODIuODIgMCAwIDEgMS4xNy4yNmMuMDYuMDggMS4wNiAxLjU4IDMuNTcgMS41OSAyLjUxLS4wMSAzLjUyLTEuNiAzLjU2LTEuNjcuMjUtLjQxLjc4LS41NCAxLjE4LS4yOC4zOS4yNi41Mi44LjI4IDEuMjEtLjA2LjEtMS41IDIuNDktNC45OSAyLjUyek0xOCA5LjQzYzAgLjk1LS43NyAxLjcxLTEuNzEgMS43MS0uOTUgMC0xLjcyLS43Ni0xLjcyLTEuNzFzLjc3LTEuNzIgMS43Mi0xLjcyYy45NCAwIDEuNzEuNzcgMS43MSAxLjcyem0tMTIgMGMwLS45NS43Ny0xLjcyIDEuNzEtMS43Mi45NSAwIDEuNzIuNzcgMS43MiAxLjcycy0uNzcgMS43MS0xLjcyIDEuNzFjLS45NCAwLTEuNzEtLjc2LTEuNzEtMS43MXonO1xuXG52YXIgc21pbGV5T3V0bGluZSA9ICdNMTIuMDMgMTkuMjloLS4wNmMtMy40OC0uMDMtNC45Mi0yLjMxLTQuOTgtMi40MWEuODk2Ljg5NiAwIDAgMSAuMjctMS4yMi44Mi44MiAwIDAgMSAxLjE3LjI2Yy4wNi4wOCAxLjA2IDEuNTggMy41NyAxLjU5IDIuNTEtLjAxIDMuNTItMS42IDMuNTYtMS42Ny4yNS0uNDEuNzgtLjU0IDEuMTgtLjI4LjM5LjI2LjUyLjguMjggMS4yMS0uMDYuMS0xLjUgMi40OS00Ljk5IDIuNTJ6TTE4IDkuNDNjMCAuOTUtLjc3IDEuNzEtMS43MSAxLjcxLS45NSAwLTEuNzItLjc2LTEuNzItMS43MXMuNzctMS43MiAxLjcyLTEuNzJjLjk0IDAgMS43MS43NyAxLjcxIDEuNzJ6bS0xMiAwYzAtLjk1Ljc3LTEuNzIgMS43MS0xLjcyLjk1IDAgMS43Mi43NyAxLjcyIDEuNzJzLS43NyAxLjcxLTEuNzIgMS43MWMtLjk0IDAtMS43MS0uNzYtMS43MS0xLjcxek0xMiAwQzUuNCAwIDAgNS40IDAgMTJzNS40IDEyIDEyIDEyIDEyLTUuNCAxMi0xMlMxOC42IDAgMTIgMHptMCAyMi4yQzYuNDUgMjIuMiAxLjggMTcuNyAxLjggMTIgMS44IDYuMyA2LjMgMS44IDEyIDEuOGM1LjcgMCAxMC4yIDQuNSAxMC4yIDEwLjIgMCA1LjctNC42NSAxMC4yLTEwLjIgMTAuMnonO1xuXG52YXIgc291bmQgPSAnTTIwLjQ4IDMuNTFBMTEuOTIgMTEuOTIgMCAwIDEgMjQgMTJjMCAzLjItMS4yNSA2LjIyLTMuNTEgOC40OC0uMjUuMjUtLjU3LjM3LS44OS4zNy0uMzIgMC0uNjQtLjEyLS44OC0uMzctLjQ5LS40OC0uNDktMS4yNyAwLTEuNzZBOS40NjUgOS40NjUgMCAwIDAgMjEuNSAxMmMwLTIuNTQtLjk5LTQuOTMtMi43OS02LjcyLS40OC0uNDktLjQ4LTEuMjggMC0xLjc3YTEuMjUgMS4yNSAwIDAgMSAxLjc3IDB6TTUgNy45NHYuMDJMMTIgMXYyMmwtNy02LjA5di4wM0gyYy0xLjEgMC0yLS45LTItMnYtNWEyIDIgMCAwIDEgMi0yaDN6bTExLjk1LS44OUE2Ljk2IDYuOTYgMCAwIDEgMTkgMTJjMCAxLjg3LS43MyAzLjYzLTIuMDUgNC45NS0uMjQuMjQtLjU2LjM2LS44OC4zNi0uMzIgMC0uNjQtLjEyLS44OS0uMzZhMS4yNSAxLjI1IDAgMCAxIDAtMS43N2MuODUtLjg1IDEuMzItMS45OCAxLjMyLTMuMTggMC0xLjItLjQ3LTIuMzMtMS4zMi0zLjE4YTEuMjUgMS4yNSAwIDAgMSAwLTEuNzcgMS4yNSAxLjI1IDAgMCAxIDEuNzcgMHonO1xuXG52YXIgc29ydEFzY2VuZGluZyA9ICdNNC41ODYgOC40MTVhMiAyIDAgMSAwIDIuODI4IDIuODI4TDEwIDguNjU3VjIxYTIgMiAwIDAgMCA0IDBWOC42NTdsMi41ODYgMi41ODZhMiAyIDAgMSAwIDIuODI4LTIuODI4TDEyIDEgNC41ODYgOC40MTV6JztcblxudmFyIHNvcnREZXNjZW5kaW5nID0gJ000LjU4NiAxNS41ODVhMiAyIDAgMSAxIDIuODI4LTIuODI4TDEwIDE1LjM0M1YzYTIgMiAwIDAgMSA0IDB2MTIuMzQzbDIuNTg2LTIuNTg2YTIgMiAwIDEgMSAyLjgyOCAyLjgyOEwxMiAyM2wtNy40MTQtNy40MTV6JztcblxudmFyIHNwZWVjaCA9ICdNMTIgMEM1Ljg1IDAgLjc1IDQuOTQuNzUgMTEuMDhjMCAyLjcuOSA1LjI0IDIuNyA3LjE5TDIuMSAyMy41MWMtLjE1LjMuMy42LjYuNDVsNS4yNS0yLjU1YzEuMzUuNDUgMi43Ljc1IDQuMDUuNzUgNi4xNSAwIDExLjI1LTQuOTQgMTEuMjUtMTEuMDhTMTguMTUgMCAxMiAwJztcblxudmFyIHNwZWVjaEVsbGlwc2lzID0gJ00xOCAxMi41YTEuNSAxLjUgMCAxIDEgLjAwMS0zLjAwMUExLjUgMS41IDAgMCAxIDE4IDEyLjVtLTYgMGExLjUgMS41IDAgMSAxIC4wMDEtMy4wMDFBMS41IDEuNSAwIDAgMSAxMiAxMi41bS02IDBhMS41IDEuNSAwIDEgMSAuMDAxLTMuMDAxQTEuNSAxLjUgMCAwIDEgNiAxMi41TTEyIDBDNS45MjUgMCAxIDQuOTI1IDEgMTFjMCAyLjY1My45NCA1LjA4NiAyLjUwNCA2Ljk4NkwyIDI0bDUuMzM2LTMuMDQ5QTEwLjkzIDEwLjkzIDAgMCAwIDEyIDIyYzYuMDc1IDAgMTEtNC45MjUgMTEtMTFTMTguMDc1IDAgMTIgMCc7XG5cbnZhciBzdGFyID0gJ00yMy41NiAxMC42Yy44Ni0uODcuMzktMi40LS44LTIuNThsLTUuNzgtLjg3YTEuNDYgMS40NiAwIDAgMS0xLjEtLjgzTDEzLjMuODRhMS40MiAxLjQyIDAgMCAwLTIuNiAwTDguMTEgNi4zMmMtLjIuNDQtLjYxLjc1LTEuMDkuODNsLTUuNzguODdDLjA1IDguMi0uNDIgOS43My40NCAxMC42MWw0LjE4IDQuMjZjLjM0LjM1LjUuODUuNDIgMS4zNGwtLjk5IDYuMDFjLS4yIDEuMjQgMS4wNCAyLjE5IDIuMSAxLjZsNS4xOC0yLjg0YTEuNCAxLjQgMCAwIDEgMS4zNSAwbDUuMTYgMi44NGMxLjA3LjU5IDIuMzEtLjM2IDIuMS0xLjZsLS45OC02LjAxYy0uMDgtLjUuMDgtMSAuNDItMS4zNGw0LjE4LTQuMjZ6JztcblxudmFyIHN0YXJIYWxmID0gJ00xMiAwYy0uNTIgMC0xLjAzLjI4LTEuMy44NEw4LjEyIDYuMzNjLS4yMi40NC0uNjIuNzUtMS4xLjgzbC01Ljc4Ljg3Yy0xLjE5LjE5LTEuNjYgMS43MS0uOCAyLjU5bDQuMTggNC4yNmMuMzQuMzUuNS44NS40MiAxLjM0bC0uOTkgNi4wMmMtLjIgMS4yMyAxLjA0IDIuMTggMi4xIDEuNmw1LjE3LTIuODVjLjIyLS4xMS40NS0uMTcuNjgtLjE3VjB6JztcblxudmFyIHN0b3J5UGluID0gJ00xNS4yNSAwaC02LjVhMS43NSAxLjc1IDAgMDAwIDMuNWg2LjVjMi45IDAgNS4yNSAyLjM1IDUuMjUgNS4yNXY2LjVhMS43NSAxLjc1IDAgMTAzLjUgMHYtNi41QTguNzYgOC43NiAwIDAwMTUuMjUgMG0tLjc1IDYuNUgzYTMgMyAwIDAwLTMgM1YyMWEzIDMgMCAwMDMgM2gxMS41YTMgMyAwIDAwMy0zVjkuNWEzIDMgMCAwMC0zLTMnO1xuXG52YXIgc3dpdGNoQWNjb3VudCA9ICdNNy4xODQgMjIuNTZhMS41IDEuNSAwIDAgMC0uMDAyLTIuMTIxbC0xLjQ0Mi0xLjQ0IDguNzYtLjAwM2ExLjUgMS41IDAgMSAwLS4wMDEtM2wtOC43NTUuMDAzIDEuNDM3LTEuNDRhMS41IDEuNSAwIDEgMC0yLjEyMy0yLjExOEwwIDE3LjUwOGw1LjA2MyA1LjA1NGExLjUgMS41IDAgMCAwIDIuMTIxLS4wMDJtOS42MzctMTAuOTk4YTEuNTAxIDEuNTAxIDAgMCAxLS4wMDItMi4xMjFMMTguMjU2IDggOS41IDguMDA1YTEuNSAxLjUgMCAwIDEtLjAwMS0zTDE4LjI2IDVsLTEuNDQyLTEuNDRhMS40OTQgMS40OTQgMCAwIDEtLjQ0MS0xLjA2MSAxLjQ5OCAxLjQ5OCAwIDAgMSAyLjU2LTEuMDYxTDI0IDYuNDkzbC01LjA1OCA1LjA2N2ExLjUgMS41IDAgMCAxLTIuMTIxLjAwMic7XG5cbnZhciB0YWcgPSAnTTYgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJtNy4zNi02LjJsOC44NCA4Ljg0YTIuNzEgMi43MSAwIDAgMSAwIDMuODVsLTcuNzEgNy43MWEyLjcxIDIuNzEgMCAwIDEtMy44NSAwTDEuOCAxMy4zNmMtLjUxLS41MS0uOC0xLjItLjgtMS45MlYzLjczQzEgMi4yMiAyLjIyIDEgMy43MyAxaDcuNzFjLjcyIDAgMS40MS4yOSAxLjkyLjgnO1xuXG52YXIgdGVybXMgPSAnTTIxIDE4SDExYTIgMiAwIDEgMCAwIDRoMTBhMiAyIDAgMSAwIDAtNE00IDE3YTMgMyAwIDEgMCAwIDYgMyAzIDAgMCAwIDAtNm0xNy03SDExYTIgMiAwIDEgMCAwIDRoMTBhMiAyIDAgMSAwIDAtNE00IDlhMyAzIDAgMSAwIDAgNiAzIDMgMCAwIDAgMC02bTctM2gxMGEyIDIgMCAxIDAgMC00SDExYTIgMiAwIDEgMCAwIDRNNyA0YTMgMyAwIDEgMS02IDAgMyAzIDAgMCAxIDYgMCc7XG5cbnZhciB0ZXh0QWxpZ25DZW50ZXIgPSAnTTAgNC41aDI0di0zSDB2M3ptMyA2aDE4VjcuNDk5SDNWMTAuNXptLTMgNmgyNHYtM0gwdjN6bTMgNmgxOHYtM0gzdjN6JztcblxudmFyIHRleHRBbGlnbkxlZnQgPSAnTTAgNC41aDI0di0zSDB2M3ptMCA2aDE4VjcuNDk5SDBWMTAuNXptMCA2aDI0di0zSDB2M3ptMCA2aDE4di0zSDB2M3onO1xuXG52YXIgdGV4dEFsaWduUmlnaHQgPSAnTTI0IDQuNUgwdi0zaDI0djN6bTAgNkg2di0zaDE4djN6bTAgNkgwdi0zaDI0djN6bTAgNkg2di0zaDE4djN6JztcblxudmFyIHRleHRBbGxDYXBzID0gJ00xNi43NzQgMTMuNzA0TDE4LjUgOS42ODlsMS43MjYgNC4wMTVoLTMuNDUzem03LjEzIDIuOTQ4TDE5LjUwOSA2LjQyNkExLjEwMiAxLjEwMiAwIDAgMCAxOC41IDUuNzVjLS40MzYgMC0uODMxLjI2NS0xLjAwOC42NzZsLTQuMzk4IDEwLjIyNmExLjE1MiAxLjE1MiAwIDAgMCAuNTYgMS41Yy4xNDYuMDY2LjI5Ny4wOTguNDQ3LjA5OC40MjMgMCAuODI2LS4yNTMgMS4wMDgtLjY3NmwuNjg3LTEuNTk3aDUuNDA3bC42ODcgMS41OTdjLjI0Ny41NzMuODk3LjgzMyAxLjQ1NC41NzguNTU2LS4yNTUuODA3LS45MjYuNTYtMS41em0tMjAuMTMtMi45NDhMNS41IDkuNjg5bDEuNzI2IDQuMDE1SDMuNzc0em0yLjczNC03LjI3OEExLjEwMiAxLjEwMiAwIDAgMCA1LjUgNS43NWMtLjQzNiAwLS44MzEuMjY1LTEuMDA4LjY3NkwuMDk1IDE2LjY1MmExLjE1MiAxLjE1MiAwIDAgMCAuNTYgMS41Yy4xNDYuMDY2LjI5Ny4wOTguNDQ3LjA5OC40MjMgMCAuODI2LS4yNTMgMS4wMDgtLjY3NmwuNjg3LTEuNTk3aDUuNDA3bC42ODcgMS41OTdjLjI0Ny41NzMuODk3LjgzMyAxLjQ1NC41NzguNTU2LS4yNTUuODA3LS45MjYuNTYtMS41TDYuNTA4IDYuNDI2eic7XG5cbnZhciB0ZXh0RXh0cmFTbWFsbCA9ICdNMi4yNSAxMS41YTEuMjUgMS4yNSAwIDAgMSAwLTIuNWgxOS41YTEuMjUgMS4yNSAwIDAgMSAwIDIuNUgyLjI1em0xOS41IDlhMS4yNSAxLjI1IDAgMCAxIDAgMi41SDIuMjVhMS4yNSAxLjI1IDAgMCAxIDAtMi41aDE5LjV6TTEyIDEzYy4yMTggMCAuNDE2LjEyNy41MDQuMzI0bDIuMTk5IDQuOTFBLjU0NS41NDUgMCAwIDEgMTQuMiAxOWEuNTUuNTUgMCAwIDEtLjUwNC0uMzI1bC0uMzQ0LS43NjZoLTIuNzAzbC0uMzQ0Ljc2NmEuNTUzLjU1MyAwIDAgMS0uNzI3LjI3OC41NDMuNTQzIDAgMCAxLS4yOC0uNzJsMi4xOTgtNC45MDlBLjU1My41NTMgMCAwIDEgMTIgMTN6bS0uODYzIDMuODE4aDEuNzI3TDEyIDE0Ljg5MWwtLjg2MyAxLjkyN3onO1xuXG52YXIgdGV4dExhcmdlID0gJ00yLjI1IDMuNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNXptMTkuNSAxN2ExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNXpNMTIgNWMuNTA4IDAgLjk2OC4yOTcgMS4xNzQuNzU3bDUuMTMxIDExLjQ1NGExLjI2NiAxLjI2NiAwIDAgMS0uNjU0IDEuNjc4IDEuMjg4IDEuMjg4IDAgMCAxLTEuNjk2LS42NDdsLS44LTEuNzg4aC02LjMxbC0uOCAxLjc4OGExLjI5IDEuMjkgMCAwIDEtMS42OTcuNjQ3IDEuMjY2IDEuMjY2IDAgMCAxLS42NTQtMS42NzhsNS4xMy0xMS40NTRDMTEuMDMgNS4yOTcgMTEuNDkxIDUgMTIgNXptLTIuMDE0IDguOTA4aDQuMDI3TDEyIDkuNDEzbC0yLjAxNCA0LjQ5NXonO1xuXG52YXIgdGV4dExpbmVIZWlnaHQgPSAnTTE2IDlsLTQtNC00IDRoMi41djZIOGw0IDQgNC00aC0yLjVWOUgxNnptNS43NSAxMS41SDIuMjVhMS4yNSAxLjI1IDAgMCAwIDAgMi41aDE5LjVhMS4yNSAxLjI1IDAgMCAwIDAtMi41ek0xIDIuMjVDMSAxLjU2IDEuNTYgMSAyLjI1IDFoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNUMxLjU2IDMuNSAxIDIuOTQgMSAyLjI1eic7XG5cbnZhciB0ZXh0TWVkaXVtID0gJ00yLjI1IDYuNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNXptMTkuNSAxNGExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNXpNMTIgOGMuMzk5IDAgLjc2Mi4yMzIuOTIzLjU5NWw0LjAzMiA5YS45OTYuOTk2IDAgMCAxLS41MTUgMS4zMTkgMS4wMTMgMS4wMTMgMCAwIDEtMS4zMzMtLjUxTDE0LjQ3OSAxN0g5LjUyMmwtLjYyOSAxLjQwNGExLjAxNCAxLjAxNCAwIDAgMS0xLjMzMy41MS45OTYuOTk2IDAgMCAxLS41MTUtMS4zMTlsNC4wMzEtOUExLjAxIDEuMDEgMCAwIDEgMTIgOHptLTEuNTgyIDdoMy4xNjRMMTIgMTEuNDY3IDEwLjQxOCAxNXonO1xuXG52YXIgdGV4dFNlbnRlbmNlQ2FzZSA9ICdNMTkuNzkzIDE2LjAyOGgtMi43NTlhLjgzMS44MzEgMCAwIDEtLjgyNy0uODMzYzAtLjQ2LjM3MS0uODM0LjgyNy0uODM0aDIuNzU5djEuNjY3em0tLjgyOC03Ljc3OGgtMy4zMWMtLjYwOSAwLTEuMTAzLjQ5OC0xLjEwMyAxLjExMSAwIC42MTQuNDk0IDEuMTExIDEuMTAzIDEuMTExaDMuMzFjLjQ1NyAwIC44MjguMzc0LjgyOC44MzR2LjgzM2gtMi43NTljLTEuNjczIDAtMy4wMzQgMS4zNzEtMy4wMzQgMy4wNTZzMS4zNjEgMy4wNTUgMy4wMzQgMy4wNTVoMy44NjJjLjYxIDAgMS4xMDQtLjQ5NyAxLjEwNC0xLjExMXYtNS44MzNjMC0xLjY4NS0xLjM2Mi0zLjA1Ni0zLjAzNS0zLjA1NnpNNS43NzQgMTMuNzA1TDcuNSA5LjY5bDEuNzI2IDQuMDE1SDUuNzc0em03LjEzMSAyLjk0OEw4LjUwNyA2LjQyNkExLjEgMS4xIDAgMCAwIDcuNSA1Ljc1YTEuMSAxLjEgMCAwIDAtMS4wMDcuNjc2TDIuMDk1IDE2LjY1M2MtLjI0Ny41NzQuMDA0IDEuMjQ1LjU2MSAxLjQ5OS4xNDUuMDY3LjI5Ni4wOTguNDQ2LjA5OC40MjIgMCAuODI1LS4yNTIgMS4wMDgtLjY3NmwuNjg2LTEuNTk3aDUuNDA4bC42ODYgMS41OTdjLjI0Ny41NzQuODk3LjgzMyAxLjQ1NC41NzguNTU3LS4yNTQuODA4LS45MjUuNTYxLTEuNDk5eic7XG5cbnZhciB0ZXh0U2l6ZSA9ICdNMi45MTYgMTYuNTQ1bDEuMzM0LTMuMDUxIDEuMzM0IDMuMDUxSDIuOTE2em0yLjExMi01LjUzMmEuODUuODUgMCAwIDAtLjc3OC0uNTEzLjg1Mi44NTIgMCAwIDAtLjc4LjUxM0wuMDc0IDE4Ljc4NmEuODY5Ljg2OSAwIDAgMCAuNDM0IDEuMTM5Ljg0Ni44NDYgMCAwIDAgMS4xMjMtLjQzOWwuNTMtMS4yMTRINi4zNGwuNTMgMS4yMTRhLjg1Mi44NTIgMCAwIDAgLjc4LjUxNC44NDQuODQ0IDAgMCAwIC4zNDQtLjA3NS44NjkuODY5IDAgMCAwIC40MzQtMS4xMzlsLTMuNC03Ljc3M3ptOS40NDYgMy4xNjhsMi4yNzYtNS4xMzggMi4yNzYgNS4xMzhoLTQuNTUyem05LjQgMy43NzRsLTUuNzk2LTEzLjA5YTEuNDUzIDEuNDUzIDAgMCAwLTIuNjU2IDBsLTUuNzk3IDEzLjA5YTEuNDU1IDEuNDU1IDAgMCAwIC43MzkgMS45MTkgMS40NTEgMS40NTEgMCAwIDAgMS45MTctLjc0bC45MDUtMi4wNDRoNy4xMjhsLjkwNSAyLjA0NGExLjQ1MyAxLjQ1MyAwIDEgMCAyLjY1Ni0xLjE3OXonO1xuXG52YXIgdGV4dFNtYWxsID0gJ00yLjI1IDkuNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNXptMTkuNSAxMWExLjI1IDEuMjUgMCAwIDEgMCAyLjVIMi4yNWExLjI1IDEuMjUgMCAwIDEgMC0yLjVoMTkuNXpNMTIgMTFjLjI5IDAgLjU1NC4xNjkuNjcxLjQzM2wyLjkzMiA2LjU0NWEuNzI0LjcyNCAwIDAgMS0uNjcgMS4wMjIuNzM1LjczNSAwIDAgMS0uNjczLS40MzJsLS40NTgtMS4wMjNoLTMuNjA0bC0uNDU4IDEuMDIzYS43NC43NCAwIDAgMS0uOTcuMzcuNzI1LjcyNSAwIDAgMS0uMzc0LS45NmwyLjkzMi02LjU0NUEuNzM0LjczNCAwIDAgMSAxMiAxMXptLTEuMTUgNS4wOWgyLjMwMWwtMS4xNS0yLjU2OC0xLjE1MiAyLjU2OXonO1xuXG52YXIgdGV4dFNwYWNpbmcgPSAnTTIwIDE1bDQgNC00IDR2LTIuNUg0VjIzbC00LTQgNC00djIuNWgxNlYxNXpNNS41IDQuNzgybDEuNzI3IDMuODU0SDMuNzc0TDUuNSA0Ljc4MnpNLjY1NiAxMi45MDZhMS4xMDQgMS4xMDQgMCAwIDAgMS40NTQtLjU1NWwuNjg2LTEuNTMzaDUuNDA4bC42ODYgMS41MzNjLjI0Ny41NTEuODk3LjggMS40NTQuNTU1LjU1Ny0uMjQ0LjgwOC0uODg5LjU2MS0xLjQ0TDYuNTA4IDEuNjQ5QTEuMTAzIDEuMTAzIDAgMCAwIDUuNSAxYTEuMSAxLjEgMCAwIDAtMS4wMDcuNjQ5TC4wOTUgMTEuNDY2YTEuMDg3IDEuMDg3IDAgMCAwIC41NjEgMS40NHptMTUuNTI2LTQuODE1aDQuMjczYTEuMzY1IDEuMzY1IDAgMCAxIDAgMi43MjdoLTQuMjczVjguMDkxem0wLTQuOTA5aDMuNzI3Yy43NTIgMCAxLjM2NC42MTIgMS4zNjQgMS4zNjMgMCAuNzUyLS42MTIgMS4zNjQtMS4zNjQgMS4zNjRoLTMuNzI3VjMuMTgyek0xNS4wOTEgMTNoNS4zNjRBMy41NSAzLjU1IDAgMCAwIDI0IDkuNDU1YTMuNTQgMy41NCAwIDAgMC0xLjI5NS0yLjczOGMuNDY4LS42Ljc1LTEuMzUzLjc1LTIuMTcyQTMuNTUgMy41NSAwIDAgMCAxOS45MDkgMWgtNC44MThBMS4wOSAxLjA5IDAgMCAwIDE0IDIuMDkxdjkuODE4QTEuMDkgMS4wOSAwIDAgMCAxNS4wOTEgMTN6JztcblxudmFyIHRyYXNoQ2FuID0gJ000Ljg3OCAyMi4xMTZBMiAyIDAgMCAwIDYuODc1IDI0aDEwLjIyOWEyIDIgMCAwIDAgMS45OTUtMS44ODFMMjAgN0g0bC44OCAxNS4xMTZ6TTIyIDMuNUExLjUgMS41IDAgMCAxIDIwLjUgNWgtMTdhMS41IDEuNSAwIDAgMSAwLTNoNlYxYTEgMSAwIDAgMSAxLTFoM2ExIDEgMCAwIDEgMSAxdjFoNkExLjUgMS41IDAgMCAxIDIyIDMuNXonO1xuXG52YXIgdHdpdHRlciA9ICdNNy41NDggMjEuNWM5LjA1NiAwIDE0LjAxLTcuMzEgMTQuMDEtMTMuNjUgMC0uMjA4IDAtLjQxNC0uMDE1LS42MkE5Ljg4IDkuODggMCAwIDAgMjQgNC43NDdjLS44OTkuMzg4LTEuODUyLjY0Mi0yLjgyOC43NTRhNC44MzggNC44MzggMCAwIDAgMi4xNjUtMi42NTNjLS45NjcuNTU5LTIuMDI0Ljk1My0zLjEyNyAxLjE2NC0xLjUyNi0xLjU4LTMuOTUyLTEuOTY4LTUuOTE2LS45NDQtMS45NjQgMS4wMjUtMi45OCAzLjIwNS0yLjQ3NSA1LjMyQzcuODU5IDguMTk0IDQuMTcgNi4zNzIgMS42NyAzLjM3NS4zNjMgNS41NjcgMS4wMzEgOC4zNzIgMy4xOTUgOS43OGE0Ljk4NiA0Ljk4NiAwIDAgMS0yLjIzNS0uNnYuMDZjMCAyLjI4NCAxLjY1MyA0LjI1IDMuOTUgNC43MDNhNS4wNDIgNS4wNDIgMCAwIDEtMi4yMjMuMDgyYy42NDUgMS45NTQgMi40OTQgMy4yOTMgNC42IDMuMzMyQTEwLjA0OCAxMC4wNDggMCAwIDEgMCAxOS4zNDVhMTQuMjEgMTQuMjEgMCAwIDAgNy41NDggMi4xNTEnO1xuXG52YXIgdmlkZW9DYW1lcmEgPSAnTTE2IDh2OGMwIDEuMS0uOSAyLTIgMkgzYy0xLjEgMC0yLS45LTItMlY4YzAtMS4xLjktMiAyLTJoMTFjMS4xIDAgMiAuOSAyIDJ6bTYuMTgtLjM4bC0zLjY3IDMuMjZhMS41IDEuNSAwIDAgMCAwIDIuMjRsMy42NyAzLjI2Yy4zMi4yOC44Mi4wNC44Mi0uMzlWOC4wMWMwLS40My0uNS0uNjctLjgyLS4zOXonO1xuXG52YXIgdmlld1R5cGVEZWZhdWx0ID0gJ00xMy41IDI0VjEzLjVIMjRWMjRIMTMuNXpNMCAxMC41VjBoMTAuNXYxMC41SDB6bTEzLjUgMFYwSDI0djEwLjVIMTMuNXpNMCAyNFYxMy41aDEwLjVWMjRIMHonO1xuXG52YXIgdmlld1R5cGVEZW5zZSA9ICdNMTcuOTk5IDI0SDI0di02aC02LjAwMXY2em0tOS0xNy45OTlWMGg2djYuMDAxSDl6TTAgNi4wMDFWMGg2djYuMDAxSDB6bTE3Ljk5OSAwVjBIMjR2Ni4wMDFoLTYuMDAxek0wIDE1LjAwMVY5aDZ2Nkgwem05IDBWOWg2djZIOXptOC45OTkgMFY5SDI0djZoLTYuMDAxek0wIDI0di02aDZ2Nkgwem05IDB2LTZoNnY2SDl6JztcblxudmFyIHZpZXdUeXBlTGlzdCA9ICdNMCAxMy41MDJ2LTNoMjR2M0gwem0wLTcuNVYzaDI0djMuMDAySDB6bTAgMTV2LTNoMjR2M0gweic7XG5cbnZhciB3b3JrZmxvd1N0YXR1c0FsbCA9ICdNMTEgNmMwIDIuNzYtMi4yNCA1LTUgNVMxIDguNzYgMSA2czIuMjQtNSA1LTUgNSAyLjI0IDUgNXptNyA1YzIuNzYgMCA1LTIuMjQgNS01cy0yLjI0LTUtNS01LTUgMi4yNC01IDUgMi4yNCA1IDUgNXpNNiAxM2MtMi43NiAwLTUgMi4yNC01IDVzMi4yNCA1IDUgNSA1LTIuMjQgNS01LTIuMjQtNS01LTV6bTEyIDBjLTIuNzYgMC01IDIuMjQtNSA1czIuMjQgNSA1IDUgNS0yLjI0IDUtNS0yLjI0LTUtNS01eic7XG5cbnZhciB3b3JrZmxvd1N0YXR1c0hhbHRlZCA9ICdNMTAuNSA5djZhMS41IDEuNSAwIDEgMS0zIDBWOWExLjUgMS41IDAgMSAxIDMgMHpNMTUgNy41Yy0uODMgMC0xLjUuNjctMS41IDEuNXY2YTEuNSAxLjUgMCAxIDAgMyAwVjljMC0uODMtLjY3LTEuNS0xLjUtMS41em05IDQuNWExMiAxMiAwIDEgMS0yNCAwIDEyIDEyIDAgMCAxIDI0IDB6bS0zIDBjMC00Ljk2LTQuMDQtOS05LTlzLTkgNC4wNC05IDkgNC4wNCA5IDkgOSA5LTQuMDQgOS05eic7XG5cbnZhciB3b3JrZmxvd1N0YXR1c0luUHJvZ3Jlc3MgPSAnTTEyIDBhMTIgMTIgMCAxIDAgMCAyNCAxMiAxMiAwIDAgMCAwLTI0ek0zIDEyYzAtNC45NiA0LjA0LTkgOS05djE4Yy00Ljk2IDAtOS00LjA0LTktOXonO1xuXG52YXIgd29ya2Zsb3dTdGF0dXNPayA9ICdNMTIgMGExMiAxMiAwIDEgMCAwIDI0IDEyIDEyIDAgMCAwIDAtMjR6bTUuNTYgMTAuMDZsLTYgNmExLjUgMS41IDAgMCAxLTIuMTIgMGwtMy0zYTEuNSAxLjUgMCAwIDEgMC0yLjEyIDEuNSAxLjUgMCAwIDEgMi4xMiAwbDEuOTQgMS45NCA0Ljk0LTQuOTRhMS41IDEuNSAwIDAgMSAyLjEyIDAgMS41IDEuNSAwIDAgMSAwIDIuMTJ6JztcblxudmFyIHdvcmtmbG93U3RhdHVzUHJvYmxlbSA9ICdNMjMuNiAxOC41TDE0LjYzIDIuNTNhMyAzIDAgMCAwLTUuMjQgMEwuNCAxOC41QTMuMDIgMy4wMiAwIDAgMCAzIDIzaDE4YzIuMjkgMCAzLjc0LTIuNDkgMi42LTQuNXptLTcuNTQtMS4wNmExLjUgMS41IDAgMCAxIDAgMi4xMiAxLjUgMS41IDAgMCAxLTIuMTIgMGwtMS45NS0xLjk0LTEuOTQgMS45NGExLjUgMS41IDAgMCAxLTIuMTIgMCAxLjUgMS41IDAgMCAxIDAtMi4xMmwxLjk0LTEuOTQtMS45NC0xLjk0YTEuNSAxLjUgMCAwIDEgMC0yLjEyIDEuNSAxLjUgMCAwIDEgMi4xMiAwTDEyIDEzLjM4bDEuOTUtMS45NGExLjUgMS41IDAgMCAxIDIuMTIgMCAxLjUgMS41IDAgMCAxIDAgMi4xMmwtMS45NCAxLjk0IDEuOTQgMS45NHonO1xuXG52YXIgd29ya2Zsb3dTdGF0dXNVbnN0YXJ0ZWQgPSAnTTEyIDBhMTIgMTIgMCAxIDAgMCAyNCAxMiAxMiAwIDAgMCAwLTI0em0wIDIxYy00Ljk2IDAtOS00LjA0LTktOXM0LjA0LTkgOS05IDkgNC4wNCA5IDktNC4wNCA5LTkgOXptMS43NS05YzAgLjk3LS43OCAxLjc1LTEuNzUgMS43NXMtMS43NS0uNzgtMS43NS0xLjc1Ljc4LTEuNzUgMS43NS0xLjc1IDEuNzUuNzggMS43NSAxLjc1eic7XG5cbnZhciB3b3JrZmxvd1N0YXR1c1dhcm5pbmcgPSAnTTIzLjEyIDkuODdsLTktOWEzLjAxIDMuMDEgMCAwIDAtNC4yNSAwbC05IDlhMy4wMSAzLjAxIDAgMCAwIDAgNC4yNmw5IDlhMy4wMSAzLjAxIDAgMCAwIDQuMjYgMGw5LTlhMy4wMSAzLjAxIDAgMCAwIDAtNC4yNnpNMTIgMTkuMDFhMS41NiAxLjU2IDAgMSAxIDAtMy4xMyAxLjU2IDEuNTYgMCAwIDEgMCAzLjEzem0xLjU3LTYuMjJhMS41NiAxLjU2IDAgMCAxLTMuMTMgMFY2LjU1YTEuNTYgMS41NiAwIDAgMSAzLjEzIDB2Ni4yNHonO1xuXG52YXIgaWNvbnMgPSB7XG4gIGFkOiBhZCxcbiAgJ2FkLWdyb3VwJzogYWRHcm91cCxcbiAgYWRkOiBhZGQsXG4gICdhZGQtY2lyY2xlJzogYWRkQ2lyY2xlLFxuICAnYWRkLWxheW91dCc6IGFkZExheW91dCxcbiAgJ2FkZC1waW4nOiBhZGRQaW4sXG4gICdhZHMtc3RhdHMnOiBhZHNTdGF0cyxcbiAgJ2Fkcy1vdmVydmlldyc6IGFkc092ZXJ2aWV3LFxuICBhbGVydDogYWxlcnQsXG4gICdhbGlnbi1ib3R0b20tY2VudGVyJzogYWxpZ25Cb3R0b21DZW50ZXIsXG4gICdhbGlnbi1ib3R0b20tbGVmdCc6IGFsaWduQm90dG9tTGVmdCxcbiAgJ2FsaWduLWJvdHRvbS1yaWdodCc6IGFsaWduQm90dG9tUmlnaHQsXG4gICdhbGlnbi1ib3R0b20nOiBhbGlnbkJvdHRvbSxcbiAgJ2FsaWduLW1pZGRsZSc6IGFsaWduTWlkZGxlLFxuICAnYWxpZ24tdG9wLWNlbnRlcic6IGFsaWduVG9wQ2VudGVyLFxuICAnYWxpZ24tdG9wLWxlZnQnOiBhbGlnblRvcExlZnQsXG4gICdhbGlnbi10b3AtcmlnaHQnOiBhbGlnblRvcFJpZ2h0LFxuICAnYWxpZ24tdG9wJzogYWxpZ25Ub3AsXG4gICdhbmRyb2lkLXNoYXJlJzogYW5kcm9pZFNoYXJlLFxuICAnYW5nbGVkLXBpbic6IGFuZ2xlZFBpbixcbiAgYXBwczogYXBwcyxcbiAgJ2Fycm93LWJhY2snOiBhcnJvd0JhY2ssXG4gICdhcnJvdy1jaXJjbGUtZG93bic6IGFycm93Q2lyY2xlRG93bixcbiAgJ2Fycm93LWNpcmNsZS1mb3J3YXJkJzogYXJyb3dDaXJjbGVGb3J3YXJkLFxuICAnYXJyb3ctY2lyY2xlLXVwJzogYXJyb3dDaXJjbGVVcCxcbiAgJ2Fycm93LWRvd24nOiBhcnJvd0Rvd24sXG4gICdhcnJvdy1lbmQnOiBhcnJvd0VuZCxcbiAgJ2Fycm93LWZvcndhcmQnOiBhcnJvd0ZvcndhcmQsXG4gICdhcnJvdy1zdGFydCc6IGFycm93U3RhcnQsXG4gICdhcnJvdy11cCc6IGFycm93VXAsXG4gICdhcnJvdy11cC1yaWdodCc6IGFycm93VXBSaWdodCxcbiAgYmVsbDogYmVsbCxcbiAgY2FsZW5kYXI6IGNhbGVuZGFyLFxuICBjYW1lcmE6IGNhbWVyYSxcbiAgJ2NhbWVyYS1yb2xsJzogY2FtZXJhUm9sbCxcbiAgY2FuY2VsOiBjYW5jZWwsXG4gICdjYW5vbmljYWwtcGluJzogY2Fub25pY2FsUGluLFxuICAnY29sb3ItcGlja2VyJzogY29sb3JQaWNrZXIsXG4gIGNoZWNrOiBjaGVjayxcbiAgJ2NoZWNrLWNpcmNsZSc6IGNoZWNrQ2lyY2xlLFxuICAnY2lyY2xlLW91dGxpbmUnOiBjaXJjbGVPdXRsaW5lLFxuICBjbGVhcjogY2xlYXIsXG4gIGNsb2NrOiBjbG9jayxcbiAgY29kZTogY29kZSxcbiAgY29nOiBjb2csXG4gIGNvbXBhc3M6IGNvbXBhc3MsXG4gIGNvbXBvc2U6IGNvbXBvc2UsXG4gIGNyb3A6IGNyb3AsXG4gIGRhc2g6IGRhc2gsXG4gICdjb252ZXJzaW9uLXRhZyc6IGNvbnZlcnNpb25UYWcsXG4gICdjcmVkaXQtY2FyZCc6IGNyZWRpdENhcmQsXG4gICdkaXJlY3Rpb25hbC1hcnJvdy1sZWZ0JzogZGlyZWN0aW9uYWxBcnJvd0xlZnQsXG4gICdkaXJlY3Rpb25hbC1hcnJvdy1yaWdodCc6IGRpcmVjdGlvbmFsQXJyb3dSaWdodCxcbiAgZG93bmxvYWQ6IGRvd25sb2FkLFxuICBkdXBsaWNhdGU6IGR1cGxpY2F0ZSxcbiAgZWRpdDogZWRpdCxcbiAgZWxsaXBzaXM6IGVsbGlwc2lzLFxuICAnZWxsaXBzaXMtY2lyY2xlLW91dGxpbmUnOiBlbGxpcHNpc0NpcmNsZU91dGxpbmUsXG4gIGVudmVsb3BlOiBlbnZlbG9wZSxcbiAgZXllOiBleWUsXG4gIGZhY2Vib29rOiBmYWNlYm9vayxcbiAgJ2ZhY2UtaGFwcHknOiBmYWNlSGFwcHksXG4gICdmYWNlLXNhZCc6IGZhY2VTYWQsXG4gICdmYWNlLXNtaWxleSc6IGZhY2VTbWlsZXksXG4gICdmaWxlLXVua25vd24nOiBmaWxlVW5rbm93bixcbiAgJ2ZpbGwtb3BhcXVlJzogZmlsbE9wYXF1ZSxcbiAgJ2ZpbGwtdHJhbnNwYXJlbnQnOiBmaWxsVHJhbnNwYXJlbnQsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBmbGFnOiBmbGFnLFxuICBmbGFzaDogZmxhc2gsXG4gIGZsYXNobGlnaHQ6IGZsYXNobGlnaHQsXG4gIGZsaXBIb3Jpem9udGFsOiBmbGlwSG9yaXpvbnRhbCxcbiAgZmxpcFZlcnRpY2FsOiBmbGlwVmVydGljYWwsXG4gIGZvbGRlcjogZm9sZGVyLFxuICBnaWY6IGdpZixcbiAgZ2xvYmU6IGdsb2JlLFxuICAnZ2xvYmUtY2hlY2tlZCc6IGdsb2JlQ2hlY2tlZCxcbiAgZ21haWw6IGdtYWlsLFxuICAnZ29vZ2xlLXBsdXMnOiBnb29nbGVQbHVzLFxuICAnZ3JhcGgtYmFyJzogZ3JhcGhCYXIsXG4gIGhhbmRsZTogaGFuZGxlLFxuICAnaGFuZC1wb2ludGluZyc6IGhhbmRQb2ludGluZyxcbiAgaGVhcnQ6IGhlYXJ0LFxuICAnaGVhcnQtb3V0bGluZSc6IGhlYXJ0T3V0bGluZSxcbiAgJ2hlYXJ0LWJyb2tlbic6IGhlYXJ0QnJva2VuLFxuICBpbXByZXNzdW06IGltcHJlc3N1bSxcbiAgJ2luZm8tY2lyY2xlJzogaW5mb0NpcmNsZSxcbiAga2V5OiBrZXksXG4gIGtub29wOiBrbm9vcCxcbiAgbGlnaHRidWxiOiBsaWdodGJ1bGIsXG4gICdsaWdodG5pbmctYm9sdC1jaXJjbGUnOiBsaWdodG5pbmdCb2x0Q2lyY2xlLFxuICBsaW5rOiBsaW5rLFxuICBsb2NhdGlvbjogbG9jYXRpb24sXG4gIGxvY2s6IGxvY2ssXG4gICdsb2dvLWxhcmdlJzogbG9nb0xhcmdlLFxuICAnbG9nby1zbWFsbCc6IGxvZ29TbWFsbCxcbiAgbG9nb3V0OiBsb2dvdXQsXG4gICdtYXJnaW5zLWxhcmdlJzogbWFyZ2luc0xhcmdlLFxuICAnbWFyZ2lucy1tZWRpdW0nOiBtYXJnaW5zTWVkaXVtLFxuICAnbWFyZ2lucy1zbWFsbCc6IG1hcmdpbnNTbWFsbCxcbiAgbWF4aW1pemU6IG1heGltaXplLFxuICBtZWdhcGhvbmU6IG1lZ2FwaG9uZSxcbiAgbWVudTogbWVudSxcbiAgbWluaW1pemU6IG1pbmltaXplLFxuICBtb3ZlOiBtb3ZlLFxuICBtdXRlOiBtdXRlLFxuICAnb3ZlcmxheS10ZXh0Jzogb3ZlcmxheVRleHQsXG4gIHBhdXNlOiBwYXVzZSxcbiAgcGVvcGxlOiBwZW9wbGUsXG4gIHBlcnNvbjogUGVyc29uU3ZnLFxuICAncGVyc29uLWFkZCc6IHBlcnNvbkFkZCxcbiAgcGhvbmU6IHBob25lLFxuICBwaW46IHBpbixcbiAgJ3Bpbi1oaWRlJzogcGluSGlkZSxcbiAgcGludGVyZXN0OiBwaW50ZXJlc3QsXG4gIHBsYXk6IHBsYXksXG4gIHJlZnJlc2g6IHJlZnJlc2gsXG4gICdxdWVzdGlvbi1tYXJrJzogcXVlc3Rpb25NYXJrLFxuICByZW1vdmU6IHJlbW92ZSxcbiAgJ3Jlb3JkZXItaW1hZ2VzJzogcmVvcmRlckltYWdlcyxcbiAgcmVwbGFjZTogcmVwbGFjZSxcbiAgcmVwb3J0OiByZXBvcnQsXG4gIHJvdGF0ZTogcm90YXRlLFxuICBzY2FsZTogc2NhbGUsXG4gIHNlYXJjaDogc2VhcmNoLFxuICBzZWN1cml0eTogc2VjdXJpdHksXG4gICdzaG9wcGluZy1iYWcnOiBzaG9wcGluZ0JhZyxcbiAgc21pbGV5OiBzbWlsZXksXG4gICdzbWlsZXktb3V0bGluZSc6IHNtaWxleU91dGxpbmUsXG4gIHNlbmQ6IHNlbmQsXG4gIHNoYXJlOiBzaGFyZSxcbiAgc291bmQ6IHNvdW5kLFxuICAnc29ydC1hc2NlbmRpbmcnOiBzb3J0QXNjZW5kaW5nLFxuICAnc29ydC1kZXNjZW5kaW5nJzogc29ydERlc2NlbmRpbmcsXG4gIHNwZWVjaDogc3BlZWNoLFxuICAnc3BlZWNoLWVsbGlwc2lzJzogc3BlZWNoRWxsaXBzaXMsXG4gIHN0YXI6IHN0YXIsXG4gICdzdGFyLWhhbGYnOiBzdGFySGFsZixcbiAgJ3N0b3J5LXBpbic6IHN0b3J5UGluLFxuICAnc3dpdGNoLWFjY291bnQnOiBzd2l0Y2hBY2NvdW50LFxuICB0YWc6IHRhZyxcbiAgdGVybXM6IHRlcm1zLFxuICAndGV4dC1hbGlnbi1sZWZ0JzogdGV4dEFsaWduTGVmdCxcbiAgJ3RleHQtYWxpZ24tY2VudGVyJzogdGV4dEFsaWduQ2VudGVyLFxuICAndGV4dC1hbGlnbi1yaWdodCc6IHRleHRBbGlnblJpZ2h0LFxuICAndGV4dC1hbGwtY2Fwcyc6IHRleHRBbGxDYXBzLFxuICAndGV4dC1leHRyYS1zbWFsbCc6IHRleHRFeHRyYVNtYWxsLFxuICAndGV4dC1sYXJnZSc6IHRleHRMYXJnZSxcbiAgJ3RleHQtbGluZS1oZWlnaHQnOiB0ZXh0TGluZUhlaWdodCxcbiAgJ3RleHQtbWVkaXVtJzogdGV4dE1lZGl1bSxcbiAgJ3RleHQtc2VudGVuY2UtY2FzZSc6IHRleHRTZW50ZW5jZUNhc2UsXG4gICd0ZXh0LXNpemUnOiB0ZXh0U2l6ZSxcbiAgJ3RleHQtc21hbGwnOiB0ZXh0U21hbGwsXG4gICd0ZXh0LXNwYWNpbmcnOiB0ZXh0U3BhY2luZyxcbiAgJ3RyYXNoLWNhbic6IHRyYXNoQ2FuLFxuICB0d2l0dGVyOiB0d2l0dGVyLFxuICAndmlkZW8tY2FtZXJhJzogdmlkZW9DYW1lcmEsXG4gICd2aWV3LXR5cGUtZGVmYXVsdCc6IHZpZXdUeXBlRGVmYXVsdCxcbiAgJ3ZpZXctdHlwZS1kZW5zZSc6IHZpZXdUeXBlRGVuc2UsXG4gICd2aWV3LXR5cGUtbGlzdCc6IHZpZXdUeXBlTGlzdCxcbiAgJ3dvcmtmbG93LXN0YXR1cy1hbGwnOiB3b3JrZmxvd1N0YXR1c0FsbCxcbiAgJ3dvcmtmbG93LXN0YXR1cy1oYWx0ZWQnOiB3b3JrZmxvd1N0YXR1c0hhbHRlZCxcbiAgJ3dvcmtmbG93LXN0YXR1cy1pbi1wcm9ncmVzcyc6IHdvcmtmbG93U3RhdHVzSW5Qcm9ncmVzcyxcbiAgJ3dvcmtmbG93LXN0YXR1cy1vayc6IHdvcmtmbG93U3RhdHVzT2ssXG4gICd3b3JrZmxvdy1zdGF0dXMtcHJvYmxlbSc6IHdvcmtmbG93U3RhdHVzUHJvYmxlbSxcbiAgJ3dvcmtmbG93LXN0YXR1cy11bnN0YXJ0ZWQnOiB3b3JrZmxvd1N0YXR1c1Vuc3RhcnRlZCxcbiAgJ3dvcmtmbG93LXN0YXR1cy13YXJuaW5nJzogd29ya2Zsb3dTdGF0dXNXYXJuaW5nXG59O1xuXG52YXIgSWNvbk5hbWVzID0gT2JqZWN0LmtleXMoaWNvbnMpO1xudmFyIGZsaXBPblJ0bEljb25OYW1lcyA9IFsnYWRzLXN0YXRzJywgJ2Fkcy1vdmVydmlldycsICdhcnJvdy1iYWNrJywgJ2Fycm93LWNpcmNsZS1mb3J3YXJkJywgJ2Fycm93LWVuZCcsICdhcnJvdy1mb3J3YXJkJywgJ2Fycm93LXN0YXJ0JywgJ2Fycm93LXVwLXJpZ2h0JywgJ2NvbXBvc2UnLCAnZGlyZWN0aW9uYWwtYXJyb3ctbGVmdCcsICdkaXJlY3Rpb25hbC1hcnJvdy1yaWdodCcsICdmbGlwVmVydGljYWwnLCAnaGFuZC1wb2ludGluZycsICdsaW5rJywgJ3Jlb3JkZXItaW1hZ2VzJywgJ3NlbmQnLCAnc291bmQnLCAnc3BlZWNoJywgJ3NwZWVjaC1lbGxpcHNpcycsICdzd2l0Y2gtYWNjb3VudCcsICd0ZXh0LXNpemUnXTtcbmZ1bmN0aW9uIEljb24ocHJvcHMpIHtcbiAgdmFyIGFjY2Vzc2liaWxpdHlMYWJlbCA9IHByb3BzLmFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdncmF5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIGRhbmdlcm91c2x5U2V0U3ZnUGF0aCA9IHByb3BzLmRhbmdlcm91c2x5U2V0U3ZnUGF0aCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgaW5saW5lID0gcHJvcHMuaW5saW5lLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAxNiA6IF9wcm9wcyRzaXplO1xuICB2YXIgY3MgPSBjbGFzc25hbWVzKGZsaXBPblJ0bEljb25OYW1lcy5pbmNsdWRlcyhpY29uKSAmJiBzdHlsZXMkMS5ydGxTdXBwb3J0LCBzdHlsZXMkMS5pY29uLCBjb2xvcnNbY29sb3JdLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyQxLmljb25CbG9jaywgIWlubGluZSkpO1xuICB2YXIgcGF0aCA9IGljb24gJiYgaWNvbnNbaWNvbl0gfHxcbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4gIGRhbmdlcm91c2x5U2V0U3ZnUGF0aCAmJiBkYW5nZXJvdXNseVNldFN2Z1BhdGguX19wYXRoIHx8IHVuZGVmaW5lZDtcbiAgdmFyIGFyaWFIaWRkZW4gPSBhY2Nlc3NpYmlsaXR5TGFiZWwgPT09ICcnID8gdHJ1ZSA6IG51bGw7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgY2xhc3NOYW1lOiBjcyxcbiAgICBoZWlnaHQ6IHNpemUsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IGFyaWFIaWRkZW4sXG4gICAgXCJhcmlhLWxhYmVsXCI6IGFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICByb2xlOiBcImltZ1wiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogcGF0aFxuICB9KSk7XG59XG5JY29uLmljb25zID0gSWNvbk5hbWVzO1xuSWNvbi5wcm9wVHlwZXMgPSB7XG4gIGFjY2Vzc2liaWxpdHlMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnYmx1ZScsICdkYXJrR3JheScsICdlZ2dwbGFudCcsICdncmF5JywgJ2dyZWVuJywgJ2xpZ2h0R3JheScsICdtYXJvb24nLCAnbWlkbmlnaHQnLCAnbmF2eScsICdvbGl2ZScsICdvcmFuZ2UnLCAnb3JjaGlkJywgJ3BpbmUnLCAncHVycGxlJywgJ3JlZCcsICd3YXRlcm1lbG9uJywgJ3doaXRlJ10pLFxuICBkYW5nZXJvdXNseVNldFN2Z1BhdGg6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19wYXRoOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLFxuICBpY29uOiBQcm9wVHlwZXMub25lT2YoSWNvbk5hbWVzKSxcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59O1xuXG52YXIgc3R5bGVzJDIgPSB7XCJpbWdcIjpcImhDTCBrVmMgTDRFIE1Jd1wiLFwic2NhbGVkLWltZ1wiOlwiUEM0IFhpR1wiLFwiY29udGFpblwiOlwiSndyIFBDNCBYaUdcIixcImNvdmVyXCI6XCJ6SUggUEM0IFhpR1wifTtcblxudmFyIHNob3VsZFNjYWxlSW1hZ2UgPSBmdW5jdGlvbiBzaG91bGRTY2FsZUltYWdlKGZpdCkge1xuICByZXR1cm4gZml0ID09PSAnY292ZXInIHx8IGZpdCA9PT0gJ2NvbnRhaW4nO1xufTtcblxudmFyIEltYWdlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSW1hZ2UsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEltYWdlKTtcblxuICBmdW5jdGlvbiBJbWFnZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW1hZ2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVMb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkxvYWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Mb2FkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXJyb3IpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FcnJvcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEltYWdlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmIChzaG91bGRTY2FsZUltYWdlKHRoaXMucHJvcHMuZml0KSkge1xuICAgICAgICB0aGlzLmxvYWRJbWFnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBmaXQgPSBfdGhpcyRwcm9wcy5maXQsXG4gICAgICAgICAgc3JjID0gX3RoaXMkcHJvcHMuc3JjO1xuXG4gICAgICBpZiAoc2hvdWxkU2NhbGVJbWFnZShmaXQpICYmIHByZXZQcm9wcy5zcmMgIT09IHNyYykge1xuICAgICAgICB0aGlzLmxvYWRJbWFnZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkSW1hZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZEltYWdlKCkge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gdGhpcy5oYW5kbGVMb2FkO1xuICAgICAgICBpbWFnZS5vbmVycm9yID0gdGhpcy5oYW5kbGVFcnJvcjtcbiAgICAgICAgaW1hZ2Uuc3JjID0gdGhpcy5wcm9wcy5zcmM7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbHQgPSBfdGhpcyRwcm9wczIuYWx0LFxuICAgICAgICAgIGNvbG9yID0gX3RoaXMkcHJvcHMyLmNvbG9yLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGZpdCA9IF90aGlzJHByb3BzMi5maXQsXG4gICAgICAgICAgaW1wb3J0YW5jZSA9IF90aGlzJHByb3BzMi5pbXBvcnRhbmNlLFxuICAgICAgICAgIGxvYWRpbmcgPSBfdGhpcyRwcm9wczIubG9hZGluZyxcbiAgICAgICAgICBuYXR1cmFsSGVpZ2h0ID0gX3RoaXMkcHJvcHMyLm5hdHVyYWxIZWlnaHQsXG4gICAgICAgICAgbmF0dXJhbFdpZHRoID0gX3RoaXMkcHJvcHMyLm5hdHVyYWxXaWR0aCxcbiAgICAgICAgICBzaXplcyA9IF90aGlzJHByb3BzMi5zaXplcyxcbiAgICAgICAgICBzcmMgPSBfdGhpcyRwcm9wczIuc3JjLFxuICAgICAgICAgIHNyY1NldCA9IF90aGlzJHByb3BzMi5zcmNTZXQ7XG4gICAgICB2YXIgaXNTY2FsZWRJbWFnZSA9IHNob3VsZFNjYWxlSW1hZ2UoZml0KTtcbiAgICAgIHZhciBjaGlsZENvbnRlbnQgPSBjaGlsZHJlbiA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgIGxlZnQ6IHRydWUsXG4gICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgcmlnaHQ6IHRydWUsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiXG4gICAgICB9LCBjaGlsZHJlbikgOiBudWxsO1xuICAgICAgcmV0dXJuIGlzU2NhbGVkSW1hZ2UgPyAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhbHQsXG4gICAgICAgIGNsYXNzTmFtZTogZml0ID09PSAnY29udGFpbicgfHwgZml0ID09PSAnY292ZXInID8gc3R5bGVzJDJbZml0XSA6IG51bGwsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IFwidXJsKCdcIi5jb25jYXQoc3JjLCBcIicpXCIpXG4gICAgICAgIH0sXG4gICAgICAgIHJvbGU6IFwiaW1nXCJcbiAgICAgIH0sIGNoaWxkQ29udGVudCkgOiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiBcIlwiLmNvbmNhdChuYXR1cmFsSGVpZ2h0IC8gbmF0dXJhbFdpZHRoICogMTAwLCBcIiVcIilcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHtcbiAgICAgICAgYWx0OiBhbHQsXG4gICAgICAgIGNsYXNzTmFtZTogc3R5bGVzJDIuaW1nLFxuICAgICAgICBpbXBvcnRhbmNlOiBpbXBvcnRhbmNlLFxuICAgICAgICBsb2FkaW5nOiBsb2FkaW5nLFxuICAgICAgICBvbkVycm9yOiB0aGlzLmhhbmRsZUVycm9yLFxuICAgICAgICBvbkxvYWQ6IHRoaXMuaGFuZGxlTG9hZCxcbiAgICAgICAgc2l6ZXM6IHNpemVzLFxuICAgICAgICBzcmM6IHNyYyxcbiAgICAgICAgc3JjU2V0OiBzcmNTZXRcbiAgICAgIH0pLCBjaGlsZENvbnRlbnQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbWFnZTtcbn0oUHVyZUNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShJbWFnZSwgXCJwcm9wVHlwZXNcIiwge1xuICBhbHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgZml0OiBQcm9wVHlwZXMub25lT2YoWydjb250YWluJywgJ2NvdmVyJywgJ25vbmUnXSksXG4gIGltcG9ydGFuY2U6IFByb3BUeXBlcy5vbmVPZihbJ2hpZ2gnLCAnbG93JywgJ2F1dG8nXSksXG4gIGxvYWRpbmc6IFByb3BUeXBlcy5vbmVPZihbJ2VhZ2VyJywgJ2xhenknLCAnYXV0byddKSxcbiAgbmF0dXJhbEhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBuYXR1cmFsV2lkdGg6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uTG9hZDogUHJvcFR5cGVzLmZ1bmMsXG4gIHNpemVzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3JjU2V0OiBQcm9wVHlwZXMuc3RyaW5nXG59KTtcblxuX2RlZmluZVByb3BlcnR5KEltYWdlLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNvbG9yOiAndHJhbnNwYXJlbnQnLFxuICBmaXQ6ICdub25lJyxcbiAgaW1wb3J0YW5jZTogJ2F1dG8nLFxuICBsb2FkaW5nOiAnYXV0bydcbn0pO1xuXG52YXIgc3R5bGVzJDMgPSB7XCJNYXNrXCI6XCJQajcgc0xHIFhpR1wiLFwid2lsbENoYW5nZVRyYW5zZm9ybVwiOlwibTFlXCIsXCJ3YXNoXCI6XCJLUGMgTUl3IG9qTiBSeW0gcDZWIFFMWVwifTtcblxudmFyIGdldFJvdW5kaW5nU3R5bGUgPSBmdW5jdGlvbiBnZXRSb3VuZGluZ1N0eWxlKHIpIHtcbiAgaWYgKHR5cGVvZiByID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBiaW5kKHJhbmdlKCdyb3VuZGluZycpLCBib3JkZXJzKShyKTtcbiAgfVxuXG4gIGlmIChyID09PSAnY2lyY2xlJykge1xuICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKGJvcmRlcnMuY2lyY2xlKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGl0eSgpO1xufTtcblxuZnVuY3Rpb24gTWFzayhwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRyb3VuZGluZyA9IHByb3BzLnJvdW5kaW5nLFxuICAgICAgcm91bmRpbmcgPSBfcHJvcHMkcm91bmRpbmcgPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkcm91bmRpbmcsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgX3Byb3BzJHdpbGxDaGFuZ2VUcmFuID0gcHJvcHMud2lsbENoYW5nZVRyYW5zZm9ybSxcbiAgICAgIHdpbGxDaGFuZ2VUcmFuc2Zvcm0gPSBfcHJvcHMkd2lsbENoYW5nZVRyYW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkd2lsbENoYW5nZVRyYW4sXG4gICAgICBfcHJvcHMkd2FzaCA9IHByb3BzLndhc2gsXG4gICAgICB3YXNoID0gX3Byb3BzJHdhc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHdhc2g7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKHN0eWxlcyQzLk1hc2ssIHRvUHJvcHMoZ2V0Um91bmRpbmdTdHlsZShyb3VuZGluZykpLmNsYXNzTmFtZSwgX2RlZmluZVByb3BlcnR5KHt9LCBzdHlsZXMkMy53aWxsQ2hhbmdlVHJhbnNmb3JtLCB3aWxsQ2hhbmdlVHJhbnNmb3JtKSksXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgfVxuICB9LCBjaGlsZHJlbiwgd2FzaCAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkMy53YXNoXG4gIH0pKTtcbn1cbnZhciBSb3VuZGluZ1Byb3BUeXBlJDEgPSBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsICdjaXJjbGUnXSk7XG5NYXNrLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgcm91bmRpbmc6IFJvdW5kaW5nUHJvcFR5cGUkMSxcbiAgd2lkdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgd2lsbENoYW5nZVRyYW5zZm9ybTogUHJvcFR5cGVzLmJvb2wsXG4gIHdhc2g6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgdHlwb2dyYXBoeSA9IHtcImFudGlhbGlhc2VkXCI6XCJkeUhcIixcInNhbnNTZXJpZlwiOlwiaUZjXCIsXCJmb250V2VpZ2h0Tm9ybWFsXCI6XCJzd0dcIixcImZvbnRXZWlnaHRCb2xkXCI6XCJtV2VcIixcImZvbnRTdHlsZVJlZ3VsYXJcIjpcIlZFa1wiLFwiZm9udFN0eWxlSXRhbGljXCI6XCJTVm1cIixcInVuZGVybGluZVwiOlwiUjdhXCIsXCJub1VuZGVybGluZVwiOlwieFE0XCIsXCJicmVha1dvcmRcIjpcIklaVFwiLFwidHJ1bmNhdGVcIjpcInotNlwiLFwiYWxpZ25MZWZ0XCI6XCJEckRcIixcImFsaWduUmlnaHRcIjpcIkowWFwiLFwiYWxpZ25DZW50ZXJcIjpcInRnN1wiLFwiYWxpZ25KdXN0aWZ5XCI6XCJzZGJcIn07XG5cbnZhciBTcXVhcmUgPSBmdW5jdGlvbiBTcXVhcmUocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIlxuICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgX19zdHlsZToge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiAnMTAwJSdcbiAgICAgIH1cbiAgICB9LFxuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCJcbiAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiB0cnVlLFxuICAgIGxlZnQ6IHRydWUsXG4gICAgYm90dG9tOiB0cnVlLFxuICAgIHJpZ2h0OiB0cnVlXG4gIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59O1xuXG52YXIgRGVmYXVsdEF2YXRhciA9IGZ1bmN0aW9uIERlZmF1bHRBdmF0YXIoX3JlZikge1xuICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIHVzZURlZmF1bHRJY29uID0gX3JlZi51c2VEZWZhdWx0SWNvbjtcbiAgdmFyIGZpcnN0SW5pdGlhbCA9IG5hbWUgPyBfdG9Db25zdW1hYmxlQXJyYXkobmFtZSlbMF0udG9VcHBlckNhc2UoKSA6ICcnO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoU3F1YXJlLCB7XG4gICAgY29sb3I6IFwibGlnaHRHcmF5XCIsXG4gICAgcm91bmRpbmc6IFwiY2lyY2xlXCIsXG4gICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcbiAgfSwgdXNlRGVmYXVsdEljb24gfHwgIWZpcnN0SW5pdGlhbCA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBcInhNaWRZTWlkIG1lZXRcIixcbiAgICByb2xlOiBcImltZ1wiLFxuICAgIHZlcnNpb246IFwiMS4xXCIsXG4gICAgdmlld0JveDogXCItMyAtOCAzMCAxMDBcIixcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIH0sIG5hbWUgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCBuYW1lKSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBQZXJzb25TdmcsXG4gICAgZmlsbDogXCIjMTExXCJcbiAgfSkpIDogLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICB2aWV3Qm94OiBcIi01MCAtNTAgMTAwIDEwMFwiLFxuICAgIHZlcnNpb246IFwiMS4xXCIsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZCBtZWV0XCIsXG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInRpdGxlXCIsIG51bGwsIG5hbWUpLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInRleHRcIiwge1xuICAgIGZvbnRTaXplOiBcIjQwcHhcIixcbiAgICBmaWxsOiBcIiMxMTFcIixcbiAgICBkeTogXCIwLjM1ZW1cIixcbiAgICB0ZXh0QW5jaG9yOiBcIm1pZGRsZVwiLFxuICAgIGNsYXNzTmFtZTogW3R5cG9ncmFwaHkuYW50aWFsaWFzZWQsIHR5cG9ncmFwaHkuc2Fuc1NlcmlmLCB0eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkXS5qb2luKCcgJylcbiAgfSwgZmlyc3RJbml0aWFsKSkpO1xufTtcblxudmFyIHNpemVzID0ge1xuICB4czogMjQsXG4gIHNtOiAzMixcbiAgbWQ6IDQ4LFxuICBsZzogNjQsXG4gIHhsOiAxMjBcbn07XG5mdW5jdGlvbiBBdmF0YXIocHJvcHMpIHtcbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IHVzZVN0YXRlKHRydWUpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBpc0ltYWdlTG9hZGVkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldElzSW1hZ2VMb2FkZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG91dGxpbmUgPSBwcm9wcy5vdXRsaW5lLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnZml0JyA6IF9wcm9wcyRzaXplLFxuICAgICAgc3JjID0gcHJvcHMuc3JjLFxuICAgICAgdmVyaWZpZWQgPSBwcm9wcy52ZXJpZmllZCxcbiAgICAgIF9wcm9wcyRfX2Rhbmdlcm91c2x5VSA9IHByb3BzLl9fZGFuZ2Vyb3VzbHlVc2VEZWZhdWx0SWNvbixcbiAgICAgIHVzZURlZmF1bHRJY29uID0gX3Byb3BzJF9fZGFuZ2Vyb3VzbHlVID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRfX2Rhbmdlcm91c2x5VTtcbiAgdmFyIHdpZHRoID0gc2l6ZSA9PT0gJ2ZpdCcgPyAnMTAwJScgOiBzaXplc1tzaXplXTtcbiAgdmFyIGhlaWdodCA9IHNpemUgPT09ICdmaXQnID8gJycgOiBzaXplc1tzaXplXTtcblxuICB2YXIgaGFuZGxlSW1hZ2VFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUltYWdlRXJyb3IoKSB7XG4gICAgcmV0dXJuIHNldElzSW1hZ2VMb2FkZWQoZmFsc2UpO1xuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIF9leHRlbmRzKHtcbiAgICBjb2xvcjogXCJ3aGl0ZVwiXG4gIH0sIG91dGxpbmUgPyB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgX19zdHlsZToge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAxcHggI2ZmZidcbiAgICAgIH1cbiAgICB9XG4gIH0gOiB7fSwge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIHJvdW5kaW5nOiBcImNpcmNsZVwiXG4gIH0pLCBzcmMgJiYgaXNJbWFnZUxvYWRlZCA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE1hc2ssIHtcbiAgICByb3VuZGluZzogXCJjaXJjbGVcIixcbiAgICB3YXNoOiB0cnVlXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEltYWdlLCB7XG4gICAgYWx0OiBuYW1lLFxuICAgIGNvbG9yOiBcIiNFRkVGRUZcIixcbiAgICBuYXR1cmFsSGVpZ2h0OiAxLFxuICAgIG5hdHVyYWxXaWR0aDogMSxcbiAgICBzcmM6IHNyYyxcbiAgICBvbkVycm9yOiBoYW5kbGVJbWFnZUVycm9yXG4gIH0pKSA6IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KERlZmF1bHRBdmF0YXIsIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHVzZURlZmF1bHRJY29uOiB1c2VEZWZhdWx0SWNvblxuICB9KSwgdmVyaWZpZWQgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICB3aWR0aDogXCIyNSVcIixcbiAgICBoZWlnaHQ6IFwiMjUlXCIsXG4gICAgbWluV2lkdGg6IDEyLFxuICAgIG1pbkhlaWdodDogMTIsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgX19zdHlsZToge1xuICAgICAgICBib3R0b206ICc0JScsXG4gICAgICAgIHJpZ2h0OiAnNCUnXG4gICAgICB9XG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgIHJvdW5kaW5nOiBcImNpcmNsZVwiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICBjb2xvcjogXCJyZWRcIixcbiAgICBpY29uOiBcImNoZWNrLWNpcmNsZVwiLFxuICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogXCJcIixcbiAgICBzaXplOiBcIjEwMCVcIlxuICB9KSkpKTtcbn1cbkF2YXRhci5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgb3V0bGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIHNyYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAnZml0J10pLFxuICB2ZXJpZmllZDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbnZhciBzaXplcyQxID0ge1xuICBtZDogNDgsXG4gIGxnOiA2NFxufTtcbmZ1bmN0aW9uIEF2YXRhclBhaXIoX3JlZikge1xuICB2YXIgY29sbGFib3JhdG9ycyA9IF9yZWYuY29sbGFib3JhdG9ycyxcbiAgICAgIF9yZWYkc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHNpemUgPSBfcmVmJHNpemUgPT09IHZvaWQgMCA/ICdmaXQnIDogX3JlZiRzaXplO1xuICB2YXIgd2lkdGggPSBzaXplID09PSAnZml0JyA/ICcxMDAlJyA6IHNpemVzJDFbc2l6ZV07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBkYW5nZXJvdXNseVNldElubGluZVN0eWxlOiB7XG4gICAgICBfX3N0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206ICcxMDAlJ1xuICAgICAgfVxuICAgIH1cbiAgfSksIChjb2xsYWJvcmF0b3JzIHx8IFtdKS5zbGljZSgwLCAyKS5tYXAoZnVuY3Rpb24gKF9yZWYyLCBpbmRleCkge1xuICAgIHZhciBuYW1lID0gX3JlZjIubmFtZSxcbiAgICAgICAgc3JjID0gX3JlZjIuc3JjO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgIGtleTogXCJcIi5jb25jYXQobmFtZSwgXCItXCIpLmNvbmNhdChpbmRleCksXG4gICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgaGVpZ2h0OiBcIjc1JVwiLFxuICAgICAgd2lkdGg6IFwiNzUlXCIsXG4gICAgICBkYW5nZXJvdXNseVNldElubGluZVN0eWxlOiB7XG4gICAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgICBsZWZ0OiBpbmRleCA9PT0gMCA/IDAgOiAnMjUlJyxcbiAgICAgICAgICB0b3A6IGluZGV4ID09PSAwID8gMCA6ICcyNSUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChBdmF0YXIsIHtcbiAgICAgIHNyYzogc3JjLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIG91dGxpbmU6IHRydWVcbiAgICB9KSk7XG4gIH0pKTtcbn1cbkF2YXRhclBhaXIucHJvcFR5cGVzID0ge1xuICBjb2xsYWJvcmF0b3JzOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZXhhY3Qoe1xuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzcmM6IFByb3BUeXBlcy5zdHJpbmdcbiAgfSkpLmlzUmVxdWlyZWQsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21kJywgJ2xnJywgJ2ZpdCddKVxufTtcblxudmFyIHN0eWxlcyQ0ID0ge1wiQmFkZ2VcIjpcImJJXyBkeUggaUZjIEtoWSBQamEgZXJoIG1XZVwiLFwibWlkZGxlXCI6XCJidVlcIixcInRvcFwiOlwiRFA1XCJ9O1xuXG5mdW5jdGlvbiBCYWRnZShwcm9wcykge1xuICB2YXIgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ21pZGRsZScgOiBfcHJvcHMkcG9zaXRpb24sXG4gICAgICB0ZXh0ID0gcHJvcHMudGV4dDtcbiAgdmFyIGNzID0gY2xhc3NuYW1lcyhzdHlsZXMkNC5CYWRnZSwgc3R5bGVzJDRbcG9zaXRpb25dLCBjb2xvcnMuYmx1ZUJnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjc1xuICB9LCB0ZXh0KTtcbn1cbkJhZGdlLnByb3BUeXBlcyA9IHtcbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ21pZGRsZScsICd0b3AnXSksXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufTtcblxudmFyIHN0eWxlcyQ1ID0ge1wiYnV0dG9uXCI6XCJSQ0sgSHN1IFVTZ1wiLFwic29saWRcIjpcIkdtSCBhZG5cIixcInNtXCI6XCJEWlQgSTU2IFpyMyBDOXFcIixcIm1kXCI6XCJWeGogYVpjIFpyMyBoQS1cIixcImxnXCI6XCJGMTAgeEQ0IGZaeiBoVUNcIixcImJsb2NrXCI6XCJnbjggTDRFIGtWY1wiLFwiaW5saW5lXCI6XCJOVG0gS2hZXCIsXCJlbmFibGVkXCI6XCJoTlQgaXluIEJHN1wiLFwiZGlzYWJsZWRcIjpcIk9XdCBncFZcIixcInNlbGVjdGVkXCI6XCJHMGEgQnNGXCIsXCJncmF5XCI6XCJhX0EgZ3BWXCIsXCJyZWRcIjpcIklsNyBKcm5cIixcImJsdWVcIjpcInNLUCByVHRcIixcInRyYW5zcGFyZW50XCI6XCJxUTcgWWJZXCIsXCJ3aGl0ZVwiOlwiYm13IHFKY1wifTtcblxudmFyIHN0eWxlcyQ2ID0ge1wiVGV4dFwiOlwidEJKIGR5SCBpRmNcIixcImZvbnRTaXplMVwiOlwiX3lUXCIsXCJmb250U2l6ZTJcIjpcIk1GN1wiLFwiZm9udFNpemUzXCI6XCJ5VFpcIn07XG5cbnZhciBTSVpFX1NDQUxFID0ge1xuICBzbTogMSxcbiAgbWQ6IDIsXG4gIGxnOiAzXG59O1xuZnVuY3Rpb24gVGV4dChfcmVmKSB7XG4gIHZhciBfcmVmJGFsaWduID0gX3JlZi5hbGlnbixcbiAgICAgIGFsaWduID0gX3JlZiRhbGlnbiA9PT0gdm9pZCAwID8gJ2xlZnQnIDogX3JlZiRhbGlnbixcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIF9yZWYkY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcmVmJGNvbG9yID09PSB2b2lkIDAgPyAnZGFya0dyYXknIDogX3JlZiRjb2xvcixcbiAgICAgIF9yZWYkaW5saW5lID0gX3JlZi5pbmxpbmUsXG4gICAgICBpbmxpbmUgPSBfcmVmJGlubGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGlubGluZSxcbiAgICAgIF9yZWYkaXRhbGljID0gX3JlZi5pdGFsaWMsXG4gICAgICBpdGFsaWMgPSBfcmVmJGl0YWxpYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGl0YWxpYyxcbiAgICAgIF9yZWYkb3ZlcmZsb3cgPSBfcmVmLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3cgPSBfcmVmJG92ZXJmbG93ID09PSB2b2lkIDAgPyAnYnJlYWtXb3JkJyA6IF9yZWYkb3ZlcmZsb3csXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBzaXplID0gX3JlZiRzaXplID09PSB2b2lkIDAgPyAnbGcnIDogX3JlZiRzaXplLFxuICAgICAgX3JlZiR0cnVuY2F0ZSA9IF9yZWYudHJ1bmNhdGUsXG4gICAgICB0cnVuY2F0ZSA9IF9yZWYkdHJ1bmNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiR0cnVuY2F0ZSxcbiAgICAgIF9yZWYkd2VpZ2h0ID0gX3JlZi53ZWlnaHQsXG4gICAgICB3ZWlnaHQgPSBfcmVmJHdlaWdodCA9PT0gdm9pZCAwID8gJ25vcm1hbCcgOiBfcmVmJHdlaWdodDtcbiAgdmFyIHNjYWxlID0gU0laRV9TQ0FMRVtzaXplXTtcbiAgdmFyIGNzID0gY2xhc3NuYW1lcyhzdHlsZXMkNi5UZXh0LCBzdHlsZXMkNltcImZvbnRTaXplXCIuY29uY2F0KHNjYWxlKV0sIGNvbG9yID09PSAnYmx1ZScgJiYgY29sb3JzLmJsdWUsIGNvbG9yID09PSAnZGFya0dyYXknICYmIGNvbG9ycy5kYXJrR3JheSwgY29sb3IgPT09ICdlZ2dwbGFudCcgJiYgY29sb3JzLmVnZ3BsYW50LCBjb2xvciA9PT0gJ2dyYXknICYmIGNvbG9ycy5ncmF5LCBjb2xvciA9PT0gJ2dyZWVuJyAmJiBjb2xvcnMuZ3JlZW4sIGNvbG9yID09PSAnbGlnaHRHcmF5JyAmJiBjb2xvcnMubGlnaHRHcmF5LCBjb2xvciA9PT0gJ21hcm9vbicgJiYgY29sb3JzLm1hcm9vbiwgY29sb3IgPT09ICdtaWRuaWdodCcgJiYgY29sb3JzLm1pZG5pZ2h0LCBjb2xvciA9PT0gJ25hdnknICYmIGNvbG9ycy5uYXZ5LCBjb2xvciA9PT0gJ29saXZlJyAmJiBjb2xvcnMub2xpdmUsIGNvbG9yID09PSAnb3JhbmdlJyAmJiBjb2xvcnMub3JhbmdlLCBjb2xvciA9PT0gJ29yY2hpZCcgJiYgY29sb3JzLm9yY2hpZCwgY29sb3IgPT09ICdwaW5lJyAmJiBjb2xvcnMucGluZSwgY29sb3IgPT09ICdwdXJwbGUnICYmIGNvbG9ycy5wdXJwbGUsIGNvbG9yID09PSAncmVkJyAmJiBjb2xvcnMucmVkLCBjb2xvciA9PT0gJ3dhdGVybWVsb24nICYmIGNvbG9ycy53YXRlcm1lbG9uLCBjb2xvciA9PT0gJ3doaXRlJyAmJiBjb2xvcnMud2hpdGUsIGFsaWduID09PSAnY2VudGVyJyAmJiB0eXBvZ3JhcGh5LmFsaWduQ2VudGVyLCBhbGlnbiA9PT0gJ2p1c3RpZnknICYmIHR5cG9ncmFwaHkuYWxpZ25KdXN0aWZ5LCBhbGlnbiA9PT0gJ2xlZnQnICYmIHR5cG9ncmFwaHkuYWxpZ25MZWZ0LCBhbGlnbiA9PT0gJ3JpZ2h0JyAmJiB0eXBvZ3JhcGh5LmFsaWduUmlnaHQsIG92ZXJmbG93ID09PSAnYnJlYWtXb3JkJyAmJiB0eXBvZ3JhcGh5LmJyZWFrV29yZCwgaXRhbGljICYmIHR5cG9ncmFwaHkuZm9udFN0eWxlSXRhbGljLCB3ZWlnaHQgPT09ICdib2xkJyAmJiB0eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkLCB3ZWlnaHQgPT09ICdub3JtYWwnICYmIHR5cG9ncmFwaHkuZm9udFdlaWdodE5vcm1hbCwgdHJ1bmNhdGUgJiYgdHlwb2dyYXBoeS50cnVuY2F0ZSk7XG4gIHZhciBUYWcgPSBpbmxpbmUgPyAnc3BhbicgOiAnZGl2JztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY3NcbiAgfSwgdHJ1bmNhdGUgJiYgdHlwZW9mIGNoaWxkcmVuID09PSAnc3RyaW5nJyA/IHtcbiAgICB0aXRsZTogY2hpbGRyZW5cbiAgfSA6IG51bGwpLCBjaGlsZHJlbik7XG59XG5UZXh0LnByb3BUeXBlcyA9IHtcbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJywgJ2p1c3RpZnknXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2dyZWVuJywgJ3BpbmUnLCAnb2xpdmUnLCAnYmx1ZScsICduYXZ5JywgJ21pZG5pZ2h0JywgJ3B1cnBsZScsICdvcmNoaWQnLCAnZWdncGxhbnQnLCAnbWFyb29uJywgJ3dhdGVybWVsb24nLCAnb3JhbmdlJywgJ2RhcmtHcmF5JywgJ2dyYXknLCAnbGlnaHRHcmF5JywgJ3JlZCcsICd3aGl0ZSddKSxcbiAgaW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXRhbGljOiBQcm9wVHlwZXMuYm9vbCxcbiAgb3ZlcmZsb3c6IFByb3BUeXBlcy5vbmVPZihbJ25vcm1hbCcsICdicmVha1dvcmQnXSksXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJywgJ2xnJ10pLFxuICB0cnVuY2F0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIHdlaWdodDogUHJvcFR5cGVzLm9uZU9mKFsnYm9sZCcsICdub3JtYWwnXSlcbn07XG5cbnZhciBERUZBVUxUX1RFWFRfQ09MT1JTID0ge1xuICBibHVlOiAnd2hpdGUnLFxuICBncmF5OiAnZGFya0dyYXknLFxuICByZWQ6ICd3aGl0ZScsXG4gIHRyYW5zcGFyZW50OiAnd2hpdGUnLFxuICB3aGl0ZTogJ2RhcmtHcmF5J1xufTtcbnZhciBTSVpFX05BTUVfVE9fUElYRUwgPSB7XG4gIHNtOiAxMCxcbiAgbWQ6IDEyLFxuICBsZzogMTJcbn07XG5mdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgdmFyIF9jbGFzc25hbWVzO1xuXG4gIHZhciBhY2Nlc3NpYmlsaXR5RXhwYW5kZWQgPSBwcm9wcy5hY2Nlc3NpYmlsaXR5RXhwYW5kZWQsXG4gICAgICBhY2Nlc3NpYmlsaXR5SGFzcG9wdXAgPSBwcm9wcy5hY2Nlc3NpYmlsaXR5SGFzcG9wdXAsXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWwgPSBwcm9wcy5hY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZ3JheScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIGljb25FbmQgPSBwcm9wcy5pY29uRW5kLFxuICAgICAgX3Byb3BzJGlubGluZSA9IHByb3BzLmlubGluZSxcbiAgICAgIGlubGluZSA9IF9wcm9wcyRpbmxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGlubGluZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgX29uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgX3Byb3BzJHNlbGVjdGVkID0gcHJvcHMuc2VsZWN0ZWQsXG4gICAgICBzZWxlY3RlZCA9IF9wcm9wcyRzZWxlY3RlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc2VsZWN0ZWQsXG4gICAgICBfcHJvcHMkc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBzaXplID0gX3Byb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZCcgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHRleHQgPSBwcm9wcy50ZXh0LFxuICAgICAgdGV4dENvbG9yUHJvcCA9IHByb3BzLnRleHRDb2xvcixcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZTtcbiAgdmFyIGNsYXNzZXMgPSBjbGFzc25hbWVzKHN0eWxlcyQ1LmJ1dHRvbiwgKF9jbGFzc25hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJDUuc20sIHNpemUgPT09ICdzbScpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyQ1Lm1kLCBzaXplID09PSAnbWQnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkNS5sZywgc2l6ZSA9PT0gJ2xnJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJDUuc29saWQsIGNvbG9yICE9PSAndHJhbnNwYXJlbnQnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkNVtjb2xvcl0sICFkaXNhYmxlZCAmJiAhc2VsZWN0ZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyQ1LnNlbGVjdGVkLCAhZGlzYWJsZWQgJiYgc2VsZWN0ZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyQ1LmRpc2FibGVkLCBkaXNhYmxlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJDUuZW5hYmxlZCwgIWRpc2FibGVkKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkNS5pbmxpbmUsIGlubGluZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJDUuYmxvY2ssICFpbmxpbmUpLCBfY2xhc3NuYW1lcykpO1xuICB2YXIgdGV4dENvbG9yID0gZGlzYWJsZWQgJiYgJ2dyYXknIHx8IHNlbGVjdGVkICYmICd3aGl0ZScgfHwgdGV4dENvbG9yUHJvcCB8fCBERUZBVUxUX1RFWFRfQ09MT1JTW2NvbG9yXTtcbiAgdmFyIGJ1dHRvblRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgYWxpZ246IFwiY2VudGVyXCIsXG4gICAgY29sb3I6IHRleHRDb2xvcixcbiAgICBvdmVyZmxvdzogXCJub3JtYWxcIixcbiAgICB3ZWlnaHQ6IFwiYm9sZFwiXG4gIH0sIHRleHQpO1xuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9idXR0b24taGFzLXR5cGUgKi9cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgIFwiYXJpYS1leHBhbmRlZFwiOiBhY2Nlc3NpYmlsaXR5RXhwYW5kZWQsXG4gICAgXCJhcmlhLWhhc3BvcHVwXCI6IGFjY2Vzc2liaWxpdHlIYXNwb3B1cCxcbiAgICBcImFyaWEtbGFiZWxcIjogYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgbmFtZTogbmFtZSxcbiAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICByZXR1cm4gX29uQ2xpY2sgJiYgX29uQ2xpY2soe1xuICAgICAgICBldmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdHlwZTogdHlwZVxuICB9LCBpY29uRW5kID8gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIlxuICB9LCBidXR0b25UZXh0LCAvKiNfX1BVUkVfXyovUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBkaXNwbGF5OiBcImlubGluZUJsb2NrXCIsXG4gICAgZmxleDogXCJub25lXCIsXG4gICAgbWFyZ2luU3RhcnQ6IDJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogXCJcIixcbiAgICBjb2xvcjogdGV4dENvbG9yLFxuICAgIGljb246IGljb25FbmQsXG4gICAgc2l6ZTogU0laRV9OQU1FX1RPX1BJWEVMW3NpemVdXG4gIH0pKSkgOiBidXR0b25UZXh0KTtcbiAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9idXR0b24taGFzLXR5cGUgKi9cbn1cbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIGFjY2Vzc2liaWxpdHlFeHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGFjY2Vzc2liaWxpdHlIYXNwb3B1cDogUHJvcFR5cGVzLmJvb2wsXG4gIGFjY2Vzc2liaWxpdHlMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2JsdWUnLCAnZ3JheScsICdyZWQnLCAndHJhbnNwYXJlbnQnLCAnd2hpdGUnXSksXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaWNvbkVuZDogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKGljb25zKSksXG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJywgJ2xnJ10pLFxuICB0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRleHRDb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnd2hpdGUnLCAnZGFya0dyYXknLCAnYmx1ZScsICdyZWQnXSksXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdzdWJtaXQnXSlcbn07XG5cbnZhciBzdHlsZXMkNyA9IHtcImNhcmRcIjpcIlgteSBNSXcgRFV0IFFMWSBwNlYgb2pOIFJ5bSBqci1cIixcImhvdmVyXCI6XCJvY3ZcIixcImFuaW1hdGVJblwiOlwibUNRXCJ9O1xuXG5mdW5jdGlvbiBDYXJkKHByb3BzKSB7XG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlLCAyKSxcbiAgICAgIGhvdmVyZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0SG92ZXJlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGFjdGl2ZSA9IHByb3BzLmFjdGl2ZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBpbWFnZSA9IHByb3BzLmltYWdlLFxuICAgICAgb25Nb3VzZUVudGVyID0gcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlO1xuXG4gIHZhciBoYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcihldmVudCkge1xuICAgIHNldEhvdmVyZWQodHJ1ZSk7XG5cbiAgICBpZiAob25Nb3VzZUVudGVyKSB7XG4gICAgICBvbk1vdXNlRW50ZXIoe1xuICAgICAgICBldmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoZXZlbnQpIHtcbiAgICBzZXRIb3ZlcmVkKGZhbHNlKTtcblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZSh7XG4gICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjbGFzc2VzID0gY2xhc3NuYW1lcyhzdHlsZXMkNy5jYXJkLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyQ3LmhvdmVyLCBhY3RpdmUgfHwgYWN0aXZlID09IG51bGwgJiYgaG92ZXJlZCkpO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgb25Nb3VzZUVudGVyOiBoYW5kbGVNb3VzZUVudGVyLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gIH0sIGltYWdlICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIG1hcmdpbkJvdHRvbTogMVxuICB9LCBpbWFnZSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwgbnVsbCwgY2hpbGRyZW4pLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cbkNhcmQucHJvcFR5cGVzID0ge1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGltYWdlOiBQcm9wVHlwZXMubm9kZSxcbiAgb25Nb3VzZUVudGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIHN0eWxlcyQ4ID0ge1wiYm9yZGVyXCI6XCJMdXIgTEpCXCIsXCJib3JkZXJEYXJrR3JheVwiOlwiQlBEIG5HNVwiLFwiYm9yZGVyRGlzYWJsZWRcIjpcIm9OciBGdm9cIixcImJvcmRlckVycm9yXCI6XCJmUzQgeGJwXCIsXCJib3JkZXJIb3ZlcmVkXCI6XCJNVmogZFBZXCIsXCJib3JkZXJSYWRpdXNTbVwiOlwiVW5CIFBqYVwiLFwiYm9yZGVyUmFkaXVzTWRcIjpcIm04cyBEVXRcIixcImNoZWNrXCI6XCJRUmQga1ZjIEhzdSBfTzEgZ2p6IG1ROCBYZ0kgUHc1XCIsXCJjaGVja0ZvY3VzZWRcIjpcIktqaSBDMUpcIixcImlucHV0RW5hYmxlZFwiOlwiRjdwIEJHN1wifTtcblxudmFyIGNvbnRyb2xTdHlsZXMgPSB7XCJpbnB1dFwiOlwiTThFIE1JdyBlNDNcIixcInNpemVTbVwiOlwicnVWXCIsXCJzaXplTWRcIjpcInhwblwifTtcblxuZnVuY3Rpb24gRm9ybUVycm9yTWVzc2FnZShfcmVmKSB7XG4gIHZhciBpZCA9IF9yZWYuaWQsXG4gICAgICBfcmVmJHRleHQgPSBfcmVmLnRleHQsXG4gICAgICB0ZXh0ID0gX3JlZiR0ZXh0ID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkdGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIG1hcmdpblRvcDogMlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgY29sb3I6IFwicmVkXCIsXG4gICAgc2l6ZTogXCJzbVwiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgaWQ6IFwiXCIuY29uY2F0KGlkLCBcIi1lcnJvclwiKVxuICB9LCB0ZXh0KSkpO1xufVxuRm9ybUVycm9yTWVzc2FnZS5wcm9wVHlwZXMgPSB7XG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHRleHQ6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbnZhciBzdHlsZXMkOSA9IHtcImxhYmVsXCI6XCJQUGUga1ZjIEJHN1wifTtcblxuZnVuY3Rpb24gTGFiZWwocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBodG1sRm9yID0gcHJvcHMuaHRtbEZvcjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwibGFiZWxcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJDkubGFiZWwsXG4gICAgaHRtbEZvcjogaHRtbEZvclxuICB9LCBjaGlsZHJlbik7XG59XG5MYWJlbC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgaHRtbEZvcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiBDaGVja2JveChfcmVmKSB7XG4gIHZhciBfcmVmJGNoZWNrZWQgPSBfcmVmLmNoZWNrZWQsXG4gICAgICBjaGVja2VkID0gX3JlZiRjaGVja2VkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkY2hlY2tlZCxcbiAgICAgIF9yZWYkZGlzYWJsZWQgPSBfcmVmLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcmVmJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGlzYWJsZWQsXG4gICAgICBlcnJvck1lc3NhZ2UgPSBfcmVmLmVycm9yTWVzc2FnZSxcbiAgICAgIF9yZWYkaGFzRXJyb3IgPSBfcmVmLmhhc0Vycm9yLFxuICAgICAgaGFzRXJyb3IgPSBfcmVmJGhhc0Vycm9yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaGFzRXJyb3IsXG4gICAgICBpZCA9IF9yZWYuaWQsXG4gICAgICBfcmVmJGluZGV0ZXJtaW5hdGUgPSBfcmVmLmluZGV0ZXJtaW5hdGUsXG4gICAgICBpbmRldGVybWluYXRlID0gX3JlZiRpbmRldGVybWluYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaW5kZXRlcm1pbmF0ZSxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgX3JlZiRzaXplID0gX3JlZi5zaXplLFxuICAgICAgc2l6ZSA9IF9yZWYkc2l6ZSA9PT0gdm9pZCAwID8gJ21kJyA6IF9yZWYkc2l6ZTtcbiAgdmFyIGlucHV0RWxlbWVudCA9IHVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBmb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldEZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTMsIDIpLFxuICAgICAgaG92ZXJlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRIb3ZlciA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5wdXRFbGVtZW50ICYmIGlucHV0RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICBpbnB1dEVsZW1lbnQuY3VycmVudC5pbmRldGVybWluYXRlID0gaW5kZXRlcm1pbmF0ZTtcbiAgICB9XG4gIH0sIFtpbmRldGVybWluYXRlXSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgIGNoZWNrZWQ6IGV2ZW50LnRhcmdldC5jaGVja2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayh7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgY2hlY2tlZDogZXZlbnQuY3VycmVudFRhcmdldC5jaGVja2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhvdmVyID0gZnVuY3Rpb24gaGFuZGxlSG92ZXIoKSB7XG4gICAgc2V0SG92ZXIoIWhvdmVyZWQpO1xuICB9O1xuXG4gIHZhciBiZ1N0eWxlID0gY29sb3JzLndoaXRlQmc7XG5cbiAgaWYgKGRpc2FibGVkKSB7XG4gICAgYmdTdHlsZSA9IGNvbG9ycy5saWdodEdyYXlCZztcbiAgfSBlbHNlIGlmIChjaGVja2VkIHx8IGluZGV0ZXJtaW5hdGUpIHtcbiAgICBiZ1N0eWxlID0gY29sb3JzLmRhcmtHcmF5Qmc7XG4gIH1cblxuICB2YXIgYm9yZGVyU3R5bGUgPSBzdHlsZXMkOC5ib3JkZXI7XG5cbiAgaWYgKGRpc2FibGVkKSB7XG4gICAgYm9yZGVyU3R5bGUgPSBzdHlsZXMkOC5ib3JkZXJEaXNhYmxlZDtcbiAgfSBlbHNlIGlmICghZGlzYWJsZWQgJiYgKGNoZWNrZWQgfHwgaW5kZXRlcm1pbmF0ZSkpIHtcbiAgICBib3JkZXJTdHlsZSA9IHN0eWxlcyQ4LmJvcmRlckRhcmtHcmF5O1xuICB9IGVsc2UgaWYgKGhhc0Vycm9yIHx8IGVycm9yTWVzc2FnZSkge1xuICAgIGJvcmRlclN0eWxlID0gc3R5bGVzJDguYm9yZGVyRXJyb3I7XG4gIH0gZWxzZSBpZiAoIWRpc2FibGVkICYmIGhvdmVyZWQpIHtcbiAgICBib3JkZXJTdHlsZSA9IHN0eWxlcyQ4LmJvcmRlckhvdmVyZWQ7XG4gIH1cblxuICB2YXIgYm9yZGVyUmFkaXVzU3R5bGUgPSBzaXplID09PSAnc20nID8gc3R5bGVzJDguYm9yZGVyUmFkaXVzU20gOiBzdHlsZXMkOC5ib3JkZXJSYWRpdXNNZDtcbiAgdmFyIHN0eWxlU2l6ZSA9IHNpemUgPT09ICdzbScgPyBjb250cm9sU3R5bGVzLnNpemVTbSA6IGNvbnRyb2xTdHlsZXMuc2l6ZU1kO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcInN0YXJ0XCIsXG4gICAgbWFyZ2luTGVmdDogLTEsXG4gICAgbWFyZ2luUmlnaHQ6IC0xXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExhYmVsLCB7XG4gICAgaHRtbEZvcjogaWRcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgcGFkZGluZ1g6IDEsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcbiAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhjb250cm9sU3R5bGVzLmlucHV0LCBzdHlsZVNpemUsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc3R5bGVzJDguaW5wdXRFbmFibGVkLCAhZGlzYWJsZWQpKSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgaWQ6IGlkLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICByZXR1cm4gc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfSxcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICByZXR1cm4gc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9LFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlSG92ZXIsXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVIb3ZlcixcbiAgICByZWY6IGlucHV0RWxlbWVudCxcbiAgICB0eXBlOiBcImNoZWNrYm94XCJcbiAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoYmdTdHlsZSwgYm9yZGVyU3R5bGUsIGJvcmRlclJhZGl1c1N0eWxlLCBzdHlsZVNpemUsIHN0eWxlcyQ4LmNoZWNrLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyQ4LmNoZWNrRm9jdXNlZCwgZm9jdXNlZCkpXG4gIH0sIChjaGVja2VkIHx8IGluZGV0ZXJtaW5hdGUpICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiXCIsXG4gICAgY29sb3I6IFwid2hpdGVcIixcbiAgICBpY29uOiBpbmRldGVybWluYXRlID8gJ2Rhc2gnIDogJ2NoZWNrJyxcbiAgICBzaXplOiBzaXplID09PSAnc20nID8gOCA6IDEyXG4gIH0pKSkpLCBsYWJlbCAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMYWJlbCwge1xuICAgIGh0bWxGb3I6IGlkXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIHBhZGRpbmdYOiAxXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICBjb2xvcjogZGlzYWJsZWQgPyAnZ3JheScgOiB1bmRlZmluZWQsXG4gICAgc2l6ZTogc2l6ZSA9PT0gJ3NtJyA/ICdtZCcgOiAnbGcnXG4gIH0sIGxhYmVsKSkpKSwgZXJyb3JNZXNzYWdlICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIG1hcmdpblRvcDogMlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgY29sb3I6IFwicmVkXCIsXG4gICAgc2l6ZTogXCJzbVwiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZvcm1FcnJvck1lc3NhZ2UsIHtcbiAgICBpZDogaWQsXG4gICAgdGV4dDogZXJyb3JNZXNzYWdlXG4gIH0pKSkpO1xufVxuQ2hlY2tib3gucHJvcFR5cGVzID0ge1xuICBjaGVja2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBlcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0Vycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaW5kZXRlcm1pbmF0ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtJywgJ21kJ10pXG59O1xuXG52YXIgQ29sbGVjdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbGxlY3Rpb24sIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbGxlY3Rpb24pO1xuXG4gIGZ1bmN0aW9uIENvbGxlY3Rpb24oKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb24pO1xuXG4gICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbGxlY3Rpb24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIEl0ZW0gPSBfdGhpcyRwcm9wcy5JdGVtLFxuICAgICAgICAgIGxheW91dCQxID0gX3RoaXMkcHJvcHMubGF5b3V0LFxuICAgICAgICAgIF90aGlzJHByb3BzJHZpZXdwb3J0VCA9IF90aGlzJHByb3BzLnZpZXdwb3J0VG9wLFxuICAgICAgICAgIHZpZXdwb3J0VG9wID0gX3RoaXMkcHJvcHMkdmlld3BvcnRUID09PSB2b2lkIDAgPyAwIDogX3RoaXMkcHJvcHMkdmlld3BvcnRULFxuICAgICAgICAgIF90aGlzJHByb3BzJHZpZXdwb3J0TCA9IF90aGlzJHByb3BzLnZpZXdwb3J0TGVmdCxcbiAgICAgICAgICB2aWV3cG9ydExlZnQgPSBfdGhpcyRwcm9wcyR2aWV3cG9ydEwgPT09IHZvaWQgMCA/IDAgOiBfdGhpcyRwcm9wcyR2aWV3cG9ydEw7IC8vIENhbGN1bGF0ZSB0aGUgZnVsbCBkaW1lbnNpb25zIG9mIHRoZSBpdGVtIGxheWVyXG5cbiAgICAgIHZhciB3aWR0aCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShsYXlvdXQkMS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubGVmdCArIGl0ZW0ud2lkdGg7XG4gICAgICB9KSkpO1xuICAgICAgdmFyIGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShsYXlvdXQkMS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udG9wICsgaXRlbS5oZWlnaHQ7XG4gICAgICB9KSkpOyAvLyBEZWZhdWx0IHRoZSB2aWV3cG9ydCB0byBiZWluZyB0aGUgZnVsbCB3aWR0aCBvZiB0aGUgY29udGVudCBsYXllclxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfdGhpcyRwcm9wczIkdmlld3BvcnQgPSBfdGhpcyRwcm9wczIudmlld3BvcnRXaWR0aCxcbiAgICAgICAgICB2aWV3cG9ydFdpZHRoID0gX3RoaXMkcHJvcHMyJHZpZXdwb3J0ID09PSB2b2lkIDAgPyB3aWR0aCA6IF90aGlzJHByb3BzMiR2aWV3cG9ydCxcbiAgICAgICAgICBfdGhpcyRwcm9wczIkdmlld3BvcnQyID0gX3RoaXMkcHJvcHMyLnZpZXdwb3J0SGVpZ2h0LFxuICAgICAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gX3RoaXMkcHJvcHMyJHZpZXdwb3J0MiA9PT0gdm9pZCAwID8gaGVpZ2h0IDogX3RoaXMkcHJvcHMyJHZpZXdwb3J0MjsgLy8gQ2FsY3VsYXRlcyB3aGljaCBpdGVtcyBmcm9tIHRoZSBpdGVtIGxheWVyIHRvIHJlbmRlciBpbiB0aGUgdmlld3BvcnRcbiAgICAgIC8vIGxheWVyLlxuXG4gICAgICB2YXIgaXRlbXMgPSBsYXlvdXQkMS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcG9zaXRpb24sIGlkeCkge1xuICAgICAgICBpZiAocG9zaXRpb24udG9wICsgcG9zaXRpb24uaGVpZ2h0ID4gdmlld3BvcnRUb3AgJiYgcG9zaXRpb24udG9wIDwgdmlld3BvcnRIZWlnaHQgKyB2aWV3cG9ydFRvcCAmJiBwb3NpdGlvbi5sZWZ0IDwgdmlld3BvcnRXaWR0aCArIHZpZXdwb3J0TGVmdCAmJiBwb3NpdGlvbi5sZWZ0ICsgcG9zaXRpb24ud2lkdGggPiB2aWV3cG9ydExlZnQpIHtcbiAgICAgICAgICBhY2MucHVzaChfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgICBpZHg6IGlkeFxuICAgICAgICAgIH0sIHBvc2l0aW9uKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwgW10pO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBsYXlvdXQucmVsYXRpdmUsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH1cbiAgICAgIH0sIGl0ZW1zLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgaWR4ID0gX3JlZi5pZHgsXG4gICAgICAgICAgICBzdHlsZSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJpZHhcIl0pO1xuXG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAga2V5OiBpZHgsXG4gICAgICAgICAgY2xhc3NOYW1lOiBsYXlvdXQuYWJzb2x1dGUsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEl0ZW0sIHtcbiAgICAgICAgICBpZHg6IGlkeFxuICAgICAgICB9KSk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbGxlY3Rpb247XG59KFB1cmVDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoQ29sbGVjdGlvbiwgXCJwcm9wVHlwZXNcIiwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZm9yYmlkLXByb3AtdHlwZXNcbiAgSXRlbTogUHJvcFR5cGVzLmFueSxcbiAgbGF5b3V0OiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZXhhY3Qoe1xuICAgIHRvcDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQpLFxuICB2aWV3cG9ydEhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgdmlld3BvcnRMZWZ0OiBQcm9wVHlwZXMubnVtYmVyLFxuICB2aWV3cG9ydFRvcDogUHJvcFR5cGVzLm51bWJlcixcbiAgdmlld3BvcnRXaWR0aDogUHJvcFR5cGVzLm51bWJlclxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb2xsZWN0aW9uLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGxheW91dDogW10sXG4gIHZpZXdwb3J0TGVmdDogMCxcbiAgdmlld3BvcnRUb3A6IDBcbn0pO1xuXG4vKlxuXG5UaGlzIGZ1bmN0aW9uIGp1c3QgaW1wbGVtZW50cyB0aGUgZGVzaWduIGNvbnN0cmFpbnRzIGZvciBhc3ltZXRyaWNhbCBjb2x1bW5zIGluXG5hIHZlcnkgc2ltcGxlIHdheS4gSXQncyBub3QgcGVyZmVjdCwgYnV0IGl0J3MgdmVyeSBwcmVkaWN0aWJsZS4gSWYgeW91IGRvXG5hbnl0aGluZywgaW1wcm92ZSBpdCBzbyB0aGF0IGl0IHRha2VzIHRoZXNlIGNvbnN0cmFpbnRzIGFuZCBnZW5lcmF0ZXMgdGhlbVxuZm9yIG4gPiA0LlxuXG4xICsgbiBjb2x1bW5zOlxuICBmaXJzdCBjb2x1bW4gaXMgNTAvNTBcbiAgY2FuJ3QgaGF2ZSAzIGNvbHVtbnMgaW4gYSByb3cgYmUgNTAvNTBcblxuKi9cbnZhciBVUCA9IFswLjc1LCAwLjI1XTtcbnZhciBET1dOID0gWzAuMjUsIDAuNzVdO1xudmFyIE1JRCA9IFswLjUsIDAuNV07XG5cbnZhciBjb2x1bW5MYXlvdXQgPSBmdW5jdGlvbiBjb2x1bW5MYXlvdXQobnVtT2ZDb2x1bW5zKSB7XG4gIHN3aXRjaCAobnVtT2ZDb2x1bW5zKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFtbTUlEXSwgW1VQXSwgW0RPV05dXTtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBbW1VQLCBNSURdLCBbRE9XTiwgTUlEXSwgW01JRCwgVVBdLCBbTUlELCBET1dOXV07XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gW1tNSUQsIFVQLCBNSUQsIE1JRF0sIFtNSUQsIERPV04sIE1JRCwgTUlEXSwgW01JRCwgTUlELCBVUCwgTUlEXSwgW01JRCwgTUlELCBET1dOLCBNSURdLCBbTUlELCBVUCwgTUlELCBET1dOXSwgW01JRCwgRE9XTiwgTUlELCBVUF1dO1xuXG4gICAgY2FzZSAzOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW1tNSUQsIFVQLCBNSURdLCBbTUlELCBET1dOLCBNSURdLCBbTUlELCBNSUQsIFVQXSwgW01JRCwgTUlELCBET1dOXV07XG4gIH1cbn07XG5cbnZhciBwYWRkaW5nQWxsID0gZnVuY3Rpb24gcGFkZGluZ0FsbChndXR0ZXIsIHBvc2l0aW9ucykge1xuICByZXR1cm4gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciB0b3AgPSBfcmVmLnRvcCxcbiAgICAgICAgbGVmdCA9IF9yZWYubGVmdCxcbiAgICAgICAgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiB0b3AsXG4gICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgd2lkdGg6IHdpZHRoIC0gZ3V0dGVyLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQgLSBndXR0ZXJcbiAgICB9O1xuICB9KTtcbn07XG5cbnZhciBtaW5kZXggPSBmdW5jdGlvbiBtaW5kZXgoYXJyKSB7XG4gIHJldHVybiBhcnIucmVkdWNlKGZ1bmN0aW9uIChtaW5JbmRleCwgaXRlbSwgaSkge1xuICAgIHJldHVybiBpdGVtIDwgYXJyW21pbkluZGV4XSA/IGkgOiBtaW5JbmRleDtcbiAgfSwgMCk7XG59O1xuXG52YXIgY29sdW1uc0ZvckNvbGxhZ2VXaXRoQ292ZXIgPSBmdW5jdGlvbiBjb2x1bW5zRm9yQ29sbGFnZVdpdGhDb3ZlcihudW1PZkNvbHVtbnMpIHtcbiAgcmV0dXJuIG51bU9mQ29sdW1ucyA9PT0gNCA/IDIgOiAxO1xufTtcblxuZnVuY3Rpb24gZ2V0Q29sbGFnZUxheW91dChfcmVmMikge1xuICB2YXIgZ3V0dGVyID0gX3JlZjIuZ3V0dGVyLFxuICAgICAgY292ZXIgPSBfcmVmMi5jb3ZlcixcbiAgICAgIG51bUNvbHMgPSBfcmVmMi5jb2x1bW5zLFxuICAgICAgaCA9IF9yZWYyLmhlaWdodCxcbiAgICAgIHcgPSBfcmVmMi53aWR0aCxcbiAgICAgIGxheW91dEtleSA9IF9yZWYyLmxheW91dEtleTtcbiAgdmFyIHBvc2l0aW9ucyA9IFtdO1xuICB2YXIgd2lkdGggPSB3ICsgZ3V0dGVyO1xuICB2YXIgaGVpZ2h0ID0gaCArIGd1dHRlcjsgLy8gSWYgdGhlcmUncyBhIGNvdmVyIGltYWdlLCB3ZSdsbCBhZGQgdGhhdCBsYXRlci4gSXQgc2hvdWxkIGJlIGEgbGl0dGxlXG4gIC8vIGxlc3MgdGhhbiBoYWxmIHRoZSB3aWR0aCBvZiB0aGUgY29sbGFnZS4gV2UgZG8gdGhpcyBub3cgKGFuZCBub3QgbGF0ZXJcbiAgLy8gd2hlbiB3ZSBhZGQgdGhlIGNvdmVyIGltYWdlKSBiZWNhdXNlIG9mIGBjb2x1bW5MYXlvdXRgJ3MgY29uc3RyYWludHNcbiAgLy8gbmVlZGluZyB0aGUgZXhhY3QgbnVtYmVyIG9mIGNvbHVtbnMgdGhhdCBhcmUgZGlzcGxheWVkLlxuXG4gIHZhciBncmlkQ29scyA9IGNvdmVyID8gY29sdW1uc0ZvckNvbGxhZ2VXaXRoQ292ZXIobnVtQ29scykgOiBudW1Db2xzOyAvLyBTZWxlY3RzIHRoZSBsYXlvdXQgdGhhdCB3ZSdyZSBnb2luZyB0byB1c2UgZm9yIHRoZSBncmlkXG5cbiAgdmFyIGNvbHVtbnMgPSBjb2x1bW5MYXlvdXQoZ3JpZENvbHMpO1xuICB2YXIgbGF5b3V0SWR4ID0gbGF5b3V0S2V5ICUgY29sdW1ucy5sZW5ndGg7XG4gIHZhciBsYXlvdXQgPSBjb2x1bW5zW2xheW91dElkeF07IC8vIFRoaXMgZG9lcyBhIHJlYWxseSBzaW1wbGUgdmVyc2lvbiBvZiBvdXIgbWFzb25yeSBsYXlvdXQuIFdoeSByZXBsaWNhdGVcbiAgLy8gdGhhdCBoZXJlPyBhLikgZmV3ZXIgZGVwZW5kZW5jaWVzIGFuZCBiLikgd2UgbmVlZCB0aGUgYWxnb3JpdGhtIHRvXG4gIC8vIHJvdWdobHkgcHJlc2VydmUgdGhlIG9yZGVyIG9mIHRoZSBjb2xsYWdlcyBmcm9tIHdoZW4gdGhleSB3ZXJlIG9yZGVyZWRcbiAgLy8gYnkgTWFzb25yeS5cblxuICB2YXIgY29sSGVpZ2h0cyA9IG5ldyBBcnJheShncmlkQ29scykuZmlsbCgwKTtcbiAgdmFyIGNvbENvdW50cyA9IG5ldyBBcnJheShncmlkQ29scykuZmlsbCgwKTsgLy8gV2UgaXRlcmF0ZSBvdmVyIGV2ZXJ5IHBvc2l0aW9uIHRoYXQgd2UgdGhpbmsgd2UgY291bGQgX3BvdGVudGlhbGx5XyBoYXZlXG4gIC8vIHNvIHRoYXQgd2UgY2FuIGZpbGwgdGhlbSB3aXRoIGVtcHR5IHNlY3Rpb25zIGlmIG5lZWQgYmUuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAyICogZ3JpZENvbHM7IGkgKz0gMSkge1xuICAgIHZhciBjb2wgPSBtaW5kZXgoY29sSGVpZ2h0cyk7XG4gICAgdmFyIGNvbElkeCA9IGNvbENvdW50c1tjb2xdO1xuICAgIHZhciBpdGVtSGVpZ2h0ID0gbGF5b3V0W2NvbF1bY29sSWR4XSAqIGhlaWdodDtcbiAgICBwb3NpdGlvbnMucHVzaCh7XG4gICAgICB0b3A6IGNvbEhlaWdodHNbY29sXSxcbiAgICAgIGxlZnQ6IGNvbCAqICh3aWR0aCAvIG51bUNvbHMpLFxuICAgICAgd2lkdGg6IHdpZHRoIC8gbnVtQ29scyxcbiAgICAgIGhlaWdodDogaXRlbUhlaWdodFxuICAgIH0pO1xuICAgIGNvbEhlaWdodHNbY29sXSArPSBpdGVtSGVpZ2h0O1xuICAgIGNvbENvdW50c1tjb2xdICs9IDE7XG4gIH0gLy8gSWYgd2UgaGF2ZSBhIGNvdmVyIGltYWdlLCBmaWd1cmUgb3V0IGhvdyBiaWcgaXQgaXMsIHRoZW4gbW92ZSBhbGwgdGhlXG4gIC8vIGV4aXN0aW5nIGNvbHVtbnMgb3Zlci5cblxuXG4gIGlmIChjb3Zlcikge1xuICAgIHZhciBjb3ZlckltYWdlV2lkdGggPSBNYXRoLmNlaWwobnVtQ29scyAvIDIpICogKHdpZHRoIC8gbnVtQ29scyk7XG4gICAgcG9zaXRpb25zID0gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgcG9zaXRpb24pLCB7fSwge1xuICAgICAgICBsZWZ0OiBjb3ZlckltYWdlV2lkdGggKyBwb3NpdGlvbi5sZWZ0XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBwb3NpdGlvbnMudW5zaGlmdCh7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6IGNvdmVySW1hZ2VXaWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgfSk7XG4gIH0gLy8gVGhpcyBhZGRzIHRoZSBzcGFjZSBiZXR3ZWVuIGFueSBpdGVtcyB0aGF0IHdlIGhhdmUuIEl0J3MgbmljZSB0byBkb1xuICAvLyB0aGlzIGFzIGEgc2VwYXJhdGUgcGFzcyBhZnRlciBldmVyeXRoaW5nIGVsc2UsIGJlY2F1c2UgdGhlIG1hdGggZWFybGllclxuICAvLyBiZWNvbWVzIGVhc2llciBhbmQgaXQncyBsZXNzIGJyaXR0bGUgdG8gY2hhbmdlLlxuXG5cbiAgaWYgKGd1dHRlcikge1xuICAgIHBvc2l0aW9ucyA9IHBhZGRpbmdBbGwoZ3V0dGVyLCBwb3NpdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9ucztcbn1cblxuZnVuY3Rpb24gQ29sbGFnZShwcm9wcykge1xuICB2YXIgY29sdW1ucyA9IHByb3BzLmNvbHVtbnMsXG4gICAgICBjb3ZlciA9IHByb3BzLmNvdmVyLFxuICAgICAgZ3V0dGVyID0gcHJvcHMuZ3V0dGVyLFxuICAgICAgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0LFxuICAgICAgbGF5b3V0S2V5ID0gcHJvcHMubGF5b3V0S2V5LFxuICAgICAgcmVuZGVySW1hZ2UgPSBwcm9wcy5yZW5kZXJJbWFnZSxcbiAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7XG4gIHZhciBwb3NpdGlvbnMgPSBnZXRDb2xsYWdlTGF5b3V0KHtcbiAgICBjb2x1bW5zOiBjb2x1bW5zLFxuICAgIGNvdmVyOiAhIWNvdmVyLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBndXR0ZXI6IGd1dHRlciB8fCAwLFxuICAgIGxheW91dEtleTogbGF5b3V0S2V5IHx8IDBcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb2xsZWN0aW9uLCB7XG4gICAgSXRlbTogZnVuY3Rpb24gSXRlbShfcmVmMykge1xuICAgICAgdmFyIGluZGV4ID0gX3JlZjMuaWR4O1xuICAgICAgcmV0dXJuIHJlbmRlckltYWdlKHtcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICB3aWR0aDogcG9zaXRpb25zW2luZGV4XS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBwb3NpdGlvbnNbaW5kZXhdLmhlaWdodFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBsYXlvdXQ6IHBvc2l0aW9uc1xuICB9KTtcbn1cbkNvbGxhZ2UucHJvcFR5cGVzID0ge1xuICBjb2x1bW5zOiBQcm9wVHlwZXMub25lT2YoWzIsIDMsIDRdKS5pc1JlcXVpcmVkLFxuICBjb3ZlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGd1dHRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGxheW91dEtleTogUHJvcFR5cGVzLm51bWJlcixcbiAgcmVuZGVySW1hZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn07XG5cbnZhciBzdHlsZXMkYSA9IHtcImRlcHJlY2F0ZWRDb2x1bW5cIjpcInhLUVwiLFwieHNDb2wwXCI6XCJOT05cIixcInhzQ29sMVwiOlwiRnUxIHdBN1wiLFwieHNDb2wyXCI6XCJvem8gc3h5XCIsXCJ4c0NvbDNcIjpcIlRQVyB4RVdcIixcInhzQ29sNFwiOlwiV3ZqIE1SRVwiLFwieHNDb2w1XCI6XCJ4VmIgdFlHXCIsXCJ4c0NvbDZcIjpcInBjRCBVSGNcIixcInhzQ29sN1wiOlwicjd6IG9qZFwiLFwieHNDb2w4XCI6XCJxQVEgUFgtXCIsXCJ4c0NvbDlcIjpcIndBYSBRZnJcIixcInhzQ29sMTBcIjpcImdkOCB2ZFBcIixcInhzQ29sMTFcIjpcImxoeCBrYVBcIixcInhzQ29sMTJcIjpcIllvRyBMNEVcIixcInNtQ29sMFwiOlwiTXd4XCIsXCJzbUNvbDFcIjpcImh5RSBEamNcIixcInNtQ29sMlwiOlwiajQ0IHRhclwiLFwic21Db2wzXCI6XCJzN0EgUVMzXCIsXCJzbUNvbDRcIjpcIlNPQyBWX0xcIixcInNtQ29sNVwiOlwiVU8tIGtoMVwiLFwic21Db2w2XCI6XCJQYVcgRnVlXCIsXCJzbUNvbDdcIjpcIm1ELSBjZ0JcIixcInNtQ29sOFwiOlwiRlNQIERrTVwiLFwic21Db2w5XCI6XCJ0VlUgQVhoXCIsXCJzbUNvbDEwXCI6XCJPbE4gVXRNXCIsXCJzbUNvbDExXCI6XCJFRVcgV3l5XCIsXCJzbUNvbDEyXCI6XCJIcXQgZFhDXCIsXCJtZENvbDBcIjpcImlzNlwiLFwibWRDb2wxXCI6XCJZQWwgVThxXCIsXCJtZENvbDJcIjpcIk41TCBzaHhcIixcIm1kQ29sM1wiOlwib3d5IEVHbVwiLFwibWRDb2w0XCI6XCJabmYgWE1wXCIsXCJtZENvbDVcIjpcIkJMbSBIMlFcIixcIm1kQ29sNlwiOlwiZjFnIEhIY1wiLFwibWRDb2w3XCI6XCJMT0UgSldyXCIsXCJtZENvbDhcIjpcIlVVMyBoNUJcIixcIm1kQ29sOVwiOlwiWHlEIEVlYlwiLFwibWRDb2wxMFwiOlwiSTRUIFRJb1wiLFwibWRDb2wxMVwiOlwiRjktIHJQRVwiLFwibWRDb2wxMlwiOlwibTRVIFF3S1wiLFwibGdDb2wwXCI6XCJTemVcIixcImxnQ29sMVwiOlwidF9sIFZTYVwiLFwibGdDb2wyXCI6XCJUSVogYW1sXCIsXCJsZ0NvbDNcIjpcInFXSSBodWtcIixcImxnQ29sNFwiOlwib1kyIFZualwiLFwibGdDb2w1XCI6XCJfYkggS2daXCIsXCJsZ0NvbDZcIjpcImt3VyBjMkFcIixcImxnQ29sN1wiOlwiQmlZIElHZFwiLFwibGdDb2w4XCI6XCJrbF8gaE1mXCIsXCJsZ0NvbDlcIjpcInVWeiBzd2hcIixcImxnQ29sMTBcIjpcImpnZCBIczBcIixcImxnQ29sMTFcIjpcIlVaUCBZWEVcIixcImxnQ29sMTJcIjpcIk1GdiBYVHBcIn07XG5cbmZ1bmN0aW9uIENvbHVtbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgdmFyIGNzID0gY2xhc3NuYW1lcygocHJvcHMueHMgIT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zbSAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLm1kICE9PSB1bmRlZmluZWQgfHwgcHJvcHMubGcgIT09IHVuZGVmaW5lZCkgJiYgc3R5bGVzJGEuZGVwcmVjYXRlZENvbHVtbiwgcHJvcHMueHMgJiYgc3R5bGVzJGFbXCJ4c0NvbFwiLmNvbmNhdChwcm9wcy54cyldLCBwcm9wcy5zbSAmJiBzdHlsZXMkYVtcInNtQ29sXCIuY29uY2F0KHByb3BzLnNtKV0sIHByb3BzLm1kICYmIHN0eWxlcyRhW1wibWRDb2xcIi5jb25jYXQocHJvcHMubWQpXSwgcHJvcHMubGcgJiYgc3R5bGVzJGFbXCJsZ0NvbFwiLmNvbmNhdChwcm9wcy5sZyldLCBwcm9wcy5zcGFuICE9IG51bGwgJiYgc3R5bGVzJGFbXCJ4c0NvbFwiLmNvbmNhdChwcm9wcy5zcGFuKV0sIHByb3BzLnNtU3BhbiAhPSBudWxsICYmIHN0eWxlcyRhW1wic21Db2xcIi5jb25jYXQocHJvcHMuc21TcGFuKV0sIHByb3BzLm1kU3BhbiAhPSBudWxsICYmIHN0eWxlcyRhW1wibWRDb2xcIi5jb25jYXQocHJvcHMubWRTcGFuKV0sIHByb3BzLmxnU3BhbiAhPSBudWxsICYmIHN0eWxlcyRhW1wibGdDb2xcIi5jb25jYXQocHJvcHMubGdTcGFuKV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY3NcbiAgfSwgY2hpbGRyZW4pO1xufVxuQ29sdW1uLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICB4czogUHJvcFR5cGVzLm51bWJlcixcbiAgc206IFByb3BUeXBlcy5udW1iZXIsXG4gIG1kOiBQcm9wVHlwZXMubnVtYmVyLFxuICBsZzogUHJvcFR5cGVzLm51bWJlcixcbiAgc3BhbjogUHJvcFR5cGVzLm51bWJlcixcbiAgc21TcGFuOiBQcm9wVHlwZXMubnVtYmVyLFxuICBtZFNwYW46IFByb3BUeXBlcy5udW1iZXIsXG4gIGxnU3BhbjogUHJvcFR5cGVzLm51bWJlclxufTtcblxuZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgZGlzcGxheTogXCJmbGV4XCJcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgbWF4V2lkdGg6IDgwMCxcbiAgICB3aWR0aDogXCIxMDAlXCJcbiAgfSwgY2hpbGRyZW4pKTtcbn1cbkNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxudmFyIHN0eWxlcyRiID0ge1wiZGl2aWRlclwiOlwiREo5IGtWYyB1TnUgZTQzXCJ9O1xuXG5mdW5jdGlvbiBEaXZpZGVyKCkge1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJoclwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkYi5kaXZpZGVyXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBDYXJldChwcm9wcykge1xuICB2YXIgZGlyZWN0aW9uID0gcHJvcHMuZGlyZWN0aW9uO1xuICB2YXIgcGF0aDtcblxuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgJ3VwJzpcbiAgICAgIHBhdGggPSAnTTAgMCBMMTIgMTIgTDI0IDAnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBwYXRoID0gJ00yNCAwIEwxMiAxMiBMMjQgMjQnO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkb3duJzpcbiAgICAgIHBhdGggPSAnTTAgMjQgTDEyIDEyIEwyNCAyNCc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcGF0aCA9ICdNMCAwIEwxMiAxMiBMMCAyNCc7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInN2Z1wiLCB7XG4gICAgd2lkdGg6IFwiMjRcIixcbiAgICBoZWlnaHQ6IFwiMjRcIlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IHBhdGhcbiAgfSkpO1xufVxuQ2FyZXQucHJvcFR5cGVzID0ge1xuICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3VwJywgJ3JpZ2h0JywgJ2Rvd24nLCAnbGVmdCddKVxufTtcblxudmFyIHN0eWxlcyRjID0ge1wiY29udGFpbmVyXCI6XCJZRHggTUl3XCIsXCJjb250ZW50c1wiOlwiZmxsIGtWYyBIc3VcIixcImJvcmRlclwiOlwiRGw3XCIsXCJtYXhEaW1lbnNpb25zXCI6XCJESEhcIixcIm1pbkRpbWVuc2lvbnNcIjpcImtGaFwiLFwiaW5uZXJDb250ZW50c1wiOlwieWdqIF9PMSBYYlRcIixcImNhcmV0XCI6XCJCUjkgTUl3XCJ9O1xuXG4vKiBOZWVkZWQgdW50aWwgdGhpcyBGbG93IGlzc3VlIGlzIGZpeGVkOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMzgwICovXG5cbi8qIGVzbGludCBxdW90ZS1wcm9wczogMCAqL1xuXG52YXIgU1BBQ0VTX0lOREVYX01BUCA9IHtcbiAgJzAnOiAndXAnLFxuICAnMSc6ICdyaWdodCcsXG4gICcyJzogJ2Rvd24nLFxuICAnMyc6ICdsZWZ0J1xufTtcbnZhciBESVJfSU5ERVhfTUFQID0ge1xuICB1cDogMCxcbiAgcmlnaHQ6IDEsXG4gIGRvd246IDIsXG4gIGxlZnQ6IDNcbn07XG52YXIgTUFSR0lOID0gMjQ7XG52YXIgQ0FSRVRfSEVJR0hUID0gMjQ7XG52YXIgQ0FSRVRfT0ZGU0VUX0ZST01fU0lERSA9IDI0O1xudmFyIEJPUkRFUl9SQURJVVMgPSA4O1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIG1haW4gZGlyZWN0aW9uIHRoZSBmbHlvdXQgb3BlbnNcbiAqL1xuZnVuY3Rpb24gZ2V0TWFpbkRpcihmbHlvdXRTaXplLCBpZGVhbERpcmVjdGlvbiwgdHJpZ2dlclJlY3QsIHdpbmRvd1NpemUpIHtcbiAgLy8gQ2FsY3VsYXRlcyB0aGUgYXZhaWxhYmxlIHNwYWNlIGlmIHdlIHdlcmUgdG8gcGxhY2UgdGhlIGZseW91dCBpbiB0aGUgNCBtYWluIGRpcmVjdGlvbnNcbiAgLy8gdG8gZGV0ZXJtaW5lIHdoaWNoICdxdWFkcmFudCcgdG8gcG9zaXRpb24gdGhlIGZseW91dCBpbnNpZGUgb2ZcbiAgdmFyIHVwID0gdHJpZ2dlclJlY3QudG9wIC0gZmx5b3V0U2l6ZS5oZWlnaHQgLSBDQVJFVF9IRUlHSFQ7XG4gIHZhciByaWdodCA9IHdpbmRvd1NpemUud2lkdGggLSBmbHlvdXRTaXplLndpZHRoIC0gQ0FSRVRfSEVJR0hUIC0gdHJpZ2dlclJlY3QucmlnaHQ7XG4gIHZhciBkb3duID0gd2luZG93U2l6ZS5oZWlnaHQgLSBmbHlvdXRTaXplLmhlaWdodCAtIENBUkVUX0hFSUdIVCAtIHRyaWdnZXJSZWN0LmJvdHRvbTtcbiAgdmFyIGxlZnQgPSB0cmlnZ2VyUmVjdC5sZWZ0IC0gZmx5b3V0U2l6ZS53aWR0aCAtIENBUkVUX0hFSUdIVDsgLy8gb3ZlcnJpZGVzIGF2YWlsYWJsZSBzcGFjZSB3aGVuIHRoZSB0cmlnZ2VyIGlzIGNsb3NlIHRvIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW5cbiAgLy8gdHJpZ2dlciBpcyB0b28gY2xvc2UgdG8gdG9wL2JvdHRvbSBvZiBzY3JlZW4gZm9yIGxlZnQgJiByaWdodCBmbHlvdXRzXG5cbiAgaWYgKHRyaWdnZXJSZWN0LnRvcCA8IEJPUkRFUl9SQURJVVMgfHwgd2luZG93U2l6ZS5oZWlnaHQgLSB0cmlnZ2VyUmVjdC5ib3R0b20gPCBCT1JERVJfUkFESVVTKSB7XG4gICAgbGVmdCA9IDA7XG4gICAgcmlnaHQgPSAwO1xuICB9IC8vIHRyaWdnZXIgaXMgdG9vIGNsb3NlIHRvIHRoZSBsZWZ0L3JpZ2h0IG9mIHNjcmVlbiBmb3IgdXAgJiBkb3duIGZseW91dHNcblxuXG4gIGlmICh0cmlnZ2VyUmVjdC5sZWZ0IDwgQk9SREVSX1JBRElVUyB8fCB3aW5kb3dTaXplLndpZHRoIC0gdHJpZ2dlclJlY3QucmlnaHQgPCBCT1JERVJfUkFESVVTKSB7XG4gICAgdXAgPSAwO1xuICAgIGRvd24gPSAwO1xuICB9XG5cbiAgdmFyIHNwYWNlcyA9IFt1cCwgcmlnaHQsIGRvd24sIGxlZnRdOyAvLyBJZGVudGlmeSBiZXN0IGRpcmVjdGlvbiBvZiBhdmFpbGFibGUgc3BhY2VzXG5cbiAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIHNwYWNlcyk7IC8vIENob3NlIHRoZSBtYWluIGRpcmVjdGlvbiBmb3IgdGhlIGZseW91dCBiYXNlZCBvbiBhdmFpbGFibGUgc3BhY2VzICYgdXNlciBwcmVmZXJlbmNlXG5cbiAgdmFyIG1haW5EaXI7XG5cbiAgaWYgKGlkZWFsRGlyZWN0aW9uICYmIHNwYWNlc1tESVJfSU5ERVhfTUFQW2lkZWFsRGlyZWN0aW9uXV0gPiAwKSB7XG4gICAgLy8gdXNlciBwcmVmXG4gICAgbWFpbkRpciA9IGlkZWFsRGlyZWN0aW9uO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIG5vIGRpcmVjdGlvbiBwcmVmLCBjaG9zZSB0aGUgZGlyZWN0aW9uIGluIHdoaWNoIHRoZXJlIGlzIHRoZSBtb3N0IHNwYWNlIGF2YWlsYWJsZVxuICAgIG1haW5EaXIgPSBTUEFDRVNfSU5ERVhfTUFQW3NwYWNlcy5pbmRleE9mKG1heCldO1xuICB9XG5cbiAgcmV0dXJuIG1haW5EaXI7XG59XG4vKipcbiAqIERldGVybWluZXMgdGhlIHN1YiBkaXJlY3Rpb24gb2YgaG93IHRoZSBmbHlvdXQgaXMgcG9zaXRpb25lZCB3aXRoaW4gdGhlIG1haW4gZGlyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3ViRGlyKGZseW91dFNpemUsIG1haW5EaXIsIHRyaWdnZXJSZWN0LCB3aW5kb3dTaXplKSB7XG4gIC8vIE5vdyB0aGF0IHdlIGhhdmUgdGhlIG1haW4gZGlyZWN0aW9uLCBjaG9zZSBmcm9tIDMgY2FyZXQgcGxhY2VtZW50cyBmb3IgdGhhdCBkaXJlY3Rpb25cbiAgdmFyIG9mZnNldDtcbiAgdmFyIHRyaWdnZXJNaWQ7XG4gIHZhciB3aW5kb3dTcGFjZUF2YWlsYWJsZTtcblxuICBpZiAobWFpbkRpciA9PT0gJ3JpZ2h0JyB8fCBtYWluRGlyID09PSAnbGVmdCcpIHtcbiAgICBvZmZzZXQgPSBmbHlvdXRTaXplLmhlaWdodCAvIDI7XG4gICAgdHJpZ2dlck1pZCA9IHRyaWdnZXJSZWN0LnRvcCArICh0cmlnZ2VyUmVjdC5ib3R0b20gLSB0cmlnZ2VyUmVjdC50b3ApIC8gMjtcbiAgICB3aW5kb3dTcGFjZUF2YWlsYWJsZSA9IHdpbmRvd1NpemUuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIC8vIChtYWluRGlyID09PSAndXAnIHx8IG1haW5EaXIgPT09ICdkb3duJylcbiAgICBvZmZzZXQgPSBmbHlvdXRTaXplLndpZHRoIC8gMjtcbiAgICB0cmlnZ2VyTWlkID0gdHJpZ2dlclJlY3QubGVmdCArICh0cmlnZ2VyUmVjdC5yaWdodCAtIHRyaWdnZXJSZWN0LmxlZnQpIC8gMjtcbiAgICB3aW5kb3dTcGFjZUF2YWlsYWJsZSA9IHdpbmRvd1NpemUud2lkdGg7XG4gIH1cblxuICB2YXIgYWJvdmVPckxlZnQgPSB0cmlnZ2VyTWlkIC0gb2Zmc2V0IC0gTUFSR0lOO1xuICB2YXIgYmVsb3dPclJpZ2h0ID0gd2luZG93U3BhY2VBdmFpbGFibGUgLSB0cmlnZ2VyTWlkIC0gb2Zmc2V0IC0gTUFSR0lOO1xuICB2YXIgc3ViRGlyO1xuXG4gIGlmIChhYm92ZU9yTGVmdCA+IDAgJiYgYmVsb3dPclJpZ2h0ID4gMCkge1xuICAgIC8vIGNhcmV0IHNob3VsZCBnbyBpbiBtaWRkbGUgYi9jIGl0IGNhblxuICAgIHN1YkRpciA9ICdtaWRkbGUnO1xuICB9IGVsc2UgaWYgKGJlbG93T3JSaWdodCA+IDApIHtcbiAgICAvLyBjYXJldCBzaG91bGQgZ28gYXQgdG9wIGZvciBsZWZ0L3JpZ2h0IGFuZCBsZWZ0IGZvciB1cC9kb3duXG4gICAgc3ViRGlyID0gbWFpbkRpciA9PT0gJ2xlZnQnIHx8IG1haW5EaXIgPT09ICdyaWdodCcgPyAndXAnIDogJ2xlZnQnO1xuICB9IGVsc2Uge1xuICAgIC8vIGNhcmV0IHNob3VsZCBnbyBhdCBib3R0b20gZm9yIGxlZnQvcmlnaHQgYW5kIHJpZ2h0IGZvciB1cC9kb3duXG4gICAgc3ViRGlyID0gbWFpbkRpciA9PT0gJ2xlZnQnIHx8IG1haW5EaXIgPT09ICdyaWdodCcgPyAnZG93bicgOiAncmlnaHQnO1xuICB9XG5cbiAgcmV0dXJuIHN1YkRpcjtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYW1vdW50IHRoZSBmbHlvdXQgJiBjYXJldCBuZWVkIHRvIHNoaWZ0IG92ZXIgdG8gYWxpZ24gd2l0aCBkZXNpZ25zXG4gKi9cblxuZnVuY3Rpb24gY2FsY0VkZ2VTaGlmdHMoc3ViRGlyLCB0cmlnZ2VyUmVjdCwgd2luZG93U2l6ZSkge1xuICAvLyBUYXJnZXQgdmFsdWVzIGZvciBmbHlvdXQgYW5kIGNhcmV0IHNoaWZ0c1xuICB2YXIgZmx5b3V0VmVydGljYWxTaGlmdCA9IENBUkVUX09GRlNFVF9GUk9NX1NJREUgLSAodHJpZ2dlclJlY3QuaGVpZ2h0IC0gQ0FSRVRfSEVJR0hUKSAvIDI7XG4gIHZhciBmbHlvdXRIb3Jpem9udGFsU2hpZnQgPSBDQVJFVF9PRkZTRVRfRlJPTV9TSURFIC0gKHRyaWdnZXJSZWN0LndpZHRoIC0gQ0FSRVRfSEVJR0hUKSAvIDI7XG4gIHZhciBjYXJldFZlcnRpY2FsU2hpZnQgPSBDQVJFVF9IRUlHSFQ7XG4gIHZhciBjYXJldEhvcml6b250YWxTaGlmdCA9IENBUkVUX0hFSUdIVDsgLy8gQ292ZXJzIGVkZ2UgY2FzZSB3aGVyZSB0cmlnZ2VyIGlzIGluIGEgY29ybmVyIGFuZCB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgb2Zmc2V0IG9mIHRoZSBjYXJldFxuICAvLyB0byBzb21ldGhpbmcgc21hbGxlciB0aGFuIG5vcm1hbCBpbiBvcmRlclxuXG4gIHZhciBpc0Nsb3NlVmVydGljYWxseSA9IHRyaWdnZXJSZWN0LnRvcCAtIGZseW91dFZlcnRpY2FsU2hpZnQgPCAwIHx8IHRyaWdnZXJSZWN0LmJvdHRvbSArIGZseW91dFZlcnRpY2FsU2hpZnQgPiB3aW5kb3dTaXplLmhlaWdodDtcbiAgdmFyIGlzQ2xvc2VIb3Jpem9udGFsbHkgPSB0cmlnZ2VyUmVjdC5sZWZ0IC0gZmx5b3V0SG9yaXpvbnRhbFNoaWZ0IDwgMCB8fCB0cmlnZ2VyUmVjdC5yaWdodCArIGZseW91dEhvcml6b250YWxTaGlmdCA+IHdpbmRvd1NpemUud2lkdGg7XG5cbiAgaWYgKGlzQ2xvc2VWZXJ0aWNhbGx5KSB7XG4gICAgZmx5b3V0VmVydGljYWxTaGlmdCA9IEJPUkRFUl9SQURJVVMgLSAodHJpZ2dlclJlY3QuaGVpZ2h0IC0gQ0FSRVRfSEVJR0hUKSAvIDI7XG4gICAgY2FyZXRWZXJ0aWNhbFNoaWZ0ID0gQk9SREVSX1JBRElVUztcbiAgfVxuXG4gIGlmIChpc0Nsb3NlSG9yaXpvbnRhbGx5KSB7XG4gICAgZmx5b3V0SG9yaXpvbnRhbFNoaWZ0ID0gQk9SREVSX1JBRElVUyAtICh0cmlnZ2VyUmVjdC53aWR0aCAtIENBUkVUX0hFSUdIVCkgLyAyO1xuICAgIGNhcmV0SG9yaXpvbnRhbFNoaWZ0ID0gQk9SREVSX1JBRElVUztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmx5b3V0OiB7XG4gICAgICB4OiBmbHlvdXRIb3Jpem9udGFsU2hpZnQsXG4gICAgICB5OiBmbHlvdXRWZXJ0aWNhbFNoaWZ0XG4gICAgfSxcbiAgICBjYXJldDoge1xuICAgICAgeDogY2FyZXRIb3Jpem9udGFsU2hpZnQsXG4gICAgICB5OiBjYXJldFZlcnRpY2FsU2hpZnRcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgZmx5b3V0IGFuZCBjYXJldCBvZmZzZXRzIGZvciBzdHlsaW5nXG4gKi9cblxuZnVuY3Rpb24gYWRqdXN0T2Zmc2V0cyhiYXNlLCBlZGdlU2hpZnQsIGZseW91dFNpemUsIG1haW5EaXIsIHN1YkRpciwgdHJpZ2dlclJlY3QpIHtcbiAgdmFyIGZseW91dExlZnQgPSBiYXNlLmxlZnQ7XG4gIHZhciBmbHlvdXRUb3AgPSBiYXNlLnRvcDtcbiAgdmFyIGNhcmV0VG9wID0gbWFpbkRpciA9PT0gJ2Rvd24nID8gLUNBUkVUX0hFSUdIVCA6IG51bGw7XG4gIHZhciBjYXJldFJpZ2h0ID0gbWFpbkRpciA9PT0gJ2xlZnQnID8gLUNBUkVUX0hFSUdIVCArIDIgOiBudWxsO1xuICB2YXIgY2FyZXRCb3R0b20gPSBtYWluRGlyID09PSAndXAnID8gLUNBUkVUX0hFSUdIVCA6IG51bGw7XG4gIHZhciBjYXJldExlZnQgPSBtYWluRGlyID09PSAncmlnaHQnID8gLUNBUkVUX0hFSUdIVCArIDIgOiBudWxsO1xuXG4gIGlmIChzdWJEaXIgPT09ICd1cCcpIHtcbiAgICBmbHlvdXRUb3AgPSBiYXNlLnRvcCAtIGVkZ2VTaGlmdC5mbHlvdXQueTtcbiAgICBjYXJldFRvcCA9IGVkZ2VTaGlmdC5jYXJldC55O1xuICB9IGVsc2UgaWYgKHN1YkRpciA9PT0gJ2Rvd24nKSB7XG4gICAgZmx5b3V0VG9wID0gYmFzZS50b3AgLSBmbHlvdXRTaXplLmhlaWdodCArIHRyaWdnZXJSZWN0LmhlaWdodCArIGVkZ2VTaGlmdC5mbHlvdXQueTtcbiAgICBjYXJldEJvdHRvbSA9IGVkZ2VTaGlmdC5jYXJldC55O1xuICB9IGVsc2UgaWYgKHN1YkRpciA9PT0gJ2xlZnQnKSB7XG4gICAgZmx5b3V0TGVmdCA9IGJhc2UubGVmdCAtIGVkZ2VTaGlmdC5mbHlvdXQueDtcbiAgICBjYXJldExlZnQgPSBlZGdlU2hpZnQuY2FyZXQueDtcbiAgfSBlbHNlIGlmIChzdWJEaXIgPT09ICdyaWdodCcpIHtcbiAgICBmbHlvdXRMZWZ0ID0gYmFzZS5sZWZ0IC0gZmx5b3V0U2l6ZS53aWR0aCArIHRyaWdnZXJSZWN0LndpZHRoICsgZWRnZVNoaWZ0LmZseW91dC54O1xuICAgIGNhcmV0UmlnaHQgPSBlZGdlU2hpZnQuY2FyZXQueDtcbiAgfSBlbHNlIGlmIChzdWJEaXIgPT09ICdtaWRkbGUnKSB7XG4gICAgaWYgKG1haW5EaXIgPT09ICdsZWZ0JyB8fCBtYWluRGlyID09PSAncmlnaHQnKSB7XG4gICAgICB2YXIgdHJpZ2dlck1pZCA9IGZseW91dFRvcCArIHRyaWdnZXJSZWN0LmhlaWdodCAvIDI7XG4gICAgICBmbHlvdXRUb3AgPSB0cmlnZ2VyTWlkIC0gZmx5b3V0U2l6ZS5oZWlnaHQgLyAyO1xuICAgICAgY2FyZXRUb3AgPSAoZmx5b3V0U2l6ZS5oZWlnaHQgLSBDQVJFVF9IRUlHSFQpIC8gMjtcbiAgICB9XG5cbiAgICBpZiAobWFpbkRpciA9PT0gJ3VwJyB8fCBtYWluRGlyID09PSAnZG93bicpIHtcbiAgICAgIHZhciBfdHJpZ2dlck1pZCA9IGZseW91dExlZnQgKyB0cmlnZ2VyUmVjdC53aWR0aCAvIDI7XG5cbiAgICAgIGZseW91dExlZnQgPSBfdHJpZ2dlck1pZCAtIGZseW91dFNpemUud2lkdGggLyAyO1xuICAgICAgY2FyZXRMZWZ0ID0gKGZseW91dFNpemUud2lkdGggLSBDQVJFVF9IRUlHSFQpIC8gMjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZseW91dE9mZnNldDoge1xuICAgICAgdG9wOiBmbHlvdXRUb3AsXG4gICAgICBsZWZ0OiBmbHlvdXRMZWZ0XG4gICAgfSxcbiAgICBjYXJldE9mZnNldDoge1xuICAgICAgdG9wOiBjYXJldFRvcCxcbiAgICAgIHJpZ2h0OiBjYXJldFJpZ2h0LFxuICAgICAgYm90dG9tOiBjYXJldEJvdHRvbSxcbiAgICAgIGxlZnQ6IGNhcmV0TGVmdFxuICAgIH1cbiAgfTtcbn1cbi8qIENhbGN1bGF0ZXMgYmFzZWxpbmUgdG9wIGFuZCBsZWZ0IG9mZnNldCBmb3IgZmx5b3V0ICovXG5cbmZ1bmN0aW9uIGJhc2VPZmZzZXRzKGhhc0NhcmV0LCByZWxhdGl2ZU9mZnNldCwgZmx5b3V0U2l6ZSwgbWFpbkRpciwgdHJpZ2dlclJlY3QsIHdpbmRvd1NpemUpIHtcbiAgdmFyIFNQQUNJTkdfT1VUU0lERSA9IGhhc0NhcmV0ID8gQ0FSRVRfSEVJR0hUIC8gMiA6IDg7IC8vIFRPUCBPRkZTRVRcblxuICB2YXIgdG9wO1xuXG4gIGlmIChtYWluRGlyID09PSAnZG93bicpIHtcbiAgICB0b3AgPSB3aW5kb3dTaXplLnNjcm9sbFkgKyB0cmlnZ2VyUmVjdC5ib3R0b20gKyBTUEFDSU5HX09VVFNJREU7XG4gIH0gZWxzZSBpZiAobWFpbkRpciA9PT0gJ3VwJykge1xuICAgIHRvcCA9IHdpbmRvd1NpemUuc2Nyb2xsWSArICh0cmlnZ2VyUmVjdC50b3AgLSBmbHlvdXRTaXplLmhlaWdodCAtIFNQQUNJTkdfT1VUU0lERSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbGVmdCBhbmQgcmlnaHRcbiAgICB0b3AgPSB3aW5kb3dTaXplLnNjcm9sbFkgKyB0cmlnZ2VyUmVjdC50b3A7XG4gIH0gLy8gTEVGVCBPRkZTRVRcblxuXG4gIHZhciBsZWZ0O1xuXG4gIGlmIChtYWluRGlyID09PSAnbGVmdCcpIHtcbiAgICBsZWZ0ID0gd2luZG93U2l6ZS5zY3JvbGxYICsgKHRyaWdnZXJSZWN0LmxlZnQgLSBmbHlvdXRTaXplLndpZHRoIC0gU1BBQ0lOR19PVVRTSURFKTtcbiAgfSBlbHNlIGlmIChtYWluRGlyID09PSAncmlnaHQnKSB7XG4gICAgbGVmdCA9IHdpbmRvd1NpemUuc2Nyb2xsWCArIHRyaWdnZXJSZWN0LnJpZ2h0ICsgU1BBQ0lOR19PVVRTSURFO1xuICB9IGVsc2Uge1xuICAgIC8vIGRvd24gYW5kIHVwXG4gICAgbGVmdCA9IHdpbmRvd1NpemUuc2Nyb2xsWCArIHRyaWdnZXJSZWN0LmxlZnQ7XG4gIH0gLy8gQWRqdXN0cyBmb3IgdGhlIHJlbGF0aXZlIHBhcmVudCBjb250YWluZXJcblxuXG4gIHRvcCAtPSByZWxhdGl2ZU9mZnNldC55O1xuICBsZWZ0IC09IHJlbGF0aXZlT2Zmc2V0Lng7XG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdFxuICB9O1xufVxuXG52YXIgQ29udGVudHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKENvbnRlbnRzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbnRlbnRzKTtcblxuICBmdW5jdGlvbiBDb250ZW50cygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29udGVudHMpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBmbHlvdXRPZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB1bmRlZmluZWQsXG4gICAgICAgIGxlZnQ6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIGNhcmV0T2Zmc2V0OiB7XG4gICAgICAgIHRvcDogdW5kZWZpbmVkLFxuICAgICAgICByaWdodDogdW5kZWZpbmVkLFxuICAgICAgICBib3R0b206IHVuZGVmaW5lZCxcbiAgICAgICAgbGVmdDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgbWFpbkRpcjogbnVsbCxcbiAgICAgIGZseW91dFJlZjogbnVsbFxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEZseW91dFJlZlwiLCBmdW5jdGlvbiAoZmx5b3V0UmVmKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmZseW91dFJlZikge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZmx5b3V0UmVmOiBmbHlvdXRSZWZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29udGVudHMsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25SZXNpemUgPSBfdGhpcyRwcm9wcy5vblJlc2l6ZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wcy5vbktleURvd247XG4gICAgICB2YXIgZmx5b3V0UmVmID0gdGhpcy5zdGF0ZS5mbHlvdXRSZWY7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5zaG91bGRGb2N1cyAmJiBmbHlvdXRSZWYpIHtcbiAgICAgICAgICBmbHlvdXRSZWYuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUmVzaXplID0gX3RoaXMkcHJvcHMyLm9uUmVzaXplLFxuICAgICAgICAgIG9uS2V5RG93biA9IF90aGlzJHByb3BzMi5vbktleURvd247XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHRoZSBtYWluIGRpcmVjaXRvbiwgc3ViIGRpcmVjdGlvbiwgYW5kIGNvcnJlc3BvbmRpbmcgb2Zmc2V0cyBuZWVkZWRcbiAgICAgKiB0byBjb3JyZWN0bHkgcG9zaXRpb24gdGhlIG9mZnNldFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJnQ29sb3IgPSBfdGhpcyRwcm9wczMuYmdDb2xvcixcbiAgICAgICAgICBib3JkZXIgPSBfdGhpcyRwcm9wczMuYm9yZGVyLFxuICAgICAgICAgIGNhcmV0ID0gX3RoaXMkcHJvcHMzLmNhcmV0LFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMzLmNoaWxkcmVuLFxuICAgICAgICAgIHJvdW5kaW5nID0gX3RoaXMkcHJvcHMzLnJvdW5kaW5nLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMzLndpZHRoO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBjYXJldE9mZnNldCA9IF90aGlzJHN0YXRlLmNhcmV0T2Zmc2V0LFxuICAgICAgICAgIGZseW91dE9mZnNldCA9IF90aGlzJHN0YXRlLmZseW91dE9mZnNldCxcbiAgICAgICAgICBtYWluRGlyID0gX3RoaXMkc3RhdGUubWFpbkRpcjsgLy8gTmVlZGVkIHRvIHByZXZlbnQgVUkgdGhyYXNoaW5nXG5cbiAgICAgIHZhciB2aXNpYmlsaXR5ID0gbWFpbkRpciA9PT0gbnVsbCA/ICdoaWRkZW4nIDogJ3Zpc2libGUnO1xuICAgICAgdmFyIGJhY2tncm91bmQgPSBcIlwiLmNvbmNhdChiZ0NvbG9yLCBcIkJnXCIpO1xuICAgICAgdmFyIHN0cm9rZSA9IGJnQ29sb3IgPT09ICd3aGl0ZScgPyAnI2VmZWZlZicgOiBudWxsO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBzdHlsZXMkYy5jb250YWluZXIsXG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgc3Ryb2tlOiBzdHJva2UsXG4gICAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJpbGl0eVxuICAgICAgICB9LCBmbHlvdXRPZmZzZXQpXG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhyb3VuZGluZyA9PT0gMiAmJiBib3JkZXJzLnJvdW5kaW5nMiwgcm91bmRpbmcgPT09IDQgJiYgYm9yZGVycy5yb3VuZGluZzQsIHN0eWxlcyRjLmNvbnRlbnRzLCBzdHlsZXMkYy5tYXhEaW1lbnNpb25zLCB3aWR0aCAhPT0gbnVsbCAmJiBzdHlsZXMkYy5taW5EaW1lbnNpb25zKSxcbiAgICAgICAgcmVmOiB0aGlzLnNldEZseW91dFJlZixcbiAgICAgICAgdGFiSW5kZXg6IC0xXG4gICAgICB9LCBjYXJldCAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhjb2xvcnNbYmdDb2xvcl0sIHN0eWxlcyRjLmNhcmV0KSxcbiAgICAgICAgc3R5bGU6IF9vYmplY3RTcHJlYWQyKHt9LCBjYXJldE9mZnNldClcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KENhcmV0LCB7XG4gICAgICAgIGRpcmVjdGlvbjogbWFpbkRpclxuICAgICAgfSkpLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhib3JkZXIgJiYgc3R5bGVzJGMuYm9yZGVyLCBjb2xvcnNbYmFja2dyb3VuZF0sIGNvbG9yc1tiZ0NvbG9yXSwgcm91bmRpbmcgPT09IDIgJiYgYm9yZGVycy5yb3VuZGluZzIsIHJvdW5kaW5nID09PSA0ICYmIGJvcmRlcnMucm91bmRpbmc0LCBzdHlsZXMkYy5pbm5lckNvbnRlbnRzLCBzdHlsZXMkYy5tYXhEaW1lbnNpb25zLCB3aWR0aCAhPT0gbnVsbCAmJiBzdHlsZXMkYy5taW5EaW1lbnNpb25zKSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBtYXhXaWR0aDogd2lkdGhcbiAgICAgICAgfVxuICAgICAgfSwgY2hpbGRyZW4pKSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBfcmVmMikge1xuICAgICAgdmFyIGNhcmV0ID0gX3JlZi5jYXJldCxcbiAgICAgICAgICBpZGVhbERpcmVjdGlvbiA9IF9yZWYuaWRlYWxEaXJlY3Rpb24sXG4gICAgICAgICAgcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yID0gX3JlZi5wb3NpdGlvblJlbGF0aXZlVG9BbmNob3IsXG4gICAgICAgICAgcmVsYXRpdmVPZmZzZXQgPSBfcmVmLnJlbGF0aXZlT2Zmc2V0LFxuICAgICAgICAgIHRyaWdnZXJSZWN0ID0gX3JlZi50cmlnZ2VyUmVjdCxcbiAgICAgICAgICB3aWR0aCA9IF9yZWYud2lkdGg7XG4gICAgICB2YXIgZmx5b3V0UmVmID0gX3JlZjIuZmx5b3V0UmVmO1xuICAgICAgLy8gU2Nyb2xsIG5vdCBuZWVkZWQgZm9yIHJlbGF0aXZlIGVsZW1lbnRzXG4gICAgICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LnNjcm9sbFggLyB3aW5kb3cuc2Nyb2xsWSBzaW5jZSBpdCdzIG5vdCBzdXBwb3J0ZWQgYnkgSUUxMVxuICAgICAgdmFyIHNjcm9sbFggPSBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3IgPyAwIDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCAwO1xuICAgICAgdmFyIHNjcm9sbFkgPSBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3IgPyAwIDogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IDA7XG4gICAgICB2YXIgd2luZG93U2l6ZSA9IHtcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgc2Nyb2xsWDogc2Nyb2xsWCxcbiAgICAgICAgc2Nyb2xsWTogc2Nyb2xsWVxuICAgICAgfTtcbiAgICAgIHZhciBmbHlvdXRTaXplID0ge1xuICAgICAgICBoZWlnaHQ6IGZseW91dFJlZiA/IGZseW91dFJlZi5jbGllbnRIZWlnaHQgOiAwLFxuICAgICAgICB3aWR0aDogKGZseW91dFJlZiA/IGZseW91dFJlZi5jbGllbnRXaWR0aCA6IHdpZHRoKSB8fCAwXG4gICAgICB9OyAvLyBGaXJzdCBjaG9vc2Ugb25lIG9mIDQgbWFpbiBkaXJlY3Rpb25cblxuICAgICAgdmFyIG1haW5EaXIgPSBnZXRNYWluRGlyKGZseW91dFNpemUsIGlkZWFsRGlyZWN0aW9uLCB0cmlnZ2VyUmVjdCwgd2luZG93U2l6ZSk7IC8vIE5vdyB0aGF0IHdlIGhhdmUgdGhlIG1haW4gZGlyZWN0aW9uLCBjaG9zZSBmcm9tIDMgY2FyZXQgcGxhY2VtZW50cyBmb3IgdGhhdCBkaXJlY3Rpb25cblxuICAgICAgdmFyIHN1YkRpciA9IGdldFN1YkRpcihmbHlvdXRTaXplLCBtYWluRGlyLCB0cmlnZ2VyUmVjdCwgd2luZG93U2l6ZSk7IC8vIEdldHMgdGhlIGJhc2Ugb2Zmc2V0IHRoYXQgcG9zaXRpb25zIHRoZSBmbHlvdXQgYmFzZWQgb24gdGhlIG1haW4gZGlyZWN0aW9uIG9ubHlcblxuICAgICAgdmFyIGJhc2UgPSBiYXNlT2Zmc2V0cyhCb29sZWFuKGNhcmV0KSwgcmVsYXRpdmVPZmZzZXQsIGZseW91dFNpemUsIG1haW5EaXIsIHRyaWdnZXJSZWN0LCB3aW5kb3dTaXplKTsgLy8gR2V0cyB0aGUgZWRnZSBzaGlmdHMgZm9yIHRoZSBmbHlvdXRcblxuICAgICAgdmFyIGVkZ2VTaGlmdHMgPSBjYWxjRWRnZVNoaWZ0cyhzdWJEaXIsIHRyaWdnZXJSZWN0LCB3aW5kb3dTaXplKTsgLy8gQWRqdXN0cyBmb3IgdGhlIHN1YmRpcmVjdGlvbiBvZiB0aGUgY2FyZXRcblxuICAgICAgdmFyIF9hZGp1c3RPZmZzZXRzID0gYWRqdXN0T2Zmc2V0cyhiYXNlLCBlZGdlU2hpZnRzLCBmbHlvdXRTaXplLCBtYWluRGlyLCBzdWJEaXIsIHRyaWdnZXJSZWN0KSxcbiAgICAgICAgICBmbHlvdXRPZmZzZXQgPSBfYWRqdXN0T2Zmc2V0cy5mbHlvdXRPZmZzZXQsXG4gICAgICAgICAgY2FyZXRPZmZzZXQgPSBfYWRqdXN0T2Zmc2V0cy5jYXJldE9mZnNldDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2FyZXRPZmZzZXQ6IGNhcmV0T2Zmc2V0LFxuICAgICAgICBmbHlvdXRPZmZzZXQ6IGZseW91dE9mZnNldCxcbiAgICAgICAgbWFpbkRpcjogbWFpbkRpclxuICAgICAgfTtcbiAgICB9IC8vIENvcHkgdGhlIGZseW91dCBET00gbm9kZSB0byBzdGF0ZS4gVGhpcyBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIG5lZWQgdG9cbiAgICAvLyBkZXJpdmUgdGhlIGZseW91dCBsb2NhdGlvbiBmcm9tIGl0IGluIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywgYW5kIGJlY2F1c2VcbiAgICAvLyB0aGlzIG1ldGhvZCBpcyBzdGF0aWMsIGl0IGRvZXNuJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSByZWx5IG9uIFJlYWN0IHBhc3NpbmcgdGhlIHN0YXRlIHZhbHVlcyBpbnRvIHRoYXQgbWV0aG9kLlxuXG4gIH1dKTtcblxuICByZXR1cm4gQ29udGVudHM7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb250ZW50cywgXCJwcm9wVHlwZXNcIiwge1xuICBiZ0NvbG9yOiBQcm9wVHlwZXMub25lT2YoWydibHVlJywgJ2RhcmtHcmF5JywgJ29yYW5nZScsICdyZWQnLCAnd2hpdGUnXSksXG4gIGJvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGNhcmV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBpZGVhbERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsndXAnLCAncmlnaHQnLCAnZG93bicsICdsZWZ0J10pLFxuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUmVzaXplOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICByZWxhdGl2ZU9mZnNldDogUHJvcFR5cGVzLmV4YWN0KHtcbiAgICB4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHk6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksXG4gIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvcjogUHJvcFR5cGVzLmJvb2wsXG4gIHJvdW5kaW5nOiBQcm9wVHlwZXMub25lT2YoWzIsIDRdKSxcbiAgc2hvdWxkRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICB0cmlnZ2VyUmVjdDogUHJvcFR5cGVzLmV4YWN0KHtcbiAgICBib3R0b206IFByb3BUeXBlcy5udW1iZXIsXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGxlZnQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcmlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgdG9wOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pLFxuICB3aWR0aDogUHJvcFR5cGVzLm51bWJlclxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb250ZW50cywgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBib3JkZXI6IHRydWUsXG4gIGNhcmV0OiB0cnVlXG59KTtcblxuZnVuY3Rpb24gT3V0c2lkZUV2ZW50QmVoYXZpb3IoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgb25DbGljayA9IF9yZWYub25DbGljaztcbiAgdmFyIGVsZW1lbnQgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZUNsaWNrRXZlbnQgPSBmdW5jdGlvbiBoYW5kbGVDbGlja0V2ZW50KGV2ZW50KSB7XG4gICAgICBpZiAoIW9uQ2xpY2sgfHwgIWVsZW1lbnQgfHwgZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgTm9kZSAmJiBlbGVtZW50LmN1cnJlbnQgJiYgZWxlbWVudC5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGlja0V2ZW50LCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUNsaWNrRXZlbnQsIHtcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSwgW29uQ2xpY2tdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IGVsZW1lbnRcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgU0laRV9XSURUSF9NQVAgPSB7XG4gIHhzOiAxODAsXG4gIHNtOiAyMzAsXG4gIG1kOiAyODQsXG4gIGxnOiAzMjAsXG4gIHhsOiAzNjBcbn07XG52YXIgRVNDQVBFX0tFWV9DT0RFID0gMjc7XG5cbmZ1bmN0aW9uIGdldFRyaWdnZXJSZWN0KGFuY2hvciwgcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yKSB7XG4gIHZhciB0cmlnZ2VyQm91bmRpbmdSZWN0O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQ7XG5cbiAgaWYgKGFuY2hvcikge1xuICAgIHRyaWdnZXJCb3VuZGluZ1JlY3QgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIE5lZWRlZCBmb3IgY29ycmVjdCBwb3NpdGlvbmluZyB3aXRoaW4gQ29udGVudHMuanNcblxuICAgIHJlbGF0aXZlT2Zmc2V0ID0ge1xuICAgICAgeDogcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yID8gdHJpZ2dlckJvdW5kaW5nUmVjdC5sZWZ0IC0gYW5jaG9yLm9mZnNldExlZnQgOiAwLFxuICAgICAgeTogcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yID8gdHJpZ2dlckJvdW5kaW5nUmVjdC50b3AgLSBhbmNob3Iub2Zmc2V0VG9wIDogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbGF0aXZlT2Zmc2V0OiByZWxhdGl2ZU9mZnNldCxcbiAgICB0cmlnZ2VyQm91bmRpbmdSZWN0OiB0cmlnZ2VyQm91bmRpbmdSZWN0XG4gIH07XG59XG5cbnZhciBDb250cm9sbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhDb250cm9sbGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKENvbnRyb2xsZXIpO1xuXG4gIGZ1bmN0aW9uIENvbnRyb2xsZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbnRyb2xsZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICByZWxhdGl2ZU9mZnNldDoge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwXG4gICAgICB9LFxuICAgICAgdHJpZ2dlckJvdW5kaW5nUmVjdDoge1xuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgd2lkdGg6IDBcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVLZXlEb3duXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uRGlzbWlzcyA9IF90aGlzLnByb3BzLm9uRGlzbWlzcztcblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEVTQ0FQRV9LRVlfQ09ERSkge1xuICAgICAgICBvbkRpc21pc3MoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQYWdlQ2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbmNob3IgPSBfdGhpcyRwcm9wcy5hbmNob3IsXG4gICAgICAgICAgb25EaXNtaXNzID0gX3RoaXMkcHJvcHMub25EaXNtaXNzO1xuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgTm9kZSAmJiAhYW5jaG9yLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgb25EaXNtaXNzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlUmVzaXplXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnVwZGF0ZVRyaWdnZXJSZWN0KF90aGlzLnByb3BzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1cGRhdGVUcmlnZ2VyUmVjdFwiLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGFuY2hvciA9IF9yZWYuYW5jaG9yLFxuICAgICAgICAgIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvciA9IF9yZWYucG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yO1xuXG4gICAgICB2YXIgX2dldFRyaWdnZXJSZWN0ID0gZ2V0VHJpZ2dlclJlY3QoYW5jaG9yLCBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3IpLFxuICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0ID0gX2dldFRyaWdnZXJSZWN0LnJlbGF0aXZlT2Zmc2V0LFxuICAgICAgICAgIHRyaWdnZXJCb3VuZGluZ1JlY3QgPSBfZ2V0VHJpZ2dlclJlY3QudHJpZ2dlckJvdW5kaW5nUmVjdDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICByZWxhdGl2ZU9mZnNldDogcmVsYXRpdmVPZmZzZXQsXG4gICAgICAgIHRyaWdnZXJCb3VuZGluZ1JlY3Q6IHRyaWdnZXJCb3VuZGluZ1JlY3RcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENvbnRyb2xsZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy51cGRhdGVUcmlnZ2VyUmVjdCh0aGlzLnByb3BzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJnQ29sb3IgPSBfdGhpcyRwcm9wczIuYmdDb2xvcixcbiAgICAgICAgICBib3JkZXIgPSBfdGhpcyRwcm9wczIuYm9yZGVyLFxuICAgICAgICAgIGNhcmV0ID0gX3RoaXMkcHJvcHMyLmNhcmV0LFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGlkZWFsRGlyZWN0aW9uID0gX3RoaXMkcHJvcHMyLmlkZWFsRGlyZWN0aW9uLFxuICAgICAgICAgIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvciA9IF90aGlzJHByb3BzMi5wb3NpdGlvblJlbGF0aXZlVG9BbmNob3IsXG4gICAgICAgICAgcm91bmRpbmcgPSBfdGhpcyRwcm9wczIucm91bmRpbmcsXG4gICAgICAgICAgc2hvdWxkRm9jdXMgPSBfdGhpcyRwcm9wczIuc2hvdWxkRm9jdXMsXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzMi5zaXplO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICByZWxhdGl2ZU9mZnNldCA9IF90aGlzJHN0YXRlLnJlbGF0aXZlT2Zmc2V0LFxuICAgICAgICAgIHRyaWdnZXJCb3VuZGluZ1JlY3QgPSBfdGhpcyRzdGF0ZS50cmlnZ2VyQm91bmRpbmdSZWN0O1xuICAgICAgdmFyIHdpZHRoID0gdHlwZW9mIHNpemUgPT09ICdzdHJpbmcnID8gU0laRV9XSURUSF9NQVBbc2l6ZV0gOiBzaXplO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dHNpZGVFdmVudEJlaGF2aW9yLCB7XG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlUGFnZUNsaWNrXG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb250ZW50cywge1xuICAgICAgICBiZ0NvbG9yOiBiZ0NvbG9yLFxuICAgICAgICBib3JkZXI6IGJvcmRlcixcbiAgICAgICAgY2FyZXQ6IGNhcmV0LFxuICAgICAgICBpZGVhbERpcmVjdGlvbjogaWRlYWxEaXJlY3Rpb24sXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemUsXG4gICAgICAgIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvcjogcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yLFxuICAgICAgICByZWxhdGl2ZU9mZnNldDogcmVsYXRpdmVPZmZzZXQsXG4gICAgICAgIHJvdW5kaW5nOiByb3VuZGluZyxcbiAgICAgICAgc2hvdWxkRm9jdXM6IHNob3VsZEZvY3VzLFxuICAgICAgICB0cmlnZ2VyUmVjdDogdHJpZ2dlckJvdW5kaW5nUmVjdCxcbiAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICB9LCBjaGlsZHJlbikpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZjIpIHtcbiAgICAgIHZhciBhbmNob3IgPSBfcmVmMi5hbmNob3IsXG4gICAgICAgICAgcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yID0gX3JlZjIucG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yO1xuICAgICAgcmV0dXJuIGdldFRyaWdnZXJSZWN0KGFuY2hvciwgcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udHJvbGxlcjtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KENvbnRyb2xsZXIsIFwicHJvcFR5cGVzXCIsIHtcbiAgYW5jaG9yOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGNvbnRhaW5zOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IFByb3BUeXBlcy5mdW5jXG4gIH0pLFxuICBiZ0NvbG9yOiBQcm9wVHlwZXMub25lT2YoWydibHVlJywgJ2RhcmtHcmF5JywgJ29yYW5nZScsICdyZWQnLCAnd2hpdGUnXSksXG4gIGJvcmRlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGNhcmV0OiBQcm9wVHlwZXMuYm9vbCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBpZGVhbERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsndXAnLCAncmlnaHQnLCAnZG93bicsICdsZWZ0J10pLFxuICBvbkRpc21pc3M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvcjogUHJvcFR5cGVzLmJvb2wsXG4gIHJvdW5kaW5nOiBQcm9wVHlwZXMub25lT2YoWzIsIDRdKSxcbiAgc2hvdWxkRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSAvLyBkZWZhdWx0OiBzbVxuICBdKVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShDb250cm9sbGVyLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIC8vIERlZmF1bHQgc2l6ZSBvbmx5IGFwcGxpZXMgd2hlbiBzaXplIGlzIG9taXR0ZWQsXG4gIC8vIGlmIHBhc3NlZCBhcyBudWxsIGl0IHdpbGwgcmVtYWluIG51bGxcbiAgc2l6ZTogJ3NtJ1xufSk7XG5cbmZ1bmN0aW9uIEZseW91dChwcm9wcykge1xuICB2YXIgYW5jaG9yID0gcHJvcHMuYW5jaG9yLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGlkZWFsRGlyZWN0aW9uID0gcHJvcHMuaWRlYWxEaXJlY3Rpb24sXG4gICAgICBvbkRpc21pc3MgPSBwcm9wcy5vbkRpc21pc3MsXG4gICAgICBfcHJvcHMkcG9zaXRpb25SZWxhdGkgPSBwcm9wcy5wb3NpdGlvblJlbGF0aXZlVG9BbmNob3IsXG4gICAgICBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3IgPSBfcHJvcHMkcG9zaXRpb25SZWxhdGkgPT09IHZvaWQgMCA/IHRydWUgOiBfcHJvcHMkcG9zaXRpb25SZWxhdGksXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnd2hpdGUnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHNob3VsZEZvY3VzID0gcHJvcHMuc2hvdWxkRm9jdXMsXG4gICAgICBzaG91bGRGb2N1cyA9IF9wcm9wcyRzaG91bGRGb2N1cyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9wcm9wcyRzaG91bGRGb2N1cyxcbiAgICAgIF9wcm9wcyRzaG93Q2FyZXQgPSBwcm9wcy5zaG93Q2FyZXQsXG4gICAgICBzaG93Q2FyZXQgPSBfcHJvcHMkc2hvd0NhcmV0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzaG93Q2FyZXQsXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZTtcblxuICBpZiAoIWFuY2hvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KENvbnRyb2xsZXIsIHtcbiAgICBhbmNob3I6IGFuY2hvcixcbiAgICBiZ0NvbG9yOiBjb2xvcixcbiAgICBib3JkZXI6IHRydWUsXG4gICAgY2FyZXQ6IHNob3dDYXJldCxcbiAgICBpZGVhbERpcmVjdGlvbjogaWRlYWxEaXJlY3Rpb24sXG4gICAgb25EaXNtaXNzOiBvbkRpc21pc3MsXG4gICAgcG9zaXRpb25SZWxhdGl2ZVRvQW5jaG9yOiBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3IsXG4gICAgcm91bmRpbmc6IDQsXG4gICAgc2hvdWxkRm9jdXM6IHNob3VsZEZvY3VzLFxuICAgIHNpemU6IHNpemUgPT09ICdmbGV4aWJsZScgPyBudWxsIDogc2l6ZVxuICB9LCBjaGlsZHJlbik7XG59XG5GbHlvdXQucHJvcFR5cGVzID0ge1xuICBhbmNob3I6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY29udGFpbnM6IFByb3BUeXBlcy5mdW5jLFxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdDogUHJvcFR5cGVzLmZ1bmNcbiAgfSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgaWRlYWxEaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZihbJ3VwJywgJ3JpZ2h0JywgJ2Rvd24nLCAnbGVmdCddKSxcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBwb3NpdGlvblJlbGF0aXZlVG9BbmNob3I6IFByb3BUeXBlcy5ib29sLFxuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnYmx1ZScsICdvcmFuZ2UnLCAncmVkJywgJ3doaXRlJywgJ2RhcmtHcmF5J10pLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKSAvLyBkZWZhdWx0OiBzbVxuICBdKSxcbiAgc2hvd0NhcmV0OiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIHN0eWxlcyRkID0ge1wid2FzaFwiOlwibUxlIE1JdyBRTFkgUnltIHA2ViBvak5cIn07XG5cbmZ1bmN0aW9uIHppcChhLCBiKSB7XG4gIHJldHVybiBhLm1hcChmdW5jdGlvbiAoaXRlbSwgaWR4KSB7XG4gICAgcmV0dXJuIFtpdGVtLCBiW2lkeF1dO1xuICB9KTtcbn1cblxudmFyIEJPUkRFUl9XSURUSCA9IDI7XG52YXIgQVZBVEFSX1NJWkVTID0ge1xuICB4czogMjQsXG4gIHNtOiAzMixcbiAgbWQ6IDQ4LFxuICBsZzogNjQsXG4gIHhsOiAxMjBcbn07XG5cbnZhciBhdmF0YXJMYXlvdXQgPSBmdW5jdGlvbiBhdmF0YXJMYXlvdXQobiwgc2l6ZSkge1xuICBzd2l0Y2ggKG4pIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgdGV4dExheW91dDogJ2NlbnRlcidcbiAgICAgIH1dO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6IFwiY2FsYyg1MCUgLSBcIi5jb25jYXQoQk9SREVSX1dJRFRIIC8gMiwgXCJweClcIiksXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgdGV4dExheW91dDogJ2NlbnRlcidcbiAgICAgIH0sIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiBcImNhbGMoNTAlICsgXCIuY29uY2F0KEJPUkRFUl9XSURUSCAvIDIsIFwicHgpXCIpLFxuICAgICAgICB3aWR0aDogXCJjYWxjKDUwJSAtIFwiLmNvbmNhdChCT1JERVJfV0lEVEggLyAyLCBcInB4KVwiKSxcbiAgICAgICAgaGVpZ2h0OiBzaXplLFxuICAgICAgICB0ZXh0TGF5b3V0OiAnY2VudGVyJ1xuICAgICAgfV07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6IFwiY2FsYyg1MCUgLSBcIi5jb25jYXQoQk9SREVSX1dJRFRIIC8gMiwgXCJweClcIiksXG4gICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgdGV4dExheW91dDogJ2NlbnRlcidcbiAgICAgIH0sIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiBcImNhbGMoNTAlICsgXCIuY29uY2F0KEJPUkRFUl9XSURUSCAvIDIsIFwicHgpXCIpLFxuICAgICAgICB3aWR0aDogJ2NhbGMoNTAlKScsXG4gICAgICAgIGhlaWdodDogXCJjYWxjKDUwJSAtIFwiLmNvbmNhdChCT1JERVJfV0lEVEggLyAyLCBcInB4KVwiKSxcbiAgICAgICAgdGV4dExheW91dDogJ3RvcExlZnQnXG4gICAgICB9LCB7XG4gICAgICAgIHRvcDogXCJjYWxjKDUwJSArIFwiLmNvbmNhdChCT1JERVJfV0lEVEggLyAyLCBcInB4KVwiKSxcbiAgICAgICAgbGVmdDogXCJjYWxjKDUwJSArIFwiLmNvbmNhdChCT1JERVJfV0lEVEggLyAyLCBcInB4KVwiKSxcbiAgICAgICAgd2lkdGg6ICdjYWxjKDUwJSknLFxuICAgICAgICBoZWlnaHQ6IFwiY2FsYyg1MCUgLSBcIi5jb25jYXQoQk9SREVSX1dJRFRIIC8gMiwgXCJweClcIiksXG4gICAgICAgIHRleHRMYXlvdXQ6ICdib3R0b21MZWZ0J1xuICAgICAgfV07XG4gIH1cbn07XG5cbnZhciBkZWdUb1JhZCA9IGZ1bmN0aW9uIGRlZ1RvUmFkKGRlZykge1xuICByZXR1cm4gZGVnICogKE1hdGguUEkgLyAxODApO1xufTtcblxudmFyIERlZmF1bHRBdmF0YXIkMSA9IGZ1bmN0aW9uIERlZmF1bHRBdmF0YXIocHJvcHMpIHtcbiAgdmFyIHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICB0ZXh0TGF5b3V0ID0gcHJvcHMudGV4dExheW91dDtcbiAgdmFyIHF1YXJ0ZXJQYWRkaW5nID0gXCJjYWxjKFwiLmNvbmNhdChNYXRoLnNpbihkZWdUb1JhZCg0NSkpLCBcIiAqIChcIikuY29uY2F0KHNpemUsIFwiKSAvIDIpXCIpO1xuICB2YXIgaW5pdGlhbCA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgdmlld0JveDogXCItNTAgLTUwIDEwMCAxMDBcIixcbiAgICB2ZXJzaW9uOiBcIjEuMVwiLFxuICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IFwieE1pZFlNaWQgbWVldFwiLFxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCBuYW1lKSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0ZXh0XCIsIHtcbiAgICBmb250U2l6ZTogXCI0MHB4XCIsXG4gICAgZmlsbDogXCIjMTExXCIsXG4gICAgZG9taW5hbnRCYXNlbGluZTogXCJjZW50cmFsXCIsXG4gICAgdGV4dEFuY2hvcjogXCJtaWRkbGVcIixcbiAgICBjbGFzc05hbWU6IFt0eXBvZ3JhcGh5LmFudGlhbGlhc2VkLCB0eXBvZ3JhcGh5LnNhbnNTZXJpZiwgdHlwb2dyYXBoeS5mb250V2VpZ2h0Qm9sZF0uam9pbignICcpXG4gIH0sIG5hbWUgPyBfdG9Db25zdW1hYmxlQXJyYXkobmFtZSlbMF0udG9VcHBlckNhc2UoKSA6ICcnKSk7XG5cbiAgc3dpdGNoICh0ZXh0TGF5b3V0KSB7XG4gICAgY2FzZSAnYm90dG9tTGVmdCc6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBuYW1lLFxuICAgICAgICBjb2xvcjogXCJsaWdodEdyYXlcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiZW5kXCIsXG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgICAgICBfX3N0eWxlOiB7XG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiBxdWFydGVyUGFkZGluZyxcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogcXVhcnRlclBhZGRpbmdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGluaXRpYWwpO1xuXG4gICAgY2FzZSAndG9wTGVmdCc6XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBuYW1lLFxuICAgICAgICBjb2xvcjogXCJsaWdodEdyYXlcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwic3RhcnRcIixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IHF1YXJ0ZXJQYWRkaW5nLFxuICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBxdWFydGVyUGFkZGluZ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgaW5pdGlhbCk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBcImFyaWEtbGFiZWxcIjogbmFtZSxcbiAgICAgICAgY29sb3I6IFwibGlnaHRHcmF5XCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIlxuICAgICAgfSwgaW5pdGlhbCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIEdyb3VwQXZhdGFyKHByb3BzKSB7XG4gIHZhciBjb2xsYWJvcmF0b3JzID0gcHJvcHMuY29sbGFib3JhdG9ycyxcbiAgICAgIG91dGxpbmUgPSBwcm9wcy5vdXRsaW5lLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnZml0JyA6IF9wcm9wcyRzaXplO1xuICB2YXIgYXZhdGFyV2lkdGggPSBzaXplID09PSAnZml0JyA/ICcxMDAlJyA6IEFWQVRBUl9TSVpFU1tzaXplXTtcbiAgdmFyIGF2YXRhckhlaWdodCA9IHNpemUgPT09ICdmaXQnID8gJycgOiBBVkFUQVJfU0laRVNbc2l6ZV07XG4gIHZhciBwb3NpdGlvbnMgPSBhdmF0YXJMYXlvdXQoY29sbGFib3JhdG9ycy5sZW5ndGgsIGF2YXRhcldpZHRoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgcm91bmRpbmc6IFwiY2lyY2xlXCIsXG4gICAgd2lkdGg6IGF2YXRhcldpZHRoLFxuICAgIGhlaWdodDogYXZhdGFySGVpZ2h0LFxuICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgX19zdHlsZTogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG91dGxpbmUgPyB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgMCAwIDJweCAjZmZmJ1xuICAgICAgfSA6IHt9KSwge30sIHtcbiAgICAgICAgLy8gd2lsbENoYW5nZTogdHJhbnNmb3JtIGZpeGVzIGEgc3RyYW5nZSBiZWhhdmlvciB3aGVyZSB0aGUgYm9yZGVyIG9mIHRoZSBjaGlsZHJlblxuICAgICAgICAvLyBhcmUgbm90IHByb3Blcmx5IHRyaW1tZWQgZXZlbiB0aG91Z2ggb3ZlcmZsb3c6IGhpZGRlbiBpcyBzZXRcbiAgICAgICAgd2lsbENoYW5nZTogJ3RyYW5zZm9ybSdcbiAgICAgIH0pXG4gICAgfVxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBkYW5nZXJvdXNseVNldElubGluZVN0eWxlOiB7XG4gICAgICBfX3N0eWxlOiB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206ICcxMDAlJ1xuICAgICAgfVxuICAgIH1cbiAgfSksIHppcChwb3NpdGlvbnMsIGNvbGxhYm9yYXRvcnMpLm1hcChmdW5jdGlvbiAoX3JlZiwgaWR4KSB7XG4gICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgIHBvc2l0aW9uID0gX3JlZjJbMF0sXG4gICAgICAgIF9yZWYyJCA9IF9yZWYyWzFdLFxuICAgICAgICBjb2xsYWJvcmF0b3IgPSBfcmVmMiQgPT09IHZvaWQgMCA/IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgc3JjOiB1bmRlZmluZWRcbiAgICB9IDogX3JlZjIkO1xuXG4gICAgdmFyIHdpZHRoID0gcG9zaXRpb24ud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHBvc2l0aW9uLmhlaWdodCxcbiAgICAgICAgdG9wID0gcG9zaXRpb24udG9wLFxuICAgICAgICBsZWZ0ID0gcG9zaXRpb24ubGVmdCxcbiAgICAgICAgdGV4dExheW91dCA9IHBvc2l0aW9uLnRleHRMYXlvdXQ7XG4gICAgdmFyIG5hbWUgPSBjb2xsYWJvcmF0b3IubmFtZSxcbiAgICAgICAgc3JjID0gY29sbGFib3JhdG9yLnNyYztcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICBrZXk6IGlkeCxcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgICAgX19zdHlsZToge1xuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHNyYyA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEltYWdlLCB7XG4gICAgICBhbHQ6IG5hbWUsXG4gICAgICBjb2xvcjogXCIjRUZFRkVGXCIsXG4gICAgICBzcmM6IHNyYyxcbiAgICAgIG5hdHVyYWxXaWR0aDogMSxcbiAgICAgIG5hdHVyYWxIZWlnaHQ6IDEsXG4gICAgICBmaXQ6IFwiY292ZXJcIlxuICAgIH0pIDogLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRGVmYXVsdEF2YXRhciQxLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdGV4dExheW91dDogdGV4dExheW91dCxcbiAgICAgIHNpemU6IGhlaWdodFxuICAgIH0pLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICBjbGFzc05hbWU6IHN0eWxlcyRkLndhc2hcbiAgICB9KSk7XG4gIH0pKTtcbn1cbkdyb3VwQXZhdGFyLnByb3BUeXBlcyA9IHtcbiAgY29sbGFib3JhdG9yczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmV4YWN0KHtcbiAgICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pKS5pc1JlcXVpcmVkLFxuICBvdXRsaW5lOiBQcm9wVHlwZXMuYm9vbCxcbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAnZml0J10pXG59O1xuXG52YXIgc3R5bGVzJGUgPSB7XCJIZWFkaW5nXCI6XCJsSDEgZHlIIGlGY1wiLFwiZm9udFNpemUxXCI6XCJrT05cIixcImZvbnRTaXplMlwiOlwidXQ1XCIsXCJmb250U2l6ZTNcIjpcImt5M1wifTtcblxudmFyIGRlZmF1bHRIZWFkaW5nTGV2ZWxzID0ge1xuICBzbTogMyxcbiAgbWQ6IDIsXG4gIGxnOiAxXG59O1xudmFyIFNJWkVfU0NBTEUkMSA9IHtcbiAgc206IDEsXG4gIG1kOiAyLFxuICBsZzogM1xufTtcbmZ1bmN0aW9uIEhlYWRpbmcocHJvcHMpIHtcbiAgdmFyIGFjY2Vzc2liaWxpdHlMZXZlbCA9IHByb3BzLmFjY2Vzc2liaWxpdHlMZXZlbCxcbiAgICAgIF9wcm9wcyRhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgYWxpZ24gPSBfcHJvcHMkYWxpZ24gPT09IHZvaWQgMCA/ICdsZWZ0JyA6IF9wcm9wcyRhbGlnbixcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGFya0dyYXknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGlkID0gcHJvcHMuaWQsXG4gICAgICBpZCA9IF9wcm9wcyRpZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRpZCxcbiAgICAgIF9wcm9wcyRvdmVyZmxvdyA9IHByb3BzLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3cgPSBfcHJvcHMkb3ZlcmZsb3cgPT09IHZvaWQgMCA/ICdicmVha1dvcmQnIDogX3Byb3BzJG92ZXJmbG93LFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbGcnIDogX3Byb3BzJHNpemUsXG4gICAgICBfcHJvcHMkdHJ1bmNhdGUgPSBwcm9wcy50cnVuY2F0ZSxcbiAgICAgIHRydW5jYXRlID0gX3Byb3BzJHRydW5jYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR0cnVuY2F0ZTtcbiAgdmFyIGNzID0gY2xhc3NuYW1lcyhzdHlsZXMkZS5IZWFkaW5nLCBzdHlsZXMkZVtcImZvbnRTaXplXCIuY29uY2F0KFNJWkVfU0NBTEUkMVtzaXplXSldLCBjb2xvcnNbY29sb3JdLCBhbGlnbiA9PT0gJ2NlbnRlcicgJiYgdHlwb2dyYXBoeS5hbGlnbkNlbnRlciwgYWxpZ24gPT09ICdqdXN0aWZ5JyAmJiB0eXBvZ3JhcGh5LmFsaWduSnVzdGlmeSwgYWxpZ24gPT09ICdsZWZ0JyAmJiB0eXBvZ3JhcGh5LmFsaWduTGVmdCwgYWxpZ24gPT09ICdyaWdodCcgJiYgdHlwb2dyYXBoeS5hbGlnblJpZ2h0LCBvdmVyZmxvdyA9PT0gJ2JyZWFrV29yZCcgJiYgdHlwb2dyYXBoeS5icmVha1dvcmQsIHRydW5jYXRlICYmIHR5cG9ncmFwaHkudHJ1bmNhdGUpO1xuICB2YXIgaGVhZGluZ0xldmVsID0gYWNjZXNzaWJpbGl0eUxldmVsIHx8IGRlZmF1bHRIZWFkaW5nTGV2ZWxzW3NpemVdO1xuICB2YXIgbmV3UHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiBjc1xuICB9O1xuXG4gIGlmIChpZCkge1xuICAgIG5ld1Byb3BzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG5ld1Byb3BzKSwge30sIHtcbiAgICAgIGlkOiBpZFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHRydW5jYXRlICYmIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBuZXdQcm9wcyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBuZXdQcm9wcyksIHt9LCB7XG4gICAgICB0aXRsZTogY2hpbGRyZW5cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFwiaFwiLmNvbmNhdChoZWFkaW5nTGV2ZWwpLCBuZXdQcm9wcywgY2hpbGRyZW4pO1xufVxuSGVhZGluZy5wcm9wVHlwZXMgPSB7XG4gIGFjY2Vzc2liaWxpdHlMZXZlbDogUHJvcFR5cGVzLm9uZU9mKFsxLCAyLCAzLCA0LCA1LCA2XSksXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ2NlbnRlcicsICdqdXN0aWZ5J10pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydibHVlJywgJ2RhcmtHcmF5JywgJ2VnZ3BsYW50JywgJ2dyYXknLCAnZ3JlZW4nLCAnbGlnaHRHcmF5JywgJ21hcm9vbicsICdtaWRuaWdodCcsICduYXZ5JywgJ29saXZlJywgJ29yYW5nZScsICdvcmNoaWQnLCAncGluZScsICdwdXJwbGUnLCAncmVkJywgJ3dhdGVybWVsb24nLCAnd2hpdGUnXSksXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvdmVyZmxvdzogUHJvcFR5cGVzLm9uZU9mKFsnbm9ybWFsJywgJ2JyZWFrV29yZCddKSxcbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc20nLCAnbWQnLCAnbGcnXSksXG4gIHRydW5jYXRlOiBQcm9wVHlwZXMuYm9vbFxufTtcblxudmFyIHN0eWxlcyRmID0ge1wiYnV0dG9uXCI6XCJyWWEga1ZjIGFkbiB5UW9cIixcImVuYWJsZWRcIjpcInFycyBCRzdcIixcImRpc2FibGVkXCI6XCJpVGVcIn07XG5cbnZhciBzdHlsZXMkZyA9IHtcInBvZ1wiOlwieDhmIElOZCBfTzEgZ2p6IG1ROFwiLFwiZm9jdXNlZFwiOlwiWHNpIEMxSlwiLFwic2VsZWN0ZWRcIjpcInk5MSBCc0ZcIixcInRyYW5zcGFyZW50XCI6XCJPR0ogWWJZXCIsXCJ0cmFuc3BhcmVudERhcmtHcmF5XCI6XCJsRUMgcHJHXCIsXCJob3ZlcmVkXCI6XCJiUFdcIixcIndoaXRlXCI6XCJOU3MgdTk3XCIsXCJhY3RpdmVcIjpcInM0bVwiLFwibGlnaHRHcmF5XCI6XCJXaFUgZ3BWXCIsXCJncmF5XCI6XCJKaE8gZ2ZQXCIsXCJkYXJrR3JheVwiOlwiQWRiIEJzRlwiLFwicmVkXCI6XCJwSGwgSnJuXCJ9O1xuXG52YXIgU0laRV9OQU1FX1RPX1BJWEVMJDEgPSB7XG4gIHhzOiAyNCxcbiAgc206IDMyLFxuICBtZDogNDAsXG4gIGxnOiA0OCxcbiAgeGw6IDU2XG59O1xudmFyIFNJWkVfTkFNRV9UT19JQ09OX1NJWkVfUElYRUwgPSB7XG4gIHhzOiAxMixcbiAgc206IDE2LFxuICBtZDogMTgsXG4gIGxnOiAyMCxcbiAgeGw6IDI0XG59O1xudmFyIGRlZmF1bHRJY29uQnV0dG9uSWNvbkNvbG9ycyA9IHtcbiAgZGFya0dyYXk6ICd3aGl0ZScsXG4gIGdyYXk6ICd3aGl0ZScsXG4gIGxpZ2h0R3JheTogJ2dyYXknLFxuICB0cmFuc3BhcmVudDogJ2dyYXknLFxuICByZWQ6ICd3aGl0ZScsXG4gIHRyYW5zcGFyZW50RGFya0dyYXk6ICd3aGl0ZScsXG4gIHdoaXRlOiAnZ3JheSdcbn07XG5mdW5jdGlvbiBQb2cocHJvcHMpIHtcbiAgdmFyIF9jbGFzc25hbWVzO1xuXG4gIHZhciBfcHJvcHMkYWN0aXZlID0gcHJvcHMuYWN0aXZlLFxuICAgICAgYWN0aXZlID0gX3Byb3BzJGFjdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYWN0aXZlLFxuICAgICAgX3Byb3BzJGJnQ29sb3IgPSBwcm9wcy5iZ0NvbG9yLFxuICAgICAgYmdDb2xvciA9IF9wcm9wcyRiZ0NvbG9yID09PSB2b2lkIDAgPyAndHJhbnNwYXJlbnQnIDogX3Byb3BzJGJnQ29sb3IsXG4gICAgICBkYW5nZXJvdXNseVNldFN2Z1BhdGggPSBwcm9wcy5kYW5nZXJvdXNseVNldFN2Z1BhdGgsXG4gICAgICBfcHJvcHMkZm9jdXNlZCA9IHByb3BzLmZvY3VzZWQsXG4gICAgICBmb2N1c2VkID0gX3Byb3BzJGZvY3VzZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvY3VzZWQsXG4gICAgICBfcHJvcHMkaG92ZXJlZCA9IHByb3BzLmhvdmVyZWQsXG4gICAgICBob3ZlcmVkID0gX3Byb3BzJGhvdmVyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGhvdmVyZWQsXG4gICAgICBpY29uID0gcHJvcHMuaWNvbixcbiAgICAgIGljb25Db2xvciA9IHByb3BzLmljb25Db2xvcixcbiAgICAgIF9wcm9wcyRzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgc2VsZWN0ZWQgPSBfcHJvcHMkc2VsZWN0ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNlbGVjdGVkLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWQnIDogX3Byb3BzJHNpemU7XG4gIHZhciBpY29uU2l6ZSA9IFNJWkVfTkFNRV9UT19JQ09OX1NJWkVfUElYRUxbc2l6ZV07XG4gIHZhciBjb2xvciA9IHNlbGVjdGVkICYmICd3aGl0ZScgfHwgaWNvbkNvbG9yIHx8IGRlZmF1bHRJY29uQnV0dG9uSWNvbkNvbG9yc1tiZ0NvbG9yXTtcbiAgdmFyIGlubGluZVN0eWxlID0ge1xuICAgIGhlaWdodDogU0laRV9OQU1FX1RPX1BJWEVMJDFbc2l6ZV0sXG4gICAgd2lkdGg6IFNJWkVfTkFNRV9UT19QSVhFTCQxW3NpemVdXG4gIH07XG4gIHZhciBjbGFzc2VzID0gY2xhc3NuYW1lcyhzdHlsZXMkZy5wb2csIChfY2xhc3NuYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyRnW2JnQ29sb3JdLCAhc2VsZWN0ZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyRnLnNlbGVjdGVkLCBzZWxlY3RlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJGcuYWN0aXZlLCBhY3RpdmUpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyRnLmZvY3VzZWQsIGZvY3VzZWQpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyRnLmhvdmVyZWQsIGhvdmVyZWQgJiYgIWZvY3VzZWQgJiYgIWFjdGl2ZSksIF9jbGFzc25hbWVzKSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIHN0eWxlOiBpbmxpbmVTdHlsZVxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICByb3VuZGluZzogXCJjaXJjbGVcIlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgYWNjZXNzaWJpbGl0eUxhYmVsOiBcIlwiLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkYW5nZXJvdXNseVNldFN2Z1BhdGg6IGRhbmdlcm91c2x5U2V0U3ZnUGF0aCxcbiAgICBpY29uOiBpY29uLFxuICAgIHNpemU6IGljb25TaXplXG4gIH0pKSk7XG59XG5Qb2cucHJvcFR5cGVzID0ge1xuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBiZ0NvbG9yOiBQcm9wVHlwZXMub25lT2YoWyd0cmFuc3BhcmVudCcsICdkYXJrR3JheScsICd0cmFuc3BhcmVudERhcmtHcmF5JywgJ2dyYXknLCAnbGlnaHRHcmF5JywgJ3doaXRlJ10pLFxuICBkYW5nZXJvdXNseVNldFN2Z1BhdGg6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19wYXRoOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLFxuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaG92ZXJlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGljb246IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhpY29ucykpLFxuICBpY29uQ29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2dyYXknLCAnZGFya0dyYXknLCAncmVkJywgJ3doaXRlJ10pLFxuICBzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhTSVpFX05BTUVfVE9fUElYRUwkMSkpXG59O1xuXG5mdW5jdGlvbiBJY29uQnV0dG9uKF9yZWYpIHtcbiAgdmFyIGFjY2Vzc2liaWxpdHlFeHBhbmRlZCA9IF9yZWYuYWNjZXNzaWJpbGl0eUV4cGFuZGVkLFxuICAgICAgYWNjZXNzaWJpbGl0eUhhc3BvcHVwID0gX3JlZi5hY2Nlc3NpYmlsaXR5SGFzcG9wdXAsXG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWwgPSBfcmVmLmFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgIGJnQ29sb3IgPSBfcmVmLmJnQ29sb3IsXG4gICAgICBkYW5nZXJvdXNseVNldFN2Z1BhdGggPSBfcmVmLmRhbmdlcm91c2x5U2V0U3ZnUGF0aCxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIGljb24gPSBfcmVmLmljb24sXG4gICAgICBpY29uQ29sb3IgPSBfcmVmLmljb25Db2xvcixcbiAgICAgIHNlbGVjdGVkID0gX3JlZi5zZWxlY3RlZCxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBpc0FjdGl2ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRBY3RpdmUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNCA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTMsIDIpLFxuICAgICAgaXNGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlNFswXSxcbiAgICAgIHNldEZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGU1ID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlNiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZTUsIDIpLFxuICAgICAgaXNIb3ZlcmVkID0gX1JlYWN0JHVzZVN0YXRlNlswXSxcbiAgICAgIHNldEhvdmVyZWQgPSBfUmVhY3QkdXNlU3RhdGU2WzFdO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IGFjY2Vzc2liaWxpdHlFeHBhbmRlZCxcbiAgICBcImFyaWEtaGFzcG9wdXBcIjogYWNjZXNzaWJpbGl0eUhhc3BvcHVwLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBhY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzKHN0eWxlcyRmLmJ1dHRvbiwgZGlzYWJsZWQgPyBzdHlsZXMkZi5kaXNhYmxlZCA6IHN0eWxlcyRmLmVuYWJsZWQpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICAgIHJldHVybiBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHJldHVybiBfb25DbGljayAmJiBfb25DbGljayh7XG4gICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgICAgcmV0dXJuIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcbiAgICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oKSB7XG4gICAgICByZXR1cm4gc2V0QWN0aXZlKHRydWUpO1xuICAgIH0sXG4gICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7XG4gICAgICByZXR1cm4gc2V0SG92ZXJlZCh0cnVlKTtcbiAgICB9LFxuICAgIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge1xuICAgICAgc2V0QWN0aXZlKGZhbHNlKTtcbiAgICAgIHNldEhvdmVyZWQoZmFsc2UpO1xuICAgIH0sXG4gICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoKSB7XG4gICAgICByZXR1cm4gc2V0QWN0aXZlKGZhbHNlKTtcbiAgICB9LFxuICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUG9nLCB7XG4gICAgYWN0aXZlOiAhZGlzYWJsZWQgJiYgaXNBY3RpdmUsXG4gICAgYmdDb2xvcjogYmdDb2xvcixcbiAgICBkYW5nZXJvdXNseVNldFN2Z1BhdGg6IGRhbmdlcm91c2x5U2V0U3ZnUGF0aCxcbiAgICBmb2N1c2VkOiAhZGlzYWJsZWQgJiYgaXNGb2N1c2VkLFxuICAgIGhvdmVyZWQ6ICFkaXNhYmxlZCAmJiBpc0hvdmVyZWQsXG4gICAgaWNvbjogaWNvbixcbiAgICBpY29uQ29sb3I6IGljb25Db2xvcixcbiAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgc2l6ZTogc2l6ZVxuICB9KSk7XG59XG5JY29uQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgYWNjZXNzaWJpbGl0eUV4cGFuZGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWNjZXNzaWJpbGl0eUhhc3BvcHVwOiBQcm9wVHlwZXMuYm9vbCxcbiAgYWNjZXNzaWJpbGl0eUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJnQ29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3RyYW5zcGFyZW50JywgJ2RhcmtHcmF5JywgJ3RyYW5zcGFyZW50RGFya0dyYXknLCAnZ3JheScsICdsaWdodEdyYXknLCAnd2hpdGUnLCAncmVkJ10pLFxuICBkYW5nZXJvdXNseVNldFN2Z1BhdGg6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19wYXRoOiBQcm9wVHlwZXMuc3RyaW5nXG4gIH0pLFxuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGljb246IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhpY29ucykpLFxuICBpY29uQ29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2dyYXknLCAnZGFya0dyYXknLCAncmVkJywgJ3doaXRlJ10pLFxuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2VsZWN0ZWQ6IFByb3BUeXBlcy5ib29sLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddKVxufTtcblxudmFyIExheWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMYXllciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihMYXllcik7XG5cbiAgZnVuY3Rpb24gTGF5ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGF5ZXIpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge1xuICAgICAgbW91bnRlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJlbFwiLCB2b2lkIDApO1xuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xuICAgICAgX3RoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybignVXNpbmcgTGF5ZXIgd2l0aG91dCBkb2N1bWVudCBwcmVzZW50LiBDaGlsZHJlbiB3aWxsIG5vdCBiZSByZW5kZXJlZC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTGF5ZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuYm9keSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWwpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBtb3VudGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmIChkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5lbCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUubW91bnRlZCAmJiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIHRoaXMuZWwpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMYXllcjtcbn0oQ29tcG9uZW50KTtcblxuLypcbiAgTXVjaCBvZiB0aGUgbWF0aCBhbmQgdW5kZXJzdGFuZGluZyBhYm91dCB0aGlzIGNvbXBvbmVudCBjb21lcyBmcm9tIEB2amVhdXgnc1xuICBleGNlbGxlbnQgYmxvZyBwb3N0IG9uIGltYWdlIHJlc2l6aW5nLlxuXG4gIGh0dHA6Ly9ibG9nLnZqZXV4LmNvbS8yMDEzL2ltYWdlL2Nzcy1jb250YWluZXItYW5kLWNvdmVyLmh0bWxcblxuICBJIGhpZ2hseSByZWNvbW1lbmQgeW91IHJlYWQgdGhhdCBmaXJzdCBiZWZvcmUgY29udGludWluZyBvbiByZWFkaW5nLlxuKi9cblxudmFyIGFzcGVjdFJhdGlvID0gZnVuY3Rpb24gYXNwZWN0UmF0aW8od2lkdGgsIGhlaWdodCkge1xuICByZXR1cm4gd2lkdGggLyBoZWlnaHQ7XG59O1xuXG5mdW5jdGlvbiBMZXR0ZXJib3goX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgY29udGVudEFzcGVjdFJhdGlvID0gX3JlZi5jb250ZW50QXNwZWN0UmF0aW8sXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aDtcbiAgdmFyIHZpZXdwb3J0QXNwZWN0UmF0aW8gPSBhc3BlY3RSYXRpbyh3aWR0aCwgaGVpZ2h0KTtcbiAgdmFyIGNvbnRlbnRIZWlnaHQ7XG4gIHZhciBjb250ZW50V2lkdGg7XG5cbiAgaWYgKGNvbnRlbnRBc3BlY3RSYXRpbyA8IHZpZXdwb3J0QXNwZWN0UmF0aW8pIHtcbiAgICBjb250ZW50V2lkdGggPSB3aWR0aDtcbiAgICBjb250ZW50SGVpZ2h0ID0gd2lkdGggLyBjb250ZW50QXNwZWN0UmF0aW87XG4gIH0gZWxzZSB7XG4gICAgY29udGVudFdpZHRoID0gaGVpZ2h0ICogY29udGVudEFzcGVjdFJhdGlvO1xuICAgIGNvbnRlbnRIZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICB2YXIgb2Zmc2V0VG9wID0gKGNvbnRlbnRIZWlnaHQgLSBoZWlnaHQpIC8gLTI7XG4gIHZhciBvZmZzZXRMZWZ0ID0gKGNvbnRlbnRXaWR0aCAtIHdpZHRoKSAvIC0yO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTWFzaywge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpblRvcDogb2Zmc2V0VG9wLFxuICAgICAgbWFyZ2luTGVmdDogb2Zmc2V0TGVmdFxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTWFzaywge1xuICAgIHdpZHRoOiBjb250ZW50V2lkdGgsXG4gICAgaGVpZ2h0OiBjb250ZW50SGVpZ2h0XG4gIH0sIGNoaWxkcmVuKSkpO1xufVxuTGV0dGVyYm94LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjb250ZW50QXNwZWN0UmF0aW86IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn07XG5cbnZhciBzdHlsZXMkaCA9IHtcImxpbmtcIjpcIldrOSB4UTRcIixcImFjY2Vzc2libGVGb2N1c1N0eWxlXCI6XCJXTVUgaXluXCIsXCJibG9ja1wiOlwibGpZIGtWY1wifTtcblxudmFyIFRBQl9LRVlfQ09ERSA9IDk7XG5mdW5jdGlvbiBMaW5rKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGhyZWYgPSBfcmVmLmhyZWYsXG4gICAgICBfcmVmJGlubGluZSA9IF9yZWYuaW5saW5lLFxuICAgICAgaW5saW5lID0gX3JlZiRpbmxpbmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRpbmxpbmUsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgX3JlZiR0YXJnZXQgPSBfcmVmLnRhcmdldCxcbiAgICAgIHRhcmdldCA9IF9yZWYkdGFyZ2V0ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZiR0YXJnZXQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IHVzZVN0YXRlKHRydWUpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBlbmFibGVGb2N1c1N0eWxlcyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRFbmFibGVGb2N1c1N0eWxlcyA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHJlbCA9IHRhcmdldCA9PT0gJ2JsYW5rJyA/ICdub29wZW5lciBub3JlZmVycmVyJyA6IG51bGw7XG4gIHZhciBsaW5rVGFyZ2V0ID0gdGFyZ2V0ID8gXCJfXCIuY29uY2F0KHRhcmdldCkgOiBudWxsO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKG9uQ2xpY2sgJiYgaHJlZikge1xuICAgICAgb25DbGljayh7XG4gICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oKSB7XG4gICAgaWYgKHRhcmdldCA9PT0gJ2JsYW5rJyAmJiBocmVmKSB7XG4gICAgICBzZXRFbmFibGVGb2N1c1N0eWxlcyhmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIGhhbmRsZUtleVVwKGV2ZW50KSB7XG4gICAgaWYgKHRhcmdldCA9PT0gJ2JsYW5rJyAmJiBldmVudC5rZXlDb2RlID09PSBUQUJfS0VZX0NPREUgJiYgaHJlZikge1xuICAgICAgc2V0RW5hYmxlRm9jdXNTdHlsZXModHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhzdHlsZXMkaC5saW5rLCBlbmFibGVGb2N1c1N0eWxlcyA/IHN0eWxlcyRoLmFjY2Vzc2libGVGb2N1c1N0eWxlIDogJycsIGlubGluZSA/ICcnIDogc3R5bGVzJGguYmxvY2spLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICByZWw6IHJlbCxcbiAgICB0YXJnZXQ6IGxpbmtUYXJnZXRcbiAgfSwgY2hpbGRyZW4pO1xufVxuTGluay5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGlubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5vbmVPZihbbnVsbCwgJ3NlbGYnLCAnYmxhbmsnXSlcbn07XG5cbi8qKlxuICogZGVib3VuY2UgcHJldmVudHMgYSBwYXJ0aWN1bGFyIGZ1bmN0aW9uIGZyb20gYmVpbmcgY2FsbGVkIHVudGlsIGFmdGVyIGEgZ2l2ZW5cbiAqIGNvb2xkb3duIHBlcmlvZCAoZGVmYXVsdCAxMDBtcykuIEV2ZXJ5IHRpbWUgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCwgaXQgcmVzZXRzXG4gKiB0aGUgY29vbGRvd24uXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciB0aHJlc2hob2xkID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMDA7XG4gIHZhciBkZWZlclRpbWVyID0gbnVsbDtcblxuICB2YXIgZGVib3VuY2VkID0gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoZGVmZXJUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVyVGltZXIpO1xuICAgIH1cblxuICAgIGRlZmVyVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmVyVGltZXIgPSBudWxsO1xuICAgICAgZm4uYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9LCB0aHJlc2hob2xkKTtcbiAgfTtcblxuICBkZWJvdW5jZWQuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkZWZlclRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59XG5cbnZhciBGZXRjaEl0ZW1zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmV0Y2hJdGVtcywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoRmV0Y2hJdGVtcyk7XG5cbiAgZnVuY3Rpb24gRmV0Y2hJdGVtcygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmV0Y2hJdGVtcyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNoZWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNvbnRhaW5lckhlaWdodCA9IF90aGlzJHByb3BzLmNvbnRhaW5lckhlaWdodCxcbiAgICAgICAgICBpc0F0RW5kID0gX3RoaXMkcHJvcHMuaXNBdEVuZCxcbiAgICAgICAgICBpc0ZldGNoaW5nID0gX3RoaXMkcHJvcHMuaXNGZXRjaGluZyxcbiAgICAgICAgICBmZXRjaE1vcmUgPSBfdGhpcyRwcm9wcy5mZXRjaE1vcmUsXG4gICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gX3RoaXMkcHJvcHMuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgIHNjcm9sbFRvcCA9IF90aGlzJHByb3BzLnNjcm9sbFRvcDtcblxuICAgICAgaWYgKGlzQXRFbmQgfHwgaXNGZXRjaGluZyB8fCAhZmV0Y2hNb3JlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbEJ1ZmZlciA9IGNvbnRhaW5lckhlaWdodCAqIDM7XG5cbiAgICAgIGlmIChzY3JvbGxUb3AgKyBzY3JvbGxCdWZmZXIgPiBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgZmV0Y2hNb3JlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRmV0Y2hJdGVtcywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5jaGVjaygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZldGNoSXRlbXM7XG59KFB1cmVDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoRmV0Y2hJdGVtcywgXCJwcm9wVHlwZXNcIiwge1xuICBjb250YWluZXJIZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaXNBdEVuZDogUHJvcFR5cGVzLmJvb2wsXG4gIGlzRmV0Y2hpbmc6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIGZldGNoTW9yZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHNjcm9sbEhlaWdodDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICBzY3JvbGxUb3A6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBzdHlsZXMkaSA9IHtcIk1hc29ucnlcIjpcInZiSSBYaUdcIixcIk1hc29ucnlfX0l0ZW1cIjpcIllsLSBNSXdcIixcIk1hc29ucnlfX0l0ZW1fX01vdW50ZWRcIjpcIkhiN1wifTtcblxuZnVuY3Rpb24gZ2V0U2Nyb2xsQ29udGFpbmVyKHNjcm9sbENvbnRhaW5lcikge1xuICByZXR1cm4gdHlwZW9mIHNjcm9sbENvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IHNjcm9sbENvbnRhaW5lcigpIDogc2Nyb2xsQ29udGFpbmVyO1xufVxuXG52YXIgU2Nyb2xsQ29udGFpbmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxDb250YWluZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2Nyb2xsQ29udGFpbmVyKTtcblxuICBmdW5jdGlvbiBTY3JvbGxDb250YWluZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbENvbnRhaW5lcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNjcm9sbENvbnRhaW5lclwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdldFNjcm9sbENvbnRhaW5lclJlZlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc2Nyb2xsQ29udGFpbmVyO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVNjcm9sbFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uU2Nyb2xsKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxDb250YWluZXIsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIHNjcm9sbENvbnRhaW5lciA9IGdldFNjcm9sbENvbnRhaW5lcih0aGlzLnByb3BzLnNjcm9sbENvbnRhaW5lcik7XG5cbiAgICAgIGlmIChzY3JvbGxDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGxDb250YWluZXIoc2Nyb2xsQ29udGFpbmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHZhciBuZXh0U2Nyb2xsQ29udGFpbmVyID0gZ2V0U2Nyb2xsQ29udGFpbmVyKHRoaXMucHJvcHMuc2Nyb2xsQ29udGFpbmVyKTtcblxuICAgICAgaWYgKG5leHRTY3JvbGxDb250YWluZXIgJiYgbmV4dFNjcm9sbENvbnRhaW5lciAhPT0gdGhpcy5zY3JvbGxDb250YWluZXIpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTY3JvbGxDb250YWluZXIobmV4dFNjcm9sbENvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidXBkYXRlU2Nyb2xsQ29udGFpbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbENvbnRhaW5lcihzY3JvbGxDb250YWluZXIpIHtcbiAgICAgIGlmICh0aGlzLnNjcm9sbENvbnRhaW5lcikge1xuICAgICAgICAvLyBjbGVhbnVwIGV4aXN0aW5nIHNjcm9sbCBjb250YWluZXIgaWYgaXQgZXhpc3RzXG4gICAgICAgIHRoaXMuc2Nyb2xsQ29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxDb250YWluZXIgPSBzY3JvbGxDb250YWluZXI7XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Nyb2xsQ29udGFpbmVyO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsQ29udGFpbmVyLCBcInByb3BUeXBlc1wiLCB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuICBvblNjcm9sbDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2Nyb2xsQ29udGFpbmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWRcbn0pO1xuXG4vKipcbiAqIHRocm90dGxlIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB0byBhXG4gKiBnaXZlbiB0aHJlc2hob2xkICgxMDBtcyBieSBkZWZhdWx0KS4gVGhlIGZ1bmN0aW9uIGlzIGFsd2F5cyBjYWxsZWRcbiAqIG9uIHRoZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBlZGdlLlxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbikge1xuICB2YXIgdGhyZXNoaG9sZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwO1xuICB2YXIgbGFzdDtcbiAgdmFyIGRlZmVyVGltZXI7XG5cbiAgdmFyIHRocm90dGxlZCA9IGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBpZiAobGFzdCAhPT0gdW5kZWZpbmVkICYmIG5vdyAtIGxhc3QgPCB0aHJlc2hob2xkKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJUaW1lcik7XG4gICAgICBkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICB9LCB0aHJlc2hob2xkIC0gKG5vdyAtIGxhc3QpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IG5vdztcbiAgICAgIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfVxuICB9O1xuXG4gIHRocm90dGxlZC5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRlZmVyVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRocm90dGxlZDtcbn1cblxudmFyIE1lYXN1cmVtZW50U3RvcmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZWFzdXJlbWVudFN0b3JlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWFzdXJlbWVudFN0b3JlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1hcFwiLCBuZXcgV2Vha01hcCgpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNZWFzdXJlbWVudFN0b3JlLCBbe1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJoYXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwLmhhcyhrZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHRoaXMubWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLm1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lYXN1cmVtZW50U3RvcmU7XG59KCk7XG5cbi8qKlxuICogTWVhc3VyaW5nIHNjcm9sbCBwb3NpdGlvbnMsIGVsZW1lbnQgaGVpZ2h0cywgZXRjIGlzIGRpZmZlcmVudCBiZXR3ZWVuXG4gKiBkaWZmZXJlbnQgYnJvd3NlcnMgYW5kIHRoZSB3aW5kb3cgb2JqZWN0IHZzIG90aGVyIERPTSBub2Rlcy4gVGhlc2VcbiAqIHV0aWxzIGFic3RyYWN0IGF3YXkgdGhlc2UgZGlmZmVyZW5jZXMuXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRIZWlnaHQoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogZWxlbWVudC5jbGllbnRIZWlnaHQ7XG59XG5mdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxQb3MoKSB7XG4gIGlmICh3aW5kb3cuc2Nyb2xsWSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gTW9kZXJuIGJyb3dzZXJcbiAgICByZXR1cm4gd2luZG93LnNjcm9sbFk7XG4gIH1cblxuICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElFIHN1cHBvcnQuXG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGdldFJlbGF0aXZlU2Nyb2xsVG9wKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPT09IHdpbmRvdyA/IGdldFdpbmRvd1Njcm9sbFBvcygpIDogZWxlbWVudC5zY3JvbGxUb3AgLSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbn1cbmZ1bmN0aW9uIGdldFNjcm9sbEhlaWdodChlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID09PSB3aW5kb3cgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCA6IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPT09IHdpbmRvdyA/IGdldFdpbmRvd1Njcm9sbFBvcygpIDogZWxlbWVudC5zY3JvbGxUb3A7XG59XG5cbnZhciBVbmlmb3JtUm93TGF5b3V0U3ltYm9sID0gU3ltYm9sKCd1bmlmb3JtUm93Jyk7XG5cbnZhciBtaW5kZXgkMSA9IGZ1bmN0aW9uIG1pbmRleChhcnIpIHtcbiAgdmFyIGlkeCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYXJyW2ldIDwgYXJyW2lkeF0pIHtcbiAgICAgIGlkeCA9IGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlkeDtcbn07XG5cbnZhciBvZmZzY3JlZW4gPSBmdW5jdGlvbiBvZmZzY3JlZW4od2lkdGgpIHtcbiAgdmFyIGhlaWdodCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogSW5maW5pdHk7XG4gIHJldHVybiB7XG4gICAgdG9wOiAtOTk5OSxcbiAgICBsZWZ0OiAtOTk5OSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn07XG5cbnZhciBkZWZhdWx0TGF5b3V0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBfcmVmJGNvbHVtbldpZHRoID0gX3JlZi5jb2x1bW5XaWR0aCxcbiAgICAgIGNvbHVtbldpZHRoID0gX3JlZiRjb2x1bW5XaWR0aCA9PT0gdm9pZCAwID8gMjM2IDogX3JlZiRjb2x1bW5XaWR0aCxcbiAgICAgIF9yZWYkZ3V0dGVyID0gX3JlZi5ndXR0ZXIsXG4gICAgICBndXR0ZXIgPSBfcmVmJGd1dHRlciA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGd1dHRlcixcbiAgICAgIF9yZWYkbWluQ29scyA9IF9yZWYubWluQ29scyxcbiAgICAgIG1pbkNvbHMgPSBfcmVmJG1pbkNvbHMgPT09IHZvaWQgMCA/IDIgOiBfcmVmJG1pbkNvbHMsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGg7XG4gIHJldHVybiBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICBpZiAod2lkdGggPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvZmZzY3JlZW4oY29sdW1uV2lkdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbHVtbldpZHRoQW5kR3V0dGVyID0gY29sdW1uV2lkdGggKyBndXR0ZXI7XG4gICAgdmFyIGNvbHVtbkNvdW50ID0gTWF0aC5tYXgoTWF0aC5mbG9vcigod2lkdGggKyBndXR0ZXIpIC8gY29sdW1uV2lkdGhBbmRHdXR0ZXIpLCBtaW5Db2xzKTsgLy8gdGhlIHRvdGFsIGhlaWdodCBvZiBlYWNoIGNvbHVtblxuXG4gICAgdmFyIGhlaWdodHMgPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpLmZpbGwoMCk7XG4gICAgdmFyIGNlbnRlck9mZnNldCA9IE1hdGgubWF4KE1hdGguZmxvb3IoKHdpZHRoIC0gY29sdW1uV2lkdGhBbmRHdXR0ZXIgKiBjb2x1bW5Db3VudCArIGd1dHRlcikgLyAyKSwgMCk7XG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtKSB7XG4gICAgICB2YXIgcG9zaXRpb25zID0gYWNjO1xuICAgICAgdmFyIGhlaWdodCA9IGNhY2hlLmdldChpdGVtKTtcbiAgICAgIHZhciBwb3NpdGlvbjtcblxuICAgICAgaWYgKGhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgIHBvc2l0aW9uID0gb2Zmc2NyZWVuKGNvbHVtbldpZHRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBoZWlnaHRBbmRHdXR0ZXIgPSBoZWlnaHQgKyBndXR0ZXI7XG4gICAgICAgIHZhciBjb2wgPSBtaW5kZXgkMShoZWlnaHRzKTtcbiAgICAgICAgdmFyIHRvcCA9IGhlaWdodHNbY29sXTtcbiAgICAgICAgdmFyIGxlZnQgPSBjb2wgKiBjb2x1bW5XaWR0aEFuZEd1dHRlciArIGNlbnRlck9mZnNldDtcbiAgICAgICAgaGVpZ2h0c1tjb2xdICs9IGhlaWdodEFuZEd1dHRlcjtcbiAgICAgICAgcG9zaXRpb24gPSB7XG4gICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICB3aWR0aDogY29sdW1uV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcG9zaXRpb25zLnB1c2gocG9zaXRpb24pO1xuICAgICAgcmV0dXJuIHBvc2l0aW9ucztcbiAgICB9LCBbXSk7XG4gIH07XG59KTtcblxudmFyIG9mZnNjcmVlbiQxID0gZnVuY3Rpb24gb2Zmc2NyZWVuKHdpZHRoKSB7XG4gIHZhciBoZWlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IEluZmluaXR5O1xuICByZXR1cm4ge1xuICAgIHRvcDogLTk5OTksXG4gICAgbGVmdDogLTk5OTksXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59O1xuXG52YXIgdW5pZm9ybVJvd0xheW91dCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY2FjaGUgPSBfcmVmLmNhY2hlLFxuICAgICAgX3JlZiRjb2x1bW5XaWR0aCA9IF9yZWYuY29sdW1uV2lkdGgsXG4gICAgICBjb2x1bW5XaWR0aCA9IF9yZWYkY29sdW1uV2lkdGggPT09IHZvaWQgMCA/IDIzNiA6IF9yZWYkY29sdW1uV2lkdGgsXG4gICAgICBfcmVmJGd1dHRlciA9IF9yZWYuZ3V0dGVyLFxuICAgICAgZ3V0dGVyID0gX3JlZiRndXR0ZXIgPT09IHZvaWQgMCA/IDE0IDogX3JlZiRndXR0ZXIsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBfcmVmJG1pbkNvbHMgPSBfcmVmLm1pbkNvbHMsXG4gICAgICBtaW5Db2xzID0gX3JlZiRtaW5Db2xzID09PSB2b2lkIDAgPyAzIDogX3JlZiRtaW5Db2xzO1xuICByZXR1cm4gZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgaWYgKHdpZHRoID09IG51bGwpIHtcbiAgICAgIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb2Zmc2NyZWVuJDEoY29sdW1uV2lkdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGNvbHVtbldpZHRoQW5kR3V0dGVyID0gY29sdW1uV2lkdGggKyBndXR0ZXI7XG4gICAgdmFyIGNvbHVtbkNvdW50ID0gTWF0aC5tYXgoTWF0aC5mbG9vcigod2lkdGggKyBndXR0ZXIpIC8gY29sdW1uV2lkdGhBbmRHdXR0ZXIpLCBtaW5Db2xzKTtcbiAgICB2YXIgcG9zaXRpb25zID0gW107XG4gICAgdmFyIGhlaWdodHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwb3NpdGlvbiA9IHZvaWQgMDtcbiAgICAgIHZhciBoZWlnaHQgPSBjYWNoZS5nZXQoaXRlbXNbaV0pO1xuXG4gICAgICBpZiAoaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgcG9zaXRpb24gPSBvZmZzY3JlZW4kMShjb2x1bW5XaWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29sdW1uID0gaSAlIGNvbHVtbkNvdW50O1xuICAgICAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihpIC8gY29sdW1uQ291bnQpO1xuXG4gICAgICAgIGlmIChjb2x1bW4gPT09IDAgfHwgaGVpZ2h0ID4gaGVpZ2h0c1tyb3ddKSB7XG4gICAgICAgICAgaGVpZ2h0c1tyb3ddID0gaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvcCA9IHJvdyA+IDAgPyBoZWlnaHRzLnNsaWNlKDAsIHJvdykucmVkdWNlKGZ1bmN0aW9uIChzdW0sIHkpIHtcbiAgICAgICAgICByZXR1cm4gc3VtICsgeSArIGd1dHRlcjtcbiAgICAgICAgfSwgMCkgOiAwO1xuICAgICAgICBwb3NpdGlvbiA9IHtcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBsZWZ0OiBjb2x1bW4gKiBjb2x1bW5XaWR0aEFuZEd1dHRlcixcbiAgICAgICAgICB3aWR0aDogY29sdW1uV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcG9zaXRpb25zLnB1c2gocG9zaXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBwb3NpdGlvbnM7XG4gIH07XG59KTtcblxudmFyIG1pbmRleCQyID0gZnVuY3Rpb24gbWluZGV4KGFycikge1xuICB2YXIgaWR4ID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhcnJbaV0gPCBhcnJbaWR4XSkge1xuICAgICAgaWR4ID0gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaWR4O1xufTtcblxudmFyIGZ1bGxXaWR0aExheW91dCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgX3JlZiRndXR0ZXIgPSBfcmVmLmd1dHRlcixcbiAgICAgIGd1dHRlciA9IF9yZWYkZ3V0dGVyID09PSB2b2lkIDAgPyAwIDogX3JlZiRndXR0ZXIsXG4gICAgICBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBfcmVmJG1pbkNvbHMgPSBfcmVmLm1pbkNvbHMsXG4gICAgICBtaW5Db2xzID0gX3JlZiRtaW5Db2xzID09PSB2b2lkIDAgPyAyIDogX3JlZiRtaW5Db2xzLFxuICAgICAgX3JlZiRpZGVhbENvbHVtbldpZHRoID0gX3JlZi5pZGVhbENvbHVtbldpZHRoLFxuICAgICAgaWRlYWxDb2x1bW5XaWR0aCA9IF9yZWYkaWRlYWxDb2x1bW5XaWR0aCA9PT0gdm9pZCAwID8gMjQwIDogX3JlZiRpZGVhbENvbHVtbldpZHRoLFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoO1xuXG4gIGlmICh3aWR0aCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiBJbmZpbml0eSxcbiAgICAgICAgICBsZWZ0OiBJbmZpbml0eSxcbiAgICAgICAgICB3aWR0aDogSW5maW5pdHksXG4gICAgICAgICAgaGVpZ2h0OiBJbmZpbml0eVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSAvLyBcIlRoaXMgaXMga2luZCBvZiBjcmF6eSFcIiAtIHlvdVxuICAvLyBZZXMsIGluZGVlZC4gVGhlIFwiZ3Vlc3NpbmdcIiBoZXJlIGlzIG1lYW50IHRvIHJlcGxpY2F0ZSB0aGUgcGFzcyB0aGF0IHRoZVxuICAvLyBvcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiB0YWtlcyB3aXRoIENTUy5cblxuXG4gIHZhciBjb2xndWVzcyA9IE1hdGguZmxvb3Iod2lkdGggLyBpZGVhbENvbHVtbldpZHRoKTtcbiAgdmFyIGNvbHVtbkNvdW50ID0gTWF0aC5tYXgoTWF0aC5mbG9vcigod2lkdGggLSBjb2xndWVzcyAqIGd1dHRlcikgLyBpZGVhbENvbHVtbldpZHRoKSwgbWluQ29scyk7XG4gIHZhciBjb2x1bW5XaWR0aCA9IE1hdGguZmxvb3Iod2lkdGggLyBjb2x1bW5Db3VudCk7XG4gIHJldHVybiBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAvLyB0aGUgdG90YWwgaGVpZ2h0IG9mIGVhY2ggY29sdW1uXG4gICAgdmFyIGhlaWdodHMgPSBuZXcgQXJyYXkoY29sdW1uQ291bnQpLmZpbGwoMCk7XG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtKSB7XG4gICAgICB2YXIgcG9zaXRpb25zID0gYWNjO1xuICAgICAgdmFyIGhlaWdodCA9IGNhY2hlLmdldChpdGVtKTtcbiAgICAgIHZhciBwb3NpdGlvbjtcblxuICAgICAgaWYgKGhlaWdodCA9PSBudWxsKSB7XG4gICAgICAgIHBvc2l0aW9uID0ge1xuICAgICAgICAgIHRvcDogSW5maW5pdHksXG4gICAgICAgICAgbGVmdDogSW5maW5pdHksXG4gICAgICAgICAgd2lkdGg6IGNvbHVtbldpZHRoLFxuICAgICAgICAgIGhlaWdodDogSW5maW5pdHlcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb2wgPSBtaW5kZXgkMihoZWlnaHRzKTtcbiAgICAgICAgdmFyIHRvcCA9IGhlaWdodHNbY29sXTtcbiAgICAgICAgdmFyIGxlZnQgPSBjb2wgKiBjb2x1bW5XaWR0aCArIGd1dHRlciAvIDI7XG4gICAgICAgIGhlaWdodHNbY29sXSArPSBoZWlnaHQ7XG4gICAgICAgIHBvc2l0aW9uID0ge1xuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgd2lkdGg6IGNvbHVtbldpZHRoIC0gZ3V0dGVyLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBwb3NpdGlvbnM7XG4gICAgfSwgW10pO1xuICB9O1xufSk7XG5cbnZhciBNYXNvbnJ5TGF5b3V0ID0gZnVuY3Rpb24gTWFzb25yeUxheW91dCgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1hc29ucnlMYXlvdXQpO1xufTtcblxudmFyIFVuaWZvcm1Sb3dMYXlvdXQgPSBmdW5jdGlvbiBVbmlmb3JtUm93TGF5b3V0KCkge1xuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5pZm9ybVJvd0xheW91dCk7XG59O1xuXG52YXIgUkVTSVpFX0RFQk9VTkNFID0gMzAwOyAvLyBNdWx0aXBsaWVkIGFnYWluc3QgY29udGFpbmVyIGhlaWdodC5cbi8vIFRoZSBhbW91bnQgb2YgZXh0cmEgYnVmZmVyIHNwYWNlIGZvciBwb3B1bGF0aW5nIHZpc2libGUgaXRlbXMuXG5cbnZhciBWSVJUVUFMX0JVRkZFUl9GQUNUT1IgPSAwLjc7XG5cbnZhciBsYXlvdXROdW1iZXJUb0Nzc0RpbWVuc2lvbiA9IGZ1bmN0aW9uIGxheW91dE51bWJlclRvQ3NzRGltZW5zaW9uKG4pIHtcbiAgcmV0dXJuIG4gIT09IEluZmluaXR5ID8gbiA6IHVuZGVmaW5lZDtcbn07XG5cbnZhciBNYXNvbnJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNYXNvbnJ5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1hc29ucnkpO1xuXG4gIF9jcmVhdGVDbGFzcyhNYXNvbnJ5LCBudWxsLCBbe1xuICAgIGtleTogXCJjcmVhdGVNZWFzdXJlbWVudFN0b3JlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU1lYXN1cmVtZW50U3RvcmUoKSB7XG4gICAgICByZXR1cm4gbmV3IE1lYXN1cmVtZW50U3RvcmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsYXlzIHJlc2l6ZSBoYW5kbGluZyBpbiBjYXNlIHRoZSBzY3JvbGwgY29udGFpbmVyIGlzIHN0aWxsIGJlaW5nIHJlc2l6ZWQuXG4gICAgICovXG5cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIE1hc29ucnkocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFzb25yeSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVSZXNpemVcIiwgZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLmdyaWRXcmFwcGVyKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB3aWR0aDogX3RoaXMuZ3JpZFdyYXBwZXIuY2xpZW50V2lkdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgUkVTSVpFX0RFQk9VTkNFKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwidXBkYXRlU2Nyb2xsUG9zaXRpb25cIiwgdGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5zY3JvbGxDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gX3RoaXMuc2Nyb2xsQ29udGFpbmVyLmdldFNjcm9sbENvbnRhaW5lclJlZigpO1xuXG4gICAgICBpZiAoIXNjcm9sbENvbnRhaW5lcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2Nyb2xsVG9wOiBnZXRTY3JvbGxQb3Moc2Nyb2xsQ29udGFpbmVyKVxuICAgICAgfSk7XG4gICAgfSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm1lYXN1cmVDb250YWluZXJBc3luY1wiLCBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5tZWFzdXJlQ29udGFpbmVyKCk7XG4gICAgfSwgMCkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbnRhaW5lckhlaWdodFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImNvbnRhaW5lck9mZnNldFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImdyaWRXcmFwcGVyXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaW5zZXJ0QW5pbWF0aW9uRnJhbWVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJtZWFzdXJlVGltZW91dFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNjcm9sbENvbnRhaW5lclwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldEdyaWRXcmFwcGVyUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmdyaWRXcmFwcGVyID0gcmVmO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldFNjcm9sbENvbnRhaW5lclJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zY3JvbGxDb250YWluZXIgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZmV0Y2hNb3JlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGxvYWRJdGVtcyA9IF90aGlzJHByb3BzLmxvYWRJdGVtcyxcbiAgICAgICAgICBpdGVtcyA9IF90aGlzJHByb3BzLml0ZW1zO1xuXG4gICAgICBpZiAobG9hZEl0ZW1zICYmIHR5cGVvZiBsb2FkSXRlbXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzRmV0Y2hpbmc6IHRydWVcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBsb2FkSXRlbXMoe1xuICAgICAgICAgICAgZnJvbTogaXRlbXMubGVuZ3RoXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlck1hc29ucnlDb21wb25lbnRcIiwgZnVuY3Rpb24gKGl0ZW1EYXRhLCBpZHgsIHBvc2l0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMyLmNvbXAsXG4gICAgICAgICAgc2Nyb2xsQ29udGFpbmVyID0gX3RoaXMkcHJvcHMyLnNjcm9sbENvbnRhaW5lcixcbiAgICAgICAgICB2aXJ0dWFsaXplID0gX3RoaXMkcHJvcHMyLnZpcnR1YWxpemUsXG4gICAgICAgICAgdmlydHVhbEJvdW5kc1RvcCA9IF90aGlzJHByb3BzMi52aXJ0dWFsQm91bmRzVG9wLFxuICAgICAgICAgIHZpcnR1YWxCb3VuZHNCb3R0b20gPSBfdGhpcyRwcm9wczIudmlydHVhbEJvdW5kc0JvdHRvbTtcbiAgICAgIHZhciB0b3AgPSBwb3NpdGlvbi50b3AsXG4gICAgICAgICAgbGVmdCA9IHBvc2l0aW9uLmxlZnQsXG4gICAgICAgICAgd2lkdGggPSBwb3NpdGlvbi53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBwb3NpdGlvbi5oZWlnaHQ7XG4gICAgICB2YXIgaXNWaXNpYmxlO1xuXG4gICAgICBpZiAoc2Nyb2xsQ29udGFpbmVyKSB7XG4gICAgICAgIHZhciB2aXJ0dWFsQnVmZmVyID0gX3RoaXMuY29udGFpbmVySGVpZ2h0ICogVklSVFVBTF9CVUZGRVJfRkFDVE9SO1xuICAgICAgICB2YXIgb2Zmc2V0U2Nyb2xsUG9zID0gX3RoaXMuc3RhdGUuc2Nyb2xsVG9wIC0gX3RoaXMuY29udGFpbmVyT2Zmc2V0O1xuICAgICAgICB2YXIgdmlld3BvcnRUb3AgPSB2aXJ0dWFsQm91bmRzVG9wID8gb2Zmc2V0U2Nyb2xsUG9zIC0gdmlydHVhbEJvdW5kc1RvcCA6IG9mZnNldFNjcm9sbFBvcyAtIHZpcnR1YWxCdWZmZXI7XG4gICAgICAgIHZhciB2aWV3cG9ydEJvdHRvbSA9IHZpcnR1YWxCb3VuZHNCb3R0b20gPyBvZmZzZXRTY3JvbGxQb3MgKyBfdGhpcy5jb250YWluZXJIZWlnaHQgKyB2aXJ0dWFsQm91bmRzQm90dG9tIDogb2Zmc2V0U2Nyb2xsUG9zICsgX3RoaXMuY29udGFpbmVySGVpZ2h0ICsgdmlydHVhbEJ1ZmZlcjtcbiAgICAgICAgaXNWaXNpYmxlID0gIShwb3NpdGlvbi50b3AgKyBwb3NpdGlvbi5oZWlnaHQgPCB2aWV3cG9ydFRvcCB8fCBwb3NpdGlvbi50b3AgPiB2aWV3cG9ydEJvdHRvbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBubyBzY3JvbGwgY29udGFpbmVyIGlzIHBhc3NlZCBpbiwgaXRlbXMgc2hvdWxkIGFsd2F5cyBiZSB2aXNpYmxlXG4gICAgICAgIGlzVmlzaWJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVtQ29tcG9uZW50ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBrZXk6IFwiaXRlbS1cIi5jb25jYXQoaWR4KSxcbiAgICAgICAgY2xhc3NOYW1lOiBbc3R5bGVzJGkuTWFzb25yeV9fSXRlbSwgc3R5bGVzJGkuTWFzb25yeV9fSXRlbV9fTW91bnRlZF0uam9pbignICcpLFxuICAgICAgICBcImRhdGEtZ3JpZC1pdGVtXCI6IHRydWUsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVgoXCIuY29uY2F0KGxlZnQsIFwicHgpIHRyYW5zbGF0ZVkoXCIpLmNvbmNhdCh0b3AsIFwicHgpXCIpLFxuICAgICAgICAgIFdlYmtpdFRyYW5zZm9ybTogXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdChsZWZ0LCBcInB4KSB0cmFuc2xhdGVZKFwiKS5jb25jYXQodG9wLCBcInB4KVwiKSxcbiAgICAgICAgICB3aWR0aDogbGF5b3V0TnVtYmVyVG9Dc3NEaW1lbnNpb24od2lkdGgpLFxuICAgICAgICAgIGhlaWdodDogbGF5b3V0TnVtYmVyVG9Dc3NEaW1lbnNpb24oaGVpZ2h0KVxuICAgICAgICB9XG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgICAgZGF0YTogaXRlbURhdGEsXG4gICAgICAgIGl0ZW1JZHg6IGlkeCxcbiAgICAgICAgaXNNZWFzdXJpbmc6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gdmlydHVhbGl6ZSA/IGlzVmlzaWJsZSAmJiBpdGVtQ29tcG9uZW50IHx8IG51bGwgOiBpdGVtQ29tcG9uZW50O1xuICAgIH0pO1xuXG4gICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICBfdGhpcy5jb250YWluZXJPZmZzZXQgPSAwO1xuICAgIHZhciBtZWFzdXJlbWVudFN0b3JlID0gcHJvcHMubWVhc3VyZW1lbnRTdG9yZSB8fCBNYXNvbnJ5LmNyZWF0ZU1lYXN1cmVtZW50U3RvcmUoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L3N0YXRlLWluLWNvbnN0cnVjdG9yXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhhc1BlbmRpbmdNZWFzdXJlbWVudHM6IHByb3BzLml0ZW1zLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICEhaXRlbSAmJiAhbWVhc3VyZW1lbnRTdG9yZS5oYXMoaXRlbSk7XG4gICAgICB9KSxcbiAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgaXRlbXM6IHByb3BzLml0ZW1zLFxuICAgICAgbWVhc3VyZW1lbnRTdG9yZTogbWVhc3VyZW1lbnRTdG9yZSxcbiAgICAgIHNjcm9sbFRvcDogMCxcbiAgICAgIHdpZHRoOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQWRkcyBob29rcyBhZnRlciB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoTWFzb25yeSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICAgIHRoaXMubWVhc3VyZUNvbnRhaW5lcigpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuc3RhdGUuc2Nyb2xsVG9wO1xuXG4gICAgICBpZiAodGhpcy5zY3JvbGxDb250YWluZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gdGhpcy5zY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsQ29udGFpbmVyUmVmKCk7XG5cbiAgICAgICAgaWYgKHNjcm9sbENvbnRhaW5lcikge1xuICAgICAgICAgIHNjcm9sbFRvcCA9IGdldFNjcm9sbFBvcyhzY3JvbGxDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wLFxuICAgICAgICAgIHdpZHRoOiBfdGhpczIuZ3JpZFdyYXBwZXIgPyBfdGhpczIuZ3JpZFdyYXBwZXIuY2xpZW50V2lkdGggOiBwcmV2U3RhdGUud2lkdGhcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcztcbiAgICAgIHZhciBtZWFzdXJlbWVudFN0b3JlID0gdGhpcy5zdGF0ZS5tZWFzdXJlbWVudFN0b3JlO1xuICAgICAgdGhpcy5tZWFzdXJlQ29udGFpbmVyQXN5bmMoKTtcblxuICAgICAgaWYgKHByZXZTdGF0ZS53aWR0aCAhPSBudWxsICYmIHRoaXMuc3RhdGUud2lkdGggIT09IHByZXZTdGF0ZS53aWR0aCkge1xuICAgICAgICBtZWFzdXJlbWVudFN0b3JlLnJlc2V0KCk7XG4gICAgICB9IC8vIGNhbGN1bGF0ZSB3aGV0aGVyIHdlIHN0aWxsIGhhdmUgcGVuZGluZyBtZWFzdXJlbWVudHNcblxuXG4gICAgICB2YXIgaGFzUGVuZGluZ01lYXN1cmVtZW50cyA9IGl0ZW1zLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICEhaXRlbSAmJiAhbWVhc3VyZW1lbnRTdG9yZS5oYXMoaXRlbSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc1BlbmRpbmdNZWFzdXJlbWVudHMgfHwgaGFzUGVuZGluZ01lYXN1cmVtZW50cyAhPT0gdGhpcy5zdGF0ZS5oYXNQZW5kaW5nTWVhc3VyZW1lbnRzIHx8IHByZXZTdGF0ZS53aWR0aCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0QW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBoYXNQZW5kaW5nTWVhc3VyZW1lbnRzOiBoYXNQZW5kaW5nTWVhc3VyZW1lbnRzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgbGlzdGVuZXJzIHdoZW4gdW5tb3VudGluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuaW5zZXJ0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5pbnNlcnRBbmltYXRpb25GcmFtZSk7XG4gICAgICB9IC8vIE1ha2Ugc3VyZSBhc3luYyBtZXRob2RzIGFyZSBjYW5jZWxsZWQuXG5cblxuICAgICAgdGhpcy5tZWFzdXJlQ29udGFpbmVyQXN5bmMuY2xlYXJUaW1lb3V0KCk7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jbGVhclRpbWVvdXQoKTtcbiAgICAgIHRoaXMudXBkYXRlU2Nyb2xsUG9zaXRpb24uY2xlYXJUaW1lb3V0KCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtZWFzdXJlQ29udGFpbmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1lYXN1cmVDb250YWluZXIoKSB7XG4gICAgICBpZiAodGhpcy5zY3JvbGxDb250YWluZXIgIT0gbnVsbCkge1xuICAgICAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gdGhpcy5zY3JvbGxDb250YWluZXI7XG4gICAgICAgIHZhciBzY3JvbGxDb250YWluZXJSZWYgPSBzY3JvbGxDb250YWluZXIuZ2V0U2Nyb2xsQ29udGFpbmVyUmVmKCk7XG5cbiAgICAgICAgaWYgKHNjcm9sbENvbnRhaW5lclJlZikge1xuICAgICAgICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gZ2V0RWxlbWVudEhlaWdodChzY3JvbGxDb250YWluZXJSZWYpO1xuICAgICAgICAgIHZhciBlbCA9IHRoaXMuZ3JpZFdyYXBwZXI7XG5cbiAgICAgICAgICBpZiAoZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlU2Nyb2xsVG9wID0gZ2V0UmVsYXRpdmVTY3JvbGxUb3Aoc2Nyb2xsQ29udGFpbmVyUmVmKTtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyT2Zmc2V0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgcmVsYXRpdmVTY3JvbGxUb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIG1lYXN1cmVtZW50cy9wb3NpdGlvbnMgYW5kIGZvcmNlIGEgcmVmbG93IG9mIHRoZSBlbnRpcmUgZ3JpZC5cbiAgICAgKiBPbmx5IHVzZSB0aGlzIGlmIGFic29sdXRlbHkgbmVjZXNzYXJ5IC0gZXg6IFdlIG5lZWQgdG8gcmVmbG93IGl0ZW1zIGlmIHRoZVxuICAgICAqIG51bWJlciBvZiBjb2x1bW5zIHdlIHdvdWxkIGRpc3BsYXkgc2hvdWxkIGNoYW5nZSBhZnRlciBhIHJlc2l6ZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlZmxvd1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWZsb3coKSB7XG4gICAgICB2YXIgbWVhc3VyZW1lbnRTdG9yZSA9IHRoaXMucHJvcHMubWVhc3VyZW1lbnRTdG9yZTtcblxuICAgICAgaWYgKG1lYXN1cmVtZW50U3RvcmUpIHtcbiAgICAgICAgbWVhc3VyZW1lbnRTdG9yZS5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YXRlLm1lYXN1cmVtZW50U3RvcmUucmVzZXQoKTtcbiAgICAgIHRoaXMubWVhc3VyZUNvbnRhaW5lcigpO1xuICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNvbHVtbldpZHRoID0gX3RoaXMkcHJvcHMzLmNvbHVtbldpZHRoLFxuICAgICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzMy5jb21wLFxuICAgICAgICAgIGZsZXhpYmxlID0gX3RoaXMkcHJvcHMzLmZsZXhpYmxlLFxuICAgICAgICAgIGd1dHRlciA9IF90aGlzJHByb3BzMy5ndXR0ZXJXaWR0aCxcbiAgICAgICAgICBpdGVtcyA9IF90aGlzJHByb3BzMy5pdGVtcyxcbiAgICAgICAgICBsYXlvdXQgPSBfdGhpcyRwcm9wczMubGF5b3V0LFxuICAgICAgICAgIG1pbkNvbHMgPSBfdGhpcyRwcm9wczMubWluQ29scyxcbiAgICAgICAgICBzY3JvbGxDb250YWluZXIgPSBfdGhpcyRwcm9wczMuc2Nyb2xsQ29udGFpbmVyO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBoYXNQZW5kaW5nTWVhc3VyZW1lbnRzID0gX3RoaXMkc3RhdGUuaGFzUGVuZGluZ01lYXN1cmVtZW50cyxcbiAgICAgICAgICBtZWFzdXJlbWVudFN0b3JlID0gX3RoaXMkc3RhdGUubWVhc3VyZW1lbnRTdG9yZSxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJHN0YXRlLndpZHRoO1xuICAgICAgdmFyIGdldFBvc2l0aW9ucztcblxuICAgICAgaWYgKChmbGV4aWJsZSB8fCBsYXlvdXQgPT09ICdmbGV4aWJsZScpICYmIHdpZHRoICE9PSBudWxsKSB7XG4gICAgICAgIGdldFBvc2l0aW9ucyA9IGZ1bGxXaWR0aExheW91dCh7XG4gICAgICAgICAgZ3V0dGVyOiBndXR0ZXIsXG4gICAgICAgICAgY2FjaGU6IG1lYXN1cmVtZW50U3RvcmUsXG4gICAgICAgICAgbWluQ29sczogbWluQ29scyxcbiAgICAgICAgICBpZGVhbENvbHVtbldpZHRoOiBjb2x1bW5XaWR0aCxcbiAgICAgICAgICB3aWR0aDogd2lkdGhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGxheW91dCA9PT0gVW5pZm9ybVJvd0xheW91dFN5bWJvbCB8fCBsYXlvdXQgaW5zdGFuY2VvZiBVbmlmb3JtUm93TGF5b3V0IHx8IGxheW91dCA9PT0gJ3VuaWZvcm1Sb3cnKSB7XG4gICAgICAgIGdldFBvc2l0aW9ucyA9IHVuaWZvcm1Sb3dMYXlvdXQoe1xuICAgICAgICAgIGNhY2hlOiBtZWFzdXJlbWVudFN0b3JlLFxuICAgICAgICAgIGNvbHVtbldpZHRoOiBjb2x1bW5XaWR0aCxcbiAgICAgICAgICBndXR0ZXI6IGd1dHRlcixcbiAgICAgICAgICBtaW5Db2xzOiBtaW5Db2xzLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBvc2l0aW9ucyA9IGRlZmF1bHRMYXlvdXQoe1xuICAgICAgICAgIGNhY2hlOiBtZWFzdXJlbWVudFN0b3JlLFxuICAgICAgICAgIGNvbHVtbldpZHRoOiBjb2x1bW5XaWR0aCxcbiAgICAgICAgICBndXR0ZXI6IGd1dHRlcixcbiAgICAgICAgICBtaW5Db2xzOiBtaW5Db2xzLFxuICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdyaWRCb2R5O1xuXG4gICAgICBpZiAod2lkdGggPT0gbnVsbCAmJiBoYXNQZW5kaW5nTWVhc3VyZW1lbnRzKSB7XG4gICAgICAgIC8vIFdoZW4gaHlyZGF0aW5nIGZyb20gYSBzZXJ2ZXIgcmVuZGVyLCB3ZSBkb24ndCBoYXZlIHRoZSB3aWR0aCBvZiB0aGUgZ3JpZFxuICAgICAgICAvLyBhbmQgdGhlIG1lYXN1cmVtZW50IHN0b3JlIGlzIGVtcHR5XG4gICAgICAgIGdyaWRCb2R5ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzTmFtZTogc3R5bGVzJGkuTWFzb25yeSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVmOiB0aGlzLnNldEdyaWRXcmFwcGVyUmVmXG4gICAgICAgIH0sIGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGkpIHtcbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgLy8ga2VlcCB0aGlzIGluIHN5bmMgd2l0aCByZW5kZXJNYXNvbnJ5Q29tcG9uZW50XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwic3RhdGljXCIsXG4gICAgICAgICAgICBcImRhdGEtZ3JpZC1pdGVtXCI6IHRydWUsXG4gICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoMHB4KSB0cmFuc2xhdGVZKDBweCknLFxuICAgICAgICAgICAgICBXZWJraXRUcmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCkgdHJhbnNsYXRlWSgwcHgpJyxcbiAgICAgICAgICAgICAgd2lkdGg6IGZsZXhpYmxlIHx8IGxheW91dCA9PT0gJ2ZsZXhpYmxlJyA/IHVuZGVmaW5lZCA6IGxheW91dE51bWJlclRvQ3NzRGltZW5zaW9uKGNvbHVtbldpZHRoKSAvLyB3ZSBjYW4ndCBzZXQgYSB3aWR0aCBmb3Igc2VydmVyIHJlbmRlcmVkIGZsZXhpYmxlIGl0ZW1zXG5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihlbCkge1xuICAgICAgICAgICAgICBpZiAoZWwgJiYgIShmbGV4aWJsZSB8fCBsYXlvdXQgPT09ICdmbGV4aWJsZScpKSB7XG4gICAgICAgICAgICAgICAgLy8gb25seSBtZWFzdXJlIGZsZXhpYmxlIGl0ZW1zIG9uIGNsaWVudFxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50U3RvcmUuc2V0KGl0ZW0sIGVsLmNsaWVudEhlaWdodCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGRhdGE6IGl0ZW0sXG4gICAgICAgICAgICBpdGVtSWR4OiBpLFxuICAgICAgICAgICAgaXNNZWFzdXJpbmc6IGZhbHNlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKHdpZHRoID09IG51bGwpIHtcbiAgICAgICAgLy8gV2hlbiB0aGUgd2lkdGggaXMgZW1wdHkgKHVzdWFsbHkgYWZ0ZXIgYSByZS1tb3VudCkgcmVuZGVyIGFuIGVtcHR5XG4gICAgICAgIC8vIGRpdiB0byBjb2xsZWN0IHRoZSB3aWR0aCBmb3IgbGF5b3V0XG4gICAgICAgIGdyaWRCb2R5ID0gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWY6IHRoaXMuc2V0R3JpZFdyYXBwZXJSZWZcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGdWxsIGxheW91dCBpcyBwb3NzaWJsZVxuICAgICAgICB2YXIgaXRlbXNUb1JlbmRlciA9IGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtICYmIG1lYXN1cmVtZW50U3RvcmUuaGFzKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGl0ZW1zVG9NZWFzdXJlID0gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0gJiYgIW1lYXN1cmVtZW50U3RvcmUuaGFzKGl0ZW0pO1xuICAgICAgICB9KS5zbGljZSgwLCBtaW5Db2xzKTtcbiAgICAgICAgdmFyIHBvc2l0aW9ucyA9IGdldFBvc2l0aW9ucyhpdGVtc1RvUmVuZGVyKTtcbiAgICAgICAgdmFyIG1lYXN1cmluZ1Bvc2l0aW9ucyA9IGdldFBvc2l0aW9ucyhpdGVtc1RvTWVhc3VyZSk7IC8vIE1hdGgubWF4KCkgPT09IC1JbmZpbml0eSB3aGVuIHRoZXJlIGFyZSBubyBwb3NpdGlvbnNcblxuICAgICAgICB2YXIgaGVpZ2h0ID0gcG9zaXRpb25zLmxlbmd0aCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShwb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgICByZXR1cm4gcG9zLnRvcCArIHBvcy5oZWlnaHQ7XG4gICAgICAgIH0pKSkgOiAwO1xuICAgICAgICBncmlkQm9keSA9IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVmOiB0aGlzLnNldEdyaWRXcmFwcGVyUmVmXG4gICAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyRpLk1hc29ucnksXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICAgICAgfVxuICAgICAgICB9LCBpdGVtc1RvUmVuZGVyLm1hcChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczQucmVuZGVyTWFzb25yeUNvbXBvbmVudChpdGVtLCBpLCBwb3NpdGlvbnNbaV0pO1xuICAgICAgICB9KSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyRpLk1hc29ucnksXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aFxuICAgICAgICAgIH1cbiAgICAgICAgfSwgaXRlbXNUb01lYXN1cmUubWFwKGZ1bmN0aW9uIChkYXRhLCBpKSB7XG4gICAgICAgICAgLy8gaXRlbXNUb01lYXN1cmUgaXMgYWx3YXlzIHRoZSBsZW5ndGggb2YgbWluQ29scywgc28gaSB3aWxsIGFsd2F5cyBiZSAwLi5taW5Db2xzLmxlbmd0aFxuICAgICAgICAgIC8vIHdlIG5vcm1hbGl6ZSB0aGUgaW5kZXggaGVyZSByZWxhdGl2ZSB0byB0aGUgaXRlbSBsaXN0IGFzIGEgd2hvbGUgc28gdGhhdCBpdGVtSWR4IGlzIGNvcnJlY3RcbiAgICAgICAgICAvLyBhbmQgc28gdGhhdCBSZWFjdCBkb2VzbnQgcmV1c2UgdGhlIG1lYXN1cmVtZW50IG5vZGVzXG4gICAgICAgICAgdmFyIG1lYXN1cmVtZW50SW5kZXggPSBpdGVtc1RvUmVuZGVyLmxlbmd0aCArIGk7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gbWVhc3VyaW5nUG9zaXRpb25zW2ldO1xuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IFwibWVhc3VyaW5nLVwiLmNvbmNhdChtZWFzdXJlbWVudEluZGV4KSxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgdG9wOiBsYXlvdXROdW1iZXJUb0Nzc0RpbWVuc2lvbihwb3NpdGlvbi50b3ApLFxuICAgICAgICAgICAgICBsZWZ0OiBsYXlvdXROdW1iZXJUb0Nzc0RpbWVuc2lvbihwb3NpdGlvbi5sZWZ0KSxcbiAgICAgICAgICAgICAgd2lkdGg6IGxheW91dE51bWJlclRvQ3NzRGltZW5zaW9uKHBvc2l0aW9uLndpZHRoKSxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBsYXlvdXROdW1iZXJUb0Nzc0RpbWVuc2lvbihwb3NpdGlvbi5oZWlnaHQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZWwpIHtcbiAgICAgICAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZW1lbnRTdG9yZS5zZXQoZGF0YSwgZWwuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KENvbXBvbmVudCwge1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGl0ZW1JZHg6IG1lYXN1cmVtZW50SW5kZXgsXG4gICAgICAgICAgICBpc01lYXN1cmluZzogdHJ1ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpLCB0aGlzLnNjcm9sbENvbnRhaW5lciAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGZXRjaEl0ZW1zLCB7XG4gICAgICAgICAgY29udGFpbmVySGVpZ2h0OiB0aGlzLmNvbnRhaW5lckhlaWdodCxcbiAgICAgICAgICBmZXRjaE1vcmU6IHRoaXMuZmV0Y2hNb3JlLFxuICAgICAgICAgIGlzRmV0Y2hpbmc6IHRoaXMuc3RhdGUuaXNGZXRjaGluZyB8fCB0aGlzLnN0YXRlLmhhc1BlbmRpbmdNZWFzdXJlbWVudHMsXG4gICAgICAgICAgc2Nyb2xsSGVpZ2h0OiBoZWlnaHQgKyB0aGlzLmNvbnRhaW5lck9mZnNldCxcbiAgICAgICAgICBzY3JvbGxUb3A6IHRoaXMuc3RhdGUuc2Nyb2xsVG9wXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lciA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFNjcm9sbENvbnRhaW5lciwge1xuICAgICAgICByZWY6IHRoaXMuc2V0U2Nyb2xsQ29udGFpbmVyUmVmLFxuICAgICAgICBvblNjcm9sbDogdGhpcy51cGRhdGVTY3JvbGxQb3NpdGlvbixcbiAgICAgICAgc2Nyb2xsQ29udGFpbmVyOiBzY3JvbGxDb250YWluZXJcbiAgICAgIH0sIGdyaWRCb2R5KSA6IGdyaWRCb2R5O1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgICB2YXIgaXRlbXMgPSBwcm9wcy5pdGVtcztcbiAgICAgIHZhciBtZWFzdXJlbWVudFN0b3JlID0gc3RhdGUubWVhc3VyZW1lbnRTdG9yZTsgLy8gd2hlbmV2ZXIgd2UncmUgcmVjZWl2aW5nIG5ldyBwcm9wcywgZGV0ZXJtaW5lIHdoZXRoZXIgYW55IGl0ZW1zIG5lZWQgdG8gYmUgbWVhc3VyZWRcbiAgICAgIC8vIFRPRE8gLSB3ZSBzaG91bGQgdHJlYXQgaXRlbXMgYXMgaW1tdXRhYmxlXG5cbiAgICAgIHZhciBoYXNQZW5kaW5nTWVhc3VyZW1lbnRzID0gaXRlbXMuc29tZShmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gIW1lYXN1cmVtZW50U3RvcmUuaGFzKGl0ZW0pO1xuICAgICAgfSk7IC8vIFNoYWxsb3cgY29tcGFyZSBhbGwgaXRlbXMsIGlmIGFueSBjaGFuZ2UgcmVmbG93IHRoZSBncmlkLlxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIC8vIFdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiBvdXIgY3VycmVudCBwcm9wcyBhbmQgZXZlcnl0aGluZyBtYXRjaGVzLlxuICAgICAgICAvLyBJZiB3ZSBoaXQgdGhpcyBjYXNlIGl0IG1lYW5zIHdlIG5lZWQgdG8gaW5zZXJ0IG5ldyBpdGVtcy5cbiAgICAgICAgaWYgKHN0YXRlLml0ZW1zW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzUGVuZGluZ01lYXN1cmVtZW50czogaGFzUGVuZGluZ01lYXN1cmVtZW50cyxcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSAvLyBSZXNldCBncmlkIGl0ZW1zIHdoZW46XG5cblxuICAgICAgICBpZiAoIC8vIEFuIGl0ZW0gb2JqZWN0IHJlZiBkb2VzIG5vdCBtYXRjaC5cbiAgICAgICAgaXRlbXNbaV0gIT09IHN0YXRlLml0ZW1zW2ldIHx8IC8vIE9yIGxlc3MgaXRlbXMgdGhhbiB3ZSBjdXJyZW50bHkgaGF2ZSBhcmUgcGFzc2VkIGluLlxuICAgICAgICBpdGVtcy5sZW5ndGggPCBzdGF0ZS5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzUGVuZGluZ01lYXN1cmVtZW50czogaGFzUGVuZGluZ01lYXN1cmVtZW50cyxcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZXNldCBpdGVtcyBpZiBuZXcgaXRlbXMgYXJyYXkgaXMgZW1wdHkuXG5cblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaGFzUGVuZGluZ01lYXN1cmVtZW50czogaGFzUGVuZGluZ01lYXN1cmVtZW50cyxcbiAgICAgICAgICBpdGVtczogaXRlbXMsXG4gICAgICAgICAgaXNGZXRjaGluZzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc1BlbmRpbmdNZWFzdXJlbWVudHMgIT09IHN0YXRlLmhhc1BlbmRpbmdNZWFzdXJlbWVudHMpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHdlIGFsd2F5cyB1cGRhdGUgaGFzUGVuZGluZ01lYXN1cmVtZW50c1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhhc1BlbmRpbmdNZWFzdXJlbWVudHM6IGhhc1BlbmRpbmdNZWFzdXJlbWVudHMsXG4gICAgICAgICAgaXRlbXM6IGl0ZW1zXG4gICAgICAgIH07XG4gICAgICB9IC8vIFJldHVybiBudWxsIHRvIGluZGljYXRlIG5vIGNoYW5nZSB0byBzdGF0ZS5cblxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWFzb25yeTtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KE1hc29ucnksIFwicHJvcFR5cGVzXCIsIHtcbiAgLyoqXG4gICAqIFRoZSBwcmVmZXJyZWQvdGFyZ2V0IGl0ZW0gd2lkdGguIElmIGBmbGV4aWJsZWAgaXMgc2V0LCB0aGUgaXRlbSB3aWR0aCB3aWxsXG4gICAqIGdyb3cgdG8gZmlsbCBjb2x1bW4gc3BhY2UsIGFuZCBzaHJpbmsgdG8gZml0IGlmIGJlbG93IG1pbiBjb2x1bW5zLlxuICAgKi9cbiAgY29sdW1uV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdG8gcmVuZGVyLlxuICAgKi9cblxuICAvKiBlc2xpbnQgcmVhY3Qvbm8tdW51c2VkLXByb3AtdHlwZXM6IDAgKi9cbiAgY29tcDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIHByZWZlcnJlZC90YXJnZXQgaXRlbSB3aWR0aC4gSXRlbSB3aWR0aCB3aWxsIGdyb3cgdG8gZmlsbFxuICAgKiBjb2x1bW4gc3BhY2UsIGFuZCBzaHJpbmsgdG8gZml0IGlmIGJlbG93IG1pbiBjb2x1bW5zLlxuICAgKi9cbiAgZmxleGlibGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIHNwYWNlIGJldHdlZW4gZWFjaCBpdGVtLlxuICAgKi9cbiAgZ3V0dGVyV2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbCBvYmplY3RzIHRvIGRpc3BsYXkgaW4gdGhlIGdyaWQuXG4gICAqL1xuICBpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHt9KSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogTWVhc3VyZW1lbnQgU3RvcmVcbiAgICovXG4gIG1lYXN1cmVtZW50U3RvcmU6IFByb3BUeXBlcy5pbnN0YW5jZU9mKE1lYXN1cmVtZW50U3RvcmUpLFxuXG4gIC8qKlxuICAgKiBMYXlvdXQgc3lzdGVtIHRvIHVzZSBmb3IgaXRlbXNcbiAgICovXG4gIGxheW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmluc3RhbmNlT2YoTWFzb25yeUxheW91dCksIFByb3BUeXBlcy5pbnN0YW5jZU9mKFVuaWZvcm1Sb3dMYXlvdXQpLCBQcm9wVHlwZXMuc3ltYm9sLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgd2hpY2ggdGhlIGdyaWQgY2FsbHMgd2hlbiB3ZSBuZWVkIHRvIGxvYWQgbW9yZSBpdGVtcyBhcyB0aGUgdXNlciBzY3JvbGxzLlxuICAgKiBUaGUgY2FsbGJhY2sgc2hvdWxkIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhlIGl0ZW1zLCBhbmQgcGFzcyB0aG9zZSBpbiBhcyBwcm9wc1xuICAgKiB0byB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGxvYWRJdGVtczogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIGNvbHVtbnMgdG8gZGlzcGxheS5cbiAgICovXG4gIG1pbkNvbHM6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgdGhlIGdyaWQgY2FsbHMgdG8gZ2V0IHRoZSBzY3JvbGwgY29udGFpbmVyLlxuICAgKiBUaGlzIGlzIHJlcXVpcmVkIGlmIHRoZSBncmlkIGlzIGV4cGVjdGVkIHRvIGJlIHNjcm9sbGFibGUuXG4gICAqL1xuICBzY3JvbGxDb250YWluZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgYWN0dWFsIHZpcnR1YWxpemF0aW9uXG4gICAqL1xuICB2aXJ0dWFsaXplOiBQcm9wVHlwZXMuYm9vbFxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShNYXNvbnJ5LCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGNvbHVtbldpZHRoOiAyMzYsXG4gIG1pbkNvbHM6IDMsXG4gIGxheW91dDogJ2Jhc2ljJyxcbiAgbG9hZEl0ZW1zOiBmdW5jdGlvbiBsb2FkSXRlbXMoKSB7fSxcbiAgdmlydHVhbGl6ZTogZmFsc2Vcbn0pO1xuXG52YXIgTm9TY3JvbGxCZWhhdmlvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTm9TY3JvbGxCZWhhdmlvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihOb1Njcm9sbEJlaGF2aW9yKTtcblxuICBmdW5jdGlvbiBOb1Njcm9sbEJlaGF2aW9yKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vU2Nyb2xsQmVoYXZpb3IpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicHJldk92ZXJmbG93XCIsIHZvaWQgMCk7XG5cbiAgICBfdGhpcy5wcmV2T3ZlcmZsb3cgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhOb1Njcm9sbEJlaGF2aW9yLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnByZXZPdmVyZmxvdyA9IHdpbmRvdy5kb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93O1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IHRoaXMucHJldk92ZXJmbG93O1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE5vU2Nyb2xsQmVoYXZpb3I7XG59KENvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIHF1ZXJ5Rm9jdXNhYmxlQWxsKGVsKSB7XG4gIHZhciBzZWxlY3RvciA9IFsnYVtocmVmXScsICdhcmVhW2hyZWZdJywgJ2lucHV0Om5vdChbZGlzYWJsZWRdKScsICdzZWxlY3Q6bm90KFtkaXNhYmxlZF0pJywgJ3RleHRhcmVhOm5vdChbZGlzYWJsZWRdKScsICdidXR0b246bm90KFtkaXNhYmxlZF0pJywgJ2lmcmFtZScsICdvYmplY3QnLCAnZW1iZWQnLCAnW3RhYmluZGV4PVwiLTFcIl0nLCAnW3RhYmluZGV4PVwiMFwiXScsICdbY29udGVudGVkaXRhYmxlXScsICdhdWRpb1tjb250cm9sc10nLCAndmlkZW9bY29udHJvbHNdJywgJ3N1bW1hcnknXS5qb2luKCcsJyk7XG4gIHJldHVybiBlbC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbn1cblxudmFyIGZvY3VzRWxlbWVudCA9IGZ1bmN0aW9uIGZvY3VzRWxlbWVudChlbCkge1xuICBpZiAodHlwZW9mIGVsLmZvY3VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZWwuZm9jdXMoKTtcbiAgfVxufTtcblxudmFyIFRyYXBGb2N1c0JlaGF2aW9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFwRm9jdXNCZWhhdmlvciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUcmFwRm9jdXNCZWhhdmlvcik7XG5cbiAgZnVuY3Rpb24gVHJhcEZvY3VzQmVoYXZpb3IoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYXBGb2N1c0JlaGF2aW9yKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiZWxcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwcmV2aW91c2x5Rm9jdXNlZEVsXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0RWxSZWZcIiwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgX3RoaXMuZWwgPSBlbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVGb2N1c1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuZWwgfHwgZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgTm9kZSAmJiBfdGhpcy5lbC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5mb2N1c0ZpcnN0Q2hpbGQoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhUcmFwRm9jdXNCZWhhdmlvciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnByZXZpb3VzbHlGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgdGhpcy5mb2N1c0ZpcnN0Q2hpbGQoKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzLCB0cnVlKTtcblxuICAgICAgaWYgKHRoaXMucHJldmlvdXNseUZvY3VzZWRFbCkge1xuICAgICAgICBmb2N1c0VsZW1lbnQodGhpcy5wcmV2aW91c2x5Rm9jdXNlZEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9jdXNGaXJzdENoaWxkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzRmlyc3RDaGlsZCgpIHtcbiAgICAgIHZhciBlbCA9IHRoaXMuZWw7XG5cbiAgICAgIGlmIChlbCkge1xuICAgICAgICBmb2N1c0VsZW1lbnQocXVlcnlGb2N1c2FibGVBbGwoZWwpWzBdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIHJlZjogdGhpcy5zZXRFbFJlZlxuICAgICAgfSwgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYXBGb2N1c0JlaGF2aW9yO1xufShDb21wb25lbnQpO1xuXG52YXIgc3R5bGVzJGogPSB7XCJiYWNrZHJvcFwiOlwib00yIE1JdyBSeW0gUUxZIHA2ViBvak4gU216XCIsXCJjb250YWluZXJcIjpcIkZ3dCBfaGUgSHN1IF9PMSBtUTggUnltIFFMWSBnanogTDRFXCIsXCJ3cmFwcGVyXCI6XCJaSHcgWGlHIHNMRyBfTzEgcUpjIE9WWCBMM3ogbFRzXCIsXCJzaGFkb3dDb250YWluZXJcIjpcIlhwUyBIc3UgWGlHIHh1VVwiLFwic2hhZG93XCI6XCJkMklcIn07XG5cbnZhciBTSVpFX1dJRFRIX01BUCQxID0ge1xuICBzbTogNTQwLFxuICBtZDogNzIwLFxuICBsZzogOTAwXG59O1xudmFyIEVTQ0FQRV9LRVlfQ09ERSQxID0gMjc7XG5cbmZ1bmN0aW9uIEJhY2tkcm9wKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2s7XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgIG9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyRqLmJhY2tkcm9wLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrXG4gIH0pLCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIEhlYWRlcihfcmVmMikge1xuICB2YXIgaGVhZGluZyA9IF9yZWYyLmhlYWRpbmc7XG5cbiAgaWYgKHR5cGVvZiBoZWFkaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBoZWFkaW5nO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgIHBhZGRpbmc6IDhcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSGVhZGluZywge1xuICAgIHNpemU6IFwibWRcIixcbiAgICBhY2Nlc3NpYmlsaXR5TGV2ZWw6IDFcbiAgfSwgaGVhZGluZykpO1xufVxuXG5mdW5jdGlvbiBNb2RhbChfcmVmMykge1xuICB2YXIgYWNjZXNzaWJpbGl0eU1vZGFsTGFiZWwgPSBfcmVmMy5hY2Nlc3NpYmlsaXR5TW9kYWxMYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICBfcmVmMyRjbG9zZU9uT3V0c2lkZUMgPSBfcmVmMy5jbG9zZU9uT3V0c2lkZUNsaWNrLFxuICAgICAgY2xvc2VPbk91dHNpZGVDbGljayA9IF9yZWYzJGNsb3NlT25PdXRzaWRlQyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJGNsb3NlT25PdXRzaWRlQyxcbiAgICAgIG9uRGlzbWlzcyA9IF9yZWYzLm9uRGlzbWlzcyxcbiAgICAgIGZvb3RlciA9IF9yZWYzLmZvb3RlcixcbiAgICAgIGhlYWRpbmcgPSBfcmVmMy5oZWFkaW5nLFxuICAgICAgX3JlZjMkcm9sZSA9IF9yZWYzLnJvbGUsXG4gICAgICByb2xlID0gX3JlZjMkcm9sZSA9PT0gdm9pZCAwID8gJ2RpYWxvZycgOiBfcmVmMyRyb2xlLFxuICAgICAgX3JlZjMkc2l6ZSA9IF9yZWYzLnNpemUsXG4gICAgICBzaXplID0gX3JlZjMkc2l6ZSA9PT0gdm9pZCAwID8gJ3NtJyA6IF9yZWYzJHNpemU7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUsIDIpLFxuICAgICAgc2hvd1RvcFNoYWRvdyA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRTaG93VG9wU2hhZG93ID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF9SZWFjdCR1c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfUmVhY3QkdXNlU3RhdGUzLCAyKSxcbiAgICAgIHNob3dCb3R0b21TaGFkb3cgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0U2hvd0JvdHRvbVNoYWRvdyA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGNvbnRlbnQgPSB1c2VSZWYobnVsbCk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gaGFuZGxlS2V5VXAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBFU0NBUEVfS0VZX0NPREUkMSkge1xuICAgICAgICBvbkRpc21pc3MoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXlVcCk7XG4gICAgfTtcbiAgfSwgW29uRGlzbWlzc10pO1xuXG4gIHZhciBoYW5kbGVPdXRzaWRlQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVPdXRzaWRlQ2xpY2soKSB7XG4gICAgaWYgKGNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgIG9uRGlzbWlzcygpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgdXBkYXRlU2hhZG93cyA9IGZ1bmN0aW9uIHVwZGF0ZVNoYWRvd3MoKSB7XG4gICAgdmFyIHRhcmdldCA9IGNvbnRlbnQuY3VycmVudDtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhhc1ZlcnRpY2FsU2Nyb2xsYmFyID0gdGFyZ2V0LmNsaWVudEhlaWdodCA8IHRhcmdldC5zY3JvbGxIZWlnaHQ7XG4gICAgc2V0U2hvd1RvcFNoYWRvdyhoYXNWZXJ0aWNhbFNjcm9sbGJhciAmJiB0YXJnZXQuc2Nyb2xsVG9wID4gMCk7XG4gICAgc2V0U2hvd0JvdHRvbVNoYWRvdyhoYXNWZXJ0aWNhbFNjcm9sbGJhciAmJiB0YXJnZXQub2Zmc2V0SGVpZ2h0ICsgdGFyZ2V0LnNjcm9sbFRvcCA8IHRhcmdldC5zY3JvbGxIZWlnaHQpO1xuICB9O1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVNoYWRvd3MpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlU2hhZG93cyk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHVwZGF0ZVNoYWRvd3MoKTtcbiAgfSwgW10pO1xuICB2YXIgd2lkdGggPSB0eXBlb2Ygc2l6ZSA9PT0gJ3N0cmluZycgPyBTSVpFX1dJRFRIX01BUCQxW3NpemVdIDogc2l6ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE5vU2Nyb2xsQmVoYXZpb3IsIG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRyYXBGb2N1c0JlaGF2aW9yLCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgXCJhcmlhLWxhYmVsXCI6IGFjY2Vzc2liaWxpdHlNb2RhbExhYmVsLFxuICAgIGNsYXNzTmFtZTogc3R5bGVzJGouY29udGFpbmVyLFxuICAgIHJvbGU6IHJvbGVcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQmFja2Ryb3AsIHtcbiAgICBvbkNsaWNrOiBoYW5kbGVPdXRzaWRlQ2xpY2tcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJGoud3JhcHBlcixcbiAgICB0YWJJbmRleDogLTEsXG4gICAgc3R5bGU6IHtcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgZmxleDogXCJncm93XCIsXG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBkaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgd2lkdGg6IFwiMTAwJVwiXG4gIH0sIGhlYWRpbmcgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhzdHlsZXMkai5zaGFkb3dDb250YWluZXIsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc3R5bGVzJGouc2hhZG93LCBzaG93VG9wU2hhZG93KSlcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSGVhZGVyLCB7XG4gICAgaGVhZGluZzogaGVhZGluZ1xuICB9KSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGZsZXg6IFwiZ3Jvd1wiLFxuICAgIG92ZXJmbG93OiBcImF1dG9cIixcbiAgICBvblNjcm9sbDogdXBkYXRlU2hhZG93cyxcbiAgICByZWY6IGNvbnRlbnRcbiAgfSwgY2hpbGRyZW4pLCBmb290ZXIgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhzdHlsZXMkai5zaGFkb3dDb250YWluZXIsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc3R5bGVzJGouc2hhZG93LCBzaG93Qm90dG9tU2hhZG93KSlcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgcGFkZGluZzogOFxuICB9LCBmb290ZXIpKSkpKSkpKTtcbn1cbk1vZGFsLnByb3BUeXBlcyA9IHtcbiAgYWNjZXNzaWJpbGl0eU1vZGFsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBjbG9zZU9uT3V0c2lkZUNsaWNrOiBQcm9wVHlwZXMuYm9vbCxcbiAgZm9vdGVyOiBQcm9wVHlwZXMubm9kZSxcbiAgaGVhZGluZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgb25EaXNtaXNzOiBQcm9wVHlwZXMuZnVuYyxcbiAgcm9sZTogUHJvcFR5cGVzLm9uZU9mKFsnYWxlcnRkaWFsb2cnLCAnZGlhbG9nJ10pLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCcsICdsZyddKV0pXG59O1xuXG52YXIgc3R5bGVzJGsgPSB7XCJpbm5lckNpcmNsZVwiOlwiRGdYIEhzdVwiLFwiUHVsc2VBbmltYXRpb25cIjpcIndEOVwiLFwib3V0ZXJDaXJjbGVcIjpcInVXTVwiLFwiQXBwZWFyQW5pbWF0aW9uXCI6XCJCMFpcIn07XG5cbmZ1bmN0aW9uIFB1bHNhcihfcmVmKSB7XG4gIHZhciBwYXVzZWQgPSBfcmVmLnBhdXNlZCxcbiAgICAgIF9yZWYkc2l6ZSA9IF9yZWYuc2l6ZSxcbiAgICAgIHNpemUgPSBfcmVmJHNpemUgPT09IHZvaWQgMCA/IDEzNSA6IF9yZWYkc2l6ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHBhdXNlZCA/IDAgOiAnaW5maW5pdGUnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICBkaXNwbGF5OiBwYXVzZWQgPyAnbm9uZScgOiAnYmxvY2snLFxuICAgIGhlaWdodDogc2l6ZSxcbiAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgIHdpZHRoOiBzaXplXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyRrLmlubmVyQ2lyY2xlXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcyRrLm91dGVyQ2lyY2xlXG4gIH0pKSk7XG59XG5QdWxzYXIucHJvcFR5cGVzID0ge1xuICBwYXVzZWQ6IFByb3BUeXBlcy5ib29sLFxuICBzaXplOiBQcm9wVHlwZXMubnVtYmVyXG59O1xuXG52YXIgc3R5bGVzJGwgPSB7XCJSYWRpb0J1dHRvblwiOlwidHk5IGtWYyBIc3UgSU5kIF9PMSBnanogbVE4IFhpRyBQdzVcIixcIlJhZGlvQnV0dG9uSXNGb2N1c2VkXCI6XCJIR2EgQzFKXCIsXCJCb3JkZXJcIjpcImZSZSBMSkJcIixcIkJvcmRlckNoZWNrZWRTbVwiOlwiTFNWXCIsXCJCb3JkZXJDaGVja2VkTWRcIjpcImRKcVwiLFwiQm9yZGVyRGFya0dyYXlcIjpcInktdCBuRzVcIixcIkJvcmRlckRpc2FibGVkXCI6XCJDVlMgYWRuXCIsXCJCb3JkZXJEaXNhYmxlZENoZWNrZWRcIjpcIkp0RCBGdm9cIixcIkJvcmRlckhvdmVyZWRcIjpcImR4eiBkUFlcIixcIkJvcmRlclVuY2hlY2tlZFwiOlwicXM2IFhnSVwiLFwiQmdEaXNhYmxlZFwiOlwiSzR0IGdwVlwiLFwiQmdFbmFibGVkXCI6XCJFMHggcUpjXCIsXCJJbnB1dEVuYWJsZWRcIjpcImFjOSBCRzdcIn07XG5cbnZhciBSYWRpb0J1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUmFkaW9CdXR0b24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUmFkaW9CdXR0b24pO1xuXG4gIGZ1bmN0aW9uIFJhZGlvQnV0dG9uKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSYWRpb0J1dHRvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcbiAgICAgIHZhciBjaGVja2VkID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXG4gICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQmx1clwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRm9jdXNcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlSG92ZXJcIiwgZnVuY3Rpb24gKGhvdmVyZWQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaG92ZXJlZDogaG92ZXJlZFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmFkaW9CdXR0b24sIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGVja2VkID0gX3RoaXMkcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgICBuYW1lID0gX3RoaXMkcHJvcHMubmFtZSxcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBmb2N1c2VkID0gX3RoaXMkc3RhdGUuZm9jdXNlZCxcbiAgICAgICAgICBob3ZlcmVkID0gX3RoaXMkc3RhdGUuaG92ZXJlZDtcbiAgICAgIHZhciBib3JkZXJTdHlsZSA9IHN0eWxlcyRsLkJvcmRlcjtcblxuICAgICAgaWYgKGRpc2FibGVkICYmIGNoZWNrZWQpIHtcbiAgICAgICAgYm9yZGVyU3R5bGUgPSBzdHlsZXMkbC5Cb3JkZXJEaXNhYmxlZENoZWNrZWQ7XG4gICAgICB9IGVsc2UgaWYgKCFkaXNhYmxlZCAmJiBjaGVja2VkKSB7XG4gICAgICAgIGJvcmRlclN0eWxlID0gc3R5bGVzJGwuQm9yZGVyRGFya0dyYXk7XG4gICAgICB9IGVsc2UgaWYgKCFkaXNhYmxlZCAmJiBob3ZlcmVkKSB7XG4gICAgICAgIGJvcmRlclN0eWxlID0gc3R5bGVzJGwuQm9yZGVySG92ZXJlZDtcbiAgICAgIH1cblxuICAgICAgdmFyIGJvcmRlcldpZHRoID0gc3R5bGVzJGwuQm9yZGVyVW5jaGVja2VkO1xuXG4gICAgICBpZiAoZGlzYWJsZWQgJiYgIWNoZWNrZWQpIHtcbiAgICAgICAgYm9yZGVyV2lkdGggPSBzdHlsZXMkbC5Cb3JkZXJEaXNhYmxlZDtcbiAgICAgIH0gZWxzZSBpZiAoY2hlY2tlZCAmJiBzaXplID09PSAnc20nKSB7XG4gICAgICAgIGJvcmRlcldpZHRoID0gc3R5bGVzJGwuQm9yZGVyQ2hlY2tlZFNtO1xuICAgICAgfSBlbHNlIGlmIChjaGVja2VkICYmIHNpemUgPT09ICdtZCcpIHtcbiAgICAgICAgYm9yZGVyV2lkdGggPSBzdHlsZXMkbC5Cb3JkZXJDaGVja2VkTWQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZVNpemUgPSBzaXplID09PSAnc20nID8gY29udHJvbFN0eWxlcy5zaXplU20gOiBjb250cm9sU3R5bGVzLnNpemVNZDtcbiAgICAgIHZhciBiZ1N0eWxlID0gZGlzYWJsZWQgJiYgIWNoZWNrZWQgPyBzdHlsZXMkbC5CZ0Rpc2FibGVkIDogc3R5bGVzJGwuQmdFbmFibGVkO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwic3RhcnRcIixcbiAgICAgICAgbWFyZ2luTGVmdDogLTEsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAtMVxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTGFiZWwsIHtcbiAgICAgICAgaHRtbEZvcjogaWRcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBwYWRkaW5nWDogMVxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoYmdTdHlsZSwgYm9yZGVyU3R5bGUsIGJvcmRlcldpZHRoLCBzdHlsZVNpemUsIHN0eWxlcyRsLlJhZGlvQnV0dG9uLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyRsLlJhZGlvQnV0dG9uSXNGb2N1c2VkLCBmb2N1c2VkKSlcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwge1xuICAgICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoY29udHJvbFN0eWxlcy5pbnB1dCwgc3R5bGVTaXplLCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyRsLklucHV0RW5hYmxlZCwgIWRpc2FibGVkKSksXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uTW91c2VFbnRlcigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUhvdmVyKHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmhhbmRsZUhvdmVyKGZhbHNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogXCJyYWRpb1wiLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pKSkpLCBsYWJlbCAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMYWJlbCwge1xuICAgICAgICBodG1sRm9yOiBpZFxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIHBhZGRpbmdYOiAxXG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgICAgIGNvbG9yOiBkaXNhYmxlZCA/ICdncmF5JyA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2l6ZTogc2l6ZSA9PT0gJ3NtJyA/ICdtZCcgOiAnbGcnXG4gICAgICB9LCBsYWJlbCkpKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJhZGlvQnV0dG9uO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoUmFkaW9CdXR0b24sIFwicHJvcFR5cGVzXCIsIHtcbiAgY2hlY2tlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCddKVxufSk7XG5cbl9kZWZpbmVQcm9wZXJ0eShSYWRpb0J1dHRvbiwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBjaGVja2VkOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBzaXplOiAnbWQnXG59KTtcblxuZnVuY3Rpb24gRmxleEJveChwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCBfZXh0ZW5kcyh7XG4gICAgZGlzcGxheTogXCJmbGV4XCJcbiAgfSwgcHJvcHMpKTtcbn1cbkZsZXhCb3gucHJvcFR5cGVzID0ge1xuICBhbGlnbkNvbnRlbnQ6IEFsaWduQ29udGVudFByb3BUeXBlLFxuICBhbGlnbkl0ZW1zOiBBbGlnbkl0ZW1zUHJvcFR5cGUsXG4gIGFsaWduU2VsZjogQWxpZ25TZWxmUHJvcFR5cGUsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgZGlyZWN0aW9uOiBEaXJlY3Rpb25Qcm9wVHlwZSxcbiAgZml0OiBQcm9wVHlwZXMuYm9vbCxcbiAgZmxleDogRmxleFByb3BUeXBlLFxuICBoZWlnaHQ6IERpbWVuc2lvblByb3BUeXBlLFxuICBqdXN0aWZ5Q29udGVudDogSnVzdGlmeUNvbnRlbnRQcm9wVHlwZSxcbiAgbWF4SGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWF4V2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICBtaW5IZWlnaHQ6IERpbWVuc2lvblByb3BUeXBlLFxuICBtaW5XaWR0aDogRGltZW5zaW9uUHJvcFR5cGUsXG4gIG92ZXJmbG93OiBPdmVyZmxvd1Byb3BUeXBlLFxuICBwYWRkaW5nOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHBhZGRpbmdYOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHBhZGRpbmdZOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHNtUGFkZGluZzogUGFkZGluZ1Byb3BUeXBlLFxuICBzbVBhZGRpbmdYOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHNtUGFkZGluZ1k6IFBhZGRpbmdQcm9wVHlwZSxcbiAgbWRQYWRkaW5nOiBQYWRkaW5nUHJvcFR5cGUsXG4gIG1kUGFkZGluZ1g6IFBhZGRpbmdQcm9wVHlwZSxcbiAgbWRQYWRkaW5nWTogUGFkZGluZ1Byb3BUeXBlLFxuICBsZ1BhZGRpbmc6IFBhZGRpbmdQcm9wVHlwZSxcbiAgbGdQYWRkaW5nWDogUGFkZGluZ1Byb3BUeXBlLFxuICBsZ1BhZGRpbmdZOiBQYWRkaW5nUHJvcFR5cGUsXG4gIHdpZHRoOiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgd3JhcDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmZ1bmN0aW9uIFJvdyhfcmVmKSB7XG4gIHZhciBfcmVmJGFsaWduSXRlbXMgPSBfcmVmLmFsaWduSXRlbXMsXG4gICAgICBhbGlnbkl0ZW1zID0gX3JlZiRhbGlnbkl0ZW1zID09PSB2b2lkIDAgPyAnY2VudGVyJyA6IF9yZWYkYWxpZ25JdGVtcyxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIF9yZWYkZ2FwID0gX3JlZi5nYXAsXG4gICAgICBnYXAgPSBfcmVmJGdhcCA9PT0gdm9pZCAwID8gMCA6IF9yZWYkZ2FwLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBfcmVmJGp1c3RpZnlDb250ZW50ID0gX3JlZi5qdXN0aWZ5Q29udGVudCxcbiAgICAgIGp1c3RpZnlDb250ZW50ID0gX3JlZiRqdXN0aWZ5Q29udGVudCA9PT0gdm9pZCAwID8gJ3N0YXJ0JyA6IF9yZWYkanVzdGlmeUNvbnRlbnQsXG4gICAgICB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImFsaWduSXRlbXNcIiwgXCJjaGlsZHJlblwiLCBcImdhcFwiLCBcImhlaWdodFwiLCBcImp1c3RpZnlDb250ZW50XCIsIFwid2lkdGhcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBtYXJnaW5TdGFydDogZ2FwID8gLWdhcCA6IDAsXG4gICAgbWFyZ2luRW5kOiBnYXAgPyAtZ2FwIDogMCxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRmxleEJveCwgX2V4dGVuZHMoe1xuICAgIGFsaWduSXRlbXM6IGFsaWduSXRlbXMsXG4gICAgZGlyZWN0aW9uOiBcInJvd1wiLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIGp1c3RpZnlDb250ZW50OiBqdXN0aWZ5Q29udGVudCxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgcmVzdCksIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgcGFkZGluZ1g6IGdhcFxuICAgIH0sIGNoaWxkKTtcbiAgfSkpKTtcbn1cblJvdy5wcm9wVHlwZXMgPSB7XG4gIGFsaWduQ29udGVudDogQWxpZ25Db250ZW50UHJvcFR5cGUsXG4gIGFsaWduSXRlbXM6IEFsaWduSXRlbXNQcm9wVHlwZSxcbiAgYWxpZ25TZWxmOiBBbGlnblNlbGZQcm9wVHlwZSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBmbGV4OiBGbGV4UHJvcFR5cGUsXG4gIGdhcDogUGFkZGluZ1Byb3BUeXBlLFxuICBoZWlnaHQ6IERpbWVuc2lvblByb3BUeXBlLFxuICBqdXN0aWZ5Q29udGVudDogSnVzdGlmeUNvbnRlbnRQcm9wVHlwZSxcbiAgbWF4SGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWF4V2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICBtaW5IZWlnaHQ6IERpbWVuc2lvblByb3BUeXBlLFxuICBtaW5XaWR0aDogRGltZW5zaW9uUHJvcFR5cGUsXG4gIG92ZXJmbG93OiBPdmVyZmxvd1Byb3BUeXBlLFxuICB3aWR0aDogRGltZW5zaW9uUHJvcFR5cGUsXG4gIHdyYXA6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgU2Nyb2xsRmV0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTY3JvbGxGZXRjaCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2Nyb2xsRmV0Y2gpO1xuXG4gIGZ1bmN0aW9uIFNjcm9sbEZldGNoKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxGZXRjaCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInVwZGF0ZVBvc2l0aW9uXCIsIHRocm90dGxlKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKF90aGlzLmdldFNjcm9sbFN0YXRlKCkpO1xuICAgIH0pKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBjb250YWluZXJIZWlnaHQ6IDAsXG4gICAgICBzY3JvbGxIZWlnaHQ6IDAsXG4gICAgICBzY3JvbGxUb3A6IDBcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJnZXRTY3JvbGxIZWlnaHRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLnByb3BzLmNvbnRhaW5lcjtcblxuICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRTY3JvbGxIZWlnaHQoY29udGFpbmVyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTY3JvbGxGZXRjaCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcblxuICAgIC8qKlxuICAgICAqIEFkZHMgc2Nyb2xsIGxpc3RlbmVyIGFmdGVyIHRoZSBjb21wb25lbnQgbW91bnRzLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5wcm9wcy5jb250YWluZXI7XG5cbiAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZShfb2JqZWN0U3ByZWFkMih7XG4gICAgICAgICAgY29udGFpbmVySGVpZ2h0OiBnZXRFbGVtZW50SGVpZ2h0KGNvbnRhaW5lcilcbiAgICAgICAgfSwgX3RoaXMyLmdldFNjcm9sbFN0YXRlKCkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgc2Nyb2xsIGJ1ZmZlciBhbmQgY2hlY2sgYWZ0ZXIgdGhlIGNvbXBvbmVudCB1cGRhdGVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIC8vIHNldFRpbWVvdXQgc28gdGhlIHBhcmVudCBjb21wb25lbnQgY2FuIGNhbGN1bGF0ZSByZW5kZXJIZWlnaHQoKS5cbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc2Nyb2xsYWJsZSBjb250ZW50IGhlaWdodC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFNjcm9sbFN0YXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNjcm9sbFN0YXRlKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb250YWluZXIgPSBfdGhpcyRwcm9wcy5jb250YWluZXIsXG4gICAgICAgICAgcmVuZGVySGVpZ2h0ID0gX3RoaXMkcHJvcHMucmVuZGVySGVpZ2h0O1xuXG4gICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHJlbmRlckhlaWdodCB8fCB0aGlzLmdldFNjcm9sbEhlaWdodDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjcm9sbEhlaWdodDogc2Nyb2xsSGVpZ2h0KCksXG4gICAgICAgIHNjcm9sbFRvcDogZ2V0U2Nyb2xsUG9zKGNvbnRhaW5lcilcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGNvbnRhaW5lckhlaWdodCA9IF90aGlzJHN0YXRlLmNvbnRhaW5lckhlaWdodCxcbiAgICAgICAgICBzY3JvbGxIZWlnaHQgPSBfdGhpcyRzdGF0ZS5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgc2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUuc2Nyb2xsVG9wO1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udGFpbmVyID0gX3RoaXMkcHJvcHMyLmNvbnRhaW5lcixcbiAgICAgICAgICBmZXRjaE1vcmUgPSBfdGhpcyRwcm9wczIuZmV0Y2hNb3JlLFxuICAgICAgICAgIGlzQXRFbmQgPSBfdGhpcyRwcm9wczIuaXNBdEVuZCxcbiAgICAgICAgICBpc0ZldGNoaW5nID0gX3RoaXMkcHJvcHMyLmlzRmV0Y2hpbmc7XG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbnRhaW5lckhlaWdodDogY29udGFpbmVySGVpZ2h0LFxuICAgICAgICBmZXRjaE1vcmU6IGZldGNoTW9yZSxcbiAgICAgICAgaXNBdEVuZDogaXNBdEVuZCxcbiAgICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0OiBzY3JvbGxIZWlnaHQsXG4gICAgICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWNvbnRhaW5lciB8fCBpc0F0RW5kKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoU2Nyb2xsQ29udGFpbmVyLCB7XG4gICAgICAgIG9uU2Nyb2xsOiB0aGlzLnVwZGF0ZVBvc2l0aW9uLFxuICAgICAgICBzY3JvbGxDb250YWluZXI6IGNvbnRhaW5lclxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRmV0Y2hJdGVtcywgcHJvcHMpKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2Nyb2xsRmV0Y2g7XG59KFB1cmVDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsRmV0Y2gsIFwicHJvcFR5cGVzXCIsIHtcbiAgLyoqXG4gICAqIFRoZSBzY3JvbGwgY29udGFpbmVyIHRvIHVzZS4gRGVmYXVsdHMgdG8gd2luZG93LlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IFByb3BUeXBlcy5mdW5jXG4gIH0pLFxuICByZW5kZXJIZWlnaHQ6IFByb3BUeXBlcy5mdW5jLFxuICBpc0F0RW5kOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNGZXRjaGluZzogUHJvcFR5cGVzLmJvb2wsXG4gIGZldGNoTW9yZTogUHJvcFR5cGVzLmZ1bmNcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoU2Nyb2xsRmV0Y2gsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgY29udGFpbmVyOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHVuZGVmaW5lZFxufSk7XG5cbnZhciBzdHlsZXMkbSA9IHtcImlucHV0XCI6XCJ0YTcgaXluIEtJXyBMZnogWGdJIEhzdSBwQmogdEJKIGR5SCBpRmMgeVRaIEw0RVwiLFwiaW5wdXRBY3RpdmVcIjpcInVLVVwiLFwiaW5wdXRIb3ZlcmVkXCI6XCJaajYgZFBZIEJHN1wiLFwiY2xlYXJcIjpcIlN0QSB3YzEgYWRuIFNobCBDOXEgQkc3IHA2ViBZYllcIn07XG5cbnZhciBTZWFyY2hGaWVsZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VhcmNoRmllbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2VhcmNoRmllbGQpO1xuXG4gIGZ1bmN0aW9uIFNlYXJjaEZpZWxkKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZWFyY2hGaWVsZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUsXG4gICAgICAgIHN5bnRoZXRpY0V2ZW50OiBldmVudFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2xlYXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25DaGFuZ2UgPSBfdGhpcy5wcm9wcy5vbkNoYW5nZTtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICBzeW50aGV0aWNFdmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRW50ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaG92ZXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VMZWF2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBob3ZlcmVkOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRm9jdXNcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25Gb2N1cyA9IF90aGlzLnByb3BzLm9uRm9jdXM7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICAgIG9uRm9jdXMoe1xuICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlLFxuICAgICAgICAgIHN5bnRoZXRpY0V2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVCbHVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uQmx1ciA9IF90aGlzLnByb3BzLm9uQmx1cjtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgb25CbHVyKHtcbiAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2VhcmNoRmllbGQsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsID0gX3RoaXMkcHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICAgIGF1dG9Db21wbGV0ZSA9IF90aGlzJHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgX3RoaXMkcHJvcHMkc2l6ZSA9IF90aGlzJHByb3BzLnNpemUsXG4gICAgICAgICAgc2l6ZSA9IF90aGlzJHByb3BzJHNpemUgPT09IHZvaWQgMCA/ICdtZCcgOiBfdGhpcyRwcm9wcyRzaXplLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMudmFsdWU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGZvY3VzZWQgPSBfdGhpcyRzdGF0ZS5mb2N1c2VkLFxuICAgICAgICAgIGhvdmVyZWQgPSBfdGhpcyRzdGF0ZS5ob3ZlcmVkO1xuICAgICAgdmFyIGhhc1ZhbHVlID0gdmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgICAgIHZhciBoaWRlU2VhcmNoSWNvbiA9IGZvY3VzZWQgfHwgaGFzVmFsdWU7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gY2xhc3NuYW1lcyhzdHlsZXMkbS5pbnB1dCwgKF9jbGFzc25hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgbGF5b3V0Lm1lZGl1bSwgc2l6ZSA9PT0gJ21kJyksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgbGF5b3V0LmxhcmdlLCBzaXplID09PSAnbGcnKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkbS5pbnB1dEFjdGl2ZSwgZm9jdXNlZCB8fCBoYXNWYWx1ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJG0uaW5wdXRIb3ZlcmVkLCBob3ZlcmVkKSwgX2NsYXNzbmFtZXMpKTtcbiAgICAgIHZhciBjbGVhckJ1dHRvblNpemUgPSBzaXplID09PSAnbGcnID8gMjQgOiAyMDtcbiAgICAgIHZhciBjbGVhckljb25TaXplID0gc2l6ZSA9PT0gJ2xnJyA/IDEyIDogMTA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gICAgICB9LCAhaGlkZVNlYXJjaEljb24gJiYgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgICAgICBfX3N0eWxlOiB7XG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICAvLyBBZGRlZCB0aGUgZm9sbG93aW5nIGxpbmVzIGZvciBTYWZhcmkgc3VwcG9ydFxuICAgICAgICAgICAgdG9wOiAnNTAlJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWZ0OiB0cnVlLFxuICAgICAgICBwYWRkaW5nWDogNCxcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgICBpY29uOiBcInNlYXJjaFwiLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiXCJcbiAgICAgIH0pKSwgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBhY2Nlc3NpYmlsaXR5TGFiZWwsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgICAgcm9sZTogXCJzZWFyY2hib3hcIixcbiAgICAgICAgdHlwZTogXCJzZWFyY2hcIixcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KSwgaGFzVmFsdWUgJiYgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwge1xuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyRtLmNsZWFyLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsZWFyLFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIHR5cGU6IFwiYnV0dG9uXCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBjb2xvcjogZm9jdXNlZCA/ICdkYXJrR3JheScgOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgaGVpZ2h0OiBjbGVhckJ1dHRvblNpemUsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICByb3VuZGluZzogXCJjaXJjbGVcIixcbiAgICAgICAgd2lkdGg6IGNsZWFyQnV0dG9uU2l6ZVxuICAgICAgfSwgLyojX19QVVJFX18qL1JlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiXCIsXG4gICAgICAgIGNvbG9yOiBmb2N1c2VkID8gJ3doaXRlJyA6ICdkYXJrR3JheScsXG4gICAgICAgIGljb246IFwiY2FuY2VsXCIsXG4gICAgICAgIHNpemU6IGNsZWFySWNvblNpemVcbiAgICAgIH0pKSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWFyY2hGaWVsZDtcbn0oUmVhY3RfX2RlZmF1bHQuQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFNlYXJjaEZpZWxkLCBcInByb3BUeXBlc1wiLCB7XG4gIGFjY2Vzc2liaWxpdHlMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5vbmVPZihbJ29uJywgJ29mZicsICd1c2VybmFtZScsICduYW1lJ10pLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZCcsICdsZyddKSxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn0pO1xuXG52YXIgc3R5bGVzJG4gPSB7XCJTZWdtZW50ZWRDb250cm9sXCI6XCJsOTIgSHN1IGdwViBfTzEgYjhUIGhvLVwiLFwiaXRlbVwiOlwib3BlIGl5biB1alUgZTQzIGFkbiBCRzdcIixcIml0ZW1Jc05vdFNlbGVjdGVkXCI6XCJpeklcIixcIml0ZW1Jc1NlbGVjdGVkXCI6XCJ6SHIgcUpjXCJ9O1xuXG5mdW5jdGlvbiBTZWdtZW50ZWRDb250cm9sKHByb3BzKSB7XG4gIHZhciBpdGVtcyA9IHByb3BzLml0ZW1zLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHJlc3BvbnNpdmUgPSBwcm9wcy5yZXNwb25zaXZlLFxuICAgICAgc2VsZWN0ZWRJdGVtSW5kZXggPSBwcm9wcy5zZWxlY3RlZEl0ZW1JbmRleCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21kJyA6IF9wcm9wcyRzaXplO1xuICB2YXIgYnV0dG9uV2lkdGggPSByZXNwb25zaXZlID8gdW5kZWZpbmVkIDogXCJcIi5jb25jYXQoTWF0aC5mbG9vcigxMDAgLyBNYXRoLm1heCgxLCBpdGVtcy5sZW5ndGgpKSwgXCIlXCIpO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lcyhzdHlsZXMkbi5TZWdtZW50ZWRDb250cm9sLCBzaXplID09PSAnbWQnID8gbGF5b3V0Lm1lZGl1bSA6IGxheW91dC5sYXJnZSksXG4gICAgcm9sZTogXCJ0YWJsaXN0XCJcbiAgfSwgaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgdmFyIF9jbGFzc25hbWVzO1xuXG4gICAgdmFyIGlzU2VsZWN0ZWQgPSBpID09PSBzZWxlY3RlZEl0ZW1JbmRleDtcbiAgICB2YXIgY3MgPSBjbGFzc25hbWVzKHN0eWxlcyRuLml0ZW0sIChfY2xhc3NuYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHN0eWxlcyRuLml0ZW1Jc05vdFNlbGVjdGVkLCAhaXNTZWxlY3RlZCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJG4uaXRlbUlzU2VsZWN0ZWQsIGlzU2VsZWN0ZWQpLCBfY2xhc3NuYW1lcykpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNTZWxlY3RlZCxcbiAgICAgIGNsYXNzTmFtZTogY3MsXG4gICAgICBrZXk6IGksXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBvbkNoYW5nZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIGFjdGl2ZUluZGV4OiBpXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHJvbGU6IFwidGFiXCIsXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgd2lkdGg6IGJ1dHRvbldpZHRoXG4gICAgICB9XG4gICAgfSwgdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnID8gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGV4dCwge1xuICAgICAgY29sb3I6IGlzU2VsZWN0ZWQgPyAnZGFya0dyYXknIDogJ2dyYXknLFxuICAgICAgYWxpZ246IFwiY2VudGVyXCIsXG4gICAgICBzaXplOiBzaXplLFxuICAgICAgd2VpZ2h0OiBcImJvbGRcIlxuICAgIH0sIGl0ZW0pIDogLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiXG4gICAgfSwgaXRlbSkpO1xuICB9KSk7XG59XG5TZWdtZW50ZWRDb250cm9sLnByb3BUeXBlcyA9IHtcbiAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5ub2RlKS5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgcmVzcG9uc2l2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbGVjdGVkSXRlbUluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21kJywgJ2xnJ10pXG59O1xuXG52YXIgZm9ybUVsZW1lbnQgPSB7XCJiYXNlXCI6XCJ1blAgaXluXCIsXCJub3JtYWxcIjpcImFLTVwiLFwiZGlzYWJsZWRcIjpcIlJKbCBCOXUgZ3BWXCIsXCJlcnJvcmVkXCI6XCJrOGpcIixcImVuYWJsZWRcIjpcIlB2ZSBwQmogcUpjXCJ9O1xuXG5mdW5jdGlvbiBGb3JtSGVscGVyVGV4dChfcmVmKSB7XG4gIHZhciB0ZXh0ID0gX3JlZi50ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgbWFyZ2luVG9wOiAyXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICBjb2xvcjogXCJncmF5XCIsXG4gICAgc2l6ZTogXCJzbVwiXG4gIH0sIHRleHQpKTtcbn1cbkZvcm1IZWxwZXJUZXh0LnByb3BUeXBlcyA9IHtcbiAgdGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG52YXIgc3R5bGVzJG8gPSB7XCJmb3JtTGFiZWxcIjpcIlFvY1wifTtcblxuZnVuY3Rpb24gRm9ybUxhYmVsKF9yZWYpIHtcbiAgdmFyIGlkID0gX3JlZi5pZCxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExhYmVsLCB7XG4gICAgaHRtbEZvcjogaWRcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJG8uZm9ybUxhYmVsXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICBzaXplOiBcInNtXCJcbiAgfSwgbGFiZWwpKSk7XG59XG5Gb3JtTGFiZWwucHJvcFR5cGVzID0ge1xuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG59O1xuXG52YXIgc3R5bGVzJHAgPSB7XCJzZWxlY3RcIjpcImVNQyB0QkogZHlIIGlGYyB5VFogcEJqIEJHNyBYaUcgWWJZIEw0RVwifTtcblxudmFyIFNlbGVjdExpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFNlbGVjdExpc3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoU2VsZWN0TGlzdCk7XG5cbiAgZnVuY3Rpb24gU2VsZWN0TGlzdCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0TGlzdCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNlbGVjdFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0U2VsZWN0TGlzdFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5zZWxlY3QgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlT25DaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMudmFsdWU7XG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCAmJiB2YWx1ZSAhPT0gZXZlbnQudGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZWxlY3RMaXN0LCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gX3RoaXMkcHJvcHMyLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICBoZWxwZXJUZXh0ID0gX3RoaXMkcHJvcHMyLmhlbHBlclRleHQsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wczIuaWQsXG4gICAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wczIubGFiZWwsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMi5uYW1lLFxuICAgICAgICAgIG9wdGlvbnMgPSBfdGhpcyRwcm9wczIub3B0aW9ucyxcbiAgICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzMi5wbGFjZWhvbGRlcixcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMyLnNpemUsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczIudmFsdWU7XG4gICAgICB2YXIgZm9jdXNlZCA9IHRoaXMuc3RhdGUuZm9jdXNlZDtcbiAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NuYW1lcyhzdHlsZXMkcC5zZWxlY3QsIGZvcm1FbGVtZW50LmJhc2UsIGRpc2FibGVkID8gZm9ybUVsZW1lbnQuZGlzYWJsZWQgOiBmb3JtRWxlbWVudC5lbmFibGVkLCBlcnJvck1lc3NhZ2UgPyBmb3JtRWxlbWVudC5lcnJvcmVkIDogZm9ybUVsZW1lbnQubm9ybWFsLCBzaXplID09PSAnbWQnID8gbGF5b3V0Lm1lZGl1bSA6IGxheW91dC5sYXJnZSk7XG4gICAgICB2YXIgc2hvd1BsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXIgJiYgIXZhbHVlO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwgbnVsbCwgbGFiZWwgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRm9ybUxhYmVsLCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbGFiZWw6IGxhYmVsXG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIGNvbG9yOiBkaXNhYmxlZCA/ICdsaWdodEdyYXknIDogJ3doaXRlJyxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHJvdW5kaW5nOiA0LFxuICAgICAgICB3aWR0aDogXCIxMDAlXCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBib3R0b206IHRydWUsXG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgICAgICBfX3N0eWxlOiB7XG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDE0LFxuICAgICAgICAgICAgcGFkZGluZ1RvcDogMlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgICB0b3A6IHRydWVcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAgICAgaWNvbjogXCJhcnJvdy1kb3duXCIsXG4gICAgICAgIHNpemU6IDEyLFxuICAgICAgICBjb2xvcjogZGlzYWJsZWQgPyAnZ3JheScgOiAnZGFya0dyYXknLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFwiXCJcbiAgICAgIH0pKSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwge1xuICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogZXJyb3JNZXNzYWdlICYmIGZvY3VzZWQgPyBcIlwiLmNvbmNhdChpZCwgXCItZXJyb3JcIikgOiBudWxsLFxuICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBlcnJvck1lc3NhZ2UgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlT25DaGFuZ2UsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZU9uQ2hhbmdlLFxuICAgICAgICByZWY6IHRoaXMuc2V0U2VsZWN0TGlzdFJlZixcbiAgICAgICAgdmFsdWU6IHNob3dQbGFjZWhvbGRlciA/IHBsYWNlaG9sZGVyIDogdmFsdWVcbiAgICAgIH0sIHNob3dQbGFjZWhvbGRlciAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgICB2YWx1ZTogcGxhY2Vob2xkZXIsXG4gICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgfSwgcGxhY2Vob2xkZXIpLCBvcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XG4gICAgICAgICAga2V5OiBvcHRpb24udmFsdWUsXG4gICAgICAgICAgdmFsdWU6IG9wdGlvbi52YWx1ZVxuICAgICAgICB9LCBvcHRpb24ubGFiZWwpO1xuICAgICAgfSkpKSwgaGVscGVyVGV4dCAmJiAhZXJyb3JNZXNzYWdlID8gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRm9ybUhlbHBlclRleHQsIHtcbiAgICAgICAgdGV4dDogaGVscGVyVGV4dFxuICAgICAgfSkgOiBudWxsLCBlcnJvck1lc3NhZ2UgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRm9ybUVycm9yTWVzc2FnZSwge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHRleHQ6IGVycm9yTWVzc2FnZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWxlY3RMaXN0O1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VsZWN0TGlzdCwgXCJwcm9wVHlwZXNcIiwge1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGVycm9yTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGVscGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZXhhY3Qoe1xuICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICB9KSksXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydtZCcsICdsZyddKSxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoU2VsZWN0TGlzdCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIHNpemU6ICdtZCcsXG4gIG9wdGlvbnM6IFtdXG59KTtcblxudmFyIHN0eWxlcyRxID0ge1wiaWNvblwiOlwiWUhxIGtWY1wiLFwic3BpblwiOlwiamZoXCIsXCJkZWxheVwiOlwiTy1UXCJ9O1xuXG52YXIgU0laRV9OQU1FX1RPX1BJWEVMJDIgPSB7XG4gIHNtOiAzMixcbiAgbWQ6IDQwXG59O1xuZnVuY3Rpb24gU3Bpbm5lcihfcmVmKSB7XG4gIHZhciBhY2Nlc3NpYmlsaXR5TGFiZWwgPSBfcmVmLmFjY2Vzc2liaWxpdHlMYWJlbCxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRkZWxheSxcbiAgICAgIHNob3cgPSBfcmVmLnNob3csXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBzaXplID0gX3JlZiRzaXplID09PSB2b2lkIDAgPyAnbWQnIDogX3JlZiRzaXplO1xuICByZXR1cm4gc2hvdyA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGp1c3RpZnlDb250ZW50OiBcImFyb3VuZFwiLFxuICAgIG92ZXJmbG93OiBcImhpZGRlblwiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoc3R5bGVzJHEuaWNvbiwgX2RlZmluZVByb3BlcnR5KHt9LCBzdHlsZXMkcS5kZWxheSwgZGVsYXkpKVxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJY29uLCB7XG4gICAgaWNvbjogXCJrbm9vcFwiLFxuICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgIHNpemU6IFNJWkVfTkFNRV9UT19QSVhFTCQyW3NpemVdXG4gIH0pKSkgOiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsKTtcbn1cblNwaW5uZXIucHJvcFR5cGVzID0ge1xuICBzaG93OiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBhY2Nlc3NpYmlsaXR5TGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZGVsYXk6IFByb3BUeXBlcy5ib29sLFxuICBzaXplOiBQcm9wVHlwZXMub25lT2YoWydzbScsICdtZCddKVxufTtcblxuZnVuY3Rpb24gU3RhY2soX3JlZikge1xuICB2YXIgX3JlZiRhbGlnbkl0ZW1zID0gX3JlZi5hbGlnbkl0ZW1zLFxuICAgICAgYWxpZ25JdGVtcyA9IF9yZWYkYWxpZ25JdGVtcyA9PT0gdm9pZCAwID8gJ3N0YXJ0JyA6IF9yZWYkYWxpZ25JdGVtcyxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIF9yZWYkZ2FwID0gX3JlZi5nYXAsXG4gICAgICBnYXAgPSBfcmVmJGdhcCA9PT0gdm9pZCAwID8gMCA6IF9yZWYkZ2FwLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBfcmVmJGp1c3RpZnlDb250ZW50ID0gX3JlZi5qdXN0aWZ5Q29udGVudCxcbiAgICAgIGp1c3RpZnlDb250ZW50ID0gX3JlZiRqdXN0aWZ5Q29udGVudCA9PT0gdm9pZCAwID8gJ2NlbnRlcicgOiBfcmVmJGp1c3RpZnlDb250ZW50LFxuICAgICAgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJhbGlnbkl0ZW1zXCIsIFwiY2hpbGRyZW5cIiwgXCJnYXBcIiwgXCJoZWlnaHRcIiwgXCJqdXN0aWZ5Q29udGVudFwiLCBcIndpZHRoXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgbWFyZ2luVG9wOiBnYXAgPyAtZ2FwIDogMCxcbiAgICBtYXJnaW5Cb3R0b206IGdhcCA/IC1nYXAgOiAwLFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGbGV4Qm94LCBfZXh0ZW5kcyh7XG4gICAgYWxpZ25JdGVtczogYWxpZ25JdGVtcyxcbiAgICBkaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAganVzdGlmeUNvbnRlbnQ6IGp1c3RpZnlDb250ZW50LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCByZXN0KSwgQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICBwYWRkaW5nWTogZ2FwXG4gICAgfSwgY2hpbGQpO1xuICB9KSkpO1xufVxuU3RhY2sucHJvcFR5cGVzID0ge1xuICBhbGlnbkNvbnRlbnQ6IEFsaWduQ29udGVudFByb3BUeXBlLFxuICBhbGlnbkl0ZW1zOiBBbGlnbkl0ZW1zUHJvcFR5cGUsXG4gIGFsaWduU2VsZjogQWxpZ25TZWxmUHJvcFR5cGUsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgZmxleDogRmxleFByb3BUeXBlLFxuICBnYXA6IFBhZGRpbmdQcm9wVHlwZSxcbiAgaGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAganVzdGlmeUNvbnRlbnQ6IEp1c3RpZnlDb250ZW50UHJvcFR5cGUsXG4gIG1heEhlaWdodDogRGltZW5zaW9uUHJvcFR5cGUsXG4gIG1heFdpZHRoOiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWluSGVpZ2h0OiBEaW1lbnNpb25Qcm9wVHlwZSxcbiAgbWluV2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICBvdmVyZmxvdzogT3ZlcmZsb3dQcm9wVHlwZSxcbiAgd2lkdGg6IERpbWVuc2lvblByb3BUeXBlLFxuICB3cmFwOiBQcm9wVHlwZXMuYm9vbFxufTtcblxuZnVuY3Rpb24gU3RpY2t5KHByb3BzKSB7XG4gIHZhciBfcHJvcHMkZGFuZ2Vyb3VzbHlTZXQgPSBwcm9wcy5kYW5nZXJvdXNseVNldFpJbmRleCxcbiAgICAgIGRhbmdlcm91c2x5U2V0WkluZGV4ID0gX3Byb3BzJGRhbmdlcm91c2x5U2V0ID09PSB2b2lkIDAgPyB7XG4gICAgX196SW5kZXg6IDFcbiAgfSA6IF9wcm9wcyRkYW5nZXJvdXNseVNldCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG4gIHZhciBzdHlsZSA9IHtcbiAgICB0b3A6IHByb3BzLnRvcCAhPSBudWxsID8gcHJvcHMudG9wIDogdW5kZWZpbmVkLFxuICAgIGxlZnQ6IHByb3BzLmxlZnQgIT0gbnVsbCA/IHByb3BzLmxlZnQgOiB1bmRlZmluZWQsXG4gICAgcmlnaHQ6IHByb3BzLnJpZ2h0ICE9IG51bGwgPyBwcm9wcy5yaWdodCA6IHVuZGVmaW5lZCxcbiAgICBib3R0b206IHByb3BzLmJvdHRvbSAhPSBudWxsID8gcHJvcHMuYm90dG9tIDogdW5kZWZpbmVkLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZVxuICAgIHpJbmRleDogZGFuZ2Vyb3VzbHlTZXRaSW5kZXguX196SW5kZXhcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGxheW91dC5zdGlja3ksXG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblN0aWNreS5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgZGFuZ2Vyb3VzbHlTZXRaSW5kZXg6IFByb3BUeXBlcy5leGFjdCh7XG4gICAgX196SW5kZXg6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksXG4gIHRvcDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICBsZWZ0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIGJvdHRvbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICByaWdodDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59O1xuXG52YXIgc3R5bGVzJHIgPSB7XCJzd2l0Y2hcIjpcImpQbCBrVmMgSHN1IFhpR1wiLFwiZm9jdXNlZFwiOlwiTXk3IEMxSlwiLFwic3dpdGNoRGFya0dyYXlcIjpcImRENiBCc0ZcIixcInN3aXRjaEdyYXlcIjpcIkdPWCBnZlAgdGswXCIsXCJzd2l0Y2hMaWdodEdyYXlcIjpcInYtSyBncFYgdGswXCIsXCJzd2l0Y2hXaGl0ZVwiOlwiTll4IHFKYyB0azBcIixcInNsaWRlclwiOlwiVTdRIEhzdSBNSXcgcUpjIElOZFwiLFwic2xpZGVyUmlnaHRcIjpcInRhSVwiLFwic2xpZGVyTGVmdFwiOlwiUkRoXCIsXCJzbGlkZXJEYXJrXCI6XCJHRXFcIixcInNsaWRlckxpZ2h0XCI6XCJmaFggdGswXCIsXCJjaGVja2JveFwiOlwic0FYIE1JdyBMNEUgZTQzIGFkbiB5UW9cIixcImNoZWNrYm94RW5hYmxlZFwiOlwiQzhBIEJHN1wifTtcblxudmFyIFN3aXRjaCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFN3aXRjaCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUJsdXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUZvY3VzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uQ2hhbmdlO1xuICAgICAgdmFyIGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICB2YWx1ZTogY2hlY2tlZFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3dpdGNoLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsXG4gICAgICAgICAgc3dpdGNoZWQgPSBfdGhpcyRwcm9wcy5zd2l0Y2hlZDtcbiAgICAgIHZhciBzd2l0Y2hTdHlsZXMgPSBjbGFzc25hbWVzKHN0eWxlcyRyLnN3aXRjaCwgX2RlZmluZVByb3BlcnR5KHt9LCBzdHlsZXMkci5mb2N1c2VkLCB0aGlzLnN0YXRlLmZvY3VzZWQpLCAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgIGRpc2FibGVkID8gc3dpdGNoZWQgPyBzdHlsZXMkci5zd2l0Y2hHcmF5IDogc3R5bGVzJHIuc3dpdGNoTGlnaHRHcmF5IDogc3dpdGNoZWQgPyBzdHlsZXMkci5zd2l0Y2hEYXJrR3JheSA6IHN0eWxlcyRyLnN3aXRjaFdoaXRlKTtcbiAgICAgIHZhciBzbGlkZXJTdHlsZXMgPSBjbGFzc25hbWVzKHN0eWxlcyRyLnNsaWRlciwgc3dpdGNoZWQgPyBzdHlsZXMkci5zbGlkZXJSaWdodCA6IHN0eWxlcyRyLnNsaWRlckxlZnQsIHN3aXRjaGVkICYmICFkaXNhYmxlZCA/IHN0eWxlcyRyLnNsaWRlckRhcmsgOiBzdHlsZXMkci5zbGlkZXJMaWdodCk7XG4gICAgICB2YXIgaW5wdXRTdHlsZXMgPSBjbGFzc25hbWVzKHN0eWxlcyRyLmNoZWNrYm94LCBfZGVmaW5lUHJvcGVydHkoe30sIHN0eWxlcyRyLmNoZWNrYm94RW5hYmxlZCwgIWRpc2FibGVkKSk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHN3aXRjaFN0eWxlc1xuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIGNoZWNrZWQ6IHN3aXRjaGVkLFxuICAgICAgICBjbGFzc05hbWU6IGlucHV0U3R5bGVzLFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgdHlwZTogXCJjaGVja2JveFwiXG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHNsaWRlclN0eWxlc1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShTd2l0Y2gsIFwicHJvcFR5cGVzXCIsIHtcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc3dpdGNoZWQ6IFByb3BUeXBlcy5ib29sXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFN3aXRjaCwgXCJkZWZhdWx0UHJvcHNcIiwge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIHN3aXRjaGVkOiBmYWxzZVxufSk7XG5cbnZhciBzdHlsZXMkcyA9IHtcInRhYmxlXCI6XCJwYkVcIixcInRoXCI6XCJaajIgaFVDIFpyM1wiLFwidGRcIjpcIlpkbiBoVUMgWnIzXCIsXCJ0aGVhZFwiOlwiSHcyIHZDRVwifTtcblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29sU3BhbiA9IHByb3BzLmNvbFNwYW4sXG4gICAgICByb3dTcGFuID0gcHJvcHMucm93U3BhbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwidGRcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzJHMudGQsXG4gICAgY29sU3BhbjogY29sU3BhbixcbiAgICByb3dTcGFuOiByb3dTcGFuXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVCb2R5KHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInRib2R5XCIsIG51bGwsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVGb290ZXIocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwidGZvb3RcIiwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBUYWJsZUhlYWRlcihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkcy50aGVhZFxuICB9LCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIFRhYmxlSGVhZGVyQ2VsbChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbFNwYW4gPSBwcm9wcy5jb2xTcGFuLFxuICAgICAgc2NvcGUgPSBwcm9wcy5zY29wZSxcbiAgICAgIHJvd1NwYW4gPSBwcm9wcy5yb3dTcGFuO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkcy50aCxcbiAgICBzY29wZTogc2NvcGUgfHwgJ2NvbCcsXG4gICAgY29sU3BhbjogY29sU3BhbixcbiAgICByb3dTcGFuOiByb3dTcGFuXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gVGFibGVSb3cocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwidHJcIiwgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG52YXIgc3R5bGVzJHQgPSB7XCJ0b3VjaGFibGVcIjpcInJMSyBpeW5cIixcImZ1bGxIZWlnaHRcIjpcIlhKYVwiLFwiZnVsbFdpZHRoXCI6XCJGVEQgTDRFXCIsXCJwb2ludGVyXCI6XCJESTkgQkc3XCIsXCJ6b29tSW5cIjpcIk1OWCBMSWFcIixcInpvb21PdXRcIjpcIktQVyBTbXpcIixcImNvcHlcIjpcInUtOCBxLURcIixcIm1vdmVcIjpcIl9xViBjOHpcIixcIm5vRHJvcFwiOlwiX2o0IHJFd1wiLFwiZ3JhYlwiOlwidllOIEs4VFwiLFwiZ3JhYmJpbmdcIjpcInV5MiBSTWtcIn07XG5cbnZhciBTUEFDRV9DSEFSX0NPREUgPSAzMjtcbnZhciBFTlRFUl9DSEFSX0NPREUgPSAxMztcbnZhciBSb3VuZGluZ1Byb3BUeXBlJDIgPSBQcm9wVHlwZXMub25lT2YoWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsICdjaXJjbGUnLCAncGlsbCddKTtcblxudmFyIGdldFJvdW5kaW5nU3R5bGUkMSA9IGZ1bmN0aW9uIGdldFJvdW5kaW5nU3R5bGUocikge1xuICBpZiAodHlwZW9mIHIgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGJpbmQocmFuZ2UoJ3JvdW5kaW5nJyksIGJvcmRlcnMpKHIpO1xuICB9XG5cbiAgaWYgKHIgPT09ICdjaXJjbGUnKSB7XG4gICAgcmV0dXJuIGZyb21DbGFzc05hbWUoYm9yZGVycy5jaXJjbGUpO1xuICB9XG5cbiAgaWYgKHIgPT09ICdwaWxsJykge1xuICAgIHJldHVybiBmcm9tQ2xhc3NOYW1lKGJvcmRlcnMucGlsbCk7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpdHkoKTtcbn07XG5cbnZhciBUb3VjaGFibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRvdWNoYWJsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihUb3VjaGFibGUpO1xuXG4gIGZ1bmN0aW9uIFRvdWNoYWJsZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG91Y2hhYmxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsLmFwcGx5KF9zdXBlciwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlS2V5UHJlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25Ub3VjaCA9IF90aGlzLnByb3BzLm9uVG91Y2g7IC8vIENoZWNrIHRvIHNlZSBpZiBzcGFjZSBvciBlbnRlciB3ZXJlIHByZXNzZWRcblxuICAgICAgaWYgKG9uVG91Y2ggJiYgKGV2ZW50LmNoYXJDb2RlID09PSBTUEFDRV9DSEFSX0NPREUgfHwgZXZlbnQuY2hhckNvZGUgPT09IEVOVEVSX0NIQVJfQ09ERSkpIHtcbiAgICAgICAgLy8gUHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gdG8gc3RvcCBzY3JvbGxpbmcgd2hlbiBzcGFjZSBpcyBwcmVzc2VkXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uVG91Y2goe1xuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVCbHVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uQmx1ciA9IF90aGlzLnByb3BzLm9uQmx1cjtcblxuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoe1xuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVGb2N1c1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvbkZvY3VzID0gX3RoaXMucHJvcHMub25Gb2N1cztcblxuICAgICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgICAgb25Gb2N1cyh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlRW50ZXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25Nb3VzZUVudGVyID0gX3RoaXMucHJvcHMub25Nb3VzZUVudGVyO1xuXG4gICAgICBpZiAob25Nb3VzZUVudGVyKSB7XG4gICAgICAgIG9uTW91c2VFbnRlcih7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlTGVhdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25Nb3VzZUxlYXZlID0gX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlO1xuXG4gICAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIG9uTW91c2VMZWF2ZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uVG91Y2ggPSBfdGhpcy5wcm9wcy5vblRvdWNoO1xuXG4gICAgICBpZiAob25Ub3VjaCkge1xuICAgICAgICBvblRvdWNoKHtcbiAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVG91Y2hhYmxlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc25hbWVzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgX3RoaXMkcHJvcHMkZnVsbFdpZHRoID0gX3RoaXMkcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgICAgIGZ1bGxXaWR0aCA9IF90aGlzJHByb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF90aGlzJHByb3BzJGZ1bGxXaWR0aCxcbiAgICAgICAgICBmdWxsSGVpZ2h0ID0gX3RoaXMkcHJvcHMuZnVsbEhlaWdodCxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRtb3VzZUN1cnMgPSBfdGhpcyRwcm9wcy5tb3VzZUN1cnNvcixcbiAgICAgICAgICBtb3VzZUN1cnNvciA9IF90aGlzJHByb3BzJG1vdXNlQ3VycyA9PT0gdm9pZCAwID8gJ3BvaW50ZXInIDogX3RoaXMkcHJvcHMkbW91c2VDdXJzLFxuICAgICAgICAgIF90aGlzJHByb3BzJHJvdW5kaW5nID0gX3RoaXMkcHJvcHMucm91bmRpbmcsXG4gICAgICAgICAgcm91bmRpbmcgPSBfdGhpcyRwcm9wcyRyb3VuZGluZyA9PT0gdm9pZCAwID8gMCA6IF90aGlzJHByb3BzJHJvdW5kaW5nO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc25hbWVzKHN0eWxlcyR0LnRvdWNoYWJsZSwgc3R5bGVzJHRbbW91c2VDdXJzb3JdLCB0b1Byb3BzKGdldFJvdW5kaW5nU3R5bGUkMShyb3VuZGluZykpLmNsYXNzTmFtZSwgKF9jbGFzc25hbWVzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJHQuZnVsbEhlaWdodCwgZnVsbEhlaWdodCksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgc3R5bGVzJHQuZnVsbFdpZHRoLCBmdWxsV2lkdGgpLCBfY2xhc3NuYW1lcykpO1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbktleVByZXNzOiB0aGlzLmhhbmRsZUtleVByZXNzLFxuICAgICAgICByb2xlOiBcImJ1dHRvblwiLFxuICAgICAgICB0YWJJbmRleDogXCIwXCJcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVG91Y2hhYmxlO1xufShDb21wb25lbnQpO1xuXG5fZGVmaW5lUHJvcGVydHkoVG91Y2hhYmxlLCBcInByb3BUeXBlc1wiLCB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgZnVsbEhlaWdodDogUHJvcFR5cGVzLmJvb2wsXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG4gIG1vdXNlQ3Vyc29yOiBQcm9wVHlwZXMub25lT2YoWydjb3B5JywgJ2dyYWInLCAnZ3JhYmJpbmcnLCAnbW92ZScsICdub0Ryb3AnLCAncG9pbnRlcicsICd6b29tSW4nLCAnem9vbU91dCddKSxcbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uVG91Y2g6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuICByb3VuZGluZzogUm91bmRpbmdQcm9wVHlwZSQyXG59KTtcblxuZnVuY3Rpb24gVGFibGVTb3J0YWJsZUhlYWRlckNlbGwocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb2xTcGFuID0gcHJvcHMuY29sU3BhbixcbiAgICAgIHNjb3BlID0gcHJvcHMuc2NvcGUsXG4gICAgICByb3dTcGFuID0gcHJvcHMucm93U3BhbixcbiAgICAgIHN0YXR1cyA9IHByb3BzLnN0YXR1cyxcbiAgICAgIHNvcnRPcmRlciA9IHByb3BzLnNvcnRPcmRlcixcbiAgICAgIG9uU29ydENoYW5nZSA9IHByb3BzLm9uU29ydENoYW5nZTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX1JlYWN0JHVzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VTdGF0ZSwgMiksXG4gICAgICBpc0ZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTMgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfUmVhY3QkdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX1JlYWN0JHVzZVN0YXRlMywgMiksXG4gICAgICBpc0hvdmVyZWQgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0SG92ZXJlZCA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIHNob3VsZFNob3dJY29uID0gc3RhdHVzID09PSAnYWN0aXZlJyB8fCBpc0hvdmVyZWQgfHwgaXNGb2N1c2VkO1xuICB2YXIgdmlzaWJpbGl0eSA9IHNob3VsZFNob3dJY29uID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUYWJsZUhlYWRlckNlbGwsIHtcbiAgICBjb2xTcGFuOiBjb2xTcGFuLFxuICAgIHJvd1NwYW46IHJvd1NwYW4sXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRvdWNoYWJsZSwge1xuICAgIG9uVG91Y2g6IG9uU29ydENoYW5nZSxcbiAgICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uTW91c2VFbnRlcigpIHtcbiAgICAgIHJldHVybiBzZXRIb3ZlcmVkKHRydWUpO1xuICAgIH0sXG4gICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7XG4gICAgICByZXR1cm4gc2V0SG92ZXJlZChmYWxzZSk7XG4gICAgfSxcbiAgICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgICAgcmV0dXJuIHNldEZvY3VzZWQodHJ1ZSk7XG4gICAgfSxcbiAgICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICAgIHJldHVybiBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiXG4gIH0sIGNoaWxkcmVuLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBtYXJnaW5MZWZ0OiAyLFxuICAgIGRhbmdlcm91c2x5U2V0SW5saW5lU3R5bGU6IHtcbiAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgdmlzaWJpbGl0eTogdmlzaWJpbGl0eVxuICAgICAgfVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogXCJcIixcbiAgICBpY29uOiBzdGF0dXMgPT09ICdhY3RpdmUnICYmIHNvcnRPcmRlciA9PT0gJ2FzYycgPyAnc29ydC1hc2NlbmRpbmcnIDogJ3NvcnQtZGVzY2VuZGluZycsXG4gICAgY29sb3I6IHN0YXR1cyA9PT0gJ2FjdGl2ZScgPyAnZGFya0dyYXknIDogJ2dyYXknXG4gIH0pKSkpKTtcbn1cblxuZnVuY3Rpb24gVGFibGUocHJvcHMpIHtcbiAgdmFyIGJvcmRlclNpemUgPSBwcm9wcy5ib3JkZXJTaXplLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwgX2V4dGVuZHMoe1xuICAgIG92ZXJmbG93OiBcImF1dG9cIlxuICB9LCBib3JkZXJTaXplID09PSAnc20nID8ge1xuICAgIGJvcmRlclNpemU6ICdzbScsXG4gICAgcm91bmRpbmc6IDFcbiAgfSA6IHt9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMkcy50YWJsZVxuICB9LCBjaGlsZHJlbikpO1xufVxuVGFibGUuQm9keSA9IFRhYmxlQm9keTtcblRhYmxlLkNlbGwgPSBUYWJsZUNlbGw7XG5UYWJsZS5Gb290ZXIgPSBUYWJsZUZvb3RlcjtcblRhYmxlLkhlYWRlciA9IFRhYmxlSGVhZGVyO1xuVGFibGUuSGVhZGVyQ2VsbCA9IFRhYmxlSGVhZGVyQ2VsbDtcblRhYmxlLlJvdyA9IFRhYmxlUm93O1xuVGFibGUuU29ydGFibGVIZWFkZXJDZWxsID0gVGFibGVTb3J0YWJsZUhlYWRlckNlbGw7XG5cbnZhciBzdHlsZXMkdSA9IHtcIlRhYnNcIjpcIkZhVCBfTzFcIixcInRhYlwiOlwiVGJxIGl5biBIc3UgX08xIHFUNiBnanogbVE4IFVTZyBhZG4gTGZ6IGU0MyBCRzcgZlp6IGhBLVwiLFwidGFiSXNOb3RBY3RpdmVcIjpcImYtVCBxSmNcIixcInRhYklzQWN0aXZlXCI6XCJvT0UgQnNGIGVyaFwifTtcblxuZnVuY3Rpb24gVGFicyhfcmVmKSB7XG4gIHZhciBhY3RpdmVUYWJJbmRleCA9IF9yZWYuYWN0aXZlVGFiSW5kZXgsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBfcmVmJHNpemUgPSBfcmVmLnNpemUsXG4gICAgICBzaXplID0gX3JlZiRzaXplID09PSB2b2lkIDAgPyAnbWQnIDogX3JlZiRzaXplLFxuICAgICAgdGFicyA9IF9yZWYudGFicyxcbiAgICAgIHdyYXAgPSBfcmVmLndyYXA7XG5cbiAgdmFyIGhhbmRsZVRhYkNsaWNrID0gZnVuY3Rpb24gaGFuZGxlVGFiQ2xpY2soaSwgZSkge1xuICAgIHJldHVybiBvbkNoYW5nZSh7XG4gICAgICBhY3RpdmVUYWJJbmRleDogaSxcbiAgICAgIGV2ZW50OiBlXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzbmFtZXMoc3R5bGVzJHUuVGFicywgd3JhcCAmJiBsYXlvdXQuZmxleFdyYXAsIHNpemUgPT09ICdtZCcgPyBsYXlvdXQubWVkaXVtIDogbGF5b3V0LmxhcmdlKSxcbiAgICByb2xlOiBcInRhYmxpc3RcIlxuICB9LCB0YWJzLm1hcChmdW5jdGlvbiAoX3JlZjIsIGkpIHtcbiAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICB2YXIgdGV4dCA9IF9yZWYyLnRleHQsXG4gICAgICAgIGhyZWYgPSBfcmVmMi5ocmVmO1xuICAgIHZhciBpc0FjdGl2ZSA9IGkgPT09IGFjdGl2ZVRhYkluZGV4O1xuICAgIHZhciBjcyA9IGNsYXNzbmFtZXMoc3R5bGVzJHUudGFiLCAoX2NsYXNzbmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkdS50YWJJc05vdEFjdGl2ZSwgIWlzQWN0aXZlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBzdHlsZXMkdS50YWJJc0FjdGl2ZSwgaXNBY3RpdmUpLCBfY2xhc3NuYW1lcykpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgXCJhcmlhLXNlbGVjdGVkXCI6IGlzQWN0aXZlLFxuICAgICAgY2xhc3NOYW1lOiBjcyxcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBrZXk6IFwiXCIuY29uY2F0KGkpLmNvbmNhdChocmVmKSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlVGFiQ2xpY2soaSwgZSk7XG4gICAgICB9LFxuICAgICAgcm9sZTogXCJ0YWJcIlxuICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICAgIGNvbG9yOiBpc0FjdGl2ZSA/ICd3aGl0ZScgOiAnZGFya0dyYXknLFxuICAgICAgd2VpZ2h0OiBcImJvbGRcIlxuICAgIH0sIHRleHQpKTtcbiAgfSkpO1xufVxuVGFicy5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZVRhYkluZGV4OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIHRhYnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5leGFjdCh7XG4gICAgdGV4dDogUHJvcFR5cGVzLm5vZGUsXG4gICAgaHJlZjogUHJvcFR5cGVzLnN0cmluZ1xuICB9KSkuaXNSZXF1aXJlZCxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHdyYXA6IFByb3BUeXBlcy5ib29sXG59O1xuXG52YXIgc3R5bGVzJHYgPSB7XCJ0ZXh0QXJlYVwiOlwiR25qIEhzdSB0QkogZHlIIGlGYyB5VFogTDRFXCJ9O1xuXG52YXIgVGV4dEFyZWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRleHRBcmVhLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRleHRBcmVhKTtcblxuICBmdW5jdGlvbiBUZXh0QXJlYSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dEFyZWEpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0ZXh0YXJlYVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0VGV4dEFyZWFSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMudGV4dGFyZWEgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gX3RoaXMucHJvcHMub25DaGFuZ2U7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUJsdXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25CbHVyID0gX3RoaXMucHJvcHMub25CbHVyO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cih7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUZvY3VzXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uRm9jdXMgPSBfdGhpcy5wcm9wcy5vbkZvY3VzO1xuXG4gICAgICBpZiAob25Gb2N1cykge1xuICAgICAgICBvbkZvY3VzKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvbktleURvd24gPSBfdGhpcy5wcm9wcy5vbktleURvd247XG5cbiAgICAgIGlmIChvbktleURvd24pIHtcbiAgICAgICAgb25LZXlEb3duKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV4dEFyZWEsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gX3RoaXMkcHJvcHMuZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIGhhc0Vycm9yID0gX3RoaXMkcHJvcHMuaGFzRXJyb3IsXG4gICAgICAgICAgaGVscGVyVGV4dCA9IF90aGlzJHByb3BzLmhlbHBlclRleHQsXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcbiAgICAgICAgICBsYWJlbCA9IF90aGlzJHByb3BzLmxhYmVsLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wcy5uYW1lLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgcm93cyA9IF90aGlzJHByb3BzLnJvd3MsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZTtcbiAgICAgIHZhciBmb2N1c2VkID0gdGhpcy5zdGF0ZS5mb2N1c2VkO1xuICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc25hbWVzKHN0eWxlcyR2LnRleHRBcmVhLCBmb3JtRWxlbWVudC5iYXNlLCBkaXNhYmxlZCA/IGZvcm1FbGVtZW50LmRpc2FibGVkIDogZm9ybUVsZW1lbnQuZW5hYmxlZCwgaGFzRXJyb3IgfHwgZXJyb3JNZXNzYWdlID8gZm9ybUVsZW1lbnQuZXJyb3JlZCA6IGZvcm1FbGVtZW50Lm5vcm1hbCk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIGxhYmVsICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZvcm1MYWJlbCwge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgfSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwge1xuICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogZXJyb3JNZXNzYWdlICYmIGZvY3VzZWQgPyBcIlwiLmNvbmNhdChpZCwgXCItZXJyb3JcIikgOiBudWxsLFxuICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBlcnJvck1lc3NhZ2UgfHwgaGFzRXJyb3IgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICByZWY6IHRoaXMuc2V0VGV4dEFyZWFSZWYsXG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSksIGhlbHBlclRleHQgJiYgIWVycm9yTWVzc2FnZSA/IC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZvcm1IZWxwZXJUZXh0LCB7XG4gICAgICAgIHRleHQ6IGhlbHBlclRleHRcbiAgICAgIH0pIDogbnVsbCwgZXJyb3JNZXNzYWdlICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZvcm1FcnJvck1lc3NhZ2UsIHtcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICB0ZXh0OiBlcnJvck1lc3NhZ2VcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGV4dEFyZWE7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShUZXh0QXJlYSwgXCJwcm9wVHlwZXNcIiwge1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGVycm9yTWVzc2FnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGFzRXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICBoZWxwZXJUZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgcm93czogUHJvcFR5cGVzLm51bWJlcixcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVGV4dEFyZWEsIFwiZGVmYXVsdFByb3BzXCIsIHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBoYXNFcnJvcjogZmFsc2UsXG4gIHJvd3M6IDNcbn0pO1xuXG52YXIgc3R5bGVzJHcgPSB7XCJ0ZXh0RmllbGRcIjpcInd5cSBIc3UgdEJKIGR5SCBpRmMgeVRaIEw0RVwifTtcblxudmFyIFRleHRGaWVsZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGV4dEZpZWxkLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFRleHRGaWVsZCk7XG5cbiAgZnVuY3Rpb24gVGV4dEZpZWxkKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0RmllbGQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0ZXh0ZmllbGRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzdGF0ZVwiLCB7XG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInNldFRleHRGaWVsZFJlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy50ZXh0ZmllbGQgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlQ2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gX3RoaXMucHJvcHMub25DaGFuZ2U7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUJsdXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25CbHVyID0gX3RoaXMucHJvcHMub25CbHVyO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cih7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHZhbHVlOiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUZvY3VzXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uRm9jdXMgPSBfdGhpcy5wcm9wcy5vbkZvY3VzO1xuXG4gICAgICBpZiAob25Gb2N1cykge1xuICAgICAgICBvbkZvY3VzKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvbktleURvd24gPSBfdGhpcy5wcm9wcy5vbktleURvd247XG5cbiAgICAgIGlmIChvbktleURvd24pIHtcbiAgICAgICAgb25LZXlEb3duKHtcbiAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGV4dEZpZWxkLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvQ29tcGxldGUgPSBfdGhpcyRwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBfdGhpcyRwcm9wcy5lcnJvck1lc3NhZ2UsXG4gICAgICAgICAgaGFzRXJyb3IgPSBfdGhpcyRwcm9wcy5oYXNFcnJvcixcbiAgICAgICAgICBoZWxwZXJUZXh0ID0gX3RoaXMkcHJvcHMuaGVscGVyVGV4dCxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzLmlkLFxuICAgICAgICAgIGxhYmVsID0gX3RoaXMkcHJvcHMubGFiZWwsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgICAgICBzaXplID0gX3RoaXMkcHJvcHMuc2l6ZSxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMudHlwZSxcbiAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzLnZhbHVlO1xuICAgICAgdmFyIGZvY3VzZWQgPSB0aGlzLnN0YXRlLmZvY3VzZWQ7XG4gICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzbmFtZXMoc3R5bGVzJHcudGV4dEZpZWxkLCBmb3JtRWxlbWVudC5iYXNlLCBkaXNhYmxlZCA/IGZvcm1FbGVtZW50LmRpc2FibGVkIDogZm9ybUVsZW1lbnQuZW5hYmxlZCwgaGFzRXJyb3IgfHwgZXJyb3JNZXNzYWdlID8gZm9ybUVsZW1lbnQuZXJyb3JlZCA6IGZvcm1FbGVtZW50Lm5vcm1hbCwgc2l6ZSA9PT0gJ21kJyA/IGxheW91dC5tZWRpdW0gOiBsYXlvdXQubGFyZ2UpOyAvLyB0eXBlPSdudW1iZXInIGRvZXNuJ3Qgd29yayBvbiBpb3Mgc2FmYXJpIHdpdGhvdXQgYSBwYXR0ZXJuXG4gICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDQ0NzY2OC9pbnB1dC10eXBlLW51bWJlci1pcy1ub3Qtc2hvd2luZy1hLW51bWJlci1rZXlwYWQtb24taW9zXG5cbiAgICAgIHZhciBwYXR0ZXJuID0gdHlwZSA9PT0gJ251bWJlcicgPyAnXFxcXGQqJyA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcInNwYW5cIiwgbnVsbCwgbGFiZWwgJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoRm9ybUxhYmVsLCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbGFiZWw6IGxhYmVsXG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7XG4gICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBlcnJvck1lc3NhZ2UgJiYgZm9jdXNlZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1lcnJvclwiKSA6IG51bGwsXG4gICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGVycm9yTWVzc2FnZSB8fCBoYXNFcnJvciA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgaWQ6IGlkLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgcGF0dGVybjogcGF0dGVybixcbiAgICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgICByZWY6IHRoaXMuc2V0VGV4dEZpZWxkUmVmLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pLCBoZWxwZXJUZXh0ICYmICFlcnJvck1lc3NhZ2UgPyAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGb3JtSGVscGVyVGV4dCwge1xuICAgICAgICB0ZXh0OiBoZWxwZXJUZXh0XG4gICAgICB9KSA6IG51bGwsIGVycm9yTWVzc2FnZSAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGb3JtRXJyb3JNZXNzYWdlLCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgdGV4dDogZXJyb3JNZXNzYWdlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRleHRGaWVsZDtcbn0oQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFRleHRGaWVsZCwgXCJwcm9wVHlwZXNcIiwge1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5vbmVPZihbJ2N1cnJlbnQtcGFzc3dvcmQnLCAnbmV3LXBhc3N3b3JkJywgJ29uJywgJ29mZicsICd1c2VybmFtZSddKSxcbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICBlcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGhhc0Vycm9yOiBQcm9wVHlwZXMuYm9vbCxcbiAgaGVscGVyVGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ21kJywgJ2xnJ10pLFxuICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWydkYXRlJywgJ2VtYWlsJywgJ251bWJlcicsICdwYXNzd29yZCcsICd0ZXh0JywgJ3VybCddKSxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmdcbn0pO1xuXG5fZGVmaW5lUHJvcGVydHkoVGV4dEZpZWxkLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgaGFzRXJyb3I6IGZhbHNlLFxuICBzaXplOiAnbWQnLFxuICB0eXBlOiAndGV4dCdcbn0pO1xuXG5mdW5jdGlvbiBUb2FzdChfcmVmKSB7XG4gIHZhciBidXR0b24gPSBfcmVmLmJ1dHRvbixcbiAgICAgIF9yZWYkY29sb3IgPSBfcmVmLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcmVmJGNvbG9yID09PSB2b2lkIDAgPyAnZGFya0dyYXknIDogX3JlZiRjb2xvcixcbiAgICAgIHRleHQgPSBfcmVmLnRleHQsXG4gICAgICB0aHVtYm5haWwgPSBfcmVmLnRodW1ibmFpbCxcbiAgICAgIF9yZWYkdGh1bWJuYWlsU2hhcGUgPSBfcmVmLnRodW1ibmFpbFNoYXBlLFxuICAgICAgdGh1bWJuYWlsU2hhcGUgPSBfcmVmJHRodW1ibmFpbFNoYXBlID09PSB2b2lkIDAgPyAnc3F1YXJlJyA6IF9yZWYkdGh1bWJuYWlsU2hhcGU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBtYXJnaW5Cb3R0b206IDMsXG4gICAgcGFkZGluZ1g6IDQsXG4gICAgbWF4V2lkdGg6IDM2MCxcbiAgICB3aWR0aDogXCIxMDB2d1wiXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGNvbG9yOiBjb2xvcixcbiAgICBmaXQ6IHRydWUsXG4gICAgcGFkZGluZzogNixcbiAgICByb3VuZGluZzogXCJwaWxsXCJcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgbWFyZ2luTGVmdDogLTIsXG4gICAgbWFyZ2luUmlnaHQ6IC0yLFxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCJcbiAgfSwgdGh1bWJuYWlsID8gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgZmxleDogXCJub25lXCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgcGFkZGluZ1g6IDJcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoTWFzaywge1xuICAgIHJvdW5kaW5nOiB0aHVtYm5haWxTaGFwZSA9PT0gJ2NpcmNsZScgPyAnY2lyY2xlJyA6IDIsXG4gICAgaGVpZ2h0OiB0aHVtYm5haWxTaGFwZSA9PT0gJ3JlY3RhbmdsZScgPyA2NCA6IDQ4LFxuICAgIHdpZHRoOiA0OFxuICB9LCB0aHVtYm5haWwpKSA6IG51bGwsIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGRpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICBmbGV4OiBcImdyb3dcIixcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICBwYWRkaW5nWDogMlxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgY29sb3I6IFwid2hpdGVcIixcbiAgICBhbGlnbjogIXRodW1ibmFpbCAmJiAhYnV0dG9uID8gJ2NlbnRlcicgOiAnbGVmdCdcbiAgfSwgdGV4dCkpLCBidXR0b24gPyAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBmbGV4OiBcIm5vbmVcIixcbiAgICBwYWRkaW5nWDogMlxuICB9LCBidXR0b24pIDogbnVsbCkpKTtcbn1cblRvYXN0LnByb3BUeXBlcyA9IHtcbiAgYnV0dG9uOiBQcm9wVHlwZXMubm9kZSxcbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RhcmtHcmF5JywgJ3JlZCddKSxcbiAgdGV4dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmVsZW1lbnRdKS5pc1JlcXVpcmVkLFxuICB0aHVtYm5haWw6IFByb3BUeXBlcy5ub2RlLFxuICB0aHVtYm5haWxTaGFwZTogUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3JlY3RhbmdsZScsICdzcXVhcmUnXSlcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgVElNRU9VVCA9IDEwMDtcbnZhciBpbml0aWFsU3RhdGUgPSB7XG4gIGhvdmVyZWRJY29uOiBmYWxzZSxcbiAgaG92ZXJlZFRleHQ6IGZhbHNlLFxuICBpc09wZW46IGZhbHNlXG59O1xuXG52YXIgcmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnaG92ZXJJbkljb24nOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzdGF0ZSksIHt9LCB7XG4gICAgICAgIGhvdmVyZWRJY29uOiB0cnVlLFxuICAgICAgICBpc09wZW46IHRydWVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnaG92ZXJJblRleHQnOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzdGF0ZSksIHt9LCB7XG4gICAgICAgIGhvdmVyZWRUZXh0OiB0cnVlLFxuICAgICAgICBpc09wZW46IHRydWVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnaG92ZXJPdXRJY29uJzpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgc3RhdGUpLCB7fSwge1xuICAgICAgICBob3ZlcmVkSWNvbjogZmFsc2VcbiAgICAgIH0sICFzdGF0ZS5ob3ZlcmVkVGV4dCA/IHtcbiAgICAgICAgaXNPcGVuOiBmYWxzZVxuICAgICAgfSA6IHt9KTtcblxuICAgIGNhc2UgJ2hvdmVyT3V0VGV4dCc6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIHN0YXRlKSwge30sIHtcbiAgICAgICAgaG92ZXJlZFRleHQ6IGZhbHNlXG4gICAgICB9LCAhc3RhdGUuaG92ZXJlZEljb24gPyB7XG4gICAgICAgIGlzT3BlbjogZmFsc2VcbiAgICAgIH0gOiB7fSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRvb2x0aXAoX3JlZikge1xuICB2YXIgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgbGluayA9IF9yZWYubGluayxcbiAgICAgIF9yZWYkaWRlYWxEaXJlY3Rpb24gPSBfcmVmLmlkZWFsRGlyZWN0aW9uLFxuICAgICAgaWRlYWxEaXJlY3Rpb24gPSBfcmVmJGlkZWFsRGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZG93bicgOiBfcmVmJGlkZWFsRGlyZWN0aW9uLFxuICAgICAgaW5saW5lID0gX3JlZi5pbmxpbmUsXG4gICAgICB0ZXh0ID0gX3JlZi50ZXh0O1xuXG4gIHZhciBfUmVhY3QkdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIocmVkdWNlciwgaW5pdGlhbFN0YXRlKSxcbiAgICAgIF9SZWFjdCR1c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF9SZWFjdCR1c2VSZWR1Y2VyLCAyKSxcbiAgICAgIHN0YXRlID0gX1JlYWN0JHVzZVJlZHVjZXIyWzBdLFxuICAgICAgZGlzcGF0Y2ggPSBfUmVhY3QkdXNlUmVkdWNlcjJbMV07XG5cbiAgdmFyIGlzT3BlbiA9IHN0YXRlLmlzT3BlbjtcbiAgdmFyIGNoaWxkUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgYW5jaG9yID0gY2hpbGRSZWYuY3VycmVudDtcblxuICB2YXIgaGFuZGxlSWNvbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVJY29uTW91c2VFbnRlcigpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnaG92ZXJJbkljb24nXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUljb25Nb3VzZUxlYXZlID0gZnVuY3Rpb24gaGFuZGxlSWNvbk1vdXNlTGVhdmUoKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdob3Zlck91dEljb24nXG4gICAgICB9KTtcbiAgICB9LCBUSU1FT1VUKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlVGV4dE1vdXNlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVUZXh0TW91c2VFbnRlcigpIHtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnaG92ZXJJblRleHQnXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVRleHRNb3VzZUxlYXZlID0gZnVuY3Rpb24gaGFuZGxlVGV4dE1vdXNlTGVhdmUoKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdob3Zlck91dFRleHQnXG4gICAgICB9KTtcbiAgICB9LCBUSU1FT1VUKTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgZGlzcGxheTogaW5saW5lID8gJ2lubGluZUJsb2NrJyA6ICdibG9jaydcbiAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgXCJhcmlhLWxhYmVsXCI6IHRleHQsXG4gICAgcmVmOiBjaGlsZFJlZixcbiAgICBvbkZvY3VzOiBoYW5kbGVJY29uTW91c2VFbnRlcixcbiAgICBvbkJsdXI6IGhhbmRsZUljb25Nb3VzZUxlYXZlLFxuICAgIG9uTW91c2VFbnRlcjogaGFuZGxlSWNvbk1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVJY29uTW91c2VMZWF2ZVxuICB9LCBjaGlsZHJlbiksIGlzT3BlbiAmJiAhIWFuY2hvciAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMYXllciwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29udHJvbGxlciwge1xuICAgIGFuY2hvcjogYW5jaG9yLFxuICAgIGNhcmV0OiBmYWxzZSxcbiAgICBiZ0NvbG9yOiBcImRhcmtHcmF5XCIsXG4gICAgYm9yZGVyOiBmYWxzZSxcbiAgICBpZGVhbERpcmVjdGlvbjogaWRlYWxEaXJlY3Rpb24sXG4gICAgb25EaXNtaXNzOiBub29wLFxuICAgIHBvc2l0aW9uUmVsYXRpdmVUb0FuY2hvcjogZmFsc2UsXG4gICAgcm91bmRpbmc6IDIsXG4gICAgc2l6ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBtYXhXaWR0aDogMTgwLFxuICAgIHBhZGRpbmc6IDIsXG4gICAgb25CbHVyOiBsaW5rID8gaGFuZGxlVGV4dE1vdXNlTGVhdmUgOiB1bmRlZmluZWQsXG4gICAgb25Gb2N1czogbGluayA/IGhhbmRsZVRleHRNb3VzZUVudGVyIDogdW5kZWZpbmVkLFxuICAgIG9uTW91c2VFbnRlcjogbGluayA/IGhhbmRsZVRleHRNb3VzZUVudGVyIDogdW5kZWZpbmVkLFxuICAgIG9uTW91c2VMZWF2ZTogbGluayA/IGhhbmRsZVRleHRNb3VzZUxlYXZlIDogdW5kZWZpbmVkLFxuICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgIHRhYkluZGV4OiAwXG4gIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRleHQsIHtcbiAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgIHNpemU6IFwic21cIlxuICB9LCB0ZXh0KSwgbGluayAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICBtYXJnaW5Ub3A6IDFcbiAgfSwgbGluaykpKSkpO1xufVxuXG52YXIgc3R5bGVzJHggPSB7XCJ2aWRlb1wiOlwiaHdhIGtWYyBNSXcgTDRFXCIsXCJwbGF5ZXJcIjpcImlDTSBYaUcgTDRFXCIsXCJwbGF5aGVhZFwiOlwiUUNIIF9PMSBnanogTDRFIEJHN1wiLFwiY29udHJvbHNcIjpcImhvRiBNSXcgX08xIGdqeiBvak4gUnltIHA2ViB3WVIgaEEtXCJ9O1xuXG52YXIgVmlkZW9QbGF5aGVhZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFZpZGVvUGxheWhlYWQsIF9SZWFjdCRQdXJlQ29tcG9uZW50KTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFZpZGVvUGxheWhlYWQpO1xuXG4gIGZ1bmN0aW9uIFZpZGVvUGxheWhlYWQoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZGVvUGxheWhlYWQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KGFyZ3MpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwbGF5aGVhZFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0YXRlXCIsIHtcbiAgICAgIHNlZWtpbmc6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0UGxheWhlYWRSZWZcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMucGxheWhlYWQgPSByZWY7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2Vla1wiLCBmdW5jdGlvbiAoY2xpZW50WCkge1xuICAgICAgaWYgKF90aGlzLnBsYXloZWFkKSB7XG4gICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wcy5kdXJhdGlvbixcbiAgICAgICAgICAgIHNlZWsgPSBfdGhpcyRwcm9wcy5zZWVrO1xuXG4gICAgICAgIHZhciBfdGhpcyRwbGF5aGVhZCRnZXRCb3UgPSBfdGhpcy5wbGF5aGVhZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIGxlZnQgPSBfdGhpcyRwbGF5aGVhZCRnZXRCb3UubGVmdCxcbiAgICAgICAgICAgIHdpZHRoID0gX3RoaXMkcGxheWhlYWQkZ2V0Qm91LndpZHRoO1xuXG4gICAgICAgIHZhciBwZXJjZW50ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oKGNsaWVudFggLSBsZWZ0KSAvIHdpZHRoLCAxKSk7XG4gICAgICAgIHZhciBuZXdUaW1lID0gcGVyY2VudCAqIGR1cmF0aW9uO1xuICAgICAgICBzZWVrKG5ld1RpbWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0b3BDbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVNb3VzZURvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIG9uUGxheWhlYWREb3duID0gX3RoaXMucHJvcHMub25QbGF5aGVhZERvd247XG4gICAgICBvblBsYXloZWFkRG93bihldmVudCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2Vla2luZzogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnNlZWsoZXZlbnQuY2xpZW50WCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlTW91c2VMZWF2ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvblBsYXloZWFkVXAgPSBfdGhpcy5wcm9wcy5vblBsYXloZWFkVXA7XG4gICAgICB2YXIgc2Vla2luZyA9IF90aGlzLnN0YXRlLnNlZWtpbmc7IC8vIElmIHRoZSB1c2VyIGlzIHNlZWtpbmcgYW5kIG1vdXNlIGxlYXZlcyBwbGF5aGVhZCB0aGVuIGVuZCB0aGUgc2Vla1xuXG4gICAgICBpZiAoc2Vla2luZykge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2Vla2luZzogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgb25QbGF5aGVhZFVwKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVNb3VzZU1vdmVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHNlZWtpbmcgPSBfdGhpcy5zdGF0ZS5zZWVraW5nO1xuXG4gICAgICBpZiAoc2Vla2luZykge1xuICAgICAgICBfdGhpcy5zZWVrKGV2ZW50LmNsaWVudFgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZU1vdXNlVXBcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25QbGF5aGVhZFVwID0gX3RoaXMucHJvcHMub25QbGF5aGVhZFVwO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlZWtpbmc6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgb25QbGF5aGVhZFVwKGV2ZW50KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWaWRlb1BsYXloZWFkLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY3VycmVudFRpbWUgPSBfdGhpcyRwcm9wczIuY3VycmVudFRpbWUsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczIuZHVyYXRpb247XG4gICAgICB2YXIgd2lkdGggPSBcIlwiLmNvbmNhdChNYXRoLmZsb29yKGN1cnJlbnRUaW1lICogMTAwMDAgLyBkdXJhdGlvbikgLyAxMDAsIFwiJVwiKTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGZsZXg6IFwiZ3Jvd1wiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBoZWlnaHQ6IDE2XG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgIFwiYXJpYS12YWx1ZW1heFwiOiBkdXJhdGlvbixcbiAgICAgICAgXCJhcmlhLXZhbHVlbWluXCI6IFwiMFwiLFxuICAgICAgICBcImFyaWEtdmFsdWVub3dcIjogY3VycmVudFRpbWUsXG4gICAgICAgIGNsYXNzTmFtZTogc3R5bGVzJHgucGxheWhlYWQsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuc3RvcENsaWNrLFxuICAgICAgICBvbktleVByZXNzOiB0aGlzLnN0b3BDbGljayxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZU1vdmU6IHRoaXMuaGFuZGxlTW91c2VNb3ZlLFxuICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcCxcbiAgICAgICAgcmVmOiB0aGlzLnNldFBsYXloZWFkUmVmLFxuICAgICAgICByb2xlOiBcInByb2dyZXNzYmFyXCIsXG4gICAgICAgIHRhYkluZGV4OiBcIi0xXCJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBsZWZ0OiB0cnVlLFxuICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgY29sb3I6IFwibGlnaHRHcmF5XCIsXG4gICAgICAgIHJvdW5kaW5nOiAyLFxuICAgICAgICBoZWlnaHQ6IDRcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICByb3VuZGluZzogMixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgd2lkdGg6IHdpZHRoXG4gICAgICB9KSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICByb3VuZGluZzogMixcbiAgICAgICAgaGVpZ2h0OiA0LFxuICAgICAgICBkYW5nZXJvdXNseVNldElubGluZVN0eWxlOiB7XG4gICAgICAgICAgX19zdHlsZToge1xuICAgICAgICAgICAgbGVmdDogd2lkdGhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICByb3VuZGluZzogXCJjaXJjbGVcIixcbiAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICBoZWlnaHQ6IDE2LFxuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBtYXJnaW5MZWZ0OiAtMixcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbmxpbmVTdHlsZToge1xuICAgICAgICAgIF9fc3R5bGU6IHtcbiAgICAgICAgICAgIG1hcmdpblRvcDogLTZcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pKSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaWRlb1BsYXloZWFkO1xufShQdXJlQ29tcG9uZW50KTtcblxuX2RlZmluZVByb3BlcnR5KFZpZGVvUGxheWhlYWQsIFwicHJvcFR5cGVzXCIsIHtcbiAgY3VycmVudFRpbWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgb25QbGF5aGVhZERvd246IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUGxheWhlYWRVcDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgc2VlazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufSk7XG5cbnZhciBmdWxsc2NyZWVuRW5hYmxlZCA9IGZ1bmN0aW9uIGZ1bGxzY3JlZW5FbmFibGVkKCkge1xuICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVuYWJsZWQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVuYWJsZWQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVuYWJsZWQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZDtcbn07XG5cbnZhciB0aW1lVG9TdHJpbmcgPSBmdW5jdGlvbiB0aW1lVG9TdHJpbmcodGltZSkge1xuICB2YXIgcm91bmRlZCA9IE1hdGguZmxvb3IodGltZSB8fCAwKTtcbiAgdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHJvdW5kZWQgLyA2MCk7XG4gIHZhciBzZWNvbmRzID0gcm91bmRlZCAtIG1pbnV0ZXMgKiA2MDtcbiAgdmFyIG1pbnV0ZXNTdHIgPSBtaW51dGVzIDwgMTAgPyBcIjBcIi5jb25jYXQobWludXRlcykgOiBtaW51dGVzO1xuICB2YXIgc2Vjb25kc1N0ciA9IHNlY29uZHMgPCAxMCA/IFwiMFwiLmNvbmNhdChzZWNvbmRzKSA6IHNlY29uZHM7XG4gIHJldHVybiBcIlwiLmNvbmNhdChtaW51dGVzU3RyLCBcIjpcIikuY29uY2F0KHNlY29uZHNTdHIpO1xufTtcblxudmFyIFZpZGVvQ29udHJvbHMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFZpZGVvQ29udHJvbHMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVmlkZW9Db250cm9scyk7XG5cbiAgZnVuY3Rpb24gVmlkZW9Db250cm9scygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlkZW9Db250cm9scyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2VcIiwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudCA9IF9yZWYuZXZlbnQ7XG4gICAgICB2YXIgb25GdWxsc2NyZWVuQ2hhbmdlID0gX3RoaXMucHJvcHMub25GdWxsc2NyZWVuQ2hhbmdlO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBvbkZ1bGxzY3JlZW5DaGFuZ2UoKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQbGF5aW5nQ2hhbmdlXCIsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZjIuZXZlbnQ7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBwbGF5aW5nID0gX3RoaXMkcHJvcHMucGxheWluZyxcbiAgICAgICAgICBvblBhdXNlID0gX3RoaXMkcHJvcHMub25QYXVzZSxcbiAgICAgICAgICBvblBsYXkgPSBfdGhpcyRwcm9wcy5vblBsYXk7XG5cbiAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgIG9uUGF1c2UoZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25QbGF5KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVWb2x1bWVDaGFuZ2VcIiwgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgZXZlbnQgPSBfcmVmMy5ldmVudDtcbiAgICAgIHZhciBvblZvbHVtZUNoYW5nZSA9IF90aGlzLnByb3BzLm9uVm9sdW1lQ2hhbmdlO1xuICAgICAgb25Wb2x1bWVDaGFuZ2UoZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFZpZGVvQ29udHJvbHMsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TWF4aW1pemVMYWJlbCA9IF90aGlzJHByb3BzMi5hY2Nlc3NpYmlsaXR5TWF4aW1pemVMYWJlbCxcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TWluaW1pemVMYWJlbCA9IF90aGlzJHByb3BzMi5hY2Nlc3NpYmlsaXR5TWluaW1pemVMYWJlbCxcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TXV0ZUxhYmVsID0gX3RoaXMkcHJvcHMyLmFjY2Vzc2liaWxpdHlNdXRlTGFiZWwsXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVBhdXNlTGFiZWwgPSBfdGhpcyRwcm9wczIuYWNjZXNzaWJpbGl0eVBhdXNlTGFiZWwsXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVBsYXlMYWJlbCA9IF90aGlzJHByb3BzMi5hY2Nlc3NpYmlsaXR5UGxheUxhYmVsLFxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlVbm11dGVMYWJlbCA9IF90aGlzJHByb3BzMi5hY2Nlc3NpYmlsaXR5VW5tdXRlTGFiZWwsXG4gICAgICAgICAgY3VycmVudFRpbWUgPSBfdGhpcyRwcm9wczIuY3VycmVudFRpbWUsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRwcm9wczIuZHVyYXRpb24sXG4gICAgICAgICAgZnVsbHNjcmVlbiA9IF90aGlzJHByb3BzMi5mdWxsc2NyZWVuLFxuICAgICAgICAgIG9uUGxheWhlYWREb3duID0gX3RoaXMkcHJvcHMyLm9uUGxheWhlYWREb3duLFxuICAgICAgICAgIG9uUGxheWhlYWRVcCA9IF90aGlzJHByb3BzMi5vblBsYXloZWFkVXAsXG4gICAgICAgICAgcGxheWluZyA9IF90aGlzJHByb3BzMi5wbGF5aW5nLFxuICAgICAgICAgIHNlZWsgPSBfdGhpcyRwcm9wczIuc2VlayxcbiAgICAgICAgICB2b2x1bWUgPSBfdGhpcyRwcm9wczIudm9sdW1lO1xuICAgICAgdmFyIG11dGVkID0gdm9sdW1lID09PSAwO1xuICAgICAgdmFyIHNob3dGdWxsc2NyZWVuQnV0dG9uID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIWZ1bGxzY3JlZW5FbmFibGVkKCk7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyR4LmNvbnRyb2xzXG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgICAgcGFkZGluZzogMlxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVG91Y2hhYmxlLCB7XG4gICAgICAgIG9uVG91Y2g6IHRoaXMuaGFuZGxlUGxheWluZ0NoYW5nZSxcbiAgICAgICAgZnVsbFdpZHRoOiBmYWxzZVxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IHBsYXlpbmcgPyBhY2Nlc3NpYmlsaXR5UGF1c2VMYWJlbCA6IGFjY2Vzc2liaWxpdHlQbGF5TGFiZWwsXG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIGljb246IHBsYXlpbmcgPyAncGF1c2UnIDogJ3BsYXknLFxuICAgICAgICBzaXplOiAyMFxuICAgICAgfSkpKSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIHdpZHRoOiA1MCxcbiAgICAgICAgcGFkZGluZzogMlxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGV4dCwge1xuICAgICAgICBhbGlnbjogXCJyaWdodFwiLFxuICAgICAgICBjb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJub3JtYWxcIixcbiAgICAgICAgc2l6ZTogXCJzbVwiXG4gICAgICB9LCB0aW1lVG9TdHJpbmcoY3VycmVudFRpbWUpKSksIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEJveCwge1xuICAgICAgICBwYWRkaW5nOiAyLFxuICAgICAgICBmbGV4OiBcImdyb3dcIlxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVmlkZW9QbGF5aGVhZCwge1xuICAgICAgICBjdXJyZW50VGltZTogY3VycmVudFRpbWUsXG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgb25QbGF5aGVhZERvd246IG9uUGxheWhlYWREb3duLFxuICAgICAgICBvblBsYXloZWFkVXA6IG9uUGxheWhlYWRVcCxcbiAgICAgICAgc2Vlazogc2Vla1xuICAgICAgfSkpLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgICAgd2lkdGg6IDUwLFxuICAgICAgICBwYWRkaW5nOiAyXG4gICAgICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChUZXh0LCB7XG4gICAgICAgIGFsaWduOiBcInJpZ2h0XCIsXG4gICAgICAgIGNvbG9yOiBcIndoaXRlXCIsXG4gICAgICAgIG92ZXJmbG93OiBcIm5vcm1hbFwiLFxuICAgICAgICBzaXplOiBcInNtXCJcbiAgICAgIH0sIHRpbWVUb1N0cmluZyhkdXJhdGlvbikpKSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIHBhZGRpbmc6IDJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRvdWNoYWJsZSwge1xuICAgICAgICBvblRvdWNoOiB0aGlzLmhhbmRsZVZvbHVtZUNoYW5nZSxcbiAgICAgICAgZnVsbFdpZHRoOiBmYWxzZVxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSWNvbiwge1xuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw6IG11dGVkID8gYWNjZXNzaWJpbGl0eVVubXV0ZUxhYmVsIDogYWNjZXNzaWJpbGl0eU11dGVMYWJlbCxcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgaWNvbjogbXV0ZWQgPyAnbXV0ZScgOiAnc291bmQnLFxuICAgICAgICBzaXplOiAyMFxuICAgICAgfSkpKSwgc2hvd0Z1bGxzY3JlZW5CdXR0b24gJiYgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQm94LCB7XG4gICAgICAgIHBhZGRpbmc6IDJcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFRvdWNoYWJsZSwge1xuICAgICAgICBvblRvdWNoOiB0aGlzLmhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UsXG4gICAgICAgIGZ1bGxXaWR0aDogZmFsc2VcbiAgICAgIH0sIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEljb24sIHtcbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsOiBmdWxsc2NyZWVuID8gYWNjZXNzaWJpbGl0eU1pbmltaXplTGFiZWwgOiBhY2Nlc3NpYmlsaXR5TWF4aW1pemVMYWJlbCxcbiAgICAgICAgY29sb3I6IFwid2hpdGVcIixcbiAgICAgICAgaWNvbjogZnVsbHNjcmVlbiA/ICdtaW5pbWl6ZScgOiAnbWF4aW1pemUnLFxuICAgICAgICBzaXplOiAyMFxuICAgICAgfSkpKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZGVvQ29udHJvbHM7XG59KENvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWRlb0NvbnRyb2xzLCBcInByb3BUeXBlc1wiLCB7XG4gIGFjY2Vzc2liaWxpdHlNYXhpbWl6ZUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFjY2Vzc2liaWxpdHlNaW5pbWl6ZUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFjY2Vzc2liaWxpdHlNdXRlTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgYWNjZXNzaWJpbGl0eVBhdXNlTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgYWNjZXNzaWJpbGl0eVBsYXlMYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBhY2Nlc3NpYmlsaXR5VW5tdXRlTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY3VycmVudFRpbWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgZnVsbHNjcmVlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgb25GdWxsc2NyZWVuQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBhdXNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBsYXk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uUGxheWhlYWREb3duOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBsYXloZWFkVXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uVm9sdW1lQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBwbGF5aW5nOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuICBzZWVrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB2b2x1bWU6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZFxufSk7XG5cbi8vIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGZ1bGxzY3JlZW4gYW5kIHZlbmRvciBwcmVmaXhlcyBzZWVcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GdWxsc2NyZWVuX0FQSVxudmFyIHJlcXVlc3RGdWxsc2NyZWVuID0gZnVuY3Rpb24gcmVxdWVzdEZ1bGxzY3JlZW4oZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTsgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgfSBlbHNlIGlmIChlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgICBlbGVtZW50LndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKCk7IC8vICRGbG93SXNzdWUgLSB2ZW5kb3IgcHJlZml4IG1pc3NpbmcgZnJvbSBGbG93XG4gIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgIC8vICRGbG93SXNzdWUgLSB2ZW5kb3IgcHJlZml4IG1pc3NpbmcgZnJvbSBGbG93XG4gICAgZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpOyAvLyAkRmxvd0lzc3VlIC0gdmVuZG9yIHByZWZpeCBtaXNzaW5nIGZyb20gRmxvd1xuICB9IGVsc2UgaWYgKGVsZW1lbnQubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgIC8vICRGbG93SXNzdWUgLSB2ZW5kb3IgcHJlZml4IG1pc3NpbmcgZnJvbSBGbG93XG4gICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gIH1cbn07XG5cbnZhciBleGl0RnVsbHNjcmVlbiA9IGZ1bmN0aW9uIGV4aXRGdWxsc2NyZWVuKCkge1xuICBpZiAoZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4pIHtcbiAgICBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpOyAvLyAkRmxvd0lzc3VlIC0gdmVuZG9yIHByZWZpeCBtaXNzaW5nIGZyb20gRmxvd1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgICBkb2N1bWVudC53ZWJraXRFeGl0RnVsbHNjcmVlbigpOyAvLyAkRmxvd0lzc3VlIC0gdmVuZG9yIHByZWZpeCBtaXNzaW5nIGZyb20gRmxvd1xuICB9IGVsc2UgaWYgKGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4pIHtcbiAgICAvLyAkRmxvd0lzc3VlIC0gdmVuZG9yIHByZWZpeCBtaXNzaW5nIGZyb20gRmxvd1xuICAgIGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTsgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgfSBlbHNlIGlmIChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSB7XG4gICAgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgICBkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKCk7XG4gIH1cbn07IC8vIE5vcm1hbGx5IGRvY3VtZW50LmZ1bGxzY3JlZW4gc3VmZmljZXMgaGVyZSBhcyBhIGZsYWcsIGJ1dCBJRTExIGRvZXMgbm90XG4vLyBoYXZlIGEgdmVuZG9yIHNwZWNpZmljIHZlcnNpb24gc28gd2UgbXVzdCBpbnN0ZWFkIHVzZSB0aGUgYWN0dWFsIGVsZW1lbnRcblxuXG52YXIgaXNGdWxsc2NyZWVuID0gZnVuY3Rpb24gaXNGdWxsc2NyZWVuKCkge1xuICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgfHwgLy8gJEZsb3dJc3N1ZSAtIHZlbmRvciBwcmVmaXggbWlzc2luZyBmcm9tIEZsb3dcbiAgZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcbn07XG5cbnZhciBhZGRGdWxsc2NyZWVuRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEZ1bGxzY3JlZW5FdmVudExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ01TRnVsbHNjcmVlbkNoYW5nZScsIGxpc3RlbmVyKTtcbn07XG5cbnZhciByZW1vdmVGdWxsc2NyZWVuRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUZ1bGxzY3JlZW5FdmVudExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vemZ1bGxzY3JlZW5jaGFuZ2UnLCBsaXN0ZW5lcik7XG4gIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ01TRnVsbHNjcmVlbkNoYW5nZScsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBpc05ld1NvdXJjZSA9IGZ1bmN0aW9uIGlzTmV3U291cmNlKG9sZFNvdXJjZSwgbmV3U291cmNlKSB7XG4gIGlmIChfdHlwZW9mKG9sZFNvdXJjZSkgIT09IF90eXBlb2YobmV3U291cmNlKSkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgdHlwZSBjaGFuZ2VkIGZyb20gc3RyaW5nIHRvIEFycmF5XG4gICAgLy8gb3IgdmljZSB2ZXJzYSwgd2UgaGF2ZSBhIG5ldyBzb3VyY2VcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG5ld1NvdXJjZSkpIHtcbiAgICBpZiAob2xkU291cmNlLmxlbmd0aCAhPT0gbmV3U291cmNlLmxlbmd0aCkge1xuICAgICAgLy8gSWYgdGhlIHNvdXJjZXMgYXJlIGJvdGggYW4gQXJyYXksIGFuZCB0aGUgbGVuZ3Roc1xuICAgICAgLy8gZG8gbm90IG1hdGNoIHdlIGV2YWx1YXRlIGFzIGEgbmV3IHNvdXJjZVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBJZiB0aGUgc291cmNlcyBhcmUgYm90aCBhbiBBcnJheSBhbmQgdGhlIHNhbWUgbGVuZ3RoLFxuICAgIC8vIHZlcmlmeSBldmVyeSBlbGVtZW50IHN0YXllZCB0aGUgc2FtZVxuXG5cbiAgICByZXR1cm4gbmV3U291cmNlLnNvbWUoZnVuY3Rpb24gKHNvdXJjZSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiAhQXJyYXkuaXNBcnJheShvbGRTb3VyY2UpIHx8IHNvdXJjZS50eXBlICE9PSBvbGRTb3VyY2VbaW5kZXhdLnR5cGUgfHwgc291cmNlLnNyYyAhPT0gb2xkU291cmNlW2luZGV4XS5zcmM7XG4gICAgfSk7XG4gIH0gLy8gSWYgdGhlIHNvdXJjZXMgYXJlIGJvdGggYSBzdHJpbmcsIHNpbXBseSBjb21wYXJlXG4gIC8vIHRoZSBuZXcgd2l0aCB0aGUgb2xkXG5cblxuICByZXR1cm4gbmV3U291cmNlICE9PSBvbGRTb3VyY2U7XG59O1xuXG52YXIgVmlkZW8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaWRlbywgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoVmlkZW8pO1xuXG4gIGZ1bmN0aW9uIFZpZGVvKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWaWRlbyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbC5hcHBseShfc3VwZXIsIFt0aGlzXS5jb25jYXQoYXJncykpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInZpZGVvXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicGxheWVyXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3RhdGVcIiwge1xuICAgICAgY3VycmVudFRpbWU6IDAsXG4gICAgICBkdXJhdGlvbjogMCxcbiAgICAgIGZ1bGxzY3JlZW46IGZhbHNlXG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2V0UGxheWVyUmVmXCIsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLnBsYXllciA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRWaWRlb1JlZlwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy52aWRlbyA9IHJlZjtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRQbGF5YmFja1JhdGVcIiwgZnVuY3Rpb24gKHBsYXliYWNrUmF0ZSkge1xuICAgICAgaWYgKF90aGlzLnZpZGVvKSB7XG4gICAgICAgIF90aGlzLnZpZGVvLnBsYXliYWNrUmF0ZSA9IHBsYXliYWNrUmF0ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJzZXRWb2x1bWVcIiwgZnVuY3Rpb24gKHZvbHVtZSkge1xuICAgICAgaWYgKF90aGlzLnZpZGVvKSB7XG4gICAgICAgIF90aGlzLnZpZGVvLnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy52aWRlbyAmJiBfdGhpcy52aWRlby5sb2FkKSB7XG4gICAgICAgIF90aGlzLnZpZGVvLmxvYWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwYXVzZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXMudmlkZW8pIHtcbiAgICAgICAgX3RoaXMudmlkZW8ucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJwbGF5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy52aWRlbykge1xuICAgICAgICBfdGhpcy52aWRlby5wbGF5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic2Vla1wiLCBmdW5jdGlvbiAodGltZSkge1xuICAgICAgaWYgKF90aGlzLnZpZGVvKSB7XG4gICAgICAgIF90aGlzLnZpZGVvLmN1cnJlbnRUaW1lID0gdGltZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ0b2dnbGVGdWxsc2NyZWVuXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Z1bGxzY3JlZW4oKSkge1xuICAgICAgICBleGl0RnVsbHNjcmVlbigpO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgcmVxdWVzdEZ1bGxzY3JlZW4oX3RoaXMucGxheWVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVDYW5QbGF5XCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uUmVhZHkgPSBfdGhpcy5wcm9wcy5vblJlYWR5O1xuXG4gICAgICBpZiAob25SZWFkeSkge1xuICAgICAgICBvblJlYWR5KHtcbiAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRHVyYXRpb25DaGFuZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25EdXJhdGlvbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uRHVyYXRpb25DaGFuZ2U7XG4gICAgICB2YXIgZHVyYXRpb24gPSBfdGhpcy52aWRlbyAmJiBfdGhpcy52aWRlby5kdXJhdGlvbiB8fCAwO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICAgICAgfSk7XG5cbiAgICAgIGlmIChvbkR1cmF0aW9uQ2hhbmdlKSB7XG4gICAgICAgIG9uRHVyYXRpb25DaGFuZ2Uoe1xuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaGFuZGxlRW5kZWRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25FbmRlZCA9IF90aGlzLnByb3BzLm9uRW5kZWQ7XG5cbiAgICAgIGlmIChvbkVuZGVkKSB7XG4gICAgICAgIG9uRW5kZWQoe1xuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uRnVsbHNjcmVlbkNoYW5nZSA9IF90aGlzLnByb3BzLm9uRnVsbHNjcmVlbkNoYW5nZTtcbiAgICAgIHZhciBmdWxsc2NyZWVuID0gISFpc0Z1bGxzY3JlZW4oKTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmdWxsc2NyZWVuOiBmdWxsc2NyZWVuXG4gICAgICB9KTtcblxuICAgICAgaWYgKG9uRnVsbHNjcmVlbkNoYW5nZSkge1xuICAgICAgICBvbkZ1bGxzY3JlZW5DaGFuZ2Uoe1xuICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICBmdWxsc2NyZWVuOiBmdWxsc2NyZWVuXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVBsYXlcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25QbGF5ID0gX3RoaXMucHJvcHMub25QbGF5O1xuXG4gICAgICBpZiAob25QbGF5KSB7XG4gICAgICAgIG9uUGxheSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVBsYXloZWFkRG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvblBsYXloZWFkRG93biA9IF90aGlzLnByb3BzLm9uUGxheWhlYWREb3duO1xuXG4gICAgICBpZiAob25QbGF5aGVhZERvd24pIHtcbiAgICAgICAgb25QbGF5aGVhZERvd24oe1xuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQbGF5aGVhZFVwXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uUGxheWhlYWRVcCA9IF90aGlzLnByb3BzLm9uUGxheWhlYWRVcDtcblxuICAgICAgaWYgKG9uUGxheWhlYWRVcCkge1xuICAgICAgICBvblBsYXloZWFkVXAoe1xuICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJoYW5kbGVQYXVzZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvblBhdXNlID0gX3RoaXMucHJvcHMub25QYXVzZTtcblxuICAgICAgaWYgKG9uUGF1c2UpIHtcbiAgICAgICAgb25QYXVzZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVByb2dyZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIG9uTG9hZGVkQ2hhbmdlID0gX3RoaXMucHJvcHMub25Mb2FkZWRDaGFuZ2U7XG5cbiAgICAgIHZhciBfcmVmID0gX3RoaXMudmlkZW8gfHwge30sXG4gICAgICAgICAgYnVmZmVyZWQgPSBfcmVmLmJ1ZmZlcmVkO1xuXG4gICAgICB2YXIgbG9hZGVkID0gYnVmZmVyZWQgJiYgYnVmZmVyZWQubGVuZ3RoID4gMCA/IGJ1ZmZlcmVkLmVuZChidWZmZXJlZC5sZW5ndGggLSAxKSA6IDA7XG5cbiAgICAgIGlmIChvbkxvYWRlZENoYW5nZSkge1xuICAgICAgICBvbkxvYWRlZENoYW5nZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIGxvYWRlZDogbG9hZGVkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVNlZWtcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25TZWVrID0gX3RoaXMucHJvcHMub25TZWVrO1xuXG4gICAgICBpZiAob25TZWVrKSB7XG4gICAgICAgIG9uU2Vlayh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVRpbWVVcGRhdGVcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb25UaW1lQ2hhbmdlID0gX3RoaXMucHJvcHMub25UaW1lQ2hhbmdlO1xuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gX3RoaXMudmlkZW8gJiYgX3RoaXMudmlkZW8uY3VycmVudFRpbWUgfHwgMDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50VGltZTogY3VycmVudFRpbWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob25UaW1lQ2hhbmdlKSB7XG4gICAgICAgIG9uVGltZUNoYW5nZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHRpbWU6IGN1cnJlbnRUaW1lXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImhhbmRsZVZvbHVtZUNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvblZvbHVtZUNoYW5nZSA9IF90aGlzLnByb3BzLm9uVm9sdW1lQ2hhbmdlO1xuICAgICAgdmFyIG11dGVkID0gX3RoaXMudmlkZW8gJiYgX3RoaXMudmlkZW8ubXV0ZWQgfHwgZmFsc2U7XG5cbiAgICAgIGlmIChvblZvbHVtZUNoYW5nZSkge1xuICAgICAgICBvblZvbHVtZUNoYW5nZSh7XG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgIHZvbHVtZTogbXV0ZWQgPyAxIDogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWaWRlbywgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcblxuICAgIC8qKlxuICAgICAqIFJlYWN0IGxpZmVjeWNsZSBob29rcyBwZXJ0aW5lbnQgdG8gVmlkZW9cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXliYWNrUmF0ZSA9IF90aGlzJHByb3BzLnBsYXliYWNrUmF0ZSxcbiAgICAgICAgICBwbGF5aW5nID0gX3RoaXMkcHJvcHMucGxheWluZyxcbiAgICAgICAgICB2b2x1bWUgPSBfdGhpcyRwcm9wcy52b2x1bWU7IC8vIFNldCB1cCBldmVudCBsaXN0ZW5lcnMgdG8gY2F0Y2ggYmFja2Rvb3JzIGluIGZ1bGxzY3JlZW5cbiAgICAgIC8vIGNoYW5nZXMgc3VjaCBhcyB1c2luZyB0aGUgRVNDIGtleSB0byBleGl0XG5cbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFkZEZ1bGxzY3JlZW5FdmVudExpc3RlbmVyKHRoaXMuaGFuZGxlRnVsbHNjcmVlbkNoYW5nZSk7XG4gICAgICB9IC8vIExvYWQgdGhlIHZpZGVvIHRvIGh5ZHJhdGUgdGhlIERPTSBhZnRlciBhIHNlcnZlciByZW5kZXJcblxuXG4gICAgICB0aGlzLmxvYWQoKTsgLy8gU2V0IHRoZSBpbml0aWFsIHZvbHVtZVxuXG4gICAgICB0aGlzLnNldFZvbHVtZSh2b2x1bWUpOyAvLyBTZXQgdGhlIGluaXRpYWwgcGxheWJhY2sgcmF0ZVxuXG4gICAgICB0aGlzLnNldFBsYXliYWNrUmF0ZShwbGF5YmFja1JhdGUpOyAvLyBTaW11bGF0ZSBhbiBhdXRvcGxheSBlZmZlY3QgaWYgdGhlIGNvbXBvbmVudFxuXG4gICAgICBpZiAocGxheWluZykge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIC8vIElmIHRoZSB2aWRlbyBzb3VyY2UgY2hhbmdlZCwgcmVsb2FkIHRoZSB2aWRlb1xuICAgICAgaWYgKGlzTmV3U291cmNlKHByZXZQcm9wcy5zcmMsIHRoaXMucHJvcHMuc3JjKSkge1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgIH0gLy8gSWYgdGhlIHZvbHVtZSBjaGFuZ2VkLCBzZXQgdGhlIG5ldyB2b2x1bWVcblxuXG4gICAgICBpZiAocHJldlByb3BzLnZvbHVtZSAhPT0gdGhpcy5wcm9wcy52b2x1bWUpIHtcbiAgICAgICAgdGhpcy5zZXRWb2x1bWUodGhpcy5wcm9wcy52b2x1bWUpO1xuICAgICAgfSAvLyBJZiB0aGUgcGxheWJhY2sgcmF0ZSBjaGFuZ2VkLCBzZXQgdGhlIG5ldyByYXRlXG5cblxuICAgICAgaWYgKHByZXZQcm9wcy5wbGF5YmFja1JhdGUgIT09IHRoaXMucHJvcHMucGxheWJhY2tSYXRlKSB7XG4gICAgICAgIHRoaXMuc2V0UGxheWJhY2tSYXRlKHRoaXMucHJvcHMucGxheWJhY2tSYXRlKTtcbiAgICAgIH0gLy8gSWYgdGhlIHBsYXliYWNrIGNoYW5nZWQsIHBsYXkgb3IgcGF1c2UgdGhlIHZpZGVvXG5cblxuICAgICAgaWYgKHByZXZQcm9wcy5wbGF5aW5nICE9PSB0aGlzLnByb3BzLnBsYXlpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucGxheWluZykge1xuICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHJlbW92ZUZ1bGxzY3JlZW5FdmVudExpc3RlbmVyKHRoaXMuaGFuZGxlRnVsbHNjcmVlbkNoYW5nZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERPTSByZWZlcmVuY2UgaG91c2VrZWVwaW5nIHRoYXQgaXMgbmVlZGVkIGZvciBmdW5jdGlvbmFsaXR5XG4gICAgICovXG4gICAgLy8gVGhlIHBsYXllciBlbGVtZW50IGVuY2Fwc3VsYXRlcyB0aGUgYWN0dWFsIHZpZGVvIERPTVxuICAgIC8vIGVsZW1lbnQgYXMgd2VsbCBhcyB0aGUgY29udHJvbHMgdG8gYnJpbmcgYm90aCBmdWxsc2NyZWVuXG5cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXNwZWN0UmF0aW8gPSBfdGhpcyRwcm9wczIuYXNwZWN0UmF0aW8sXG4gICAgICAgICAgY2FwdGlvbnMgPSBfdGhpcyRwcm9wczIuY2FwdGlvbnMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgbG9vcCA9IF90aGlzJHByb3BzMi5sb29wLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wczIucGxheWluZyxcbiAgICAgICAgICBwbGF5c0lubGluZSA9IF90aGlzJHByb3BzMi5wbGF5c0lubGluZSxcbiAgICAgICAgICBwb3N0ZXIgPSBfdGhpcyRwcm9wczIucG9zdGVyLFxuICAgICAgICAgIHByZWxvYWQgPSBfdGhpcyRwcm9wczIucHJlbG9hZCxcbiAgICAgICAgICBzcmMgPSBfdGhpcyRwcm9wczIuc3JjLFxuICAgICAgICAgIHZvbHVtZSA9IF90aGlzJHByb3BzMi52b2x1bWU7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGN1cnJlbnRUaW1lID0gX3RoaXMkc3RhdGUuY3VycmVudFRpbWUsXG4gICAgICAgICAgZHVyYXRpb24gPSBfdGhpcyRzdGF0ZS5kdXJhdGlvbixcbiAgICAgICAgICBmdWxsc2NyZWVuID0gX3RoaXMkc3RhdGUuZnVsbHNjcmVlbjtcbiAgICAgIHZhciBwYWRkaW5nQm90dG9tID0gZnVsbHNjcmVlbiAmJiAnMCcgfHwgXCJcIi5jb25jYXQoMSAvIGFzcGVjdFJhdGlvICogMTAwLCBcIiVcIik7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICByZWY6IHRoaXMuc2V0UGxheWVyUmVmLFxuICAgICAgICBjbGFzc05hbWU6IHN0eWxlcyR4LnBsYXllcixcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBwYWRkaW5nQm90dG9tOiBwYWRkaW5nQm90dG9tLFxuICAgICAgICAgIGhlaWdodDogZnVsbHNjcmVlbiA/ICcxMDAlJyA6IDBcbiAgICAgICAgfVxuICAgICAgfSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiLCB7XG4gICAgICAgIGF1dG9QbGF5OiBwbGF5aW5nLFxuICAgICAgICBsb29wOiBsb29wLFxuICAgICAgICBtdXRlZDogdm9sdW1lID09PSAwLFxuICAgICAgICBwbGF5c0lubGluZTogcGxheXNJbmxpbmUsXG4gICAgICAgIHBvc3RlcjogcG9zdGVyLFxuICAgICAgICBwcmVsb2FkOiBwcmVsb2FkLFxuICAgICAgICBzcmM6IHR5cGVvZiBzcmMgPT09ICdzdHJpbmcnID8gc3JjIDogdW5kZWZpbmVkLFxuICAgICAgICByZWY6IHRoaXMuc2V0VmlkZW9SZWYsXG4gICAgICAgIGNsYXNzTmFtZTogc3R5bGVzJHgudmlkZW8sXG4gICAgICAgIG9uQ2FuUGxheTogdGhpcy5oYW5kbGVDYW5QbGF5LFxuICAgICAgICBvbkR1cmF0aW9uQ2hhbmdlOiB0aGlzLmhhbmRsZUR1cmF0aW9uQ2hhbmdlLFxuICAgICAgICBvbkVuZGVkOiB0aGlzLmhhbmRsZUVuZGVkLFxuICAgICAgICBvblNlZWtlZDogdGhpcy5oYW5kbGVTZWVrLFxuICAgICAgICBvblRpbWVVcGRhdGU6IHRoaXMuaGFuZGxlVGltZVVwZGF0ZSxcbiAgICAgICAgb25Qcm9ncmVzczogdGhpcy5oYW5kbGVQcm9ncmVzc1xuICAgICAgfSwgQXJyYXkuaXNBcnJheShzcmMpICYmIHNyYy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJzb3VyY2VcIiwge1xuICAgICAgICAgIGtleTogc291cmNlLnNyYyxcbiAgICAgICAgICBzcmM6IHNvdXJjZS5zcmMsXG4gICAgICAgICAgdHlwZTogc291cmNlLnR5cGVcbiAgICAgICAgfSk7XG4gICAgICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoXCJ0cmFja1wiLCB7XG4gICAgICAgIGtpbmQ6IFwiY2FwdGlvbnNcIixcbiAgICAgICAgc3JjOiBjYXB0aW9uc1xuICAgICAgfSkpLCBjaGlsZHJlbiAmJiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChCb3gsIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiB0cnVlLFxuICAgICAgICBsZWZ0OiB0cnVlLFxuICAgICAgICBib3R0b206IHRydWUsXG4gICAgICAgIHJpZ2h0OiB0cnVlLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxuICAgICAgfSwgY2hpbGRyZW4pLCB0aGlzLnByb3BzLmNvbnRyb2xzICYmIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KFZpZGVvQ29udHJvbHMsIHtcbiAgICAgICAgYWNjZXNzaWJpbGl0eU1heGltaXplTGFiZWw6IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eU1heGltaXplTGFiZWwsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlNaW5pbWl6ZUxhYmVsOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlNaW5pbWl6ZUxhYmVsLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5TXV0ZUxhYmVsOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlNdXRlTGFiZWwsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlQYXVzZUxhYmVsOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlQYXVzZUxhYmVsLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5UGxheUxhYmVsOiB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlQbGF5TGFiZWwsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlVbm11dGVMYWJlbDogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5VW5tdXRlTGFiZWwsXG4gICAgICAgIGN1cnJlbnRUaW1lOiBjdXJyZW50VGltZSxcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBmdWxsc2NyZWVuOiBmdWxsc2NyZWVuLFxuICAgICAgICBvblBsYXk6IHRoaXMuaGFuZGxlUGxheSxcbiAgICAgICAgb25QbGF5aGVhZERvd246IHRoaXMuaGFuZGxlUGxheWhlYWREb3duLFxuICAgICAgICBvblBsYXloZWFkVXA6IHRoaXMuaGFuZGxlUGxheWhlYWRVcCxcbiAgICAgICAgb25QYXVzZTogdGhpcy5oYW5kbGVQYXVzZSxcbiAgICAgICAgb25GdWxsc2NyZWVuQ2hhbmdlOiB0aGlzLnRvZ2dsZUZ1bGxzY3JlZW4sXG4gICAgICAgIG9uVm9sdW1lQ2hhbmdlOiB0aGlzLmhhbmRsZVZvbHVtZUNoYW5nZSxcbiAgICAgICAgcGxheWluZzogcGxheWluZyxcbiAgICAgICAgc2VlazogdGhpcy5zZWVrLFxuICAgICAgICB2b2x1bWU6IHZvbHVtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaWRlbztcbn0oUHVyZUNvbXBvbmVudCk7XG5cbl9kZWZpbmVQcm9wZXJ0eShWaWRlbywgXCJwcm9wVHlwZXNcIiwge1xuICBhY2Nlc3NpYmlsaXR5TWF4aW1pemVMYWJlbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWNjZXNzaWJpbGl0eU1pbmltaXplTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjY2Vzc2liaWxpdHlNdXRlTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjY2Vzc2liaWxpdHlQYXVzZUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY2Nlc3NpYmlsaXR5UGxheUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY2Nlc3NpYmlsaXR5VW5tdXRlTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFzcGVjdFJhdGlvOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGNhcHRpb25zOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgY29udHJvbHM6IFByb3BUeXBlcy5ib29sLFxuICBsb29wOiBQcm9wVHlwZXMuYm9vbCxcbiAgb25EdXJhdGlvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uRW5kZWQ6IFByb3BUeXBlcy5mdW5jLFxuICBvbkZ1bGxzY3JlZW5DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBvbkxvYWRlZENoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUGxheTogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uUGF1c2U6IFByb3BUeXBlcy5mdW5jLFxuICBvblJlYWR5OiBQcm9wVHlwZXMuZnVuYyxcbiAgb25TZWVrOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25UaW1lQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25Wb2x1bWVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuICBwbGF5YmFja1JhdGU6IFByb3BUeXBlcy5udW1iZXIsXG4gIHBsYXlpbmc6IFByb3BUeXBlcy5ib29sLFxuICBwbGF5c0lubGluZTogUHJvcFR5cGVzLmJvb2wsXG4gIHBvc3RlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgcHJlbG9hZDogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdtZXRhZGF0YScsICdub25lJ10pLFxuICBzcmM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsndmlkZW8vbTN1OCcsICd2aWRlby9tcDQnLCAndmlkZW8vb2dnJ10pLmlzUmVxdWlyZWQsXG4gICAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWRcbiAgfSkpXSkuaXNSZXF1aXJlZCxcbiAgdm9sdW1lOiBQcm9wVHlwZXMubnVtYmVyXG59KTtcblxuX2RlZmluZVByb3BlcnR5KFZpZGVvLCBcImRlZmF1bHRQcm9wc1wiLCB7XG4gIHBsYXliYWNrUmF0ZTogMSxcbiAgcGxheWluZzogZmFsc2UsXG4gIHByZWxvYWQ6ICdhdXRvJyxcbiAgdm9sdW1lOiAxXG59KTtcblxuZXhwb3J0IHsgQXZhdGFyLCBBdmF0YXJQYWlyLCBCYWRnZSwgQm94LCBCdXR0b24sIENhcmQsIENoZWNrYm94LCBDb2xsYWdlLCBDb2xsZWN0aW9uLCBDb2x1bW4sIENvbnRhaW5lciwgRGl2aWRlciwgRmx5b3V0LCBHcm91cEF2YXRhciwgSGVhZGluZywgSWNvbiwgSWNvbkJ1dHRvbiwgSW1hZ2UsIExhYmVsLCBMYXllciwgTGV0dGVyYm94LCBMaW5rLCBNYXNrLCBNYXNvbnJ5LCBNYXNvbnJ5TGF5b3V0IGFzIE1hc29ucnlEZWZhdWx0TGF5b3V0LCBVbmlmb3JtUm93TGF5b3V0IGFzIE1hc29ucnlVbmlmb3JtUm93TGF5b3V0LCBNb2RhbCwgUG9nLCBQdWxzYXIsIFJhZGlvQnV0dG9uLCBSb3csIFNjcm9sbEZldGNoLCBTZWFyY2hGaWVsZCwgU2VnbWVudGVkQ29udHJvbCwgU2VsZWN0TGlzdCwgU3Bpbm5lciwgU3RhY2ssIFN0aWNreSwgU3dpdGNoLCBUYWJsZSwgVGFicywgVGV4dCwgVGV4dEFyZWEsIFRleHRGaWVsZCwgVG9hc3QsIFRvb2x0aXAsIFRvdWNoYWJsZSwgVmlkZW8gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjJWemRHRnNkQzVsY3k1cWN5SXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMM04wZVd4bExtcHpJaXdpTGk0dmMzSmpMM1J5WVc1elptOXliWE11YW5NaUxDSXVMaTl6Y21NdlFtOTRMbXB6SWl3aUxpNHZjM0pqTDJsamIyNXpMMkZrTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5aFpHUXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZrWkMxamFYSmpiR1V1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJGa1pDMXNZWGx2ZFhRdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyRmtaQzF3YVc0dWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyRmtMV2R5YjNWd0xuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OWhaSE10YzNSaGRITXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZrY3kxdmRtVnlkbWxsZHk1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdllXeGxjblF1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJGc2FXZHVMV0p2ZEhSdmJTNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZZV3hwWjI0dFltOTBkRzl0TFdObGJuUmxjaTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12WVd4cFoyNHRZbTkwZEc5dExXeGxablF1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJGc2FXZHVMV0p2ZEhSdmJTMXlhV2RvZEM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdllXeHBaMjR0Yldsa1pHeGxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTloYkdsbmJpMTBiM0F1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJGc2FXZHVMWFJ2Y0MxalpXNTBaWEl1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJGc2FXZHVMWFJ2Y0Mxc1pXWjBMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTloYkdsbmJpMTBiM0F0Y21sbmFIUXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZ1WkhKdmFXUXRjMmhoY21VdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyRnVaMnhsWkMxd2FXNHVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZ3Y0hNdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyRnljbTkzTFdKaFkyc3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZ5Y205M0xXTnBjbU5zWlMxa2IzZHVMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTloY25KdmR5MWphWEpqYkdVdFptOXlkMkZ5WkM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdllYSnliM2N0WTJseVkyeGxMWFZ3TG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5aGNuSnZkeTFrYjNkdUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OWhjbkp2ZHkxbGJtUXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkZ5Y205M0xXWnZjbmRoY21RdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyRnljbTkzTFhOMFlYSjBMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTloY25KdmR5MTFjQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12WVhKeWIzY3RkWEF0Y21sbmFIUXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMkpsYkd3dWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyTmhiR1Z1WkdGeUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OWpZVzFsY21FdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyTmhiV1Z5WVMxeWIyeHNMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlqWVc1alpXd3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMk5oYm05dWFXTmhiQzF3YVc0dWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyTm9aV05yTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5amFHVmpheTFqYVhKamJHVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMk5wY21Oc1pTMXZkWFJzYVc1bExuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OWpiR1ZoY2k1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdlkyeHZZMnN1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJOdlpHVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMk52Wnk1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdlkyOXNiM0l0Y0dsamEyVnlMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlqYjIxd1lYTnpMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlqYjIxd2IzTmxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlqYjI1MlpYSnphVzl1TFhSaFp5NXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZZM0psWkdsMExXTmhjbVF1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJOeWIzQXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMlJoYzJndWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyUnBjbVZqZEdsdmJtRnNMV0Z5Y205M0xXeGxablF1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJScGNtVmpkR2x2Ym1Gc0xXRnljbTkzTFhKcFoyaDBMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlrYjNkdWJHOWhaQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12WkhWd2JHbGpZWFJsTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5bFpHbDBMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlsYkd4cGNITnBjeTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Wld4c2FYQnphWE10WTJseVkyeGxMVzkxZEd4cGJtVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMlZ1ZG1Wc2IzQmxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlsZVdVdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyWmhZMlZpYjI5ckxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OW1ZV05sTFdoaGNIQjVMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTltWVdObExYTmhaQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Wm1GalpTMXpiV2xzWlhrdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyWnBiR1V0ZFc1cmJtOTNiaTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Wm1sc2JDMXZjR0Z4ZFdVdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyWnBiR3d0ZEhKaGJuTndZWEpsYm5RdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyWnBiSFJsY2k1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdlpteGhaeTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Wm14aGMyZ3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMlpzWVhOb2JHbG5hSFF1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJac2FYQXRhRzl5YVhwdmJuUmhiQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Wm14cGNDMTJaWEowYVdOaGJDNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZabTlzWkdWeUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OW5hV1l1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJkc2IySmxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTluYkc5aVpTMWphR1ZqYTJWa0xuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OW5iV0ZwYkM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdloyOXZaMnhsTFhCc2RYTXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMmR5WVhCb0xXSmhjaTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YUdGdVpHeGxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTlvWVc1a0xYQnZhVzUwYVc1bkxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OW9aV0Z5ZEM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmFHVmhjblF0YjNWMGJHbHVaUzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YUdWaGNuUXRZbkp2YTJWdUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXBiWEJ5WlhOemRXMHVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMmx1Wm04dFkybHlZMnhsTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5clpYa3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMnR1YjI5d0xuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXNhV2RvZEdKMWJHSXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMnhwWjJoMGJtbHVaeTFpYjJ4MExXTnBjbU5zWlM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmJHbHVheTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Ykc5allYUnBiMjR1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJ4dlkyc3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMnh2WjI4dGJHRnlaMlV1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDJ4dloyOHRjMjFoYkd3dWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyeHZaMjkxZEM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmJXRnlaMmx1Y3kxc1lYSm5aUzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YldGeVoybHVjeTF0WldScGRXMHVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMjFoY21kcGJuTXRjMjFoYkd3dWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyMWhlR2x0YVhwbExuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXRaV2RoY0dodmJtVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMMjFsYm5VdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwyMXBibWx0YVhwbExuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXRiM1psTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5dGRYUmxMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTl2ZG1WeWJHRjVMWFJsZUhRdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzQmhkWE5sTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5d1pXOXdiR1V1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDNCbGNuTnZiaTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Y0dWeWMyOXVMV0ZrWkM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmNHaHZibVV1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDNCcGJpNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZjR2x1TFdocFpHVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMM0JwYm5SbGNtVnpkQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Y0d4aGVTNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZjWFZsYzNScGIyNHRiV0Z5YXk1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmNtVm1jbVZ6YUM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmNtVnRiM1psTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5eVpXOXlaR1Z5TFdsdFlXZGxjeTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Y21Wd2JHRmpaUzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12Y21Wd2IzSjBMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTl5YjNSaGRHVXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMM05qWVd4bExuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXpaV0Z5WTJndWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzTmxZM1Z5YVhSNUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXpaVzVrTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5emFHRnlaUzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YzJodmNIQnBibWN0WW1GbkxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXpiV2xzWlhrdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzTnRhV3hsZVMxdmRYUnNhVzVsTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5emIzVnVaQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YzI5eWRDMWhjMk5sYm1ScGJtY3VjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMM052Y25RdFpHVnpZMlZ1WkdsdVp5NXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZjM0JsWldOb0xuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXpjR1ZsWTJndFpXeHNhWEJ6YVhNdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzTjBZWEl1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDNOMFlYSXRhR0ZzWmk1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmMzUnZjbmt0Y0dsdUxuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OXpkMmwwWTJndFlXTmpiM1Z1ZEM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmRHRm5Mbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTkwWlhKdGN5NXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkR1Y0ZEMxaGJHbG5iaTFqWlc1MFpYSXVjM1puSWl3aUxpNHZjM0pqTDJsamIyNXpMM1JsZUhRdFlXeHBaMjR0YkdWbWRDNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkR1Y0ZEMxaGJHbG5iaTF5YVdkb2RDNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkR1Y0ZEMxaGJHd3RZMkZ3Y3k1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmRHVjRkQzFsZUhSeVlTMXpiV0ZzYkM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmRHVjRkQzFzWVhKblpTNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkR1Y0ZEMxc2FXNWxMV2hsYVdkb2RDNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkR1Y0ZEMxdFpXUnBkVzB1YzNabklpd2lMaTR2YzNKakwybGpiMjV6TDNSbGVIUXRjMlZ1ZEdWdVkyVXRZMkZ6WlM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmRHVjRkQzF6YVhwbExuTjJaeUlzSWk0dUwzTnlZeTlwWTI5dWN5OTBaWGgwTFhOdFlXeHNMbk4yWnlJc0lpNHVMM055WXk5cFkyOXVjeTkwWlhoMExYTndZV05wYm1jdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzUnlZWE5vTFdOaGJpNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkSGRwZEhSbGNpNXpkbWNpTENJdUxpOXpjbU12YVdOdmJuTXZkbWxrWlc4dFkyRnRaWEpoTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5MmFXVjNMWFI1Y0dVdFpHVm1ZWFZzZEM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmRtbGxkeTEwZVhCbExXUmxibk5sTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5MmFXVjNMWFI1Y0dVdGJHbHpkQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12ZDI5eWEyWnNiM2N0YzNSaGRIVnpMV0ZzYkM1emRtY2lMQ0l1TGk5emNtTXZhV052Ym5NdmQyOXlhMlpzYjNjdGMzUmhkSFZ6TFdoaGJIUmxaQzV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12ZDI5eWEyWnNiM2N0YzNSaGRIVnpMV2x1TFhCeWIyZHlaWE56TG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5M2IzSnJabXh2ZHkxemRHRjBkWE10YjJzdWMzWm5JaXdpTGk0dmMzSmpMMmxqYjI1ekwzZHZjbXRtYkc5M0xYTjBZWFIxY3kxd2NtOWliR1Z0TG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5M2IzSnJabXh2ZHkxemRHRjBkWE10ZFc1emRHRnlkR1ZrTG5OMlp5SXNJaTR1TDNOeVl5OXBZMjl1Y3k5M2IzSnJabXh2ZHkxemRHRjBkWE10ZDJGeWJtbHVaeTV6ZG1jaUxDSXVMaTl6Y21NdmFXTnZibk12YVc1a1pYZ3Vhbk1pTENJdUxpOXpjbU12U1dOdmJpNXFjeUlzSWk0dUwzTnlZeTlKYldGblpTNXFjeUlzSWk0dUwzTnlZeTlOWVhOckxtcHpJaXdpTGk0dmMzSmpMMEYyWVhSaGNpNXFjeUlzSWk0dUwzTnlZeTlCZG1GMFlYSlFZV2x5TG1weklpd2lMaTR2YzNKakwwSmhaR2RsTG1weklpd2lMaTR2YzNKakwxUmxlSFF1YW5NaUxDSXVMaTl6Y21NdlFuVjBkRzl1TG1weklpd2lMaTR2YzNKakwwTmhjbVF1YW5NaUxDSXVMaTl6Y21NdlJtOXliVVZ5Y205eVRXVnpjMkZuWlM1cWN5SXNJaTR1TDNOeVl5OU1ZV0psYkM1cWN5SXNJaTR1TDNOeVl5OURhR1ZqYTJKdmVDNXFjeUlzSWk0dUwzTnlZeTlEYjJ4c1pXTjBhVzl1TG1weklpd2lMaTR2YzNKakwwTnZiR3hoWjJVdWFuTWlMQ0l1TGk5emNtTXZRMjlzZFcxdUxtcHpJaXdpTGk0dmMzSmpMME52Ym5SaGFXNWxjaTVxY3lJc0lpNHVMM055WXk5RWFYWnBaR1Z5TG1weklpd2lMaTR2YzNKakwwTmhjbVYwTG1weklpd2lMaTR2YzNKakwwTnZiblJsYm5SekxtcHpJaXdpTGk0dmMzSmpMMkpsYUdGMmFXOXljeTlQZFhSemFXUmxSWFpsYm5SQ1pXaGhkbWx2Y2k1cWN5SXNJaTR1TDNOeVl5OURiMjUwY205c2JHVnlMbXB6SWl3aUxpNHZjM0pqTDBac2VXOTFkQzVxY3lJc0lpNHVMM055WXk5SGNtOTFjRUYyWVhSaGNpNXFjeUlzSWk0dUwzTnlZeTlJWldGa2FXNW5MbXB6SWl3aUxpNHZjM0pqTDFCdlp5NXFjeUlzSWk0dUwzTnlZeTlKWTI5dVFuVjBkRzl1TG1weklpd2lMaTR2YzNKakwweGhlV1Z5TG1weklpd2lMaTR2YzNKakwweGxkSFJsY21KdmVDNXFjeUlzSWk0dUwzTnlZeTlNYVc1ckxtcHpJaXdpTGk0dmMzSmpMMlJsWW05MWJtTmxMbXB6SWl3aUxpNHZjM0pqTDBabGRHTm9TWFJsYlhNdWFuTWlMQ0l1TGk5emNtTXZVMk55YjJ4c1EyOXVkR0ZwYm1WeUxtcHpJaXdpTGk0dmMzSmpMM1JvY205MGRHeGxMbXB6SWl3aUxpNHZjM0pqTDAxbFlYTjFjbVZ0Wlc1MFUzUnZjbVV1YW5NaUxDSXVMaTl6Y21NdmMyTnliMnhzVlhScGJITXVhbk1pTENJdUxpOXpjbU12YkdWbllXTjVUR0Y1YjNWMFUzbHRZbTlzY3k1cWN5SXNJaTR1TDNOeVl5OWtaV1poZFd4MFRHRjViM1YwTG1weklpd2lMaTR2YzNKakwzVnVhV1p2Y20xU2IzZE1ZWGx2ZFhRdWFuTWlMQ0l1TGk5emNtTXZablZzYkZkcFpIUm9UR0Y1YjNWMExtcHpJaXdpTGk0dmMzSmpMMnhoZVc5MWRITXZUV0Z6YjI1eWVVeGhlVzkxZEM1cWN5SXNJaTR1TDNOeVl5OXNZWGx2ZFhSekwxVnVhV1p2Y20xU2IzZE1ZWGx2ZFhRdWFuTWlMQ0l1TGk5emNtTXZUV0Z6YjI1eWVTNXFjeUlzSWk0dUwzTnlZeTlpWldoaGRtbHZjbk12VTNSdmNGTmpjbTlzYkVKbGFHRjJhVzl5TG1weklpd2lMaTR2YzNKakwySmxhR0YyYVc5eWN5OVVjbUZ3Um05amRYTkNaV2hoZG1sdmNpNXFjeUlzSWk0dUwzTnlZeTlOYjJSaGJDNXFjeUlzSWk0dUwzTnlZeTlRZFd4ellYSXVhbk1pTENJdUxpOXpjbU12VW1Ga2FXOUNkWFIwYjI0dWFuTWlMQ0l1TGk5emNtTXZSbXhsZUVKdmVDNXFjeUlzSWk0dUwzTnlZeTlTYjNjdWFuTWlMQ0l1TGk5emNtTXZVMk55YjJ4c1JtVjBZMmd1YW5NaUxDSXVMaTl6Y21NdlUyVmhjbU5vUm1sbGJHUXVhbk1pTENJdUxpOXpjbU12VTJWbmJXVnVkR1ZrUTI5dWRISnZiQzVxY3lJc0lpNHVMM055WXk5R2IzSnRTR1ZzY0dWeVZHVjRkQzVxY3lJc0lpNHVMM055WXk5R2IzSnRUR0ZpWld3dWFuTWlMQ0l1TGk5emNtTXZVMlZzWldOMFRHbHpkQzVxY3lJc0lpNHVMM055WXk5VGNHbHVibVZ5TG1weklpd2lMaTR2YzNKakwxTjBZV05yTG1weklpd2lMaTR2YzNKakwxTjBhV05yZVM1cWN5SXNJaTR1TDNOeVl5OVRkMmwwWTJndWFuTWlMQ0l1TGk5emNtTXZWR0ZpYkdWRFpXeHNMbXB6SWl3aUxpNHZjM0pqTDFSaFlteGxRbTlrZVM1cWN5SXNJaTR1TDNOeVl5OVVZV0pzWlVadmIzUmxjaTVxY3lJc0lpNHVMM055WXk5VVlXSnNaVWhsWVdSbGNpNXFjeUlzSWk0dUwzTnlZeTlVWVdKc1pVaGxZV1JsY2tObGJHd3Vhbk1pTENJdUxpOXpjbU12VkdGaWJHVlNiM2N1YW5NaUxDSXVMaTl6Y21NdlZHOTFZMmhoWW14bExtcHpJaXdpTGk0dmMzSmpMMVJoWW14bFUyOXlkR0ZpYkdWSVpXRmtaWEpEWld4c0xtcHpJaXdpTGk0dmMzSmpMMVJoWW14bExtcHpJaXdpTGk0dmMzSmpMMVJoWW5NdWFuTWlMQ0l1TGk5emNtTXZWR1Y0ZEVGeVpXRXVhbk1pTENJdUxpOXpjbU12VkdWNGRFWnBaV3hrTG1weklpd2lMaTR2YzNKakwxUnZZWE4wTG1weklpd2lMaTR2YzNKakwxUnZiMngwYVhBdWFuTWlMQ0l1TGk5emNtTXZWbWxrWlc5UWJHRjVhR1ZoWkM1cWN5SXNJaTR1TDNOeVl5OVdhV1JsYjBOdmJuUnliMnh6TG1weklpd2lMaTR2YzNKakwxWnBaR1Z2TG1weklsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUVCbWJHOTNJSE4wY21samRGeHVYRzR2S2x4dVhHNVRkSGxzWlNCcGN5QmhJRzF2Ym05cFpDQjBhR0YwSUdOaGNIUjFjbVVnZEdobElGd2lkRzh0WW1VdFlYQndiR2xsWkZ3aUlITjBlV3hsY3lBb2FXNXNhVzVsSUdGdVpDQmpiR0Z6YzJWektWeHVabTl5SUdFZ1FtOTRMaUJKZENkeklHSmhjMmxqWVd4c2VTQnpaWFFnZEdoaGRDQnBjeUJqYkc5elpXUWdkVzVrWlhJZ1lXNGdZWE56YjJOcFlYUnBkbVVnWW1sdVlYSjVYRzV2Y0dWeVlYUnBiMjRnWVc1a0lHaGhjeUJoYmlCcFpHVnVkR2wwZVNCbGJHVnRaVzUwSUhOMVkyZ2dkR2hoZENCbWIzSWdZV3hzSUVoQklFaEJJRWhCTGlCWlpYTXNJR2wwSjNNZ1lWeHViVzl1YjJsa0xDQjNhR2xqYUNCemIzVnVaSE1nYzJOaGNua2dZblYwSUdsMEozTWdibTkwSUhKbFlXeHNlU0JoYm1RZ1lXTjBkV0ZzYkhrZ2MzVndaWElnZFhObFpuVnNMaUJCYkd4Y2JuUm9ZWFFnYldWaGJuTWdhWE1nZEdoaGRDQmlZWE5wWTJGc2JIa2dlVzkxSUdOaGJpQmtieUIwZDI4Z2RHaHBibWR6SUhkcGRHZ2dhWFE2WEc1Y2JpQWdJQ0F4TGlCamIyNWpZWFFvWTI5dVkyRjBLR0VzSUdJcExDQmpLU0E5UFQwZ1kyOXVZMkYwS0dFc0lHTnZibU5oZENoaUxDQmpLU2s3WEc0Z0lDQWdNaTRnWTI5dVkyRjBLR2xrWlc1MGFYUjVLQ2tzSUdFcElEMDlQU0JqYjI1allYUW9ZU3dnYVdSbGJuUnBkSGtvS1NrZ1BUMDlJR0U3WEc1Y2JsZG9ZWFFnZEdoaGRDQnRaV0Z1Y3lCcGN5QjBhR0YwSUdsMEozTWdjbVZoYkd4NUlHVmhjM2tnZEc4Z1kyOXRjRzl6WlNCemRIbHNaWE1nZEc5blpYUm9aWElnWVc1a0lIUm9aVnh1YjNKa1pYSWdhVzRnZDJocFkyZ2dlVzkxSUdSdklITnZJR1J2WlhOdUozUWdjbVZoYkd4NUlHMWhkSFJsY2k1Y2JseHVLaTljYmx4dWRIbHdaU0JKYm14cGJtVlRkSGxzWlNBOUlIc2dXMnRsZVRvZ2MzUnlhVzVuWFRvZ2MzUnlhVzVuSUh3Z2JuVnRZbVZ5SUh3Z2RtOXBaQ0I5TzF4dVhHNHZMeUJVVDBSUE9pQlVhR2x6SUhSNWNHVWdjMmh2ZFd4a0lHSmxJRzl3WVhGMVpTd2dhRzkzWlhabGNpQjBhR1VnUW1GaVpXd2djR0Z5YzJWeUlHUnZaWE51SjNRZ2MzVndjRzl5ZEZ4dUx5OGdJQ0FnSUNBZ2RHaGxJRzl3WVhGMVpTQnplVzUwWVhnZ2VXVjBMbHh1Wlhod2IzSjBJSFI1Y0dVZ1UzUjViR1VnUFNCN2ZGeHVJQ0JqYkdGemMwNWhiV1U2SUZObGREeHpkSEpwYm1jK0xGeHVJQ0JwYm14cGJtVlRkSGxzWlRvZ1NXNXNhVzVsVTNSNWJHVXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdsa1pXNTBhWFI1SUQwZ0tDazZJRk4wZVd4bElEMCtJQ2g3WEc0Z0lHTnNZWE56VG1GdFpUb2dibVYzSUZObGRDZ3BMRnh1SUNCcGJteHBibVZUZEhsc1pUb2dlMzBzWEc1OUtUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHWnliMjFEYkdGemMwNWhiV1VnUFNBb0xpNHVZMnhoYzNOT1lXMWxjem9nUVhKeVlYazhjM1J5YVc1blBpazZJRk4wZVd4bElEMCtJQ2g3WEc0Z0lHTnNZWE56VG1GdFpUb2dibVYzSUZObGRDaGpiR0Z6YzA1aGJXVnpLU3hjYmlBZ2FXNXNhVzVsVTNSNWJHVTZJSHQ5TEZ4dWZTazdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm1jbTl0U1c1c2FXNWxVM1I1YkdVZ1BTQW9hVzVzYVc1bFUzUjViR1U2SUVsdWJHbHVaVk4wZVd4bEtUb2dVM1I1YkdVZ1BUNGdLSHRjYmlBZ1kyeGhjM05PWVcxbE9pQnVaWGNnVTJWMEtDa3NYRzRnSUdsdWJHbHVaVk4wZVd4bExGeHVmU2s3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JqYjI1allYUWdQU0FvYzNSNWJHVnpPaUJCY25KaGVUeFRkSGxzWlQ0cE9pQlRkSGxzWlNBOVBseHVJQ0J6ZEhsc1pYTXVjbVZrZFdObEtGeHVJQ0FnSUNoY2JpQWdJQ0FnSUhzZ1kyeGhjM05PWVcxbE9pQmpiR0Z6YzA1aGJXVkJMQ0JwYm14cGJtVlRkSGxzWlRvZ2FXNXNhVzVsVTNSNWJHVkJJSDBzWEc0Z0lDQWdJQ0I3SUdOc1lYTnpUbUZ0WlRvZ1kyeGhjM05PWVcxbFFpd2dhVzVzYVc1bFUzUjViR1U2SUdsdWJHbHVaVk4wZVd4bFFpQjlYRzRnSUNBZ0tTQTlQaUFvZTF4dUlDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lCdVpYY2dVMlYwS0ZzdUxpNWpiR0Z6YzA1aGJXVkJMQ0F1TGk1amJHRnpjMDVoYldWQ1hTa3NYRzRnSUNBZ0lDQnBibXhwYm1WVGRIbHNaVG9nZXlBdUxpNXBibXhwYm1WVGRIbHNaVUVzSUM0dUxtbHViR2x1WlZOMGVXeGxRaUI5TEZ4dUlDQWdJSDBwTEZ4dUlDQWdJR2xrWlc1MGFYUjVLQ2xjYmlBZ0tUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHMWhjRU5zWVhOelRtRnRaU0E5SUNobWJqb2dLSGc2SUhOMGNtbHVaeWtnUFQ0Z2MzUnlhVzVuS1NBOVBpQW9lMXh1SUNCamJHRnpjMDVoYldVc1hHNGdJR2x1YkdsdVpWTjBlV3hsTEZ4dWZUb2dVM1I1YkdVcE9pQlRkSGxzWlNBOVBpQW9lMXh1SUNCamJHRnpjMDVoYldVNklHNWxkeUJUWlhRb1FYSnlZWGt1Wm5KdmJTaGpiR0Z6YzA1aGJXVXBMbTFoY0NobWJpa3BMRnh1SUNCcGJteHBibVZUZEhsc1pTeGNibjBwTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnZEc5UWNtOXdjeUE5SUNoN1hHNGdJR05zWVhOelRtRnRaU3hjYmlBZ2FXNXNhVzVsVTNSNWJHVXNYRzU5T2lCVGRIbHNaU2s2SUhzZ1kyeGhjM05PWVcxbE9pQnpkSEpwYm1jc0lITjBlV3hsT2lCSmJteHBibVZUZEhsc1pTQjlJRDArSUh0Y2JpQWdZMjl1YzNRZ2NISnZjSE1nUFNCN2ZUdGNibHh1SUNCcFppQW9ZMnhoYzNOT1lXMWxMbk5wZW1VZ1BpQXdLU0I3WEc0Z0lDQWdMeThnVTI5eWRHbHVaeUJvWlhKbElHVnVjM1Z5WlhNZ2RHaGhkQ0JqYkdGemMwNWhiV1Z6SUdGeVpTQmhiSGRoZVhNZ2MzUmhZbXhsTENCeVpXUjFZMmx1WnlCa2FXWm1YRzRnSUNBZ0x5OGdZMmgxY200dUlFSnZlQ0IxYzNWaGJHeDVJR2hoY3lCaElITnRZV3hzSUc1MWJXSmxjaUJ2WmlCd2NtOXdaWEowYVdWeklITnZJR2wwSjNNZ2JtOTBJR0VnY0dWeVpseHVJQ0FnSUM4dklHTnZibU5sY200dVhHNGdJQ0FnY0hKdmNITXVZMnhoYzNOT1lXMWxJRDBnUVhKeVlYa3Vabkp2YlNoamJHRnpjMDVoYldVcFhHNGdJQ0FnSUNBdWMyOXlkQ2dwWEc0Z0lDQWdJQ0F1YW05cGJpZ25JQ2NwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXJaWGx6S0dsdWJHbHVaVk4wZVd4bEtTNXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdjSEp2Y0hNdWMzUjViR1VnUFNCcGJteHBibVZUZEhsc1pUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQndjbTl3Y3p0Y2JuMDdYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYmx4dWFXMXdiM0owSUh0Y2JpQWdZMjl1WTJGMExGeHVJQ0JtY205dFEyeGhjM05PWVcxbExGeHVJQ0JwWkdWdWRHbDBlU3hjYmlBZ2JXRndRMnhoYzNOT1lXMWxMRnh1SUNCMGVYQmxJRk4wZVd4bExGeHVmU0JtY205dElDY3VMM04wZVd4bExtcHpKenRjYmx4dUx5cGNibHh1VkhKaGJuTm1iM0p0YzF4dVhHNVVhR1Z6WlNCaGNtVWdZU0JqYjJ4c1pXTjBhVzl1SUc5bUlHRWdabVYzSUdaMWJtTjBiM0p6SUhSb1lYUWdkR0ZyWlNCMllXeDFaWE1nWVc1a0lISmxkSFZ5Ym5NZ1UzUjViR1VuY3k0Z1QwMUhMQ0JKSUhWelpXUWdkR2hsSUhkdmNtUWdablZ1WTNSdmNpQXRJR2wwSjNNZ2NtVmhiR3g1SUdwMWMzUWdZU0JtWVc1amVTQjNiM0prSUdadmNpQm1kVzVqZEdsdmJpNWNibHh1S2k5Y2JseHVkSGx3WlNCR2RXNWpkRzl5UEZRK0lEMGdLRzQ2SUZRcElEMCtJRk4wZVd4bE8xeHVYRzR2THlCQlpHUnpJR0VnWTJ4aGMzTnVZVzFsSUhkb1pXNGdZU0J3Y205d1pYSjBlU0JwY3lCd2NtVnpaVzUwTGx4dUx5OWNiaTh2SUNBZ0lDQThRbTk0SUhSdmNDQXZQbHh1THk5Y2JtVjRjRzl5ZENCamIyNXpkQ0IwYjJkbmJHVWdQU0FvTGk0dVkyeGhjM05PWVcxbGN6b2dRWEp5WVhrOGMzUnlhVzVuUGlrZ1BUNGdLSFpoYkQ4NklHSnZiMnhsWVc0cElEMCtYRzRnSUhaaGJDQS9JR1p5YjIxRGJHRnpjMDVoYldVb0xpNHVZMnhoYzNOT1lXMWxjeWtnT2lCcFpHVnVkR2wwZVNncE8xeHVYRzR2THlCTllYQnpJSE4wY21sdVp5QjJZV3gxWlhNZ2RHOGdZMnhoYzNObGMxeHVMeTljYmk4dklDQWdJQ0E4UW05NElHRnNhV2R1U1hSbGJYTTlYQ0pqWlc1MFpYSmNJaUF2UGx4dUx5OWNibVY0Y0c5eWRDQmpiMjV6ZENCdFlYQndhVzVuSUQwZ0tHMWhjRG9nZXlCYmEyVjVPaUJ6ZEhKcGJtZGRPaUJ6ZEhKcGJtY2dmU2tnUFQ0Z0tIWmhiRG9nYzNSeWFXNW5LU0E5UGx4dUlDQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iV0Z3TENCMllXd3BYRzRnSUNBZ1B5Qm1jbTl0UTJ4aGMzTk9ZVzFsS0cxaGNGdDJZV3hkS1Z4dUlDQWdJRG9nYVdSbGJuUnBkSGtvS1R0Y2JseHVMeThnVFdGd2N5QmhJSEpoYm1kbElHOW1JR2x1ZEdWblpYSnpJSFJ2SUdFZ2NtRnVaMlVnYjJZZ1kyeGhjM051WVcxbGMxeHVMeTljYmk4dklDQWdJQ0E4UW05NElIQmhaR1JwYm1jOWV6RjlJQzgrWEc0dkwxeHVaWGh3YjNKMElHTnZibk4wSUhKaGJtZGxJRDBnS0hOallXeGxPaUJ6ZEhKcGJtY3BJRDArSUNodU9pQnVkVzFpWlhJcE9pQlRkSGxzWlNBOVBseHVJQ0JtY205dFEyeGhjM05PWVcxbEtHQWtlM05qWVd4bGZTUjdiaUE4SURBZ1B5QmdUaVI3VFdGMGFDNWhZbk1vYmlsOVlDQTZJRzU5WUNrN1hHNWNiaTh2SUV4cGEyVWdZSEpoYm1kbFlDd2diV0Z3Y3lCaElISmhibWRsSUc5bUlHbHVkR1ZuWlhKeklIUnZJR0VnY21GdVoyVWdiMllnWTJ4aGMzTnVZVzFsY3l3Z1pYaGpiSFZrYVc1blhHNHZMeUI2WlhKdklIWmhiSFZsY3k1Y2JpOHZYRzR2THlBZ0lDQWdQRUp2ZUNCd1lXUmthVzVuUFhzd2ZTQXZQbHh1Wlhod2IzSjBJR052Ym5OMElISmhibWRsVjJsMGFHOTFkRnBsY204Z1BTQW9jMk5oYkdVNklITjBjbWx1WnlrZ1BUNGdLRzQ2SUc1MWJXSmxjaWs2SUZOMGVXeGxJRDArWEc0Z0lHNGdQVDA5SURBZ1B5QnBaR1Z1ZEdsMGVTZ3BJRG9nY21GdVoyVW9jMk5oYkdVcEtHNHBPMXh1WEc0dkx5QkNhVzVrY3lCaElITjBjbWx1WnlCamJHRnpjMjVoYldVZ2RHOGdkR2hsSUhaaGJIVmxJR2x1SUdGdUlHOWlhbVZqZEM0Z1ZYTmxablZzSUhkb1pXNGdhVzUwWlhKaFkzUnBibWRjYmk4dklIZHBkR2dnY21GdVoyVnpJSFJvWVhRZ2JtVmxaQ0IwYnlCamIyMWxJR1I1Ym1GdGFXTmhiR3g1SUdaeWIyMGdZU0J6ZEhsc1pTQnZZbXBsWTNRdUlGUm9hWE1nYVhOY2JpOHZJSE5wYldsc1lYSWdkRzhnZEdobElFNVFUU0J3WVdOcllXZGxJQ2RqYkdGemMyNWhiV1Z6TDJKcGJtUW5MbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0pwYm1ROFZENG9YRzRnSUdadU9pQkdkVzVqZEc5eVBGUStMRnh1SUNCelkyOXdaVG9nZXlBclcydGxlVG9nYzNSeWFXNW5YVG9nYzNSeWFXNW5JSDFjYmlrNklDaDJZV3c2SUZRcElEMCtJRk4wZVd4bElIdGNiaUFnWTI5dWMzUWdiV0Z3SUQwZ2JXRndRMnhoYzNOT1lXMWxLRzVoYldVZ1BUNGdjMk52Y0dWYmJtRnRaVjBwTzF4dUlDQnlaWFIxY200Z0tIWmhiRG9nVkNrNklGTjBlV3hsSUQwK0lHMWhjQ2htYmloMllXd3BLVHRjYm4xY2JseHVMeThnVkdocGN5QjBZV3RsY3lCaElITmxjbWxsY3lCdlppQjBhR1VnY0hKbGRtbHZkWE5zZVNCa1pXWnBibVZrSUdaMWJtTjBiM0p6TENCeWRXNXpJSFJvWlcwZ1lXeHNYRzR2THlCaFoyRnBibk4wSUdFZ2RtRnNkV1VnWVc1a0lISmxkSFZ5Ym5NZ2RHaGxJSE5sZENCdlppQjBhR1ZwY2lCamJHRnpjMjVoYldWekxseHVaWGh3YjNKMElHTnZibk4wSUhWdWFXOXVJRDBnUEZRK0tDNHVMbVp1Y3pvZ1FYSnlZWGs4Um5WdVkzUnZjanhVUGo0cElEMCtJQ2gyWVd3NklGUXBJRDArWEc0Z0lHTnZibU5oZENobWJuTXViV0Z3S0dadUlEMCtJR1p1S0haaGJDa3BLVHRjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dVhHNHZLbHh1WEc0aklGZGxiR052YldVZ2RHOGdRbTk0SVZ4dVhHNVVhR2x6SUdkMWFXUmxJSGRwYkd3Z2FHVnNjQ0I1YjNVZ2JtRjJhV2RoZEdVZ1lXNWtJSFZ1WkdWeWMzUmhibVFnYVhSeklHUmxjMmxuYmk0Z1ZHaHBjeUJtYVd4bElHbHpJSEp2ZFdkb2JIa2diM0puWVc1cGVtVmtJR3hwYTJVNlhHNWNiaUFnTVM0Z1JteHZkeUJVZVhCbGMxeHVJQ0F5TGlCUWNtOXdJSFJ5WVc1elptOXliV1Z5YzF4dUlDQXpMaUJDYjNnZ2FYUnpaV3htWEc0Z0lEUXVJRkJ5YjNCVWVYQmxjMXh1WEc1SkoyeHNJR1Y0Y0d4aGFXNGdaV0ZqYUNCd1lYSjBJR0Z6SUhkbElHZHZJSFJvY205MVoyZ3VJRXAxYzNRZ2NtVnRaVzFpWlhJc0lHbG1JSGx2ZFNCM1lXNTBJSFJ2SUcxaGEyVWdkWEJrWVhSbGN5d2dVRXhGUVZORklGQk1SVUZUUlNCUVRFVkJVMFVnZFhCa1lYUmxJSFJvWlNCR2JHOTNJRlI1Y0dWeklDWWdVSEp2Y0ZSNWNHVnpJQ2hsZG1WdUlIUm9iM1ZuYUNCMGFHVjVJR3h2YjJzZ2MyTmhjbmtwTGx4dVhHNHFMMXh1WEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJSE4wZVd4bGN5Qm1jbTl0SUNjdUwwSnZlQzVqYzNNbk8xeHVhVzF3YjNKMElHSnZjbVJsY25NZ1puSnZiU0FuTGk5Q2IzSmtaWEp6TG1OemN5YzdYRzVwYlhCdmNuUWdZMjlzYjNKeklHWnliMjBnSnk0dlEyOXNiM0p6TG1OemN5YzdYRzVwYlhCdmNuUWdiR0Y1YjNWMElHWnliMjBnSnk0dlRHRjViM1YwTG1OemN5YzdYRzVwYlhCdmNuUWdkMmhwZEdWemNHRmpaU0JtY205dElDY3VMMkp2ZUZkb2FYUmxjM0JoWTJVdVkzTnpKenRjYm1sdGNHOXlkQ0I3WEc0Z0lHTnZibU5oZEN4Y2JpQWdabkp2YlVOc1lYTnpUbUZ0WlN4Y2JpQWdabkp2YlVsdWJHbHVaVk4wZVd4bExGeHVJQ0JwWkdWdWRHbDBlU3hjYmlBZ2JXRndRMnhoYzNOT1lXMWxMRnh1SUNCMGIxQnliM0J6TEZ4dUlDQjBlWEJsSUZOMGVXeGxMRnh1ZlNCbWNtOXRJQ2N1TDNOMGVXeGxMbXB6Snp0Y2JtbHRjRzl5ZENCN1hHNGdJSFZ1YVc5dUxGeHVJQ0JpYVc1a0xGeHVJQ0J5WVc1blpTeGNiaUFnZEc5bloyeGxMRnh1SUNCdFlYQndhVzVuTEZ4dUlDQnlZVzVuWlZkcGRHaHZkWFJhWlhKdkxGeHVmU0JtY205dElDY3VMM1J5WVc1elptOXliWE11YW5Nbk8xeHVYRzR2S2x4dVhHNGpJRkJ5YjNCVWVYQmxjMXh1WEc1Q2IzZ25jeUIwZVhCbElHUmxabWx1YVhScGIyNGdhWE1nWlhob1lYVnpkR2wyWlM0Z1YybDBhQ0IwYUdVZ1pYaGpaWEIwYVc5dUlHOW1JR0JrWVc1blpYSnZkWE5zZVZObGRFbHViR2x1WlZOMGVXeGxZQ3dnZG1Gc2RXVnpYRzV6YUc5MWJHUnVKM1FnWW1VZ1lXMWlhV2RwYjNWekxpQlVhR0YwSUcxbFlXNXpJSFJvWVhRZ2QyVWdhR0YyWlNCMGJ5QjBlWEJsSUc5MWRDQjBhR2x1WjNNZ2JHbHJaU0JpYjJsdWRITXNJR0oxZENCMGFHRjBKM01nWVd4emIxeHVkMmhsY21VZ1FtOTRKM01nYldGbmFXTWdiR2xsY3k0Z1FXeHpieXdnWW5rZ2NIVjBkR2x1WnlCcGJpQmxlSFJ5WVNCbFptWnZjblFnWVhKdmRXNWtJSFI1Y0dVZ1pHVm1hVzVwZEdsdmJuTWdhR1Z5WlN3Z2QyVWdZMkZ1SUhOcmFYQmNibVY0ZEhKaElISjFiblJwYldVZ2RIbHdaV05vWldOcmN5QnBiaUIwYUdVZ2RISmhibk5tYjNKdFpYSnpJR1p2Y2lCd1pYSm1iM0p0WVc1alpTNWNibHh1S2k5Y2JseHVaWGh3YjNKMElIUjVjR1VnUVd4cFoyNURiMjUwWlc1MElEMWNiaUFnZkNBbmMzUmhjblFuWEc0Z0lId2dKMlZ1WkNkY2JpQWdmQ0FuWTJWdWRHVnlKMXh1SUNCOElDZGlaWFIzWldWdUoxeHVJQ0I4SUNkaGNtOTFibVFuWEc0Z0lId2dKMlYyWlc1c2VTZGNiaUFnZkNBbmMzUnlaWFJqYUNjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUVGc2FXZHVTWFJsYlhNZ1BTQW5jM1JoY25RbklId2dKMlZ1WkNjZ2ZDQW5ZMlZ1ZEdWeUp5QjhJQ2RpWVhObGJHbHVaU2NnZkNBbmMzUnlaWFJqYUNjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUVGc2FXZHVVMlZzWmlBOVhHNGdJSHdnSjJGMWRHOG5YRzRnSUh3Z0ozTjBZWEowSjF4dUlDQjhJQ2RsYm1RblhHNGdJSHdnSjJObGJuUmxjaWRjYmlBZ2ZDQW5ZbUZ6Wld4cGJtVW5YRzRnSUh3Z0ozTjBjbVYwWTJnbk8xeHVYRzUwZVhCbElFTnZiSFZ0YmlBOUlEQWdmQ0F4SUh3Z01pQjhJRE1nZkNBMElId2dOU0I4SURZZ2ZDQTNJSHdnT0NCOElEa2dmQ0F4TUNCOElERXhJSHdnTVRJN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUVScGJXVnVjMmx2YmlBOUlHNTFiV0psY2lCOElITjBjbWx1Wnp0Y2JseHVkSGx3WlNCRWFYTndiR0Y1SUQwZ0oyNXZibVVuSUh3Z0oyWnNaWGduSUh3Z0oySnNiMk5ySnlCOElDZHBibXhwYm1WQ2JHOWpheWNnZkNBbmRtbHpkV0ZzYkhsSWFXUmtaVzRuTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JFYVhKbFkzUnBiMjRnUFNBbmNtOTNKeUI4SUNkamIyeDFiVzRuTzF4dVhHNWxlSEJ2Y25RZ2RIbHdaU0JHYkdWNElEMGdKMmR5YjNjbklId2dKM05vY21sdWF5Y2dmQ0FuYm05dVpTYzdYRzVjYm1WNGNHOXlkQ0IwZVhCbElFcDFjM1JwWm5sRGIyNTBaVzUwSUQxY2JpQWdmQ0FuYzNSaGNuUW5YRzRnSUh3Z0oyVnVaQ2RjYmlBZ2ZDQW5ZMlZ1ZEdWeUoxeHVJQ0I4SUNkaVpYUjNaV1Z1SjF4dUlDQjhJQ2RoY205MWJtUW5YRzRnSUh3Z0oyVjJaVzVzZVNjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUUxaGNtZHBiaUE5WEc0Z0lId2dMVEV5WEc0Z0lId2dMVEV4WEc0Z0lId2dMVEV3WEc0Z0lId2dMVGxjYmlBZ2ZDQXRPRnh1SUNCOElDMDNYRzRnSUh3Z0xUWmNiaUFnZkNBdE5WeHVJQ0I4SUMwMFhHNGdJSHdnTFROY2JpQWdmQ0F0TWx4dUlDQjhJQzB4WEc0Z0lId2dNRnh1SUNCOElERmNiaUFnZkNBeVhHNGdJSHdnTTF4dUlDQjhJRFJjYmlBZ2ZDQTFYRzRnSUh3Z05seHVJQ0I4SURkY2JpQWdmQ0E0WEc0Z0lId2dPVnh1SUNCOElERXdYRzRnSUh3Z01URmNiaUFnZkNBeE1seHVJQ0I4SUNkaGRYUnZKenRjYmx4dVpYaHdiM0owSUhSNWNHVWdUM1psY21ac2IzY2dQVnh1SUNCOElDZDJhWE5wWW14bEoxeHVJQ0I4SUNkb2FXUmtaVzRuWEc0Z0lId2dKM05qY205c2JDZGNiaUFnZkNBbmMyTnliMnhzV0NkY2JpQWdmQ0FuYzJOeWIyeHNXU2RjYmlBZ2ZDQW5ZWFYwYnljN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUZCaFpHUnBibWNnUFNBd0lId2dNU0I4SURJZ2ZDQXpJSHdnTkNCOElEVWdmQ0EySUh3Z055QjhJRGdnZkNBNUlId2dNVEFnZkNBeE1TQjhJREV5TzF4dVhHNTBlWEJsSUZKbGMzQnZibk5wZG1WUWNtOXdjeUE5SUh0Y2JpQWdZMjlzZFcxdVB6b2dNU0I4SURJZ2ZDQXpJSHdnTkNCOElEVWdmQ0EySUh3Z055QjhJRGdnZkNBNUlId2dNVEFnZkNBeE1TQjhJREV5TEZ4dUlDQmthWE53YkdGNVB6b2dZbTl2YkdWaGJpQjhJQ2RtYkdWNEp5QjhJQ2RtYkdWNFEyOXNkVzF1SnlCOElDZHBibXhwYm1WQ2JHOWpheWNzWEc1OU8xeHVYRzUwZVhCbElGSnZkVzVrYVc1bklEMGdNQ0I4SURFZ2ZDQXlJSHdnTXlCOElEUWdmQ0ExSUh3Z05pQjhJRGNnZkNBNElId2dKMk5wY21Oc1pTY2dmQ0FuY0dsc2JDYzdYRzVjYm5SNWNHVWdVSEp2Y0ZSNWNHVWdQU0I3WEc0Z0lHTm9hV3hrY21WdVB6b2dVbVZoWTNRdVRtOWtaU3hjYmlBZ1pHRnVaMlZ5YjNWemJIbFRaWFJKYm14cGJtVlRkSGxzWlQ4NklIdGNiaUFnSUNCZlgzTjBlV3hsT2lCN0lGdHJaWGs2SUhOMGNtbHVaMTA2SUhOMGNtbHVaeUI4SUc1MWJXSmxjaUI4SUhadmFXUWdmU3hjYmlBZ2ZTeGNibHh1SUNCNGN6ODZJRkpsYzNCdmJuTnBkbVZRY205d2N5eGNiaUFnYzIwL09pQlNaWE53YjI1emFYWmxVSEp2Y0hNc1hHNGdJRzFrUHpvZ1VtVnpjRzl1YzJsMlpWQnliM0J6TEZ4dUlDQnNaejg2SUZKbGMzQnZibk5wZG1WUWNtOXdjeXhjYmx4dUlDQmthWE53YkdGNVB6b2dSR2x6Y0d4aGVTeGNiaUFnWTI5c2RXMXVQem9nUTI5c2RXMXVMRnh1SUNCa2FYSmxZM1JwYjI0L09pQkVhWEpsWTNScGIyNHNYRzRnSUhOdFJHbHpjR3hoZVQ4NklFUnBjM0JzWVhrc1hHNGdJSE50UTI5c2RXMXVQem9nUTI5c2RXMXVMRnh1SUNCemJVUnBjbVZqZEdsdmJqODZJRVJwY21WamRHbHZiaXhjYmlBZ2JXUkVhWE53YkdGNVB6b2dSR2x6Y0d4aGVTeGNiaUFnYldSRGIyeDFiVzQvT2lCRGIyeDFiVzRzWEc0Z0lHMWtSR2x5WldOMGFXOXVQem9nUkdseVpXTjBhVzl1TEZ4dUlDQnNaMFJwYzNCc1lYay9PaUJFYVhOd2JHRjVMRnh1SUNCc1owTnZiSFZ0Ymo4NklFTnZiSFZ0Yml4Y2JpQWdiR2RFYVhKbFkzUnBiMjQvT2lCRWFYSmxZM1JwYjI0c1hHNWNiaUFnWVd4cFoyNURiMjUwWlc1MFB6b2dRV3hwWjI1RGIyNTBaVzUwTEZ4dUlDQmhiR2xuYmtsMFpXMXpQem9nUVd4cFoyNUpkR1Z0Y3l4Y2JpQWdZV3hwWjI1VFpXeG1Qem9nUVd4cFoyNVRaV3htTEZ4dUlDQmliM1IwYjIwL09pQmliMjlzWldGdUxGeHVJQ0JpYjNKa1pYSlRhWHBsUHpvZ0ozTnRKeUI4SUNkdFpDY2dmQ0FuYm05dVpTY3NYRzRnSUdOdmJHOXlQenBjYmlBZ0lDQjhJQ2RpYkhWbEoxeHVJQ0FnSUh3Z0oyUmhjbXRIY21GNUoxeHVJQ0FnSUh3Z0oyUmhjbXRYWVhOb0oxeHVJQ0FnSUh3Z0oyVm5aM0JzWVc1MEoxeHVJQ0FnSUh3Z0oyZHlZWGtuWEc0Z0lDQWdmQ0FuWjNKbFpXNG5YRzRnSUNBZ2ZDQW5iR2xuYUhSSGNtRjVKMXh1SUNBZ0lId2dKMnhwWjJoMFYyRnphQ2RjYmlBZ0lDQjhJQ2R0WVhKdmIyNG5YRzRnSUNBZ2ZDQW5iV2xrYm1sbmFIUW5YRzRnSUNBZ2ZDQW5ibUYyZVNkY2JpQWdJQ0I4SUNkdmJHbDJaU2RjYmlBZ0lDQjhJQ2R2Y21GdVoyVW5YRzRnSUNBZ2ZDQW5iM0pqYUdsa0oxeHVJQ0FnSUh3Z0ozQnBibVVuWEc0Z0lDQWdmQ0FuY0hWeWNHeGxKMXh1SUNBZ0lId2dKM0psWkNkY2JpQWdJQ0I4SUNkMGNtRnVjM0JoY21WdWRDZGNiaUFnSUNCOElDZDBjbUZ1YzNCaGNtVnVkRVJoY210SGNtRjVKMXh1SUNBZ0lId2dKM2RoZEdWeWJXVnNiMjRuWEc0Z0lDQWdmQ0FuZDJocGRHVW5MRnh1SUNCbWFYUS9PaUJpYjI5c1pXRnVMRnh1SUNCbWJHVjRQem9nUm14bGVDeGNiaUFnYUdWcFoyaDBQem9nUkdsdFpXNXphVzl1TEZ4dUlDQnFkWE4wYVdaNVEyOXVkR1Z1ZEQ4NklFcDFjM1JwWm5sRGIyNTBaVzUwTEZ4dUlDQnNaV1owUHpvZ1ltOXZiR1ZoYml4Y2JseHVJQ0J0WVhKbmFXNVRkR0Z5ZEQ4NklFMWhjbWRwYml4Y2JpQWdiV0Z5WjJsdVJXNWtQem9nVFdGeVoybHVMRnh1WEc0Z0lHMWhjbWRwYmo4NklFMWhjbWRwYml4Y2JpQWdiV0Z5WjJsdVZHOXdQem9nVFdGeVoybHVMRnh1SUNCdFlYSm5hVzVTYVdkb2REODZJRTFoY21kcGJpeGNiaUFnYldGeVoybHVRbTkwZEc5dFB6b2dUV0Z5WjJsdUxGeHVJQ0J0WVhKbmFXNU1aV1owUHpvZ1RXRnlaMmx1TEZ4dVhHNGdJSE50VFdGeVoybHVQem9nVFdGeVoybHVMRnh1SUNCemJVMWhjbWRwYmxSdmNEODZJRTFoY21kcGJpeGNiaUFnYzIxTllYSm5hVzVTYVdkb2REODZJRTFoY21kcGJpeGNiaUFnYzIxTllYSm5hVzVDYjNSMGIyMC9PaUJOWVhKbmFXNHNYRzRnSUhOdFRXRnlaMmx1VEdWbWREODZJRTFoY21kcGJpeGNibHh1SUNCdFpFMWhjbWRwYmo4NklFMWhjbWRwYml4Y2JpQWdiV1JOWVhKbmFXNVViM0EvT2lCTllYSm5hVzRzWEc0Z0lHMWtUV0Z5WjJsdVVtbG5hSFEvT2lCTllYSm5hVzRzWEc0Z0lHMWtUV0Z5WjJsdVFtOTBkRzl0UHpvZ1RXRnlaMmx1TEZ4dUlDQnRaRTFoY21kcGJreGxablEvT2lCTllYSm5hVzRzWEc1Y2JpQWdiR2ROWVhKbmFXNC9PaUJOWVhKbmFXNHNYRzRnSUd4blRXRnlaMmx1Vkc5d1B6b2dUV0Z5WjJsdUxGeHVJQ0JzWjAxaGNtZHBibEpwWjJoMFB6b2dUV0Z5WjJsdUxGeHVJQ0JzWjAxaGNtZHBia0p2ZEhSdmJUODZJRTFoY21kcGJpeGNiaUFnYkdkTllYSm5hVzVNWldaMFB6b2dUV0Z5WjJsdUxGeHVYRzRnSUcxaGVFaGxhV2RvZEQ4NklFUnBiV1Z1YzJsdmJpeGNiaUFnYldGNFYybGtkR2cvT2lCRWFXMWxibk5wYjI0c1hHNGdJRzFwYmtobGFXZG9kRDg2SUVScGJXVnVjMmx2Yml4Y2JpQWdiV2x1VjJsa2RHZy9PaUJFYVcxbGJuTnBiMjRzWEc1Y2JpQWdiM0JoWTJsMGVUODZJREFnZkNBd0xqRWdmQ0F3TGpJZ2ZDQXdMak1nZkNBd0xqUWdmQ0F3TGpVZ2ZDQXdMallnZkNBd0xqY2dmQ0F3TGpnZ2ZDQXdMamtnZkNBeExGeHVYRzRnSUc5MlpYSm1iRzkzUHpvZ1QzWmxjbVpzYjNjc1hHNWNiaUFnY0dGa1pHbHVaejg2SUZCaFpHUnBibWNzWEc0Z0lITnRVR0ZrWkdsdVp6ODZJRkJoWkdScGJtY3NYRzRnSUcxa1VHRmtaR2x1Wno4NklGQmhaR1JwYm1jc1hHNGdJR3huVUdGa1pHbHVaejg2SUZCaFpHUnBibWNzWEc1Y2JpQWdjR0ZrWkdsdVoxZy9PaUJRWVdSa2FXNW5MRnh1SUNCemJWQmhaR1JwYm1kWVB6b2dVR0ZrWkdsdVp5eGNiaUFnYldSUVlXUmthVzVuV0Q4NklGQmhaR1JwYm1jc1hHNGdJR3huVUdGa1pHbHVaMWcvT2lCUVlXUmthVzVuTEZ4dVhHNGdJSEJoWkdScGJtZFpQem9nVUdGa1pHbHVaeXhjYmlBZ2MyMVFZV1JrYVc1bldUODZJRkJoWkdScGJtY3NYRzRnSUcxa1VHRmtaR2x1WjFrL09pQlFZV1JrYVc1bkxGeHVJQ0JzWjFCaFpHUnBibWRaUHpvZ1VHRmtaR2x1Wnl4Y2JseHVJQ0J3YjNOcGRHbHZiajg2SUNkemRHRjBhV01uSUh3Z0oyRmljMjlzZFhSbEp5QjhJQ2R5Wld4aGRHbDJaU2NnZkNBblptbDRaV1FuTEZ4dUlDQnlhV2RvZEQ4NklHSnZiMnhsWVc0c1hHNGdJSEp2ZFc1a2FXNW5Qem9nVW05MWJtUnBibWNzWEc0Z0lIUnZjRDg2SUdKdmIyeGxZVzRzWEc0Z0lIZHBaSFJvUHpvZ1JHbHRaVzV6YVc5dUxGeHVJQ0IzY21Gd1B6b2dZbTl2YkdWaGJpeGNibjA3WEc1Y2JpOHZJQzB0WEc1Y2JpOHFYRzVjYmlNZ1ZISmhibk5tYjNKdFpYSnpYRzVjYmxSb2FYTWdhWE1nZDJobGNtVWdkR2hsSUcxbFlYUWdZVzVrSUhSb1pTQmliMjVsY3lCdlppQkNiM2duY3lCMGNtRnVjMlp2Y20xeklHRnlaUzRnV1c5MUlHTmhiaUJ5WldGa0lHMXZjbVVnWVdKdmRYUWdkR2hsSUVSVFRDQnBiaUJnTGk5MGNtRnVjMlp2Y20xekxtcHpZQ3dnWW5WMElHSmhjMmxqWVd4c2VTQjBhR1Y1SUdGeVpTQmhJSE50WVd4c0lHUmxZMnhoY21GMGFYWmxJSGRoZVNCdlppQnpjR1ZqYVdaNWFXNW5JR2h2ZHlCaElIQnliM0JsY25SNUlDaHBMbVV1SUdCdFlYSm5hVzVVYjNBOWV6UjlZQ2tnWjJWMGN5QjBkWEp1WldRZ2FXNTBieUJoSUVOVFV5QmpiR0Z6Y3lBb1lHMWhjbWRwYmxSdmNEUmdLUzVjYmx4dVZHaGxjbVVuY3lCaElHeHBkSFJzWlNCd2NtVmhiV0pzWlNCb1pYSmxMQ0JpZFhRZ2FYUWdZM1ZzYldsdVlYUmxjeUJwYmlCaElHSnBaeUJ2WW1wbFkzUWdiV0Z3Y0dsdVp5QjBhR1VnWVdOMGRXRnNJSEJ5YjNCbGNuUjVJRzVoYldWeklIUnZJSFJvWlNCMGNtRnVjMlp2Y20xbGNpQjJZV3gxWlhNdVhHNWNiaW92WEc1Y2JtTnZibk4wSUhSeVlXNXpabTl5YlU1MWJXSmxjazl5VUdGemMzUm9jbTkxWjJnZ1BTQW9jMlZzWldOMGIzSTZJSE4wY21sdVp5a2dQVDRnS0Z4dUlDQnRPaUJOWVhKbmFXNWNiaWs2SUZOMGVXeGxJRDArSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ0SUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCaWFXNWtLSEpoYm1kbFYybDBhRzkxZEZwbGNtOG9jMlZzWldOMGIzSXBMQ0IzYUdsMFpYTndZV05sS1NodEtUdGNiaUFnZlZ4dVhHNGdJR2xtSUNodElEMDlQU0FuWVhWMGJ5Y3BJSHRjYmlBZ0lDQnlaWFIxY200Z1puSnZiVU5zWVhOelRtRnRaU2gzYUdsMFpYTndZV05sVzJBa2UzTmxiR1ZqZEc5eWZVRjFkRzlnWFNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2FXUmxiblJwZEhrb0tUdGNibjA3WEc1amIyNXpkQ0J5YjNWdVpHbHVaeUE5SUNoeU9pQlNiM1Z1WkdsdVp5azZJRk4wZVd4bElEMCtJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnlJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJpYVc1a0tISmhibWRsS0NkeWIzVnVaR2x1WnljcExDQmliM0prWlhKektTaHlLVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaHlJRDA5UFNBblkybHlZMnhsSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtY205dFEyeGhjM05PWVcxbEtHSnZjbVJsY25NdVkybHlZMnhsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h5SUQwOVBTQW5jR2xzYkNjcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5KdmJVTnNZWE56VG1GdFpTaGliM0prWlhKekxuQnBiR3dwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdsa1pXNTBhWFI1S0NrN1hHNTlPMXh1WEc1amIyNXpkQ0J0WVhKbmFXNVRkR0Z5ZENBOUlIUnlZVzV6Wm05eWJVNTFiV0psY2s5eVVHRnpjM1JvY205MVoyZ29KMjFoY21kcGJsTjBZWEowSnlrN1hHNWpiMjV6ZENCdFlYSm5hVzVGYm1RZ1BTQjBjbUZ1YzJadmNtMU9kVzFpWlhKUGNsQmhjM04wYUhKdmRXZG9LQ2R0WVhKbmFXNUZibVFuS1R0Y2JtTnZibk4wSUcxaGNtZHBibFJ2Y0NBOUlIUnlZVzV6Wm05eWJVNTFiV0psY2s5eVVHRnpjM1JvY205MVoyZ29KMjFoY21kcGJsUnZjQ2NwTzF4dVkyOXVjM1FnYldGeVoybHVVbWxuYUhRZ1BTQjBjbUZ1YzJadmNtMU9kVzFpWlhKUGNsQmhjM04wYUhKdmRXZG9LQ2R0WVhKbmFXNVNhV2RvZENjcE8xeHVZMjl1YzNRZ2JXRnlaMmx1UW05MGRHOXRJRDBnZEhKaGJuTm1iM0p0VG5WdFltVnlUM0pRWVhOemRHaHliM1ZuYUNnbmJXRnlaMmx1UW05MGRHOXRKeWs3WEc1amIyNXpkQ0J0WVhKbmFXNU1aV1owSUQwZ2RISmhibk5tYjNKdFRuVnRZbVZ5VDNKUVlYTnpkR2h5YjNWbmFDZ25iV0Z5WjJsdVRHVm1kQ2NwTzF4dVkyOXVjM1FnYldGeVoybHVJRDBnZFc1cGIyNG9iV0Z5WjJsdVZHOXdMQ0J0WVhKbmFXNUNiM1IwYjIwc0lHMWhjbWRwYmt4bFpuUXNJRzFoY21kcGJsSnBaMmgwS1R0Y2JseHVZMjl1YzNRZ2MyMU5ZWEpuYVc1VWIzQWdQU0IwY21GdWMyWnZjbTFPZFcxaVpYSlBjbEJoYzNOMGFISnZkV2RvS0NkemJVMWhjbWRwYmxSdmNDY3BPMXh1WTI5dWMzUWdjMjFOWVhKbmFXNVNhV2RvZENBOUlIUnlZVzV6Wm05eWJVNTFiV0psY2s5eVVHRnpjM1JvY205MVoyZ29KM050VFdGeVoybHVVbWxuYUhRbktUdGNibU52Ym5OMElITnRUV0Z5WjJsdVFtOTBkRzl0SUQwZ2RISmhibk5tYjNKdFRuVnRZbVZ5VDNKUVlYTnpkR2h5YjNWbmFDZ25jMjFOWVhKbmFXNUNiM1IwYjIwbktUdGNibU52Ym5OMElITnRUV0Z5WjJsdVRHVm1kQ0E5SUhSeVlXNXpabTl5YlU1MWJXSmxjazl5VUdGemMzUm9jbTkxWjJnb0ozTnRUV0Z5WjJsdVRHVm1kQ2NwTzF4dVkyOXVjM1FnYzIxTllYSm5hVzRnUFNCMWJtbHZiaWhjYmlBZ2MyMU5ZWEpuYVc1VWIzQXNYRzRnSUhOdFRXRnlaMmx1UW05MGRHOXRMRnh1SUNCemJVMWhjbWRwYmt4bFpuUXNYRzRnSUhOdFRXRnlaMmx1VW1sbmFIUmNiaWs3WEc1Y2JtTnZibk4wSUcxa1RXRnlaMmx1Vkc5d0lEMGdkSEpoYm5ObWIzSnRUblZ0WW1WeVQzSlFZWE56ZEdoeWIzVm5hQ2duYldSTllYSm5hVzVVYjNBbktUdGNibU52Ym5OMElHMWtUV0Z5WjJsdVVtbG5hSFFnUFNCMGNtRnVjMlp2Y20xT2RXMWlaWEpQY2xCaGMzTjBhSEp2ZFdkb0tDZHRaRTFoY21kcGJsSnBaMmgwSnlrN1hHNWpiMjV6ZENCdFpFMWhjbWRwYmtKdmRIUnZiU0E5SUhSeVlXNXpabTl5YlU1MWJXSmxjazl5VUdGemMzUm9jbTkxWjJnb0oyMWtUV0Z5WjJsdVFtOTBkRzl0SnlrN1hHNWpiMjV6ZENCdFpFMWhjbWRwYmt4bFpuUWdQU0IwY21GdWMyWnZjbTFPZFcxaVpYSlBjbEJoYzNOMGFISnZkV2RvS0NkdFpFMWhjbWRwYmt4bFpuUW5LVHRjYm1OdmJuTjBJRzFrVFdGeVoybHVJRDBnZFc1cGIyNG9YRzRnSUcxa1RXRnlaMmx1Vkc5d0xGeHVJQ0J0WkUxaGNtZHBia0p2ZEhSdmJTeGNiaUFnYldSTllYSm5hVzVNWldaMExGeHVJQ0J0WkUxaGNtZHBibEpwWjJoMFhHNHBPMXh1WEc1amIyNXpkQ0JzWjAxaGNtZHBibFJ2Y0NBOUlIUnlZVzV6Wm05eWJVNTFiV0psY2s5eVVHRnpjM1JvY205MVoyZ29KMnhuVFdGeVoybHVWRzl3SnlrN1hHNWpiMjV6ZENCc1owMWhjbWRwYmxKcFoyaDBJRDBnZEhKaGJuTm1iM0p0VG5WdFltVnlUM0pRWVhOemRHaHliM1ZuYUNnbmJHZE5ZWEpuYVc1U2FXZG9kQ2NwTzF4dVkyOXVjM1FnYkdkTllYSm5hVzVDYjNSMGIyMGdQU0IwY21GdWMyWnZjbTFPZFcxaVpYSlBjbEJoYzNOMGFISnZkV2RvS0Nkc1owMWhjbWRwYmtKdmRIUnZiU2NwTzF4dVkyOXVjM1FnYkdkTllYSm5hVzVNWldaMElEMGdkSEpoYm5ObWIzSnRUblZ0WW1WeVQzSlFZWE56ZEdoeWIzVm5hQ2duYkdkTllYSm5hVzVNWldaMEp5azdYRzVqYjI1emRDQnNaMDFoY21kcGJpQTlJSFZ1YVc5dUtGeHVJQ0JzWjAxaGNtZHBibFJ2Y0N4Y2JpQWdiR2ROWVhKbmFXNUNiM1IwYjIwc1hHNGdJR3huVFdGeVoybHVUR1ZtZEN4Y2JpQWdiR2ROWVhKbmFXNVNhV2RvZEZ4dUtUdGNibHh1WTI5dWMzUWdjR0ZrWkdsdVoxZ2dQU0JpYVc1a0tISmhibWRsVjJsMGFHOTFkRnBsY204b0ozQmhaR1JwYm1kWUp5a3NJSGRvYVhSbGMzQmhZMlVwTzF4dVkyOXVjM1FnY0dGa1pHbHVaMWtnUFNCaWFXNWtLSEpoYm1kbFYybDBhRzkxZEZwbGNtOG9KM0JoWkdScGJtZFpKeWtzSUhkb2FYUmxjM0JoWTJVcE8xeHVZMjl1YzNRZ2NHRmtaR2x1WnlBOUlIVnVhVzl1S0hCaFpHUnBibWRZTENCd1lXUmthVzVuV1NrN1hHNWNibU52Ym5OMElITnRVR0ZrWkdsdVoxZ2dQU0JpYVc1a0tISmhibWRsVjJsMGFHOTFkRnBsY204b0ozTnRVR0ZrWkdsdVoxZ25LU3dnZDJocGRHVnpjR0ZqWlNrN1hHNWpiMjV6ZENCemJWQmhaR1JwYm1kWklEMGdZbWx1WkNoeVlXNW5aVmRwZEdodmRYUmFaWEp2S0NkemJWQmhaR1JwYm1kWkp5a3NJSGRvYVhSbGMzQmhZMlVwTzF4dVkyOXVjM1FnYzIxUVlXUmthVzVuSUQwZ2RXNXBiMjRvYzIxUVlXUmthVzVuV0N3Z2MyMVFZV1JrYVc1bldTazdYRzVjYm1OdmJuTjBJRzFrVUdGa1pHbHVaMWdnUFNCaWFXNWtLSEpoYm1kbFYybDBhRzkxZEZwbGNtOG9KMjFrVUdGa1pHbHVaMWduS1N3Z2QyaHBkR1Z6Y0dGalpTazdYRzVqYjI1emRDQnRaRkJoWkdScGJtZFpJRDBnWW1sdVpDaHlZVzVuWlZkcGRHaHZkWFJhWlhKdktDZHRaRkJoWkdScGJtZFpKeWtzSUhkb2FYUmxjM0JoWTJVcE8xeHVZMjl1YzNRZ2JXUlFZV1JrYVc1bklEMGdkVzVwYjI0b2JXUlFZV1JrYVc1bldDd2diV1JRWVdSa2FXNW5XU2s3WEc1Y2JtTnZibk4wSUd4blVHRmtaR2x1WjFnZ1BTQmlhVzVrS0hKaGJtZGxWMmwwYUc5MWRGcGxjbThvSjJ4blVHRmtaR2x1WjFnbktTd2dkMmhwZEdWemNHRmpaU2s3WEc1amIyNXpkQ0JzWjFCaFpHUnBibWRaSUQwZ1ltbHVaQ2h5WVc1blpWZHBkR2h2ZFhSYVpYSnZLQ2RzWjFCaFpHUnBibWRaSnlrc0lIZG9hWFJsYzNCaFkyVXBPMXh1WTI5dWMzUWdiR2RRWVdSa2FXNW5JRDBnZFc1cGIyNG9iR2RRWVdSa2FXNW5XQ3dnYkdkUVlXUmthVzVuV1NrN1hHNWNibU52Ym5OMElHOXdZV05wZEhsTllYQWdQU0J0WVhCRGJHRnpjMDVoYldVb2JtRnRaU0E5UGlCemRIbHNaWE5iYm1GdFpWMHBPMXh1WTI5dWMzUWdiM0JoWTJsMGVTQTlJSFpoYkNBOVBpQjdYRzRnSUdsbUlDaDJZV3dnUGlBd0lDWW1JSFpoYkNBOElERXBJSHRjYmlBZ0lDQnlaWFIxY200Z2IzQmhZMmwwZVUxaGNDaHlZVzVuWlNnbmIzQmhZMmwwZVRBbktTaDJZV3dnS2lBeE1Da3BPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnZjR0ZqYVhSNVRXRndLSEpoYm1kbEtDZHZjR0ZqYVhSNUp5a29kbUZzS1NrN1hHNTlPMXh1WEc0dktseHVYRzVVYUdWelpTQm1kVzVqZEdsdmJuTWdZWEpsSUd4bFoyRmplUzRnU1Nka0lHeHBhMlVnZEc4Z1oyVjBJSEpwWkNCdlppQnRiM04wSUc5bUlIUm9hWE1nWm1sc1pTZHpJR1JsY0dWdVpHVnVZM2tnYjI0Z2FXMXdiM0owYVc1bklHQXVMM04wZVd4bExtcHpZQ0JrYVhKbFkzUnNlU0J2Ym1ObElIUm9aWE5sSUdGeVpTQnlaVzF2ZG1Wa0xseHVYRzRxTDF4dVhHNWpiMjV6ZENCd2NtVm1hWGdnUFNBb2NISmxPaUJ6ZEhKcGJtY3BJRDArSUcxaGNFTnNZWE56VG1GdFpTaHVZVzFsSUQwK0lHQWtlM0J5Wlgwa2UyNWhiV1Y5WUNrN1hHNWpiMjV6ZENCa2FYTndiR0Y1SUQwZ2RtRnNkV1VnUFQ0Z2UxeHVJQ0J6ZDJsMFkyZ2dLSFpoYkhWbEtTQjdYRzRnSUNBZ1kyRnpaU0FuWm14bGVDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1puSnZiVU5zWVhOelRtRnRaU2duUkdsemNHeGhlVVpzWlhnbkxDQW5SR2x5WldOMGFXOXVVbTkzSnlrN1hHNGdJQ0FnWTJGelpTQW5abXhsZUVOdmJIVnRiaWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabkp2YlVOc1lYTnpUbUZ0WlNnblJHbHpjR3hoZVVac1pYZ25MQ0FuUkdseVpXTjBhVzl1UTI5c2RXMXVKeWs3WEc0Z0lDQWdZMkZ6WlNBbmFXNXNhVzVsUW14dlkyc25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWnliMjFEYkdGemMwNWhiV1VvSjBScGMzQnNZWGxKYm14cGJtVkNiRzlqYXljcE8xeHVJQ0FnSUdOaGMyVWdKM1pwYzNWaGJHeDVTR2xrWkdWdUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWNtOXRRMnhoYzNOT1lXMWxLQ2RFYVhOd2JHRjVWbWx6ZFdGc2JIbElhV1JrWlc0bktUdGNiaUFnSUNCallYTmxJR1poYkhObE9seHVJQ0FnSUNBZ2NtVjBkWEp1SUdaeWIyMURiR0Z6YzA1aGJXVW9KMFJwYzNCc1lYbE9iMjVsSnlrN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQzhxSUdKc2IyTnJJQ292WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabkp2YlVOc1lYTnpUbUZ0WlNnblJHbHpjR3hoZVVKc2IyTnJKeWs3WEc0Z0lIMWNibjA3WEc1amIyNXpkQ0JqYjJ4MWJXNGdQU0J5WVc1blpTZ25RMjlzSnlrN1hHNWNiaThxWEc1Y2JrbDBKM01nY0hKbFptVnlZV0pzWlNCMGJ5QndkWFFnYm1WM0lIQnliM0JsY25ScFpYTWdhVzUwYnlCMGFHRjBJRzlpYW1WamRDQmthWEpsWTNSc2VTQnFkWE4wSUhOdklHbDBKM01nWldGemFXVnlJSFJ2SUhKbFlXUXVYRzVjYmlvdlhHNWNibU52Ym5OMElIQnliM0JVYjBadUlEMGdlMXh1SUNCNGN6b2dkbUZzZFdVZ1BUNGdlMXh1SUNBZ0lHbG1JQ2doZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsMGVTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGd1EyeGhjM05PWVcxbEtHTWdQVDRnYzNSNWJHVnpXMk5kS1NoY2JpQWdJQ0FnSUhCeVpXWnBlQ2duZUhNbktTaGNiaUFnSUNBZ0lDQWdZMjl1WTJGMEtGdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTNWpiMngxYlc0Z1B5QmpiMngxYlc0b2RtRnNkV1V1WTI5c2RXMXVLU0E2SUdsa1pXNTBhWFI1S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlIWmhiSFZsTG1ScGMzQnNZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHUnBjM0JzWVhrb2RtRnNkV1V1WkdsemNHeGhlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dhV1JsYm5ScGRIa29LU3hjYmlBZ0lDQWdJQ0FnWFNsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwTzF4dUlDQjlMRnh1SUNCemJUb2dkbUZzZFdVZ1BUNGdlMXh1SUNBZ0lHbG1JQ2doZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsMGVTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGd1EyeGhjM05PWVcxbEtHTWdQVDRnYzNSNWJHVnpXMk5kS1NoY2JpQWdJQ0FnSUhCeVpXWnBlQ2duYzIwbktTaGNiaUFnSUNBZ0lDQWdZMjl1WTJGMEtGdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTNWpiMngxYlc0Z1B5QmpiMngxYlc0b2RtRnNkV1V1WTI5c2RXMXVLU0E2SUdsa1pXNTBhWFI1S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlIWmhiSFZsTG1ScGMzQnNZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHUnBjM0JzWVhrb2RtRnNkV1V1WkdsemNHeGhlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dhV1JsYm5ScGRIa29LU3hjYmlBZ0lDQWdJQ0FnWFNsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwTzF4dUlDQjlMRnh1SUNCdFpEb2dkbUZzZFdVZ1BUNGdlMXh1SUNBZ0lHbG1JQ2doZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsMGVTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGd1EyeGhjM05PWVcxbEtHTWdQVDRnYzNSNWJHVnpXMk5kS1NoY2JpQWdJQ0FnSUhCeVpXWnBlQ2duYldRbktTaGNiaUFnSUNBZ0lDQWdZMjl1WTJGMEtGdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTNWpiMngxYlc0Z1B5QmpiMngxYlc0b2RtRnNkV1V1WTI5c2RXMXVLU0E2SUdsa1pXNTBhWFI1S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlIWmhiSFZsTG1ScGMzQnNZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHUnBjM0JzWVhrb2RtRnNkV1V1WkdsemNHeGhlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dhV1JsYm5ScGRIa29LU3hjYmlBZ0lDQWdJQ0FnWFNsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwTzF4dUlDQjlMRnh1SUNCc1p6b2dkbUZzZFdVZ1BUNGdlMXh1SUNBZ0lHbG1JQ2doZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsMGVTZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYldGd1EyeGhjM05PWVcxbEtHTWdQVDRnYzNSNWJHVnpXMk5kS1NoY2JpQWdJQ0FnSUhCeVpXWnBlQ2duYkdjbktTaGNiaUFnSUNBZ0lDQWdZMjl1WTJGMEtGdGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTNWpiMngxYlc0Z1B5QmpiMngxYlc0b2RtRnNkV1V1WTI5c2RXMXVLU0E2SUdsa1pXNTBhWFI1S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdkSGx3Wlc5bUlIWmhiSFZsTG1ScGMzQnNZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHUnBjM0JzWVhrb2RtRnNkV1V1WkdsemNHeGhlU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dhV1JsYm5ScGRIa29LU3hjYmlBZ0lDQWdJQ0FnWFNsY2JpQWdJQ0FnSUNsY2JpQWdJQ0FwTzF4dUlDQjlMRnh1WEc0Z0lHUnBjM0JzWVhrNklHMWhjSEJwYm1jb2UxeHVJQ0FnSUc1dmJtVTZJSE4wZVd4bGN5NTRjMFJwYzNCc1lYbE9iMjVsTEZ4dUlDQWdJR1pzWlhnNklITjBlV3hsY3k1NGMwUnBjM0JzWVhsR2JHVjRMRnh1SUNBZ0lHSnNiMk5yT2lCemRIbHNaWE11ZUhORWFYTndiR0Y1UW14dlkyc3NYRzRnSUNBZ2FXNXNhVzVsUW14dlkyczZJSE4wZVd4bGN5NTRjMFJwYzNCc1lYbEpibXhwYm1WQ2JHOWpheXhjYmlBZ0lDQjJhWE4xWVd4c2VVaHBaR1JsYmpvZ2MzUjViR1Z6TG5oelJHbHpjR3hoZVZacGMzVmhiR3g1U0dsa1pHVnVMRnh1SUNCOUtTeGNiaUFnWTI5c2RXMXVPaUJpYVc1a0tISmhibWRsS0NkNGMwTnZiQ2NwTENCemRIbHNaWE1wTEZ4dUlDQmthWEpsWTNScGIyNDZJRzFoY0hCcGJtY29lMXh1SUNBZ0lISnZkem9nYzNSNWJHVnpMbmh6UkdseVpXTjBhVzl1VW05M0xGeHVJQ0FnSUdOdmJIVnRiam9nYzNSNWJHVnpMbmh6UkdseVpXTjBhVzl1UTI5c2RXMXVMRnh1SUNCOUtTeGNibHh1SUNCemJVUnBjM0JzWVhrNklHMWhjSEJwYm1jb2UxeHVJQ0FnSUc1dmJtVTZJSE4wZVd4bGN5NXpiVVJwYzNCc1lYbE9iMjVsTEZ4dUlDQWdJR1pzWlhnNklITjBlV3hsY3k1emJVUnBjM0JzWVhsR2JHVjRMRnh1SUNBZ0lHSnNiMk5yT2lCemRIbHNaWE11YzIxRWFYTndiR0Y1UW14dlkyc3NYRzRnSUNBZ2FXNXNhVzVsUW14dlkyczZJSE4wZVd4bGN5NXpiVVJwYzNCc1lYbEpibXhwYm1WQ2JHOWpheXhjYmlBZ0lDQjJhWE4xWVd4c2VVaHBaR1JsYmpvZ2MzUjViR1Z6TG5OdFJHbHpjR3hoZVZacGMzVmhiR3g1U0dsa1pHVnVMRnh1SUNCOUtTeGNiaUFnYzIxRGIyeDFiVzQ2SUdKcGJtUW9jbUZ1WjJVb0ozTnRRMjlzSnlrc0lITjBlV3hsY3lrc1hHNGdJSE50UkdseVpXTjBhVzl1T2lCdFlYQndhVzVuS0h0Y2JpQWdJQ0J5YjNjNklITjBlV3hsY3k1emJVUnBjbVZqZEdsdmJsSnZkeXhjYmlBZ0lDQmpiMngxYlc0NklITjBlV3hsY3k1emJVUnBjbVZqZEdsdmJrTnZiSFZ0Yml4Y2JpQWdmU2tzWEc1Y2JpQWdiV1JFYVhOd2JHRjVPaUJ0WVhCd2FXNW5LSHRjYmlBZ0lDQnViMjVsT2lCemRIbHNaWE11YldSRWFYTndiR0Y1VG05dVpTeGNiaUFnSUNCbWJHVjRPaUJ6ZEhsc1pYTXViV1JFYVhOd2JHRjVSbXhsZUN4Y2JpQWdJQ0JpYkc5amF6b2djM1I1YkdWekxtMWtSR2x6Y0d4aGVVSnNiMk5yTEZ4dUlDQWdJR2x1YkdsdVpVSnNiMk5yT2lCemRIbHNaWE11YldSRWFYTndiR0Y1U1c1c2FXNWxRbXh2WTJzc1hHNGdJQ0FnZG1semRXRnNiSGxJYVdSa1pXNDZJSE4wZVd4bGN5NXRaRVJwYzNCc1lYbFdhWE4xWVd4c2VVaHBaR1JsYml4Y2JpQWdmU2tzWEc0Z0lHMWtRMjlzZFcxdU9pQmlhVzVrS0hKaGJtZGxLQ2R0WkVOdmJDY3BMQ0J6ZEhsc1pYTXBMRnh1SUNCdFpFUnBjbVZqZEdsdmJqb2diV0Z3Y0dsdVp5aDdYRzRnSUNBZ2NtOTNPaUJ6ZEhsc1pYTXViV1JFYVhKbFkzUnBiMjVTYjNjc1hHNGdJQ0FnWTI5c2RXMXVPaUJ6ZEhsc1pYTXViV1JFYVhKbFkzUnBiMjVEYjJ4MWJXNHNYRzRnSUgwcExGeHVYRzRnSUd4blJHbHpjR3hoZVRvZ2JXRndjR2x1WnloN1hHNGdJQ0FnYm05dVpUb2djM1I1YkdWekxteG5SR2x6Y0d4aGVVNXZibVVzWEc0Z0lDQWdabXhsZURvZ2MzUjViR1Z6TG14blJHbHpjR3hoZVVac1pYZ3NYRzRnSUNBZ1lteHZZMnM2SUhOMGVXeGxjeTVzWjBScGMzQnNZWGxDYkc5amF5eGNiaUFnSUNCcGJteHBibVZDYkc5amF6b2djM1I1YkdWekxteG5SR2x6Y0d4aGVVbHViR2x1WlVKc2IyTnJMRnh1SUNBZ0lIWnBjM1ZoYkd4NVNHbGtaR1Z1T2lCemRIbHNaWE11YkdkRWFYTndiR0Y1Vm1semRXRnNiSGxJYVdSa1pXNHNYRzRnSUgwcExGeHVJQ0JzWjBOdmJIVnRiam9nWW1sdVpDaHlZVzVuWlNnbmJHZERiMnduS1N3Z2MzUjViR1Z6S1N4Y2JpQWdiR2RFYVhKbFkzUnBiMjQ2SUcxaGNIQnBibWNvZTF4dUlDQWdJSEp2ZHpvZ2MzUjViR1Z6TG14blJHbHlaV04wYVc5dVVtOTNMRnh1SUNBZ0lHTnZiSFZ0YmpvZ2MzUjViR1Z6TG14blJHbHlaV04wYVc5dVEyOXNkVzF1TEZ4dUlDQjlLU3hjYmx4dUlDQmhiR2xuYmtOdmJuUmxiblE2SUcxaGNIQnBibWNvZTF4dUlDQWdJSE4wWVhKME9pQnNZWGx2ZFhRdVkyOXVkR1Z1ZEZOMFlYSjBMRnh1SUNBZ0lHVnVaRG9nYkdGNWIzVjBMbU52Ym5SbGJuUkZibVFzWEc0Z0lDQWdZMlZ1ZEdWeU9pQnNZWGx2ZFhRdVkyOXVkR1Z1ZEVObGJuUmxjaXhjYmlBZ0lDQmlaWFIzWldWdU9pQnNZWGx2ZFhRdVkyOXVkR1Z1ZEVKbGRIZGxaVzRzWEc0Z0lDQWdZWEp2ZFc1a09pQnNZWGx2ZFhRdVkyOXVkR1Z1ZEVGeWIzVnVaQ3hjYmlBZ0lDQmxkbVZ1YkhrNklHeGhlVzkxZEM1amIyNTBaVzUwUlhabGJteDVMRnh1SUNBZ0lDOHZJR1JsWm1GMWJIUTZJSE4wY21WMFkyaGNiaUFnZlNrc1hHNGdJR0ZzYVdkdVNYUmxiWE02SUcxaGNIQnBibWNvZTF4dUlDQWdJSE4wWVhKME9pQnNZWGx2ZFhRdWFYUmxiWE5UZEdGeWRDeGNiaUFnSUNCbGJtUTZJR3hoZVc5MWRDNXBkR1Z0YzBWdVpDeGNiaUFnSUNCalpXNTBaWEk2SUd4aGVXOTFkQzVwZEdWdGMwTmxiblJsY2l4Y2JpQWdJQ0JpWVhObGJHbHVaVG9nYkdGNWIzVjBMbWwwWlcxelFtRnpaV3hwYm1Vc1hHNGdJQ0FnTHk4Z1pHVm1ZWFZzZERvZ2MzUnlaWFJqYUZ4dUlDQjlLU3hjYmlBZ1lXeHBaMjVUWld4bU9pQnRZWEJ3YVc1bktIdGNiaUFnSUNCemRHRnlkRG9nYkdGNWIzVjBMbk5sYkdaVGRHRnlkQ3hjYmlBZ0lDQmxibVE2SUd4aGVXOTFkQzV6Wld4bVJXNWtMRnh1SUNBZ0lHTmxiblJsY2pvZ2JHRjViM1YwTG5ObGJHWkRaVzUwWlhJc1hHNGdJQ0FnWW1GelpXeHBibVU2SUd4aGVXOTFkQzV6Wld4bVFtRnpaV3hwYm1Vc1hHNGdJQ0FnYzNSeVpYUmphRG9nYkdGNWIzVjBMbk5sYkdaVGRISmxkR05vTEZ4dUlDQWdJQzh2SUdSbFptRjFiSFE2SUdGMWRHOWNiaUFnZlNrc1hHNGdJR0p2ZEhSdmJUb2dkRzluWjJ4bEtHeGhlVzkxZEM1aWIzUjBiMjB3S1N4Y2JpQWdZbTl5WkdWeVUybDZaVG9nZG1Gc2RXVWdQVDVjYmlBZ0lDQmpiMjVqWVhRb1cxeHVJQ0FnSUNBZ2JXRndjR2x1WnloN1hHNGdJQ0FnSUNBZ0lITnRPaUJpYjNKa1pYSnpMbk5wZW1WVGJTeGNiaUFnSUNBZ0lDQWdiR2M2SUdKdmNtUmxjbk11YzJsNlpVeG5MRnh1SUNBZ0lDQWdJQ0F2THlCa1pXWmhkV3gwT2lCdWIyNWxYRzRnSUNBZ0lDQjlLU2gyWVd4MVpTa3NYRzRnSUNBZ0lDQm1jbTl0UTJ4aGMzTk9ZVzFsS0dKdmNtUmxjbk11YzI5c2FXUXBMRnh1SUNBZ0lDQWdabkp2YlVOc1lYTnpUbUZ0WlNoaWIzSmtaWEp6TG1KdmNtUmxja052Ykc5eVRHbG5hSFJIY21GNUtTeGNiaUFnSUNCZEtTeGNiaUFnWTI5c2IzSTZJRzFoY0hCcGJtY29lMXh1SUNBZ0lHSnNkV1U2SUdOdmJHOXljeTVpYkhWbFFtY3NYRzRnSUNBZ1pHRnlhMGR5WVhrNklHTnZiRzl5Y3k1a1lYSnJSM0poZVVKbkxGeHVJQ0FnSUhCcGJtVTZJR052Ykc5eWN5NXdhVzVsUW1jc1hHNGdJQ0FnWjNKaGVUb2dZMjlzYjNKekxtZHlZWGxDWnl4Y2JpQWdJQ0J5WldRNklHTnZiRzl5Y3k1eVpXUkNaeXhjYmlBZ0lDQnZiR2wyWlRvZ1kyOXNiM0p6TG05c2FYWmxRbWNzWEc0Z0lDQWdiR2xuYUhSSGNtRjVPaUJqYjJ4dmNuTXViR2xuYUhSSGNtRjVRbWNzWEc0Z0lDQWdkMmhwZEdVNklHTnZiRzl5Y3k1M2FHbDBaVUpuTEZ4dUlDQWdJRzl5WVc1blpUb2dZMjlzYjNKekxtOXlZVzVuWlVKbkxGeHVJQ0FnSUdkeVpXVnVPaUJqYjJ4dmNuTXVaM0psWlc1Q1p5eGNiaUFnSUNCdVlYWjVPaUJqYjJ4dmNuTXVibUYyZVVKbkxGeHVJQ0FnSUcxcFpHNXBaMmgwT2lCamIyeHZjbk11Yldsa2JtbG5hSFJDWnl4Y2JpQWdJQ0J3ZFhKd2JHVTZJR052Ykc5eWN5NXdkWEp3YkdWQ1p5eGNiaUFnSUNCdmNtTm9hV1E2SUdOdmJHOXljeTV2Y21Ob2FXUkNaeXhjYmlBZ0lDQmxaMmR3YkdGdWREb2dZMjlzYjNKekxtVm5aM0JzWVc1MFFtY3NYRzRnSUNBZ2JXRnliMjl1T2lCamIyeHZjbk11YldGeWIyOXVRbWNzWEc0Z0lDQWdkMkYwWlhKdFpXeHZiam9nWTI5c2IzSnpMbmRoZEdWeWJXVnNiMjVDWnl4Y2JpQWdJQ0JzYVdkb2RGZGhjMmc2SUdOdmJHOXljeTVzYVdkb2RGZGhjMmhDWnl4Y2JpQWdJQ0JrWVhKclYyRnphRG9nWTI5c2IzSnpMbVJoY210WFlYTm9RbWNzWEc0Z0lDQWdkSEpoYm5Od1lYSmxiblJFWVhKclIzSmhlVG9nWTI5c2IzSnpMblJ5WVc1emNHRnlaVzUwUkdGeWEwZHlZWGxDWnl4Y2JpQWdJQ0F2THlCa1pXWmhkV3gwT2lCMGNtRnVjM0JoY21WdWRGeHVJQ0I5S1N4Y2JpQWdabWwwT2lCMGIyZG5iR1VvYkdGNWIzVjBMbVpwZENrc1hHNGdJR1pzWlhnNklHMWhjSEJwYm1jb2UxeHVJQ0FnSUdkeWIzYzZJR3hoZVc5MWRDNW1iR1Y0UjNKdmR5eGNiaUFnSUNCdWIyNWxPaUJzWVhsdmRYUXVabXhsZUU1dmJtVXNYRzRnSUNBZ0x5OGdaR1ZtWVhWc2REb2djMmh5YVc1clhHNGdJSDBwTEZ4dUlDQm9aV2xuYUhRNklHaGxhV2RvZENBOVBpQm1jbTl0U1c1c2FXNWxVM1I1YkdVb2V5Qm9aV2xuYUhRZ2ZTa3NYRzRnSUdwMWMzUnBabmxEYjI1MFpXNTBPaUJ0WVhCd2FXNW5LSHRjYmlBZ0lDQmxibVE2SUd4aGVXOTFkQzVxZFhOMGFXWjVSVzVrTEZ4dUlDQWdJR05sYm5SbGNqb2diR0Y1YjNWMExtcDFjM1JwWm5sRFpXNTBaWElzWEc0Z0lDQWdZbVYwZDJWbGJqb2diR0Y1YjNWMExtcDFjM1JwWm5sQ1pYUjNaV1Z1TEZ4dUlDQWdJR0Z5YjNWdVpEb2diR0Y1YjNWMExtcDFjM1JwWm5sQmNtOTFibVFzWEc0Z0lDQWdaWFpsYm14NU9pQnNZWGx2ZFhRdWFuVnpkR2xtZVVWMlpXNXNlU3hjYmlBZ0lDQXZMeUJrWldaaGRXeDBPaUJ6ZEdGeWRGeHVJQ0I5S1N4Y2JpQWdiR1ZtZERvZ2RHOW5aMnhsS0d4aGVXOTFkQzVzWldaME1Da3NYRzRnSUcxaGNtZHBibE4wWVhKMExGeHVJQ0J0WVhKbmFXNUZibVFzWEc0Z0lHMWhjbWRwYml4Y2JpQWdiV0Z5WjJsdVZHOXdMRnh1SUNCdFlYSm5hVzVTYVdkb2RDeGNiaUFnYldGeVoybHVRbTkwZEc5dExGeHVJQ0J0WVhKbmFXNU1aV1owTEZ4dUlDQnpiVTFoY21kcGJpeGNiaUFnYzIxTllYSm5hVzVVYjNBc1hHNGdJSE50VFdGeVoybHVVbWxuYUhRc1hHNGdJSE50VFdGeVoybHVRbTkwZEc5dExGeHVJQ0J6YlUxaGNtZHBia3hsWm5Rc1hHNGdJRzFrVFdGeVoybHVMRnh1SUNCdFpFMWhjbWRwYmxSdmNDeGNiaUFnYldSTllYSm5hVzVTYVdkb2RDeGNiaUFnYldSTllYSm5hVzVDYjNSMGIyMHNYRzRnSUcxa1RXRnlaMmx1VEdWbWRDeGNiaUFnYkdkTllYSm5hVzRzWEc0Z0lHeG5UV0Z5WjJsdVZHOXdMRnh1SUNCc1owMWhjbWRwYmxKcFoyaDBMRnh1SUNCc1owMWhjbWRwYmtKdmRIUnZiU3hjYmlBZ2JHZE5ZWEpuYVc1TVpXWjBMRnh1SUNCdFlYaElaV2xuYUhRNklHMWhlRWhsYVdkb2RDQTlQaUJtY205dFNXNXNhVzVsVTNSNWJHVW9leUJ0WVhoSVpXbG5hSFFnZlNrc1hHNGdJRzFoZUZkcFpIUm9PaUJ0WVhoWGFXUjBhQ0E5UGlCbWNtOXRTVzVzYVc1bFUzUjViR1VvZXlCdFlYaFhhV1IwYUNCOUtTeGNiaUFnYldsdVNHVnBaMmgwT2lCdGFXNUlaV2xuYUhRZ1BUNGdabkp2YlVsdWJHbHVaVk4wZVd4bEtIc2diV2x1U0dWcFoyaDBJSDBwTEZ4dUlDQnRhVzVYYVdSMGFEb2diV2x1VjJsa2RHZ2dQVDRnWm5KdmJVbHViR2x1WlZOMGVXeGxLSHNnYldsdVYybGtkR2dnZlNrc1hHNGdJRzl3WVdOcGRIa3NYRzRnSUc5MlpYSm1iRzkzT2lCdFlYQndhVzVuS0h0Y2JpQWdJQ0JvYVdSa1pXNDZJR3hoZVc5MWRDNXZkbVZ5Wm14dmQwaHBaR1JsYml4Y2JpQWdJQ0J6WTNKdmJHdzZJR3hoZVc5MWRDNXZkbVZ5Wm14dmQxTmpjbTlzYkN4Y2JpQWdJQ0JoZFhSdk9pQnNZWGx2ZFhRdWIzWmxjbVpzYjNkQmRYUnZMRnh1SUNBZ0lITmpjbTlzYkZnNklHeGhlVzkxZEM1dmRtVnlabXh2ZDFOamNtOXNiRmdzWEc0Z0lDQWdjMk55YjJ4c1dUb2diR0Y1YjNWMExtOTJaWEptYkc5M1UyTnliMnhzV1N4Y2JpQWdJQ0F2THlCa1pXWmhkV3gwT2lCMmFYTnBZbXhsWEc0Z0lIMHBMRnh1SUNCd1lXUmthVzVuTEZ4dUlDQndZV1JrYVc1bldDeGNiaUFnY0dGa1pHbHVaMWtzWEc0Z0lITnRVR0ZrWkdsdVp5eGNiaUFnYzIxUVlXUmthVzVuV0N4Y2JpQWdjMjFRWVdSa2FXNW5XU3hjYmlBZ2JXUlFZV1JrYVc1bkxGeHVJQ0J0WkZCaFpHUnBibWRZTEZ4dUlDQnRaRkJoWkdScGJtZFpMRnh1SUNCc1oxQmhaR1JwYm1jc1hHNGdJR3huVUdGa1pHbHVaMWdzWEc0Z0lHeG5VR0ZrWkdsdVoxa3NYRzRnSUhCdmMybDBhVzl1T2lCdFlYQndhVzVuS0h0Y2JpQWdJQ0JoWW5OdmJIVjBaVG9nYkdGNWIzVjBMbUZpYzI5c2RYUmxMRnh1SUNBZ0lISmxiR0YwYVhabE9pQnNZWGx2ZFhRdWNtVnNZWFJwZG1Vc1hHNGdJQ0FnWm1sNFpXUTZJR3hoZVc5MWRDNW1hWGhsWkN4Y2JpQWdJQ0F2THlCa1pXWmhkV3gwT2lCemRHRjBhV05jYmlBZ2ZTa3NYRzRnSUhKcFoyaDBPaUIwYjJkbmJHVW9iR0Y1YjNWMExuSnBaMmgwTUNrc1hHNGdJSEp2ZFc1a2FXNW5MRnh1SUNCMGIzQTZJSFJ2WjJkc1pTaHNZWGx2ZFhRdWRHOXdNQ2tzWEc0Z0lIZHBaSFJvT2lCM2FXUjBhQ0E5UGlCbWNtOXRTVzVzYVc1bFUzUjViR1VvZXlCM2FXUjBhQ0I5S1N4Y2JpQWdkM0poY0RvZ2RHOW5aMnhsS0d4aGVXOTFkQzVtYkdWNFYzSmhjQ2tzWEc0Z0lHUmhibWRsY205MWMyeDVVMlYwU1c1c2FXNWxVM1I1YkdVNklIWmhiSFZsSUQwK1hHNGdJQ0FnTHlvZ1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVaR1Z5YzJOdmNtVXRaR0Z1WjJ4bElDb3ZYRzRnSUNBZ2RtRnNkV1VnSmlZZ2RtRnNkV1V1WDE5emRIbHNaU0EvSUdaeWIyMUpibXhwYm1WVGRIbHNaU2gyWVd4MVpTNWZYM04wZVd4bEtTQTZJR2xrWlc1MGFYUjVLQ2tzWEc1OU8xeHVYRzR2S2x4dVhHNGpJRlJvWlNCRGIyMXdiMjVsYm5SY2JseHVLaTljYmx4dVkyOXVjM1FnWTI5dWRHRnBibk1nUFNBb2EyVjVMQ0JoY25JcElEMCtJR0Z5Y2k1cGJtUmxlRTltS0d0bGVTa2dQajBnTUR0Y2JtTnZibk4wSUc5dGFYUWdQU0FvYTJWNWN5d2diMkpxS1NBOVBseHVJQ0JQWW1wbFkzUXVhMlY1Y3lodlltb3BMbkpsWkhWalpTZ29ZV05qTENCck9pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQnBaaUFvWTI5dWRHRnBibk1vYXl3Z2EyVjVjeWtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoWTJNN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQXVMaTVoWTJNc1hHNGdJQ0FnSUNCYmExMDZJRzlpYWx0clhTeGNiaUFnSUNCOU8xeHVJQ0I5TENCN2ZTazdYRzVjYmk4dklFSnZlQ0JwY3lCaElGd2ljR0Z6Y3kxMGFISnZkV2RvWENJZ1kyOXRjRzl1Wlc1MExDQnRaV0Z1YVc1bklIUm9ZWFFnYVdZZ2VXOTFJSEJoYzNNZ2NISnZjR1Z5ZEdsbGN5QjBieUJwZEZ4dUx5OGdkR2hoZENCcGRDQmtiMlZ6YmlkMElHdHViM2NnWVdKdmRYUWdLR0JoY21saExXeGhZbVZzWUNCbWIzSWdhVzV6ZEdGdVkyVXBJR2wwSUhCaGMzTmxjeUJrYVhKbFkzUnNlVnh1THk4Z1ltRmpheUIwYnlCMGFHVWdkVzVrWlhKc2VXbHVaeUJnUEdScGRpOCtZQzRnVkdoaGRDZHpJR2RsYm1WeVlXeHNlU0IxYzJWbWRXd3NJR0oxZENCM1pTZGtJR0ZzYzI4Z2JHbHJaVnh1THk4Z2RHOGdjM1J5YVhBZ2IzVjBJR0VnWm1WM0lHNWhkV2RvZEhrZ2NISnZjR1Z5ZEdsbGN5QjBhR0YwSUdKeVpXRnJJSE4wZVd4bElHVnVZMkZ3YzNWc1lYUnBiMjVjYmk4dklDaGpiR0Z6YzA1aGJXVXNJSE4wZVd4bEtTQnZjaUJoWTJObGMzTnBZbWxzYVhSNUlDaHZia05zYVdOcktTNWNibU52Ym5OMElHSnNZV05yYkdsemRGQnliM0J6SUQwZ1d5ZHZia05zYVdOckp5d2dKMk5zWVhOelRtRnRaU2NzSUNkemRIbHNaU2RkTzF4dVhHNHZMeUFrUm14dmQwbHpjM1ZsSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5bVlXTmxZbTl2YXk5bWJHOTNMMmx6YzNWbGN5ODJNVEF6WEc1amIyNXpkQ0JDYjNnZ1BTQlNaV0ZqZEM1bWIzSjNZWEprVW1WbUtGeHVJQ0FvZXlCamFHbHNaSEpsYml3Z0xpNHVjSEp2Y0hNZ2ZUb2dVSEp2Y0ZSNWNHVXNJSEpsWmpvZ1VtVmhZM1F1Uld4bGJXVnVkRkpsWmp3cVBpa2dQVDRnZTF4dUlDQWdJQzh2SUVac2IzY2dZMkZ1SjNRZ2NtVmhjMjl1SUdGaWIzVjBJSFJvWlNCamIyNXpkR0Z1ZENCdVlYUjFjbVVnYjJZZ1QySnFaV04wTG10bGVYTWdjMjhnZDJVZ1kyRnVKM1FnZFhObFhHNGdJQ0FnTHk4Z1lTQm1kVzVqZEdsdmJtRnNJQ2h5WldSMVkyVXBJSE4wZVd4bElHaGxjbVV1WEc1Y2JpQWdJQ0F2THlCQmJHd2dRbTk0SjNNZ1lYSmxJR0p2ZUMxemFYcGxaQ0JpZVNCa1pXWmhkV3gwTENCemJ5QjNaU0J6ZEdGeWRDQnZabVlnWW5WcGJHUnBibWNnZFhBZ2RHaGxJSE4wZVd4bGMxeHVJQ0FnSUM4dklIUnZJR0psSUdGd2NHeHBaV1FnZDJsMGFDQmhJRUp2ZUNCaVlYTmxJR05zWVhOekxseHVJQ0FnSUd4bGRDQnpJRDBnWm5KdmJVTnNZWE56VG1GdFpTaHpkSGxzWlhNdVltOTRLVHRjYmx4dUlDQWdJQzh2SUVsdWFYUWdkR2hsSUd4cGMzUWdiMllnY0hKdmNITWdkMlVuYkd3Z2IyMXBkQ0JtY205dElIQmhjM04wYUhKdmRXZG9MaUJYWlNkc2JDQmhaR1FnZEc4Z2RHaHBjMXh1SUNBZ0lDOHZJR3hwYzNRZ1lYTWdkMlVnYldGMFkyZ2djSEp2Y0hNZ1lXZGhhVzV6ZENCMGFHVWdkSEpoYm5ObWIzSnRjeUJzYVhOMExseHVJQ0FnSUdOdmJuTjBJRzl0YVhSUWNtOXdjeUE5SUZzdUxpNWliR0ZqYTJ4cGMzUlFjbTl3YzEwN1hHNWNiaUFnSUNBdkx5QlVhR2x6SUd4dmIzQnpJSFJvY205MVoyZ2daV0ZqYUNCd2NtOXdaWEowZVNCaGJtUWdhV1lnYVhRZ1pYaHBjM1J6SUdsdUlIUm9aU0J3Y21WMmFXOTFjMng1WEc0Z0lDQWdMeThnWkdWbWFXNWxaQ0IwY21GdWMyWnZjbTBnYldGd0xDQmpiMjVqWVhSbGJuUmxjeUIwYUdVZ2NtVnpkV3gwYVc1bklITjBlV3hsY3lCMGJ5QjBhR1VnWW1GelpWeHVJQ0FnSUM4dklITjBlV3hsY3k0Z1NXWWdkR2hsY21VbmN5QmhJRzFoZEdOb0xDQjNaU0JoYkhOdklHUnZiaWQwSUhCaGMzTWdkR2h5YjNWbmFDQjBhR0YwSUhCeWIzQmxjblI1TGlCVWFHbHpYRzRnSUNBZ0x5OGdiV1ZoYm5NZ1FtOTRKM01nY25WdWRHbHRaU0JwY3lCdmJteDVJR1JsY0dWdVpHVnVkQ0J2YmlCMGFHVWdiblZ0WW1WeUlHOW1JSEJ5YjNCbGNuUnBaWE1nY0dGemMyVmtYRzRnSUNBZ0x5OGdkRzhnYVhRZ0tIZG9hV05vSUdseklIUjVjR2xqWVd4c2VTQnpiV0ZzYkNrZ2FXNXpkR1ZoWkNCdlppQjBhR1VnZEc5MFlXd2diblZ0WW1WeUlHOW1JSEJ2YzNOcFlteGxYRzRnSUNBZ0x5OGdjSEp2Y0dWeWRHbGxjeUFvZmpNd0lHOXlJSE52S1M0Z1YyaHBiR1VnYVhRZ2JXRjVJSDVtWldWc2ZpQnNhV3RsSUVKdmVDQnBjeUJwYm01bFptWnBZMmxsYm5Rc0lHbDBjMXh1SUNBZ0lDOHZJR0pwWjJkbGMzUWdjR1Z5Wm05eWJXRnVZMlVnYVcxd1lXTjBJR2x6SUc5dUlITjBZWEowZFhBZ2RHbHRaU0JpWldOaGRYTmxJSFJvWlhKbEozTWdjMjhnYlhWamFDQmpiMlJsWEc0Z0lDQWdMeThnYUdWeVpTNWNibHh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF5WlhOMGNtbGpkR1ZrTFhONWJuUmhlRnh1SUNBZ0lHWnZjaUFvWTI5dWMzUWdjSEp2Y0NCcGJpQndjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h3Y205d1ZHOUdiaXdnY0hKdmNDa3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdabTRnUFNCd2NtOXdWRzlHYmx0d2NtOXdYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdVZ1BTQndjbTl3YzF0d2NtOXdYVHRjYmlBZ0lDQWdJQ0FnYjIxcGRGQnliM0J6TG5CMWMyZ29jSEp2Y0NrN1hHNGdJQ0FnSUNBZ0lITWdQU0JqYjI1allYUW9XM01zSUdadUtIWmhiSFZsS1YwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRnVaQzR1TGlCdFlXZHBZeUZjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BHUnBkaUI3TGk0dWIyMXBkQ2h2YldsMFVISnZjSE1zSUhCeWIzQnpLWDBnZXk0dUxuUnZVSEp2Y0hNb2N5bDlJSEpsWmoxN2NtVm1mVDVjYmlBZ0lDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlZ4dUtUdGNibHh1THk4Z0lFNVBWRVU2SUZSb2FYTWdhWE1nYm1WbFpHVmtJR2x1SUc5eVpHVnlJSFJ2SUc5MlpYSnlhV1JsSUhSb1pTQkdiM0ozWVhKa1VtVm1JR1JwYzNCc1lYa2dibUZ0WlNCMGFHRjBJR2x6WEc0dkx5QWdkWE5sWkNCcGJpQmtaWFlnZEc5dmJITWdZVzVrSUdsdUlITnVZWEJ6YUc5MElIUmxjM1JwYm1jdVhHNUNiM2d1WkdsemNHeGhlVTVoYldVZ1BTQW5RbTk0Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1FtOTRPMXh1WEc0dktseHVYRzRqSUZCeWIzQlVlWEJsYzF4dVhHNUJibVFnZDJVbmNtVWdaRzl1WlNCb1pYSmxJRG9wWEc1Y2Jpb3ZYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkJiR2xuYmtOdmJuUmxiblJRY205d1ZIbHdaU0E5SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiWEc0Z0lDZHpkR0Z5ZENjc1hHNGdJQ2RsYm1RbkxGeHVJQ0FuWTJWdWRHVnlKeXhjYmlBZ0oySmxkSGRsWlc0bkxGeHVJQ0FuWVhKdmRXNWtKeXhjYmlBZ0oyVjJaVzVzZVNjc1hHNGdJQ2R6ZEhKbGRHTm9KeXhjYmwwcE8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1FXeHBaMjVKZEdWdGMxQnliM0JVZVhCbElEMGdVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNiaUFnSjNOMFlYSjBKeXhjYmlBZ0oyVnVaQ2NzWEc0Z0lDZGpaVzUwWlhJbkxGeHVJQ0FuWW1GelpXeHBibVVuTEZ4dUlDQW5jM1J5WlhSamFDY3NYRzVkS1R0Y2JseHVaWGh3YjNKMElHTnZibk4wSUVGc2FXZHVVMlZzWmxCeWIzQlVlWEJsSUQwZ1VISnZjRlI1Y0dWekxtOXVaVTltS0Z0Y2JpQWdKMkYxZEc4bkxGeHVJQ0FuYzNSaGNuUW5MRnh1SUNBblpXNWtKeXhjYmlBZ0oyTmxiblJsY2ljc1hHNGdJQ2RpWVhObGJHbHVaU2NzWEc0Z0lDZHpkSEpsZEdOb0p5eGNibDBwTzF4dVhHNWpiMjV6ZENCRGIyeDFiVzVRY205d1ZIbHdaU0E5SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiWEc0Z0lEQXNYRzRnSURFc1hHNGdJRElzWEc0Z0lETXNYRzRnSURRc1hHNGdJRFVzWEc0Z0lEWXNYRzRnSURjc1hHNGdJRGdzWEc0Z0lEa3NYRzRnSURFd0xGeHVJQ0F4TVN4Y2JpQWdNVElzWEc1ZEtUdGNibHh1Wlhod2IzSjBJR052Ym5OMElFUnBiV1Z1YzJsdmJsQnliM0JVZVhCbElEMGdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzVkS1R0Y2JseHVaWGh3YjNKMElHTnZibk4wSUVScGNtVmpkR2x2YmxCeWIzQlVlWEJsSUQwZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbmNtOTNKeXdnSjJOdmJIVnRiaWRkS1R0Y2JseHVZMjl1YzNRZ1JHbHpjR3hoZVZCeWIzQlVlWEJsSUQwZ1VISnZjRlI1Y0dWekxtOXVaVTltS0Z0Y2JpQWdKMjV2Ym1VbkxGeHVJQ0FuWm14bGVDY3NYRzRnSUNkaWJHOWpheWNzWEc0Z0lDZHBibXhwYm1WQ2JHOWpheWNzWEc0Z0lDZDJhWE4xWVd4c2VVaHBaR1JsYmljc1hHNWRLVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRVpzWlhoUWNtOXdWSGx3WlNBOUlGQnliM0JVZVhCbGN5NXZibVZQWmloYkoyZHliM2NuTENBbmMyaHlhVzVySnl3Z0oyNXZibVVuWFNrN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCS2RYTjBhV1o1UTI5dWRHVnVkRkJ5YjNCVWVYQmxJRDBnVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnRjYmlBZ0ozTjBZWEowSnl4Y2JpQWdKMlZ1WkNjc1hHNGdJQ2RqWlc1MFpYSW5MRnh1SUNBblltVjBkMlZsYmljc1hHNGdJQ2RoY205MWJtUW5MRnh1SUNBblpYWmxibXg1Snl4Y2JsMHBPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdUV0Z5WjJsdVVISnZjRlI1Y0dVZ1BTQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1cxeHVJQ0F0TVRJc1hHNGdJQzB4TVN4Y2JpQWdMVEV3TEZ4dUlDQXRPU3hjYmlBZ0xUZ3NYRzRnSUMwM0xGeHVJQ0F0Tml4Y2JpQWdMVFVzWEc0Z0lDMDBMRnh1SUNBdE15eGNiaUFnTFRJc1hHNGdJQzB4TEZ4dUlDQXdMRnh1SUNBeExGeHVJQ0F5TEZ4dUlDQXpMRnh1SUNBMExGeHVJQ0ExTEZ4dUlDQTJMRnh1SUNBM0xGeHVJQ0E0TEZ4dUlDQTVMRnh1SUNBeE1DeGNiaUFnTVRFc1hHNGdJREV5TEZ4dUlDQW5ZWFYwYnljc1hHNWRLVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRTkyWlhKbWJHOTNVSEp2Y0ZSNWNHVWdQU0JRY205d1ZIbHdaWE11YjI1bFQyWW9XMXh1SUNBbmRtbHphV0pzWlNjc1hHNGdJQ2RvYVdSa1pXNG5MRnh1SUNBbmMyTnliMnhzSnl4Y2JpQWdKM05qY205c2JGZ25MRnh1SUNBbmMyTnliMnhzV1Njc1hHNGdJQ2RoZFhSdkp5eGNibDBwTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVUdGa1pHbHVaMUJ5YjNCVWVYQmxJRDBnVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnRjYmlBZ01DeGNiaUFnTVN4Y2JpQWdNaXhjYmlBZ015eGNiaUFnTkN4Y2JpQWdOU3hjYmlBZ05peGNiaUFnTnl4Y2JpQWdPQ3hjYmlBZ09TeGNiaUFnTVRBc1hHNGdJREV4TEZ4dUlDQXhNaXhjYmwwcE8xeHVYRzVqYjI1emRDQlNiM1Z1WkdsdVoxQnliM0JVZVhCbElEMGdVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNiaUFnTUN4Y2JpQWdNU3hjYmlBZ01peGNiaUFnTXl4Y2JpQWdOQ3hjYmlBZ05TeGNiaUFnTml4Y2JpQWdOeXhjYmlBZ09DeGNiaUFnSjJOcGNtTnNaU2NzWEc0Z0lDZHdhV3hzSnl4Y2JsMHBPMXh1WEc1amIyNXpkQ0JUYVhwbFJHbHpjR3hoZVZCeWIzQlVlWEJsSUQwZ1VISnZjRlI1Y0dWekxtOXVaVTltS0Z0Y2JpQWdKMlpzWlhnbkxGeHVJQ0FuWm14bGVFTnZiSFZ0Ymljc1hHNGdJQ2RwYm14cGJtVkNiRzlqYXljc1hHNWRLVHRjYmx4dUx5OGdKRVpzYjNkSmMzTjFaU0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Wm1GalpXSnZiMnN2Wm14dmR5OXBjM04xWlhNdk56UTRORnh1UW05NExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1kyaHBiR1J5Wlc0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJHbHVaVk4wZVd4bE9pQlFjbTl3Vkhsd1pYTXVaWGhoWTNRb2UxeHVJQ0FnSUY5ZmMzUjViR1U2SUZCeWIzQlVlWEJsY3k1dlltcGxZM1FzWEc0Z0lIMHBMRnh1WEc0Z0lIaHpPaUJRY205d1ZIbHdaWE11WlhoaFkzUW9lMXh1SUNBZ0lHUnBjM0JzWVhrNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMUJ5YjNCVWVYQmxjeTVpYjI5c0xDQlRhWHBsUkdsemNHeGhlVkJ5YjNCVWVYQmxYU2tzWEc0Z0lDQWdZMjlzZFcxdU9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0I5S1N4Y2JpQWdjMjA2SUZCeWIzQlVlWEJsY3k1bGVHRmpkQ2g3WEc0Z0lDQWdaR2x6Y0d4aGVUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG1KdmIyd3NJRk5wZW1WRWFYTndiR0Y1VUhKdmNGUjVjR1ZkS1N4Y2JpQWdJQ0JqYjJ4MWJXNDZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUgwcExGeHVJQ0J0WkRvZ1VISnZjRlI1Y0dWekxtVjRZV04wS0h0Y2JpQWdJQ0JrYVhOd2JHRjVPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdVltOXZiQ3dnVTJsNlpVUnBjM0JzWVhsUWNtOXdWSGx3WlYwcExGeHVJQ0FnSUdOdmJIVnRiam9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ2ZTa3NYRzRnSUd4bk9pQlFjbTl3Vkhsd1pYTXVaWGhoWTNRb2UxeHVJQ0FnSUdScGMzQnNZWGs2SUZCeWIzQlVlWEJsY3k1dmJtVlBabFI1Y0dVb1cxQnliM0JVZVhCbGN5NWliMjlzTENCVGFYcGxSR2x6Y0d4aGVWQnliM0JVZVhCbFhTa3NYRzRnSUNBZ1kyOXNkVzF1T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQjlLU3hjYmx4dUlDQmthWE53YkdGNU9pQkVhWE53YkdGNVVISnZjRlI1Y0dVc1hHNGdJR1JwY21WamRHbHZiam9nUkdseVpXTjBhVzl1VUhKdmNGUjVjR1VzWEc0Z0lHTnZiSFZ0YmpvZ1EyOXNkVzF1VUhKdmNGUjVjR1VzWEc1Y2JpQWdjMjFFYVhOd2JHRjVPaUJFYVhOd2JHRjVVSEp2Y0ZSNWNHVXNYRzRnSUhOdFJHbHlaV04wYVc5dU9pQkVhWEpsWTNScGIyNVFjbTl3Vkhsd1pTeGNiaUFnYzIxRGIyeDFiVzQ2SUVOdmJIVnRibEJ5YjNCVWVYQmxMRnh1WEc0Z0lHMWtSR2x6Y0d4aGVUb2dSR2x6Y0d4aGVWQnliM0JVZVhCbExGeHVJQ0J0WkVScGNtVmpkR2x2YmpvZ1JHbHlaV04wYVc5dVVISnZjRlI1Y0dVc1hHNGdJRzFrUTI5c2RXMXVPaUJEYjJ4MWJXNVFjbTl3Vkhsd1pTeGNibHh1SUNCc1owUnBjM0JzWVhrNklFUnBjM0JzWVhsUWNtOXdWSGx3WlN4Y2JpQWdiR2RFYVhKbFkzUnBiMjQ2SUVScGNtVmpkR2x2YmxCeWIzQlVlWEJsTEZ4dUlDQnNaME52YkhWdGJqb2dRMjlzZFcxdVVISnZjRlI1Y0dVc1hHNWNiaUFnWVd4cFoyNURiMjUwWlc1ME9pQkJiR2xuYmtOdmJuUmxiblJRY205d1ZIbHdaU3hjYmlBZ1lXeHBaMjVKZEdWdGN6b2dRV3hwWjI1SmRHVnRjMUJ5YjNCVWVYQmxMRnh1SUNCaGJHbG5ibE5sYkdZNklFRnNhV2R1VTJWc1psQnliM0JVZVhCbExGeHVJQ0JpYjNSMGIyMDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0JpYjNKa1pYSlRhWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3lkemJTY3NJQ2RzWnljc0lDZHViMjVsSjEwcExGeHVJQ0JqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNiaUFnSUNBbllteDFaU2NzWEc0Z0lDQWdKMlJoY210SGNtRjVKeXhjYmlBZ0lDQW5aR0Z5YTFkaGMyZ25MRnh1SUNBZ0lDZGxaMmR3YkdGdWRDY3NYRzRnSUNBZ0oyZHlZWGtuTEZ4dUlDQWdJQ2RuY21WbGJpY3NYRzRnSUNBZ0oyeHBaMmgwUjNKaGVTY3NYRzRnSUNBZ0oyeHBaMmgwVjJGemFDY3NYRzRnSUNBZ0oyMWhjbTl2Ymljc1hHNGdJQ0FnSjIxcFpHNXBaMmgwSnl4Y2JpQWdJQ0FuYm1GMmVTY3NYRzRnSUNBZ0oyOXNhWFpsSnl4Y2JpQWdJQ0FuYjNKaGJtZGxKeXhjYmlBZ0lDQW5iM0pqYUdsa0p5eGNiaUFnSUNBbmNHbHVaU2NzWEc0Z0lDQWdKM0IxY25Cc1pTY3NYRzRnSUNBZ0ozSmxaQ2NzWEc0Z0lDQWdKM1J5WVc1emNHRnlaVzUwSnl4Y2JpQWdJQ0FuZEhKaGJuTndZWEpsYm5SRVlYSnJSM0poZVNjc1hHNGdJQ0FnSjNkaGRHVnliV1ZzYjI0bkxGeHVJQ0FnSUNkM2FHbDBaU2NzWEc0Z0lGMHBMRnh1SUNCbWFYUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0JtYkdWNE9pQkdiR1Y0VUhKdmNGUjVjR1VzWEc0Z0lHaGxhV2RvZERvZ1JHbHRaVzV6YVc5dVVISnZjRlI1Y0dVc1hHNGdJR3AxYzNScFpubERiMjUwWlc1ME9pQktkWE4wYVdaNVEyOXVkR1Z1ZEZCeWIzQlVlWEJsTEZ4dUlDQnNaV1owT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmx4dUlDQnRZWEpuYVc1VGRHRnlkRG9nVFdGeVoybHVVSEp2Y0ZSNWNHVXNYRzRnSUcxaGNtZHBia1Z1WkRvZ1RXRnlaMmx1VUhKdmNGUjVjR1VzWEc1Y2JpQWdiV0Z5WjJsdU9pQk5ZWEpuYVc1UWNtOXdWSGx3WlN4Y2JpQWdiV0Z5WjJsdVZHOXdPaUJOWVhKbmFXNVFjbTl3Vkhsd1pTeGNiaUFnYldGeVoybHVVbWxuYUhRNklFMWhjbWRwYmxCeWIzQlVlWEJsTEZ4dUlDQnRZWEpuYVc1Q2IzUjBiMjA2SUUxaGNtZHBibEJ5YjNCVWVYQmxMRnh1SUNCdFlYSm5hVzVNWldaME9pQk5ZWEpuYVc1UWNtOXdWSGx3WlN4Y2JseHVJQ0J6YlUxaGNtZHBiam9nVFdGeVoybHVVSEp2Y0ZSNWNHVXNYRzRnSUhOdFRXRnlaMmx1Vkc5d09pQk5ZWEpuYVc1UWNtOXdWSGx3WlN4Y2JpQWdjMjFOWVhKbmFXNVNhV2RvZERvZ1RXRnlaMmx1VUhKdmNGUjVjR1VzWEc0Z0lITnRUV0Z5WjJsdVFtOTBkRzl0T2lCTllYSm5hVzVRY205d1ZIbHdaU3hjYmlBZ2MyMU5ZWEpuYVc1TVpXWjBPaUJOWVhKbmFXNVFjbTl3Vkhsd1pTeGNibHh1SUNCdFpFMWhjbWRwYmpvZ1RXRnlaMmx1VUhKdmNGUjVjR1VzWEc0Z0lHMWtUV0Z5WjJsdVZHOXdPaUJOWVhKbmFXNVFjbTl3Vkhsd1pTeGNiaUFnYldSTllYSm5hVzVTYVdkb2REb2dUV0Z5WjJsdVVISnZjRlI1Y0dVc1hHNGdJRzFrVFdGeVoybHVRbTkwZEc5dE9pQk5ZWEpuYVc1UWNtOXdWSGx3WlN4Y2JpQWdiV1JOWVhKbmFXNU1aV1owT2lCTllYSm5hVzVRY205d1ZIbHdaU3hjYmx4dUlDQnNaMDFoY21kcGJqb2dUV0Z5WjJsdVVISnZjRlI1Y0dVc1hHNGdJR3huVFdGeVoybHVWRzl3T2lCTllYSm5hVzVRY205d1ZIbHdaU3hjYmlBZ2JHZE5ZWEpuYVc1U2FXZG9kRG9nVFdGeVoybHVVSEp2Y0ZSNWNHVXNYRzRnSUd4blRXRnlaMmx1UW05MGRHOXRPaUJOWVhKbmFXNVFjbTl3Vkhsd1pTeGNiaUFnYkdkTllYSm5hVzVNWldaME9pQk5ZWEpuYVc1UWNtOXdWSGx3WlN4Y2JseHVJQ0J0WVhoSVpXbG5hSFE2SUVScGJXVnVjMmx2YmxCeWIzQlVlWEJsTEZ4dUlDQnRZWGhYYVdSMGFEb2dSR2x0Wlc1emFXOXVVSEp2Y0ZSNWNHVXNYRzRnSUcxcGJraGxhV2RvZERvZ1JHbHRaVzV6YVc5dVVISnZjRlI1Y0dVc1hHNGdJRzFwYmxkcFpIUm9PaUJFYVcxbGJuTnBiMjVRY205d1ZIbHdaU3hjYmx4dUlDQnZjR0ZqYVhSNU9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d6QXNJREF1TVN3Z01DNHlMQ0F3TGpNc0lEQXVOQ3dnTUM0MUxDQXdMallzSURBdU55d2dNQzQ0TENBd0xqa3NJREZkS1N4Y2JseHVJQ0J2ZG1WeVpteHZkem9nVDNabGNtWnNiM2RRY205d1ZIbHdaU3hjYmx4dUlDQndZV1JrYVc1bk9pQlFZV1JrYVc1blVISnZjRlI1Y0dVc1hHNGdJSEJoWkdScGJtZFlPaUJRWVdSa2FXNW5VSEp2Y0ZSNWNHVXNYRzRnSUhCaFpHUnBibWRaT2lCUVlXUmthVzVuVUhKdmNGUjVjR1VzWEc1Y2JpQWdjMjFRWVdSa2FXNW5PaUJRWVdSa2FXNW5VSEp2Y0ZSNWNHVXNYRzRnSUhOdFVHRmtaR2x1WjFnNklGQmhaR1JwYm1kUWNtOXdWSGx3WlN4Y2JpQWdjMjFRWVdSa2FXNW5XVG9nVUdGa1pHbHVaMUJ5YjNCVWVYQmxMRnh1WEc0Z0lHMWtVR0ZrWkdsdVp6b2dVR0ZrWkdsdVoxQnliM0JVZVhCbExGeHVJQ0J0WkZCaFpHUnBibWRZT2lCUVlXUmthVzVuVUhKdmNGUjVjR1VzWEc0Z0lHMWtVR0ZrWkdsdVoxazZJRkJoWkdScGJtZFFjbTl3Vkhsd1pTeGNibHh1SUNCc1oxQmhaR1JwYm1jNklGQmhaR1JwYm1kUWNtOXdWSGx3WlN4Y2JpQWdiR2RRWVdSa2FXNW5XRG9nVUdGa1pHbHVaMUJ5YjNCVWVYQmxMRnh1SUNCc1oxQmhaR1JwYm1kWk9pQlFZV1JrYVc1blVISnZjRlI1Y0dVc1hHNWNiaUFnY0c5emFYUnBiMjQ2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiSjNOMFlYUnBZeWNzSUNkaFluTnZiSFYwWlNjc0lDZHlaV3hoZEdsMlpTY3NJQ2RtYVhobFpDZGRLU3hjYmlBZ2NtbG5hSFE2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCeWIzVnVaR2x1WnpvZ1VtOTFibVJwYm1kUWNtOXdWSGx3WlN4Y2JpQWdkRzl3T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ2QybGtkR2c2SUVScGJXVnVjMmx2YmxCeWIzQlVlWEJsTEZ4dUlDQjNjbUZ3T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYm4wN1hHNGlMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUzSURGaE15QXpJREFnTUNBeElETWdNM1l4Tm1FeklETWdNQ0F3SURFdE15QXpTRGRoTXlBeklEQWdNQ0F4TFRNdE0xWTBZVE1nTXlBd0lEQWdNU0F6TFROb01UQjZUVGNnTWpCb01UQjJMVFJJTjNZMGVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TWlBeE1HZ3RPRll5WVRJZ01pQXdJREFnTUMwMElEQjJPRWd5WVRJZ01pQXdJREFnTUNBd0lEUm9PSFk0WVRJZ01pQXdJREFnTUNBMElEQjJMVGhvT0dFeUlESWdNQ0F3SURBZ01DMDBKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRFM0xqYzFJREV6TGpJMWFDMDBMalYyTkM0MVlURXVNalVnTVM0eU5TQXdJREFnTVMweUxqVWdNSFl0TkM0MWFDMDBMalZoTVM0eU5TQXhMakkxSURBZ01DQXhJREF0TWk0MWFEUXVOWFl0TkM0MVlURXVNalVnTVM0eU5TQXdJREFnTVNBeUxqVWdNSFkwTGpWb05DNDFZVEV1TWpVZ01TNHlOU0F3SURBZ01TQXdJREl1TlUweE1pQXdRelV1TXpjZ01DQXdJRFV1TXpjZ01DQXhNbk0xTGpNM0lERXlJREV5SURFeUlERXlMVFV1TXpjZ01USXRNVEpUTVRndU5qTWdNQ0F4TWlBd0p6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEl4SURFeWFDMDJMalZXTlM0MVNESXdZeTQxTlRFZ01DQXhJQzQwTkRrZ01TQXhWakV5ZW0wd0lEaGpNQ0F1TlRVeExTNDBORGtnTVMweElERklOaTQxWXkwdU5UVXhJREF0TVMwdU5EUTVMVEV0TVhZdE5TNDFTREl4VmpJd2VrMDBMamMxSURjdU5VRXVOelV1TnpVZ01DQXdJREVnTkNBMkxqYzFWalV1TlVneUxqYzFZUzQzTlM0M05TQXdJREFnTVNBd0xURXVOVWcwVmpJdU56VmhMamMxTGpjMUlEQWdNQ0F4SURFdU5TQXdWalJvTVM0eU5XRXVOelV1TnpVZ01DQXdJREVnTUNBeExqVklOUzQxZGpFdU1qVmhMamMxTGpjMUlEQWdNQ0F4TFM0M05TNDNOWHB0TkM0Mk56UXRNa2d4TWxZeE1rZzFMalZXT1M0ME1qUkJOQzQzTWpjZ05DNDNNamNnTUNBd0lEQWdPUzQwTWpRZ05TNDFlazB5TUNBeUxqVklPQzQ1TURsRE9DNHhNRFVnTVM0d01UZ2dOaTQxTlRVZ01DQTBMamMxSURCQk5DNDNOU0EwTGpjMUlEQWdNQ0F3SURBZ05DNDNOV013SURFdU9EQTFJREV1TURFNElETXVNelUxSURJdU5TQTBMakUxT1ZZeU1HRTBJRFFnTUNBd0lEQWdOQ0EwU0RJd1lUUWdOQ0F3SURBZ01DQTBMVFJXTmk0MVlUUWdOQ0F3SURBZ01DMDBMVFI2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUSXhMalVnT0M0Mk9XTXhMalE1TGpnM0lESXVOU0F5TGpRMklESXVOU0EwTGpNeGFDMDBkamN1T1RaTU1Ua2dNak5zTFRFdE1pNHdORll4TTJndE5HTXdMVEV1T0RVZ01TNHdNUzB6TGpRMElESXVOUzAwTGpNeFZqSXVPVE5qTFM0NE5pMHVNakl0TVM0MUxURXRNUzQxTFRFdU9UTm9PR013SUM0NU15MHVOalFnTVM0M01TMHhMalVnTVM0NU0zWTFMamMyZW0wdE1URXVNalV1T0RGaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURBZ01pNDFTRGQyTXk0eU5XRXhMakkxSURFdU1qVWdNQ0F3SURFdE1pNDFJREJXTVRKSU1TNHlOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQzB5TGpWSU5DNDFWall1TWpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURJdU5TQXdWamt1TldnekxqSTFlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwNUlERXhZVEVnTVNBd0lEQWdNUzB4TFRGV01XRXhJREVnTUNBd0lERWdNUzB4YURaaE1TQXhJREFnTUNBeElERWdNWFk1WVRFZ01TQXdJREFnTVMweElERklPWHB0TVMweWFEUldOMmd0TkhZeWVtMHhNQ0EwWVRFZ01TQXdJREFnTVNBeElERjJPV0V4SURFZ01DQXdJREV0TVNBeGFDMDJZVEVnTVNBd0lEQWdNUzB4TFRGMkxUbGhNU0F4SURBZ01DQXhJREV0TVdnMmVtMHROU0E1YURSMkxUSm9MVFIyTW5wdExUVXRPV0V4SURFZ01DQXdJREVnTVNBeGRqbGhNU0F4SURBZ01DQXhMVEVnTVVnMFlURWdNU0F3SURBZ01TMHhMVEYyTFRsaE1TQXhJREFnTUNBeElERXRNV2cyZW0wdE5TQTVhRFIyTFRKSU5YWXllaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwMExqYzFJREV5WXk0ek1pQXdJQzQyTkMwdU1USXlMamc0TkMwdU16WTJURGt1TlNBM0xqYzJPR3d6SURNZ05TNDFMVFV1TlhZdU9UZ3lZVEV1TWpVZ01TNHlOU0F3SURBZ01DQXlMalVnTUZZeGFDMDFMakkxWVRFdU1qVWdNUzR5TlNBd0lEQWdNQ0F3SURJdU5XZ3VPVGd5VERFeUxqVWdOeTR5TXpKc0xUTXRNeTAxTGpZek5DQTFMall6TkVFeExqSTFJREV1TWpVZ01DQXdJREFnTkM0M05TQXhNazB4TkNBeE5HZ3ROR0V4SURFZ01DQXdJREF0TVNBeGRqZGhNU0F4SURBZ01DQXdJREVnTVdnMFlURWdNU0F3SURBZ01DQXhMVEYyTFRkaE1TQXhJREFnTUNBd0xURXRNVzA0SURCb0xUUmhNU0F4SURBZ01DQXdMVEVnTVhZM1lURWdNU0F3SURBZ01DQXhJREZvTkdFeElERWdNQ0F3SURBZ01TMHhkaTAzWVRFZ01TQXdJREFnTUMweExURk5OeUF4TlhZM1lURWdNU0F3SURBZ01TMHhJREZJTW1FeElERWdNQ0F3SURFdE1TMHhkaTAzWVRFZ01TQXdJREFnTVNBeExURm9OR0V4SURFZ01DQXdJREVnTVNBeEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEl1TlNBeE9XRXhMalVnTVM0MUlEQWdNU0F3SUM0d01ERWdNeTR3TURGQk1TNDFJREV1TlNBd0lEQWdNQ0F5TGpVZ01UbHRNVGtnTUdndE1UUmhNUzQxSURFdU5TQXdJREVnTUNBd0lETm9NVFJoTVM0MUlERXVOU0F3SURFZ01DQXdMVE50TFRFNUxUVmhNUzQxSURFdU5TQXdJREVnTUNBdU1EQXhJRE11TURBeFFURXVOU0F4TGpVZ01DQXdJREFnTWk0MUlERTBiVEU1SURCb0xURTBZVEV1TlNBeExqVWdNQ0F4SURBZ01DQXphREUwWVRFdU5TQXhMalVnTUNBeElEQWdNQzB6VFRFd0lERXhhRFJoTVNBeElEQWdNQ0F3SURFdE1WWXpZVEVnTVNBd0lEQWdNQzB4TFRGb0xUUmhNU0F4SURBZ01DQXdMVEVnTVhZM1lURWdNU0F3SURBZ01DQXhJREZ0TVRJdE9XZ3ROR0V4SURFZ01DQXdJREF0TVNBeGRqZGhNU0F4SURBZ01DQXdJREVnTVdnMFlURWdNU0F3SURBZ01DQXhMVEZXTTJFeElERWdNQ0F3SURBdE1TMHhUVEVnTVRCV00yRXhJREVnTUNBd0lERWdNUzB4YURSaE1TQXhJREFnTUNBeElERWdNWFkzWVRFZ01TQXdJREFnTVMweElERklNbUV4SURFZ01DQXdJREV0TVMweEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUwTGpFM055QTNMamd4T1d3dE1TNDJPVGdnTlM0NE1qUmpMUzR4TkRJdU5EYzJMUzQ0TVRZdU5EYzFMUzQ1TlRndExqQXdNVXc1TGpneU1pQTNMamd4T1dndU1EQTVZVEl1TWpJM0lESXVNakkzSURBZ01DQXhMUzR3T0RFdExqVTJPU0F5TGpJMUlESXVNalVnTUNBeElERWdOQzQxSURCak1DQXVNVGs0TFM0d016UXVNemcyTFM0d09ESXVOVFk1YUM0d01EbDZUVEV5SURFNVlURXVOelVnTVM0M05TQXdJREVnTVNBd0xUTXVOU0F4TGpjMUlERXVOelVnTUNBd0lERWdNQ0F6TGpWNmJUQXRNVGxETlM0ek56SWdNQ0F3SURVdU16Y3lJREFnTVRKak1DQTJMall5TnlBMUxqTTNNaUF4TWlBeE1pQXhNaUEyTGpZeU55QXdJREV5TFRVdU16Y3pJREV5TFRFeUlEQXROaTQyTWpndE5TNHpOek10TVRJdE1USXRNVEo2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUUXVNalVnTXk0MWFERTFMalZoTGpjMUxqYzFJREFnTUNBeElDNDNOUzQzTlZZeE5HZ3RNVGRXTkM0eU5XRXVOelV1TnpVZ01DQXdJREVnTGpjMUxTNDNOVTB4T1M0M05TQXhTRFF1TWpWQk15NHlOVFFnTXk0eU5UUWdNQ0F3SURBZ01TQTBMakkxZGpFMUxqVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdOQzR5TlNBeU0yZ3hOUzQxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURJeklERTVMamMxVmpRdU1qVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdNVGt1TnpVZ01TYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TUM0MUlERTVMamMxWXpBZ0xqUXhNeTB1TXpNM0xqYzFMUzQzTlM0M05VZ3hOUzQxVmpFMGFDMDNkall1TlVnMExqSTFZUzQzTlRJdU56VXlJREFnTUNBeExTNDNOUzB1TnpWV05DNHlOV0V1TnpVdU56VWdNQ0F3SURFZ0xqYzFMUzQzTldneE5TNDFZUzQzTlM0M05TQXdJREFnTVNBdU56VXVOelYyTVRVdU5YcE5NVGt1TnpVZ01VZzBMakkxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURFZ05DNHlOWFl4TlM0MVFUTXVNalUwSURNdU1qVTBJREFnTUNBd0lEUXVNalVnTWpOb01UVXVOVUV6TGpJMU5DQXpMakkxTkNBd0lEQWdNQ0F5TXlBeE9TNDNOVlkwTGpJMVFUTXVNalUwSURNdU1qVTBJREFnTUNBd0lERTVMamMxSURGNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEl3TGpVZ01Ua3VOelZqTUNBdU5ERXpMUzR6TXpjdU56VXRMamMxTGpjMVNERXdWakUwU0RNdU5WWTBMakkxWVM0M05TNDNOU0F3SURBZ01TQXVOelV0TGpjMWFERTFMalZoTGpjMUxqYzFJREFnTUNBeElDNDNOUzQzTlhZeE5TNDFlazB4T1M0M05TQXhTRFF1TWpWQk15NHlOVFFnTXk0eU5UUWdNQ0F3SURBZ01TQTBMakkxZGpFMUxqVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdOQzR5TlNBeU0yZ3hOUzQxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURJeklERTVMamMxVmpRdU1qVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdNVGt1TnpVZ01Yb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTXk0MUlERTVMamMxVmpRdU1qVmhMamMxTGpjMUlEQWdNQ0F4SUM0M05TMHVOelZvTVRVdU5XRXVOelV1TnpVZ01DQXdJREVnTGpjMUxqYzFWakUwU0RFMGRqWXVOVWcwTGpJMVlTNDNOVEl1TnpVeUlEQWdNQ0F4TFM0M05TMHVOelZOTVRrdU56VWdNVWcwTGpJMVFUTXVNalUwSURNdU1qVTBJREFnTUNBd0lERWdOQzR5TlhZeE5TNDFRVE11TWpVMElETXVNalUwSURBZ01DQXdJRFF1TWpVZ01qTm9NVFV1TlVFekxqSTFOQ0F6TGpJMU5DQXdJREFnTUNBeU15QXhPUzQzTlZZMExqSTFRVE11TWpVMElETXVNalUwSURBZ01DQXdJREU1TGpjMUlERW5PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRrdU56VWdNakF1TlVnMExqSTFZUzQzTlM0M05TQXdJREFnTVMwdU56VXRMamMxVmpFMUxqVm9NVGQyTkM0eU5XRXVOelV1TnpVZ01DQXdJREV0TGpjMUxqYzFiUzB4TlM0MUxURTNhREUxTGpWaExqYzFMamMxSURBZ01DQXhJQzQzTlM0M05WWTRMalZvTFRFM1ZqUXVNalZoTGpjMUxqYzFJREFnTUNBeElDNDNOUzB1TnpWTk1Ua3VOelVnTVVnMExqSTFRVE11TWpVMElETXVNalUwSURBZ01DQXdJREVnTkM0eU5YWXhOUzQxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURRdU1qVWdNak5vTVRVdU5VRXpMakkxTkNBekxqSTFOQ0F3SURBZ01DQXlNeUF4T1M0M05WWTBMakkxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURFNUxqYzFJREVuT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1Ua3VOelVnTWpBdU5VZzBMakkxWVM0M05USXVOelV5SURBZ01DQXhMUzQzTlMwdU56VldNVEJvTVRkMk9TNDNOV013SUM0ME1UTXRMak16Tnk0M05TMHVOelV1TnpWdE1DMHhPUzQxU0RRdU1qVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdNU0EwTGpJMWRqRTFMalZCTXk0eU5UUWdNeTR5TlRRZ01DQXdJREFnTkM0eU5TQXlNMmd4TlM0MVFUTXVNalUwSURNdU1qVTBJREFnTUNBd0lESXpJREU1TGpjMVZqUXVNalZCTXk0eU5UUWdNeTR5TlRRZ01DQXdJREFnTVRrdU56VWdNU2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1DNDFJREU1TGpjMVlTNDNOUzQzTlNBd0lEQWdNUzB1TnpVdU56VklOQzR5TldFdU56VXVOelVnTUNBd0lERXRMamMxTFM0M05WWTBMakkxWVM0M05TNDNOU0F3SURBZ01TQXVOelV0TGpjMVNEZ3VOVll4TUdnM1ZqTXVOV2cwTGpJMVlTNDNOUzQzTlNBd0lEQWdNU0F1TnpVdU56VjJNVFV1TlhwTk1Ua3VOelVnTVVnMExqSTFRVE11TWpVMElETXVNalUwSURBZ01DQXdJREVnTkM0eU5YWXhOUzQxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURRdU1qVWdNak5vTVRVdU5VRXpMakkxTkNBekxqSTFOQ0F3SURBZ01DQXlNeUF4T1M0M05WWTBMakkxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURFNUxqYzFJREY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUSXdMalVnTVRrdU56VmhMamMxTGpjMUlEQWdNQ0F4TFM0M05TNDNOVWcwTGpJMVlTNDNOUzQzTlNBd0lEQWdNUzB1TnpVdExqYzFWakV3U0RFd1ZqTXVOV2c1TGpjMVlTNDNOUzQzTlNBd0lEQWdNU0F1TnpVdU56VjJNVFV1TlhwTk1Ua3VOelVnTVVnMExqSTFRVE11TWpVMElETXVNalUwSURBZ01DQXdJREVnTkM0eU5YWXhOUzQxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURRdU1qVWdNak5vTVRVdU5VRXpMakkxTkNBekxqSTFOQ0F3SURBZ01DQXlNeUF4T1M0M05WWTBMakkxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F3SURFNUxqYzFJREY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTVMamMxSURJd0xqVklOQzR5TldFdU56VXVOelVnTUNBd0lERXRMamMxTFM0M05WWTBMakkxWVM0M05TNDNOU0F3SURBZ01TQXVOelV0TGpjMVNERTBWakV3YURZdU5YWTVMamMxWVM0M05TNDNOU0F3SURBZ01TMHVOelV1TnpWdE1DMHhPUzQxU0RRdU1qVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lEQWdNU0EwTGpJMWRqRTFMalZCTXk0eU5UUWdNeTR5TlRRZ01DQXdJREFnTkM0eU5TQXlNMmd4TlM0MVFUTXVNalUwSURNdU1qVTBJREFnTUNBd0lESXpJREU1TGpjMVZqUXVNalZCTXk0eU5UUWdNeTR5TlRRZ01DQXdJREFnTVRrdU56VWdNU2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE9TQXhObU10TVM0d01qZ2dNQzB4TGprMU55NHpPVGt0TWk0Mk5qWWdNUzR3TXpkTU9DNDVNVGtnTVRJdU9HTXVNRFV6TFM0eU5UZ3VNRGd4TFM0MU1qWXVNRGd4TFM0NGN5MHVNREk0TFM0MU5ESXRMakE0TVMwdU9HdzNMalF4TlMwMExqSXpOME14Tnk0d05ETWdOeTQyTURFZ01UY3VPVGN5SURnZ01Ua2dPR015TGpJd09TQXdJRFF0TVM0M09URWdOQzAwY3kweExqYzVNUzAwTFRRdE5DMDBJREV1TnpreExUUWdOR013SUM0eU56UXVNREk0TGpVME1pNHdPREV1T0V3M0xqWTJOaUE1TGpBek4wTTJMamsxTnlBNExqTTVPU0EyTGpBeU9DQTRJRFVnT0dNdE1pNHlNRGtnTUMwMElERXVOemt4TFRRZ05ITXhMamM1TVNBMElEUWdOR014TGpBeU9DQXdJREV1T1RVM0xTNHpPVGtnTWk0Mk5qWXRNUzR3TXpkc055NDBNVFVnTkM0eU16ZGpMUzR3TlRNdU1qVTRMUzR3T0RFdU5USTJMUzR3T0RFdU9DQXdJREl1TWpBNUlERXVOemt4SURRZ05DQTBjelF0TVM0M09URWdOQzAwTFRFdU56a3hMVFF0TkMwMEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEV6TGprNE9Dd3hPUzR4TlRNZ1F6RTFMalE0TlN3eE55NDJOVFlnTVRVdU9UZzFMREUxTGpRME5pQXhOUzQwT0RFc01UTXVOVE0zSUV3eE9TNDNOREFzT1M0d056UWdUREl5TGpZMk1pdzRMamd3TnlCTU1qSXVOalExTERndU56ZzVJRU15TWk0M016a3NPQzQ0TURRZ01qSXVPRE0zTERndU56Z3dJREl5TGprd09TdzRMamN3T0NCRE1qTXVNRE13TERndU5UZzNJREl6TGpBek1TdzRMak01TVNBeU1pNDVNVEFzT0M0eU56RWdUREUxTGpjek1Dd3hMakE1TUNCRE1UVXVOakE1TERBdU9UY3dJREUxTGpReE15d3dMamszTUNBeE5TNHlPVElzTVM0d09URWdRekUxTGpJeU1Dd3hMakUyTXlBeE5TNHhPVGNzTVM0eU5qSWdNVFV1TWpFeExERXVNelUySUV3eE5TNHhPVFFzTVM0ek16Z2dUREUwTGpreU55dzBMakkyTVNCTU1UQXVORFl6TERndU5USXdJRU00TGpVMU5DdzRMakF4TlNBMkxqTTBOQ3c0TGpVeE5pQTBMamcwTnl3eE1DNHdNVElnVERndU5qVTJMREV6TGpneU1TQk1NeTR6TWpRc01Ua3VNVFV6SUVNeUxqVTJNaXd4T1M0NU1UVWdNQzQzTVRFc01qSXVNVEE0SURFdU1ETTVMREl5TGprMk1pQkRNUzQ0T1RJc01qTXVNamt3SURRdU1EZzJMREl4TGpRek9DQTBMamcwTnl3eU1DNDJOellnUXpVdU5qQTVMREU1TGpreE5TQXhNQzR4Tnprc01UVXVNelEwSURFd0xqRTNPU3d4TlM0ek5EUWdUREV6TGprNE9Dd3hPUzR4TlRNZ1dpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TUNBeE4yRXpJRE1nTUNBeElEQWdNQ0EySURNZ015QXdJREFnTUNBd0xUWnRNQzA0WVRNZ015QXdJREVnTUNBd0lEWWdNeUF6SURBZ01DQXdJREF0Tm0wd0xUaGhNeUF6SURBZ01TQXdJREFnTmlBeklETWdNQ0F3SURBZ01DMDJiUzA0SURFMllUTWdNeUF3SURFZ01DQXdJRFlnTXlBeklEQWdNQ0F3SURBdE5tMHdMVGhoTXlBeklEQWdNU0F3SURBZ05pQXpJRE1nTUNBd0lEQWdNQzAyYlRBdE9HRXpJRE1nTUNBeElEQWdNQ0EySURNZ015QXdJREFnTUNBd0xUWk5OQ0F4TjJFeklETWdNQ0F4SURBZ01DQTJJRE1nTXlBd0lEQWdNQ0F3TFRadE1DMDRZVE1nTXlBd0lERWdNQ0F3SURZZ015QXpJREFnTUNBd0lEQXRObTB6TFRWaE15QXpJREFnTVNBeExUWWdNQ0F6SURNZ01DQXdJREVnTmlBd0p6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUzTGpJNElESTBZeTB1TlRjZ01DMHhMakUwTFM0eU1pMHhMalU0TFM0Mk5rdzBMalVnTVRJZ01UVXVOeTQyTm1FeUxqSXhJREl1TWpFZ01DQXdJREVnTXk0eE5TQXdZeTQ0Tnk0NE9DNDROeUF5TGpNZ01DQXpMakU0VERFd0xqYzVJREV5YkRndU1EWWdPQzR4Tm1NdU9EY3VPRGd1T0RjZ01pNHpJREFnTXk0eE9DMHVORFF1TkRRdE1TQXVOall0TVM0MU55NDJOaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwd0lERXlZekFnTmk0Mk15QTFMak0zSURFeUlERXlJREV5Y3pFeUxUVXVNemNnTVRJdE1USlRNVGd1TmpNZ01DQXhNaUF3SURBZ05TNHpOeUF3SURFeWVtMHhNQzQzTnkwekxqYzFZVEV1TWpVZ01TNHlOU0F3SURBZ01TQXlMalVnTUhZekxqazFiREV1TURNdE1TNHdNMkV4TGpJMUlERXVNalVnTUNBd0lERWdNUzQzTnlBd1l5NDBPQzQwT1M0ME9DQXhMakk0SURBZ01TNDNOMHd4TWlBeE4yd3ROQzR3TnkwMExqQTJZeTB1TkRndExqUTVMUzQwT0MweExqSTRJREF0TVM0M04yRXhMakkxSURFdU1qVWdNQ0F3SURFZ01TNDNOeUF3YkRFdU1EY2dNUzR3TmxZNExqSTFlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE1pNDVOQ0F4Tmk0d04yTXRMalE1TGpRNExURXVNamd1TkRndE1TNDNOeUF3WVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3TFRFdU56ZHNNUzR3TmkweExqQTNTRGd1TWpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURBdE1pNDFhRE11T1RWTU1URXVNVGNnT1M0M1lURXVNalVnTVM0eU5TQXdJREFnTVNBd0xURXVOemRqTGpRNUxTNDBPQ0F4TGpJNExTNDBPQ0F4TGpjM0lEQk1NVGNnTVRKc0xUUXVNRFlnTkM0d04zcE5NVElnTUVNMUxqTTNJREFnTUNBMUxqTTNJREFnTVRKek5TNHpOeUF4TWlBeE1pQXhNaUF4TWkwMUxqTTNJREV5TFRFeVV6RTRMall6SURBZ01USWdNSG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qUWdNVEpqTUMwMkxqWXlOeTAxTGpNM01pMHhNaTB4TWkweE1rTTFMak0zTXlBd0lEQWdOUzR6TnpNZ01DQXhNbk0xTGpNM015QXhNaUF4TWlBeE1tTTJMall5T0NBd0lERXlMVFV1TXpjeklERXlMVEV5ZW0wdE1UQXVOelkzSURNdU56VmhNUzR5TlNBeExqSTFJREFnTUNBeExUSXVOU0F3ZGkwekxqazBPR3d0TVM0d016RWdNUzR3TXpGaE1TNHlOU0F4TGpJMUlEQWdNQ0F4TFRFdU56WTRMVEV1TnpZNFRERXlJRGRzTkM0d05qWWdOQzR3TmpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4TFRFdU56WTRJREV1TnpZNGJDMHhMakEyTlMweExqQTJOWFl6TGprNE1ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRJZ01Ua3VOVXd1TmpZZ09DNHlPV010TGpnNExTNDROaTB1T0RndE1pNHlOeUF3TFRNdU1UUXVPRGd0TGpnM0lESXVNeTB1T0RjZ015NHhPQ0F3VERFeUlERXpMakl4YkRndU1UWXRPQzR3Tm1NdU9EZ3RMamczSURJdU15MHVPRGNnTXk0eE9DQXdJQzQ0T0M0NE55NDRPQ0F5TGpJNElEQWdNeTR4TkV3eE1pQXhPUzQxZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhPQ0F5ZGpJd1lUSWdNaUF3SURBZ01DQTBJREJXTW1FeUlESWdNQ0F3SURBdE5DQXdlbTB0Tmk0NE15QXhNRXd5TGpVNE55QXpMalF4TkVFeUlESWdNQ0F4SURFZ05TNDBNVFF1TlRnMlRERTJMamd5T1NBeE1pQTFMalF4TkNBeU15NDBNVFJCTVM0NU9TQXhMams1SURBZ01DQXhJRFFnTWpSaE1pQXlJREFnTUNBeExURXVOREUwTFRNdU5ERTBUREV4TGpFM0lERXllaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwMkxqY3lJREkwWXk0MU55QXdJREV1TVRRdExqSXlJREV1TlRjdExqWTJUREU1TGpVZ01USWdPQzR5T1M0Mk5tTXRMamcyTFM0NE9DMHlMakkzTFM0NE9DMHpMakUwSURBdExqZzNMamc0TFM0NE55QXlMak1nTUNBekxqRTRUREV6TGpJeElERXliQzA0TGpBMklEZ3VNVFpqTFM0NE55NDRPQzB1T0RjZ01pNHpJREFnTXk0eE9DNDBNeTQwTkNBeElDNDJOaUF4TGpVM0xqWTJKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRRZ01HRXlJRElnTUNBd0lEQXRNaUF5ZGpJd1lUSWdNaUF3SURBZ01DQTBJREJXTW1FeUlESWdNQ0F3SURBdE1pMHllbTB4Tnk0ME1UUWdNakF1TlRnMllUSWdNaUF3SURFZ01TMHlMamd5T0NBeUxqZ3lPRXczTGpFM01TQXhNaUF4T0M0MU9EWXVOVGcyWVRJZ01pQXdJREVnTVNBeUxqZ3lPQ0F5TGpneU9Fd3hNaTQ0TWprZ01USnNPQzQxT0RVZ09DNDFPRFo2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUSXhMamMxSURFNUxqVmpMUzQxT0NBd0xURXVNVFV0TGpJeUxURXVOVGt0TGpZMVRERXlJREV3TGpjNWJDMDRMakUySURndU1EWmpMUzQ0T0M0NE55MHlMak11T0RjdE15NHhPQ0F3WVRJdU1qRWdNaTR5TVNBd0lEQWdNU0F3TFRNdU1UVk1NVElnTkM0MWJERXhMak0wSURFeExqSmpMamc0TGpnM0xqZzRJREl1TWpnZ01DQXpMakUxTFM0ME5DNDBNeTB4TGpBeExqWTFMVEV1TlRrdU5qVW5PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTkM0NU1qZ3pMREVnUXpNdU5qSTNNeXd4SURJdU5UY3hNeXd5TGpBMU5DQXlMalUzTVRNc015NHpOVGNnUXpJdU5UY3hNeXcwTGpZMklETXVOakkzTXl3MUxqY3hOQ0EwTGpreU9ETXNOUzQzTVRRZ1RERTBMamsxTWpNc05TNDNNVFFnVERFdU5qZzVNeXd4T0M0NU56WWdRekF1Tnpjd015d3hPUzQ0T1RZZ01DNDNOekF6TERJeExqTTRPU0F4TGpZNE9UTXNNakl1TXpFZ1F6SXVNVFV3TXl3eU1pNDNOekVnTWk0M05UTXpMREl6SURNdU16VTNNeXd5TXlCRE15NDVOakF6TERJeklEUXVOVFl6TXl3eU1pNDNOekVnTlM0d01qUXpMREl5TGpNeElFd3hPQzR5T0RVekxEa3VNRFEzSUV3eE9DNHlPRFV6TERFNUxqQTNNU0JETVRndU1qZzFNeXd5TUM0ek56UWdNVGt1TXpReE15d3lNUzQwTWprZ01qQXVOalF6TXl3eU1TNDBNamtnUXpJeExqazBORE1zTWpFdU5ESTVJREl6TGpBd01ETXNNakF1TXpjMElESXpMakF3TURNc01Ua3VNRGN4SUV3eU15NHdNREF6TERFZ1REUXVPVEk0TXl3eElGb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRJZ01qUmpMVEV1TmpZZ01DMHpMVEV1TXpRdE15MHphRFpqTUNBeExqWTJMVEV1TXpRZ015MHpJRE42YlRjdE1UQXVPRE5qTVM0MU9DQXhMalV5SURJdU5qY2dNeTQxTlNBeklEVXVPRE5JTW1NdU16TXRNaTR5T0NBeExqUXlMVFF1TXpFZ015MDFMamd6Vmpkak1DMHpMamczSURNdU1UTXROeUEzTFRkek55QXpMakV6SURjZ04zWTJMakUzZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMDBJREl3Vmpsb01UWjJNVEZJTkhwdE1pMDBhRFYyTFRWSU5uWTFlazB5TUNBMGFDMHlMalZXTWk0MVlURXVOU0F4TGpVZ01DQXhJREF0TXlBd1ZqUm9MVFZXTWk0MVlURXVOU0F4TGpVZ01DQXhJREF0TXlBd1ZqUklORU15TGpNMUlEUWdNU0ExTGpNMUlERWdOM1l4TTJNd0lERXVOalVnTVM0ek5TQXpJRE1nTTJneE5tTXhMalkxSURBZ015MHhMak0xSURNdE0xWTNZekF0TVM0Mk5TMHhMak0xTFRNdE15MHplaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwMkxqTTJJRFF1T1RsTU9DNDFOaUF5YURZdU9EaHNNaTR5SURJdU9UbG9NeTR3T1dNeExqZ2dNQ0F6TGpJM0lERXVORGtnTXk0eU55QXpMak16ZGpFd0xqTTFZekFnTVM0NE5DMHhMalEzSURNdU16TXRNeTR5TnlBekxqTXpTRE11TWpkRE1TNDBOeUF5TWlBd0lESXdMalV4SURBZ01UZ3VOamRXT0M0ek1tTXdMVEV1T0RRZ01TNDBOeTB6TGpNeklETXVNamN0TXk0ek0yZ3pMakE1ZWsweE1pQTNMakl5WVRVdU56UWdOUzQzTkNBd0lERWdNQ0F3SURFeExqUTRJRFV1TnpRZ05TNDNOQ0F3SURBZ01DQXdMVEV4TGpRNGJUQWdNaTQzTTJNeExqWTJJREFnTXk0d01TQXhMak0xSURNdU1ERWdNeTR3TVNBd0lERXVOall0TVM0ek5TQXpMakF4TFRNdU1ERWdNeTR3TVMweExqWTJJREF0TXk0d01TMHhMak0xTFRNdU1ERXRNeTR3TVNBd0xURXVOallnTVM0ek5TMHpMakF4SURNdU1ERXRNeTR3TVNjN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMDRJREV3WXpFdU1TQXdJREl0TGprZ01pMHljeTB1T1MweUxUSXRNaTB5SUM0NUxUSWdNaUF1T1NBeUlESWdNazAyTGpJMUlETXVOV2d4TVM0MVl6RXVOVElnTUNBeUxqYzFJREV1TWpNZ01pNDNOU0F5TGpjMWRqZ3VNalZNTVRjZ01URnNMVFlnTmkwekxqVXRNeTQxTFRRZ05GWTJMakkxWXpBdE1TNDFNaUF4TGpJekxUSXVOelVnTWk0M05TMHlMamMxVFRFM0xqYzFJREZJTmk0eU5VRTFMakkxSURVdU1qVWdNQ0F3SURBZ01TQTJMakkxZGpFeExqVkRNU0F5TUM0Mk5DQXpMak0xSURJeklEWXVNalVnTWpOb01URXVOV015TGpnNUlEQWdOUzR5TlMweUxqTTJJRFV1TWpVdE5TNHlOVlkyTGpJMVF6SXpJRE11TXpVZ01qQXVOalFnTVNBeE55NDNOU0F4SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTFMakU0SURFeWJEY3VNVFl0Tnk0eE5tTXVPRGd0TGpnNExqZzRMVEl1TXlBd0xUTXVNVGd0TGpnNExTNDRPQzB5TGpNdExqZzRMVE11TVRnZ01Fd3hNaUE0TGpneUlEUXVPRFFnTVM0Mk5tTXRMamc0TFM0NE9DMHlMak10TGpnNExUTXVNVGdnTUMwdU9EZ3VPRGd0TGpnNElESXVNeUF3SURNdU1UaE1PQzQ0TWlBeE1td3ROeTR4TmlBM0xqRTJZeTB1T0RndU9EZ3RMamc0SURJdU15QXdJRE11TVRndU5EUXVORFFnTVM0d01TNDJOaUF4TGpVNUxqWTJMalU0SURBZ01TNHhOUzB1TWpJZ01TNDFPUzB1TmpaTU1USWdNVFV1TVRoc055NHhOaUEzTGpFMll5NDBOQzQwTkNBeExqQXhMalkySURFdU5Ua3VOall1TlRnZ01DQXhMakUxTFM0eU1pQXhMalU1TFM0Mk5pNDRPQzB1T0RndU9EZ3RNaTR6SURBdE15NHhPRXd4TlM0eE9DQXhNbm9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1Ua2dNakJqTUNBdU5UVXhMUzQwTkRnZ01TMHhJREZvTFRjdU5EY3hZeTB1TlRVeElEQXRNUzB1TkRRNUxURXRNWFl0TWtneE5HRXlJRElnTUNBd0lEQWdNaTB5Vmpob01tTXVOVFV5SURBZ01TQXVORFE1SURFZ01YWXhNWHBOTlM0M01EVWdPUzQ1T1RaaE1TNHhNallnTVM0eE1qWWdNQ0F3SURFZ01TNDFPUzB4TGpVNU1VdzRMamNnT1M0NE1EbHNNeTR3TURRdE15NHdNRFJoTVM0eE1qVWdNUzR4TWpVZ01DQXhJREVnTVM0MU9USWdNUzQxT1RGTU9DNDNJREV5TGprNU1TQTFMamN3TlNBNUxqazVObnBOTVRnZ05tZ3RNbFl6WVRJZ01pQXdJREFnTUMweUxUSklOV0V5SURJZ01DQXdJREF0TWlBeWRqRXpZVElnTWlBd0lEQWdNQ0F5SURKb01pNDFNamwyTW1Nd0lERXVOalUwSURFdU16UTJJRE1nTXlBelNERTRZekV1TmpVMElEQWdNeTB4TGpNME5pQXpMVE5XT1dNd0xURXVOalUwTFRFdU16UTJMVE10TXkwemVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDA1TGpFM0lESXhMamMxVEM0M015QXhNaTQzT1dNdExqazNMVEV1TURRdExqazNMVEl1TnpFZ01DMHpMamMxWVRJdU5EQXpJREl1TkRBeklEQWdNQ0F4SURNdU5UTWdNR3cwTGpreElEVXVNakpNTVRrdU56UWdNeTR3TTJNdU9UZ3RNUzR3TkNBeUxqVTFMVEV1TURRZ015NDFNeUF3SUM0NU55QXhMakF6TGprM0lESXVOekVnTUNBekxqYzBURGt1TVRjZ01qRXVOelY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURXlJREJoTVRJZ01USWdNQ0F4TURBZ01qUWdNVElnTVRJZ01DQXdNREF0TWpSNlRUWXVNemNnTVRFdU5qRmhNUzR5TlNBeExqSTFJREFnTURFeExqYzJJREJzTWk0ek55QXlMak0ySURVdU16Y3ROUzR6TldFeExqSTFJREV1TWpVZ01DQXdNVEV1TnpZZ01TNDNOa3d4TUM0MUlERTNMalZzTFRRdU1UTXROQzR4TTJFeExqSTFJREV1TWpVZ01DQXdNVEF0TVM0M05ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRJZ01FTTFMalFnTUNBd0lEVXVOQ0F3SURFeWN6VXVOQ0F4TWlBeE1pQXhNaUF4TWkwMUxqUWdNVEl0TVRKVE1UZ3VOaUF3SURFeUlEQjZiVEFnTWpJdU1rTTJMalExSURJeUxqSWdNUzQ0SURFM0xqY2dNUzQ0SURFeUlERXVPQ0EyTGpNZ05pNHpJREV1T0NBeE1pQXhMamhqTlM0M0lEQWdNVEF1TWlBMExqVWdNVEF1TWlBeE1DNHlJREFnTlM0M0xUUXVOalVnTVRBdU1pMHhNQzR5SURFd0xqSjZKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRFMUxqRTRJREUyTGprMVRERXlJREV6TGpjM2JDMHpMakU0SURNdU1UaGpMUzQwT1M0ME9TMHhMakk0TGpRNUxURXVOemNnTUdFeExqSTFJREV1TWpVZ01DQXdJREVnTUMweExqYzNUREV3TGpJeklERXlJRGN1TURVZ09DNDRNbUV4TGpJMUlERXVNalVnTUNBd0lERWdNQzB4TGpjM0lERXVNalVnTVM0eU5TQXdJREFnTVNBeExqYzNJREJNTVRJZ01UQXVNak5zTXk0eE9DMHpMakU0WVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F4TGpjM0lEQmpMalE1TGpRNUxqUTVJREV1TWpnZ01DQXhMamMzVERFekxqYzNJREV5YkRNdU1UZ2dNeTR4T0dNdU5Ea3VORGt1TkRrZ01TNHlPQ0F3SURFdU56ZHpMVEV1TWpndU5Ea3RNUzQzTnlBd1RUSTBJREV5WXpBdE5pNDJNeTAxTGpNM0xURXlMVEV5TFRFeVV6QWdOUzR6TnlBd0lERXljelV1TXpjZ01USWdNVElnTVRJZ01USXROUzR6TnlBeE1pMHhNaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE55NDRNeUF4Tnk0NE0yTXRMak0zTGpNMkxTNDROUzQxTlMweExqTXpMalUxTFM0ME9DQXdMUzQ1TmkwdU1Ua3RNUzR6TXkwdU5UVnNMVFV1TURRdE5TNHdOVlkyWXpBdE1TNHdOQzQ0TXkweExqZzNJREV1T0RjdE1TNDROM014TGpnNExqZ3pJREV1T0RnZ01TNDROM1kxTGpJeWJETXVPVFVnTXk0NU5XTXVOek11TnpRdU56TWdNUzQ1TWlBd0lESXVOalpOTVRJZ01FTTFMak0zSURBZ01DQTFMak0zSURBZ01USnpOUzR6TnlBeE1pQXhNaUF4TWlBeE1pMDFMak0zSURFeUxURXlVekU0TGpZeklEQWdNVElnTUNjN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhNUzQ1T1NBeE55NHpPR0V1TnpVdU56VWdNQ0F3TVMweExqUTRMUzR5Tm13eExqVXRPQzQxTTJFdU56VXVOelVnTUNBd01URXVORGd1TWpWNmJTMHlMakV0Tnk0d05HTXVNakV1TXpVdU1URXVPREl0TGpJeklERXVNRFJNTnk0eE5DQXhNMnd5TGpVeUlERXVOakpoTGpjMUxqYzFJREFnTVRFdExqZ3lJREV1TWpac0xUTXVOUzB5TGpJMVlTNDNOUzQzTlNBd0lEQXhNQzB4TGpJMmJETXVOUzB5TGpJMVlTNDNOUzQzTlNBd0lEQXhNUzR3TkM0eU1ucE5NVFl1T0RVZ01UTnNMVEl1TlRJdE1TNDJNbUV1TnpVdU56VWdNQ0F3TVM0NE1pMHhMakkyYkRNdU5TQXlMakkxWVM0M05TNDNOU0F3SURBeE1DQXhMakkyYkMwekxqVWdNaTR5TldFdU56VXVOelVnTUNBd01TMHVPREl0TVM0eU5ucE5NU0EwWVRNZ015QXdJREF4TXkwemFERTJZVE1nTXlBd0lEQXhNeUF6ZGpFMllUTWdNeUF3SURBeExUTWdNMGcwWVRNZ015QXdJREF4TFRNdE0zcHRNeTQxSURCaExqVXVOU0F3SURFd01DMHhJQzQxTGpVZ01DQXdNREFnTVhwTk1qQWdOa2cwZGpFMGFERTJlazAyTGpVZ00yRXVOUzQxSURBZ01UQXdJREVnTGpVdU5TQXdJREF3TUMweGVtMHlJREZoTGpVdU5TQXdJREV3TUMweElDNDFMalVnTUNBd01EQWdNWG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk5pNHlOU0F5VEM0MUlERXliRFV1TnpVZ01UQm9NVEV1Tld3MUxqYzFMVEV3TFRVdU56VXRNVEJJTmk0eU5YcHRNUzQzTURNZ01UQmhOQ0EwSURBZ01TQXhJRGdnTUNBMElEUWdNQ0F3SURFdE9DQXdlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweExqY3pJREU0TGpjMU1XdzRMakl6TFRndU1qTXhJRE11TlRJZ015NDFNaTA0TGpJek1pQTRMakl6WVRJdU5EZzNJREl1TkRnM0lEQWdNQ0F4TFRNdU5URTVJREFnTWk0ME9EY2dNaTQwT0RjZ01DQXdJREVnTUMwekxqVXhPWHBOTWpJdU1ESTJJREV1T1RjeVlUTXVNekU0SURNdU16RTRJREFnTUNBeElEQWdOQzQyT1ROc0xUTXVPVEEzSURNdU9UQTRMakV4Tmk0eE1UaGhNUzQwT1RNZ01TNDBPVE1nTUNBeElERXRNaTR4TVRFZ01pNHhNVEZzTFRRdU9USTRMVFF1T1RJM1lURXVORGswSURFdU5EazBJREFnTUNBeElESXVNVEV5TFRJdU1URXliQzR4TVRjdU1URTNJRE11T1RBNExUTXVPVEE0WVRNdU16RTRJRE11TXpFNElEQWdNQ0F4SURRdU5qa3pJREI2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURXlMamcyT0NBeE1pNDVRVEV1TWpVZ01TNHlOU0F3SURFZ01DQXhNUzR4SURFeExqRXpZVEV1TWpVZ01TNHlOU0F3SURBZ01DQXhMamMzSURFdU56WTRiVEl1TWpZNElERXVNVE0wWXkwdU1qQTNMalV4TnkwdU5qSXVPVEkwTFRFdU1UTTVJREV1TVRJMFREVXVOaklnTVRndU16aHNNeTR5TWpNdE9DNHpOemRqTGpJdExqVXlMall3TnkwdU9UTXpJREV1TVRJMExURXVNVE01YkRndU5qRTNMVE11TkRRM0xUTXVORFEzSURndU5qRTNlbTAxTGpNME9DMHhNQzQxTVRsakxUUXVOamcyTFRRdU5qZzJMVEV5TGpJNE5DMDBMalk0TmkweE5pNDVOeUF3TFRRdU5qZzNJRFF1TmpnM0xUUXVOamczSURFeUxqSTROU0F3SURFMkxqazNNU0EwTGpZNE5pQTBMalk0TmlBeE1pNHlPRFFnTkM0Mk9EWWdNVFl1T1RjZ01DQTBMalk0TmkwMExqWTROaUEwTGpZNE5pMHhNaTR5T0RRZ01DMHhOaTQ1TjNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NaTR6TXpjZ01Ua3VPVFF5YkRVdU5qY3hMVEV1T1RjM1RERTVMakkyTlNBMkxqY3dObU11T1RneExTNDVPQzQ1T0RFdE1pNDFOeUF3TFRNdU5UVnNMVEV1TkRJdE1TNDBNakZoTWk0MU1TQXlMalV4SURBZ01DQXdMVE11TlRVZ01Fd3pMakF6TmlBeE1pNDVPVEpzTFRFdU9UYzRJRFV1TmpjeFlURXVNREExSURFdU1EQTFJREFnTUNBd0lERXVNamM1SURFdU1qYzVUVEl6SURJeVl6QWdMalUxTFM0ME5TQXhMVEVnTVVneVl5MHVOVFVnTUMweExTNDBOUzB4TFRGekxqUTFMVEVnTVMweGFESXdZeTQxTlNBd0lERWdMalExSURFZ01TYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4TkM0d015QTBMakF6WXk0Mk55NHhOaUF4TGpFdU9ETXVPVFFnTVM0MWJDMHpJREV6WVRFdU1qVWdNUzR5TlNBd0lEQXhMVEl1TkRRdExqVTJiRE10TVROakxqRTJMUzQyTnk0NE15MHhMakVnTVM0MUxTNDVOSHB0TkM0d09DQTBMak16VERJeUlERXlMakU1YkMwekxqZzRJRE11T1RSaE1TNHlOU0F4TGpJMUlEQWdNVEV0TVM0M09DMHhMamMyYkRJdU1USXRNaTR4TlMweUxqRXRNaTR3T0dFeExqSTFJREV1TWpVZ01DQXdNVEV1TnpVdE1TNDNPSHB0TFRFd0xqUTFMakF4WXk0ME9DNDFMalE0SURFdU1qa3RMakF5SURFdU56ZHNMVEl1TVNBeUxqQTRJREl1TVRJZ01pNHhOV0V4TGpJMUlERXVNalVnTUNBeE1TMHhMamM0SURFdU56Wk1NaUF4TWk0eE9Xd3pMamt0TXk0NE0yRXhMakkxSURFdU1qVWdNQ0F3TVRFdU56WXVNREY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUWWdNVE11TnpWaE1TNHlOU0F4TGpJMUlEQWdNVEF3SURJdU5XZzFZVEV1TWpVZ01TNHlOU0F3SURFd01DMHlMalY2VFRBZ01UaGhNeUF6SURBZ01EQXpJRE5vTVRoaE15QXpJREFnTURBekxUTldObUV6SURNZ01DQXdNQzB6TFROSU0yRXpJRE1nTUNBd01DMHpJRE42VFRJeExqVWdObll5YUMweE9WWTJZekF0TGpJNExqSXlMUzQxTGpVdExqVm9NVGhqTGpJNElEQWdMalV1TWpJdU5TNDFlazB6SURFNExqVmhMalV1TlNBd0lEQXhMUzQxTFM0MWRpMDJhREU1ZGpaaExqVXVOU0F3SURBeExTNDFMalY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUSXlMalVnTkdFeExqVWdNUzQxSURBZ01TQXhJREFnTTBneU1IWXhNUzQxWVRFdU5TQXhMalVnTUNBd0lERXRNUzQxSURFdU5VZzNkakl1TldFeExqVWdNUzQxSURBZ01TQXhMVE1nTUZZeU1FZ3hMalZoTVM0MUlERXVOU0F3SURFZ01TQXdMVE5JTkZZMUxqVkJNUzQxSURFdU5TQXdJREFnTVNBMUxqVWdORWd4TjFZeExqVmhNUzQxSURFdU5TQXdJREVnTVNBeklEQldOR2d5TGpWNlRUY2dNVGRvTVRCV04wZzNkakV3ZW0wMUxUTmhNaUF5SURBZ01TQXhJQzR3TURFdE5DNHdNREZCTWlBeUlEQWdNQ0F4SURFeUlERTBlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1DQXhOa2cwWXkweUxqSWdNQzAwTFRFdU9DMDBMVFJ6TVM0NExUUWdOQzAwYURFMll6SXVNaUF3SURRZ01TNDRJRFFnTkhNdE1TNDRJRFF0TkNBMEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVGd1TkRFMUlEUXVOVGcyWVRJZ01pQXdJREVnTVNBeUxqZ3lPQ0F5TGpneU9FdzRMalkxTnlBeE1FZ3lNV0V5SURJZ01DQXdJREVnTUNBMFNEZ3VOalUzYkRJdU5UZzJJREl1TlRnMllUSWdNaUF3SURFZ01TMHlMamd5T0NBeUxqZ3lPRXd4SURFeWJEY3VOREUxTFRjdU5ERTBlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE5TNDFPRFVnTkM0MU9EWmhNaUF5SURBZ01TQXdMVEl1T0RJNElESXVPREk0VERFMUxqTTBNeUF4TUVnellUSWdNaUF3SURBZ01DQXdJRFJvTVRJdU16UXpiQzB5TGpVNE5pQXlMalU0Tm1FeUlESWdNQ0F4SURBZ01pNDRNamdnTWk0NE1qaE1Nak1nTVRKc0xUY3VOREUxTFRjdU5ERTBlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1TQXhOR0V5SURJZ01DQXdJREVnTWlBeWRqWmhNaUF5SURBZ01DQXhMVElnTWtnellUSWdNaUF3SURBZ01TMHlMVEoyTFRaaE1pQXlJREFnTUNBeElEUWdNSFkwYURFMGRpMDBZVElnTWlBd0lEQWdNU0F5TFRKNlRUZ3VPREUxSURZdU9UZzNiREV1TVRjMklERXVNVGM0VmpKaE1pQXlJREFnTUNBeElEUWdNSFkyTGpFM09Hd3hMakU1TmkweExqRTVNMkV5SURJZ01DQXhJREVnTWk0NE1qWWdNaTQ0TXpGc0xUWXVNREkxSURZdU1ERXpMVFl1TURBMExUWXVNREUyWVRJZ01pQXdJREFnTVNBeUxqZ3pNUzB5TGpneU5ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRrdU5TQTVMamMxWXpBdExqWTVMUzQxTmkweExqSTFMVEV1TWpVdE1TNHlOVWd4TlM0MVZqVXVOelZoTVM0eU5TQXhMakkxSURBZ01DQXdMVEl1TlNBd1ZqZ3VOV2d0TWk0M05XRXhMakkxSURFdU1qVWdNQ0F3SURBZ01DQXlMalZJTVROMk1pNDNOV0V4TGpJMUlERXVNalVnTUNBd0lEQWdNaTQxSURCV01URm9NaTQzTldNdU5qa2dNQ0F4TGpJMUxTNDFOaUF4TGpJMUxURXVNalZ0TXk0MUxUWXVOWFl4TTJFeUxqSTFJREl1TWpVZ01DQXdJREV0TWk0eU5TQXlMakkxYUMweE0yRXlMakkxSURJdU1qVWdNQ0F3SURFdE1pNHlOUzB5TGpJMWRpMHhNMEV5TGpJMUlESXVNalVnTUNBd0lERWdOeTQzTlNBeGFERXpRVEl1TWpVZ01pNHlOU0F3SURBZ01TQXlNeUF6TGpJMWJTMDJJREU0TGpWak1DQXVOamt0TGpVMklERXVNalV0TVM0eU5TQXhMakkxYUMwNExqVkJOaTR5TlRjZ05pNHlOVGNnTUNBd0lERWdNU0F4Tmk0M05YWXRPQzQxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F5TGpVZ01IWTRMalZoTXk0M05UUWdNeTQzTlRRZ01DQXdJREFnTXk0M05TQXpMamMxYURndU5XTXVOamtnTUNBeExqSTFMalUySURFdU1qVWdNUzR5TlNjN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhNeTR6T0RZZ05pNHdNVGhzTkM0MU9UWWdOQzQxT1RaTU55NHdPVGNnTWpFdU5EazVJREVnTWpJdU9UazViREV1TlRBeExUWXVNRGsyVERFekxqTTROaUEyTGpBeE9IcHRPQzQyTmpJdE5DNHdOalpoTXk0eU5EZ2dNeTR5TkRnZ01DQXdJREVnTUNBMExqVTVOa3d4T1M0M05TQTRMamcwT0NBeE5TNHhOVFFnTkM0eU5Xd3lMakk1T0MweUxqSTVPV0V6TGpJME9DQXpMakkwT0NBd0lEQWdNU0EwTGpVNU5pQXdlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE1pQTVZeTB4TGpZMklEQXRNeUF4TGpNMExUTWdNM014TGpNMElETWdNeUF6SURNdE1TNHpOQ0F6TFRNdE1TNHpOQzB6TFRNdE0wMHpJRGxqTVM0Mk5pQXdJRE1nTVM0ek5DQXpJRE56TFRFdU16UWdNeTB6SURNdE15MHhMak0wTFRNdE15QXhMak0wTFRNZ015MHplbTB4T0NBd1l6RXVOallnTUNBeklERXVNelFnTXlBemN5MHhMak0wSURNdE15QXpMVE10TVM0ek5DMHpMVE1nTVM0ek5DMHpJRE10TTNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVElnTVRBdU5XTXVPU0F3SURFdU5TNDJJREV1TlNBeExqVnpMUzQySURFdU5TMHhMalVnTVM0MUxURXVOUzB1TmkweExqVXRNUzQxTGpZdE1TNDFJREV1TlMweExqVjZiUzAwTGpVZ01HTXVPU0F3SURFdU5TNDJJREV1TlNBeExqVnpMUzQySURFdU5TMHhMalVnTVM0MVV6WWdNVEl1T1NBMklERXljeTQyTFRFdU5TQXhMalV0TVM0MWVtMDVJREJqTGprZ01DQXhMalV1TmlBeExqVWdNUzQxY3kwdU5pQXhMalV0TVM0MUlERXVOVk14TlNBeE1pNDVJREUxSURFeWN5NDJMVEV1TlNBeExqVXRNUzQxZWsweE1pQXdRelV1TkNBd0lEQWdOUzQwSURBZ01USnpOUzQwSURFeUlERXlJREV5SURFeUxUVXVOQ0F4TWkweE1sTXhPQzQySURBZ01USWdNSHB0TUNBeU1pNHlRell1TkRVZ01qSXVNaUF4TGpnZ01UY3VOeUF4TGpnZ01USWdNUzQ0SURZdU15QTJMak1nTVM0NElERXlJREV1T0dNMUxqY2dNQ0F4TUM0eUlEUXVOU0F4TUM0eUlERXdMaklnTUNBMUxqY3ROQzQyTlNBeE1DNHlMVEV3TGpJZ01UQXVNbm9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qRXVOVE1nTnk0MU1EaHNMVGN1TlRnMklEY3VORFV5WXkwdU5UTTJMalV5TmkweExqSTBMamM1TFRFdU9UUTBMamM1WVRJdU56Y2dNaTQzTnlBd0lEQWdNUzB4TGprME5TMHVOemxNTWk0ME55QTNMalV3T0dFdU56STRMamN5T0NBd0lEQWdNU0F3TFRFdU1EUXpMamMyTGpjMklEQWdNQ0F4SURFdU1EWXhJREJzTnk0MU9EWWdOeTQwTlRKakxqUTROeTQwT0NBeExqSTRMalE0SURFdU56WTRJREJzTnk0MU9EVXROeTQwTlRKaExqYzJMamMySURBZ01DQXhJREV1TURZeElEQWdMamN5T0M0M01qZ2dNQ0F3SURFZ01DQXhMakEwTTNwTk1TQXhPV2d5TWxZMVNERjJNVFI2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURXdMREV5SUVNeE1Dd3hNeTR4TURVZ01UQXVPRGsxTERFMElERXlMREUwSUVNeE15NHhNRFVzTVRRZ01UUXNNVE11TVRBMUlERTBMREV5SUVNeE5Dd3hNQzQ0T1RVZ01UTXVNVEExTERFd0lERXlMREV3SUVNeE1DNDRPVFVzTVRBZ01UQXNNVEF1T0RrMUlERXdMREV5SUZvZ1RURXlMREUzSUVNNUxqSXpPU3d4TnlBM0xERTBMamMyTVNBM0xERXlJRU0zTERrdU1qTTVJRGt1TWpNNUxEY2dNVElzTnlCRE1UUXVOell4TERjZ01UY3NPUzR5TXprZ01UY3NNVElnUXpFM0xERTBMamMyTVNBeE5DNDNOakVzTVRjZ01USXNNVGNnVFRFeUxETXVOU0JETmk0ME5UVXNNeTQxSURFdU56VXhMRGN1TURVeElEQXNNVElnUXpFdU56VXhMREUyTGprME9TQTJMalExTlN3eU1DNDFJREV5TERJd0xqVWdRekUzTGpVME5Td3lNQzQxSURJeUxqSTBPU3d4Tmk0NU5Ea2dNalFzTVRJZ1F6SXlMakkwT1N3M0xqQTFNU0F4Tnk0MU5EVXNNeTQxSURFeUxETXVOU2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE55NDNOU0F6TGprNE5Hd3RNaTR6TVRJdU1EQXhZeTB4TGpneE1TQXdMVEl1TVRZekxqZzBNaTB5TGpFMk15QXlMakEzTjNZeUxqY3lOR2cwTGpNeU0yd3RMalUyTXlBMExqSTJOMmd0TXk0M05sWXlORWc0TGpjMk9WWXhNeTR3TlROSU5WWTRMamM0Tm1nekxqYzJPVlkxTGpZMFF6Z3VOelk1SURFdU9UZzRJREV4TGpBMUlEQWdNVFF1TXpneklEQmpNUzQxT1RZZ01DQXlMamsyTnk0eE1UWWdNeTR6TmpjdU1UWTRkak11T0RFMmVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4TWk0d01qTWdNakF1TnpFell5MHlMamswTkNBd0xUVXVNemM0TFRFdU9UWXROUzR6TlRZdE5DNDVNRFl1TURFM0xUSXVNVEUzSURFdU56STRMUzQxTXpZZ05TNHpNeTB1TlRRMUlETXVOaTB1TURFZ05TNHpNakl0TVM0Mk5EVWdOUzR6TWpjdU5UUTRMakF3TnlBeUxqazBOaTB5TGpNMU5pQTBMamt3TXkwMUxqTWdOQzQ1TUROdE5DNDBNemt0T1M0NE0yRXhMalkzTlNBeExqWTNOU0F3SURFZ01TQXdMVE11TXpVeElERXVOamMxSURFdU5qYzFJREFnTUNBeElEQWdNeTR6TlUwMkxqQTVNeUE1TGpJd04yRXhMalkzTlNBeExqWTNOU0F3SURFZ01TQXpMak0xSURBZ01TNDJOelVnTVM0Mk56VWdNQ0F3SURFdE15NHpOU0F3YlRFM0xqa3dOaUF5TGpjNE1rTXlNeTQ1T1RRZ05TNHpOamNnTVRndU5qSXpJREFnTVRJZ01DQTFMak0zTXlBd0lEQWdOUzR6TnpNZ01DQXhNbU13SURZdU5qSTRJRFV1TXpjeklERXlJREV5SURFeVF6RTRMall5TkNBeU5DQXlNeTQ1T1RVZ01UZ3VOak16SURJMElERXlMakF4VERJMElERXliQzB1TURBeExTNHdNU2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE55NHdPRGdnTVRjdU9EUXhZVEV1TWlBeExqSWdNQ0F3SURFdE1TNDFPVE11TlRnZ05DNDFNVGNnTkM0MU1UY2dNQ0F3SURBdExqYzBOQzB1TWpFM1l5MHVOek00TFM0eE5qZ3RNUzQyTlRNdExqSTNMVEl1TnpVdExqSTNNUzB4TGpBNU9DQXdMVEl1TURFeUxqRXdNeTB5TGpjMU1pNHlOeTB1TkRFeExqQTVOQzB1TmpVM0xqRTRMUzQzTkRFdU1qRTNZVEV1TVRrNUlERXVNVGs1SURBZ01TQXhMVEV1TURFMExUSXVNVGMwWXk0eU16Y3RMakV4TGpZME15MHVNalV4SURFdU1qSXpMUzR6T0RNdU9URTFMUzR5TURjZ01pNHdNRGd0TGpNeklETXVNamcwTFM0ek15QXhMakkzTmk0d01ERWdNaTR6TmprdU1USXpJRE11TWpneExqTXpMalU0TWk0eE16SXVPVGc0TGpJM015QXhMakl5Tmk0ek9EUXVOakF4TGpJM09TNDROaTQ1T1RJdU5UZ2dNUzQxT1RSNmJTMHVOakkwTFRZdU9UVTVZVEV1TmpjMUlERXVOamMxSURBZ01TQXhJREF0TXk0ek5TQXhMalkzTlNBeExqWTNOU0F3SURBZ01TQXdJRE11TXpWNlRUWXVNRGt6SURrdU1qQTNZVEV1TmpjMUlERXVOamMxSURBZ01TQXhJRE11TXpVZ01DQXhMalkzTlNBeExqWTNOU0F3SURBZ01TMHpMak0xSURCNlRUSTBJREV4TGprNE9VTXlNeTQ1T1RVZ05TNHpOamNnTVRndU5qSTBJREFnTVRJdU1EQXlJREFnTlM0ek56TWdNQ0F3SURVdU16Y3pJREFnTVRKak1DQTJMall5T0NBMUxqTTNNeUF4TWlBeE1pNHdNRElnTVRKRE1UZ3VOakl6SURJMElESXpMams1TlNBeE9DNDJNek1nTWpRZ01USXVNREYyTFM0d01ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRZdU5TQXhNV0V4TGpVZ01TNDFJREFnTVNBeElEQXRNeUF4TGpVZ01TNDFJREFnTUNBeElEQWdNMjB1TkRRNUlEVXVPVFZCTmk0NU5EY2dOaTQ1TkRjZ01DQXdJREVnTVRJZ01UbGhOaTQ1TmlBMkxqazJJREFnTUNBeExUUXVPVFE0TFRJdU1EUTRMams1T1M0NU9Ua2dNQ0F3SURFZ01DMHhMalF4TkM0NU9Ua3VPVGs1SURBZ01DQXhJREV1TkRFMExTNHdNREZCTkM0NU5qZ2dOQzQ1TmpnZ01DQXdJREFnTVRJZ01UZGpNUzR6TXpZZ01DQXlMalU1TWkwdU5USWdNeTQxTXpVdE1TNDBOalJoTVNBeElEQWdNQ0F4SURFdU5ERTBJREV1TkRFMFRUWWdPUzQxWVRFdU5TQXhMalVnTUNBeElERWdNeUF3SURFdU5TQXhMalVnTUNBd0lERXRNeUF3VFRFeUlEQkROUzR6TnpNZ01DQXdJRFV1TXpjeklEQWdNVEp6TlM0ek56TWdNVElnTVRJZ01USWdNVEl0TlM0ek56TWdNVEl0TVRKVE1UZ3VOakkzSURBZ01USWdNQ2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE5TQTFMamczTlZZeGJEWWdObWd0TkM0NE56VkRNVFV1TlRBMUlEY2dNVFVnTmk0ME9UVWdNVFVnTlM0NE56VjZiUzB4TGpVM015QTVMalkxTW1NdExqTXdOUzR4TnpJdExqWTBOUzQzTkRndExqWTBOU0F4TGpJMklEQWdMalF5TkMwdU16VXhMamMzTFM0M09ESXVOemRoTGpjM055NDNOemNnTUNBd0lERXRMamM0TWkwdU56ZGpNQzB4TGpBek5TNDJMVEl1TVRJMklERXVOREk1TFRJdU5UazFMakkyTFM0eE5EZ3VOVFF4TFM0MU1Ua3VOVFF4TFM0NU9ETkJNUzR4T0NBeExqRTRJREFnTUNBd0lERXlJREV5TGpBMFlURXVNVGdnTVM0eE9DQXdJREFnTUMweExqRTROeUF4TGpFMk9XTXdJQzQwTWpZdExqTTFMamMzTVMwdU56Z3hMamMzTVdFdU56YzRMamMzT0NBd0lEQWdNUzB1TnpneUxTNDNOekZqTUMweExqUTVOQ0F4TGpJek15MHlMamN3T1NBeUxqYzFMVEl1TnpBNWN6SXVOelVnTVM0eU1UVWdNaTQzTlNBeUxqY3dPV013SUM0NU5USXRMalV5SURFdU9EWXlMVEV1TXpJeklESXVNekU0ZWsweE1pQXlNR0V1T0RJdU9ESWdNQ0F3SURFdExqZ3lOUzB1T0RFMExqZ3lMamd5SURBZ01DQXhJQzQ0TWpVdExqZ3hOQzQ0TWk0NE1pQXdJREFnTVNBdU9ESTFMamd4TkVFdU9ESXVPRElnTUNBd0lERWdNVElnTWpCNmJUUXVNVEkxTFRFeExqSTFZVEl1T0RjNUlESXVPRGM1SURBZ01DQXhMVEl1T0RjMUxUSXVPRGMxVmpGSU5TNDFRVEl1TlNBeUxqVWdNQ0F3SURBZ015QXpMalYyTVRkQk1pNDFJREl1TlNBd0lEQWdNQ0ExTGpVZ01qTm9NVE5oTWk0MUlESXVOU0F3SURBZ01DQXlMalV0TWk0MVZqZ3VOelZvTFRRdU9EYzFlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwMklERTRhREV5VmpaSU5uWXhNbnB0TVRRdU5TQXhMamMxWVM0M05TNDNOU0F3SURBZ01TMHVOelV1TnpWSU5DNHlOV0V1TnpVdU56VWdNQ0F3SURFdExqYzFMUzQzTlZZMExqSTFZUzQzTlM0M05TQXdJREFnTVNBdU56VXRMamMxYURFMUxqVmhMamMxTGpjMUlEQWdNQ0F4SUM0M05TNDNOWFl4TlM0MWVrMHhPUzQzTlNBeFNEUXVNalZCTXk0eU5UUWdNeTR5TlRRZ01DQXdJREFnTVNBMExqSTFkakUxTGpWQk15NHlOVFFnTXk0eU5UUWdNQ0F3SURBZ05DNHlOU0F5TTJneE5TNDFRVE11TWpVMElETXVNalUwSURBZ01DQXdJREl6SURFNUxqYzFWalF1TWpWQk15NHlOVFFnTXk0eU5UUWdNQ0F3SURBZ01Ua3VOelVnTVhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVFVnTVRob00zWXRNMmd0TTNZemVtMHROaUF3YUROMkxUTklPWFl6ZW0wekxUTm9NM1l0TTJndE0zWXplbTB0TmlBd2FETjJMVE5JTm5ZemVtMDVMVE5vTTFZNWFDMHpkak42YlMwMklEQm9NMVk1U0RsMk0zcHRNeTB6YUROV05tZ3RNM1l6ZWswMklEbG9NMVkyU0RaMk0zcE5OQzR5TlNBekxqVmhMamMxTGpjMUlEQWdNQ0F3TFM0M05TNDNOWFl4TlM0MVl6QWdMalF4TkM0ek16Y3VOelV1TnpVdU56Vm9NVFV1TldFdU56VXVOelVnTUNBd0lEQWdMamMxTFM0M05WWTBMakkxWVM0M05TNDNOU0F3SURBZ01DMHVOelV0TGpjMVNEUXVNalY2VFRFNUxqYzFJREl6U0RRdU1qVkJNeTR5TlRRZ015NHlOVFFnTUNBd0lERWdNU0F4T1M0M05WWTBMakkxUVRNdU1qVTBJRE11TWpVMElEQWdNQ0F4SURRdU1qVWdNV2d4TlM0MVFUTXVNalUwSURNdU1qVTBJREFnTUNBeElESXpJRFF1TWpWMk1UVXVOVUV6TGpJMU5DQXpMakkxTkNBd0lEQWdNU0F4T1M0M05TQXlNM29uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk9TQXhPUzQxWVRFdU56VWdNUzQzTlNBd0lERWdNU0F1TURBeExUTXVOVEF4UVRFdU56VWdNUzQzTlNBd0lEQWdNU0E1SURFNUxqVk5Nakl1TWpVZ01UWm9MVGd1TXpJeFl5MHVOekkwTFRJdU1ETTBMVEl1TmpRMkxUTXVOUzAwTGpreU9TMHpMalZUTkM0M09UVWdNVE11T1RZMklEUXVNRGN4SURFMlNERXVOelZoTVM0M05TQXhMamMxSURBZ01DQXdJREFnTXk0MWFESXVNekl4UXpRdU56azFJREl4TGpVek5DQTJMamN4TnlBeU15QTVJREl6Y3pRdU1qQTFMVEV1TkRZMklEUXVPVEk1TFRNdU5XZzRMak15TVdFeExqYzFJREV1TnpVZ01DQXdJREFnTUMwekxqVk5NVFVnTkM0MVlURXVOelVnTVM0M05TQXdJREVnTVMwdU1EQXhJRE11TlRBeFFURXVOelVnTVM0M05TQXdJREFnTVNBeE5TQTBMalZOTVM0M05TQTRhRGd1TXpJeFl5NDNNalFnTWk0d016UWdNaTQyTkRZZ015NDFJRFF1T1RJNUlETXVOWE0wTGpJd05TMHhMalEyTmlBMExqa3lPUzB6TGpWb01pNHpNakZoTVM0M05TQXhMamMxSURBZ01DQXdJREF0TXk0MWFDMHlMak15TVVNeE9TNHlNRFVnTWk0ME5qWWdNVGN1TWpneklERWdNVFVnTVhNdE5DNHlNRFVnTVM0ME5qWXROQzQ1TWprZ015NDFTREV1TnpWaE1TNDNOU0F4TGpjMUlEQWdNQ0F3SURBZ015NDFKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRFM0lEY3VOVXd5TWlBd1NESjJNakpqTUNBeExqRXVPU0F5SURJZ01uTXlMUzQ1SURJdE1uWXROMmd4Tm13dE5TMDNMalY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTNMalExSURCTU15NDFJREUwYURZdU5UZzJURFl1TlRVZ01qUWdNakF1TlNBeE1HZ3ROaTQxT0RaNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEU1SURGb0xUTjJNbWd6WXpFdU1UQXpJREFnTWlBdU9EazNJRElnTW5ZemFESldOV013TFRJdU1qQTJMVEV1TnprMExUUXROQzAwZW0weUlERTRZekFnTVM0eE1ETXRMamc1TnlBeUxUSWdNbWd0TTNZeWFETmpNaTR5TURZZ01DQTBMVEV1TnprMElEUXROSFl0TTJndE1ucE5NeUF4T1hZdE0wZ3hkak5qTUNBeUxqSXdOaUF4TGpjNU5DQTBJRFFnTkdnemRpMHlTRFZqTFRFdU1UQXpJREF0TWkwdU9EazNMVEl0TW5wTk15QTFZekF0TVM0eE1ETXVPRGszTFRJZ01pMHlhRE5XTVVnMVF6SXVOemswSURFZ01TQXlMamM1TkNBeElEVjJNMmd5ZW0wMklEWXVOVU01SURFd0xqRXlNaUF4TUM0eE1qSWdPU0F4TVM0MUlEbHpNaTQxSURFdU1USXlJREl1TlNBeUxqVXRNUzR4TWpJZ01pNDFMVEl1TlNBeUxqVlRPU0F4TWk0NE56Z2dPU0F4TVM0MWVtMDNMalVnTmk0MVlURXVOVEF5SURFdU5UQXlJREFnTUNBd0lERXVNRFl4TFRJdU5UWXhiQzB5TGpBeE1pMHlMakF4TVVFMExqUTBOQ0EwTGpRME5DQXdJREFnTUNBeE5pQXhNUzQxUXpFMklEa3VNREU1SURFekxqazRNU0EzSURFeExqVWdOMU0zSURrdU1ERTVJRGNnTVRFdU5TQTVMakF4T1NBeE5pQXhNUzQxSURFMll5NDJPVE1nTUNBeExqTTBNUzB1TVRjZ01TNDVNamd0TGpRMU1Xd3lMakF4TVNBeUxqQXhNbU11TWprekxqSTVNeTQyTnpjdU5ETTVJREV1TURZeExqUXpPWG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1USWdOQzR4TVRoMk1UWXVNemcwU0RNdU9ERTFUREV5SURRdU1URTRlbTB4TUM0M056Z2dNVFV1T1RjMVRERXpMamM1TWlBeUxqRXdOMEV4TGprNElERXVPVGdnTUNBd0lEQWdNVElnTVdNdExqY3hNaUF3TFRFdU5ESXpMak0zTFRFdU56a3lJREV1TVRBM1RERXVNaklnTWpBdU1Ea3pReTQxTkRFZ01qRXVOREl5SURFdU5URWdNak1nTXk0d01EWWdNak5vTVRjdU9UbGpNUzQwT1RVZ01DQXlMalEyTWkweExqVTNPQ0F4TGpjNE1pMHlMamt3TjNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVGt1T0RneUlERXlTRE11TkRrNFZqTXVPREUwVERFNUxqZzRNaUF4TW5wdE1pNHdNVEl0TVM0M09USk1NeTQ1TURjZ01TNHlNa0V4TGprNElERXVPVGdnTUNBd0lEQWdNaTQ1T1RrZ01VTXhMamsxTVNBeElERWdNUzQ0TkRNZ01TQXpMakF3TlhZeE55NDVPVU14SURJeUxqRTFOeUF4TGprMU1TQXlNeUF6SURJell5NHpJREFnTGpZeExTNHdOeTQ1TURjdExqSXlNV3d4Tnk0NU9EY3RPQzQ1T0Rkak1TNDBOelV0TGpjek55QXhMalEzTlMweUxqZzBOeUF3TFRNdU5UZzBlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE1TQTFkaTB1TlVFeUxqVWdNaTQxSURBZ01DQXdJRGd1TlNBeWFDMDFRVEl1TlNBeUxqVWdNQ0F3SURBZ01TQTBMalYyTVRWQk1pNDFJREl1TlNBd0lEQWdNQ0F6TGpVZ01qSm9NVGRoTWk0MUlESXVOU0F3SURBZ01DQXlMalV0TWk0MWRpMHhNa0V5TGpVZ01pNDFJREFnTUNBd0lESXdMalVnTlVneE1Yb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRrdU5TQXphQzB4TlVNeUxqQXlJRE1nTUNBMUxqQXpJREFnTnk0MWRqbERNQ0F4T0M0NU9DQXlMakF5SURJeElEUXVOU0F5TVdneE5XTXlMalEzSURBZ05DNDFMVEl1TURJZ05DNDFMVFF1TlhZdE9VTXlOQ0ExTGpBeklESXhMamszSURNZ01Ua3VOU0F6ZW0wdE55NDBNU0F4TWk0NE9IWXROeTQ0YURFdU5UbDJOeTQ0YUMweExqVTVlbTB6TGpRMUxUY3VPR2cxTGpVNGRqRXVNelJvTFRSMk1TNDRPR2d6TGpNNWRqRXVNelZvTFRNdU16bDJNeTR5TTJndE1TNDFPSFl0Tnk0NGVtMHRNVEV1TkNBMkxqZ3pZeTB1TXpNdExqTTNMUzQxT0MwdU56a3RMamMyTFRFdU1qZ3RMakUzTFM0ME9TMHVNall0TVM0d015MHVNall0TVM0Mk1pQXdMUzQyTmk0eE1TMHhMakkyTGpNekxURXVPQzR5TWkwdU5UVXVOVE10TVM0d01TNDVOUzB4TGpNNUxqTXlMUzR5T1M0Mk9DMHVOVEVnTVM0eExTNDJOaTQwTVMwdU1UVXVPRGd0TGpJeklERXVOQzB1TWpNdU5Ea2dNQ0F1T1RNdU1EWWdNUzR6TWk0eE9YTXVOekl1TXpFZ01TQXVOVFJqTGpJM0xqSXpMalV1TlRFdU5qY3VPRE11TVRjdU16SXVNamt1TmpjdU16VWdNUzR3TkVnNExqWTVZVEV1TmpjZ01TNDJOeUF3SURBZ01DMHVOVFl0TGprell5MHVNamt0TGpJMExTNDJPUzB1TXpZdE1TNHhPUzB1TXpZdExqTTNJREF0TGpjdU1EY3RMamszTGpJeExTNHlOeTR4TkMwdU5TNHpOQzB1TmprdU5Ua3RMakU0TGpJMUxTNHpNaTQxTkMwdU5ERXVPRGd0TGpBNUxqTTBMUzR4TXk0M0xTNHhNeUF4TGpBNUlEQWdMalF1TURVdU56Y3VNVFVnTVM0eExqRXVNelF1TWpVdU5qTXVORE11T0RndU1Ua3VNalF1TkRJdU5ETXVOamt1TlRjdU1qY3VNVFF1TlRjdU1qRXVPUzR5TVM0ek1TQXdJQzQxT1MwdU1EVXVPRE10TGpFMkxqSTFMUzR4TGpRMkxTNHlNeTQyTkMwdU5DNHhOeTB1TVRjdU16RXRMak0yTGpRdExqVTNMakV0TGpJeExqRTBMUzQwTWk0eE5DMHVOalIyTFM0d05FZzNMakExZGkweExqSXlhRE11TWpoMk5DNHhORWc1TGpFMGJDMHVNRFV0TVM0d05XZ3RMakF6WXkwdU1qY3VORFV0TGpVNExqYzNMUzQ1TkM0NU5HRXlMamdnTWk0NElEQWdNQ0F4TFRFdU1qVXVNamRqTFM0MU9TQXdMVEV1TVRFdExqRXRNUzQxTmkwdU15MHVORFl0TGpJdExqZzFMUzQwT0MweExqRTNMUzQ0TTNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVFV1TkRrZ01qQXVPRE5qTGpnM0xUSXVNREVnTVM0ek55MDBMamMxSURFdU5EZ3ROeTQxT0dnMExqUTBZVGt1TlRNZ09TNDFNeUF3SURBZ01TMDFMamt5SURjdU5UaDZiUzB4TWk0NUxUY3VOVGhvTkM0ME5HTXVNVEVnTWk0NE15NDJNU0ExTGpVM0lERXVORGtnTnk0MU9DMHpMakUxTFRFdU1qVXROUzQwTnkwMExqRXlMVFV1T1RNdE55NDFPSHBOT0M0MU1pQXpMakUzWXkwdU9EZ2dNaTR3TVMweExqTTRJRFF1TnpVdE1TNDBPU0EzTGpVNFNESXVOVGxqTGpRMkxUTXVORFlnTWk0M09DMDJMak16SURVdU9UTXROeTQxT0hwdE1TNHdNU0EzTGpVNFF6a3VOellnTlM0ME15QXhNUzQwSURJdU5UUWdNVElnTWk0MWFDNHdNV011TmpjdU1EWWdNaTR5TkNBekxqQXhJREl1TkRZZ09DNHlOVWc1TGpVemVtMHlMalE0SURFd0xqYzFTREV5WXkwdU5pMHVNRFF0TWk0eU5DMHlMamt6TFRJdU5EY3RPQzR5TldnMExqazBZeTB1TWpJZ05TNHlOQzB4TGpjNUlEZ3VNVGt0TWk0ME5pQTRMakkxZW0wNUxqUXRNVEF1TnpWb0xUUXVORFJqTFM0eE1TMHlMamd6TFM0Mk1TMDFMalUzTFRFdU5EZ3ROeTQxT0dFNUxqVXpJRGt1TlRNZ01DQXdJREVnTlM0NU1pQTNMalU0ZWsweU5DQXhNa015TkNBMUxqTTVJREU0TGpZeUxqQXhJREV5TGpBeElEQklNVEpETlM0ek9DQXdJREFnTlM0ek9DQXdJREV5Y3pVdU16Z2dNVElnTVRJZ01USm9MakF4UXpFNExqWXlJREkwSURJMElERTRMall4SURJMElERXllaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwMkxqZ2dPUzQ0U0RNdU1VTXpMalVnTnlBMUxqUWdOQzQySURnZ015NDJZeTB1TnlBeExqY3RNUzR4SURNdU9TMHhMaklnTmk0eWJTMHpMamNnTWk0eGFETXVOMk11TVNBeUxqTXVOU0EwTGpZZ01TNHlJRFl1TWkweUxqWXRNUzAwTGpVdE15NHpMVFF1T1MwMkxqSnROeTQ0TFRndU9HTXVOU0F3SURFdU9DQXlMalFnTWlBMkxqZElPQzQ0WXk0eUxUUXVNeUF4TGpZdE5pNDNJREl1TVMwMkxqZE5PUzQxSURFMkxqTmpMUzR6TFRFdU1TMHVOaTB5TGpZdExqY3ROQzQwYURJdU4yTXVPUzB4SURJdU1TMHhMamNnTXk0MUxUSXVNUzB1TVMweUxqTXRMalV0TkM0MUxURXVNeTAyTGpJZ01pNDJJREVnTkM0MElETXVNeUEwTGprZ05pNHhMamN1TVNBeExqVXVOQ0F5TGpFdU9DMHVNaTAxTGpNdE5DNDFMVGt1TlMwNUxqZ3RPUzQxUXpVdU5DQXhJREVnTlM0MElERWdNVEF1T1dNd0lEVXVNeUEwTGpJZ09TNDJJRGt1TlNBNUxqZ3RMall0TVM0eExURXRNaTR6TFRFdE15NDNkaTB1TjIweE1DNDRMUzQxVERFMkxqSWdNakJzTFRJdU5TMHlMalZqTFM0ekxTNHpMUzR6TFM0NElEQXRNUzR4TGpNdExqTXVPQzB1TXlBeElEQnNNUzQxSURFdU5TQXpMakV0TXk0eVl5NHlMUzR6TGpjdExqTWdNU0F3SUM0ekxqTXVNeTQ0SURBZ01TNHhUVEUzSURFeFl5MHpMak1nTUMwMklESXVOeTAySURaek1pNDNJRFlnTmlBMklEWXRNaTQzSURZdE5pMHlMamN0TmkwMkxUWW5PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTXk0eE56TWdORXd4TWlBeE1DNHhPVFFnTWpBdU5UVTJJRFJJTXk0eE56TjZUVEV5SURFekxqSTVUREVnTlM0NE1EWldNakJvTWpKV05TNDFORGhNTVRJZ01UTXVNamw2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUY2dNVEYyTWk0MGFETXVPVGRqTFM0eE5pQXhMakF5T1MweExqSWdNeTR3TWkwekxqazNJRE11TURJdE1pNHpPU0F3TFRRdU16UXRNUzQ1TnprdE5DNHpOQzAwTGpReUlEQXRNaTQwTkNBeExqazFMVFF1TkRJZ05DNHpOQzAwTGpReUlERXVNellnTUNBeUxqSTNMalU0SURJdU56a2dNUzR3T0d3eExqa3RNUzQ0TTBNeE1DNDBOeUExTGpZNUlEZ3VPRGtnTlNBM0lEVmpMVE11T0RjZ01DMDNJRE11TVRNdE55QTNjek11TVRNZ055QTNJRGRqTkM0d05DQXdJRFl1TnpJeExUSXVPRFFnTmk0M01qRXROaTQ0TkNBd0xTNDBOaTB1TURVeExTNDRNUzB1TVRFeExURXVNVFpJTjNwdE1UY2dNSFl5YUMwemRqTm9MVEoyTFROb0xUTjJMVEpvTTFZNGFESjJNMmd6ZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhJREl6VmpFd2FEVjJNVE5JTVhwdE9DNDFJREJXTVdnMWRqSXlhQzAxZW0wNExqVWdNRlkzYURRdU9UazVkakUyU0RFNGVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB6SURFMWFERTRZVEVnTVNBd0lEQWdNU0F3SURKSU0yRXhJREVnTUNBd0lERWdNQzB5ZW0wd0xUUm9NVGhoTVNBeElEQWdNQ0F4SURBZ01rZ3pZVEVnTVNBd0lEQWdNU0F3TFRKNmJUQXROR2d4T0dFeElERWdNQ0F3SURFZ01DQXlTRE5oTVNBeElEQWdNU0F4SURBdE1ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRjdU56YzJMREl5TGpNNU1DQkRNVE11TnpjMUxESXpMamszT0NBNUxqSTBOaXd5TWk0ek5Ua2dOeTR5TVRrc01UZ3VOemN3SUVNM0xqQTBNQ3d4T0M0MU1ETWdOaTQ0TmpBc01UZ3VNakU0SURZdU5qZzRMREUzTGpreE1DQkROUzR4TXpJc01UVXVNVFl6SURNdU1ESTRMREV6TGpjNE1pQXlMalU0T0N3eE15NDFPREVnUXpJdU1UUTVMREV6TGpNM09DQXdMalU1TlN3eE1pNDJNVE1nTVM0eE1EQXNNVEV1TmpreUlFTXhMak00TVN3eE1TNHhPREFnTWk0eE5qTXNNVEF1T0RBeElESXVPRGM0TERFd0xqY3lOaUJETkM0d01EQXNNVEF1TkRneElEVXVPRGszTERFeExqQXpOQ0EzTGpjM01pd3hNaTR5TWpJZ1REUXVNRFUwTERNdU5ERTVJRU16TGpjME1Td3lMalkzTnlBekxqazRPU3d4TGpnMU1DQTBMall3T1N3eExqTTNPU0JETkM0Mk1USXNNUzR6TnpZZ05DNDJNVFlzTVM0ek56TWdOQzQyTWpFc01TNHpOamtnUXpRdU5qYzJMREV1TXpJM0lEUXVOek0wTERFdU1qZzVJRFF1TnprMkxERXVNalV6SUVNMExqZ3hNQ3d4TGpJME55QTBMamd5TVN3eExqSXpPU0EwTGpnek5Td3hMakl6TVNCRE5DNDVNREVzTVM0eE9UVWdOQzQ1TnpBc01TNHhOakFnTlM0d05ESXNNUzR4TXpJZ1F6VXVNRFEwTERFdU1UTXhJRFV1TURRMExERXVNVE14SURVdU1EUTFMREV1TVRNeElFTTFMakEwTlN3eExqRXpNU0ExTGpBME5Td3hMakV6TVNBMUxqQTBOeXd4TGpFeU9TQkROUzR4TVRrc01TNHhNREVnTlM0eE9UTXNNUzR3TnprZ05TNHlOamNzTVM0d05qQWdRelV1TWpneExERXVNRFUzSURVdU1qazFMREV1TURVMElEVXVNekE1TERFdU1EUTVJRU0xTGpNNE1Dd3hMakF6TlNBMUxqUTBPU3d4TGpBeU1TQTFMalV4T0N3eExqQXhNeUJETlM0MU1qVXNNUzR3TVRNZ05TNDFNamtzTVM0d01URWdOUzQxTXpRc01TNHdNVEVnUXpZdU16RTNMREF1T1RJNElEY3VNRGt6TERFdU16UTNJRGN1TkRBMkxESXVNRGc0SUV3NUxqVTVNaXczTGpJMk1TQkRPUzQyTkRNc05pNDJNak1nTVRBdU1EVTFMRFl1TURNMUlERXdMamN3T1N3MUxqYzNOaUJETVRFdU5qTXpMRFV1TkRFd0lERXlMalk0T1N3MUxqZ3pPU0F4TXk0d05qa3NOaTQzTXpRZ1F6RXpMakEzTVN3MkxqYzBNaUF4TXk0d056UXNOaTQzTlRJZ01UTXVNRGMzTERZdU56VTVJRU14TXk0eE5ETXNOaTR4TXpZZ01UTXVOVFV5TERVdU5UWTFJREUwTGpFNU1TdzFMak14TWlCRE1UVXVNVEUzTERRdU9UUTJJREUyTGpFM015dzFMak0zTXlBeE5pNDFOVEVzTmk0eU56RWdRekUyTGpVMk55dzJMak13TlNBeE5pNDFOemdzTmk0ek5ERWdNVFl1TlRreExEWXVNemM1SUVNeE5pNDJPREFzTlM0M09EUWdNVGN1TURjNUxEVXVNalE1SURFM0xqWTVOU3cxTGpBd05pQkRNVGd1TmpFNUxEUXVOalF3SURFNUxqWXhPU3cwTGprM01DQXhPUzQ1T1Rrc05TNDROamNnVERJd0xqQXdNU3cxTGpnM01pQkRNakF1TURBeExEVXVPRGN5SURJeExqRXhOU3c0TGpBek9TQXlNaTR6TmpZc01URXVOalV4SUVNeU1pNDBNVE1zTVRFdU56a3hJREl5TGpRMU55d3hNUzQ1TXpFZ01qSXVORGsxTERFeUxqQTNNaUJETWpRdU1ESTNMREUyTGpFMk1TQXlNUzQ1Tmpjc01qQXVOekk0SURFM0xqYzNOaXd5TWk0ek9UQW5PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTWpJdU1UYzRJREV6TGpVNE0yd3RPUzR4TXpFZ09DNDVPVEpoTVM0MU1ESWdNUzQxTURJZ01DQXdJREV0TWk0d09UUWdNR3d0T1M0eE16RXRPQzQ1T1RKaE5pNHhPVElnTmk0eE9USWdNQ0F3SURFZ01DMDRMamMzTTJNeUxqUXpPUzB5TGpReE15QTJMak01TlMweUxqUXhNeUE0TGpnek5DQXdUREV5SURZdU1UVTBiREV1TXpRMExURXVNelEwWXpJdU5ETTVMVEl1TkRFeklEWXVNemsxTFRJdU5ERXpJRGd1T0RNMElEQmhOaTR4T1RJZ05pNHhPVElnTUNBd0lERWdNQ0E0TGpjM015YzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4Tnk0M05pQXpZVFl1TWpZeklEWXVNall6SURBZ01DQXdMVFF1TkRFMklERXVPREE1VERFeUlEWXVNVFUwYkMweExqTTBOQzB4TGpNME5VRTJMakkyTlNBMkxqSTJOU0F3SURBZ01DQTJMakl6T1NBellUWXVNall5SURZdU1qWXlJREFnTUNBd0xUUXVOREUzSURFdU9EQTVJRFl1TVRreklEWXVNVGt6SURBZ01DQXdJREFnT0M0M056UnNPUzR4TXlBNExqazVNV0V4TGpRNU9TQXhMalE1T1NBd0lEQWdNQ0F5TGpBNU5TQXdiRGt1TVRNdE9DNDVPVEZoTmk0eE9UTWdOaTR4T1RNZ01DQXdJREFnTUMwNExqYzNORUUyTGpJMk15QTJMakkyTXlBd0lEQWdNQ0F4Tnk0M05qSWdNMjB3SURKak1TNHhNemtnTUNBeUxqSXdPQzQwTXpjZ015NHdNRFVnTVM0eU1qWXVOemsyTGpjNU15QXhMakl6TkNBeExqZzBPQ0F4TGpJek5DQXlMamszY3kwdU5ETTRJREl1TVRjM0xURXVNakkxSURJdU9UWXlUREV5SURJd0xqYzVPR3d0T0M0M05qWXRPQzQyTXpKRE1pNDBNemdnTVRFdU16Y3pJRElnTVRBdU16RTRJRElnT1M0eE9UWnpMalF6T0MweUxqRTNOeUF4TGpJeU9DMHlMamsyTlVFMExqSTFNeUEwTGpJMU15QXdJREFnTVNBMkxqSXpPQ0ExWXpFdU1UTTVJREFnTWk0eU1EZ3VORE0zSURNdU1EQXpJREV1TWpJMGJERXVNelEwSURFdU16UTBUREV5SURndU9UZ3piREV1TkRFMExURXVOREUxSURFdU16TTNMVEV1TXpNM1FUUXVNalE1SURRdU1qUTVJREFnTUNBeElERTNMamMySURVbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVEV1T1RnZ01qSXVNalZNTVM0NE1pQXhNUzQ1TlVNdExqSTRJRGt1T0RNdExqWTFJRFl1TkNBeExqRTRJRFF1TUROaE5TNDNOak1nTlM0M05qTWdNQ0F3SURFZ09DNDNMUzQxTm13eUxqRWdNaTR4TkNBeExqazFMVEV1T1Roak1pNHhMVEl1TVRNZ05TNDBPQzB5TGpVZ055NDRNaTB1TmpVZ01pNDRJREl1TWpNZ01pNDVPU0EyTGpNMUxqVTFJRGd1T0RKTU1URXVPVGdnTWpJdU1qVjZUVEUxTGpNZ09TNDFOR011TkMwdU5DNDBMVEV1TURZZ01DMHhMalEyTFM0MExTNDBMVEV1TURVdExqUXRNUzQwTlNBd1RERXlJRGt1T1RSc0xURXVPRFV0TVM0NE5tTXRMalF0TGpRdE1TNHdOUzB1TkMweExqUTFJREF0TGpRdU5DMHVOQ0F4TGpBMklEQWdNUzQwTm13eExqZzFJREV1T0RZdE1TNDROU0F4TGpnMll5MHVOQzQwTFM0MElERXVNRFVnTUNBeExqUTFMalF1TkNBeExqQTFMalF4SURFdU5EVWdNRXd4TWlBeE1pNDROV3d4TGpnMUlERXVPRFpqTGpRdU5ERWdNUzR3TlM0ME1TQXhMalExSURBZ0xqUXRMalF1TkMweExqQTFJREF0TVM0ME5Xd3RNUzQ0TlMweExqZzJJREV1T0RVdE1TNDRObm9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1UQWdNVEpqTUMweExqRXdNeTQ0T1RjdE1pQXlMVEp6TWlBdU9EazNJRElnTWkwdU9EazNJREl0TWlBeUxUSXRMamc1TnkweUxUSnRNaTAxWXkweExqRXdNeUF3TFRJdExqZzVOeTB5TFRKekxqZzVOeTB5SURJdE1pQXlJQzQ0T1RjZ01pQXlhRE5qTUMweUxqYzFOeTB5TGpJME15MDFMVFV0TlZNM0lESXVNalF6SURjZ05XRTBMams0SURRdU9UZ2dNQ0F3SURBZ01TNDBNemdnTXk0MVFUUXVPVGdnTkM0NU9DQXdJREFnTUNBM0lERXlZekFnTWk0M05UY2dNaTR5TkRNZ05TQTFJRFVnTVM0eE1ETWdNQ0F5SUM0NE9UY2dNaUF5Y3kwdU9EazNJREl0TWlBeUxUSXRMamc1TnkweUxUSklOMk13SURJdU56VTNJREl1TWpReklEVWdOU0ExY3pVdE1pNHlORE1nTlMwMVlUUXVPVGdnTkM0NU9DQXdJREFnTUMweExqUXpPQzB6TGpWQk5DNDVPQ0EwTGprNElEQWdNQ0F3SURFM0lERXlZekF0TWk0M05UY3RNaTR5TkRNdE5TMDFMVFVuT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1USWdPV0V4TGpVZ01TNDFJREFnTVNBeExTNHdNREV0TWk0NU9UbEJNUzQxSURFdU5TQXdJREFnTVNBeE1pQTVlbTB4TGpVZ055NDFZVEV1TlNBeExqVWdNQ0F4SURFdE15QXdkaTAxWVRFdU5TQXhMalVnTUNBeElERWdNeUF3ZGpWNlRURXlJREJETlM0ek56TWdNQ0F3SURVdU16Y3pJREFnTVRKek5TNHpOek1nTVRJZ01USWdNVElnTVRJdE5TNHpOek1nTVRJdE1USlRNVGd1TmpJM0lEQWdNVElnTUhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5OaUF4TkM0MVFUSXVOVEF6SURJdU5UQXpJREFnTUNBeElETXVOU0F4TW1Nd0xURXVNemM0SURFdU1USXlMVEl1TlNBeUxqVXRNaTQxY3pJdU5TQXhMakV5TWlBeUxqVWdNaTQxTFRFdU1USXlJREl1TlMweUxqVWdNaTQxZW0weE9DMDBMakkxU0RFeExqY3pPV0UySURZZ01DQXhJREFnTUNBekxqVklNVGhXTVRkb05IWXRNeTR5TldneWRpMHpMalY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTFJREV3TGpWakxTNDRNeUF3TFRFdU5TMHVOamN0TVM0MUxURXVOWE11TmpjdE1TNDFJREV1TlMweExqVWdNUzQxTGpZM0lERXVOU0F4TGpVdExqWTNJREV1TlMweExqVWdNUzQxYlRBZ05tTXRMamd6SURBdE1TNDFMUzQyTnkweExqVXRNUzQxY3k0Mk55MHhMalVnTVM0MUxURXVOU0F4TGpVdU5qY2dNUzQxSURFdU5TMHVOamNnTVM0MUxURXVOU0F4TGpWdExUWXRObU10TGpneklEQXRNUzQxTFM0Mk55MHhMalV0TVM0MVV6Z3VNVGNnTnk0MUlEa2dOeTQxY3pFdU5TNDJOeUF4TGpVZ01TNDFMUzQyTnlBeExqVXRNUzQxSURFdU5XMHdJRFpqTFM0NE15QXdMVEV1TlMwdU5qY3RNUzQxTFRFdU5YTXVOamN0TVM0MUlERXVOUzB4TGpVZ01TNDFMalkzSURFdU5TQXhMalV0TGpZM0lERXVOUzB4TGpVZ01TNDFUVEV5SURCRE5TNHpOeUF3SURBZ05TNHpOeUF3SURFeWN6VXVNemNnTVRJZ01USWdNVElnTVRJdE5TNHpOeUF4TWkweE1sTXhPQzQyTXlBd0lERXlJREFuT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qQWdPR013SURJdU1qTXRMamt4SURRdU1qUXRNaTR6T1NBMUxqZG9MakF5WXkwdU9Ua3VPVGN0TVM0MklESXVNekV0TVM0Mk15QXpMamhXTVRsSU9IWXRNUzQxWXkwdU1ETXRNUzQxTFM0Mk5TMHlMamcxTFRFdU5qUXRNeTQ0TTBFM0xqazFOU0EzTGprMU5TQXdJREFnTVNBMElEaGpNQzAwTGpReUlETXVOVGd0T0NBNExUaHpPQ0F6TGpVNElEZ2dPSHBOT0NBeU1pNDFWakl4YURoMk1TNDFZekFnTGpnekxTNDJOeUF4TGpVdE1TNDFJREV1TldndE5XTXRMamd6SURBdE1TNDFMUzQyTnkweExqVXRNUzQxZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhOaTQwTWpRZ01UQXVPVEpzTFRVdU1UUTVJRGd1TlRob0xURXVNRFE0YkM0NU1ESXROUzQyTWpWSU9DNHdNalJoTGpVeU5TNDFNalVnTUNBd0lERXRMalEwT1MwdU56azJUREV5TGpjeU5DQTBMalZvTVM0d05EaHNMUzQ1SURVdU5qSTFhRE11TVRBeVl5NDBNU0F3SUM0Mk5qSXVORFExTGpRMUxqYzVOVTB4TWlBd1F6VXVNemN6SURBZ01DQTFMak0zTWlBd0lERXlZekFnTmk0Mk1qY2dOUzR6TnpNZ01USWdNVElnTVRKek1USXROUzR6TnpNZ01USXRNVEpqTUMwMkxqWXlPQzAxTGpNM015MHhNaTB4TWkweE1pYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TVNBeE5TNHdOV014TGpFZ01DQXlJQzQ1SURJZ01sWXlNV013SURFdU1TMHVPU0F5TFRJZ01rZ3pZeTB4TGpFZ01DMHlMUzQ1TFRJdE1sWXpZekF0TVM0eExqa3RNaUF5TFRKb05HRXlJRElnTUNBeElERWdNQ0EwU0RWMk1UUm9NVFIyTFRFdU9UVmpNQzB4TGpFdU9TMHlJREl0TW5wTk1USWdNVFJqTFM0MU1TQXdMVEV1TURJdExqSXRNUzQwTVMwdU5Ua3RMamM1TFM0M09DMHVOemt0TWk0d05DQXdMVEl1T0RKTU1UWXVNVFlnTlNBeE5DQTFMakF4WXkweExqRWdNQzB5TFM0NUxUSXRNaUF3TFRFdU1URXVPRGt0TWlBeUxUSk1NakF1T1RrZ01XZ3lkakpzTGpBeElEZGhNaUF5SURBZ01TQXhMVFFnTUZZM0xqZ3piQzAxTGpVNUlEVXVOVGhqTFM0ek9TNHpPUzB1T1M0MU9TMHhMalF4TGpVNWVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4TWlBMExqVmpNUzQyTmlBd0lETWdNUzR6TkNBeklETnpMVEV1TXpRZ015MHpJRE10TXkweExqTTBMVE10TXlBeExqTTBMVE1nTXkwemJUY3VOU0F6UXpFNUxqVWdNeTR6TmlBeE5pNHhOQ0F3SURFeUlEQWdOeTQ0TmlBd0lEUXVOU0F6TGpNMklEUXVOU0EzTGpWak1DQXhMak11TXpZZ01pNDFMamswSURNdU5UWklOUzQwVERFeUlESTBiRFl1TmkweE1pNDVOR2d0TGpBMFl5NDFPQzB4TGpBMkxqazBMVEl1TWpZdU9UUXRNeTQxTmljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMDRJREV3Vmpkak1DMHlMakl3TmlBeExqYzVOQzAwSURRdE5ITTBJREV1TnprMElEUWdOSFl6U0RoNmJURXhJQzR3TVRkV04yTXdMVE11T0RZdE15NHhOREV0TnkwM0xUZFROU0F6TGpFMElEVWdOM1l6TGpBeE4yRTRMalk1T0NBNExqWTVPQ0F3SURBZ01DMHhMamMxSURVdU1qTXpJRGd1TnpVZ09DNDNOU0F3SURFZ01DQXhOeTQxSURCQk9DNDJPVGdnT0M0Mk9UZ2dNQ0F3SURBZ01Ua2dNVEF1TURFM2VpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4T0M0Mk5UWWdNVEV1TVRrMmJDMHpMak16TXlBeUxqVTNNeUF4TGpJMUlEUXVNRGc1WXk0eU5TNDRNVGN0TGpZNE55QXhMalEzTnkweExqTTFPUzQ1TlRoTU1USWdNVFl1TXpNMGJDMHpMakl4TkNBeUxqUTRNbU10TGpZM015NDFNVGt0TVM0Mk1Ea3RMakUwTVMweExqTTFPUzB1T1RVNGJERXVNalV0TkM0d09TMHpMak16TkMweUxqVTNNbU10TGpZMkxTNDFNVEV0TGpNd05DMHhMalUzT0M0MU15MHhMalUzT0dnMExqQTNNMHd4TVM0eE55QTFMall5WXk0eU5USXRMamd5TmlBeExqUXhMUzQ0TWpZZ01TNDJOaklnTUd3eExqSXlNaUF6TGprNU9HZzBMakEzTldNdU9ETXpJREFnTVM0eE9TQXhMakEyTnk0MU1qZ2dNUzQxTnpoNlRUSXhMamMxSURNdU5VZ3lMakkxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3TFRJdU5XZ3hPUzQxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3SURJdU5YcHRNQ0F4T1M0MVNESXVNalZoTVM0eU5TQXhMakkxSURBZ01DQXhJREF0TWk0MWFERTVMalZoTVM0eU5TQXhMakkxSURBZ01DQXhJREFnTWk0MWVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB4TlM0NE1EUWdNVFF1TlRSTU1UTXVPU0F4Tmk0d01Xd3VOekUwSURJdU16TTNZeTR4TkRNdU5EWTNMUzR6T1RJdU9EUTFMUzQzTnpjdU5UUTNUREV5SURFM0xqUTNOMnd0TVM0NE16Y2dNUzQwTVRoakxTNHpPRFF1TWprM0xTNDVNaTB1TURndExqYzNOaTB1TlRRM2JDNDNNVFF0TWk0ek16Y3RNUzQ1TURRdE1TNDBOMk10TGpNM09DMHVNamt6TFM0eE56UXRMamt3TWk0ekxTNDVNREpvTWk0ek1qbHNMamN0TWk0eU9EVmhMalE1TlM0ME9UVWdNQ0F3SURFZ0xqazBPU0F3YkM0Mk9Ua2dNaTR5T0RWb01pNHpNamhqTGpRM05pQXdJQzQyT0M0Mk1TNHpNREl1T1RBeWVrMHlNUzQzTlNBNUxqVklNaTR5TldFeExqSTFJREV1TWpVZ01DQXdJREVnTUMweUxqVm9NVGt1TldFeExqSTFJREV1TWpVZ01DQXdJREVnTUNBeUxqVjZiVEFnTVRNdU5VZ3lMakkxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3TFRJdU5XZ3hPUzQxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3SURJdU5Yb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRJZ01UUmhNaUF5SURBZ01DQXdJREl0TWxZellUSWdNaUF3SURBZ01DMDBJREIyT1dFeUlESWdNQ0F3SURBZ01pQXliVEV4TFRKak1DQXlMamt6T0MweExqRTBOQ0ExTGpjd01TMHpMakl5TWlBM0xqYzNPRUV4TUM0NU1qVWdNVEF1T1RJMUlEQWdNQ0F4SURFeUlESXpZVEV3TGpreU5TQXhNQzQ1TWpVZ01DQXdJREV0Tnk0M056Z3RNeTR5TWpKQk1UQXVPVEkxSURFd0xqa3lOU0F3SURBZ01TQXhJREV5WXpBdE1pNDVNemdnTVM0eE5EUXROUzQzTURFZ015NHlNakl0Tnk0M056aEJNaUF5SURBZ01DQXhJRGN1TURVZ055NHdOVEVnTmk0NU5USWdOaTQ1TlRJZ01DQXdJREFnTlNBeE1tTXdJREV1T0RjdU56STRJRE11TmpJM0lESXVNRFVnTkM0NU5EbEJOaTQ1TlRNZ05pNDVOVE1nTUNBd0lEQWdNVElnTVRsak1TNDROeUF3SURNdU5qSTNMUzQzTWpnZ05DNDVORGt0TWk0d05VRTJMamsxTXlBMkxqazFNeUF3SURBZ01DQXhPU0F4TW1Nd0xURXVPRGN0TGpjeU9DMHpMall5TnkweUxqQTFMVFF1T1RRNVlUSWdNaUF3SURFZ01TQXlMamd5T0MweUxqZ3lPVUV4TUM0NU1qVWdNVEF1T1RJMUlEQWdNQ0F4SURJeklERXlKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRFNExqYzFJREZCTkM0eU5UVWdOQzR5TlRVZ01DQXdJREVnTWpNZ05TNHlOWFl4TXk0MVFUUXVNalUxSURRdU1qVTFJREFnTUNBeElERTRMamMxSURJelNEVXVNalZCTkM0eU5UVWdOQzR5TlRVZ01DQXdJREVnTVNBeE9DNDNOVlkxTGpJMVFUUXVNalUxSURRdU1qVTFJREFnTUNBeElEVXVNalVnTVdneE15NDFlazAxTGpVZ01UZ3VOV2d4TTNZdE1UTm9MVEV6ZGpFemVtMDVMamszTFRFdU9UZHNMVEV1TlMweExqVXRNUzQwTnlBeExqUTNkaTAwYURSc0xURXVORGNnTVM0ME55QXhMalVnTVM0MUxURXVNRFlnTVM0d05ucE5OeTQxSURFeExqVnNNUzQwTnkweExqUTNMVEV1TlMweExqVWdNUzR3TmkweExqQTJJREV1TlNBeExqVk1NVEV1TlNBM0xqVjJOR2d0Tkhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5OeTQxTXlBMkxqUTNiREV1TlNBeExqVk1NVEF1TlNBMkxqVjJOR2d0Tkd3eExqUTNMVEV1TkRjdE1TNDFMVEV1TlNBeExqQTJMVEV1TURaNmJUa3VPVGNnTnk0d00yd3RNUzQwTnlBeExqUTNJREV1TlNBeExqVXRNUzR3TmlBeExqQTJMVEV1TlMweExqVXRNUzQwTnlBeExqUTNkaTAwYURSNmJUSWdOUzQzTldFdU1qVXVNalVnTUNBd0lERXRMakkxTGpJMVNEUXVOelZoTGpJMUxqSTFJREFnTUNBeExTNHlOUzB1TWpWV05DNDNOV0V1TWpVdU1qVWdNQ0F3SURFZ0xqSTFMUzR5TldneE5DNDFZUzR5TlM0eU5TQXdJREFnTVNBdU1qVXVNalYyTVRRdU5YcE5NVGt1TWpVZ01VZzBMamMxUVRNdU56VTBJRE11TnpVMElEQWdNQ0F3SURFZ05DNDNOWFl4TkM0MVFUTXVOelUwSURNdU56VTBJREFnTUNBd0lEUXVOelVnTWpOb01UUXVOVUV6TGpjMU5DQXpMamMxTkNBd0lEQWdNQ0F5TXlBeE9TNHlOVlkwTGpjMVFUTXVOelUwSURNdU56VTBJREFnTUNBd0lERTVMakkxSURGNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEU0TGpVZ01UUXVOV3d0TVM0ME55QXhMalEzSURFdU5TQXhMalV0TVM0d05pQXhMakEyTFRFdU5TMHhMalV0TVM0ME55QXhMalEzZGkwMGFEUjZUVFl1TlRNZ05TNDBOMnd4TGpVZ01TNDFURGt1TlNBMUxqVjJOR2d0Tkd3eExqUTNMVEV1TkRjdE1TNDFMVEV1TlNBeExqQTJMVEV1TURaNlRUSXdMalVnTVRrdU56VmhMamMxTGpjMUlEQWdNQ0F4TFM0M05TNDNOVWcwTGpJMVlTNDNOUzQzTlNBd0lEQWdNUzB1TnpVdExqYzFWalF1TWpWaExqYzFMamMxSURBZ01DQXhJQzQzTlMwdU56Vm9NVFV1TldFdU56VXVOelVnTUNBd0lERWdMamMxTGpjMWRqRTFMalY2VFRFNUxqYzFJREZJTkM0eU5VRXpMakkxTkNBekxqSTFOQ0F3SURBZ01DQXhJRFF1TWpWMk1UVXVOVUV6TGpJMU5DQXpMakkxTkNBd0lEQWdNQ0EwTGpJMUlESXphREUxTGpWQk15NHlOVFFnTXk0eU5UUWdNQ0F3SURBZ01qTWdNVGt1TnpWV05DNHlOVUV6TGpJMU5DQXpMakkxTkNBd0lEQWdNQ0F4T1M0M05TQXhlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE1TQXlMakkxWXpBZ0xqWTVMUzQxTmlBeExqSTFMVEV1TWpVZ01TNHlOVWcxTGpJMk9HdzFMak0yTmlBMUxqTTJObUV4TGpJMUlERXVNalVnTUNBd0lERXRNUzQzTmpnZ01TNDNOamhNTXk0MUlEVXVNalk0VmprdU56VmhNUzR5TlNBeExqSTFJREFnTUNBeExUSXVOU0F3VmpGb09DNDNOV011TmprZ01DQXhMakkxTGpVMklERXVNalVnTVM0eU5YcE5NakV1TnpVZ01UTmpMalk1SURBZ01TNHlOUzQxTmlBeExqSTFJREV1TWpWV01qTm9MVGd1TnpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURBdE1pNDFhRFF1TkRneWJDMDFMak0yTmkwMUxqTTJObUV4TGpJMUlERXVNalVnTUNBd0lERWdNUzQzTmpndE1TNDNOamhzTlM0ek5qWWdOUzR6TmpaV01UUXVNalZqTUMwdU5qa3VOVFl0TVM0eU5TQXhMakkxTFRFdU1qVjZKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRFMElERTNMalZqTUNBeExqTTNPQzB4TGpFeU1pQXlMalV0TWk0MUlESXVOVUV5TGpVd015QXlMalV3TXlBd0lEQWdNU0E1SURFM0xqVldNVGRvTlhZdU5YcHRPQzQ1TkRjdE1TNDROMHd4T0M0M01ERWdNaTQzTVRKaE1TNHdNaklnTVM0d01qSWdNQ0F3SURBdE1TNDFOall0TGpVeU1Xd3RNVFV1TnlBeE1TNHlOR010TGpNM0xqSTJOQzB1TlRJMUxqYzBOQzB1TXpneUlERXVNVGM1YkM0MU5URWdNUzQyTnpoakxqRTBMalF5TlM0MU16SXVOekV5TGprM05DNDNNVEpJTjNZdU5XRTBMalVnTkM0MUlEQWdNQ0F3SURrZ01GWXhOMmcxTGprM00yTXVOeUF3SURFdU1UazFMUzQyT1RZdU9UYzBMVEV1TXpkNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEl4TGpVZ09TNDFZekV1TXpnZ01DQXlMalVnTVM0eE15QXlMalVnTWk0MVlUSXVOU0F5TGpVZ01DQXdJREV0TWk0MUlESXVOV2d0TVRsRE1TNHhNeUF4TkM0MUlEQWdNVE11TXpnZ01DQXhNbU13TFRFdU16Y2dNUzR4TXkweUxqVWdNaTQxTFRJdU5XZ3hPWHB0TFRFNUxUTkRNUzR4TXlBMkxqVWdNQ0ExTGpNNElEQWdOR013TFRFdU16Y2dNUzR4TXkweUxqVWdNaTQxTFRJdU5XZ3hPVU15TWk0NE9DQXhMalVnTWpRZ01pNDJNeUF5TkNBMFlUSXVOU0F5TGpVZ01DQXdJREV0TWk0MUlESXVOV2d0TVRsNmJURTVJREV4WXpFdU16Z2dNQ0F5TGpVZ01TNHhNeUF5TGpVZ01pNDFZVEl1TlNBeUxqVWdNQ0F3SURFdE1pNDFJREl1TldndE1UbERNUzR4TXlBeU1pNDFJREFnTWpFdU16Z2dNQ0F5TUdNd0xURXVNemNnTVM0eE15MHlMalVnTWk0MUxUSXVOV2d4T1hvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NU0E1TGpjMVl6QXRMalk1TGpVMkxURXVNalVnTVM0eU5TMHhMakkxYURRdU5EZ3lUREV1TXpZMklETXVNVE0wWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F4TGpjMk9DMHhMamMyT0V3NExqVWdOaTQzTXpKV01pNHlOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNaTQxSURCV01URklNaTR5TlVNeExqVTJJREV4SURFZ01UQXVORFFnTVNBNUxqYzFlazB4TkM0eU5TQXlNMk10TGpZNUlEQXRNUzR5TlMwdU5UWXRNUzR5TlMweExqSTFWakV6YURndU56VmhNUzR5TlNBeExqSTFJREFnTUNBeElEQWdNaTQxYUMwMExqUTRNbXcxTGpNMk5pQTFMak0yTm1FeExqSTFJREV1TWpVZ01DQXdJREV0TVM0M05qZ2dNUzQzTmpoTU1UVXVOU0F4Tnk0eU5qaDJOQzQwT0RKak1DQXVOamt0TGpVMklERXVNalV0TVM0eU5TQXhMakkxZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhOQzR6SURFNExqRTNZVEV1TWpVZ01TNHlOU0F3SURBZ01TQXhMamMzSURCakxqUTVMalE1TGpRNUlERXVNamdnTUNBeExqYzJUREV5SURJMGJDMDBMakEzTFRRdU1EZGpMUzQwT0MwdU5EZ3RMalE0TFRFdU1qY2dNQzB4TGpjMllURXVNalVnTVM0eU5TQXdJREFnTVNBeExqYzNJREJzTVM0d05TQXhMakEwZGkwekxqazJZVEV1TWpVZ01TNHlOU0F3SURBZ01TQXlMalVnTUhZekxqazJiREV1TURVdE1TNHdOSHB0TFRrdU5URXROQzQ1TW13eExqQTBJREV1TURWakxqUTVMalE1TGpRNUlERXVNamdnTUNBeExqYzNMUzQwT0M0ME9DMHhMakk0TGpRNExURXVOellnTUV3d0lERXliRFF1TURjdE5DNHdOMk11TkRndExqUTRJREV1TWpndExqUTRJREV1TnpZZ01DQXVORGt1TkRrdU5Ea2dNUzR5T0NBd0lERXVOemRzTFRFdU1EUWdNUzR3TldnekxqazJZVEV1TWpVZ01TNHlOU0F3SURBZ01TQXdJREl1TlVnMExqYzVlbTB4TlM0eE5DMDFMak15VERJMElERXliQzAwTGpBM0lEUXVNRGRqTFM0ME9DNDBPQzB4TGpJM0xqUTRMVEV1TnpZZ01HRXhMakkxSURFdU1qVWdNQ0F3SURFZ01DMHhMamMzYkRFdU1EUXRNUzR3TldndE15NDVObUV4TGpJMUlERXVNalVnTUNBd0lERWdNQzB5TGpWb015NDVOa3d4T0M0eE55QTVMamRoTVM0eU5TQXhMakkxSURBZ01DQXhJREF0TVM0M04yTXVORGt0TGpRNElERXVNamd0TGpRNElERXVOellnTUhwTk9TNDNJRFV1T0ROakxTNDBPUzQwT1MweExqSTRMalE1TFRFdU56Y2dNQzB1TkRndExqUTVMUzQwT0MweExqSTRJREF0TVM0M05rd3hNaUF3YkRRdU1EY2dOQzR3TjJNdU5Ea3VORGd1TkRrZ01TNHlOeUF3SURFdU56WnpMVEV1TWpndU5Ea3RNUzQzTnlBd2JDMHhMakExTFRFdU1EUjJNeTQ1Tm1FeExqSTFJREV1TWpVZ01DQXdJREV0TWk0MUlEQldOQzQzT1V3NUxqY2dOUzQ0TTNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5OUzR3TUN3M0xqazBJRXcxTGpBd0xEY3VPVFlnVERFeUxqQXdMREV1TURBZ1RERXlMakF3TERJekxqQXdJRXcxTGpBd0xERTJMamt4SUV3MUxqQXdMREUyTGprMElFd3lMakF3TERFMkxqazBJRU13TGprd0xERTJMamswSURBdU1EQXNNVFl1TURRZ01DNHdNQ3d4TkM0NU5DQk1NQzR3TUN3NUxqazBJRU13TGpBd0xEZ3VPRE1nTUM0NU1DdzNMamswSURJdU1EQXNOeTQ1TkNCTU5TNHdNQ3czTGprMElGb2dUVEl6TGpZekxERTBMakV5SUVNeU5DNHhNaXd4TkM0Mk1DQXlOQzR4TWl3eE5TNHpPU0F5TXk0Mk15d3hOUzQ0T0NCRE1qTXVNVFVzTVRZdU16Y2dNakl1TXpVc01UWXVNemNnTWpFdU9EY3NNVFV1T0RnZ1RERTVMamMxTERFekxqYzNJRXd4Tnk0Mk15d3hOUzQ0T0NCRE1UY3VNVFVzTVRZdU16Y2dNVFl1TXpVc01UWXVNemNnTVRVdU9EY3NNVFV1T0RnZ1F6RTFMak00TERFMUxqTTVJREUxTGpNNExERTBMall3SURFMUxqZzNMREUwTGpFeUlFd3hOeTQ1T0N3eE1pNHdNQ0JNTVRVdU9EY3NPUzQ0T0NCRE1UVXVNemdzT1M0ek9TQXhOUzR6T0N3NExqWXdJREUxTGpnM0xEZ3VNVElnUXpFMkxqTTFMRGN1TmpNZ01UY3VNVFVzTnk0Mk15QXhOeTQyTXl3NExqRXlJRXd4T1M0M05Td3hNQzR5TXlCTU1qRXVPRFlzT0M0eE1pQkRNakl1TXpVc055NDJNeUF5TXk0eE5TdzNMall6SURJekxqWXpMRGd1TVRJZ1F6STBMakV5TERndU5qQWdNalF1TVRJc09TNDBNQ0F5TXk0Mk15dzVMamc0SUV3eU1TNDFNaXd4TWk0d01DQk1Nak11TmpNc01UUXVNVElnV2ljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHlNQ0F4WVRNZ015QXdJREFnTVNBeklETjJNVFpoTXlBeklEQWdNQ0F4TFRNZ00wZzBZVE1nTXlBd0lEQWdNUzB6TFROV05HRXpJRE1nTUNBd0lERWdNeTB6YURFMmVtMHROaTQzTVRnZ05DNHhNek5oTVM0ME1ETWdNUzQwTURNZ01DQXdJREF0TWk0MU5qUWdNR3d0TlM0MU9UY2dNVEl1Tm1FeExqTTVOaUF4TGpNNU5pQXdJREFnTUNBdU56RTBJREV1T0RRMklERXVOREF4SURFdU5EQXhJREFnTUNBd0lERXVPRFV0TGpjeE1VdzRMalUySURFMkxqbG9OaTQ0T0RKc0xqZzNOQ0F4TGprMk4yRXhMalF3TkNBeExqUXdOQ0F3SURBZ01DQXhMamcxTVM0M01TQXhMak01TnlBeExqTTVOeUF3SURBZ01DQXVOekV6TFRFdU9EUTFiQzAxTGpVNU55MHhNaTQyZWswNUxqZ3dNeUF4TkM0eFRERXlJRGt1TVRVMWJESXVNVGszSURRdU9UUTFTRGt1T0RBemVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDAzSURCak1TNDJOU0F3SURNZ01TNHpOU0F6SUROMk1UaGpNQ0F4TGpZMUxURXVNelVnTXkweklETnpMVE10TVM0ek5TMHpMVE5XTTJNd0xURXVOalVnTVM0ek5TMHpJRE10TTNwdE1UQWdNR014TGpZMUlEQWdNeUF4TGpNMUlETWdNM1l4T0dNd0lERXVOalV0TVM0ek5TQXpMVE1nTTNNdE15MHhMak0xTFRNdE0xWXpZekF0TVM0Mk5TQXhMak0xTFRNZ015MHplaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwNElERXhZVFF1TlNBMExqVWdNQ0F4SURFZ01DMDVJRFF1TlNBMExqVWdNQ0F3SURFZ01DQTVlbTB4TUNBell6TXVNekUwSURBZ05pQXlMamN4TXlBMklEWXVNRFl4VmpJeVNEQjJMVEV1T1RFNVF6QWdNVFV1TmpFNElETXVOVGd5SURFeUlEZ2dNVEpqTWk0Mk1UUWdNQ0EwTGpreU55QXhMakkzTWlBMkxqTTROeUF6TGpJelFUVXVPVEkzSURVdU9USTNJREFnTUNBeElERTRJREUwZW0wd0xURmhNeTR5TlNBekxqSTFJREFnTVNBeElEQXROaTQxSURNdU1qVWdNeTR5TlNBd0lEQWdNU0F3SURZdU5Yb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRJZ01USmpOUzQxTWpNZ01DQXhNQ0EwTGpRM055QXhNQ0F4TUhZeVNESjJMVEpqTUMwMUxqVXlNeUEwTGpRM055MHhNQ0F4TUMweE1IcHRNQzB4WVRVdU5TQTFMalVnTUNBeElERWdNQzB4TVNBMUxqVWdOUzQxSURBZ01TQXhJREFnTVRGNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUyTGpVZ01USmhOeTQxSURjdU5TQXdJREFnTVNBM0xqVWdOeTQxVmpJeFNEbDJMVEV1TldFM0xqVWdOeTQxSURBZ01DQXhJRGN1TlMwM0xqVjZiVEF0TVdFMElEUWdNQ0F4SURFZ01DMDRJRFFnTkNBd0lEQWdNU0F3SURoNmJTMDNMakkxSURGSU5pNDFkakl1TnpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4TFRJdU5TQXdWakV5U0RFdU1qVmhNUzR5TlNBeExqSTFJREFnTUNBeElEQXRNaTQxU0RSV05pNDNOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNaTQxSURCV09TNDFhREl1TnpWaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURBZ01pNDFlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1TNDNJREl4TGpkaE5DNDFJRFF1TlNBd0lEQXhMVFF1TURrZ01TNHlNa0V5TUM0eU9TQXlNQzR5T1NBd0lEQXhNUzR4TVNBMkxqVXhJRFF1TlNBMExqVWdNQ0F3TVRndU55QXlMak15SURRdU5TQTBMalVnTUNBd01UWXVPRFlnT1M0NFlURTFMamczSURFMUxqZzNJREFnTURBM0xqTTRJRGN1TXpnZ05DNDBOaUEwTGpRMklEQWdNREUzTGpRMUxURXVPRE1nTkM0MUlEUXVOU0F3SURBeE1DQTJMak0ySnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTRJREV6TGpWak1DMHlMakl5TFRFdU1qRXROQzR4TlMwekxUVXVNVGxXTWk0ME5VRXlMalVnTWk0MUlEQWdNQ0F3SURFM0lEQklOMkV5TGpVZ01pNDFJREFnTUNBd0lESWdNaTQwTlhZMUxqZzJZeTB4TGpjNUlERXVNRFF0TXlBeUxqazNMVE1nTlM0eE9XZzFkamd1TkRaTU1USWdNalJzTVMweUxqQTBWakV6TGpWb05Yb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROT1M0eE15QTJMak0zWXk0ME9TNDBPQzQwT1NBeExqSTNJREFnTVM0M05td3RNaTQyTVNBeUxqWXlJREl1TmpFZ01pNDJNbU11TkRrdU5EZ3VORGtnTVM0eU55QXdJREV1TnpZdExqUTRMalE1TFRFdU1qY3VORGt0TVM0M05pQXdiQzB5TGpZeUxUSXVOakV0TWk0Mk1pQXlMall4WXkwdU5EZ3VORGt0TVM0eU9DNDBPUzB4TGpjMklEQXRMalE1TFM0ME9TMHVORGt0TVM0eU9DQXdMVEV1Tnpac01pNDJNUzB5TGpZeVRDNHpOeUE0TGpFell5MHVORGt0TGpRNUxTNDBPUzB4TGpJNElEQXRNUzQzTmk0ME9DMHVORGtnTVM0eU9DMHVORGtnTVM0M05pQXdiREl1TmpJZ01pNDJNU0F5TGpZeUxUSXVOakZqTGpRNUxTNDBPU0F4TGpJNExTNDBPU0F4TGpjMklEQjZUVEl3TGpVZ09DNDJPV014TGpRNUxqZzNJREl1TlNBeUxqUTJJREl1TlNBMExqTXhhQzAwZGpjdU9UWk1NVGdnTWpOc0xURXRNaTR3TkZZeE0yZ3ROR013TFRFdU9EVWdNUzR3TVMwekxqUTBJREl1TlMwMExqTXhWakl1T1ROakxTNDROaTB1TWpJdE1TNDFMVEV0TVM0MUxURXVPVE5vT0dNd0lDNDVNeTB1TmpRZ01TNDNNUzB4TGpVZ01TNDVNM1kxTGpjMmVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB3SURFeVl6QWdOUzR4TWpNZ015NHlNVEVnT1M0ME9UY2dOeTQzTXlBeE1TNHlNVGd0TGpFeExTNDVNemN0TGpJeU55MHlMalE0TWk0d01qVXRNeTQxTmpZdU1qRTNMUzQ1TXpJZ01TNDBNREV0TlM0NU16Z2dNUzQwTURFdE5TNDVNemh6TFM0ek5UY3RMamN4TlMwdU16VTNMVEV1TnpjMFl6QXRNUzQyTmk0NU5qSXRNaTQ1SURJdU1UWXhMVEl1T1NBeExqQXlJREFnTVM0MU1USXVOelkxSURFdU5URXlJREV1TmpneUlEQWdNUzR3TWpVdExqWTFNeUF5TGpVMU55MHVPVGtnTXk0NU56Z3RMakk0TVNBeExqRTRPUzQxT1RjZ01pNHhOVGtnTVM0M05qa2dNaTR4TlRrZ01pNHhNak1nTUNBekxqYzFOaTB5TGpJek9TQXpMamMxTmkwMUxqUTNNU0F3TFRJdU9EWXhMVEl1TURVMkxUUXVPRFl0TkM0NU9URXROQzQ0TmkwekxqTTVPQ0F3TFRVdU16a3pJREl1TlRRNUxUVXVNemt6SURVdU1UZzBJREFnTVM0d01qY3VNemsxSURJdU1USTNMamc0T1NBeUxqY3lObUV1TXpZdU16WWdNQ0F3SURFZ0xqQTRNeTR6TkROakxTNHdPVEV1TXpjNExTNHlPVE1nTVM0eE9Ea3RMak16TWlBeExqTTFOUzB1TURVekxqSXhPQzB1TVRjekxqSTJOUzB1TkM0eE5Ua3RNUzQwT1RJdExqWTVOQzB5TGpReU5DMHlMamczTlMweUxqUXlOQzAwTGpZeU55QXdMVE11TnpZNUlESXVOek0zTFRjdU1qSTVJRGN1T0RreUxUY3VNakk1SURRdU1UUTBJREFnTnk0ek5qVWdNaTQ1TlRNZ055NHpOalVnTmk0NE9Ua2dNQ0EwTGpFeE55MHlMalU1TlNBM0xqUXpNUzAyTGpFNU9TQTNMalF6TVMweExqSXhNU0F3TFRJdU16UTRMUzQyTXkweUxqY3pPQzB4TGpNM015QXdJREF0TGpVNU9TQXlMakk0TWkwdU56UTBJREl1T0RRdExqSTRNaUF4TGpBNE5DMHhMakEyTkNBeUxqUTFOaTB4TGpVME9TQXpMakl6TlVNNUxqVTROQ0F5TXk0NE1UVWdNVEF1TnpjZ01qUWdNVElnTWpSak5pNDJNamNnTUNBeE1pMDFMak0zTXlBeE1pMHhNbE14T0M0Mk1qY2dNQ0F4TWlBd0lEQWdOUzR6TnpNZ01DQXhNaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1DNDJNaUE1TGpRNFREWXVOak11TkRoRE5DNDJNeTB1T0NBeUlDNDJNeUF5SUROMk1UaGpNQ0F5TGpNM0lESXVOak1nTXk0NElEUXVOak1nTWk0MU1td3hNeTQ1T1MwNVl6RXVPRFF0TVM0eE9DQXhMamcwTFRNdU9EWWdNQzAxTGpBMEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUwTGpNMElESXhMakpqTUNBeExqVTNMVEV1TVRrZ01pNDRMVEl1TnpnZ01pNDRMVEV1TlRnZ01DMHlMamMzTFRFdU1qTXRNaTQzTnkweUxqZ2dNQzB4TGpVM0lERXVNVGt0TWk0NElESXVOemN0TWk0NElERXVOVGtnTUNBeUxqYzRJREV1TWpNZ01pNDNPQ0F5TGpodExUSXVOVE10TVRBdU9EaGpNUzQwTVMweExqSXpJRE11TXkweUxqQTFJRE11TXkwekxqZzNJREF0TVM0ME5TMHhMakkwTFRJdU16WXRNaTQ1TlMweUxqTTJMVEl1TVRJZ01DMHpMalV5SURFdU5EZ3RNeTQxTlNBekxqUXpTRE11TnpWRE15NDRPQ0F6TGpNZ05pNDVOaUF3SURFeUxqTTBJREJqTkM0NE5pQXdJRGN1T1RFZ01pNDFNaUEzTGpreElEWXVNeklnTUNBeUxqTTJMVEV1TURrZ015NDRNUzB5TGpNZ05DNDNPQzB4TGpZNElERXVNek10TWk0NE5DQXhMamc1TFRNdU5Ea2dNaTQyTVMwdU5TNDFOeTB1TmpJZ01TNHdOQzB1TmpVZ01TNDVOVWc1TGpRMVl6QXRNaTQyTkM0Mk5TMHpMamtnTWk0ek5pMDFMak0wSnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUUXVORFkxSURSSU1pNDFZVEV1TlNBeExqVWdNQ0F4SURFZ01DMHphRGQyTnk0MVlURXVOU0F4TGpVZ01DQXhJREV0TXlBd1ZqWXVNakUyUXpRdU9UUXlJRGN1TnpBMUlEUWdPUzQzT0RNZ05DQXhNbU13SURRdU5ERXhJRE11TlRnNUlEZ2dPQ0E0Y3pndE15NDFPRGtnT0MwNFlUY3VPVGMySURjdU9UYzJJREFnTUNBd0xUY3VNVFUyTFRjdU9UVTJJREV1TlNBeExqVWdNQ0F3SURFZ0xqTXhNaTB5TGprNE0wRXhNQzQ1TmpjZ01UQXVPVFkzSURBZ01DQXhJREl6SURFeVl6QWdOaTR3TmpVdE5DNDVNelFnTVRFdE1URWdNVEV0Tmk0d05qVWdNQzB4TVMwMExqa3pOUzB4TVMweE1TQXdMVE11TURZNElERXVNams1TFRVdU9UVXhJRE11TkRZMUxUZ25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTVRjdU56VWdNVE11TWpWSU5pNHlOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQzB5TGpWb01URXVOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQ0F5TGpWTk1USWdNRU0xTGpNM0lEQWdNQ0ExTGpNM0lEQWdNVEp6TlM0ek55QXhNaUF4TWlBeE1pQXhNaTAxTGpNM0lERXlMVEV5VXpFNExqWXpJREFnTVRJZ01DYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TWlBMExqSTFZVEV1TWpVZ01TNHlOU0F3SURBZ01DMHlMalVnTUhZeExqWXhPRU14Tnk0ME56TWdNeTQwTmpVZ01UUXVORGt6SURJZ01URXVNams1SURJZ055NDJNRFlnTWlBMExqSXdOU0F6TGpnNE55QXlMakl3TVNBM0xqQTBPR0V4TGpJNU1pQXhMakk1TWlBd0lEQWdNQ0F1TXpjMUlERXVOelk1SURFdU1qUXpJREV1TWpReklEQWdNQ0F3SURFdU56TTVMUzR6T0RGak1TNDFNemt0TWk0ME1qY2dOQzR4TlMwekxqZzNOaUEyTGprNE5DMHpMamczTmlBeUxqUXpOaUF3SURRdU56QTJJREV1TVRFMUlEWXVNall4SURJdU9UUm9MVEV1TXpGaE1TNHlOU0F4TGpJMUlEQWdNQ0F3SURBZ01pNDFTREl5VmpRdU1qVjZUVEU1SURFeVlURWdNU0F3SURBZ01DMHhJREYyTjJFeElERWdNQ0F3SURBZ01TQXhhRFJoTVNBeElEQWdNQ0F3SURFdE1YWXROMkV4SURFZ01DQXdJREF0TVMweGFDMDBlbTB0T0NBd1lURWdNU0F3SURBZ01DMHhJREYyTjJFeElERWdNQ0F3SURBZ01TQXhhRFJoTVNBeElEQWdNQ0F3SURFdE1YWXROMkV4SURFZ01DQXdJREF0TVMweGFDMDBlbTB0TkMweFNERmhNU0F4SURBZ01DQXdMVEVnTVhZNVlURWdNU0F3SURBZ01DQXhJREZvTm1FeElERWdNQ0F3SURBZ01TMHhkaTA1WVRFZ01TQXdJREFnTUMweExURjZKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRrdU56VWdNakF1TldndE1tTXRMamsyTlNBd0xURXVOelV0TGpjNE5TMHhMamMxTFRFdU56VjJMVEZzTGpRek55NDBNemRoTVM0eU5EZ2dNUzR5TkRnZ01DQXdJREFnTVM0M05qZ2dNQ0F4TGpJMUlERXVNalVnTUNBd0lEQWdNQzB4TGpjMk9FdzBMamM0TmlBeE0yd3RNeTQwTWlBekxqUXhPV0V4TGpJMUlERXVNalVnTUNBd0lEQWdNUzQzTmpnZ01TNDNOamhzTGpNMk5pMHVNelkyZGk0NU1qbEJOQzR5TlRVZ05DNHlOVFVnTUNBd0lEQWdOeTQzTlNBeU0yZ3lZVEV1TWpVZ01TNHlOU0F3SURBZ01DQXdMVEl1TlhwdE5DNDFMVEUzYURKakxqazJOU0F3SURFdU56VXVOemcxSURFdU56VWdNUzQzTlhZeGJDMHVORE00TFM0ME16ZGhNUzR5TlNBeExqSTFJREFnTVNBd0xURXVOelkzSURFdU56WTRUREU1TGpJeE5DQXhNV3d6TGpReUxUTXVOREU1WVRFdU1qVWdNUzR5TlNBd0lEQWdNQzB4TGpjMk9DMHhMamMyT0d3dExqTTJOaTR6TmpaV05TNHlOVUUwTGpJMU5TQTBMakkxTlNBd0lEQWdNQ0F4Tmk0eU5TQXhhQzB5WVRFdU1qVWdNUzR5TlNBd0lEQWdNQ0F3SURJdU5YcHRNUzR5TlNBeE4yZzFkaTAxYUMwMWRqVjZUVEl6SURFMWRqWmhNaUF5SURBZ01DQXhMVElnTW1ndE5tRXlJRElnTUNBd0lERXRNaTB5ZGkwMllUSWdNaUF3SURBZ01TQXlMVEpvTm1FeUlESWdNQ0F3SURFZ01pQXllazB4TVNBemRqWmhNaUF5SURBZ01DQXhMVElnTWtnellUSWdNaUF3SURBZ01TMHlMVEpXTTJFeUlESWdNQ0F3SURFZ01pMHlhRFpoTWlBeUlEQWdNQ0F4SURJZ01ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTnk0NU1TQXhPQzQ0T1VFNExqQXhNeUE0TGpBeE15QXdJREFnTUNBeE9DNDRPU0EzTGpreFREY3VPVEVnTVRndU9EbDZiUzB5TGpneUxUSXVPRE5NTVRZdU1EWWdOUzR3T1VFNExqQXhOU0E0TGpBeE5TQXdJREFnTUNBMUxqQTVJREUyTGpBMmVrMHhNaUF5TkVNMUxqTTNJREkwSURBZ01UZ3VOak1nTUNBeE1sTTFMak0zSURBZ01USWdNSE14TWlBMUxqTTNJREV5SURFeUxUVXVNemNnTVRJdE1USWdNVEo2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURXhMakF3TXlBNUxqazJZekV1TVRBMUlEQWdNaUF1T0RrNUlESWdNaTR3TURaMk9TNHdNamhoTWk0d01EUWdNaTR3TURRZ01DQXdJREV0TWlBeUxqQXdOa2d5TGpBd01VTXVPRGsySURJeklEQWdNakl1TVRBeUlEQWdNakF1T1RrMGRpMDVMakF5T0VNd0lERXdMamcyTGpnNU5pQTVMamsySURJZ09TNDVObWc1TGpBd00zcHRNVEl1TmpNZ01TNDROekpqTGpRNE9TNDBPUzQwT0RrZ01TNHlPRE1nTUNBeExqYzNNMnd0TXk0NE9EVWdNeTQ0T1RZdE15NDROemd0TXk0NE9UZGhNUzR5TlRZZ01TNHlOVFlnTUNBd0lERWdMakF3TWkweExqYzNNeUF4TGpJME9DQXhMakkwT0NBd0lEQWdNU0F4TGpjMk9DNHdNREpzTGpnMk5TNDROMVkzTGpJM1lUTXVOellnTXk0M05pQXdJREFnTUMwekxqYzFMVE11TnpZeVNEY3VNalV4WXkwdU5qa2dNQzB4TGpJMUxTNDFOakl0TVM0eU5TMHhMakkxTkNBd0xTNDJPVE11TlRZdE1TNHlOVFFnTVM0eU5TMHhMakkxTkdnM0xqVXdNbU16TGpRME55QXdJRFl1TWpVeUlESXVPREV5SURZdU1qVXlJRFl1TWpkMk5TNDBNalJzTGpnMkxTNDROakpqTGpRNE9TMHVORGtnTVM0eU9DMHVORGtnTVM0M05qZ2dNSG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qQXVOU0EyTGpjMVZqVXVNalk0VERFekxqYzJPQ0F4TW13MkxqY3pNaUEyTGpjek1sWXhOeTR5TldFeExqSTFJREV1TWpVZ01DQXdJREVnTWk0MUlEQldNak5vTFRVdU56VmhNUzR5TlNBeExqSTFJREFnTUNBeElEQXRNaTQxYURFdU5EZ3lUREV5SURFekxqYzJPQ0ExTGpJMk9DQXlNQzQxU0RZdU56VmhNUzR5TlNBeExqSTFJREFnTUNBeElEQWdNaTQxU0RGMkxUVXVOelZoTVM0eU5TQXhMakkxSURBZ01DQXhJREl1TlNBd2RqRXVORGd5VERFd0xqSXpNaUF4TWlBekxqVWdOUzR5TmpoV05pNDNOV0V4TGpJMUlERXVNalVnTUNBd0lERXRNaTQxSURCV01XZzFMamMxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3SURJdU5VZzFMakkyT0V3eE1pQXhNQzR5TXpJZ01UZ3VOek15SURNdU5VZ3hOeTR5TldFeExqSTFJREV1TWpVZ01DQXdJREVnTUMweUxqVklNak4yTlM0M05XRXhMakkxSURFdU1qVWdNQ0F3SURFdE1pNDFJREFuT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1UQWdNVFpqTFRNdU16RWdNQzAyTFRJdU5qa3ROaTAyY3pJdU5qa3ROaUEyTFRZZ05pQXlMalk1SURZZ05pMHlMalk1SURZdE5pQTJiVEV6TGpFeUlESXVPRGhzTFRRdU1qWXROQzR5TmtFNUxqZzBNaUE1TGpnME1pQXdJREFnTUNBeU1DQXhNR013TFRVdU5USXROQzQwT0MweE1DMHhNQzB4TUZNd0lEUXVORGdnTUNBeE1ITTBMalE0SURFd0lERXdJREV3WXpFdU5qY2dNQ0F6TGpJMExTNDBNU0EwTGpZeUxURXVNVFJzTkM0eU5pQTBMakkyWVRNZ015QXdJREFnTUNBMExqSTBJREFnTXlBeklEQWdNQ0F3SURBdE5DNHlOQ2M3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweU1TQTVMalU0TjJNd0lEWXVNRFl0TXk0M01qRWdNVEV1TWpRMkxUa2dNVE11TkRFekxUVXVNamM1TFRJdU1UWTNMVGt0Tnk0ek5UTXRPUzB4TXk0ME1UTldNMkV5SURJZ01DQXdJREVnTWkweWFERTBZVElnTWlBd0lEQWdNU0F5SURKMk5pNDFPRGQ2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRTNDBOakVnTWk0ME1qZE1MalF6SURJdU5EWmhNUzQwTnpRZ01TNDBOelFnTUNBd0lEQXRMakk0TWlBeExqWTRURE1nTVRBdU5TQXhOaUF4TWlBeklERXpMalV1TVRRM0lERTVMamcyWVRFdU5EYzBJREV1TkRjMElEQWdNQ0F3SUM0eU56Y2dNUzQyTnpSc0xqQTBNUzR3TkRKakxqUXdNeTR6T0RnZ01TNHdNVE11TlRZZ01TNDJNall1TTJ3eU1DNDVPUzA0TGpRNU0yTXVNVGcxTFM0d056Z3VNelF6TFM0eE9EUXVORGN5TFM0ek1Xd3VNRE0wTFM0d016TmpMalk0TmkwdU56RXVOVEUzTFRFdU9UazBMUzQxTURjdE1pNDBNak5NTWk0d09TQXlMakV5TTBFeExqVXlJREV1TlRJZ01DQXdJREFnTVM0ME9UWWdNbU10TGpNNU9DQXdMUzQzTmpRdU1UWTBMVEV1TURNMUxqUXlOM29uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qRWdNVFJqTVM0eElEQWdNaUF1T1NBeUlESjJObU13SURFdU1TMHVPU0F5TFRJZ01rZ3pZeTB4TGpFZ01DMHlMUzQ1TFRJdE1uWXRObU13TFRFdU1TNDVMVElnTWkweWN6SWdMamtnTWlBeWRqUm9NVFIyTFRSak1DMHhMakV1T1MweUlESXRNbnBOT0M0NE1pQTRMamcwWXkwdU56Z3VOemd0TWk0d05TNDNPUzB5TGpneklEQXRMamM0TFM0M09DMHVOemt0TWk0d05DMHVNREV0TWk0NE1rd3hNUzQ1T1NBd2JEWXVNRElnTmk0d01XTXVOemd1TnpndU56a2dNaTR3TlM0d01TQXlMamd6TFM0M09DNDNPQzB5TGpBMUxqYzVMVEl1T0RNZ01Hd3RNUzR5TFRFdU1UbDJOaTR4T0dFeUlESWdNQ0F4SURFdE5DQXdWamN1TmpaTU9DNDRNaUE0TGpnMGVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDA1TGpVZ05XRXlMalVnTWk0MUlEQWdNQ0F4SURVZ01IWXlhQzAxVmpWNlRURTNJRGRXTldNd0xUSXVOell0TWk0eU5DMDFMVFV0TlZNM0lESXVNalFnTnlBMWRqSklNbll4TldNd0lERXVNUzQ1SURJZ01pQXlhREUyWXpFdU1TQXdJREl0TGprZ01pMHlWamRvTFRWNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEV5TGpBeklERTVMakk1YUMwdU1EWmpMVE11TkRndExqQXpMVFF1T1RJdE1pNHpNUzAwTGprNExUSXVOREZoTGpnNU5pNDRPVFlnTUNBd0lERWdMakkzTFRFdU1qSXVPREl1T0RJZ01DQXdJREVnTVM0eE55NHlObU11TURZdU1EZ2dNUzR3TmlBeExqVTRJRE11TlRjZ01TNDFPU0F5TGpVeExTNHdNU0F6TGpVeUxURXVOaUF6TGpVMkxURXVOamN1TWpVdExqUXhMamM0TFM0MU5DQXhMakU0TFM0eU9DNHpPUzR5Tmk0MU1pNDRMakk0SURFdU1qRXRMakEyTGpFdE1TNDFJREl1TkRrdE5DNDVPU0F5TGpVeWVrMHhPQ0E1TGpRell6QWdMamsxTFM0M055QXhMamN4TFRFdU56RWdNUzQzTVMwdU9UVWdNQzB4TGpjeUxTNDNOaTB4TGpjeUxURXVOekZ6TGpjM0xURXVOeklnTVM0M01pMHhMamN5WXk0NU5DQXdJREV1TnpFdU56Y2dNUzQzTVNBeExqY3llbTB0TVRJZ01HTXdMUzQ1TlM0M055MHhMamN5SURFdU56RXRNUzQzTWk0NU5TQXdJREV1TnpJdU56Y2dNUzQzTWlBeExqY3ljeTB1TnpjZ01TNDNNUzB4TGpjeUlERXVOekZqTFM0NU5DQXdMVEV1TnpFdExqYzJMVEV1TnpFdE1TNDNNWG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1USXVNRE1nTVRrdU1qbG9MUzR3Tm1NdE15NDBPQzB1TURNdE5DNDVNaTB5TGpNeExUUXVPVGd0TWk0ME1XRXVPRGsyTGpnNU5pQXdJREFnTVNBdU1qY3RNUzR5TWk0NE1pNDRNaUF3SURBZ01TQXhMakUzTGpJMll5NHdOaTR3T0NBeExqQTJJREV1TlRnZ015NDFOeUF4TGpVNUlESXVOVEV0TGpBeElETXVOVEl0TVM0MklETXVOVFl0TVM0Mk55NHlOUzB1TkRFdU56Z3RMalUwSURFdU1UZ3RMakk0TGpNNUxqSTJMalV5TGpndU1qZ2dNUzR5TVMwdU1EWXVNUzB4TGpVZ01pNDBPUzAwTGprNUlESXVOVEo2VFRFNElEa3VORE5qTUNBdU9UVXRMamMzSURFdU56RXRNUzQzTVNBeExqY3hMUzQ1TlNBd0xURXVOekl0TGpjMkxURXVOekl0TVM0M01YTXVOemN0TVM0M01pQXhMamN5TFRFdU56SmpMamswSURBZ01TNDNNUzQzTnlBeExqY3hJREV1TnpKNmJTMHhNaUF3WXpBdExqazFMamMzTFRFdU56SWdNUzQzTVMweExqY3lMamsxSURBZ01TNDNNaTQzTnlBeExqY3lJREV1TnpKekxTNDNOeUF4TGpjeExURXVOeklnTVM0M01XTXRMamswSURBdE1TNDNNUzB1TnpZdE1TNDNNUzB4TGpjeGVrMHhNaUF3UXpVdU5DQXdJREFnTlM0MElEQWdNVEp6TlM0MElERXlJREV5SURFeUlERXlMVFV1TkNBeE1pMHhNbE14T0M0MklEQWdNVElnTUhwdE1DQXlNaTR5UXpZdU5EVWdNakl1TWlBeExqZ2dNVGN1TnlBeExqZ2dNVElnTVM0NElEWXVNeUEyTGpNZ01TNDRJREV5SURFdU9HTTFMamNnTUNBeE1DNHlJRFF1TlNBeE1DNHlJREV3TGpJZ01DQTFMamN0TkM0Mk5TQXhNQzR5TFRFd0xqSWdNVEF1TW5vbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NakF1TkRnZ015NDFNVUV4TVM0NU1pQXhNUzQ1TWlBd0lEQWdNU0F5TkNBeE1tTXdJRE11TWkweExqSTFJRFl1TWpJdE15NDFNU0E0TGpRNExTNHlOUzR5TlMwdU5UY3VNemN0TGpnNUxqTTNMUzR6TWlBd0xTNDJOQzB1TVRJdExqZzRMUzR6TnkwdU5Ea3RMalE0TFM0ME9TMHhMakkzSURBdE1TNDNOa0U1TGpRMk5TQTVMalEyTlNBd0lEQWdNQ0F5TVM0MUlERXlZekF0TWk0MU5DMHVPVGt0TkM0NU15MHlMamM1TFRZdU56SXRMalE0TFM0ME9TMHVORGd0TVM0eU9DQXdMVEV1TnpkaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURFdU56Y2dNSHBOTlNBM0xqazBkaTR3TWt3eE1pQXhkakl5YkMwM0xUWXVNRGwyTGpBelNESmpMVEV1TVNBd0xUSXRMamt0TWkweWRpMDFZVElnTWlBd0lEQWdNU0F5TFRKb00zcHRNVEV1T1RVdExqZzVRVFl1T1RZZ05pNDVOaUF3SURBZ01TQXhPU0F4TW1Nd0lERXVPRGN0TGpjeklETXVOak10TWk0d05TQTBMamsxTFM0eU5DNHlOQzB1TlRZdU16WXRMamc0TGpNMkxTNHpNaUF3TFM0Mk5DMHVNVEl0TGpnNUxTNHpObUV4TGpJMUlERXVNalVnTUNBd0lERWdNQzB4TGpjM1l5NDROUzB1T0RVZ01TNHpNaTB4TGprNElERXVNekl0TXk0eE9DQXdMVEV1TWkwdU5EY3RNaTR6TXkweExqTXlMVE11TVRoaE1TNHlOU0F4TGpJMUlEQWdNQ0F4SURBdE1TNDNOeUF4TGpJMUlERXVNalVnTUNBd0lERWdNUzQzTnlBd2VpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDAwTGpVNE5pQTRMalF4TldFeUlESWdNQ0F4SURBZ01pNDRNamdnTWk0NE1qaE1NVEFnT0M0Mk5UZFdNakZoTWlBeUlEQWdNQ0F3SURRZ01GWTRMalkxTjJ3eUxqVTROaUF5TGpVNE5tRXlJRElnTUNBeElEQWdNaTQ0TWpndE1pNDRNamhNTVRJZ01TQTBMalU0TmlBNExqUXhOWG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk5DNDFPRFlnTVRVdU5UZzFZVElnTWlBd0lERWdNU0F5TGpneU9DMHlMamd5T0V3eE1DQXhOUzR6TkROV00yRXlJRElnTUNBd0lERWdOQ0F3ZGpFeUxqTTBNMnd5TGpVNE5pMHlMalU0Tm1FeUlESWdNQ0F4SURFZ01pNDRNamdnTWk0NE1qaE1NVElnTWpOc0xUY3VOREUwTFRjdU5ERTFlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweE1pQXdRelV1T0RVZ01DQXVOelVnTkM0NU5DNDNOU0F4TVM0d09HTXdJREl1Tnk0NUlEVXVNalFnTWk0M0lEY3VNVGxNTWk0eElESXpMalV4WXkwdU1UVXVNeTR6TGpZdU5pNDBOV3cxTGpJMUxUSXVOVFZqTVM0ek5TNDBOU0F5TGpjdU56VWdOQzR3TlM0M05TQTJMakUxSURBZ01URXVNalV0TkM0NU5DQXhNUzR5TlMweE1TNHdPRk14T0M0eE5TQXdJREV5SURBbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVGdnTVRJdU5XRXhMalVnTVM0MUlEQWdNU0F4SUM0d01ERXRNeTR3TURGQk1TNDFJREV1TlNBd0lEQWdNU0F4T0NBeE1pNDFiUzAySURCaE1TNDFJREV1TlNBd0lERWdNU0F1TURBeExUTXVNREF4UVRFdU5TQXhMalVnTUNBd0lERWdNVElnTVRJdU5XMHROaUF3WVRFdU5TQXhMalVnTUNBeElERWdMakF3TVMwekxqQXdNVUV4TGpVZ01TNDFJREFnTUNBeElEWWdNVEl1TlUweE1pQXdRelV1T1RJMUlEQWdNU0EwTGpreU5TQXhJREV4WXpBZ01pNDJOVE11T1RRZ05TNHdPRFlnTWk0MU1EUWdOaTQ1T0RaTU1pQXlOR3cxTGpNek5pMHpMakEwT1VFeE1DNDVNeUF4TUM0NU15QXdJREFnTUNBeE1pQXlNbU0yTGpBM05TQXdJREV4TFRRdU9USTFJREV4TFRFeFV6RTRMakEzTlNBd0lERXlJREFuT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1qTXVOVFlnTVRBdU5tTXVPRFl0TGpnM0xqTTVMVEl1TkMwdU9DMHlMalU0YkMwMUxqYzRMUzQ0TjJFeExqUTJJREV1TkRZZ01DQXdJREV0TVM0eExTNDRNMHd4TXk0ekxqZzBZVEV1TkRJZ01TNDBNaUF3SURBZ01DMHlMallnTUV3NExqRXhJRFl1TXpKakxTNHlMalEwTFM0Mk1TNDNOUzB4TGpBNUxqZ3piQzAxTGpjNExqZzNReTR3TlNBNExqSXRMalF5SURrdU56TXVORFFnTVRBdU5qRnNOQzR4T0NBMExqSTJZeTR6TkM0ek5TNDFMamcxTGpReUlERXVNelJzTFM0NU9TQTJMakF4WXkwdU1pQXhMakkwSURFdU1EUWdNaTR4T1NBeUxqRWdNUzQyYkRVdU1UZ3RNaTQ0TkdFeExqUWdNUzQwSURBZ01DQXhJREV1TXpVZ01HdzFMakUySURJdU9EUmpNUzR3Tnk0MU9TQXlMak14TFM0ek5pQXlMakV0TVM0MmJDMHVPVGd0Tmk0d01XTXRMakE0TFM0MUxqQTRMVEVnTGpReUxURXVNelJzTkM0eE9DMDBMakkyZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhNaUF3WXkwdU5USWdNQzB4TGpBekxqSTRMVEV1TXk0NE5FdzRMakV5SURZdU16TmpMUzR5TWk0ME5DMHVOakl1TnpVdE1TNHhMamd6YkMwMUxqYzRMamczWXkweExqRTVMakU1TFRFdU5qWWdNUzQzTVMwdU9DQXlMalU1YkRRdU1UZ2dOQzR5Tm1NdU16UXVNelV1TlM0NE5TNDBNaUF4TGpNMGJDMHVPVGtnTmk0d01tTXRMaklnTVM0eU15QXhMakEwSURJdU1UZ2dNaTR4SURFdU5tdzFMakUzTFRJdU9EVmpMakl5TFM0eE1TNDBOUzB1TVRjdU5qZ3RMakUzVmpCNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUxTGpJMUlEQm9MVFl1TldFeExqYzFJREV1TnpVZ01DQXdNREFnTXk0MWFEWXVOV015TGprZ01DQTFMakkxSURJdU16VWdOUzR5TlNBMUxqSTFkall1TldFeExqYzFJREV1TnpVZ01DQXhNRE11TlNBd2RpMDJMalZCT0M0M05pQTRMamMySURBZ01EQXhOUzR5TlNBd2JTMHVOelVnTmk0MVNETmhNeUF6SURBZ01EQXRNeUF6VmpJeFlUTWdNeUF3SURBd015QXphREV4TGpWaE15QXpJREFnTURBekxUTldPUzQxWVRNZ015QXdJREF3TFRNdE15YzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDAzTGpFNE5DQXlNaTQxTm1FeExqVWdNUzQxSURBZ01DQXdMUzR3TURJdE1pNHhNakZzTFRFdU5EUXlMVEV1TkRRZ09DNDNOaTB1TURBellURXVOU0F4TGpVZ01DQXhJREF0TGpBd01TMHpiQzA0TGpjMU5TNHdNRE1nTVM0ME16Y3RNUzQwTkdFeExqVWdNUzQxSURBZ01TQXdMVEl1TVRJekxUSXVNVEU0VERBZ01UY3VOVEE0YkRVdU1EWXpJRFV1TURVMFlURXVOU0F4TGpVZ01DQXdJREFnTWk0eE1qRXRMakF3TW0wNUxqWXpOeTB4TUM0NU9UaGhNUzQxTURFZ01TNDFNREVnTUNBd0lERXRMakF3TWkweUxqRXlNVXd4T0M0eU5UWWdPQ0E1TGpVZ09DNHdNRFZoTVM0MUlERXVOU0F3SURBZ01TMHVNREF4TFROTU1UZ3VNallnTld3dE1TNDBOREl0TVM0ME5HRXhMalE1TkNBeExqUTVOQ0F3SURBZ01TMHVORFF4TFRFdU1EWXhJREV1TkRrNElERXVORGs0SURBZ01DQXhJREl1TlRZdE1TNHdOakZNTWpRZ05pNDBPVE5zTFRVdU1EVTRJRFV1TURZM1lURXVOU0F4TGpVZ01DQXdJREV0TWk0eE1qRXVNREF5SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRUWWdPR014TGpFZ01DQXlMUzQ1SURJdE1uTXRMamt0TWkweUxUSXRNaUF1T1MweUlESWdMamtnTWlBeUlESnROeTR6TmkwMkxqSnNPQzQ0TkNBNExqZzBZVEl1TnpFZ01pNDNNU0F3SURBZ01TQXdJRE11T0RWc0xUY3VOekVnTnk0M01XRXlMamN4SURJdU56RWdNQ0F3SURFdE15NDROU0F3VERFdU9DQXhNeTR6Tm1NdExqVXhMUzQxTVMwdU9DMHhMakl0TGpndE1TNDVNbFl6TGpjelF6RWdNaTR5TWlBeUxqSXlJREVnTXk0M015QXhhRGN1TnpGakxqY3lJREFnTVM0ME1TNHlPU0F4TGpreUxqZ25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTWpFZ01UaElNVEZoTWlBeUlEQWdNU0F3SURBZ05HZ3hNR0V5SURJZ01DQXhJREFnTUMwMFRUUWdNVGRoTXlBeklEQWdNU0F3SURBZ05pQXpJRE1nTUNBd0lEQWdNQzAyYlRFM0xUZElNVEZoTWlBeUlEQWdNU0F3SURBZ05HZ3hNR0V5SURJZ01DQXhJREFnTUMwMFRUUWdPV0V6SURNZ01DQXhJREFnTUNBMklETWdNeUF3SURBZ01DQXdMVFp0TnkwemFERXdZVElnTWlBd0lERWdNQ0F3TFRSSU1URmhNaUF5SURBZ01TQXdJREFnTkUwM0lEUmhNeUF6SURBZ01TQXhMVFlnTUNBeklETWdNQ0F3SURFZ05pQXdKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRBZ05DNDFhREkwZGkwelNEQjJNM3B0TXlBMmFERTRWamN1TkRrNVNETldNVEF1TlhwdExUTWdObWd5TkhZdE0wZ3dkak42YlRNZ05tZ3hPSFl0TTBnemRqTjZKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRBZ05DNDFhREkwZGkwelNEQjJNM3B0TUNBMmFERTRWamN1TkRrNVNEQldNVEF1TlhwdE1DQTJhREkwZGkwelNEQjJNM3B0TUNBMmFERTRkaTB6U0RCMk0zb25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTWpRZ05DNDFTREIyTFROb01qUjJNM3B0TUNBMlNEWjJMVE5vTVRoMk0zcHRNQ0EyU0RCMkxUTm9NalIyTTNwdE1DQTJTRFoyTFROb01UaDJNM29uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1UWXVOemMwSURFekxqY3dORXd4T0M0MUlEa3VOamc1YkRFdU56STJJRFF1TURFMWFDMHpMalExTTNwdE55NHhNeUF5TGprME9Fd3hPUzQxTURrZ05pNDBNalpCTVM0eE1ESWdNUzR4TURJZ01DQXdJREFnTVRndU5TQTFMamMxWXkwdU5ETTJJREF0TGpnek1TNHlOalV0TVM0d01EZ3VOamMyYkMwMExqTTVPQ0F4TUM0eU1qWmhNUzR4TlRJZ01TNHhOVElnTUNBd0lEQWdMalUySURFdU5XTXVNVFEyTGpBMk5pNHlPVGN1TURrNExqUTBOeTR3T1RndU5ESXpJREFnTGpneU5pMHVNalV6SURFdU1EQTRMUzQyTnpac0xqWTROeTB4TGpVNU4yZzFMalF3TjJ3dU5qZzNJREV1TlRrM1l5NHlORGN1TlRjekxqZzVOeTQ0TXpNZ01TNDBOVFF1TlRjNExqVTFOaTB1TWpVMUxqZ3dOeTB1T1RJMkxqVTJMVEV1TlhwdExUSXdMakV6TFRJdU9UUTRURFV1TlNBNUxqWTRPV3d4TGpjeU5pQTBMakF4TlVnekxqYzNOSHB0TWk0M016UXROeTR5TnpoQk1TNHhNRElnTVM0eE1ESWdNQ0F3SURBZ05TNDFJRFV1TnpWakxTNDBNellnTUMwdU9ETXhMakkyTlMweExqQXdPQzQyTnpaTUxqQTVOU0F4Tmk0Mk5USmhNUzR4TlRJZ01TNHhOVElnTUNBd0lEQWdMalUySURFdU5XTXVNVFEyTGpBMk5pNHlPVGN1TURrNExqUTBOeTR3T1RndU5ESXpJREFnTGpneU5pMHVNalV6SURFdU1EQTRMUzQyTnpac0xqWTROeTB4TGpVNU4yZzFMalF3TjJ3dU5qZzNJREV1TlRrM1l5NHlORGN1TlRjekxqZzVOeTQ0TXpNZ01TNDBOVFF1TlRjNExqVTFOaTB1TWpVMUxqZ3dOeTB1T1RJMkxqVTJMVEV1TlV3MkxqVXdPQ0EyTGpReU5ub25PeUlzSW1WNGNHOXlkQ0JrWldaaGRXeDBJQ2ROTWk0eU5TQXhNUzQxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3TFRJdU5XZ3hPUzQxWVRFdU1qVWdNUzR5TlNBd0lEQWdNU0F3SURJdU5VZ3lMakkxZW0weE9TNDFJRGxoTVM0eU5TQXhMakkxSURBZ01DQXhJREFnTWk0MVNESXVNalZoTVM0eU5TQXhMakkxSURBZ01DQXhJREF0TWk0MWFERTVMalY2VFRFeUlERXpZeTR5TVRnZ01DQXVOREUyTGpFeU55NDFNRFF1TXpJMGJESXVNVGs1SURRdU9URkJMalUwTlM0MU5EVWdNQ0F3SURFZ01UUXVNaUF4T1dFdU5UVXVOVFVnTUNBd0lERXRMalV3TkMwdU16STFiQzB1TXpRMExTNDNOalpvTFRJdU56QXpiQzB1TXpRMExqYzJObUV1TlRVekxqVTFNeUF3SURBZ01TMHVOekkzTGpJM09DNDFORE11TlRReklEQWdNQ0F4TFM0eU9DMHVOekpzTWk0eE9UZ3ROQzQ1TURsQkxqVTFNeTQxTlRNZ01DQXdJREVnTVRJZ01UTjZiUzB1T0RZeklETXVPREU0YURFdU56STNUREV5SURFMExqZzVNV3d0TGpnMk15QXhMamt5TjNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NaTR5TlNBekxqVmhNUzR5TlNBeExqSTFJREFnTUNBeElEQXRNaTQxYURFNUxqVmhNUzR5TlNBeExqSTFJREFnTUNBeElEQWdNaTQxU0RJdU1qVjZiVEU1TGpVZ01UZGhNUzR5TlNBeExqSTFJREFnTUNBeElEQWdNaTQxU0RJdU1qVmhNUzR5TlNBeExqSTFJREFnTUNBeElEQXRNaTQxYURFNUxqVjZUVEV5SURWakxqVXdPQ0F3SUM0NU5qZ3VNamszSURFdU1UYzBMamMxTjJ3MUxqRXpNU0F4TVM0ME5UUmhNUzR5TmpZZ01TNHlOallnTUNBd0lERXRMalkxTkNBeExqWTNPQ0F4TGpJNE9DQXhMakk0T0NBd0lEQWdNUzB4TGpZNU5pMHVOalEzYkMwdU9DMHhMamM0T0dndE5pNHpNV3d0TGpnZ01TNDNPRGhoTVM0eU9TQXhMakk1SURBZ01DQXhMVEV1TmprM0xqWTBOeUF4TGpJMk5pQXhMakkyTmlBd0lEQWdNUzB1TmpVMExURXVOamM0YkRVdU1UTXRNVEV1TkRVMFF6RXhMakF6SURVdU1qazNJREV4TGpRNU1TQTFJREV5SURWNmJTMHlMakF4TkNBNExqa3dPR2cwTGpBeU4wd3hNaUE1TGpReE0yd3RNaTR3TVRRZ05DNDBPVFY2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURTJJRGxzTFRRdE5DMDBJRFJvTWk0MWRqWklPR3cwSURRZ05DMDBhQzB5TGpWV09VZ3hObnB0TlM0M05TQXhNUzQxU0RJdU1qVmhNUzR5TlNBeExqSTFJREFnTUNBd0lEQWdNaTQxYURFNUxqVmhNUzR5TlNBeExqSTFJREFnTUNBd0lEQXRNaTQxZWsweElESXVNalZETVNBeExqVTJJREV1TlRZZ01TQXlMakkxSURGb01Ua3VOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQ0F5TGpWSU1pNHlOVU14TGpVMklETXVOU0F4SURJdU9UUWdNU0F5TGpJMWVpYzdJaXdpWlhod2IzSjBJR1JsWm1GMWJIUWdKMDB5TGpJMUlEWXVOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQzB5TGpWb01Ua3VOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQ0F5TGpWSU1pNHlOWHB0TVRrdU5TQXhOR0V4TGpJMUlERXVNalVnTUNBd0lERWdNQ0F5TGpWSU1pNHlOV0V4TGpJMUlERXVNalVnTUNBd0lERWdNQzB5TGpWb01Ua3VOWHBOTVRJZ09HTXVNems1SURBZ0xqYzJNaTR5TXpJdU9USXpMalU1Tld3MExqQXpNaUE1WVM0NU9UWXVPVGsySURBZ01DQXhMUzQxTVRVZ01TNHpNVGtnTVM0d01UTWdNUzR3TVRNZ01DQXdJREV0TVM0ek16TXRMalV4VERFMExqUTNPU0F4TjBnNUxqVXlNbXd0TGpZeU9TQXhMalF3TkdFeExqQXhOQ0F4TGpBeE5DQXdJREFnTVMweExqTXpNeTQxTVM0NU9UWXVPVGsySURBZ01DQXhMUzQxTVRVdE1TNHpNVGxzTkM0d016RXRPVUV4TGpBeElERXVNREVnTUNBd0lERWdNVElnT0hwdExURXVOVGd5SURkb015NHhOalJNTVRJZ01URXVORFkzSURFd0xqUXhPQ0F4Tlhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVGt1TnpreklERTJMakF5T0dndE1pNDNOVGxoTGpnek1TNDRNekVnTUNBd0lERXRMamd5TnkwdU9ETXpZekF0TGpRMkxqTTNNUzB1T0RNMExqZ3lOeTB1T0RNMGFESXVOelU1ZGpFdU5qWTNlbTB0TGpneU9DMDNMamMzT0dndE15NHpNV010TGpZd09TQXdMVEV1TVRBekxqUTVPQzB4TGpFd015QXhMakV4TVNBd0lDNDJNVFF1TkRrMElERXVNVEV4SURFdU1UQXpJREV1TVRFeGFETXVNekZqTGpRMU55QXdJQzQ0TWpndU16YzBMamd5T0M0NE16UjJMamd6TTJndE1pNDNOVGxqTFRFdU5qY3pJREF0TXk0d016UWdNUzR6TnpFdE15NHdNelFnTXk0d05UWnpNUzR6TmpFZ015NHdOVFVnTXk0d016UWdNeTR3TlRWb015NDROakpqTGpZeElEQWdNUzR4TURRdExqUTVOeUF4TGpFd05DMHhMakV4TVhZdE5TNDRNek5qTUMweExqWTROUzB4TGpNMk1pMHpMakExTmkwekxqQXpOUzB6TGpBMU5ucE5OUzQzTnpRZ01UTXVOekExVERjdU5TQTVMalk1YkRFdU56STJJRFF1TURFMVNEVXVOemMwZW0wM0xqRXpNU0F5TGprME9FdzRMalV3TnlBMkxqUXlOa0V4TGpFZ01TNHhJREFnTUNBd0lEY3VOU0ExTGpjMVlURXVNU0F4TGpFZ01DQXdJREF0TVM0d01EY3VOamMyVERJdU1EazFJREUyTGpZMU0yTXRMakkwTnk0MU56UXVNREEwSURFdU1qUTFMalUyTVNBeExqUTVPUzR4TkRVdU1EWTNMakk1Tmk0d09UZ3VORFEyTGpBNU9DNDBNaklnTUNBdU9ESTFMUzR5TlRJZ01TNHdNRGd0TGpZM05td3VOamcyTFRFdU5UazNhRFV1TkRBNGJDNDJPRFlnTVM0MU9UZGpMakkwTnk0MU56UXVPRGszTGpnek15QXhMalExTkM0MU56Z3VOVFUzTFM0eU5UUXVPREE0TFM0NU1qVXVOVFl4TFRFdU5EazVlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAweUxqa3hOaUF4Tmk0MU5EVnNNUzR6TXpRdE15NHdOVEVnTVM0ek16UWdNeTR3TlRGSU1pNDVNVFo2YlRJdU1URXlMVFV1TlRNeVlTNDROUzQ0TlNBd0lEQWdNQzB1TnpjNExTNDFNVE11T0RVeUxqZzFNaUF3SURBZ01DMHVOemd1TlRFelRDNHdOelFnTVRndU56ZzJZUzQ0TmprdU9EWTVJREFnTUNBd0lDNDBNelFnTVM0eE16a3VPRFEyTGpnME5pQXdJREFnTUNBeExqRXlNeTB1TkRNNWJDNDFNeTB4TGpJeE5FZzJMak0wYkM0MU15QXhMakl4TkdFdU9EVXlMamcxTWlBd0lEQWdNQ0F1TnpndU5URTBMamcwTkM0NE5EUWdNQ0F3SURBZ0xqTTBOQzB1TURjMUxqZzJPUzQ0TmprZ01DQXdJREFnTGpRek5DMHhMakV6T1d3dE15NDBMVGN1TnpjemVtMDVMalEwTmlBekxqRTJPR3d5TGpJM05pMDFMakV6T0NBeUxqSTNOaUExTGpFek9HZ3ROQzQxTlRKNmJUa3VOQ0F6TGpjM05Hd3ROUzQzT1RZdE1UTXVNRGxoTVM0ME5UTWdNUzQwTlRNZ01DQXdJREF0TWk0Mk5UWWdNR3d0TlM0M09UY2dNVE11TURsaE1TNDBOVFVnTVM0ME5UVWdNQ0F3SURBZ0xqY3pPU0F4TGpreE9TQXhMalExTVNBeExqUTFNU0F3SURBZ01DQXhMamt4TnkwdU56UnNMamt3TlMweUxqQTBOR2czTGpFeU9Hd3VPVEExSURJdU1EUTBZVEV1TkRVeklERXVORFV6SURBZ01TQXdJREl1TmpVMkxURXVNVGM1ZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHlMakkxSURrdU5XRXhMakkxSURFdU1qVWdNQ0F3SURFZ01DMHlMalZvTVRrdU5XRXhMakkxSURFdU1qVWdNQ0F3SURFZ01DQXlMalZJTWk0eU5YcHRNVGt1TlNBeE1XRXhMakkxSURFdU1qVWdNQ0F3SURFZ01DQXlMalZJTWk0eU5XRXhMakkxSURFdU1qVWdNQ0F3SURFZ01DMHlMalZvTVRrdU5YcE5NVElnTVRGakxqSTVJREFnTGpVMU5DNHhOamt1TmpjeExqUXpNMnd5TGprek1pQTJMalUwTldFdU56STBMamN5TkNBd0lEQWdNUzB1TmpjZ01TNHdNakl1TnpNMUxqY3pOU0F3SURBZ01TMHVOamN6TFM0ME16SnNMUzQwTlRndE1TNHdNak5vTFRNdU5qQTBiQzB1TkRVNElERXVNREl6WVM0M05DNDNOQ0F3SURBZ01TMHVPVGN1TXpjdU56STFMamN5TlNBd0lEQWdNUzB1TXpjMExTNDVObXd5TGprek1pMDJMalUwTlVFdU56TTBMamN6TkNBd0lEQWdNU0F4TWlBeE1YcHRMVEV1TVRVZ05TNHdPV2d5TGpNd01Xd3RNUzR4TlMweUxqVTJPQzB4TGpFMU1pQXlMalUyT1hvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NakFnTVRWc05DQTBMVFFnTkhZdE1pNDFTRFJXTWpOc0xUUXROQ0EwTFRSMk1pNDFhREUyVmpFMWVrMDFMalVnTkM0M09ESnNNUzQzTWpjZ015NDROVFJJTXk0M056Uk1OUzQxSURRdU56Z3llazB1TmpVMklERXlMamt3Tm1FeExqRXdOQ0F4TGpFd05DQXdJREFnTUNBeExqUTFOQzB1TlRVMWJDNDJPRFl0TVM0MU16Tm9OUzQwTURoc0xqWTROaUF4TGpVek0yTXVNalEzTGpVMU1TNDRPVGN1T0NBeExqUTFOQzQxTlRVdU5UVTNMUzR5TkRRdU9EQTRMUzQ0T0RrdU5UWXhMVEV1TkRSTU5pNDFNRGdnTVM0Mk5EbEJNUzR4TURNZ01TNHhNRE1nTUNBd0lEQWdOUzQxSURGaE1TNHhJREV1TVNBd0lEQWdNQzB4TGpBd055NDJORGxNTGpBNU5TQXhNUzQwTmpaaE1TNHdPRGNnTVM0d09EY2dNQ0F3SURBZ0xqVTJNU0F4TGpRMGVtMHhOUzQxTWpZdE5DNDRNVFZvTkM0eU56TmhNUzR6TmpVZ01TNHpOalVnTUNBd0lERWdNQ0F5TGpjeU4yZ3ROQzR5TnpOV09DNHdPVEY2YlRBdE5DNDVNRGxvTXk0M01qZGpMamMxTWlBd0lERXVNelkwTGpZeE1pQXhMak0yTkNBeExqTTJNeUF3SUM0M05USXRMall4TWlBeExqTTJOQzB4TGpNMk5DQXhMak0yTkdndE15NDNNamRXTXk0eE9ESjZUVEUxTGpBNU1TQXhNMmcxTGpNMk5FRXpMalUxSURNdU5UVWdNQ0F3SURBZ01qUWdPUzQwTlRWaE15NDFOQ0F6TGpVMElEQWdNQ0F3TFRFdU1qazFMVEl1TnpNNFl5NDBOamd0TGpZdU56VXRNUzR6TlRNdU56VXRNaTR4TnpKQk15NDFOU0F6TGpVMUlEQWdNQ0F3SURFNUxqa3dPU0F4YUMwMExqZ3hPRUV4TGpBNUlERXVNRGtnTUNBd0lEQWdNVFFnTWk0d09URjJPUzQ0TVRoQk1TNHdPU0F4TGpBNUlEQWdNQ0F3SURFMUxqQTVNU0F4TTNvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5OQzQ0TnpnZ01qSXVNVEUyUVRJZ01pQXdJREFnTUNBMkxqZzNOU0F5TkdneE1DNHlNamxoTWlBeUlEQWdNQ0F3SURFdU9UazFMVEV1T0RneFRESXdJRGRJTkd3dU9EZ2dNVFV1TVRFMmVrMHlNaUF6TGpWQk1TNDFJREV1TlNBd0lEQWdNU0F5TUM0MUlEVm9MVEUzWVRFdU5TQXhMalVnTUNBd0lERWdNQzB6YURaV01XRXhJREVnTUNBd0lERWdNUzB4YUROaE1TQXhJREFnTUNBeElERWdNWFl4YURaQk1TNDFJREV1TlNBd0lEQWdNU0F5TWlBekxqVjZKenNpTENKbGVIQnZjblFnWkdWbVlYVnNkQ0FuVFRjdU5UUTRJREl4TGpWak9TNHdOVFlnTUNBeE5DNHdNUzAzTGpNeElERTBMakF4TFRFekxqWTFJREF0TGpJd09DQXdMUzQwTVRRdExqQXhOUzB1TmpKQk9TNDRPQ0E1TGpnNElEQWdNQ0F3SURJMElEUXVOelEzWXkwdU9EazVMak00T0MweExqZzFNaTQyTkRJdE1pNDRNamd1TnpVMFlUUXVPRE00SURRdU9ETTRJREFnTUNBd0lESXVNVFkxTFRJdU5qVXpZeTB1T1RZM0xqVTFPUzB5TGpBeU5DNDVOVE10TXk0eE1qY2dNUzR4TmpRdE1TNDFNall0TVM0MU9DMHpMamsxTWkweExqazJPQzAxTGpreE5pMHVPVFEwTFRFdU9UWTBJREV1TURJMUxUSXVPVGdnTXk0eU1EVXRNaTQwTnpVZ05TNHpNa00zTGpnMU9TQTRMakU1TkNBMExqRTNJRFl1TXpjeUlERXVOamNnTXk0ek56VXVNell6SURVdU5UWTNJREV1TURNeElEZ3VNemN5SURNdU1UazFJRGt1TnpoaE5DNDVPRFlnTkM0NU9EWWdNQ0F3SURFdE1pNHlNelV0TGpaMkxqQTJZekFnTWk0eU9EUWdNUzQyTlRNZ05DNHlOU0F6TGprMUlEUXVOekF6WVRVdU1EUXlJRFV1TURReUlEQWdNQ0F4TFRJdU1qSXpMakE0TW1NdU5qUTFJREV1T1RVMElESXVORGswSURNdU1qa3pJRFF1TmlBekxqTXpNa0V4TUM0d05EZ2dNVEF1TURRNElEQWdNQ0F4SURBZ01Ua3VNelExWVRFMExqSXhJREUwTGpJeElEQWdNQ0F3SURjdU5UUTRJREl1TVRVeEp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUySURoMk9HTXdJREV1TVMwdU9TQXlMVElnTWtnell5MHhMakVnTUMweUxTNDVMVEl0TWxZNFl6QXRNUzR4TGprdE1pQXlMVEpvTVRGak1TNHhJREFnTWlBdU9TQXlJREo2YlRZdU1UZ3RMak00YkMwekxqWTNJRE11TWpaaE1TNDFJREV1TlNBd0lEQWdNQ0F3SURJdU1qUnNNeTQyTnlBekxqSTJZeTR6TWk0eU9DNDRNaTR3TkM0NE1pMHVNemxXT0M0d01XTXdMUzQwTXkwdU5TMHVOamN0TGpneUxTNHpPWG9uT3lJc0ltVjRjRzl5ZENCa1pXWmhkV3gwSUNkTk1UTXVOU0F5TkZZeE15NDFTREkwVmpJMFNERXpMalY2VFRBZ01UQXVOVll3YURFd0xqVjJNVEF1TlVnd2VtMHhNeTQxSURCV01FZ3lOSFl4TUM0MVNERXpMalY2VFRBZ01qUldNVE11TldneE1DNDFWakkwU0RCNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEUzTGprNU9TQXlORWd5TkhZdE5tZ3ROaTR3TURGMk5ucHRMVGt0TVRjdU9UazVWakJvTm5ZMkxqQXdNVWc1ZWswd0lEWXVNREF4VmpCb05uWTJMakF3TVVnd2VtMHhOeTQ1T1RrZ01GWXdTREkwZGpZdU1EQXhhQzAyTGpBd01YcE5NQ0F4TlM0d01ERldPV2cyZGpaSU1IcHRPU0F3Vmpsb05uWTJTRGw2YlRndU9UazVJREJXT1VneU5IWTJhQzAyTGpBd01YcE5NQ0F5TkhZdE5tZzJkalpJTUhwdE9TQXdkaTAyYURaMk5rZzVlaWM3SWl3aVpYaHdiM0owSUdSbFptRjFiSFFnSjAwd0lERXpMalV3TW5ZdE0yZ3lOSFl6U0RCNmJUQXROeTQxVmpOb01qUjJNeTR3TURKSU1IcHRNQ0F4TlhZdE0yZ3lOSFl6U0RCNkp6c2lMQ0psZUhCdmNuUWdaR1ZtWVhWc2RDQW5UVEV4SURaak1DQXlMamMyTFRJdU1qUWdOUzAxSURWVE1TQTRMamMySURFZ05uTXlMakkwTFRVZ05TMDFJRFVnTWk0eU5DQTFJRFY2YlRjZ05XTXlMamMySURBZ05TMHlMakkwSURVdE5YTXRNaTR5TkMwMUxUVXROUzAxSURJdU1qUXROU0ExSURJdU1qUWdOU0ExSURWNlRUWWdNVE5qTFRJdU56WWdNQzAxSURJdU1qUXROU0ExY3pJdU1qUWdOU0ExSURVZ05TMHlMakkwSURVdE5TMHlMakkwTFRVdE5TMDFlbTB4TWlBd1l5MHlMamMySURBdE5TQXlMakkwTFRVZ05YTXlMakkwSURVZ05TQTFJRFV0TWk0eU5DQTFMVFV0TWk0eU5DMDFMVFV0Tlhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5NVEF1TlNBNWRqWmhNUzQxSURFdU5TQXdJREVnTVMweklEQldPV0V4TGpVZ01TNDFJREFnTVNBeElETWdNSHBOTVRVZ055NDFZeTB1T0RNZ01DMHhMalV1TmpjdE1TNDFJREV1TlhZMllURXVOU0F4TGpVZ01DQXhJREFnTXlBd1ZqbGpNQzB1T0RNdExqWTNMVEV1TlMweExqVXRNUzQxZW0wNUlEUXVOV0V4TWlBeE1pQXdJREVnTVMweU5DQXdJREV5SURFeUlEQWdNQ0F4SURJMElEQjZiUzB6SURCak1DMDBMamsyTFRRdU1EUXRPUzA1TFRsekxUa2dOQzR3TkMwNUlEa2dOQzR3TkNBNUlEa2dPU0E1TFRRdU1EUWdPUzA1ZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhNaUF3WVRFeUlERXlJREFnTVNBd0lEQWdNalFnTVRJZ01USWdNQ0F3SURBZ01DMHlOSHBOTXlBeE1tTXdMVFF1T1RZZ05DNHdOQzA1SURrdE9YWXhPR010TkM0NU5pQXdMVGt0TkM0d05DMDVMVGw2SnpzaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENBblRURXlJREJoTVRJZ01USWdNQ0F4SURBZ01DQXlOQ0F4TWlBeE1pQXdJREFnTUNBd0xUSTBlbTAxTGpVMklERXdMakEyYkMwMklEWmhNUzQxSURFdU5TQXdJREFnTVMweUxqRXlJREJzTFRNdE0yRXhMalVnTVM0MUlEQWdNQ0F4SURBdE1pNHhNaUF4TGpVZ01TNDFJREFnTUNBeElESXVNVElnTUd3eExqazBJREV1T1RRZ05DNDVOQzAwTGprMFlURXVOU0F4TGpVZ01DQXdJREVnTWk0eE1pQXdJREV1TlNBeExqVWdNQ0F3SURFZ01DQXlMakV5ZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHlNeTQySURFNExqVk1NVFF1TmpNZ01pNDFNMkV6SURNZ01DQXdJREF0TlM0eU5DQXdUQzQwSURFNExqVkJNeTR3TWlBekxqQXlJREFnTUNBd0lETWdNak5vTVRoak1pNHlPU0F3SURNdU56UXRNaTQwT1NBeUxqWXROQzQxZW0wdE55NDFOQzB4TGpBMllURXVOU0F4TGpVZ01DQXdJREVnTUNBeUxqRXlJREV1TlNBeExqVWdNQ0F3SURFdE1pNHhNaUF3YkMweExqazFMVEV1T1RRdE1TNDVOQ0F4TGprMFlURXVOU0F4TGpVZ01DQXdJREV0TWk0eE1pQXdJREV1TlNBeExqVWdNQ0F3SURFZ01DMHlMakV5YkRFdU9UUXRNUzQ1TkMweExqazBMVEV1T1RSaE1TNDFJREV1TlNBd0lEQWdNU0F3TFRJdU1USWdNUzQxSURFdU5TQXdJREFnTVNBeUxqRXlJREJNTVRJZ01UTXVNemhzTVM0NU5TMHhMamswWVRFdU5TQXhMalVnTUNBd0lERWdNaTR4TWlBd0lERXVOU0F4TGpVZ01DQXdJREVnTUNBeUxqRXliQzB4TGprMElERXVPVFFnTVM0NU5DQXhMamswZWljN0lpd2laWGh3YjNKMElHUmxabUYxYkhRZ0owMHhNaUF3WVRFeUlERXlJREFnTVNBd0lEQWdNalFnTVRJZ01USWdNQ0F3SURBZ01DMHlOSHB0TUNBeU1XTXROQzQ1TmlBd0xUa3ROQzR3TkMwNUxUbHpOQzR3TkMwNUlEa3RPU0E1SURRdU1EUWdPU0E1TFRRdU1EUWdPUzA1SURsNmJURXVOelV0T1dNd0lDNDVOeTB1TnpnZ01TNDNOUzB4TGpjMUlERXVOelZ6TFRFdU56VXRMamM0TFRFdU56VXRNUzQzTlM0M09DMHhMamMxSURFdU56VXRNUzQzTlNBeExqYzFMamM0SURFdU56VWdNUzQzTlhvbk95SXNJbVY0Y0c5eWRDQmtaV1poZFd4MElDZE5Nak11TVRJZ09TNDROMnd0T1MwNVlUTXVNREVnTXk0d01TQXdJREFnTUMwMExqSTFJREJzTFRrZ09XRXpMakF4SURNdU1ERWdNQ0F3SURBZ01DQTBMakkyYkRrZ09XRXpMakF4SURNdU1ERWdNQ0F3SURBZ05DNHlOaUF3YkRrdE9XRXpMakF4SURNdU1ERWdNQ0F3SURBZ01DMDBMakkyZWsweE1pQXhPUzR3TVdFeExqVTJJREV1TlRZZ01DQXhJREVnTUMwekxqRXpJREV1TlRZZ01TNDFOaUF3SURBZ01TQXdJRE11TVRONmJURXVOVGN0Tmk0eU1tRXhMalUySURFdU5UWWdNQ0F3SURFdE15NHhNeUF3VmpZdU5UVmhNUzQxTmlBeExqVTJJREFnTUNBeElETXVNVE1nTUhZMkxqSTBlaWM3SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnWVdRZ1puSnZiU0FuTGk5aFpDNXpkbWNuTzF4dWFXMXdiM0owSUdGa1pDQm1jbTl0SUNjdUwyRmtaQzV6ZG1jbk8xeHVhVzF3YjNKMElHRmtaRU5wY21Oc1pTQm1jbTl0SUNjdUwyRmtaQzFqYVhKamJHVXVjM1puSnp0Y2JtbHRjRzl5ZENCaFpHUk1ZWGx2ZFhRZ1puSnZiU0FuTGk5aFpHUXRiR0Y1YjNWMExuTjJaeWM3WEc1cGJYQnZjblFnWVdSa1VHbHVJR1p5YjIwZ0p5NHZZV1JrTFhCcGJpNXpkbWNuTzF4dWFXMXdiM0owSUdGa1IzSnZkWEFnWm5KdmJTQW5MaTloWkMxbmNtOTFjQzV6ZG1jbk8xeHVhVzF3YjNKMElHRmtjMU4wWVhSeklHWnliMjBnSnk0dllXUnpMWE4wWVhSekxuTjJaeWM3WEc1cGJYQnZjblFnWVdSelQzWmxjblpwWlhjZ1puSnZiU0FuTGk5aFpITXRiM1psY25acFpYY3VjM1puSnp0Y2JtbHRjRzl5ZENCaGJHVnlkQ0JtY205dElDY3VMMkZzWlhKMExuTjJaeWM3WEc1cGJYQnZjblFnWVd4cFoyNUNiM1IwYjIwZ1puSnZiU0FuTGk5aGJHbG5iaTFpYjNSMGIyMHVjM1puSnp0Y2JtbHRjRzl5ZENCaGJHbG5ia0p2ZEhSdmJVTmxiblJsY2lCbWNtOXRJQ2N1TDJGc2FXZHVMV0p2ZEhSdmJTMWpaVzUwWlhJdWMzWm5KenRjYm1sdGNHOXlkQ0JoYkdsbmJrSnZkSFJ2YlV4bFpuUWdabkp2YlNBbkxpOWhiR2xuYmkxaWIzUjBiMjB0YkdWbWRDNXpkbWNuTzF4dWFXMXdiM0owSUdGc2FXZHVRbTkwZEc5dFVtbG5hSFFnWm5KdmJTQW5MaTloYkdsbmJpMWliM1IwYjIwdGNtbG5hSFF1YzNabkp6dGNibWx0Y0c5eWRDQmhiR2xuYmsxcFpHUnNaU0JtY205dElDY3VMMkZzYVdkdUxXMXBaR1JzWlM1emRtY25PMXh1YVcxd2IzSjBJR0ZzYVdkdVZHOXdJR1p5YjIwZ0p5NHZZV3hwWjI0dGRHOXdMbk4yWnljN1hHNXBiWEJ2Y25RZ1lXeHBaMjVVYjNCRFpXNTBaWElnWm5KdmJTQW5MaTloYkdsbmJpMTBiM0F0WTJWdWRHVnlMbk4yWnljN1hHNXBiWEJ2Y25RZ1lXeHBaMjVVYjNCTVpXWjBJR1p5YjIwZ0p5NHZZV3hwWjI0dGRHOXdMV3hsWm5RdWMzWm5KenRjYm1sdGNHOXlkQ0JoYkdsbmJsUnZjRkpwWjJoMElHWnliMjBnSnk0dllXeHBaMjR0ZEc5d0xYSnBaMmgwTG5OMlp5YzdYRzVwYlhCdmNuUWdZVzVrY205cFpGTm9ZWEpsSUdaeWIyMGdKeTR2WVc1a2NtOXBaQzF6YUdGeVpTNXpkbWNuTzF4dWFXMXdiM0owSUdGdVoyeGxaRkJwYmlCbWNtOXRJQ2N1TDJGdVoyeGxaQzF3YVc0dWMzWm5KenRjYm1sdGNHOXlkQ0JoY0hCeklHWnliMjBnSnk0dllYQndjeTV6ZG1jbk8xeHVhVzF3YjNKMElHRnljbTkzUW1GamF5Qm1jbTl0SUNjdUwyRnljbTkzTFdKaFkyc3VjM1puSnp0Y2JtbHRjRzl5ZENCaGNuSnZkME5wY21Oc1pVUnZkMjRnWm5KdmJTQW5MaTloY25KdmR5MWphWEpqYkdVdFpHOTNiaTV6ZG1jbk8xeHVhVzF3YjNKMElHRnljbTkzUTJseVkyeGxSbTl5ZDJGeVpDQm1jbTl0SUNjdUwyRnljbTkzTFdOcGNtTnNaUzFtYjNKM1lYSmtMbk4yWnljN1hHNXBiWEJ2Y25RZ1lYSnliM2REYVhKamJHVlZjQ0JtY205dElDY3VMMkZ5Y205M0xXTnBjbU5zWlMxMWNDNXpkbWNuTzF4dWFXMXdiM0owSUdGeWNtOTNSRzkzYmlCbWNtOXRJQ2N1TDJGeWNtOTNMV1J2ZDI0dWMzWm5KenRjYm1sdGNHOXlkQ0JoY25KdmQwVnVaQ0JtY205dElDY3VMMkZ5Y205M0xXVnVaQzV6ZG1jbk8xeHVhVzF3YjNKMElHRnljbTkzUm05eWQyRnlaQ0JtY205dElDY3VMMkZ5Y205M0xXWnZjbmRoY21RdWMzWm5KenRjYm1sdGNHOXlkQ0JoY25KdmQxTjBZWEowSUdaeWIyMGdKeTR2WVhKeWIzY3RjM1JoY25RdWMzWm5KenRjYm1sdGNHOXlkQ0JoY25KdmQxVndJR1p5YjIwZ0p5NHZZWEp5YjNjdGRYQXVjM1puSnp0Y2JtbHRjRzl5ZENCaGNuSnZkMVZ3VW1sbmFIUWdabkp2YlNBbkxpOWhjbkp2ZHkxMWNDMXlhV2RvZEM1emRtY25PMXh1YVcxd2IzSjBJR0psYkd3Z1puSnZiU0FuTGk5aVpXeHNMbk4yWnljN1hHNXBiWEJ2Y25RZ1kyRnNaVzVrWVhJZ1puSnZiU0FuTGk5allXeGxibVJoY2k1emRtY25PMXh1YVcxd2IzSjBJR05oYldWeVlTQm1jbTl0SUNjdUwyTmhiV1Z5WVM1emRtY25PMXh1YVcxd2IzSjBJR05oYldWeVlWSnZiR3dnWm5KdmJTQW5MaTlqWVcxbGNtRXRjbTlzYkM1emRtY25PMXh1YVcxd2IzSjBJR05oYm1ObGJDQm1jbTl0SUNjdUwyTmhibU5sYkM1emRtY25PMXh1YVcxd2IzSjBJR05oYm05dWFXTmhiRkJwYmlCbWNtOXRJQ2N1TDJOaGJtOXVhV05oYkMxd2FXNHVjM1puSnp0Y2JtbHRjRzl5ZENCamFHVmpheUJtY205dElDY3VMMk5vWldOckxuTjJaeWM3WEc1cGJYQnZjblFnWTJobFkydERhWEpqYkdVZ1puSnZiU0FuTGk5amFHVmpheTFqYVhKamJHVXVjM1puSnp0Y2JtbHRjRzl5ZENCamFYSmpiR1ZQZFhSc2FXNWxJR1p5YjIwZ0p5NHZZMmx5WTJ4bExXOTFkR3hwYm1VdWMzWm5KenRjYm1sdGNHOXlkQ0JqYkdWaGNpQm1jbTl0SUNjdUwyTnNaV0Z5TG5OMlp5YzdYRzVwYlhCdmNuUWdZMnh2WTJzZ1puSnZiU0FuTGk5amJHOWpheTV6ZG1jbk8xeHVhVzF3YjNKMElHTnZaR1VnWm5KdmJTQW5MaTlqYjJSbExuTjJaeWM3WEc1cGJYQnZjblFnWTI5bklHWnliMjBnSnk0dlkyOW5Mbk4yWnljN1hHNXBiWEJ2Y25RZ1kyOXNiM0pRYVdOclpYSWdabkp2YlNBbkxpOWpiMnh2Y2kxd2FXTnJaWEl1YzNabkp6dGNibWx0Y0c5eWRDQmpiMjF3WVhOeklHWnliMjBnSnk0dlkyOXRjR0Z6Y3k1emRtY25PMXh1YVcxd2IzSjBJR052YlhCdmMyVWdabkp2YlNBbkxpOWpiMjF3YjNObExuTjJaeWM3WEc1cGJYQnZjblFnWTI5dWRtVnljMmx2YmxSaFp5Qm1jbTl0SUNjdUwyTnZiblpsY25OcGIyNHRkR0ZuTG5OMlp5YzdYRzVwYlhCdmNuUWdZM0psWkdsMFEyRnlaQ0JtY205dElDY3VMMk55WldScGRDMWpZWEprTG5OMlp5YzdYRzVwYlhCdmNuUWdZM0p2Y0NCbWNtOXRJQ2N1TDJOeWIzQXVjM1puSnp0Y2JtbHRjRzl5ZENCa1lYTm9JR1p5YjIwZ0p5NHZaR0Z6YUM1emRtY25PMXh1YVcxd2IzSjBJR1JwY21WamRHbHZibUZzUVhKeWIzZE1aV1owSUdaeWIyMGdKeTR2WkdseVpXTjBhVzl1WVd3dFlYSnliM2N0YkdWbWRDNXpkbWNuTzF4dWFXMXdiM0owSUdScGNtVmpkR2x2Ym1Gc1FYSnliM2RTYVdkb2RDQm1jbTl0SUNjdUwyUnBjbVZqZEdsdmJtRnNMV0Z5Y205M0xYSnBaMmgwTG5OMlp5YzdYRzVwYlhCdmNuUWdaRzkzYm14dllXUWdabkp2YlNBbkxpOWtiM2R1Ykc5aFpDNXpkbWNuTzF4dWFXMXdiM0owSUdSMWNHeHBZMkYwWlNCbWNtOXRJQ2N1TDJSMWNHeHBZMkYwWlM1emRtY25PMXh1YVcxd2IzSjBJR1ZrYVhRZ1puSnZiU0FuTGk5bFpHbDBMbk4yWnljN1hHNXBiWEJ2Y25RZ1pXeHNhWEJ6YVhNZ1puSnZiU0FuTGk5bGJHeHBjSE5wY3k1emRtY25PMXh1YVcxd2IzSjBJR1ZzYkdsd2MybHpRMmx5WTJ4bFQzVjBiR2x1WlNCbWNtOXRJQ2N1TDJWc2JHbHdjMmx6TFdOcGNtTnNaUzF2ZFhSc2FXNWxMbk4yWnljN1hHNXBiWEJ2Y25RZ1pXNTJaV3h2Y0dVZ1puSnZiU0FuTGk5bGJuWmxiRzl3WlM1emRtY25PMXh1YVcxd2IzSjBJR1Y1WlNCbWNtOXRJQ2N1TDJWNVpTNXpkbWNuTzF4dWFXMXdiM0owSUdaaFkyVmliMjlySUdaeWIyMGdKeTR2Wm1GalpXSnZiMnN1YzNabkp6dGNibWx0Y0c5eWRDQm1ZV05sU0dGd2NIa2dabkp2YlNBbkxpOW1ZV05sTFdoaGNIQjVMbk4yWnljN1hHNXBiWEJ2Y25RZ1ptRmpaVk5oWkNCbWNtOXRJQ2N1TDJaaFkyVXRjMkZrTG5OMlp5YzdYRzVwYlhCdmNuUWdabUZqWlZOdGFXeGxlU0JtY205dElDY3VMMlpoWTJVdGMyMXBiR1Y1TG5OMlp5YzdYRzVwYlhCdmNuUWdabWxzWlZWdWEyNXZkMjRnWm5KdmJTQW5MaTltYVd4bExYVnVhMjV2ZDI0dWMzWm5KenRjYm1sdGNHOXlkQ0JtYVd4c1QzQmhjWFZsSUdaeWIyMGdKeTR2Wm1sc2JDMXZjR0Z4ZFdVdWMzWm5KenRjYm1sdGNHOXlkQ0JtYVd4c1ZISmhibk53WVhKbGJuUWdabkp2YlNBbkxpOW1hV3hzTFhSeVlXNXpjR0Z5Wlc1MExuTjJaeWM3WEc1cGJYQnZjblFnWm1sc2RHVnlJR1p5YjIwZ0p5NHZabWxzZEdWeUxuTjJaeWM3WEc1cGJYQnZjblFnWm14aFp5Qm1jbTl0SUNjdUwyWnNZV2N1YzNabkp6dGNibWx0Y0c5eWRDQm1iR0Z6YUNCbWNtOXRJQ2N1TDJac1lYTm9Mbk4yWnljN1hHNXBiWEJ2Y25RZ1pteGhjMmhzYVdkb2RDQm1jbTl0SUNjdUwyWnNZWE5vYkdsbmFIUXVjM1puSnp0Y2JtbHRjRzl5ZENCbWJHbHdTRzl5YVhwdmJuUmhiQ0JtY205dElDY3VMMlpzYVhBdGFHOXlhWHB2Ym5SaGJDNXpkbWNuTzF4dWFXMXdiM0owSUdac2FYQldaWEowYVdOaGJDQm1jbTl0SUNjdUwyWnNhWEF0ZG1WeWRHbGpZV3d1YzNabkp6dGNibWx0Y0c5eWRDQm1iMnhrWlhJZ1puSnZiU0FuTGk5bWIyeGtaWEl1YzNabkp6dGNibWx0Y0c5eWRDQm5hV1lnWm5KdmJTQW5MaTluYVdZdWMzWm5KenRjYm1sdGNHOXlkQ0JuYkc5aVpTQm1jbTl0SUNjdUwyZHNiMkpsTG5OMlp5YzdYRzVwYlhCdmNuUWdaMnh2WW1WRGFHVmphMlZrSUdaeWIyMGdKeTR2WjJ4dlltVXRZMmhsWTJ0bFpDNXpkbWNuTzF4dWFXMXdiM0owSUdkdFlXbHNJR1p5YjIwZ0p5NHZaMjFoYVd3dWMzWm5KenRjYm1sdGNHOXlkQ0JuYjI5bmJHVlFiSFZ6SUdaeWIyMGdKeTR2WjI5dloyeGxMWEJzZFhNdWMzWm5KenRjYm1sdGNHOXlkQ0JuY21Gd2FFSmhjaUJtY205dElDY3VMMmR5WVhCb0xXSmhjaTV6ZG1jbk8xeHVhVzF3YjNKMElHaGhibVJzWlNCbWNtOXRJQ2N1TDJoaGJtUnNaUzV6ZG1jbk8xeHVhVzF3YjNKMElHaGhibVJRYjJsdWRHbHVaeUJtY205dElDY3VMMmhoYm1RdGNHOXBiblJwYm1jdWMzWm5KenRjYm1sdGNHOXlkQ0JvWldGeWRDQm1jbTl0SUNjdUwyaGxZWEowTG5OMlp5YzdYRzVwYlhCdmNuUWdhR1ZoY25SUGRYUnNhVzVsSUdaeWIyMGdKeTR2YUdWaGNuUXRiM1YwYkdsdVpTNXpkbWNuTzF4dWFXMXdiM0owSUdobFlYSjBRbkp2YTJWdUlHWnliMjBnSnk0dmFHVmhjblF0WW5KdmEyVnVMbk4yWnljN1hHNXBiWEJ2Y25RZ2FXMXdjbVZ6YzNWdElHWnliMjBnSnk0dmFXMXdjbVZ6YzNWdExuTjJaeWM3WEc1cGJYQnZjblFnYVc1bWIwTnBjbU5zWlNCbWNtOXRJQ2N1TDJsdVptOHRZMmx5WTJ4bExuTjJaeWM3WEc1cGJYQnZjblFnYTJWNUlHWnliMjBnSnk0dmEyVjVMbk4yWnljN1hHNXBiWEJ2Y25RZ2EyNXZiM0FnWm5KdmJTQW5MaTlyYm05dmNDNXpkbWNuTzF4dWFXMXdiM0owSUd4cFoyaDBZblZzWWlCbWNtOXRJQ2N1TDJ4cFoyaDBZblZzWWk1emRtY25PMXh1YVcxd2IzSjBJR3hwWjJoMGJtbHVaMEp2YkhSRGFYSmpiR1VnWm5KdmJTQW5MaTlzYVdkb2RHNXBibWN0WW05c2RDMWphWEpqYkdVdWMzWm5KenRjYm1sdGNHOXlkQ0JzYVc1cklHWnliMjBnSnk0dmJHbHVheTV6ZG1jbk8xeHVhVzF3YjNKMElHeHZZMkYwYVc5dUlHWnliMjBnSnk0dmJHOWpZWFJwYjI0dWMzWm5KenRjYm1sdGNHOXlkQ0JzYjJOcklHWnliMjBnSnk0dmJHOWpheTV6ZG1jbk8xeHVhVzF3YjNKMElHeHZaMjlNWVhKblpTQm1jbTl0SUNjdUwyeHZaMjh0YkdGeVoyVXVjM1puSnp0Y2JtbHRjRzl5ZENCc2IyZHZVMjFoYkd3Z1puSnZiU0FuTGk5c2IyZHZMWE50WVd4c0xuTjJaeWM3WEc1cGJYQnZjblFnYkc5bmIzVjBJR1p5YjIwZ0p5NHZiRzluYjNWMExuTjJaeWM3WEc1cGJYQnZjblFnYldGeVoybHVjMHhoY21kbElHWnliMjBnSnk0dmJXRnlaMmx1Y3kxc1lYSm5aUzV6ZG1jbk8xeHVhVzF3YjNKMElHMWhjbWRwYm5OTlpXUnBkVzBnWm5KdmJTQW5MaTl0WVhKbmFXNXpMVzFsWkdsMWJTNXpkbWNuTzF4dWFXMXdiM0owSUcxaGNtZHBibk5UYldGc2JDQm1jbTl0SUNjdUwyMWhjbWRwYm5NdGMyMWhiR3d1YzNabkp6dGNibWx0Y0c5eWRDQnRZWGhwYldsNlpTQm1jbTl0SUNjdUwyMWhlR2x0YVhwbExuTjJaeWM3WEc1cGJYQnZjblFnYldWbllYQm9iMjVsSUdaeWIyMGdKeTR2YldWbllYQm9iMjVsTG5OMlp5YzdYRzVwYlhCdmNuUWdiV1Z1ZFNCbWNtOXRJQ2N1TDIxbGJuVXVjM1puSnp0Y2JtbHRjRzl5ZENCdGFXNXBiV2w2WlNCbWNtOXRJQ2N1TDIxcGJtbHRhWHBsTG5OMlp5YzdYRzVwYlhCdmNuUWdiVzkyWlNCbWNtOXRJQ2N1TDIxdmRtVXVjM1puSnp0Y2JtbHRjRzl5ZENCdGRYUmxJR1p5YjIwZ0p5NHZiWFYwWlM1emRtY25PMXh1YVcxd2IzSjBJRzkyWlhKc1lYbFVaWGgwSUdaeWIyMGdKeTR2YjNabGNteGhlUzEwWlhoMExuTjJaeWM3WEc1cGJYQnZjblFnY0dGMWMyVWdabkp2YlNBbkxpOXdZWFZ6WlM1emRtY25PMXh1YVcxd2IzSjBJSEJsYjNCc1pTQm1jbTl0SUNjdUwzQmxiM0JzWlM1emRtY25PMXh1YVcxd2IzSjBJSEJsY25OdmJpQm1jbTl0SUNjdUwzQmxjbk52Ymk1emRtY25PMXh1YVcxd2IzSjBJSEJsY25OdmJrRmtaQ0JtY205dElDY3VMM0JsY25OdmJpMWhaR1F1YzNabkp6dGNibWx0Y0c5eWRDQndhRzl1WlNCbWNtOXRJQ2N1TDNCb2IyNWxMbk4yWnljN1hHNXBiWEJ2Y25RZ2NHbHVJR1p5YjIwZ0p5NHZjR2x1TG5OMlp5YzdYRzVwYlhCdmNuUWdjR2x1U0dsa1pTQm1jbTl0SUNjdUwzQnBiaTFvYVdSbExuTjJaeWM3WEc1cGJYQnZjblFnY0dsdWRHVnlaWE4wSUdaeWIyMGdKeTR2Y0dsdWRHVnlaWE4wTG5OMlp5YzdYRzVwYlhCdmNuUWdjR3hoZVNCbWNtOXRJQ2N1TDNCc1lYa3VjM1puSnp0Y2JtbHRjRzl5ZENCeGRXVnpkR2x2YmsxaGNtc2dabkp2YlNBbkxpOXhkV1Z6ZEdsdmJpMXRZWEpyTG5OMlp5YzdYRzVwYlhCdmNuUWdjbVZtY21WemFDQm1jbTl0SUNjdUwzSmxabkpsYzJndWMzWm5KenRjYm1sdGNHOXlkQ0J5WlcxdmRtVWdabkp2YlNBbkxpOXlaVzF2ZG1VdWMzWm5KenRjYm1sdGNHOXlkQ0J5Wlc5eVpHVnlTVzFoWjJWeklHWnliMjBnSnk0dmNtVnZjbVJsY2kxcGJXRm5aWE11YzNabkp6dGNibWx0Y0c5eWRDQnlaWEJzWVdObElHWnliMjBnSnk0dmNtVndiR0ZqWlM1emRtY25PMXh1YVcxd2IzSjBJSEpsY0c5eWRDQm1jbTl0SUNjdUwzSmxjRzl5ZEM1emRtY25PMXh1YVcxd2IzSjBJSEp2ZEdGMFpTQm1jbTl0SUNjdUwzSnZkR0YwWlM1emRtY25PMXh1YVcxd2IzSjBJSE5qWVd4bElHWnliMjBnSnk0dmMyTmhiR1V1YzNabkp6dGNibWx0Y0c5eWRDQnpaV0Z5WTJnZ1puSnZiU0FuTGk5elpXRnlZMmd1YzNabkp6dGNibWx0Y0c5eWRDQnpaV04xY21sMGVTQm1jbTl0SUNjdUwzTmxZM1Z5YVhSNUxuTjJaeWM3WEc1cGJYQnZjblFnYzJWdVpDQm1jbTl0SUNjdUwzTmxibVF1YzNabkp6dGNibWx0Y0c5eWRDQnphR0Z5WlNCbWNtOXRJQ2N1TDNOb1lYSmxMbk4yWnljN1hHNXBiWEJ2Y25RZ2MyaHZjSEJwYm1kQ1lXY2dabkp2YlNBbkxpOXphRzl3Y0dsdVp5MWlZV2N1YzNabkp6dGNibWx0Y0c5eWRDQnpiV2xzWlhrZ1puSnZiU0FuTGk5emJXbHNaWGt1YzNabkp6dGNibWx0Y0c5eWRDQnpiV2xzWlhsUGRYUnNhVzVsSUdaeWIyMGdKeTR2YzIxcGJHVjVMVzkxZEd4cGJtVXVjM1puSnp0Y2JtbHRjRzl5ZENCemIzVnVaQ0JtY205dElDY3VMM052ZFc1a0xuTjJaeWM3WEc1cGJYQnZjblFnYzI5eWRFRnpZMlZ1WkdsdVp5Qm1jbTl0SUNjdUwzTnZjblF0WVhOalpXNWthVzVuTG5OMlp5YzdYRzVwYlhCdmNuUWdjMjl5ZEVSbGMyTmxibVJwYm1jZ1puSnZiU0FuTGk5emIzSjBMV1JsYzJObGJtUnBibWN1YzNabkp6dGNibWx0Y0c5eWRDQnpjR1ZsWTJnZ1puSnZiU0FuTGk5emNHVmxZMmd1YzNabkp6dGNibWx0Y0c5eWRDQnpjR1ZsWTJoRmJHeHBjSE5wY3lCbWNtOXRJQ2N1TDNOd1pXVmphQzFsYkd4cGNITnBjeTV6ZG1jbk8xeHVhVzF3YjNKMElITjBZWElnWm5KdmJTQW5MaTl6ZEdGeUxuTjJaeWM3WEc1cGJYQnZjblFnYzNSaGNraGhiR1lnWm5KdmJTQW5MaTl6ZEdGeUxXaGhiR1l1YzNabkp6dGNibWx0Y0c5eWRDQnpkRzl5ZVZCcGJpQm1jbTl0SUNjdUwzTjBiM0o1TFhCcGJpNXpkbWNuTzF4dWFXMXdiM0owSUhOM2FYUmphRUZqWTI5MWJuUWdabkp2YlNBbkxpOXpkMmwwWTJndFlXTmpiM1Z1ZEM1emRtY25PMXh1YVcxd2IzSjBJSFJoWnlCbWNtOXRJQ2N1TDNSaFp5NXpkbWNuTzF4dWFXMXdiM0owSUhSbGNtMXpJR1p5YjIwZ0p5NHZkR1Z5YlhNdWMzWm5KenRjYm1sdGNHOXlkQ0IwWlhoMFFXeHBaMjVEWlc1MFpYSWdabkp2YlNBbkxpOTBaWGgwTFdGc2FXZHVMV05sYm5SbGNpNXpkbWNuTzF4dWFXMXdiM0owSUhSbGVIUkJiR2xuYmt4bFpuUWdabkp2YlNBbkxpOTBaWGgwTFdGc2FXZHVMV3hsWm5RdWMzWm5KenRjYm1sdGNHOXlkQ0IwWlhoMFFXeHBaMjVTYVdkb2RDQm1jbTl0SUNjdUwzUmxlSFF0WVd4cFoyNHRjbWxuYUhRdWMzWm5KenRjYm1sdGNHOXlkQ0IwWlhoMFFXeHNRMkZ3Y3lCbWNtOXRJQ2N1TDNSbGVIUXRZV3hzTFdOaGNITXVjM1puSnp0Y2JtbHRjRzl5ZENCMFpYaDBSWGgwY21GVGJXRnNiQ0JtY205dElDY3VMM1JsZUhRdFpYaDBjbUV0YzIxaGJHd3VjM1puSnp0Y2JtbHRjRzl5ZENCMFpYaDBUR0Z5WjJVZ1puSnZiU0FuTGk5MFpYaDBMV3hoY21kbExuTjJaeWM3WEc1cGJYQnZjblFnZEdWNGRFeHBibVZJWldsbmFIUWdabkp2YlNBbkxpOTBaWGgwTFd4cGJtVXRhR1ZwWjJoMExuTjJaeWM3WEc1cGJYQnZjblFnZEdWNGRFMWxaR2wxYlNCbWNtOXRJQ2N1TDNSbGVIUXRiV1ZrYVhWdExuTjJaeWM3WEc1cGJYQnZjblFnZEdWNGRGTmxiblJsYm1ObFEyRnpaU0JtY205dElDY3VMM1JsZUhRdGMyVnVkR1Z1WTJVdFkyRnpaUzV6ZG1jbk8xeHVhVzF3YjNKMElIUmxlSFJUYVhwbElHWnliMjBnSnk0dmRHVjRkQzF6YVhwbExuTjJaeWM3WEc1cGJYQnZjblFnZEdWNGRGTnRZV3hzSUdaeWIyMGdKeTR2ZEdWNGRDMXpiV0ZzYkM1emRtY25PMXh1YVcxd2IzSjBJSFJsZUhSVGNHRmphVzVuSUdaeWIyMGdKeTR2ZEdWNGRDMXpjR0ZqYVc1bkxuTjJaeWM3WEc1cGJYQnZjblFnZEhKaGMyaERZVzRnWm5KdmJTQW5MaTkwY21GemFDMWpZVzR1YzNabkp6dGNibWx0Y0c5eWRDQjBkMmwwZEdWeUlHWnliMjBnSnk0dmRIZHBkSFJsY2k1emRtY25PMXh1YVcxd2IzSjBJSFpwWkdWdlEyRnRaWEpoSUdaeWIyMGdKeTR2ZG1sa1pXOHRZMkZ0WlhKaExuTjJaeWM3WEc1cGJYQnZjblFnZG1sbGQxUjVjR1ZFWldaaGRXeDBJR1p5YjIwZ0p5NHZkbWxsZHkxMGVYQmxMV1JsWm1GMWJIUXVjM1puSnp0Y2JtbHRjRzl5ZENCMmFXVjNWSGx3WlVSbGJuTmxJR1p5YjIwZ0p5NHZkbWxsZHkxMGVYQmxMV1JsYm5ObExuTjJaeWM3WEc1cGJYQnZjblFnZG1sbGQxUjVjR1ZNYVhOMElHWnliMjBnSnk0dmRtbGxkeTEwZVhCbExXeHBjM1F1YzNabkp6dGNibWx0Y0c5eWRDQjNiM0pyWm14dmQxTjBZWFIxYzBGc2JDQm1jbTl0SUNjdUwzZHZjbXRtYkc5M0xYTjBZWFIxY3kxaGJHd3VjM1puSnp0Y2JtbHRjRzl5ZENCM2IzSnJabXh2ZDFOMFlYUjFjMGhoYkhSbFpDQm1jbTl0SUNjdUwzZHZjbXRtYkc5M0xYTjBZWFIxY3kxb1lXeDBaV1F1YzNabkp6dGNibWx0Y0c5eWRDQjNiM0pyWm14dmQxTjBZWFIxYzBsdVVISnZaM0psYzNNZ1puSnZiU0FuTGk5M2IzSnJabXh2ZHkxemRHRjBkWE10YVc0dGNISnZaM0psYzNNdWMzWm5KenRjYm1sdGNHOXlkQ0IzYjNKclpteHZkMU4wWVhSMWMwOXJJR1p5YjIwZ0p5NHZkMjl5YTJac2IzY3RjM1JoZEhWekxXOXJMbk4yWnljN1hHNXBiWEJ2Y25RZ2QyOXlhMlpzYjNkVGRHRjBkWE5RY205aWJHVnRJR1p5YjIwZ0p5NHZkMjl5YTJac2IzY3RjM1JoZEhWekxYQnliMkpzWlcwdWMzWm5KenRjYm1sdGNHOXlkQ0IzYjNKclpteHZkMU4wWVhSMWMxVnVjM1JoY25SbFpDQm1jbTl0SUNjdUwzZHZjbXRtYkc5M0xYTjBZWFIxY3kxMWJuTjBZWEowWldRdWMzWm5KenRjYm1sdGNHOXlkQ0IzYjNKclpteHZkMU4wWVhSMWMxZGhjbTVwYm1jZ1puSnZiU0FuTGk5M2IzSnJabXh2ZHkxemRHRjBkWE10ZDJGeWJtbHVaeTV6ZG1jbk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUdGa0xGeHVJQ0FuWVdRdFozSnZkWEFuT2lCaFpFZHliM1Z3TEZ4dUlDQmhaR1FzWEc0Z0lDZGhaR1F0WTJseVkyeGxKem9nWVdSa1EybHlZMnhsTEZ4dUlDQW5ZV1JrTFd4aGVXOTFkQ2M2SUdGa1pFeGhlVzkxZEN4Y2JpQWdKMkZrWkMxd2FXNG5PaUJoWkdSUWFXNHNYRzRnSUNkaFpITXRjM1JoZEhNbk9pQmhaSE5UZEdGMGN5eGNiaUFnSjJGa2N5MXZkbVZ5ZG1sbGR5YzZJR0ZrYzA5MlpYSjJhV1YzTEZ4dUlDQmhiR1Z5ZEN4Y2JpQWdKMkZzYVdkdUxXSnZkSFJ2YlMxalpXNTBaWEluT2lCaGJHbG5ia0p2ZEhSdmJVTmxiblJsY2l4Y2JpQWdKMkZzYVdkdUxXSnZkSFJ2YlMxc1pXWjBKem9nWVd4cFoyNUNiM1IwYjIxTVpXWjBMRnh1SUNBbllXeHBaMjR0WW05MGRHOXRMWEpwWjJoMEp6b2dZV3hwWjI1Q2IzUjBiMjFTYVdkb2RDeGNiaUFnSjJGc2FXZHVMV0p2ZEhSdmJTYzZJR0ZzYVdkdVFtOTBkRzl0TEZ4dUlDQW5ZV3hwWjI0dGJXbGtaR3hsSnpvZ1lXeHBaMjVOYVdSa2JHVXNYRzRnSUNkaGJHbG5iaTEwYjNBdFkyVnVkR1Z5SnpvZ1lXeHBaMjVVYjNCRFpXNTBaWElzWEc0Z0lDZGhiR2xuYmkxMGIzQXRiR1ZtZENjNklHRnNhV2R1Vkc5d1RHVm1kQ3hjYmlBZ0oyRnNhV2R1TFhSdmNDMXlhV2RvZENjNklHRnNhV2R1Vkc5d1VtbG5hSFFzWEc0Z0lDZGhiR2xuYmkxMGIzQW5PaUJoYkdsbmJsUnZjQ3hjYmlBZ0oyRnVaSEp2YVdRdGMyaGhjbVVuT2lCaGJtUnliMmxrVTJoaGNtVXNYRzRnSUNkaGJtZHNaV1F0Y0dsdUp6b2dZVzVuYkdWa1VHbHVMRnh1SUNCaGNIQnpMRnh1SUNBbllYSnliM2N0WW1GamF5YzZJR0Z5Y205M1FtRmpheXhjYmlBZ0oyRnljbTkzTFdOcGNtTnNaUzFrYjNkdUp6b2dZWEp5YjNkRGFYSmpiR1ZFYjNkdUxGeHVJQ0FuWVhKeWIzY3RZMmx5WTJ4bExXWnZjbmRoY21Rbk9pQmhjbkp2ZDBOcGNtTnNaVVp2Y25kaGNtUXNYRzRnSUNkaGNuSnZkeTFqYVhKamJHVXRkWEFuT2lCaGNuSnZkME5wY21Oc1pWVndMRnh1SUNBbllYSnliM2N0Wkc5M2JpYzZJR0Z5Y205M1JHOTNiaXhjYmlBZ0oyRnljbTkzTFdWdVpDYzZJR0Z5Y205M1JXNWtMRnh1SUNBbllYSnliM2N0Wm05eWQyRnlaQ2M2SUdGeWNtOTNSbTl5ZDJGeVpDeGNiaUFnSjJGeWNtOTNMWE4wWVhKMEp6b2dZWEp5YjNkVGRHRnlkQ3hjYmlBZ0oyRnljbTkzTFhWd0p6b2dZWEp5YjNkVmNDeGNiaUFnSjJGeWNtOTNMWFZ3TFhKcFoyaDBKem9nWVhKeWIzZFZjRkpwWjJoMExGeHVJQ0JpWld4c0xGeHVJQ0JqWVd4bGJtUmhjaXhjYmlBZ1kyRnRaWEpoTEZ4dUlDQW5ZMkZ0WlhKaExYSnZiR3duT2lCallXMWxjbUZTYjJ4c0xGeHVJQ0JqWVc1alpXd3NYRzRnSUNkallXNXZibWxqWVd3dGNHbHVKem9nWTJGdWIyNXBZMkZzVUdsdUxGeHVJQ0FuWTI5c2IzSXRjR2xqYTJWeUp6b2dZMjlzYjNKUWFXTnJaWElzWEc0Z0lHTm9aV05yTEZ4dUlDQW5ZMmhsWTJzdFkybHlZMnhsSnpvZ1kyaGxZMnREYVhKamJHVXNYRzRnSUNkamFYSmpiR1V0YjNWMGJHbHVaU2M2SUdOcGNtTnNaVTkxZEd4cGJtVXNYRzRnSUdOc1pXRnlMRnh1SUNCamJHOWpheXhjYmlBZ1kyOWtaU3hjYmlBZ1kyOW5MRnh1SUNCamIyMXdZWE56TEZ4dUlDQmpiMjF3YjNObExGeHVJQ0JqY205d0xGeHVJQ0JrWVhOb0xGeHVJQ0FuWTI5dWRtVnljMmx2YmkxMFlXY25PaUJqYjI1MlpYSnphVzl1VkdGbkxGeHVJQ0FuWTNKbFpHbDBMV05oY21Rbk9pQmpjbVZrYVhSRFlYSmtMRnh1SUNBblpHbHlaV04wYVc5dVlXd3RZWEp5YjNjdGJHVm1kQ2M2SUdScGNtVmpkR2x2Ym1Gc1FYSnliM2RNWldaMExGeHVJQ0FuWkdseVpXTjBhVzl1WVd3dFlYSnliM2N0Y21sbmFIUW5PaUJrYVhKbFkzUnBiMjVoYkVGeWNtOTNVbWxuYUhRc1hHNGdJR1J2ZDI1c2IyRmtMRnh1SUNCa2RYQnNhV05oZEdVc1hHNGdJR1ZrYVhRc1hHNGdJR1ZzYkdsd2MybHpMRnh1SUNBblpXeHNhWEJ6YVhNdFkybHlZMnhsTFc5MWRHeHBibVVuT2lCbGJHeHBjSE5wYzBOcGNtTnNaVTkxZEd4cGJtVXNYRzRnSUdWdWRtVnNiM0JsTEZ4dUlDQmxlV1VzWEc0Z0lHWmhZMlZpYjI5ckxGeHVJQ0FuWm1GalpTMW9ZWEJ3ZVNjNklHWmhZMlZJWVhCd2VTeGNiaUFnSjJaaFkyVXRjMkZrSnpvZ1ptRmpaVk5oWkN4Y2JpQWdKMlpoWTJVdGMyMXBiR1Y1SnpvZ1ptRmpaVk50YVd4bGVTeGNiaUFnSjJacGJHVXRkVzVyYm05M2JpYzZJR1pwYkdWVmJtdHViM2R1TEZ4dUlDQW5abWxzYkMxdmNHRnhkV1VuT2lCbWFXeHNUM0JoY1hWbExGeHVJQ0FuWm1sc2JDMTBjbUZ1YzNCaGNtVnVkQ2M2SUdacGJHeFVjbUZ1YzNCaGNtVnVkQ3hjYmlBZ1ptbHNkR1Z5TEZ4dUlDQm1iR0ZuTEZ4dUlDQm1iR0Z6YUN4Y2JpQWdabXhoYzJoc2FXZG9kQ3hjYmlBZ1pteHBjRWh2Y21sNmIyNTBZV3dzWEc0Z0lHWnNhWEJXWlhKMGFXTmhiQ3hjYmlBZ1ptOXNaR1Z5TEZ4dUlDQm5hV1lzWEc0Z0lHZHNiMkpsTEZ4dUlDQW5aMnh2WW1VdFkyaGxZMnRsWkNjNklHZHNiMkpsUTJobFkydGxaQ3hjYmlBZ1oyMWhhV3dzWEc0Z0lDZG5iMjluYkdVdGNHeDFjeWM2SUdkdmIyZHNaVkJzZFhNc1hHNGdJQ2RuY21Gd2FDMWlZWEluT2lCbmNtRndhRUpoY2l4Y2JpQWdhR0Z1Wkd4bExGeHVJQ0FuYUdGdVpDMXdiMmx1ZEdsdVp5YzZJR2hoYm1SUWIybHVkR2x1Wnl4Y2JpQWdhR1ZoY25Rc1hHNGdJQ2RvWldGeWRDMXZkWFJzYVc1bEp6b2dhR1ZoY25SUGRYUnNhVzVsTEZ4dUlDQW5hR1ZoY25RdFluSnZhMlZ1SnpvZ2FHVmhjblJDY205clpXNHNYRzRnSUdsdGNISmxjM04xYlN4Y2JpQWdKMmx1Wm04dFkybHlZMnhsSnpvZ2FXNW1iME5wY21Oc1pTeGNiaUFnYTJWNUxGeHVJQ0JyYm05dmNDeGNiaUFnYkdsbmFIUmlkV3hpTEZ4dUlDQW5iR2xuYUhSdWFXNW5MV0p2YkhRdFkybHlZMnhsSnpvZ2JHbG5hSFJ1YVc1blFtOXNkRU5wY21Oc1pTeGNiaUFnYkdsdWF5eGNiaUFnYkc5allYUnBiMjRzWEc0Z0lHeHZZMnNzWEc0Z0lDZHNiMmR2TFd4aGNtZGxKem9nYkc5bmIweGhjbWRsTEZ4dUlDQW5iRzluYnkxemJXRnNiQ2M2SUd4dloyOVRiV0ZzYkN4Y2JpQWdiRzluYjNWMExGeHVJQ0FuYldGeVoybHVjeTFzWVhKblpTYzZJRzFoY21kcGJuTk1ZWEpuWlN4Y2JpQWdKMjFoY21kcGJuTXRiV1ZrYVhWdEp6b2diV0Z5WjJsdWMwMWxaR2wxYlN4Y2JpQWdKMjFoY21kcGJuTXRjMjFoYkd3bk9pQnRZWEpuYVc1elUyMWhiR3dzWEc0Z0lHMWhlR2x0YVhwbExGeHVJQ0J0WldkaGNHaHZibVVzWEc0Z0lHMWxiblVzWEc0Z0lHMXBibWx0YVhwbExGeHVJQ0J0YjNabExGeHVJQ0J0ZFhSbExGeHVJQ0FuYjNabGNteGhlUzEwWlhoMEp6b2diM1psY214aGVWUmxlSFFzWEc0Z0lIQmhkWE5sTEZ4dUlDQndaVzl3YkdVc1hHNGdJSEJsY25OdmJpeGNiaUFnSjNCbGNuTnZiaTFoWkdRbk9pQndaWEp6YjI1QlpHUXNYRzRnSUhCb2IyNWxMRnh1SUNCd2FXNHNYRzRnSUNkd2FXNHRhR2xrWlNjNklIQnBia2hwWkdVc1hHNGdJSEJwYm5SbGNtVnpkQ3hjYmlBZ2NHeGhlU3hjYmlBZ2NtVm1jbVZ6YUN4Y2JpQWdKM0YxWlhOMGFXOXVMVzFoY21zbk9pQnhkV1Z6ZEdsdmJrMWhjbXNzWEc0Z0lISmxiVzkyWlN4Y2JpQWdKM0psYjNKa1pYSXRhVzFoWjJWekp6b2djbVZ2Y21SbGNrbHRZV2RsY3l4Y2JpQWdjbVZ3YkdGalpTeGNiaUFnY21Wd2IzSjBMRnh1SUNCeWIzUmhkR1VzWEc0Z0lITmpZV3hsTEZ4dUlDQnpaV0Z5WTJnc1hHNGdJSE5sWTNWeWFYUjVMRnh1SUNBbmMyaHZjSEJwYm1jdFltRm5Kem9nYzJodmNIQnBibWRDWVdjc1hHNGdJSE50YVd4bGVTeGNiaUFnSjNOdGFXeGxlUzF2ZFhSc2FXNWxKem9nYzIxcGJHVjVUM1YwYkdsdVpTeGNiaUFnYzJWdVpDeGNiaUFnYzJoaGNtVXNYRzRnSUhOdmRXNWtMRnh1SUNBbmMyOXlkQzFoYzJObGJtUnBibWNuT2lCemIzSjBRWE5qWlc1a2FXNW5MRnh1SUNBbmMyOXlkQzFrWlhOalpXNWthVzVuSnpvZ2MyOXlkRVJsYzJObGJtUnBibWNzWEc0Z0lITndaV1ZqYUN4Y2JpQWdKM053WldWamFDMWxiR3hwY0hOcGN5YzZJSE53WldWamFFVnNiR2x3YzJsekxGeHVJQ0J6ZEdGeUxGeHVJQ0FuYzNSaGNpMW9ZV3htSnpvZ2MzUmhja2hoYkdZc1hHNGdJQ2R6ZEc5eWVTMXdhVzRuT2lCemRHOXllVkJwYml4Y2JpQWdKM04zYVhSamFDMWhZMk52ZFc1MEp6b2djM2RwZEdOb1FXTmpiM1Z1ZEN4Y2JpQWdkR0ZuTEZ4dUlDQjBaWEp0Y3l4Y2JpQWdKM1JsZUhRdFlXeHBaMjR0YkdWbWRDYzZJSFJsZUhSQmJHbG5ia3hsWm5Rc1hHNGdJQ2QwWlhoMExXRnNhV2R1TFdObGJuUmxjaWM2SUhSbGVIUkJiR2xuYmtObGJuUmxjaXhjYmlBZ0ozUmxlSFF0WVd4cFoyNHRjbWxuYUhRbk9pQjBaWGgwUVd4cFoyNVNhV2RvZEN4Y2JpQWdKM1JsZUhRdFlXeHNMV05oY0hNbk9pQjBaWGgwUVd4c1EyRndjeXhjYmlBZ0ozUmxlSFF0WlhoMGNtRXRjMjFoYkd3bk9pQjBaWGgwUlhoMGNtRlRiV0ZzYkN4Y2JpQWdKM1JsZUhRdGJHRnlaMlVuT2lCMFpYaDBUR0Z5WjJVc1hHNGdJQ2QwWlhoMExXeHBibVV0YUdWcFoyaDBKem9nZEdWNGRFeHBibVZJWldsbmFIUXNYRzRnSUNkMFpYaDBMVzFsWkdsMWJTYzZJSFJsZUhSTlpXUnBkVzBzWEc0Z0lDZDBaWGgwTFhObGJuUmxibU5sTFdOaGMyVW5PaUIwWlhoMFUyVnVkR1Z1WTJWRFlYTmxMRnh1SUNBbmRHVjRkQzF6YVhwbEp6b2dkR1Y0ZEZOcGVtVXNYRzRnSUNkMFpYaDBMWE50WVd4c0p6b2dkR1Y0ZEZOdFlXeHNMRnh1SUNBbmRHVjRkQzF6Y0dGamFXNW5Kem9nZEdWNGRGTndZV05wYm1jc1hHNGdJQ2QwY21GemFDMWpZVzRuT2lCMGNtRnphRU5oYml4Y2JpQWdkSGRwZEhSbGNpeGNiaUFnSjNacFpHVnZMV05oYldWeVlTYzZJSFpwWkdWdlEyRnRaWEpoTEZ4dUlDQW5kbWxsZHkxMGVYQmxMV1JsWm1GMWJIUW5PaUIyYVdWM1ZIbHdaVVJsWm1GMWJIUXNYRzRnSUNkMmFXVjNMWFI1Y0dVdFpHVnVjMlVuT2lCMmFXVjNWSGx3WlVSbGJuTmxMRnh1SUNBbmRtbGxkeTEwZVhCbExXeHBjM1FuT2lCMmFXVjNWSGx3WlV4cGMzUXNYRzRnSUNkM2IzSnJabXh2ZHkxemRHRjBkWE10WVd4c0p6b2dkMjl5YTJac2IzZFRkR0YwZFhOQmJHd3NYRzRnSUNkM2IzSnJabXh2ZHkxemRHRjBkWE10YUdGc2RHVmtKem9nZDI5eWEyWnNiM2RUZEdGMGRYTklZV3gwWldRc1hHNGdJQ2QzYjNKclpteHZkeTF6ZEdGMGRYTXRhVzR0Y0hKdlozSmxjM01uT2lCM2IzSnJabXh2ZDFOMFlYUjFjMGx1VUhKdlozSmxjM01zWEc0Z0lDZDNiM0pyWm14dmR5MXpkR0YwZFhNdGIyc25PaUIzYjNKclpteHZkMU4wWVhSMWMwOXJMRnh1SUNBbmQyOXlhMlpzYjNjdGMzUmhkSFZ6TFhCeWIySnNaVzBuT2lCM2IzSnJabXh2ZDFOMFlYUjFjMUJ5YjJKc1pXMHNYRzRnSUNkM2IzSnJabXh2ZHkxemRHRjBkWE10ZFc1emRHRnlkR1ZrSnpvZ2QyOXlhMlpzYjNkVGRHRjBkWE5WYm5OMFlYSjBaV1FzWEc0Z0lDZDNiM0pyWm14dmR5MXpkR0YwZFhNdGQyRnlibWx1WnljNklIZHZjbXRtYkc5M1UzUmhkSFZ6VjJGeWJtbHVaeXhjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1kyeGhjM051WVcxbGN5Qm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQnpkSGxzWlhNZ1puSnZiU0FuTGk5SlkyOXVMbU56Y3ljN1hHNXBiWEJ2Y25RZ2FXTnZibk1nWm5KdmJTQW5MaTlwWTI5dWN5OXBibVJsZUM1cWN5YzdYRzVwYlhCdmNuUWdZMjlzYjNKeklHWnliMjBnSnk0dlEyOXNiM0p6TG1OemN5YzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCaFkyTmxjM05wWW1sc2FYUjVUR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdZMjlzYjNJL09seHVJQ0FnSUh3Z0oySnNkV1VuWEc0Z0lDQWdmQ0FuWkdGeWEwZHlZWGtuWEc0Z0lDQWdmQ0FuWldkbmNHeGhiblFuWEc0Z0lDQWdmQ0FuWjNKaGVTZGNiaUFnSUNCOElDZG5jbVZsYmlkY2JpQWdJQ0I4SUNkc2FXZG9kRWR5WVhrblhHNGdJQ0FnZkNBbmJXRnliMjl1SjF4dUlDQWdJSHdnSjIxcFpHNXBaMmgwSjF4dUlDQWdJSHdnSjI1aGRua25YRzRnSUNBZ2ZDQW5iMnhwZG1VblhHNGdJQ0FnZkNBbmIzSmhibWRsSjF4dUlDQWdJSHdnSjI5eVkyaHBaQ2RjYmlBZ0lDQjhJQ2R3YVc1bEoxeHVJQ0FnSUh3Z0ozQjFjbkJzWlNkY2JpQWdJQ0I4SUNkeVpXUW5YRzRnSUNBZ2ZDQW5kMkYwWlhKdFpXeHZiaWRjYmlBZ0lDQjhJQ2QzYUdsMFpTY3NYRzRnSUdsamIyNC9PaUFrUzJWNWN6eDBlWEJsYjJZZ2FXTnZibk0rTEZ4dUlDQmtZVzVuWlhKdmRYTnNlVk5sZEZOMloxQmhkR2cvT2lCN0lGOWZjR0YwYURvZ2MzUnlhVzVuSUgwc1hHNGdJR2x1YkdsdVpUODZJR0p2YjJ4bFlXNHNYRzRnSUhOcGVtVS9PaUJ1ZFcxaVpYSWdmQ0J6ZEhKcGJtY3NYRzU4ZlR0Y2JseHVZMjl1YzNRZ1NXTnZiazVoYldWeklEMGdUMkpxWldOMExtdGxlWE1vYVdOdmJuTXBPMXh1WEc1amIyNXpkQ0JtYkdsd1QyNVNkR3hKWTI5dVRtRnRaWE1nUFNCYlhHNGdJQ2RoWkhNdGMzUmhkSE1uTEZ4dUlDQW5ZV1J6TFc5MlpYSjJhV1YzSnl4Y2JpQWdKMkZ5Y205M0xXSmhZMnNuTEZ4dUlDQW5ZWEp5YjNjdFkybHlZMnhsTFdadmNuZGhjbVFuTEZ4dUlDQW5ZWEp5YjNjdFpXNWtKeXhjYmlBZ0oyRnljbTkzTFdadmNuZGhjbVFuTEZ4dUlDQW5ZWEp5YjNjdGMzUmhjblFuTEZ4dUlDQW5ZWEp5YjNjdGRYQXRjbWxuYUhRbkxGeHVJQ0FuWTI5dGNHOXpaU2NzWEc0Z0lDZGthWEpsWTNScGIyNWhiQzFoY25KdmR5MXNaV1owSnl4Y2JpQWdKMlJwY21WamRHbHZibUZzTFdGeWNtOTNMWEpwWjJoMEp5eGNiaUFnSjJac2FYQldaWEowYVdOaGJDY3NYRzRnSUNkb1lXNWtMWEJ2YVc1MGFXNW5KeXhjYmlBZ0oyeHBibXNuTEZ4dUlDQW5jbVZ2Y21SbGNpMXBiV0ZuWlhNbkxGeHVJQ0FuYzJWdVpDY3NYRzRnSUNkemIzVnVaQ2NzWEc0Z0lDZHpjR1ZsWTJnbkxGeHVJQ0FuYzNCbFpXTm9MV1ZzYkdsd2MybHpKeXhjYmlBZ0ozTjNhWFJqYUMxaFkyTnZkVzUwSnl4Y2JpQWdKM1JsZUhRdGMybDZaU2NzWEc1ZE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQkpZMjl1S0hCeWIzQnpPaUJRY205d2N5a2dlMXh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNMRnh1SUNBZ0lHTnZiRzl5SUQwZ0oyZHlZWGtuTEZ4dUlDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFUzWm5VR0YwYUN4Y2JpQWdJQ0JwWTI5dUxGeHVJQ0FnSUdsdWJHbHVaU3hjYmlBZ0lDQnphWHBsSUQwZ01UWXNYRzRnSUgwZ1BTQndjbTl3Y3p0Y2JseHVJQ0JqYjI1emRDQmpjeUE5SUdOc1lYTnpibUZ0WlhNb1hHNGdJQ0FnWm14cGNFOXVVblJzU1dOdmJrNWhiV1Z6TG1sdVkyeDFaR1Z6S0dsamIyNHBJQ1ltSUhOMGVXeGxjeTV5ZEd4VGRYQndiM0owTEZ4dUlDQWdJSE4wZVd4bGN5NXBZMjl1TEZ4dUlDQWdJR052Ykc5eWMxdGpiMnh2Y2wwc1hHNGdJQ0FnZXlCYmMzUjViR1Z6TG1samIyNUNiRzlqYTEwNklDRnBibXhwYm1VZ2ZWeHVJQ0FwTzF4dVhHNGdJR052Ym5OMElIQmhkR2dnUFZ4dUlDQWdJQ2hwWTI5dUlDWW1JR2xqYjI1elcybGpiMjVkS1NCOGZGeHVJQ0FnSUM4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCdWJ5MTFibVJsY25OamIzSmxMV1JoYm1kc1pTQXFMMXh1SUNBZ0lDaGtZVzVuWlhKdmRYTnNlVk5sZEZOMloxQmhkR2dnSmlZZ1pHRnVaMlZ5YjNWemJIbFRaWFJUZG1kUVlYUm9MbDlmY0dGMGFDa2dmSHhjYmlBZ0lDQjFibVJsWm1sdVpXUTdYRzVjYmlBZ1kyOXVjM1FnWVhKcFlVaHBaR1JsYmlBOUlHRmpZMlZ6YzJsaWFXeHBkSGxNWVdKbGJDQTlQVDBnSnljZ1B5QjBjblZsSURvZ2JuVnNiRHRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4emRtZGNiaUFnSUNBZ0lHTnNZWE56VG1GdFpUMTdZM045WEc0Z0lDQWdJQ0JvWldsbmFIUTllM05wZW1WOVhHNGdJQ0FnSUNCM2FXUjBhRDE3YzJsNlpYMWNiaUFnSUNBZ0lIWnBaWGRDYjNnOVhDSXdJREFnTWpRZ01qUmNJbHh1SUNBZ0lDQWdZWEpwWVMxb2FXUmtaVzQ5ZTJGeWFXRklhV1JrWlc1OVhHNGdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdGhZMk5sYzNOcFltbHNhWFI1VEdGaVpXeDlYRzRnSUNBZ0lDQnliMnhsUFZ3aWFXMW5YQ0pjYmlBZ0lDQStYRzRnSUNBZ0lDQThjR0YwYUNCa1BYdHdZWFJvZlNBdlBseHVJQ0FnSUR3dmMzWm5QbHh1SUNBcE8xeHVmVnh1WEc1SlkyOXVMbWxqYjI1eklEMGdTV052Yms1aGJXVnpPMXh1WEc1SlkyOXVMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lHTnZiRzl5T2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvVzF4dUlDQWdJQ2RpYkhWbEp5eGNiaUFnSUNBblpHRnlhMGR5WVhrbkxGeHVJQ0FnSUNkbFoyZHdiR0Z1ZENjc1hHNGdJQ0FnSjJkeVlYa25MRnh1SUNBZ0lDZG5jbVZsYmljc1hHNGdJQ0FnSjJ4cFoyaDBSM0poZVNjc1hHNGdJQ0FnSjIxaGNtOXZiaWNzWEc0Z0lDQWdKMjFwWkc1cFoyaDBKeXhjYmlBZ0lDQW5ibUYyZVNjc1hHNGdJQ0FnSjI5c2FYWmxKeXhjYmlBZ0lDQW5iM0poYm1kbEp5eGNiaUFnSUNBbmIzSmphR2xrSnl4Y2JpQWdJQ0FuY0dsdVpTY3NYRzRnSUNBZ0ozQjFjbkJzWlNjc1hHNGdJQ0FnSjNKbFpDY3NYRzRnSUNBZ0ozZGhkR1Z5YldWc2IyNG5MRnh1SUNBZ0lDZDNhR2wwWlNjc1hHNGdJRjBwTEZ4dUlDQmtZVzVuWlhKdmRYTnNlVk5sZEZOMloxQmhkR2c2SUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdYMTl3WVhSb09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0I5S1N4Y2JpQWdhV052YmpvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0VsamIyNU9ZVzFsY3lrc1hHNGdJR2x1YkdsdVpUb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJSE5wZW1VNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMUJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtZGRLU3hjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHZRbTk0TG1wekp6dGNibWx0Y0c5eWRDQnpkSGxzWlhNZ1puSnZiU0FuTGk5SmJXRm5aUzVqYzNNbk8xeHVYRzVqYjI1emRDQnphRzkxYkdSVFkyRnNaVWx0WVdkbElEMGdabWwwSUQwK0lHWnBkQ0E5UFQwZ0oyTnZkbVZ5SnlCOGZDQm1hWFFnUFQwOUlDZGpiMjUwWVdsdUp6dGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdGc2REb2djM1J5YVc1bkxGeHVJQ0JqYUdsc1pISmxiajg2SUZKbFlXTjBMazV2WkdVc1hHNGdJR052Ykc5eU9pQnpkSEpwYm1jc1hHNGdJR1pwZERvZ0oyTnZiblJoYVc0bklId2dKMk52ZG1WeUp5QjhJQ2R1YjI1bEp5eGNiaUFnYVcxd2IzSjBZVzVqWlQ4NklDZG9hV2RvSnlCOElDZHNiM2NuSUh3Z0oyRjFkRzhuTEZ4dUlDQnNiMkZrYVc1blB6b2dKMlZoWjJWeUp5QjhJQ2RzWVhwNUp5QjhJQ2RoZFhSdkp5eGNiaUFnYm1GMGRYSmhiRWhsYVdkb2REb2diblZ0WW1WeUxGeHVJQ0J1WVhSMWNtRnNWMmxrZEdnNklHNTFiV0psY2l4Y2JpQWdiMjVGY25KdmNqODZJQ2dwSUQwK0lIWnZhV1FzWEc0Z0lHOXVURzloWkQ4NklDZ3BJRDArSUhadmFXUXNYRzRnSUhOcGVtVnpQem9nYzNSeWFXNW5MRnh1SUNCemNtTTZJSE4wY21sdVp5eGNiaUFnYzNKalUyVjBQem9nYzNSeWFXNW5MRnh1ZkgwN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUVsdFlXZGxJR1Y0ZEdWdVpITWdVbVZoWTNRdVVIVnlaVU52YlhCdmJtVnVkRHhRY205d2N6NGdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGc2REb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHTm9hV3hrY21WdU9pQlFjbTl3Vkhsd1pYTXVibTlrWlN4Y2JpQWdJQ0JqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCbWFYUTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJKMk52Ym5SaGFXNG5MQ0FuWTI5MlpYSW5MQ0FuYm05dVpTZGRLU3hjYmlBZ0lDQnBiWEJ2Y25SaGJtTmxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWRvYVdkb0p5d2dKMnh2ZHljc0lDZGhkWFJ2SjEwcExGeHVJQ0FnSUd4dllXUnBibWM2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiSjJWaFoyVnlKeXdnSjJ4aGVua25MQ0FuWVhWMGJ5ZGRLU3hjYmlBZ0lDQnVZWFIxY21Gc1NHVnBaMmgwT2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYm1GMGRYSmhiRmRwWkhSb09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2IyNUZjbkp2Y2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiMjVNYjJGa09pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J6YVhwbGN6b2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCemNtTTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnpjbU5UWlhRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklHUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdJQ0JqYjJ4dmNqb2dKM1J5WVc1emNHRnlaVzUwSnl4Y2JpQWdJQ0JtYVhRNklDZHViMjVsSnl4Y2JpQWdJQ0JwYlhCdmNuUmhibU5sT2lBbllYVjBieWNzWEc0Z0lDQWdiRzloWkdsdVp6b2dKMkYxZEc4bkxGeHVJQ0I5TzF4dVhHNGdJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBLQ2tnZTF4dUlDQWdJR2xtSUNoemFHOTFiR1JUWTJGc1pVbHRZV2RsS0hSb2FYTXVjSEp2Y0hNdVptbDBLU2tnZTF4dUlDQWdJQ0FnZEdocGN5NXNiMkZrU1cxaFoyVW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VvY0hKbGRsQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQWdJR052Ym5OMElIc2dabWwwTENCemNtTWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnYVdZZ0tITm9iM1ZzWkZOallXeGxTVzFoWjJVb1ptbDBLU0FtSmlCd2NtVjJVSEp2Y0hNdWMzSmpJQ0U5UFNCemNtTXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJHOWhaRWx0WVdkbEtDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdhR0Z1Wkd4bFRHOWhaQ0E5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXdjbTl3Y3k1dmJreHZZV1FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNU1iMkZrS0NrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlVWeWNtOXlJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliM0J6TG05dVJYSnliM0lwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEp2Y0hNdWIyNUZjbkp2Y2lncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQnNiMkZrU1cxaFoyVW9LU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCcGJXRm5aU0E5SUc1bGR5QjNhVzVrYjNjdVNXMWhaMlVvS1R0Y2JpQWdJQ0FnSUdsdFlXZGxMbTl1Ykc5aFpDQTlJSFJvYVhNdWFHRnVaR3hsVEc5aFpEdGNiaUFnSUNBZ0lHbHRZV2RsTG05dVpYSnliM0lnUFNCMGFHbHpMbWhoYm1Sc1pVVnljbTl5TzF4dUlDQWdJQ0FnYVcxaFoyVXVjM0pqSUQwZ2RHaHBjeTV3Y205d2N5NXpjbU03WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHRnNkQ3hjYmlBZ0lDQWdJR052Ykc5eUxGeHVJQ0FnSUNBZ1kyaHBiR1J5Wlc0c1hHNGdJQ0FnSUNCbWFYUXNYRzRnSUNBZ0lDQnBiWEJ2Y25SaGJtTmxMRnh1SUNBZ0lDQWdiRzloWkdsdVp5eGNiaUFnSUNBZ0lHNWhkSFZ5WVd4SVpXbG5hSFFzWEc0Z0lDQWdJQ0J1WVhSMWNtRnNWMmxrZEdnc1hHNGdJQ0FnSUNCemFYcGxjeXhjYmlBZ0lDQWdJSE55WXl4Y2JpQWdJQ0FnSUhOeVkxTmxkQ3hjYmlBZ0lDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdOdmJuTjBJR2x6VTJOaGJHVmtTVzFoWjJVZ1BTQnphRzkxYkdSVFkyRnNaVWx0WVdkbEtHWnBkQ2s3WEc0Z0lDQWdZMjl1YzNRZ1kyaHBiR1JEYjI1MFpXNTBJRDBnWTJocGJHUnlaVzRnUHlBb1hHNGdJQ0FnSUNBOFFtOTRJSEJ2YzJsMGFXOXVQVndpWVdKemIyeDFkR1ZjSWlCMGIzQWdiR1ZtZENCaWIzUjBiMjBnY21sbmFIUWdiM1psY21ac2IzYzlYQ0pvYVdSa1pXNWNJajVjYmlBZ0lDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0tTQTZJRzUxYkd3N1hHNWNiaUFnSUNCeVpYUjFjbTRnYVhOVFkyRnNaV1JKYldGblpTQS9JQ2hjYmlBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ1lYSnBZUzFzWVdKbGJEMTdZV3gwZlZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyWnBkQ0E5UFQwZ0oyTnZiblJoYVc0bklIeDhJR1pwZENBOVBUMGdKMk52ZG1WeUp5QS9JSE4wZVd4bGMxdG1hWFJkSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnYzNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNCaVlXTnJaM0p2ZFc1a1EyOXNiM0k2SUdOdmJHOXlMRnh1SUNBZ0lDQWdJQ0FnSUdKaFkydG5jbTkxYm1SSmJXRm5aVG9nWUhWeWJDZ25KSHR6Y21OOUp5bGdMRnh1SUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNCeWIyeGxQVndpYVcxblhDSmNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdlMk5vYVd4a1EyOXVkR1Z1ZEgxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2ljbVZzWVhScGRtVmNJbHh1SUNBZ0lDQWdJQ0JrWVc1blpYSnZkWE5zZVZObGRFbHViR2x1WlZOMGVXeGxQWHQ3WEc0Z0lDQWdJQ0FnSUNBZ1gxOXpkSGxzWlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GamEyZHliM1Z1WkVOdmJHOXlPaUJqYjJ4dmNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaFpHUnBibWRDYjNSMGIyMDZJR0FrZXlodVlYUjFjbUZzU0dWcFoyaDBJQzhnYm1GMGRYSmhiRmRwWkhSb0tTQXFJREV3TUgwbFlDeGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQThhVzFuWEc0Z0lDQWdJQ0FnSUNBZ1lXeDBQWHRoYkhSOVhHNGdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHR6ZEhsc1pYTXVhVzFuZlZ4dUlDQWdJQ0FnSUNBZ0lHbHRjRzl5ZEdGdVkyVTllMmx0Y0c5eWRHRnVZMlY5WEc0Z0lDQWdJQ0FnSUNBZ2JHOWhaR2x1WnoxN2JHOWhaR2x1WjMxY2JpQWdJQ0FnSUNBZ0lDQnZia1Z5Y205eVBYdDBhR2x6TG1oaGJtUnNaVVZ5Y205eWZWeHVJQ0FnSUNBZ0lDQWdJRzl1VEc5aFpEMTdkR2hwY3k1b1lXNWtiR1ZNYjJGa2ZWeHVJQ0FnSUNBZ0lDQWdJSE5wZW1WelBYdHphWHBsYzMxY2JpQWdJQ0FnSUNBZ0lDQnpjbU05ZTNOeVkzMWNiaUFnSUNBZ0lDQWdJQ0J6Y21OVFpYUTllM055WTFObGRIMWNiaUFnSUNBZ0lDQWdMejVjYmlBZ0lDQWdJQ0FnZTJOb2FXeGtRMjl1ZEdWdWRIMWNiaUFnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JqZUNCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlOWVhOckxtTnpjeWM3WEc1cGJYQnZjblFnWW05eVpHVnljeUJtY205dElDY3VMMEp2Y21SbGNuTXVZM056Snp0Y2JtbHRjRzl5ZENCN0lHWnliMjFEYkdGemMwNWhiV1VzSUdsa1pXNTBhWFI1TENCMGIxQnliM0J6TENCMGVYQmxJRk4wZVd4bElIMGdabkp2YlNBbkxpOXpkSGxzWlM1cWN5YzdYRzVwYlhCdmNuUWdleUJpYVc1a0xDQnlZVzVuWlNCOUlHWnliMjBnSnk0dmRISmhibk5tYjNKdGN5NXFjeWM3WEc1Y2JuUjVjR1VnVW05MWJtUnBibWNnUFNBd0lId2dNU0I4SURJZ2ZDQXpJSHdnTkNCOElEVWdmQ0EySUh3Z055QjhJRGdnZkNBblkybHlZMnhsSnp0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0OFhHNGdJR05vYVd4a2NtVnVQem9nVW1WaFkzUXVUbTlrWlN4Y2JpQWdhR1ZwWjJoMFB6b2diblZ0WW1WeUlId2djM1J5YVc1bkxGeHVJQ0J5YjNWdVpHbHVaejg2SUZKdmRXNWthVzVuTEZ4dUlDQjNhV1IwYUQ4NklHNTFiV0psY2lCOElITjBjbWx1Wnl4Y2JpQWdkMmxzYkVOb1lXNW5aVlJ5WVc1elptOXliVDg2SUdKdmIyeGxZVzRzWEc0Z0lIZGhjMmcvT2lCaWIyOXNaV0Z1TEZ4dWZIMDdYRzVjYm1OdmJuTjBJR2RsZEZKdmRXNWthVzVuVTNSNWJHVWdQU0FvY2pvZ1VtOTFibVJwYm1jcE9pQlRkSGxzWlNBOVBpQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2NpQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZbWx1WkNoeVlXNW5aU2duY205MWJtUnBibWNuS1N3Z1ltOXlaR1Z5Y3lrb2NpazdYRzRnSUgxY2JseHVJQ0JwWmlBb2NpQTlQVDBnSjJOcGNtTnNaU2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabkp2YlVOc1lYTnpUbUZ0WlNoaWIzSmtaWEp6TG1OcGNtTnNaU2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYVdSbGJuUnBkSGtvS1R0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRTFoYzJzb2NISnZjSE02SUZCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JqYUdsc1pISmxiaXhjYmlBZ0lDQnliM1Z1WkdsdVp5QTlJREFzWEc0Z0lDQWdkMmxrZEdnc1hHNGdJQ0FnYUdWcFoyaDBMRnh1SUNBZ0lIZHBiR3hEYUdGdVoyVlVjbUZ1YzJadmNtMGdQU0IwY25WbExGeHVJQ0FnSUhkaGMyZ2dQU0JtWVd4elpTeGNiaUFnZlNBOUlIQnliM0J6TzF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lHTnNZWE56VG1GdFpUMTdZM2dvWEc0Z0lDQWdJQ0FnSUhOMGVXeGxjeTVOWVhOckxGeHVJQ0FnSUNBZ0lDQjBiMUJ5YjNCektHZGxkRkp2ZFc1a2FXNW5VM1I1YkdVb2NtOTFibVJwYm1jcEtTNWpiR0Z6YzA1aGJXVXNYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNCYmMzUjViR1Z6TG5kcGJHeERhR0Z1WjJWVWNtRnVjMlp2Y20xZE9pQjNhV3hzUTJoaGJtZGxWSEpoYm5ObWIzSnRMRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnYzNSNWJHVTllM3NnZDJsa2RHZ3NJR2hsYVdkb2RDQjlmVnh1SUNBZ0lENWNiaUFnSUNBZ0lIdGphR2xzWkhKbGJuMWNiaUFnSUNBZ0lIdDNZWE5vSUNZbUlEeGthWFlnWTJ4aGMzTk9ZVzFsUFh0emRIbHNaWE11ZDJGemFIMGdMejU5WEc0Z0lDQWdQQzlrYVhZK1hHNGdJQ2s3WEc1OVhHNWNibU52Ym5OMElGSnZkVzVrYVc1blVISnZjRlI1Y0dVZ1BTQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d6QXNJREVzSURJc0lETXNJRFFzSURVc0lEWXNJRGNzSURnc0lDZGphWEpqYkdVblhTazdYRzVjYmsxaGMyc3VjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVc1hHNGdJR2hsYVdkb2REb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXdnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaMTBwTEZ4dUlDQnliM1Z1WkdsdVp6b2dVbTkxYm1ScGJtZFFjbTl3Vkhsd1pTeGNiaUFnZDJsa2RHZzZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFpsUjVjR1VvVzFCeWIzQlVlWEJsY3k1dWRXMWlaWElzSUZCeWIzQlVlWEJsY3k1emRISnBibWRkS1N4Y2JpQWdkMmxzYkVOb1lXNW5aVlJ5WVc1elptOXliVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUhkaGMyZzZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVmVHRjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUVsamIyNGdabkp2YlNBbkxpOUpZMjl1TG1wekp6dGNibWx0Y0c5eWRDQkpiV0ZuWlNCbWNtOXRJQ2N1TDBsdFlXZGxMbXB6Snp0Y2JtbHRjRzl5ZENCTllYTnJJR1p5YjIwZ0p5NHZUV0Z6YXk1cWN5YzdYRzVwYlhCdmNuUWdVR1Z5YzI5dVUzWm5JR1p5YjIwZ0p5NHZhV052Ym5NdmNHVnljMjl1TG5OMlp5YzdYRzVwYlhCdmNuUWdkSGx3YjJkeVlYQm9lU0JtY205dElDY3VMMVI1Y0c5bmNtRndhSGt1WTNOekp6dGNibHh1WTI5dWMzUWdVM0YxWVhKbElEMGdLSEJ5YjNCek9pQXFLU0E5UGlBb1hHNGdJRHhDYjNnZ2V5NHVMbkJ5YjNCemZTQndiM05wZEdsdmJqMWNJbkpsYkdGMGFYWmxYQ0krWEc0Z0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibXhwYm1WVGRIbHNaVDE3ZXlCZlgzTjBlV3hsT2lCN0lIQmhaR1JwYm1kQ2IzUjBiMjA2SUNjeE1EQWxKeUI5SUgxOVhHNGdJQ0FnSUNCd2IzTnBkR2x2YmoxY0luSmxiR0YwYVhabFhDSmNiaUFnSUNBdlBseHVJQ0FnSUR4Q2IzZ2djRzl6YVhScGIyNDlYQ0poWW5OdmJIVjBaVndpSUhSdmNDQnNaV1owSUdKdmRIUnZiU0J5YVdkb2RENWNiaUFnSUNBZ0lIdHdjbTl3Y3k1amFHbHNaSEpsYm4xY2JpQWdJQ0E4TDBKdmVENWNiaUFnUEM5Q2IzZytYRzRwTzF4dVhHNWpiMjV6ZENCRVpXWmhkV3gwUVhaaGRHRnlJRDBnS0h0Y2JpQWdibUZ0WlN4Y2JpQWdkWE5sUkdWbVlYVnNkRWxqYjI0c1hHNTlPaUI3ZkZ4dUlDQnVZVzFsT2lCemRISnBibWNzWEc0Z0lIVnpaVVJsWm1GMWJIUkpZMjl1T2lCaWIyOXNaV0Z1TEZ4dWZIMHBJRDArSUh0Y2JpQWdZMjl1YzNRZ1ptbHljM1JKYm1sMGFXRnNJRDBnYm1GdFpTQS9JRnN1TGk1dVlXMWxYVnN3WFM1MGIxVndjR1Z5UTJGelpTZ3BJRG9nSnljN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BGTnhkV0Z5WlNCamIyeHZjajFjSW14cFoyaDBSM0poZVZ3aUlISnZkVzVrYVc1blBWd2lZMmx5WTJ4bFhDSWdiM1psY21ac2IzYzlYQ0pvYVdSa1pXNWNJajVjYmlBZ0lDQWdJSHQxYzJWRVpXWmhkV3gwU1dOdmJpQjhmQ0FoWm1seWMzUkpibWwwYVdGc0lEOGdLRnh1SUNBZ0lDQWdJQ0E4YzNablhHNGdJQ0FnSUNBZ0lDQWdjSEpsYzJWeWRtVkJjM0JsWTNSU1lYUnBiejFjSW5oTmFXUlpUV2xrSUcxbFpYUmNJbHh1SUNBZ0lDQWdJQ0FnSUhKdmJHVTlYQ0pwYldkY0lseHVJQ0FnSUNBZ0lDQWdJSFpsY25OcGIyNDlYQ0l4TGpGY0lseHVJQ0FnSUNBZ0lDQWdJSFpwWlhkQ2IzZzlYQ0l0TXlBdE9DQXpNQ0F4TURCY0lseHVJQ0FnSUNBZ0lDQWdJSGh0Ykc1elBWd2lhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtZGNJbHh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ2UyNWhiV1VnSmlZZ1BIUnBkR3hsUG50dVlXMWxmVHd2ZEdsMGJHVStmVnh1SUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5ZTFCbGNuTnZibE4yWjMwZ1ptbHNiRDFjSWlNeE1URmNJaUF2UGx4dUlDQWdJQ0FnSUNBOEwzTjJaejVjYmlBZ0lDQWdJQ2tnT2lBb1hHNGdJQ0FnSUNBZ0lEeHpkbWRjYmlBZ0lDQWdJQ0FnSUNCM2FXUjBhRDFjSWpFd01DVmNJbHh1SUNBZ0lDQWdJQ0FnSUhacFpYZENiM2c5WENJdE5UQWdMVFV3SURFd01DQXhNREJjSWx4dUlDQWdJQ0FnSUNBZ0lIWmxjbk5wYjI0OVhDSXhMakZjSWx4dUlDQWdJQ0FnSUNBZ0lIQnlaWE5sY25abFFYTndaV04wVW1GMGFXODlYQ0o0VFdsa1dVMXBaQ0J0WldWMFhDSmNiaUFnSUNBZ0lDQWdJQ0I0Yld4dWN6MWNJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5YQ0pjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lEeDBhWFJzWlQ1N2JtRnRaWDA4TDNScGRHeGxQbHh1SUNBZ0lDQWdJQ0FnSUR4MFpYaDBYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIyNTBVMmw2WlQxY0lqUXdjSGhjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzYkQxY0lpTXhNVEZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdaSGs5WENJd0xqTTFaVzFjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZEVGdVkyaHZjajFjSW0xcFpHUnNaVndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMXRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3YjJkeVlYQm9lUzVoYm5ScFlXeHBZWE5sWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd2IyZHlZWEJvZVM1ellXNXpVMlZ5YVdZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHOW5jbUZ3YUhrdVptOXVkRmRsYVdkb2RFSnZiR1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmRMbXB2YVc0b0p5QW5LWDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3Wm1seWMzUkpibWwwYVdGc2ZWeHVJQ0FnSUNBZ0lDQWdJRHd2ZEdWNGRENWNiaUFnSUNBZ0lDQWdQQzl6ZG1jK1hHNGdJQ0FnSUNBcGZWeHVJQ0FnSUR3dlUzRjFZWEpsUGx4dUlDQXBPMXh1ZlR0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0OFhHNGdJRzVoYldVNklITjBjbWx1Wnl4Y2JpQWdiM1YwYkdsdVpUODZJR0p2YjJ4bFlXNHNYRzRnSUhOcGVtVS9PaUFuZUhNbklId2dKM050SnlCOElDZHRaQ2NnZkNBbmJHY25JSHdnSjNoc0p5QjhJQ2RtYVhRbkxGeHVJQ0J6Y21NL09pQnpkSEpwYm1jc1hHNGdJSFpsY21sbWFXVmtQem9nWW05dmJHVmhiaXhjYmlBZ1gxOWtZVzVuWlhKdmRYTnNlVlZ6WlVSbFptRjFiSFJKWTI5dVB6b2dZbTl2YkdWaGJpeGNibng5TzF4dVhHNWpiMjV6ZENCemFYcGxjeUE5SUh0Y2JpQWdlSE02SURJMExGeHVJQ0J6YlRvZ016SXNYRzRnSUcxa09pQTBPQ3hjYmlBZ2JHYzZJRFkwTEZ4dUlDQjRiRG9nTVRJd0xGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnUVhaaGRHRnlLSEJ5YjNCek9pQlFjbTl3Y3lrZ2UxeHVJQ0JqYjI1emRDQmJhWE5KYldGblpVeHZZV1JsWkN3Z2MyVjBTWE5KYldGblpVeHZZV1JsWkYwZ1BTQlNaV0ZqZEM1MWMyVlRkR0YwWlNoMGNuVmxLVHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJRzVoYldVc1hHNGdJQ0FnYjNWMGJHbHVaU3hjYmlBZ0lDQnphWHBsSUQwZ0oyWnBkQ2NzWEc0Z0lDQWdjM0pqTEZ4dUlDQWdJSFpsY21sbWFXVmtMRnh1SUNBZ0lGOWZaR0Z1WjJWeWIzVnpiSGxWYzJWRVpXWmhkV3gwU1dOdmJqb2dkWE5sUkdWbVlYVnNkRWxqYjI0Z1BTQm1ZV3h6WlN4Y2JpQWdmU0E5SUhCeWIzQnpPMXh1SUNCamIyNXpkQ0IzYVdSMGFDQTlJSE5wZW1VZ1BUMDlJQ2RtYVhRbklEOGdKekV3TUNVbklEb2djMmw2WlhOYmMybDZaVjA3WEc0Z0lHTnZibk4wSUdobGFXZG9kQ0E5SUhOcGVtVWdQVDA5SUNkbWFYUW5JRDhnSnljZ09pQnphWHBsYzF0emFYcGxYVHRjYmx4dUlDQmpiMjV6ZENCb1lXNWtiR1ZKYldGblpVVnljbTl5SUQwZ0tDa2dQVDRnYzJWMFNYTkpiV0ZuWlV4dllXUmxaQ2htWVd4elpTazdYRzVjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UW05NFhHNGdJQ0FnSUNCamIyeHZjajFjSW5kb2FYUmxYQ0pjYmlBZ0lDQWdJSHN1TGk0b2IzVjBiR2x1WlZ4dUlDQWdJQ0FnSUNBL0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGJtZGxjbTkxYzJ4NVUyVjBTVzVzYVc1bFUzUjViR1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDE5emRIbHNaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKdmVGTm9ZV1J2ZHpvZ0p6QWdNQ0F3SURGd2VDQWpabVptSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQTZJSHQ5S1gxY2JpQWdJQ0FnSUhkcFpIUm9QWHQzYVdSMGFIMWNiaUFnSUNBZ0lHaGxhV2RvZEQxN2FHVnBaMmgwZlZ4dUlDQWdJQ0FnY0c5emFYUnBiMjQ5WENKeVpXeGhkR2wyWlZ3aVhHNGdJQ0FnSUNCeWIzVnVaR2x1WnoxY0ltTnBjbU5zWlZ3aVhHNGdJQ0FnUGx4dUlDQWdJQ0FnZTNOeVl5QW1KaUJwYzBsdFlXZGxURzloWkdWa0lEOGdLRnh1SUNBZ0lDQWdJQ0E4VFdGemF5QnliM1Z1WkdsdVp6MWNJbU5wY21Oc1pWd2lJSGRoYzJnK1hHNGdJQ0FnSUNBZ0lDQWdQRWx0WVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0JoYkhROWUyNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0lpTkZSa1ZHUlVaY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GMGRYSmhiRWhsYVdkb2REMTdNWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhkSFZ5WVd4WGFXUjBhRDE3TVgxY2JpQWdJQ0FnSUNBZ0lDQWdJSE55WXoxN2MzSmpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNUZjbkp2Y2oxN2FHRnVaR3hsU1cxaFoyVkZjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0E4TDAxaGMycytYRzRnSUNBZ0lDQXBJRG9nS0Z4dUlDQWdJQ0FnSUNBOFJHVm1ZWFZzZEVGMllYUmhjaUJ1WVcxbFBYdHVZVzFsZlNCMWMyVkVaV1poZFd4MFNXTnZiajE3ZFhObFJHVm1ZWFZzZEVsamIyNTlJQzgrWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnZTNabGNtbG1hV1ZrSUNZbUlDaGNiaUFnSUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lZV0p6YjJ4MWRHVmNJbHh1SUNBZ0lDQWdJQ0FnSUhkcFpIUm9QVndpTWpVbFhDSmNiaUFnSUNBZ0lDQWdJQ0JvWldsbmFIUTlYQ0l5TlNWY0lseHVJQ0FnSUNBZ0lDQWdJRzFwYmxkcFpIUm9QWHN4TW4xY2JpQWdJQ0FnSUNBZ0lDQnRhVzVJWldsbmFIUTllekV5ZlZ4dUlDQWdJQ0FnSUNBZ0lHUmhibWRsY205MWMyeDVVMlYwU1c1c2FXNWxVM1I1YkdVOWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5ZmMzUjViR1U2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05MGRHOXRPaUFuTkNVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWFXZG9kRG9nSnpRbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lEeENiM2dnWTI5c2IzSTlYQ0ozYUdsMFpWd2lJSGRwWkhSb1BWd2lNVEF3SlZ3aUlHaGxhV2RvZEQxY0lqRXdNQ1ZjSWlCeWIzVnVaR2x1WnoxY0ltTnBjbU5zWlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVsamIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5WENKeVpXUmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1UFZ3aVkyaGxZMnN0WTJseVkyeGxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNQVndpWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJsNlpUMWNJakV3TUNWY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJRHd2UW05NFBseHVJQ0FwTzF4dWZWeHVYRzVCZG1GMFlYSXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJRzkxZEd4cGJtVTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0J6Y21NNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJSE5wZW1VNklGQnliM0JVZVhCbGN5NXZibVZQWmloYkozaHpKeXdnSjNOdEp5d2dKMjFrSnl3Z0oyeG5KeXdnSjNoc0p5d2dKMlpwZENkZEtTeGNiaUFnZG1WeWFXWnBaV1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1ZlR0Y2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCQmRtRjBZWElnWm5KdmJTQW5MaTlCZG1GMFlYSXVhbk1uTzF4dWFXMXdiM0owSUVKdmVDQm1jbTl0SUNjdUwwSnZlQzVxY3ljN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JqYjJ4c1lXSnZjbUYwYjNKek9pQkJjbkpoZVR4N2ZGeHVJQ0FnSUc1aGJXVTZJSE4wY21sdVp5eGNiaUFnSUNCemNtTS9PaUJ6ZEhKcGJtY3NYRzRnSUh4OVBpeGNiaUFnYzJsNlpUODZJQ2R0WkNjZ2ZDQW5iR2NuSUh3Z0oyWnBkQ2NzWEc1OGZUdGNibHh1WTI5dWMzUWdjMmw2WlhNZ1BTQjdYRzRnSUcxa09pQTBPQ3hjYmlBZ2JHYzZJRFkwTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdRWFpoZEdGeVVHRnBjaWg3SUdOdmJHeGhZbTl5WVhSdmNuTXNJSE5wZW1VZ1BTQW5abWwwSnlCOU9pQlFjbTl3Y3lrZ2UxeHVJQ0JqYjI1emRDQjNhV1IwYUNBOUlITnBlbVVnUFQwOUlDZG1hWFFuSUQ4Z0p6RXdNQ1VuSURvZ2MybDZaWE5iYzJsNlpWMDdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRUp2ZUNCd2IzTnBkR2x2YmoxY0luSmxiR0YwYVhabFhDSWdkMmxrZEdnOWUzZHBaSFJvZlQ1Y2JpQWdJQ0FnSUR4Q2IzZ2daR0Z1WjJWeWIzVnpiSGxUWlhSSmJteHBibVZUZEhsc1pUMTdleUJmWDNOMGVXeGxPaUI3SUhCaFpHUnBibWRDYjNSMGIyMDZJQ2N4TURBbEp5QjlJSDE5SUM4K1hHNGdJQ0FnSUNCN0tHTnZiR3hoWW05eVlYUnZjbk1nZkh3Z1cxMHBMbk5zYVdObEtEQXNJRElwTG0xaGNDZ29leUJ1WVcxbExDQnpjbU1nZlN3Z2FXNWtaWGdwSUQwK0lDaGNiaUFnSUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNBZ0lHdGxlVDE3WUNSN2JtRnRaWDB0Skh0cGJtUmxlSDFnZlZ4dUlDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lZV0p6YjJ4MWRHVmNJbHh1SUNBZ0lDQWdJQ0FnSUdobGFXZG9kRDFjSWpjMUpWd2lYRzRnSUNBZ0lDQWdJQ0FnZDJsa2RHZzlYQ0kzTlNWY0lseHVJQ0FnSUNBZ0lDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFNXNXNhVzVsVTNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lGOWZjM1I1YkdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nYVc1a1pYZ2dQVDA5SURBZ1B5QXdJRG9nSnpJMUpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjRG9nYVc1a1pYZ2dQVDA5SURBZ1B5QXdJRG9nSnpJMUpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQThRWFpoZEdGeUlITnlZejE3YzNKamZTQnVZVzFsUFh0dVlXMWxmU0J2ZFhSc2FXNWxJQzgrWEc0Z0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdLU2w5WEc0Z0lDQWdQQzlDYjNnK1hHNGdJQ2s3WEc1OVhHNWNia0YyWVhSaGNsQmhhWEl1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0JqYjJ4c1lXSnZjbUYwYjNKek9pQlFjbTl3Vkhsd1pYTXVZWEp5WVhsUFppaGNiaUFnSUNCUWNtOXdWSGx3WlhNdVpYaGhZM1FvZTF4dUlDQWdJQ0FnYm1GdFpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lDQWdjM0pqT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSDBwWEc0Z0lDa3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ2MybDZaVG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuYldRbkxDQW5iR2NuTENBblptbDBKMTBwTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmplQ0JtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0J6ZEhsc1pYTWdabkp2YlNBbkxpOUNZV1JuWlM1amMzTW5PMXh1YVcxd2IzSjBJR052Ykc5eWN5Qm1jbTl0SUNjdUwwTnZiRzl5Y3k1amMzTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ2NHOXphWFJwYjI0L09pQW5iV2xrWkd4bEp5QjhJQ2QwYjNBbkxGeHVJQ0IwWlhoME9pQnpkSEpwYm1jc1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnUW1Ga1oyVW9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJR052Ym5OMElIc2djRzl6YVhScGIyNGdQU0FuYldsa1pHeGxKeXdnZEdWNGRDQjlJRDBnY0hKdmNITTdYRzVjYmlBZ1kyOXVjM1FnWTNNZ1BTQmplQ2h6ZEhsc1pYTXVRbUZrWjJVc0lITjBlV3hsYzF0d2IzTnBkR2x2Ymwwc0lHTnZiRzl5Y3k1aWJIVmxRbWNwTzF4dVhHNGdJSEpsZEhWeWJpQThjM0JoYmlCamJHRnpjMDVoYldVOWUyTnpmVDU3ZEdWNGRIMDhMM053WVc0K08xeHVmVnh1WEc1Q1lXUm5aUzV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSEJ2YzJsMGFXOXVPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWR0YVdSa2JHVW5MQ0FuZEc5d0oxMHBMRnh1SUNCMFpYaDBPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc1OU8xeHVJaXdpTHk4Z1FHWnNiM2NnYzNSeWFXTjBYRzVjYm1sdGNHOXlkQ0FxSUdGeklGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdZM2dnWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnWTI5c2IzSnpJR1p5YjIwZ0p5NHZRMjlzYjNKekxtTnpjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZWR1Y0ZEM1amMzTW5PMXh1YVcxd2IzSjBJSFI1Y0c5bmNtRndhSGtnWm5KdmJTQW5MaTlVZVhCdlozSmhjR2g1TG1OemN5YzdYRzVjYm1OdmJuTjBJRk5KV2tWZlUwTkJURVU2SUhzZ1czTnBlbVU2SUQ5emRISnBibWRkT2lCdWRXMWlaWElnZlNBOUlIdGNiaUFnYzIwNklERXNYRzRnSUcxa09pQXlMRnh1SUNCc1p6b2dNeXhjYm4wN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JoYkdsbmJqODZJQ2RzWldaMEp5QjhJQ2R5YVdkb2RDY2dmQ0FuWTJWdWRHVnlKeUI4SUNkcWRYTjBhV1o1Snl4Y2JpQWdZMmhwYkdSeVpXNC9PaUJTWldGamRDNU9iMlJsTEZ4dUlDQmpiMnh2Y2o4NlhHNGdJQ0FnZkNBblozSmxaVzRuWEc0Z0lDQWdmQ0FuY0dsdVpTZGNiaUFnSUNCOElDZHZiR2wyWlNkY2JpQWdJQ0I4SUNkaWJIVmxKMXh1SUNBZ0lId2dKMjVoZG5rblhHNGdJQ0FnZkNBbmJXbGtibWxuYUhRblhHNGdJQ0FnZkNBbmNIVnljR3hsSjF4dUlDQWdJSHdnSjI5eVkyaHBaQ2RjYmlBZ0lDQjhJQ2RsWjJkd2JHRnVkQ2RjYmlBZ0lDQjhJQ2R0WVhKdmIyNG5YRzRnSUNBZ2ZDQW5kMkYwWlhKdFpXeHZiaWRjYmlBZ0lDQjhJQ2R2Y21GdVoyVW5YRzRnSUNBZ2ZDQW5aR0Z5YTBkeVlYa25YRzRnSUNBZ2ZDQW5aM0poZVNkY2JpQWdJQ0I4SUNkc2FXZG9kRWR5WVhrblhHNGdJQ0FnZkNBbmNtVmtKMXh1SUNBZ0lId2dKM2RvYVhSbEp5eGNiaUFnYVc1c2FXNWxQem9nWW05dmJHVmhiaXhjYmlBZ2FYUmhiR2xqUHpvZ1ltOXZiR1ZoYml4Y2JpQWdiM1psY21ac2IzYy9PaUFuYm05eWJXRnNKeUI4SUNkaWNtVmhhMWR2Y21RbkxGeHVJQ0J6YVhwbFB6b2dKM050SnlCOElDZHRaQ2NnZkNBbmJHY25MRnh1SUNCMGNuVnVZMkYwWlQ4NklHSnZiMnhsWVc0c1hHNGdJSGRsYVdkb2REODZJQ2RpYjJ4a0p5QjhJQ2R1YjNKdFlXd25MRnh1ZkgwN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlGUmxlSFFvZTF4dUlDQmhiR2xuYmlBOUlDZHNaV1owSnl4Y2JpQWdZMmhwYkdSeVpXNHNYRzRnSUdOdmJHOXlJRDBnSjJSaGNtdEhjbUY1Snl4Y2JpQWdhVzVzYVc1bElEMGdabUZzYzJVc1hHNGdJR2wwWVd4cFl5QTlJR1poYkhObExGeHVJQ0J2ZG1WeVpteHZkeUE5SUNkaWNtVmhhMWR2Y21RbkxGeHVJQ0J6YVhwbElEMGdKMnhuSnl4Y2JpQWdkSEoxYm1OaGRHVWdQU0JtWVd4elpTeGNiaUFnZDJWcFoyaDBJRDBnSjI1dmNtMWhiQ2NzWEc1OU9pQlFjbTl3Y3lrZ2UxeHVJQ0JqYjI1emRDQnpZMkZzWlNBOUlGTkpXa1ZmVTBOQlRFVmJjMmw2WlYwN1hHNWNiaUFnWTI5dWMzUWdZM01nUFNCamVDaGNiaUFnSUNCemRIbHNaWE11VkdWNGRDeGNiaUFnSUNCemRIbHNaWE5iWUdadmJuUlRhWHBsSkh0elkyRnNaWDFnWFN4Y2JpQWdJQ0JqYjJ4dmNpQTlQVDBnSjJKc2RXVW5JQ1ltSUdOdmJHOXljeTVpYkhWbExGeHVJQ0FnSUdOdmJHOXlJRDA5UFNBblpHRnlhMGR5WVhrbklDWW1JR052Ykc5eWN5NWtZWEpyUjNKaGVTeGNiaUFnSUNCamIyeHZjaUE5UFQwZ0oyVm5aM0JzWVc1MEp5QW1KaUJqYjJ4dmNuTXVaV2RuY0d4aGJuUXNYRzRnSUNBZ1kyOXNiM0lnUFQwOUlDZG5jbUY1SnlBbUppQmpiMnh2Y25NdVozSmhlU3hjYmlBZ0lDQmpiMnh2Y2lBOVBUMGdKMmR5WldWdUp5QW1KaUJqYjJ4dmNuTXVaM0psWlc0c1hHNGdJQ0FnWTI5c2IzSWdQVDA5SUNkc2FXZG9kRWR5WVhrbklDWW1JR052Ykc5eWN5NXNhV2RvZEVkeVlYa3NYRzRnSUNBZ1kyOXNiM0lnUFQwOUlDZHRZWEp2YjI0bklDWW1JR052Ykc5eWN5NXRZWEp2YjI0c1hHNGdJQ0FnWTI5c2IzSWdQVDA5SUNkdGFXUnVhV2RvZENjZ0ppWWdZMjlzYjNKekxtMXBaRzVwWjJoMExGeHVJQ0FnSUdOdmJHOXlJRDA5UFNBbmJtRjJlU2NnSmlZZ1kyOXNiM0p6TG01aGRua3NYRzRnSUNBZ1kyOXNiM0lnUFQwOUlDZHZiR2wyWlNjZ0ppWWdZMjlzYjNKekxtOXNhWFpsTEZ4dUlDQWdJR052Ykc5eUlEMDlQU0FuYjNKaGJtZGxKeUFtSmlCamIyeHZjbk11YjNKaGJtZGxMRnh1SUNBZ0lHTnZiRzl5SUQwOVBTQW5iM0pqYUdsa0p5QW1KaUJqYjJ4dmNuTXViM0pqYUdsa0xGeHVJQ0FnSUdOdmJHOXlJRDA5UFNBbmNHbHVaU2NnSmlZZ1kyOXNiM0p6TG5CcGJtVXNYRzRnSUNBZ1kyOXNiM0lnUFQwOUlDZHdkWEp3YkdVbklDWW1JR052Ykc5eWN5NXdkWEp3YkdVc1hHNGdJQ0FnWTI5c2IzSWdQVDA5SUNkeVpXUW5JQ1ltSUdOdmJHOXljeTV5WldRc1hHNGdJQ0FnWTI5c2IzSWdQVDA5SUNkM1lYUmxjbTFsYkc5dUp5QW1KaUJqYjJ4dmNuTXVkMkYwWlhKdFpXeHZiaXhjYmlBZ0lDQmpiMnh2Y2lBOVBUMGdKM2RvYVhSbEp5QW1KaUJqYjJ4dmNuTXVkMmhwZEdVc1hHNGdJQ0FnWVd4cFoyNGdQVDA5SUNkalpXNTBaWEluSUNZbUlIUjVjRzluY21Gd2FIa3VZV3hwWjI1RFpXNTBaWElzWEc0Z0lDQWdZV3hwWjI0Z1BUMDlJQ2RxZFhOMGFXWjVKeUFtSmlCMGVYQnZaM0poY0doNUxtRnNhV2R1U25WemRHbG1lU3hjYmlBZ0lDQmhiR2xuYmlBOVBUMGdKMnhsWm5RbklDWW1JSFI1Y0c5bmNtRndhSGt1WVd4cFoyNU1aV1owTEZ4dUlDQWdJR0ZzYVdkdUlEMDlQU0FuY21sbmFIUW5JQ1ltSUhSNWNHOW5jbUZ3YUhrdVlXeHBaMjVTYVdkb2RDeGNiaUFnSUNCdmRtVnlabXh2ZHlBOVBUMGdKMkp5WldGclYyOXlaQ2NnSmlZZ2RIbHdiMmR5WVhCb2VTNWljbVZoYTFkdmNtUXNYRzRnSUNBZ2FYUmhiR2xqSUNZbUlIUjVjRzluY21Gd2FIa3VabTl1ZEZOMGVXeGxTWFJoYkdsakxGeHVJQ0FnSUhkbGFXZG9kQ0E5UFQwZ0oySnZiR1FuSUNZbUlIUjVjRzluY21Gd2FIa3VabTl1ZEZkbGFXZG9kRUp2YkdRc1hHNGdJQ0FnZDJWcFoyaDBJRDA5UFNBbmJtOXliV0ZzSnlBbUppQjBlWEJ2WjNKaGNHaDVMbVp2Ym5SWFpXbG5hSFJPYjNKdFlXd3NYRzRnSUNBZ2RISjFibU5oZEdVZ0ppWWdkSGx3YjJkeVlYQm9lUzUwY25WdVkyRjBaVnh1SUNBcE8xeHVJQ0JqYjI1emRDQlVZV2NnUFNCcGJteHBibVVnUHlBbmMzQmhiaWNnT2lBblpHbDJKenRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4VVlXZGNiaUFnSUNBZ0lHTnNZWE56VG1GdFpUMTdZM045WEc0Z0lDQWdJQ0I3TGk0dUtIUnlkVzVqWVhSbElDWW1JSFI1Y0dWdlppQmphR2xzWkhKbGJpQTlQVDBnSjNOMGNtbHVaeWRjYmlBZ0lDQWdJQ0FnUHlCN0lIUnBkR3hsT2lCamFHbHNaSEpsYmlCOVhHNGdJQ0FnSUNBZ0lEb2diblZzYkNsOVhHNGdJQ0FnUGx4dUlDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJRHd2VkdGblBseHVJQ0FwTzF4dWZWeHVYRzVVWlhoMExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1lXeHBaMjQ2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiSjJ4bFpuUW5MQ0FuY21sbmFIUW5MQ0FuWTJWdWRHVnlKeXdnSjJwMWMzUnBabmtuWFNrc1hHNGdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnWTI5c2IzSTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJYRzRnSUNBZ0oyZHlaV1Z1Snl4Y2JpQWdJQ0FuY0dsdVpTY3NYRzRnSUNBZ0oyOXNhWFpsSnl4Y2JpQWdJQ0FuWW14MVpTY3NYRzRnSUNBZ0oyNWhkbmtuTEZ4dUlDQWdJQ2R0YVdSdWFXZG9kQ2NzWEc0Z0lDQWdKM0IxY25Cc1pTY3NYRzRnSUNBZ0oyOXlZMmhwWkNjc1hHNGdJQ0FnSjJWblozQnNZVzUwSnl4Y2JpQWdJQ0FuYldGeWIyOXVKeXhjYmlBZ0lDQW5kMkYwWlhKdFpXeHZiaWNzWEc0Z0lDQWdKMjl5WVc1blpTY3NYRzRnSUNBZ0oyUmhjbXRIY21GNUp5eGNiaUFnSUNBblozSmhlU2NzWEc0Z0lDQWdKMnhwWjJoMFIzSmhlU2NzWEc0Z0lDQWdKM0psWkNjc1hHNGdJQ0FnSjNkb2FYUmxKeXhjYmlBZ1hTa3NYRzRnSUdsdWJHbHVaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUdsMFlXeHBZem9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUc5MlpYSm1iRzkzT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3lkdWIzSnRZV3duTENBblluSmxZV3RYYjNKa0oxMHBMRnh1SUNCemFYcGxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWR6YlNjc0lDZHRaQ2NzSUNkc1p5ZGRLU3hjYmlBZ2RISjFibU5oZEdVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQjNaV2xuYUhRNklGQnliM0JVZVhCbGN5NXZibVZQWmloYkoySnZiR1FuTENBbmJtOXliV0ZzSjEwcExGeHVmVHRjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dVhHNXBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TDBKdmVDNXFjeWM3WEc1cGJYQnZjblFnU1dOdmJpQm1jbTl0SUNjdUwwbGpiMjR1YW5Nbk8xeHVhVzF3YjNKMElHbGpiMjV6SUdaeWIyMGdKeTR2YVdOdmJuTXZhVzVrWlhndWFuTW5PMXh1YVcxd2IzSjBJSE4wZVd4bGN5Qm1jbTl0SUNjdUwwSjFkSFJ2Ymk1amMzTW5PMXh1YVcxd2IzSjBJRlJsZUhRZ1puSnZiU0FuTGk5VVpYaDBMbXB6Snp0Y2JseHVZMjl1YzNRZ1JFVkdRVlZNVkY5VVJWaFVYME5QVEU5U1V5QTlJSHRjYmlBZ1lteDFaVG9nSjNkb2FYUmxKeXhjYmlBZ1ozSmhlVG9nSjJSaGNtdEhjbUY1Snl4Y2JpQWdjbVZrT2lBbmQyaHBkR1VuTEZ4dUlDQjBjbUZ1YzNCaGNtVnVkRG9nSjNkb2FYUmxKeXhjYmlBZ2QyaHBkR1U2SUNka1lYSnJSM0poZVNjc1hHNTlPMXh1WEc1amIyNXpkQ0JUU1ZwRlgwNUJUVVZmVkU5ZlVFbFlSVXdnUFNCN1hHNGdJSE50T2lBeE1DeGNiaUFnYldRNklERXlMRnh1SUNCc1p6b2dNVElzWEc1OU8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVVjRjR0Z1WkdWa1B6b2dZbTl2YkdWaGJpeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVaGhjM0J2Y0hWd1B6b2dZbTl2YkdWaGJpeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVeGhZbVZzUHpvZ2MzUnlhVzVuTEZ4dUlDQmpiMnh2Y2o4NklDZG5jbUY1SnlCOElDZHlaV1FuSUh3Z0oySnNkV1VuSUh3Z0ozUnlZVzV6Y0dGeVpXNTBKeUI4SUNkM2FHbDBaU2NzWEc0Z0lHUnBjMkZpYkdWa1B6b2dZbTl2YkdWaGJpeGNiaUFnYVdOdmJrVnVaRDg2SUNSTFpYbHpQSFI1Y0dWdlppQnBZMjl1Y3o0c1hHNGdJR2x1YkdsdVpUODZJR0p2YjJ4bFlXNHNYRzRnSUc1aGJXVS9PaUJ6ZEhKcGJtY3NYRzRnSUc5dVEyeHBZMnMvT2lBb2V5QmxkbVZ1ZERvZ1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREdytJSDBwSUQwK0lIWnZhV1FzWEc0Z0lITmxiR1ZqZEdWa1B6b2dZbTl2YkdWaGJpeGNiaUFnYzJsNlpUODZJQ2R6YlNjZ2ZDQW5iV1FuSUh3Z0oyeG5KeXhjYmlBZ2RHVjRkRG9nYzNSeWFXNW5MRnh1SUNCMFpYaDBRMjlzYjNJL09pQW5kMmhwZEdVbklId2dKMlJoY210SGNtRjVKeUI4SUNkaWJIVmxKeUI4SUNkeVpXUW5MRnh1SUNCMGVYQmxQem9nSjNOMVltMXBkQ2NnZkNBblluVjBkRzl1Snl4Y2JueDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJDZFhSMGIyNG9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJR052Ym5OMElIdGNiaUFnSUNCaFkyTmxjM05wWW1sc2FYUjVSWGh3WVc1a1pXUXNYRzRnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVWhoYzNCdmNIVndMRnh1SUNBZ0lHRmpZMlZ6YzJsaWFXeHBkSGxNWVdKbGJDeGNiaUFnSUNCamIyeHZjaUE5SUNkbmNtRjVKeXhjYmlBZ0lDQmthWE5oWW14bFpDQTlJR1poYkhObExGeHVJQ0FnSUdsamIyNUZibVFzWEc0Z0lDQWdhVzVzYVc1bElEMGdabUZzYzJVc1hHNGdJQ0FnYm1GdFpTeGNiaUFnSUNCdmJrTnNhV05yTEZ4dUlDQWdJSE5sYkdWamRHVmtJRDBnWm1Gc2MyVXNYRzRnSUNBZ2MybDZaU0E5SUNkdFpDY3NYRzRnSUNBZ2RHVjRkQ3hjYmlBZ0lDQjBaWGgwUTI5c2IzSTZJSFJsZUhSRGIyeHZjbEJ5YjNBc1hHNGdJQ0FnZEhsd1pTQTlJQ2RpZFhSMGIyNG5MRnh1SUNCOUlEMGdjSEp2Y0hNN1hHNWNiaUFnWTI5dWMzUWdZMnhoYzNObGN5QTlJR05zWVhOemJtRnRaWE1vYzNSNWJHVnpMbUoxZEhSdmJpd2dlMXh1SUNBZ0lGdHpkSGxzWlhNdWMyMWRPaUJ6YVhwbElEMDlQU0FuYzIwbkxGeHVJQ0FnSUZ0emRIbHNaWE11YldSZE9pQnphWHBsSUQwOVBTQW5iV1FuTEZ4dUlDQWdJRnR6ZEhsc1pYTXViR2RkT2lCemFYcGxJRDA5UFNBbmJHY25MRnh1SUNBZ0lGdHpkSGxzWlhNdWMyOXNhV1JkT2lCamIyeHZjaUFoUFQwZ0ozUnlZVzV6Y0dGeVpXNTBKeXhjYmlBZ0lDQmJjM1I1YkdWelcyTnZiRzl5WFYwNklDRmthWE5oWW14bFpDQW1KaUFoYzJWc1pXTjBaV1FzWEc0Z0lDQWdXM04wZVd4bGN5NXpaV3hsWTNSbFpGMDZJQ0ZrYVhOaFlteGxaQ0FtSmlCelpXeGxZM1JsWkN4Y2JpQWdJQ0JiYzNSNWJHVnpMbVJwYzJGaWJHVmtYVG9nWkdsellXSnNaV1FzWEc0Z0lDQWdXM04wZVd4bGN5NWxibUZpYkdWa1hUb2dJV1JwYzJGaWJHVmtMRnh1SUNBZ0lGdHpkSGxzWlhNdWFXNXNhVzVsWFRvZ2FXNXNhVzVsTEZ4dUlDQWdJRnR6ZEhsc1pYTXVZbXh2WTJ0ZE9pQWhhVzVzYVc1bExGeHVJQ0I5S1R0Y2JseHVJQ0JqYjI1emRDQjBaWGgwUTI5c2IzSWdQVnh1SUNBZ0lDaGthWE5oWW14bFpDQW1KaUFuWjNKaGVTY3BJSHg4WEc0Z0lDQWdLSE5sYkdWamRHVmtJQ1ltSUNkM2FHbDBaU2NwSUh4OFhHNGdJQ0FnZEdWNGRFTnZiRzl5VUhKdmNDQjhmRnh1SUNBZ0lFUkZSa0ZWVEZSZlZFVllWRjlEVDB4UFVsTmJZMjlzYjNKZE8xeHVYRzRnSUdOdmJuTjBJR0oxZEhSdmJsUmxlSFFnUFNBb1hHNGdJQ0FnUEZSbGVIUWdZV3hwWjI0OVhDSmpaVzUwWlhKY0lpQmpiMnh2Y2oxN2RHVjRkRU52Ykc5eWZTQnZkbVZ5Wm14dmR6MWNJbTV2Y20xaGJGd2lJSGRsYVdkb2REMWNJbUp2YkdSY0lqNWNiaUFnSUNBZ0lIdDBaWGgwZlZ4dUlDQWdJRHd2VkdWNGRENWNiaUFnS1R0Y2JseHVJQ0F2S2lCbGMyeHBiblF0WkdsellXSnNaU0J5WldGamRDOWlkWFIwYjI0dGFHRnpMWFI1Y0dVZ0tpOWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThZblYwZEc5dVhHNGdJQ0FnSUNCaGNtbGhMV1Y0Y0dGdVpHVmtQWHRoWTJObGMzTnBZbWxzYVhSNVJYaHdZVzVrWldSOVhHNGdJQ0FnSUNCaGNtbGhMV2hoYzNCdmNIVndQWHRoWTJObGMzTnBZbWxzYVhSNVNHRnpjRzl3ZFhCOVhHNGdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdGhZMk5sYzNOcFltbHNhWFI1VEdGaVpXeDlYRzRnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelpYTjlYRzRnSUNBZ0lDQmthWE5oWW14bFpEMTdaR2x6WVdKc1pXUjlYRzRnSUNBZ0lDQnVZVzFsUFh0dVlXMWxmVnh1SUNBZ0lDQWdiMjVEYkdsamF6MTdaWFpsYm5RZ1BUNGdiMjVEYkdsamF5QW1KaUJ2YmtOc2FXTnJLSHNnWlhabGJuUWdmU2w5WEc0Z0lDQWdJQ0IwZVhCbFBYdDBlWEJsZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJSHRwWTI5dVJXNWtJRDhnS0Z4dUlDQWdJQ0FnSUNBOFFtOTRJR0ZzYVdkdVNYUmxiWE05WENKalpXNTBaWEpjSWlCa2FYTndiR0Y1UFZ3aVpteGxlRndpUGx4dUlDQWdJQ0FnSUNBZ0lIdGlkWFIwYjI1VVpYaDBmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1BFSnZlQ0JrYVhOd2JHRjVQVndpYVc1c2FXNWxRbXh2WTJ0Y0lpQm1iR1Y0UFZ3aWJtOXVaVndpSUcxaGNtZHBibE4wWVhKMFBYc3lmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeEpZMjl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqWTJWemMybGlhV3hwZEhsTVlXSmxiRDFjSWx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHQwWlhoMFEyOXNiM0o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0OWUybGpiMjVGYm1SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcGVtVTllMU5KV2tWZlRrRk5SVjlVVDE5UVNWaEZURnR6YVhwbFhYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdZblYwZEc5dVZHVjRkRnh1SUNBZ0lDQWdLWDFjYmlBZ0lDQThMMkoxZEhSdmJqNWNiaUFnS1R0Y2JpQWdMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQnlaV0ZqZEM5aWRYUjBiMjR0YUdGekxYUjVjR1VnS2k5Y2JuMWNibHh1UW5WMGRHOXVMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV05qWlhOemFXSnBiR2wwZVVWNGNHRnVaR1ZrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ1lXTmpaWE56YVdKcGJHbDBlVWhoYzNCdmNIVndPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQmpiMnh2Y2pvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbllteDFaU2NzSUNkbmNtRjVKeXdnSjNKbFpDY3NJQ2QwY21GdWMzQmhjbVZ1ZENjc0lDZDNhR2wwWlNkZEtTeGNiaUFnWkdsellXSnNaV1E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCcFkyOXVSVzVrT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvVDJKcVpXTjBMbXRsZVhNb2FXTnZibk1wS1N4Y2JpQWdhVzVzYVc1bE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdiMjVEYkdsamF6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSE5sYkdWamRHVmtPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnYzJsNlpUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25jMjBuTENBbmJXUW5MQ0FuYkdjblhTa3NYRzRnSUhSbGVIUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ2RHVjRkRU52Ykc5eU9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d5ZDNhR2wwWlNjc0lDZGtZWEpyUjNKaGVTY3NJQ2RpYkhWbEp5d2dKM0psWkNkZEtTeGNiaUFnZEhsd1pUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25ZblYwZEc5dUp5d2dKM04xWW0xcGRDZGRLU3hjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1kyeGhjM051WVcxbGN5Qm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1YVcxd2IzSjBJSE4wZVd4bGN5Qm1jbTl0SUNjdUwwTmhjbVF1WTNOekp6dGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdGamRHbDJaVDg2SUQ5aWIyOXNaV0Z1TEZ4dUlDQmphR2xzWkhKbGJqODZJRkpsWVdOMExrNXZaR1VzWEc0Z0lHbHRZV2RsUHpvZ1VtVmhZM1F1VG05a1pTeGNiaUFnYjI1TmIzVnpaVVZ1ZEdWeVB6b2dLSHNnWlhabGJuUTZJRk41Ym5Sb1pYUnBZMDF2ZFhObFJYWmxiblE4U0ZSTlRFUnBka1ZzWlcxbGJuUStJSDBwSUQwK0lIWnZhV1FzWEc0Z0lHOXVUVzkxYzJWTVpXRjJaVDg2SUNoN0lHVjJaVzUwT2lCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlCOUtTQTlQaUIyYjJsa0xGeHVmSDA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUVOaGNtUW9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJR052Ym5OMElGdG9iM1psY21Wa0xDQnpaWFJJYjNabGNtVmtYU0E5SUZKbFlXTjBMblZ6WlZOMFlYUmxLR1poYkhObEtUdGNiaUFnWTI5dWMzUWdleUJoWTNScGRtVXNJR05vYVd4a2NtVnVMQ0JwYldGblpTd2diMjVOYjNWelpVVnVkR1Z5TENCdmJrMXZkWE5sVEdWaGRtVWdmU0E5SUhCeWIzQnpPMXh1WEc0Z0lHTnZibk4wSUdoaGJtUnNaVTF2ZFhObFJXNTBaWElnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjdYRzRnSUNBZ2MyVjBTRzkyWlhKbFpDaDBjblZsS1R0Y2JpQWdJQ0JwWmlBb2IyNU5iM1Z6WlVWdWRHVnlLU0I3WEc0Z0lDQWdJQ0J2YmsxdmRYTmxSVzUwWlhJb2V5QmxkbVZ1ZENCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsVFc5MWMyVk1aV0YyWlNBOUlDaGxkbVZ1ZERvZ1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQnpaWFJJYjNabGNtVmtLR1poYkhObEtUdGNiaUFnSUNCcFppQW9iMjVOYjNWelpVeGxZWFpsS1NCN1hHNGdJQ0FnSUNCdmJrMXZkWE5sVEdWaGRtVW9leUJsZG1WdWRDQjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdZMnhoYzNObGN5QTlJR05zWVhOemJtRnRaWE1vYzNSNWJHVnpMbU5oY21Rc0lIdGNiaUFnSUNBdkx5QkpaaXdnYkdsclpTQkFZMmh5YVhOc2JHOTVaQ3dnZVc5MUlHTmhiaWQwSUhKbGJXVnRZbVZ5SUVwaGRtRnpZM0pwY0hRZ1pYRjFZV3hwZEhrZ2NuVnNaWE1zWEc0Z0lDQWdMeThnUFQwZ2JuVnNiQ0JqYUdWamEzTWdabTl5SUdCdWRXeHNZQ0J2Y2lCZ2RXNWtaV1pwYm1Wa1lDQmhibVFnYkdWaGRtVnpJRzkxZENCZ1ptRnNjMlZnTGx4dUlDQWdJRnR6ZEhsc1pYTXVhRzkyWlhKZE9pQmhZM1JwZG1VZ2ZId2dLR0ZqZEdsMlpTQTlQU0J1ZFd4c0lDWW1JR2h2ZG1WeVpXUXBMRnh1SUNCOUtUdGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDYjNoY2JpQWdJQ0FnSUc5dVRXOTFjMlZGYm5SbGNqMTdhR0Z1Wkd4bFRXOTFjMlZGYm5SbGNuMWNiaUFnSUNBZ0lHOXVUVzkxYzJWTVpXRjJaVDE3YUdGdVpHeGxUVzkxYzJWTVpXRjJaWDFjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVQVndpY21Wc1lYUnBkbVZjSWx4dUlDQWdJRDVjYmlBZ0lDQWdJSHRwYldGblpTQW1KaUE4UW05NElHMWhjbWRwYmtKdmRIUnZiVDE3TVgwK2UybHRZV2RsZlR3dlFtOTRQbjFjYmlBZ0lDQWdJRHhDYjNnK2UyTm9hV3hrY21WdWZUd3ZRbTk0UGx4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTllMk5zWVhOelpYTjlJQzgrWEc0Z0lDQWdQQzlDYjNnK1hHNGdJQ2s3WEc1OVhHNWNia05oY21RdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCaFkzUnBkbVU2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCamFHbHNaSEpsYmpvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lHbHRZV2RsT2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ2IyNU5iM1Z6WlVWdWRHVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnYjI1TmIzVnpaVXhsWVhabE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JuMDdYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYmx4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUZSbGVIUWdabkp2YlNBbkxpOVVaWGgwTG1wekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdSbTl5YlVWeWNtOXlUV1Z6YzJGblpTaDdYRzRnSUdsa0xGeHVJQ0IwWlhoMElEMGdKeWNzWEc1OU9pQjdmRnh1SUNCcFpEb2djM1J5YVc1bkxGeHVJQ0IwWlhoMFB6b2djM1J5YVc1bkxGeHVmSDBwSUh0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFFtOTRJRzFoY21kcGJsUnZjRDE3TW4wK1hHNGdJQ0FnSUNBOFZHVjRkQ0JqYjJ4dmNqMWNJbkpsWkZ3aUlITnBlbVU5WENKemJWd2lQbHh1SUNBZ0lDQWdJQ0E4YzNCaGJpQnBaRDE3WUNSN2FXUjlMV1Z5Y205eVlIMCtlM1JsZUhSOVBDOXpjR0Z1UGx4dUlDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlZ4dVhHNUdiM0p0UlhKeWIzSk5aWE56WVdkbExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ2FXUTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ2RHVjRkRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2MzUjViR1Z6SUdaeWIyMGdKeTR2VEdGaVpXd3VZM056Snp0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0OFhHNGdJR05vYVd4a2NtVnVQem9nVW1WaFkzUXVUbTlrWlN4Y2JpQWdhSFJ0YkVadmNqb2djM1J5YVc1bkxGeHVmSDA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUV4aFltVnNLSEJ5YjNCek9pQlFjbTl3Y3lrZ2UxeHVJQ0JqYjI1emRDQjdJR05vYVd4a2NtVnVMQ0JvZEcxc1JtOXlJSDBnUFNCd2NtOXdjenRjYmx4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4c1lXSmxiQ0JqYkdGemMwNWhiV1U5ZTNOMGVXeGxjeTVzWVdKbGJIMGdhSFJ0YkVadmNqMTdhSFJ0YkVadmNuMCtYRzRnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ1BDOXNZV0psYkQ1Y2JpQWdLVHRjYm4xY2JseHVUR0ZpWld3dWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCamFHbHNaSEpsYmpvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lHaDBiV3hHYjNJNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNibjA3WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnWTJ4aGMzTnVZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCamIyeHZjbk1nWm5KdmJTQW5MaTlEYjJ4dmNuTXVZM056Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlEYUdWamEySnZlQzVqYzNNbk8xeHVhVzF3YjNKMElHTnZiblJ5YjJ4VGRIbHNaWE1nWm5KdmJTQW5MaTlTWVdScGIwSjFkSFJ2YmtOb1pXTnJZbTk0TG1OemN5YzdYRzVwYlhCdmNuUWdRbTk0SUdaeWIyMGdKeTR2UW05NExtcHpKenRjYm1sdGNHOXlkQ0JHYjNKdFJYSnliM0pOWlhOellXZGxJR1p5YjIwZ0p5NHZSbTl5YlVWeWNtOXlUV1Z6YzJGblpTNXFjeWM3WEc1cGJYQnZjblFnU1dOdmJpQm1jbTl0SUNjdUwwbGpiMjR1YW5Nbk8xeHVhVzF3YjNKMElFeGhZbVZzSUdaeWIyMGdKeTR2VEdGaVpXd3Vhbk1uTzF4dWFXMXdiM0owSUZSbGVIUWdabkp2YlNBbkxpOVVaWGgwTG1wekp6dGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdOb1pXTnJaV1EvT2lCaWIyOXNaV0Z1TEZ4dUlDQmthWE5oWW14bFpEODZJR0p2YjJ4bFlXNHNYRzRnSUdWeWNtOXlUV1Z6YzJGblpUODZJSE4wY21sdVp5eGNiaUFnYUdGelJYSnliM0kvT2lCaWIyOXNaV0Z1TEZ4dUlDQnBaRG9nYzNSeWFXNW5MRnh1SUNCcGJtUmxkR1Z5YldsdVlYUmxQem9nWW05dmJHVmhiaXhjYmlBZ2JHRmlaV3cvT2lCemRISnBibWNzWEc0Z0lHNWhiV1UvT2lCemRISnBibWNzWEc0Z0lHOXVRMmhoYm1kbE9pQW9leUJsZG1WdWREb2dVM2x1ZEdobGRHbGpTVzV3ZFhSRmRtVnVkRHcrTENCamFHVmphMlZrT2lCaWIyOXNaV0Z1SUgwcElEMCtJSFp2YVdRc1hHNGdJRzl1UTJ4cFkycy9PaUFvZTF4dUlDQWdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkpibkIxZEVWMlpXNTBQRWhVVFV4SmJuQjFkRVZzWlcxbGJuUStMRnh1SUNBZ0lHTm9aV05yWldRNklHSnZiMnhsWVc0c1hHNGdJSDBwSUQwK0lIWnZhV1FzWEc0Z0lITnBlbVUvT2lBbmMyMG5JSHdnSjIxa0p5eGNibng5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCRGFHVmphMkp2ZUNoN1hHNGdJR05vWldOclpXUWdQU0JtWVd4elpTeGNiaUFnWkdsellXSnNaV1FnUFNCbVlXeHpaU3hjYmlBZ1pYSnliM0pOWlhOellXZGxMRnh1SUNCb1lYTkZjbkp2Y2lBOUlHWmhiSE5sTEZ4dUlDQnBaQ3hjYmlBZ2FXNWtaWFJsY20xcGJtRjBaU0E5SUdaaGJITmxMRnh1SUNCc1lXSmxiQ3hjYmlBZ2JtRnRaU3hjYmlBZ2IyNURhR0Z1WjJVc1hHNGdJRzl1UTJ4cFkyc3NYRzRnSUhOcGVtVWdQU0FuYldRbkxGeHVmVG9nVUhKdmNITXBJSHRjYmlBZ1kyOXVjM1FnYVc1d2RYUkZiR1Z0Wlc1MElEMGdVbVZoWTNRdWRYTmxVbVZtUEQ5SVZFMU1TVzV3ZFhSRmJHVnRaVzUwUGlodWRXeHNLVHRjYmlBZ1kyOXVjM1FnVzJadlkzVnpaV1FzSUhObGRFWnZZM1Z6WldSZElEMGdVbVZoWTNRdWRYTmxVM1JoZEdVb1ptRnNjMlVwTzF4dUlDQmpiMjV6ZENCYmFHOTJaWEpsWkN3Z2MyVjBTRzkyWlhKZElEMGdVbVZoWTNRdWRYTmxVM1JoZEdVb1ptRnNjMlVwTzF4dVhHNGdJRkpsWVdOMExuVnpaVVZtWm1WamRDZ29LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHbHVjSFYwUld4bGJXVnVkQ0FtSmlCcGJuQjFkRVZzWlcxbGJuUXVZM1Z5Y21WdWRDa2dlMXh1SUNBZ0lDQWdhVzV3ZFhSRmJHVnRaVzUwTG1OMWNuSmxiblF1YVc1a1pYUmxjbTFwYm1GMFpTQTlJR2x1WkdWMFpYSnRhVzVoZEdVN1hHNGdJQ0FnZlZ4dUlDQjlMQ0JiYVc1a1pYUmxjbTFwYm1GMFpWMHBPMXh1WEc0Z0lHTnZibk4wSUdoaGJtUnNaVU5vWVc1blpTQTlJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpTVzV3ZFhSRmRtVnVkRHcrS1NBOVBpQjdYRzRnSUNBZ2FXWWdLRzl1UTJoaGJtZGxLU0I3WEc0Z0lDQWdJQ0J2YmtOb1lXNW5aU2g3SUdWMlpXNTBMQ0JqYUdWamEyVmtPaUJsZG1WdWRDNTBZWEpuWlhRdVkyaGxZMnRsWkNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsUTJ4cFkyc2dQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMGx1Y0hWMFJYWmxiblE4U0ZSTlRFbHVjSFYwUld4bGJXVnVkRDRwSUQwK0lIdGNiaUFnSUNCcFppQW9iMjVEYkdsamF5a2dlMXh1SUNBZ0lDQWdiMjVEYkdsamF5aDdJR1YyWlc1MExDQmphR1ZqYTJWa09pQmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBMbU5vWldOclpXUWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR2hoYm1Sc1pVaHZkbVZ5SUQwZ0tDa2dQVDRnZTF4dUlDQWdJSE5sZEVodmRtVnlLQ0ZvYjNabGNtVmtLVHRjYmlBZ2ZUdGNibHh1SUNCc1pYUWdZbWRUZEhsc1pTQTlJR052Ykc5eWN5NTNhR2wwWlVKbk8xeHVJQ0JwWmlBb1pHbHpZV0pzWldRcElIdGNiaUFnSUNCaVoxTjBlV3hsSUQwZ1kyOXNiM0p6TG14cFoyaDBSM0poZVVKbk8xeHVJQ0I5SUdWc2MyVWdhV1lnS0dOb1pXTnJaV1FnZkh3Z2FXNWtaWFJsY20xcGJtRjBaU2tnZTF4dUlDQWdJR0puVTNSNWJHVWdQU0JqYjJ4dmNuTXVaR0Z5YTBkeVlYbENaenRjYmlBZ2ZWeHVYRzRnSUd4bGRDQmliM0prWlhKVGRIbHNaU0E5SUhOMGVXeGxjeTVpYjNKa1pYSTdYRzRnSUdsbUlDaGthWE5oWW14bFpDa2dlMXh1SUNBZ0lHSnZjbVJsY2xOMGVXeGxJRDBnYzNSNWJHVnpMbUp2Y21SbGNrUnBjMkZpYkdWa08xeHVJQ0I5SUdWc2MyVWdhV1lnS0NGa2FYTmhZbXhsWkNBbUppQW9ZMmhsWTJ0bFpDQjhmQ0JwYm1SbGRHVnliV2x1WVhSbEtTa2dlMXh1SUNBZ0lHSnZjbVJsY2xOMGVXeGxJRDBnYzNSNWJHVnpMbUp2Y21SbGNrUmhjbXRIY21GNU8xeHVJQ0I5SUdWc2MyVWdhV1lnS0doaGMwVnljbTl5SUh4OElHVnljbTl5VFdWemMyRm5aU2tnZTF4dUlDQWdJR0p2Y21SbGNsTjBlV3hsSUQwZ2MzUjViR1Z6TG1KdmNtUmxja1Z5Y205eU8xeHVJQ0I5SUdWc2MyVWdhV1lnS0NGa2FYTmhZbXhsWkNBbUppQm9iM1psY21Wa0tTQjdYRzRnSUNBZ1ltOXlaR1Z5VTNSNWJHVWdQU0J6ZEhsc1pYTXVZbTl5WkdWeVNHOTJaWEpsWkR0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUdKdmNtUmxjbEpoWkdsMWMxTjBlV3hsSUQxY2JpQWdJQ0J6YVhwbElEMDlQU0FuYzIwbklEOGdjM1I1YkdWekxtSnZjbVJsY2xKaFpHbDFjMU50SURvZ2MzUjViR1Z6TG1KdmNtUmxjbEpoWkdsMWMwMWtPMXh1WEc0Z0lHTnZibk4wSUhOMGVXeGxVMmw2WlNBOUlITnBlbVVnUFQwOUlDZHpiU2NnUHlCamIyNTBjbTlzVTNSNWJHVnpMbk5wZW1WVGJTQTZJR052Ym5SeWIyeFRkSGxzWlhNdWMybDZaVTFrTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFSnZlRDVjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1lXeHBaMjVKZEdWdGN6MWNJbU5sYm5SbGNsd2lYRzRnSUNBZ0lDQWdJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSmNiaUFnSUNBZ0lDQWdhblZ6ZEdsbWVVTnZiblJsYm5ROVhDSnpkR0Z5ZEZ3aVhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmt4bFpuUTlleTB4ZlZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVTYVdkb2REMTdMVEY5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUR4TVlXSmxiQ0JvZEcxc1JtOXlQWHRwWkgwK1hHNGdJQ0FnSUNBZ0lDQWdQRUp2ZUNCd1lXUmthVzVuV0QxN01YMGdjRzl6YVhScGIyNDlYQ0p5Wld4aGRHbDJaVndpUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQR2x1Y0hWMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJaV1E5ZTJOb1pXTnJaV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3loamIyNTBjbTlzVTNSNWJHVnpMbWx1Y0hWMExDQnpkSGxzWlZOcGVtVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JiYzNSNWJHVnpMbWx1Y0hWMFJXNWhZbXhsWkYwNklDRmthWE5oWW14bFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWa1BYdGthWE5oWW14bFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTllMmxrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmtKc2RYSTlleWdwSUQwK0lITmxkRVp2WTNWelpXUW9abUZzYzJVcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlQxN2FHRnVaR3hsUTJoaGJtZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdG9ZVzVrYkdWRGJHbGphMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVHYjJOMWN6MTdLQ2tnUFQ0Z2MyVjBSbTlqZFhObFpDaDBjblZsS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1TmIzVnpaVVZ1ZEdWeVBYdG9ZVzVrYkdWSWIzWmxjbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVOYjNWelpVeGxZWFpsUFh0b1lXNWtiR1ZJYjNabGNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1QWHRwYm5CMWRFVnNaVzFsYm5SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0pqYUdWamEySnZlRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOemJtRnRaWE1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW1kVGRIbHNaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjNKa1pYSlRkSGxzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIzSmtaWEpTWVdScGRYTlRkSGxzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVk5wZW1Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1Z6TG1Ob1pXTnJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ0emRIbHNaWE11WTJobFkydEdiMk4xYzJWa1hUb2dabTlqZFhObFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhzb1kyaGxZMnRsWkNCOGZDQnBibVJsZEdWeWJXbHVZWFJsS1NBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRWxqYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmpZMlZ6YzJsaWFXeHBkSGxNWVdKbGJEMWNJbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajFjSW5kb2FYUmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsamIyNDllMmx1WkdWMFpYSnRhVzVoZEdVZ1B5QW5aR0Z6YUNjZ09pQW5ZMmhsWTJzbmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMmw2WlQxN2MybDZaU0E5UFQwZ0ozTnRKeUEvSURnZ09pQXhNbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lEd3ZUR0ZpWld3K1hHNWNiaUFnSUNBZ0lDQWdlMnhoWW1Wc0lDWW1JQ2hjYmlBZ0lDQWdJQ0FnSUNBOFRHRmlaV3dnYUhSdGJFWnZjajE3YVdSOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVDQndZV1JrYVc1bldEMTdNWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhVWlhoMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTJScGMyRmliR1ZrSUQ4Z0oyZHlZWGtuSURvZ2RXNWtaV1pwYm1Wa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnBlbVU5ZTNOcGVtVWdQVDA5SUNkemJTY2dQeUFuYldRbklEb2dKMnhuSjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0c1lXSmxiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnUEM5TVlXSmxiRDVjYmlBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdlMlZ5Y205eVRXVnpjMkZuWlNBbUppQW9YRzRnSUNBZ0lDQWdJRHhDYjNnZ2JXRnlaMmx1Vkc5d1BYc3lmVDVjYmlBZ0lDQWdJQ0FnSUNBOFZHVjRkQ0JqYjJ4dmNqMWNJbkpsWkZ3aUlITnBlbVU5WENKemJWd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFWnZjbTFGY25KdmNrMWxjM05oWjJVZ2FXUTllMmxrZlNCMFpYaDBQWHRsY25KdmNrMWxjM05oWjJWOUlDOCtYRzRnSUNBZ0lDQWdJQ0FnUEM5VVpYaDBQbHh1SUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lDbDlYRzRnSUNBZ1BDOUNiM2crWEc0Z0lDazdYRzU5WEc1Y2JrTm9aV05yWW05NExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1kyaGxZMnRsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lHUnBjMkZpYkdWa09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdaWEp5YjNKTlpYTnpZV2RsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQm9ZWE5GY25KdmNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJR2xrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJR2x1WkdWMFpYSnRhVzVoZEdVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQnNZV0psYkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdibUZ0WlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdiMjVEYUdGdVoyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUc5dVEyeHBZMnM2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNCemFYcGxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWR6YlNjc0lDZHRaQ2RkS1N4Y2JuMDdYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYmk4cVhHNGdJQ01nUTI5c2JHVmpkR2x2Ymx4dVhHNGdJRU52Ykd4bFkzUnBiMjRnYVhNZ1kyOXRjRzl1Wlc1MElIUm9ZWFFnWTJGdUlHRmljMjlzZFhSbGJIa2djRzl6YVhScGIyNGdZVzVrSUhacGNuUjFZV3hwZW1VZ2FYUmxiWE11SUVsMEozTWdiV1ZoYm5RZ2RHOGdZbVVnWVc0Z1pYaDBaWEpsYld4NUlITnBiWEJzWlNCM2IzSnJhRzl5YzJVZ2RHOGdjbVV0YVcxd2JHVnRaVzUwSUdOMWMzUnZiU0JzWVhsdmRYUnpMaUJKZENkeklHNXZkQ0J3WlhKbVpXTjBJR1p2Y2lCaGJHd2djMmwwZFdGMGFXOXVjeUJpZFhRZ2FYUWdaRzlsY3lCb1lYWmxJR0VnWTJ4dmMyVmtJRUZRU1NCaGJtUWdhWE1nY0hKbGRIUjVJSEJsY21admNtMWhiblF1WEc1Y2JpQWdJeU1nU0c5M0lHbDBJSGR2Y210elhHNWNiaUFnVkdobGNtVWdZWEpsSUhSM2J5QmpaVzUwY21Gc0lHTnZibU5sY0hSeklIUnZJRU52Ykd4bFkzUnBiMjRnTFNCMGFHVWdZMjl1ZEdWdWRDQnNZWGxsY2lCaGJtUWdkR2hsSUhacFpYZHdiM0owSUd4aGVXVnlMbHh1WEc0Z0lFTnZiblJsYm5RZ2JHRjVaWElnSUNBZ0lDQWdJQ0FnSUNBZ0lDQldhV1YzY0c5eWRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRiMjF3YjNOcGRHVWdiR0Y1WlhKY2JseHVJQ0FyTFMwdExTMHRMUzB0TFMwdExTMHRMU3NnSUNBZ0lDQWdJQ0FnS3kwdExTMHRMUzB0TFMwdExTMHRMUzBySUNBZ0lDQWdJQ0FnSUNzdExTMHRMUzB0TFMwdExTMHRMUzB0SzF4dUlDQjhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdmQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJQ0FnSUNBZ0lDQWdJSHdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmRnh1SUNCOElDc3RMU3NnS3kwdEt5QXJMUzBySUh3Z0lDQWdJQ0FnSUNBZ2ZDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElDQWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZGeHVJQ0I4SUh3Z0lId2dmQ0FnZkNCOElDQjhJSHdnSUNBZ0lDQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNBZ0lDQWdJQ0FnSUh3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkZ4dUlDQjhJSHdnSUh3Z2ZDQWdmQ0I4SUNCOElId2dJQ0FnSUNBZ0lDQWdmQ0FyTFMwdExTMHRMUzB0TFMwdEt5QjhJQ0FnSUNBZ0lDQWdJSHdnS3kwdExTMHRMUzB0TFMwdExTc2dmRnh1SUNCOElDc3RMU3NnZkNBZ2ZDQjhJQ0I4SUh3Z0lDQWdJQ0FnSUNBZ2ZDQjhJQ0FnSUNBZ0lDQWdJQ0FnZkNCOElDQWdJQ0FnSUNBZ0lId2dmQzB0S3lCOElDQjhJSHdnSUh3Z2ZGeHVJQ0I4SUNBZ0lDQWdmQ0FnZkNBckxTMHJJSHdnSUNBZ0lDQWdJQ0FnZkNCOElDQWdJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ0lDQWdJQ0FnSUh3Z2ZDQWdJQ0I4SUNCOElDc3RMWHdnZkZ4dUlDQjhJQ3N0TFNzZ0t5MHRLeUFnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ0lDQWdJQ0FnSUNBZ2ZDQjhJQ0FnSUNBZ0lDQWdJSHdnZkMwdEt5QXJMUzBySUNBZ0lId2dmRnh1SUNCOElId2dJSHdnSUNBZ0lDQXJMUzBySUh3Z0t5MHRMUzB0TFQ0Z2ZDQjhJQ0FnSUNBZ0lDQWdJQ0FnZkNCOElDc3RMUzB0TFMwK0lId2dmQ0FnZkNBZ0lDQWdJQ3N0TFh3Z2ZGeHVJQ0I4SUNzdExTc2dLeTB0S3lCOElDQjhJSHdnSUNBZ0lDQWdJQ0FnZkNCOElDQWdJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ0lDQWdJQ0FnSUh3Z2ZDMHRLeUFyTFMwcklId2dJSHdnZkZ4dUlDQjhJQ0FnSUNBZ2ZDQWdmQ0I4SUNCOElId2dJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ0lDQWdJQ0FnSUNBZ2ZDQjhJQ0FnSUNBZ0lDQWdJSHdnZkNBZ0lDQjhJQ0I4SUh3Z0lId2dmRnh1SUNCOElDc3RMU3NnZkNBZ2ZDQXJMUzBySUh3Z0lDQWdJQ0FnSUNBZ2ZDQjhJQ0FnSUNBZ0lDQWdJQ0FnZkNCOElDQWdJQ0FnSUNBZ0lId2dmQzB0S3lCOElDQjhJQ3N0TFh3Z2ZGeHVJQ0I4SUh3Z0lId2dmQ0FnZkNBZ0lDQWdJSHdnSUNBZ0lDQWdJQ0FnZkNCOElDQWdJQ0FnSUNBZ0lDQWdmQ0I4SUNBZ0lDQWdJQ0FnSUh3Z2ZDQWdmQ0I4SUNCOElDQWdJSHdnZkZ4dUlDQjhJSHdnSUh3Z2ZDQWdmQ0FyTFMwcklId2dJQ0FnSUNBZ0lDQWdmQ0FyTFMwdExTMHRMUzB0TFMwdEt5QjhJQ0FnSUNBZ0lDQWdJSHdnS3kwdExTMHRMUzB0TFMwdExTc2dmRnh1SUNCOElId2dJSHdnZkNBZ2ZDQjhJQ0I4SUh3Z0lDQWdJQ0FnSUNBZ2ZDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOElDQWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZGeHVJQ0I4SUNzdExTc2dLeTB0S3lBckxTMHJJSHdnSUNBZ0lDQWdJQ0FnZkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I4SUNBZ0lDQWdJQ0FnSUh3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkZ4dUlDQjhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lId2dJQ0FnSUNBZ0lDQWdmQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjhJQ0FnSUNBZ0lDQWdJSHdnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmRnh1SUNBckxTMHRMUzB0TFMwdExTMHRMUzB0TFNzZ0lDQWdJQ0FnSUNBZ0t5MHRMUzB0TFMwdExTMHRMUzB0TFMwcklDQWdJQ0FnSUNBZ0lDc3RMUzB0TFMwdExTMHRMUzB0TFMwdEsxeHVYRzRnSUZsdmRTQndiM05wZEdsdmJpQjViM1Z5SUdsMFpXMXpJR2x1SUhSb1pTQjJhWEowZFdGc0lHTnZiblJsYm5RZ2JHRjVaWElzSUhSb1pXNGdlVzkxSUdSbFptbHVaU0IwYUdVZ2RtbGxkM0J2Y25RZ2JHRjVaWElnS0dKNUlHUmxabUYxYkhRZ2RHaHBjeUJwY3lCMGFHVWdablZzYkNCemFYcGxJRzltSUhSb1pTQmpiMjUwWlc1MElHeGhlV1Z5S1M0Z1EyOXNiR1ZqZEdsdmJpQjBhR1Z1SUhSaGEyVnpJSFJvYjNObElHbDBaVzF6TENCaGJtUWdkR2hsSUhacFpYZHdiM0owSUhKbGJtUmxjbWx1WnlCMGFHVWdZMjl1ZEdWdWRDQnNZWGxsY2lCM2FYUm9JRzl1YkhrZ2RHaGxJR2wwWlcxeklIUm9ZWFFnWm1sMElHbHVjMmxrWlNCMGFHVWdkbWxsZDNCdmNuUXVYRzVjYmlBZ0l5TWdRWE56ZFcxd2RHbHZibk5jYmx4dUlDQXhMaUJaYjNWeUlHeGhlVzkxZENCcGN5QndjbVV0WTJGc1kzVnNZWFJsWkM0Z1EyOXNiR1ZqZEdsdmJpQmxlSEJsWTNSeklHeGhlVzkxZENCMGJ5QmlaU0J3WVhOelpXUWdhVzRnWVhNZ1lTQndjbTl3WlhKMGVTNGdTV1lnZVc5MWNpQnNZWGx2ZFhRZ2FYTnVKM1FnY21WaFpIa2dLR2t1WlM0Z2MyOXRaWFJvYVc1bklHNWxaV1J6SUhSdklHSmxJRzFsWVhOMWNtVmtLU0IwYUdVZ1kyRnNiR1Z5SUc1bFpXUnpJSFJ2SUdacFozVnlaU0IwYUdGMElHOTFkQzVjYmlBZ01pNGdVR0Z6YzJWa0lHbHVJRWwwWlcwZ1lYSmxJSE52YldWM2FHRjBJSEIxY21VZ0xTQjBhR1Y1SUdOaGJpQmlaU0J0YjNWdWRHVmtJR0Z1WkNCMWJtMXZkVzUwWldRZ1lYUWdZVzU1ZEdsdFpTQnpieUJKZEdWdEozTWdiR2xtWldONVkyeGxJRzFsZEdodlpITWdibVZsWkNCMGJ5QmhZMk52ZFc1MElHWnZjaUIwYUdGMExseHVJQ0F6TGlCUVlYTnpaV1FnYVc0Z1NYUmxiWE1nWVhKbElHSnZkVzVrSUhSdklIUm9aV2x5SUdSaGRHRXRjMjkxY21ObElITmxjR1Z5WVhSbGJIa3VJRUZzYkNCMGFHVjVJSEpsWTJWcGRtVWdhWE1nWVc0Z2FXNWtaWGdzSUhOdklIUm9aWGtnYm1WbFpDQjBieUJvWVhabElHRnVlU0JsZUhSbGNtNWhiQ0JrWVhSaElITnZkWEpqWlhNZ2FXNGdjMk52Y0dVdVhHNGdJRFF1SUZSb1pTQjJhV1YzY0c5eWRDQmpZVzRnWW1VZ1lXNTVJSE5wZW1VdUlFMXZjM1FnZDJsdVpHOTNhVzVuTDNKbFkzbGpiR2x1WnlCemIyeDFkR2x2Ym5NZ2FXMXdiR1Z0Wlc1MElITnZiV1VnYzI5eWRDQnZaaUJ2ZG1WeWMyTmhibTVwYm1jc0lHaHZkMlYyWlhJZ1EyOXNiR1ZqZEdsdmJpQnNaV0YyWlhNZ2RHaHBjeUIxY0NCMGFHVWdkR2hsSUhCaGNtVnVkQzVjYmx4dUtpOWNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2JHRjViM1YwVTNSNWJHVnpJR1p5YjIwZ0p5NHZUR0Y1YjNWMExtTnpjeWM3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQkpkR1Z0T2lBb2V5QnBaSGc2SUc1MWJXSmxjaUI5S1NBOVBpQlNaV0ZqZEM1T2IyUmxMRnh1SUNCc1lYbHZkWFE2SUVGeWNtRjVQSHQ4WEc0Z0lDQWdkRzl3T2lCdWRXMWlaWElzWEc0Z0lDQWdiR1ZtZERvZ2JuVnRZbVZ5TEZ4dUlDQWdJSGRwWkhSb09pQnVkVzFpWlhJc1hHNGdJQ0FnYUdWcFoyaDBPaUJ1ZFcxaVpYSXNYRzRnSUh4OVBpeGNiaUFnZG1sbGQzQnZjblJVYjNBL09pQnVkVzFpWlhJc1hHNGdJSFpwWlhkd2IzSjBUR1ZtZEQ4NklHNTFiV0psY2l4Y2JpQWdkbWxsZDNCdmNuUlhhV1IwYUQ4NklHNTFiV0psY2l4Y2JpQWdkbWxsZDNCdmNuUklaV2xuYUhRL09pQnVkVzFpWlhJc1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdRMjlzYkdWamRHbHZiaUJsZUhSbGJtUnpJRkpsWVdOMExsQjFjbVZEYjIxd2IyNWxiblE4VUhKdmNITXNJSFp2YVdRK0lIdGNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnY21WaFkzUXZabTl5WW1sa0xYQnliM0F0ZEhsd1pYTmNiaUFnSUNCSmRHVnRPaUJRY205d1ZIbHdaWE11WVc1NUxGeHVJQ0FnSUd4aGVXOTFkRG9nVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11WlhoaFkzUW9lMXh1SUNBZ0lDQWdJQ0IwYjNBNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lDQWdiR1ZtZERvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2k1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUNBZ0lDQjNhV1IwYURvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2k1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUNBZ0lDQm9aV2xuYUhRNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNBZ0lIMHBMbWx6VW1WeGRXbHlaV1JjYmlBZ0lDQXBMRnh1SUNBZ0lIWnBaWGR3YjNKMFNHVnBaMmgwT2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJSFpwWlhkd2IzSjBUR1ZtZERvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0IyYVdWM2NHOXlkRlJ2Y0RvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0IyYVdWM2NHOXlkRmRwWkhSb09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0I5TzF4dVhHNGdJSE4wWVhScFl5QmtaV1poZFd4MFVISnZjSE1nUFNCN1hHNGdJQ0FnYkdGNWIzVjBPaUJiWFN4Y2JpQWdJQ0IyYVdWM2NHOXlkRXhsWm5RNklEQXNYRzRnSUNBZ2RtbGxkM0J2Y25SVWIzQTZJREFzWEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHNnU1hSbGJTd2diR0Y1YjNWMExDQjJhV1YzY0c5eWRGUnZjQ0E5SURBc0lIWnBaWGR3YjNKMFRHVm1kQ0E5SURBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0F2THlCRFlXeGpkV3hoZEdVZ2RHaGxJR1oxYkd3Z1pHbHRaVzV6YVc5dWN5QnZaaUIwYUdVZ2FYUmxiU0JzWVhsbGNseHVJQ0FnSUdOdmJuTjBJSGRwWkhSb0lEMGdUV0YwYUM1dFlYZ29MaTR1YkdGNWIzVjBMbTFoY0NocGRHVnRJRDArSUdsMFpXMHViR1ZtZENBcklHbDBaVzB1ZDJsa2RHZ3BLVHRjYmlBZ0lDQmpiMjV6ZENCb1pXbG5hSFFnUFNCTllYUm9MbTFoZUNndUxpNXNZWGx2ZFhRdWJXRndLR2wwWlcwZ1BUNGdhWFJsYlM1MGIzQWdLeUJwZEdWdExtaGxhV2RvZENrcE8xeHVYRzRnSUNBZ0x5OGdSR1ZtWVhWc2RDQjBhR1VnZG1sbGQzQnZjblFnZEc4Z1ltVnBibWNnZEdobElHWjFiR3dnZDJsa2RHZ2diMllnZEdobElHTnZiblJsYm5RZ2JHRjVaWEpjYmlBZ0lDQmpiMjV6ZENCN0lIWnBaWGR3YjNKMFYybGtkR2dnUFNCM2FXUjBhQ3dnZG1sbGQzQnZjblJJWldsbmFIUWdQU0JvWldsbmFIUWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNWNiaUFnSUNBdkx5QkRZV3hqZFd4aGRHVnpJSGRvYVdOb0lHbDBaVzF6SUdaeWIyMGdkR2hsSUdsMFpXMGdiR0Y1WlhJZ2RHOGdjbVZ1WkdWeUlHbHVJSFJvWlNCMmFXVjNjRzl5ZEZ4dUlDQWdJQzh2SUd4aGVXVnlMbHh1SUNBZ0lHTnZibk4wSUdsMFpXMXpJRDBnYkdGNWIzVjBMbkpsWkhWalpTZ29ZV05qTENCd2IzTnBkR2x2Yml3Z2FXUjRLU0E5UGlCN1hHNGdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVMblJ2Y0NBcklIQnZjMmwwYVc5dUxtaGxhV2RvZENBK0lIWnBaWGR3YjNKMFZHOXdJQ1ltWEc0Z0lDQWdJQ0FnSUhCdmMybDBhVzl1TG5SdmNDQThJSFpwWlhkd2IzSjBTR1ZwWjJoMElDc2dkbWxsZDNCdmNuUlViM0FnSmlaY2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0dWJHVm1kQ0E4SUhacFpYZHdiM0owVjJsa2RHZ2dLeUIyYVdWM2NHOXlkRXhsWm5RZ0ppWmNiaUFnSUNBZ0lDQWdjRzl6YVhScGIyNHViR1ZtZENBcklIQnZjMmwwYVc5dUxuZHBaSFJvSUQ0Z2RtbGxkM0J2Y25STVpXWjBYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnWVdOakxuQjFjMmdvZXlCcFpIZ3NJQzR1TG5CdmMybDBhVzl1SUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGall6dGNiaUFnSUNCOUxDQmJYU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUyeGhlVzkxZEZOMGVXeGxjeTV5Wld4aGRHbDJaWDBnYzNSNWJHVTllM3NnZDJsa2RHZ3NJR2hsYVdkb2RDQjlmVDVjYmlBZ0lDQWdJQ0FnZTJsMFpXMXpMbTFoY0Nnb2V5QnBaSGdzSUM0dUxuTjBlV3hsSUgwcElEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFpHbDJJR3RsZVQxN2FXUjRmU0JqYkdGemMwNWhiV1U5ZTJ4aGVXOTFkRk4wZVd4bGN5NWhZbk52YkhWMFpYMGdjM1I1YkdVOWUzTjBlV3hsZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhKZEdWdElHbGtlRDE3YVdSNGZTQXZQbHh1SUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwS1gxY2JpQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQkRiMnhzWldOMGFXOXVJR1p5YjIwZ0p5NHZRMjlzYkdWamRHbHZiaTVxY3ljN1hHNWNiblI1Y0dVZ1EyOXNkVzF1SUQwZ01pQjhJRE1nZkNBME8xeHVYRzR2S2x4dVhHNVVhR2x6SUdaMWJtTjBhVzl1SUdwMWMzUWdhVzF3YkdWdFpXNTBjeUIwYUdVZ1pHVnphV2R1SUdOdmJuTjBjbUZwYm5SeklHWnZjaUJoYzNsdFpYUnlhV05oYkNCamIyeDFiVzV6SUdsdVhHNWhJSFpsY25rZ2MybHRjR3hsSUhkaGVTNGdTWFFuY3lCdWIzUWdjR1Z5Wm1WamRDd2dZblYwSUdsMEozTWdkbVZ5ZVNCd2NtVmthV04wYVdKc1pTNGdTV1lnZVc5MUlHUnZYRzVoYm5sMGFHbHVaeXdnYVcxd2NtOTJaU0JwZENCemJ5QjBhR0YwSUdsMElIUmhhMlZ6SUhSb1pYTmxJR052Ym5OMGNtRnBiblJ6SUdGdVpDQm5aVzVsY21GMFpYTWdkR2hsYlZ4dVptOXlJRzRnUGlBMExseHVYRzR4SUNzZ2JpQmpiMngxYlc1ek9seHVJQ0JtYVhKemRDQmpiMngxYlc0Z2FYTWdOVEF2TlRCY2JpQWdZMkZ1SjNRZ2FHRjJaU0F6SUdOdmJIVnRibk1nYVc0Z1lTQnliM2NnWW1VZ05UQXZOVEJjYmx4dUtpOWNibU52Ym5OMElGVlFJRDBnV3pBdU56VXNJREF1TWpWZE8xeHVZMjl1YzNRZ1JFOVhUaUE5SUZzd0xqSTFMQ0F3TGpjMVhUdGNibU52Ym5OMElFMUpSQ0E5SUZzd0xqVXNJREF1TlYwN1hHNWpiMjV6ZENCamIyeDFiVzVNWVhsdmRYUWdQU0FvYm5WdFQyWkRiMngxYlc1ek9pQXhJSHdnUTI5c2RXMXVLU0E5UGlCN1hHNGdJSE4zYVhSamFDQW9iblZ0VDJaRGIyeDFiVzV6S1NCN1hHNGdJQ0FnWTJGelpTQXhPbHh1SUNBZ0lDQWdjbVYwZFhKdUlGdGJUVWxFWFN3Z1cxVlFYU3dnVzBSUFYwNWRYVHRjYmlBZ0lDQmpZWE5sSURJNlhHNGdJQ0FnSUNCeVpYUjFjbTRnVzF4dUlDQWdJQ0FnSUNCYlZWQXNJRTFKUkYwc1hHNGdJQ0FnSUNBZ0lGdEVUMWRPTENCTlNVUmRMRnh1SUNBZ0lDQWdJQ0JiVFVsRUxDQlZVRjBzWEc0Z0lDQWdJQ0FnSUZ0TlNVUXNJRVJQVjA1ZExGeHVJQ0FnSUNBZ1hUdGNiaUFnSUNCallYTmxJRFE2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lDQWdJQ0JiVFVsRUxDQlZVQ3dnVFVsRUxDQk5TVVJkTEZ4dUlDQWdJQ0FnSUNCYlRVbEVMQ0JFVDFkT0xDQk5TVVFzSUUxSlJGMHNYRzRnSUNBZ0lDQWdJRnROU1VRc0lFMUpSQ3dnVlZBc0lFMUpSRjBzWEc0Z0lDQWdJQ0FnSUZ0TlNVUXNJRTFKUkN3Z1JFOVhUaXdnVFVsRVhTeGNiaUFnSUNBZ0lDQWdXMDFKUkN3Z1ZWQXNJRTFKUkN3Z1JFOVhUbDBzWEc0Z0lDQWdJQ0FnSUZ0TlNVUXNJRVJQVjA0c0lFMUpSQ3dnVlZCZExGeHVJQ0FnSUNBZ1hUdGNiaUFnSUNCallYTmxJRE02WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lGdE5TVVFzSUZWUUxDQk5TVVJkTEZ4dUlDQWdJQ0FnSUNCYlRVbEVMQ0JFVDFkT0xDQk5TVVJkTEZ4dUlDQWdJQ0FnSUNCYlRVbEVMQ0JOU1VRc0lGVlFYU3hjYmlBZ0lDQWdJQ0FnVzAxSlJDd2dUVWxFTENCRVQxZE9YU3hjYmlBZ0lDQWdJRjA3WEc0Z0lIMWNibjA3WEc1Y2JtTnZibk4wSUhCaFpHUnBibWRCYkd3Z1BTQW9aM1YwZEdWeUxDQndiM05wZEdsdmJuTXBJRDArWEc0Z0lIQnZjMmwwYVc5dWN5NXRZWEFvS0hzZ2RHOXdMQ0JzWldaMExDQjNhV1IwYUN3Z2FHVnBaMmgwSUgwcElEMCtJQ2g3WEc0Z0lDQWdkRzl3TEZ4dUlDQWdJR3hsWm5Rc1hHNGdJQ0FnZDJsa2RHZzZJSGRwWkhSb0lDMGdaM1YwZEdWeUxGeHVJQ0FnSUdobGFXZG9kRG9nYUdWcFoyaDBJQzBnWjNWMGRHVnlMRnh1SUNCOUtTazdYRzVjYm1OdmJuTjBJRzFwYm1SbGVDQTlJR0Z5Y2lBOVBseHVJQ0JoY25JdWNtVmtkV05sS0NodGFXNUpibVJsZUN3Z2FYUmxiU3dnYVNrZ1BUNGdLR2wwWlcwZ1BDQmhjbkpiYldsdVNXNWtaWGhkSUQ4Z2FTQTZJRzFwYmtsdVpHVjRLU3dnTUNrN1hHNWNibU52Ym5OMElHTnZiSFZ0Ym5OR2IzSkRiMnhzWVdkbFYybDBhRU52ZG1WeUlEMGdLRzUxYlU5bVEyOXNkVzF1Y3pvZ1EyOXNkVzF1S1NBOVBseHVJQ0J1ZFcxUFprTnZiSFZ0Ym5NZ1BUMDlJRFFnUHlBeUlEb2dNVHRjYmx4dVpuVnVZM1JwYjI0Z1oyVjBRMjlzYkdGblpVeGhlVzkxZENoN1hHNGdJR2QxZEhSbGNpeGNiaUFnWTI5MlpYSXNYRzRnSUdOdmJIVnRibk02SUc1MWJVTnZiSE1zWEc0Z0lHaGxhV2RvZERvZ2FDeGNiaUFnZDJsa2RHZzZJSGNzWEc0Z0lHeGhlVzkxZEV0bGVTeGNibjA2SUh0Y2JpQWdaM1YwZEdWeU9pQnVkVzFpWlhJc1hHNGdJR052ZG1WeU9pQmliMjlzWldGdUxGeHVJQ0JqYjJ4MWJXNXpPaUJEYjJ4MWJXNHNYRzRnSUdobGFXZG9kRG9nYm5WdFltVnlMRnh1SUNCM2FXUjBhRG9nYm5WdFltVnlMRnh1SUNCc1lYbHZkWFJMWlhrNklHNTFiV0psY2l4Y2JuMHBJSHRjYmlBZ2JHVjBJSEJ2YzJsMGFXOXVjeUE5SUZ0ZE8xeHVJQ0JqYjI1emRDQjNhV1IwYUNBOUlIY2dLeUJuZFhSMFpYSTdYRzRnSUdOdmJuTjBJR2hsYVdkb2RDQTlJR2dnS3lCbmRYUjBaWEk3WEc1Y2JpQWdMeThnU1dZZ2RHaGxjbVVuY3lCaElHTnZkbVZ5SUdsdFlXZGxMQ0IzWlNkc2JDQmhaR1FnZEdoaGRDQnNZWFJsY2k0Z1NYUWdjMmh2ZFd4a0lHSmxJR0VnYkdsMGRHeGxYRzRnSUM4dklHeGxjM01nZEdoaGJpQm9ZV3htSUhSb1pTQjNhV1IwYUNCdlppQjBhR1VnWTI5c2JHRm5aUzRnVjJVZ1pHOGdkR2hwY3lCdWIzY2dLR0Z1WkNCdWIzUWdiR0YwWlhKY2JpQWdMeThnZDJobGJpQjNaU0JoWkdRZ2RHaGxJR052ZG1WeUlHbHRZV2RsS1NCaVpXTmhkWE5sSUc5bUlHQmpiMngxYlc1TVlYbHZkWFJnSjNNZ1kyOXVjM1J5WVdsdWRITmNiaUFnTHk4Z2JtVmxaR2x1WnlCMGFHVWdaWGhoWTNRZ2JuVnRZbVZ5SUc5bUlHTnZiSFZ0Ym5NZ2RHaGhkQ0JoY21VZ1pHbHpjR3hoZVdWa0xseHVJQ0JqYjI1emRDQm5jbWxrUTI5c2N5QTlJR052ZG1WeUlEOGdZMjlzZFcxdWMwWnZja052Ykd4aFoyVlhhWFJvUTI5MlpYSW9iblZ0UTI5c2N5a2dPaUJ1ZFcxRGIyeHpPMXh1WEc0Z0lDOHZJRk5sYkdWamRITWdkR2hsSUd4aGVXOTFkQ0IwYUdGMElIZGxKM0psSUdkdmFXNW5JSFJ2SUhWelpTQm1iM0lnZEdobElHZHlhV1JjYmlBZ1kyOXVjM1FnWTI5c2RXMXVjeUE5SUdOdmJIVnRia3hoZVc5MWRDaG5jbWxrUTI5c2N5azdYRzRnSUdOdmJuTjBJR3hoZVc5MWRFbGtlQ0E5SUd4aGVXOTFkRXRsZVNBbElHTnZiSFZ0Ym5NdWJHVnVaM1JvTzF4dUlDQmpiMjV6ZENCc1lYbHZkWFFnUFNCamIyeDFiVzV6VzJ4aGVXOTFkRWxrZUYwN1hHNWNiaUFnTHk4Z1ZHaHBjeUJrYjJWeklHRWdjbVZoYkd4NUlITnBiWEJzWlNCMlpYSnphVzl1SUc5bUlHOTFjaUJ0WVhOdmJuSjVJR3hoZVc5MWRDNGdWMmg1SUhKbGNHeHBZMkYwWlZ4dUlDQXZMeUIwYUdGMElHaGxjbVUvSUdFdUtTQm1aWGRsY2lCa1pYQmxibVJsYm1OcFpYTWdZVzVrSUdJdUtTQjNaU0J1WldWa0lIUm9aU0JoYkdkdmNtbDBhRzBnZEc5Y2JpQWdMeThnY205MVoyaHNlU0J3Y21WelpYSjJaU0IwYUdVZ2IzSmtaWElnYjJZZ2RHaGxJR052Ykd4aFoyVnpJR1p5YjIwZ2QyaGxiaUIwYUdWNUlIZGxjbVVnYjNKa1pYSmxaRnh1SUNBdkx5QmllU0JOWVhOdmJuSjVMbHh1SUNCamIyNXpkQ0JqYjJ4SVpXbG5hSFJ6SUQwZ2JtVjNJRUZ5Y21GNUtHZHlhV1JEYjJ4ektTNW1hV3hzS0RBcE8xeHVJQ0JqYjI1emRDQmpiMnhEYjNWdWRITWdQU0J1WlhjZ1FYSnlZWGtvWjNKcFpFTnZiSE1wTG1acGJHd29NQ2s3WEc1Y2JpQWdMeThnVjJVZ2FYUmxjbUYwWlNCdmRtVnlJR1YyWlhKNUlIQnZjMmwwYVc5dUlIUm9ZWFFnZDJVZ2RHaHBibXNnZDJVZ1kyOTFiR1FnWDNCdmRHVnVkR2xoYkd4NVh5Qm9ZWFpsWEc0Z0lDOHZJSE52SUhSb1lYUWdkMlVnWTJGdUlHWnBiR3dnZEdobGJTQjNhWFJvSUdWdGNIUjVJSE5sWTNScGIyNXpJR2xtSUc1bFpXUWdZbVV1WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNaUFxSUdkeWFXUkRiMnh6T3lCcElDczlJREVwSUh0Y2JpQWdJQ0JqYjI1emRDQmpiMndnUFNCdGFXNWtaWGdvWTI5c1NHVnBaMmgwY3lrN1hHNGdJQ0FnWTI5dWMzUWdZMjlzU1dSNElEMGdZMjlzUTI5MWJuUnpXMk52YkYwN1hHNGdJQ0FnWTI5dWMzUWdhWFJsYlVobGFXZG9kQ0E5SUd4aGVXOTFkRnRqYjJ4ZFcyTnZiRWxrZUYwZ0tpQm9aV2xuYUhRN1hHNWNiaUFnSUNCd2IzTnBkR2x2Ym5NdWNIVnphQ2g3WEc0Z0lDQWdJQ0IwYjNBNklHTnZiRWhsYVdkb2RITmJZMjlzWFN4Y2JpQWdJQ0FnSUd4bFpuUTZJR052YkNBcUlDaDNhV1IwYUNBdklHNTFiVU52YkhNcExGeHVJQ0FnSUNBZ2QybGtkR2c2SUhkcFpIUm9JQzhnYm5WdFEyOXNjeXhjYmlBZ0lDQWdJR2hsYVdkb2REb2dhWFJsYlVobGFXZG9kQ3hjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR052YkVobGFXZG9kSE5iWTI5c1hTQXJQU0JwZEdWdFNHVnBaMmgwTzF4dUlDQWdJR052YkVOdmRXNTBjMXRqYjJ4ZElDczlJREU3WEc0Z0lIMWNibHh1SUNBdkx5QkpaaUIzWlNCb1lYWmxJR0VnWTI5MlpYSWdhVzFoWjJVc0lHWnBaM1Z5WlNCdmRYUWdhRzkzSUdKcFp5QnBkQ0JwY3l3Z2RHaGxiaUJ0YjNabElHRnNiQ0IwYUdWY2JpQWdMeThnWlhocGMzUnBibWNnWTI5c2RXMXVjeUJ2ZG1WeUxseHVJQ0JwWmlBb1kyOTJaWElwSUh0Y2JpQWdJQ0JqYjI1emRDQmpiM1psY2tsdFlXZGxWMmxrZEdnZ1BTQk5ZWFJvTG1ObGFXd29iblZ0UTI5c2N5QXZJRElwSUNvZ0tIZHBaSFJvSUM4Z2JuVnRRMjlzY3lrN1hHNGdJQ0FnY0c5emFYUnBiMjV6SUQwZ2NHOXphWFJwYjI1ekxtMWhjQ2h3YjNOcGRHbHZiaUE5UGlBb2UxeHVJQ0FnSUNBZ0xpNHVjRzl6YVhScGIyNHNYRzRnSUNBZ0lDQnNaV1owT2lCamIzWmxja2x0WVdkbFYybGtkR2dnS3lCd2IzTnBkR2x2Ymk1c1pXWjBMRnh1SUNBZ0lIMHBLVHRjYmlBZ0lDQndiM05wZEdsdmJuTXVkVzV6YUdsbWRDaDdJSFJ2Y0RvZ01Dd2diR1ZtZERvZ01Dd2dkMmxrZEdnNklHTnZkbVZ5U1cxaFoyVlhhV1IwYUN3Z2FHVnBaMmgwSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeThnVkdocGN5QmhaR1J6SUhSb1pTQnpjR0ZqWlNCaVpYUjNaV1Z1SUdGdWVTQnBkR1Z0Y3lCMGFHRjBJSGRsSUdoaGRtVXVJRWwwSjNNZ2JtbGpaU0IwYnlCa2IxeHVJQ0F2THlCMGFHbHpJR0Z6SUdFZ2MyVndZWEpoZEdVZ2NHRnpjeUJoWm5SbGNpQmxkbVZ5ZVhSb2FXNW5JR1ZzYzJVc0lHSmxZMkYxYzJVZ2RHaGxJRzFoZEdnZ1pXRnliR2xsY2x4dUlDQXZMeUJpWldOdmJXVnpJR1ZoYzJsbGNpQmhibVFnYVhRbmN5QnNaWE56SUdKeWFYUjBiR1VnZEc4Z1kyaGhibWRsTGx4dUlDQnBaaUFvWjNWMGRHVnlLU0I3WEc0Z0lDQWdjRzl6YVhScGIyNXpJRDBnY0dGa1pHbHVaMEZzYkNobmRYUjBaWElzSUhCdmMybDBhVzl1Y3lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NHOXphWFJwYjI1ek8xeHVmVnh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1kyOXNkVzF1Y3pvZ1EyOXNkVzF1TEZ4dUlDQmpiM1psY2o4NklHSnZiMnhsWVc0c1hHNGdJR2QxZEhSbGNqODZJRzUxYldKbGNpeGNiaUFnYUdWcFoyaDBPaUJ1ZFcxaVpYSXNYRzRnSUd4aGVXOTFkRXRsZVQ4NklHNTFiV0psY2l4Y2JpQWdjbVZ1WkdWeVNXMWhaMlU2SUNoN2ZGeHVJQ0FnSUhkcFpIUm9PaUJ1ZFcxaVpYSXNYRzRnSUNBZ2FHVnBaMmgwT2lCdWRXMWlaWElzWEc0Z0lDQWdhVzVrWlhnNklHNTFiV0psY2l4Y2JpQWdmSDBwSUQwK0lGSmxZV04wTGs1dlpHVXNYRzRnSUhkcFpIUm9PaUJ1ZFcxaVpYSXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1EyOXNiR0ZuWlNod2NtOXdjem9nVUhKdmNITXBJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR052YkhWdGJuTXNYRzRnSUNBZ1kyOTJaWElzWEc0Z0lDQWdaM1YwZEdWeUxGeHVJQ0FnSUdobGFXZG9kQ3hjYmlBZ0lDQnNZWGx2ZFhSTFpYa3NYRzRnSUNBZ2NtVnVaR1Z5U1cxaFoyVXNYRzRnSUNBZ2QybGtkR2dzWEc0Z0lIMGdQU0J3Y205d2N6dGNiaUFnWTI5dWMzUWdjRzl6YVhScGIyNXpJRDBnWjJWMFEyOXNiR0ZuWlV4aGVXOTFkQ2g3WEc0Z0lDQWdZMjlzZFcxdWN5eGNiaUFnSUNCamIzWmxjam9nSVNGamIzWmxjaXhjYmlBZ0lDQjNhV1IwYUN4Y2JpQWdJQ0JvWldsbmFIUXNYRzRnSUNBZ1ozVjBkR1Z5T2lCbmRYUjBaWElnZkh3Z01DeGNiaUFnSUNCc1lYbHZkWFJMWlhrNklHeGhlVzkxZEV0bGVTQjhmQ0F3TEZ4dUlDQjlLVHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4UTI5c2JHVmpkR2x2Ymx4dUlDQWdJQ0FnU1hSbGJUMTdLSHNnYVdSNE9pQnBibVJsZUNCOUtTQTlQbHh1SUNBZ0lDQWdJQ0J5Wlc1a1pYSkpiV0ZuWlNoN1hHNGdJQ0FnSUNBZ0lDQWdhVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklIQnZjMmwwYVc5dWMxdHBibVJsZUYwdWQybGtkR2dzWEc0Z0lDQWdJQ0FnSUNBZ2FHVnBaMmgwT2lCd2IzTnBkR2x2Ym5OYmFXNWtaWGhkTG1obGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUd4aGVXOTFkRDE3Y0c5emFYUnBiMjV6ZlZ4dUlDQWdJQzgrWEc0Z0lDazdYRzU5WEc1Y2JrTnZiR3hoWjJVdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCamIyeDFiVzV6T2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3pJc0lETXNJRFJkS1M1cGMxSmxjWFZwY21Wa0xGeHVJQ0JqYjNabGNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJR2QxZEhSbGNqb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnYUdWcFoyaDBPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHeGhlVzkxZEV0bGVUb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnY21WdVpHVnlTVzFoWjJVNklGQnliM0JVZVhCbGN5NW1kVzVqTG1selVtVnhkV2x5WldRc1hHNGdJSGRwWkhSb09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxtbHpVbVZ4ZFdseVpXUXNYRzU5TzF4dUlpd2lMeThnUUdac2IzY2djM1J5YVdOMFhHNXBiWEJ2Y25RZ0tpQmhjeUJTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUdOc1lYTnpibUZ0WlhNZ1puSnZiU0FuWTJ4aGMzTnVZVzFsY3ljN1hHNXBiWEJ2Y25RZ2MzUjViR1Z6SUdaeWIyMGdKeTR2UTI5c2RXMXVRMjlzZFcxdUxtTnpjeWM3WEc1Y2JuUjVjR1VnUkdWd2NtVmpZWFJsWkVOdmJIVnRibk1nUFNBeElId2dNaUI4SURNZ2ZDQTBJSHdnTlNCOElEWWdmQ0EzSUh3Z09DQjhJRGtnZkNBeE1DQjhJREV4SUh3Z01USTdYRzUwZVhCbElFTnZiSFZ0Ym5NZ1BTQXdJSHdnTVNCOElESWdmQ0F6SUh3Z05DQjhJRFVnZkNBMklId2dOeUI4SURnZ2ZDQTVJSHdnTVRBZ2ZDQXhNU0I4SURFeU8xeHVYRzUwZVhCbElFTnZiSFZ0YmxCeWIzQnpJRDFjYmlBZ2ZDQjdmRnh1SUNBZ0lDQWdZMmhwYkdSeVpXNC9PaUJTWldGamRDNU9iMlJsTEZ4dUlDQWdJQ0FnYzNCaGJqb2dRMjlzZFcxdWN5eGNiaUFnSUNBZ0lITnRVM0JoYmo4NklFTnZiSFZ0Ym5Nc1hHNGdJQ0FnSUNCdFpGTndZVzQvT2lCRGIyeDFiVzV6TEZ4dUlDQWdJQ0FnYkdkVGNHRnVQem9nUTI5c2RXMXVjeXhjYmlBZ0lDQjhmVnh1SUNCOElIdDhYRzRnSUNBZ0lDQmphR2xzWkhKbGJqODZJRkpsWVdOMExrNXZaR1VzWEc0Z0lDQWdJQ0I0Y3o4NklFUmxjSEpsWTJGMFpXUkRiMngxYlc1ekxGeHVJQ0FnSUNBZ2MyMC9PaUJFWlhCeVpXTmhkR1ZrUTI5c2RXMXVjeXhjYmlBZ0lDQWdJRzFrUHpvZ1JHVndjbVZqWVhSbFpFTnZiSFZ0Ym5Nc1hHNGdJQ0FnSUNCc1p6ODZJRVJsY0hKbFkyRjBaV1JEYjJ4MWJXNXpMRnh1SUNBZ0lIeDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJEYjJ4MWJXNG9jSEp2Y0hNNklFTnZiSFZ0YmxCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUhzZ1kyaHBiR1J5Wlc0Z2ZTQTlJSEJ5YjNCek8xeHVJQ0JqYjI1emRDQmpjeUE5SUdOc1lYTnpibUZ0WlhNb1hHNGdJQ0FnS0hCeWIzQnpMbmh6SUNFOVBTQjFibVJsWm1sdVpXUWdmSHhjYmlBZ0lDQWdJSEJ5YjNCekxuTnRJQ0U5UFNCMWJtUmxabWx1WldRZ2ZIeGNiaUFnSUNBZ0lIQnliM0J6TG0xa0lDRTlQU0IxYm1SbFptbHVaV1FnZkh4Y2JpQWdJQ0FnSUhCeWIzQnpMbXhuSUNFOVBTQjFibVJsWm1sdVpXUXBJQ1ltWEc0Z0lDQWdJQ0J6ZEhsc1pYTXVaR1Z3Y21WallYUmxaRU52YkhWdGJpeGNiaUFnSUNCd2NtOXdjeTU0Y3lBbUppQnpkSGxzWlhOYllIaHpRMjlzSkh0d2NtOXdjeTU0YzMxZ1hTeGNiaUFnSUNCd2NtOXdjeTV6YlNBbUppQnpkSGxzWlhOYllITnRRMjlzSkh0d2NtOXdjeTV6YlgxZ1hTeGNiaUFnSUNCd2NtOXdjeTV0WkNBbUppQnpkSGxzWlhOYllHMWtRMjlzSkh0d2NtOXdjeTV0WkgxZ1hTeGNiaUFnSUNCd2NtOXdjeTVzWnlBbUppQnpkSGxzWlhOYllHeG5RMjlzSkh0d2NtOXdjeTVzWjMxZ1hTeGNiaUFnSUNCd2NtOXdjeTV6Y0dGdUlDRTlJRzUxYkd3Z0ppWWdjM1I1YkdWelcyQjRjME52YkNSN2NISnZjSE11YzNCaGJuMWdYU3hjYmlBZ0lDQndjbTl3Y3k1emJWTndZVzRnSVQwZ2JuVnNiQ0FtSmlCemRIbHNaWE5iWUhOdFEyOXNKSHR3Y205d2N5NXpiVk53WVc1OVlGMHNYRzRnSUNBZ2NISnZjSE11YldSVGNHRnVJQ0U5SUc1MWJHd2dKaVlnYzNSNWJHVnpXMkJ0WkVOdmJDUjdjSEp2Y0hNdWJXUlRjR0Z1ZldCZExGeHVJQ0FnSUhCeWIzQnpMbXhuVTNCaGJpQWhQU0J1ZFd4c0lDWW1JSE4wZVd4bGMxdGdiR2REYjJ3a2UzQnliM0J6TG14blUzQmhibjFnWFZ4dUlDQXBPMXh1SUNCeVpYUjFjbTRnUEdScGRpQmpiR0Z6YzA1aGJXVTllMk56ZlQ1N1kyaHBiR1J5Wlc1OVBDOWthWFkrTzF4dWZWeHVYRzVEYjJ4MWJXNHVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVc1hHNGdJSGh6T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQnpiVG9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ2JXUTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUd4bk9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0J6Y0dGdU9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0J6YlZOd1lXNDZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUcxa1UzQmhiam9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ2JHZFRjR0Z1T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1kyaHBiR1J5Wlc0L09pQlNaV0ZqZEM1T2IyUmxMRnh1ZkgwN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFTnZiblJoYVc1bGNpaHdjbTl3Y3pvZ1VISnZjSE1wSUh0Y2JpQWdZMjl1YzNRZ2V5QmphR2xzWkhKbGJpQjlJRDBnY0hKdmNITTdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRUp2ZUNCcWRYTjBhV1o1UTI5dWRHVnVkRDFjSW1ObGJuUmxjbHdpSUdScGMzQnNZWGs5WENKbWJHVjRYQ0krWEc0Z0lDQWdJQ0E4UW05NElHMWhlRmRwWkhSb1BYczRNREI5SUhkcFpIUm9QVndpTVRBd0pWd2lQbHh1SUNBZ0lDQWdJQ0I3WTJocGJHUnlaVzU5WEc0Z0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBOEwwSnZlRDVjYmlBZ0tUdGNibjFjYmx4dVEyOXVkR0ZwYm1WeUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1kyaHBiR1J5Wlc0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElITjBlV3hsY3lCbWNtOXRJQ2N1TDBScGRtbGtaWEl1WTNOekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdSR2wyYVdSbGNpZ3BJSHRjYmlBZ2NtVjBkWEp1SUR4b2NpQmpiR0Z6YzA1aGJXVTllM04wZVd4bGN5NWthWFpwWkdWeWZTQXZQanRjYm4xY2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0Y2JpQWdaR2x5WldOMGFXOXVQem9nUHlkMWNDY2dmQ0FuY21sbmFIUW5JSHdnSjJSdmQyNG5JSHdnSjJ4bFpuUW5MRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1EyRnlaWFFvY0hKdmNITTZJRkJ5YjNCektTQjdYRzRnSUdOdmJuTjBJSHNnWkdseVpXTjBhVzl1SUgwZ1BTQndjbTl3Y3p0Y2JpQWdiR1YwSUhCaGRHZzdYRzRnSUhOM2FYUmphQ0FvWkdseVpXTjBhVzl1S1NCN1hHNGdJQ0FnWTJGelpTQW5kWEFuT2x4dUlDQWdJQ0FnY0dGMGFDQTlJQ2ROTUNBd0lFd3hNaUF4TWlCTU1qUWdNQ2M3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJQ2R5YVdkb2RDYzZYRzRnSUNBZ0lDQndZWFJvSUQwZ0owMHlOQ0F3SUV3eE1pQXhNaUJNTWpRZ01qUW5PMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5aRzkzYmljNlhHNGdJQ0FnSUNCd1lYUm9JRDBnSjAwd0lESTBJRXd4TWlBeE1pQk1NalFnTWpRbk8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBbmJHVm1kQ2M2WEc0Z0lDQWdJQ0J3WVhSb0lEMGdKMDB3SURBZ1RERXlJREV5SUV3d0lESTBKenRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHh6ZG1jZ2QybGtkR2c5WENJeU5Gd2lJR2hsYVdkb2REMWNJakkwWENJK1hHNGdJQ0FnSUNBOGNHRjBhQ0JrUFh0d1lYUm9mU0F2UGx4dUlDQWdJRHd2YzNablBseHVJQ0FwTzF4dWZWeHVYRzVEWVhKbGRDNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHUnBjbVZqZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25kWEFuTENBbmNtbG5hSFFuTENBblpHOTNiaWNzSUNkc1pXWjBKMTBwTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRU5oY21WMElHWnliMjBnSnk0dlEyRnlaWFF1YW5Nbk8xeHVhVzF3YjNKMElITjBlV3hsY3lCbWNtOXRJQ2N1TDBOdmJuUmxiblJ6TG1OemN5YzdYRzVwYlhCdmNuUWdZbTl5WkdWeWN5Qm1jbTl0SUNjdUwwSnZjbVJsY25NdVkzTnpKenRjYm1sdGNHOXlkQ0JqYjJ4dmNuTWdabkp2YlNBbkxpOURiMnh2Y25NdVkzTnpKenRjYmx4dUx5b2dUbVZsWkdWa0lIVnVkR2xzSUhSb2FYTWdSbXh2ZHlCcGMzTjFaU0JwY3lCbWFYaGxaRG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaFkyVmliMjlyTDJac2IzY3ZhWE56ZFdWekx6TTRNQ0FxTDF4dUx5b2daWE5zYVc1MElIRjFiM1JsTFhCeWIzQnpPaUF3SUNvdlhHNWpiMjV6ZENCVFVFRkRSVk5mU1U1RVJWaGZUVUZRSUQwZ2UxeHVJQ0FuTUNjNklDZDFjQ2NzWEc0Z0lDY3hKem9nSjNKcFoyaDBKeXhjYmlBZ0p6SW5PaUFuWkc5M2JpY3NYRzRnSUNjekp6b2dKMnhsWm5RbkxGeHVmVHRjYmx4dVkyOXVjM1FnUkVsU1gwbE9SRVZZWDAxQlVDQTlJSHRjYmlBZ2RYQTZJREFzWEc0Z0lISnBaMmgwT2lBeExGeHVJQ0JrYjNkdU9pQXlMRnh1SUNCc1pXWjBPaUF6TEZ4dWZUdGNibHh1WTI5dWMzUWdUVUZTUjBsT0lEMGdNalE3WEc1bGVIQnZjblFnWTI5dWMzUWdRMEZTUlZSZlNFVkpSMGhVSUQwZ01qUTdYRzVqYjI1emRDQkRRVkpGVkY5UFJrWlRSVlJmUmxKUFRWOVRTVVJGSUQwZ01qUTdYRzVsZUhCdmNuUWdZMjl1YzNRZ1FrOVNSRVZTWDFKQlJFbFZVeUE5SURnN1hHNWNiblI1Y0dVZ1RXRnBia1JwY2lBOUlEOG9KM1Z3SnlCOElDZHlhV2RvZENjZ2ZDQW5aRzkzYmljZ2ZDQW5iR1ZtZENjcE8xeHVkSGx3WlNCVGRXSkVhWElnUFNBbmRYQW5JSHdnSjNKcFoyaDBKeUI4SUNka2IzZHVKeUI4SUNkc1pXWjBKeUI4SUNkdGFXUmtiR1VuTzF4dVhHNTBlWEJsSUVOc2FXVnVkRkpsWTNRZ1BTQjdYRzRnSUdKdmRIUnZiVG9nYm5WdFltVnlMRnh1SUNCb1pXbG5hSFE2SUc1MWJXSmxjaXhjYmlBZ2JHVm1kRG9nYm5WdFltVnlMRnh1SUNCeWFXZG9kRG9nYm5WdFltVnlMRnh1SUNCMGIzQTZJRzUxYldKbGNpeGNiaUFnZDJsa2RHZzZJRzUxYldKbGNpeGNibjA3WEc1Y2JuUjVjR1VnVjJsdVpHOTNJRDBnZTF4dUlDQm9aV2xuYUhRNklHNTFiV0psY2l4Y2JpQWdkMmxrZEdnNklHNTFiV0psY2l4Y2JpQWdjMk55YjJ4c1dUb2diblZ0WW1WeUxGeHVJQ0J6WTNKdmJHeFlPaUJ1ZFcxaVpYSXNYRzU5TzF4dVhHNTBlWEJsSUVac2VXOTFkQ0E5SUhzZ2FHVnBaMmgwT2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSWdmVHRjYmx4dWRIbHdaU0JUYUdsbWRDQTlJSHNnZURvZ2JuVnRZbVZ5TENCNU9pQnVkVzFpWlhJZ2ZUdGNibHh1ZEhsd1pTQkZaR2RsVTJocFpuUWdQU0I3SUdOaGNtVjBPaUJUYUdsbWRDd2dabXg1YjNWME9pQlRhR2xtZENCOU8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWW1kRGIyeHZjam9nSjJKc2RXVW5JSHdnSjJSaGNtdEhjbUY1SnlCOElDZHZjbUZ1WjJVbklId2dKM0psWkNjZ2ZDQW5kMmhwZEdVbkxGeHVJQ0JpYjNKa1pYSS9PaUJpYjI5c1pXRnVMRnh1SUNCallYSmxkRDg2SUdKdmIyeGxZVzRzWEc0Z0lHTm9hV3hrY21WdVB6b2dVbVZoWTNRdVRtOWtaU3hjYmlBZ2FXUmxZV3hFYVhKbFkzUnBiMjQvT2lBbmRYQW5JSHdnSjNKcFoyaDBKeUI4SUNka2IzZHVKeUI4SUNkc1pXWjBKeXhjYmlBZ2IyNUxaWGxFYjNkdU9pQW9aWFpsYm5RNklIc2dhMlY1UTI5a1pUb2diblZ0WW1WeUlIMHBJRDArSUhadmFXUXNYRzRnSUc5dVVtVnphWHBsT2lBb0tTQTlQaUIyYjJsa0xGeHVJQ0J3YjNOcGRHbHZibEpsYkdGMGFYWmxWRzlCYm1Ob2IzSS9PaUJpYjI5c1pXRnVMRnh1SUNCeVpXeGhkR2wyWlU5bVpuTmxkRG9nZTF4dUlDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQjVPaUJ1ZFcxaVpYSXNYRzRnSUgwc1hHNGdJSEp2ZFc1a2FXNW5Qem9nTWlCOElEUXNYRzRnSUhOb2IzVnNaRVp2WTNWelB6b2dZbTl2YkdWaGJpeGNiaUFnZEhKcFoyZGxjbEpsWTNRNklFTnNhV1Z1ZEZKbFkzUXNYRzRnSUhkcFpIUm9PaUEvYm5WdFltVnlMRnh1ZkgwN1hHNWNiblI1Y0dVZ1UzUmhkR1VnUFNCN2ZGeHVJQ0JtYkhsdmRYUlBabVp6WlhRNklIdDhYRzRnSUNBZ2RHOXdPaUEvYm5WdFltVnlMRnh1SUNBZ0lHeGxablE2SUQ5dWRXMWlaWElzWEc0Z0lIeDlMRnh1SUNCallYSmxkRTltWm5ObGREb2dlMXh1SUNBZ0lIUnZjRG9nUDI1MWJXSmxjaXhjYmlBZ0lDQnlhV2RvZERvZ1AyNTFiV0psY2l4Y2JpQWdJQ0JpYjNSMGIyMDZJRDl1ZFcxaVpYSXNYRzRnSUNBZ2JHVm1kRG9nUDI1MWJXSmxjaXhjYmlBZ2ZTeGNiaUFnYldGcGJrUnBjam9nUDAxaGFXNUVhWElzWEc0Z0lHWnNlVzkxZEZKbFpqb2dQMGhVVFV4RmJHVnRaVzUwTEZ4dWZIMDdYRzVjYmk4cUtseHVJQ29nUkdWMFpYSnRhVzVsY3lCMGFHVWdiV0ZwYmlCa2FYSmxZM1JwYjI0Z2RHaGxJR1pzZVc5MWRDQnZjR1Z1YzF4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVFdGcGJrUnBjaWhjYmlBZ1pteDViM1YwVTJsNlpUb2dSbXg1YjNWMExGeHVJQ0JwWkdWaGJFUnBjbVZqZEdsdmJqb2dUV0ZwYmtScGNpeGNiaUFnZEhKcFoyZGxjbEpsWTNRNklFTnNhV1Z1ZEZKbFkzUXNYRzRnSUhkcGJtUnZkMU5wZW1VNklGZHBibVJ2ZDF4dUtTQjdYRzRnSUM4dklFTmhiR04xYkdGMFpYTWdkR2hsSUdGMllXbHNZV0pzWlNCemNHRmpaU0JwWmlCM1pTQjNaWEpsSUhSdklIQnNZV05sSUhSb1pTQm1iSGx2ZFhRZ2FXNGdkR2hsSURRZ2JXRnBiaUJrYVhKbFkzUnBiMjV6WEc0Z0lDOHZJSFJ2SUdSbGRHVnliV2x1WlNCM2FHbGphQ0FuY1hWaFpISmhiblFuSUhSdklIQnZjMmwwYVc5dUlIUm9aU0JtYkhsdmRYUWdhVzV6YVdSbElHOW1YRzRnSUd4bGRDQjFjQ0E5SUhSeWFXZG5aWEpTWldOMExuUnZjQ0F0SUdac2VXOTFkRk5wZW1VdWFHVnBaMmgwSUMwZ1EwRlNSVlJmU0VWSlIwaFVPMXh1SUNCc1pYUWdjbWxuYUhRZ1BWeHVJQ0FnSUhkcGJtUnZkMU5wZW1VdWQybGtkR2dnTFNCbWJIbHZkWFJUYVhwbExuZHBaSFJvSUMwZ1EwRlNSVlJmU0VWSlIwaFVJQzBnZEhKcFoyZGxjbEpsWTNRdWNtbG5hSFE3WEc0Z0lHeGxkQ0JrYjNkdUlEMWNiaUFnSUNCM2FXNWtiM2RUYVhwbExtaGxhV2RvZENBdElHWnNlVzkxZEZOcGVtVXVhR1ZwWjJoMElDMGdRMEZTUlZSZlNFVkpSMGhVSUMwZ2RISnBaMmRsY2xKbFkzUXVZbTkwZEc5dE8xeHVJQ0JzWlhRZ2JHVm1kQ0E5SUhSeWFXZG5aWEpTWldOMExteGxablFnTFNCbWJIbHZkWFJUYVhwbExuZHBaSFJvSUMwZ1EwRlNSVlJmU0VWSlIwaFVPMXh1WEc0Z0lDOHZJRzkyWlhKeWFXUmxjeUJoZG1GcGJHRmliR1VnYzNCaFkyVWdkMmhsYmlCMGFHVWdkSEpwWjJkbGNpQnBjeUJqYkc5elpTQjBieUIwYUdVZ1pXUm5aU0J2WmlCMGFHVWdjMk55WldWdVhHNGdJQzh2SUhSeWFXZG5aWElnYVhNZ2RHOXZJR05zYjNObElIUnZJSFJ2Y0M5aWIzUjBiMjBnYjJZZ2MyTnlaV1Z1SUdadmNpQnNaV1owSUNZZ2NtbG5hSFFnWm14NWIzVjBjMXh1SUNCcFppQW9YRzRnSUNBZ2RISnBaMmRsY2xKbFkzUXVkRzl3SUR3Z1FrOVNSRVZTWDFKQlJFbFZVeUI4ZkZ4dUlDQWdJSGRwYm1SdmQxTnBlbVV1YUdWcFoyaDBJQzBnZEhKcFoyZGxjbEpsWTNRdVltOTBkRzl0SUR3Z1FrOVNSRVZTWDFKQlJFbFZVMXh1SUNBcElIdGNiaUFnSUNCc1pXWjBJRDBnTUR0Y2JpQWdJQ0J5YVdkb2RDQTlJREE3WEc0Z0lIMWNibHh1SUNBdkx5QjBjbWxuWjJWeUlHbHpJSFJ2YnlCamJHOXpaU0IwYnlCMGFHVWdiR1ZtZEM5eWFXZG9kQ0J2WmlCelkzSmxaVzRnWm05eUlIVndJQ1lnWkc5M2JpQm1iSGx2ZFhSelhHNGdJR2xtSUNoY2JpQWdJQ0IwY21sbloyVnlVbVZqZEM1c1pXWjBJRHdnUWs5U1JFVlNYMUpCUkVsVlV5QjhmRnh1SUNBZ0lIZHBibVJ2ZDFOcGVtVXVkMmxrZEdnZ0xTQjBjbWxuWjJWeVVtVmpkQzV5YVdkb2RDQThJRUpQVWtSRlVsOVNRVVJKVlZOY2JpQWdLU0I3WEc0Z0lDQWdkWEFnUFNBd08xeHVJQ0FnSUdSdmQyNGdQU0F3TzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYzNCaFkyVnpJRDBnVzNWd0xDQnlhV2RvZEN3Z1pHOTNiaXdnYkdWbWRGMDdYRzVjYmlBZ0x5OGdTV1JsYm5ScFpua2dZbVZ6ZENCa2FYSmxZM1JwYjI0Z2IyWWdZWFpoYVd4aFlteGxJSE53WVdObGMxeHVJQ0JqYjI1emRDQnRZWGdnUFNCTllYUm9MbTFoZUNndUxpNXpjR0ZqWlhNcE8xeHVYRzRnSUM4dklFTm9iM05sSUhSb1pTQnRZV2x1SUdScGNtVmpkR2x2YmlCbWIzSWdkR2hsSUdac2VXOTFkQ0JpWVhObFpDQnZiaUJoZG1GcGJHRmliR1VnYzNCaFkyVnpJQ1lnZFhObGNpQndjbVZtWlhKbGJtTmxYRzRnSUd4bGRDQnRZV2x1UkdseU8xeHVJQ0JwWmlBb2FXUmxZV3hFYVhKbFkzUnBiMjRnSmlZZ2MzQmhZMlZ6VzBSSlVsOUpUa1JGV0Y5TlFWQmJhV1JsWVd4RWFYSmxZM1JwYjI1ZFhTQStJREFwSUh0Y2JpQWdJQ0F2THlCMWMyVnlJSEJ5WldaY2JpQWdJQ0J0WVdsdVJHbHlJRDBnYVdSbFlXeEVhWEpsWTNScGIyNDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnU1dZZ2JtOGdaR2x5WldOMGFXOXVJSEJ5WldZc0lHTm9iM05sSUhSb1pTQmthWEpsWTNScGIyNGdhVzRnZDJocFkyZ2dkR2hsY21VZ2FYTWdkR2hsSUcxdmMzUWdjM0JoWTJVZ1lYWmhhV3hoWW14bFhHNGdJQ0FnYldGcGJrUnBjaUE5SUZOUVFVTkZVMTlKVGtSRldGOU5RVkJiYzNCaFkyVnpMbWx1WkdWNFQyWW9iV0Y0S1YwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUcxaGFXNUVhWEk3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1YwWlhKdGFXNWxjeUIwYUdVZ2MzVmlJR1JwY21WamRHbHZiaUJ2WmlCb2IzY2dkR2hsSUdac2VXOTFkQ0JwY3lCd2IzTnBkR2x2Ym1Wa0lIZHBkR2hwYmlCMGFHVWdiV0ZwYmlCa2FYSmNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRGTjFZa1JwY2loY2JpQWdabXg1YjNWMFUybDZaVG9nUm14NWIzVjBMRnh1SUNCdFlXbHVSR2x5T2lCTllXbHVSR2x5TEZ4dUlDQjBjbWxuWjJWeVVtVmpkRG9nUTJ4cFpXNTBVbVZqZEN4Y2JpQWdkMmx1Wkc5M1UybDZaVG9nVjJsdVpHOTNYRzRwSUh0Y2JpQWdMeThnVG05M0lIUm9ZWFFnZDJVZ2FHRjJaU0IwYUdVZ2JXRnBiaUJrYVhKbFkzUnBiMjRzSUdOb2IzTmxJR1p5YjIwZ015QmpZWEpsZENCd2JHRmpaVzFsYm5SeklHWnZjaUIwYUdGMElHUnBjbVZqZEdsdmJseHVJQ0JzWlhRZ2IyWm1jMlYwTzF4dUlDQnNaWFFnZEhKcFoyZGxjazFwWkR0Y2JpQWdiR1YwSUhkcGJtUnZkMU53WVdObFFYWmhhV3hoWW14bE8xeHVYRzRnSUdsbUlDaHRZV2x1UkdseUlEMDlQU0FuY21sbmFIUW5JSHg4SUcxaGFXNUVhWElnUFQwOUlDZHNaV1owSnlrZ2UxeHVJQ0FnSUc5bVpuTmxkQ0E5SUdac2VXOTFkRk5wZW1VdWFHVnBaMmgwSUM4Z01qdGNiaUFnSUNCMGNtbG5aMlZ5VFdsa0lEMGdkSEpwWjJkbGNsSmxZM1F1ZEc5d0lDc2dLSFJ5YVdkblpYSlNaV04wTG1KdmRIUnZiU0F0SUhSeWFXZG5aWEpTWldOMExuUnZjQ2tnTHlBeU8xeHVJQ0FnSUhkcGJtUnZkMU53WVdObFFYWmhhV3hoWW14bElEMGdkMmx1Wkc5M1UybDZaUzVvWldsbmFIUTdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnS0cxaGFXNUVhWElnUFQwOUlDZDFjQ2NnZkh3Z2JXRnBia1JwY2lBOVBUMGdKMlJ2ZDI0bktWeHVJQ0FnSUc5bVpuTmxkQ0E5SUdac2VXOTFkRk5wZW1VdWQybGtkR2dnTHlBeU8xeHVJQ0FnSUhSeWFXZG5aWEpOYVdRZ1BTQjBjbWxuWjJWeVVtVmpkQzVzWldaMElDc2dLSFJ5YVdkblpYSlNaV04wTG5KcFoyaDBJQzBnZEhKcFoyZGxjbEpsWTNRdWJHVm1kQ2tnTHlBeU8xeHVJQ0FnSUhkcGJtUnZkMU53WVdObFFYWmhhV3hoWW14bElEMGdkMmx1Wkc5M1UybDZaUzUzYVdSMGFEdGNiaUFnZlZ4dVhHNGdJR052Ym5OMElHRmliM1psVDNKTVpXWjBJRDBnZEhKcFoyZGxjazFwWkNBdElHOW1abk5sZENBdElFMUJVa2RKVGp0Y2JpQWdZMjl1YzNRZ1ltVnNiM2RQY2xKcFoyaDBJRDBnZDJsdVpHOTNVM0JoWTJWQmRtRnBiR0ZpYkdVZ0xTQjBjbWxuWjJWeVRXbGtJQzBnYjJabWMyVjBJQzBnVFVGU1IwbE9PMXh1SUNCc1pYUWdjM1ZpUkdseU8xeHVJQ0JwWmlBb1lXSnZkbVZQY2t4bFpuUWdQaUF3SUNZbUlHSmxiRzkzVDNKU2FXZG9kQ0ErSURBcElIdGNiaUFnSUNBdkx5QmpZWEpsZENCemFHOTFiR1FnWjI4Z2FXNGdiV2xrWkd4bElHSXZZeUJwZENCallXNWNiaUFnSUNCemRXSkVhWElnUFNBbmJXbGtaR3hsSnp0Y2JpQWdmU0JsYkhObElHbG1JQ2hpWld4dmQwOXlVbWxuYUhRZ1BpQXdLU0I3WEc0Z0lDQWdMeThnWTJGeVpYUWdjMmh2ZFd4a0lHZHZJR0YwSUhSdmNDQm1iM0lnYkdWbWRDOXlhV2RvZENCaGJtUWdiR1ZtZENCbWIzSWdkWEF2Wkc5M2JseHVJQ0FnSUhOMVlrUnBjaUE5SUcxaGFXNUVhWElnUFQwOUlDZHNaV1owSnlCOGZDQnRZV2x1UkdseUlEMDlQU0FuY21sbmFIUW5JRDhnSjNWd0p5QTZJQ2RzWldaMEp6dGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJqWVhKbGRDQnphRzkxYkdRZ1oyOGdZWFFnWW05MGRHOXRJR1p2Y2lCc1pXWjBMM0pwWjJoMElHRnVaQ0J5YVdkb2RDQm1iM0lnZFhBdlpHOTNibHh1SUNBZ0lITjFZa1JwY2lBOUlHMWhhVzVFYVhJZ1BUMDlJQ2RzWldaMEp5QjhmQ0J0WVdsdVJHbHlJRDA5UFNBbmNtbG5hSFFuSUQ4Z0oyUnZkMjRuSURvZ0ozSnBaMmgwSnp0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYzNWaVJHbHlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTmhiR04xYkdGMFpYTWdkR2hsSUdGdGIzVnVkQ0IwYUdVZ1pteDViM1YwSUNZZ1kyRnlaWFFnYm1WbFpDQjBieUJ6YUdsbWRDQnZkbVZ5SUhSdklHRnNhV2R1SUhkcGRHZ2daR1Z6YVdkdWMxeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTJGc1kwVmtaMlZUYUdsbWRITW9YRzRnSUhOMVlrUnBjam9nVTNWaVJHbHlMRnh1SUNCMGNtbG5aMlZ5VW1WamREb2dRMnhwWlc1MFVtVmpkQ3hjYmlBZ2QybHVaRzkzVTJsNlpUb2dWMmx1Wkc5M1hHNHBJSHRjYmlBZ0x5OGdWR0Z5WjJWMElIWmhiSFZsY3lCbWIzSWdabXg1YjNWMElHRnVaQ0JqWVhKbGRDQnphR2xtZEhOY2JpQWdiR1YwSUdac2VXOTFkRlpsY25ScFkyRnNVMmhwWm5RZ1BWeHVJQ0FnSUVOQlVrVlVYMDlHUmxORlZGOUdVazlOWDFOSlJFVWdMU0FvZEhKcFoyZGxjbEpsWTNRdWFHVnBaMmgwSUMwZ1EwRlNSVlJmU0VWSlIwaFVLU0F2SURJN1hHNGdJR3hsZENCbWJIbHZkWFJJYjNKcGVtOXVkR0ZzVTJocFpuUWdQVnh1SUNBZ0lFTkJVa1ZVWDA5R1JsTkZWRjlHVWs5TlgxTkpSRVVnTFNBb2RISnBaMmRsY2xKbFkzUXVkMmxrZEdnZ0xTQkRRVkpGVkY5SVJVbEhTRlFwSUM4Z01qdGNiaUFnYkdWMElHTmhjbVYwVm1WeWRHbGpZV3hUYUdsbWRDQTlJRU5CVWtWVVgwaEZTVWRJVkR0Y2JpQWdiR1YwSUdOaGNtVjBTRzl5YVhwdmJuUmhiRk5vYVdaMElEMGdRMEZTUlZSZlNFVkpSMGhVTzF4dVhHNGdJQzh2SUVOdmRtVnljeUJsWkdkbElHTmhjMlVnZDJobGNtVWdkSEpwWjJkbGNpQnBjeUJwYmlCaElHTnZjbTVsY2lCaGJtUWdkMlVnYm1WbFpDQjBieUJoWkdwMWMzUWdkR2hsSUc5bVpuTmxkQ0J2WmlCMGFHVWdZMkZ5WlhSY2JpQWdMeThnZEc4Z2MyOXRaWFJvYVc1bklITnRZV3hzWlhJZ2RHaGhiaUJ1YjNKdFlXd2dhVzRnYjNKa1pYSmNiaUFnWTI5dWMzUWdhWE5EYkc5elpWWmxjblJwWTJGc2JIa2dQVnh1SUNBZ0lIUnlhV2RuWlhKU1pXTjBMblJ2Y0NBdElHWnNlVzkxZEZabGNuUnBZMkZzVTJocFpuUWdQQ0F3SUh4OFhHNGdJQ0FnZEhKcFoyZGxjbEpsWTNRdVltOTBkRzl0SUNzZ1pteDViM1YwVm1WeWRHbGpZV3hUYUdsbWRDQStJSGRwYm1SdmQxTnBlbVV1YUdWcFoyaDBPMXh1SUNCamIyNXpkQ0JwYzBOc2IzTmxTRzl5YVhwdmJuUmhiR3g1SUQxY2JpQWdJQ0IwY21sbloyVnlVbVZqZEM1c1pXWjBJQzBnWm14NWIzVjBTRzl5YVhwdmJuUmhiRk5vYVdaMElEd2dNQ0I4ZkZ4dUlDQWdJSFJ5YVdkblpYSlNaV04wTG5KcFoyaDBJQ3NnWm14NWIzVjBTRzl5YVhwdmJuUmhiRk5vYVdaMElENGdkMmx1Wkc5M1UybDZaUzUzYVdSMGFEdGNiaUFnYVdZZ0tHbHpRMnh2YzJWV1pYSjBhV05oYkd4NUtTQjdYRzRnSUNBZ1pteDViM1YwVm1WeWRHbGpZV3hUYUdsbWRDQTlYRzRnSUNBZ0lDQkNUMUpFUlZKZlVrRkVTVlZUSUMwZ0tIUnlhV2RuWlhKU1pXTjBMbWhsYVdkb2RDQXRJRU5CVWtWVVgwaEZTVWRJVkNrZ0x5QXlPMXh1SUNBZ0lHTmhjbVYwVm1WeWRHbGpZV3hUYUdsbWRDQTlJRUpQVWtSRlVsOVNRVVJKVlZNN1hHNGdJSDFjYmlBZ2FXWWdLR2x6UTJ4dmMyVkliM0pwZW05dWRHRnNiSGtwSUh0Y2JpQWdJQ0JtYkhsdmRYUkliM0pwZW05dWRHRnNVMmhwWm5RZ1BWeHVJQ0FnSUNBZ1FrOVNSRVZTWDFKQlJFbFZVeUF0SUNoMGNtbG5aMlZ5VW1WamRDNTNhV1IwYUNBdElFTkJVa1ZVWDBoRlNVZElWQ2tnTHlBeU8xeHVJQ0FnSUdOaGNtVjBTRzl5YVhwdmJuUmhiRk5vYVdaMElEMGdRazlTUkVWU1gxSkJSRWxWVXp0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnWm14NWIzVjBPaUI3WEc0Z0lDQWdJQ0I0T2lCbWJIbHZkWFJJYjNKcGVtOXVkR0ZzVTJocFpuUXNYRzRnSUNBZ0lDQjVPaUJtYkhsdmRYUldaWEowYVdOaGJGTm9hV1owTEZ4dUlDQWdJSDBzWEc0Z0lDQWdZMkZ5WlhRNklIdGNiaUFnSUNBZ0lIZzZJR05oY21WMFNHOXlhWHB2Ym5SaGJGTm9hV1owTEZ4dUlDQWdJQ0FnZVRvZ1kyRnlaWFJXWlhKMGFXTmhiRk5vYVdaMExGeHVJQ0FnSUgwc1hHNGdJSDA3WEc1OVhHNWNiaThxS2x4dUlDb2dRMkZzWTNWc1lYUmxjeUJtYkhsdmRYUWdZVzVrSUdOaGNtVjBJRzltWm5ObGRITWdabTl5SUhOMGVXeHBibWRjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHRmthblZ6ZEU5bVpuTmxkSE1vWEc0Z0lHSmhjMlU2SUhzZ2RHOXdPaUJ1ZFcxaVpYSXNJR3hsWm5RNklHNTFiV0psY2lCOUxGeHVJQ0JsWkdkbFUyaHBablE2SUVWa1oyVlRhR2xtZEN4Y2JpQWdabXg1YjNWMFUybDZaVG9nUm14NWIzVjBMRnh1SUNCdFlXbHVSR2x5T2lCTllXbHVSR2x5TEZ4dUlDQnpkV0pFYVhJNklGTjFZa1JwY2l4Y2JpQWdkSEpwWjJkbGNsSmxZM1E2SUVOc2FXVnVkRkpsWTNSY2Jpa2dlMXh1SUNCc1pYUWdabXg1YjNWMFRHVm1kQ0E5SUdKaGMyVXViR1ZtZER0Y2JpQWdiR1YwSUdac2VXOTFkRlJ2Y0NBOUlHSmhjMlV1ZEc5d08xeHVYRzRnSUd4bGRDQmpZWEpsZEZSdmNDQTlJRzFoYVc1RWFYSWdQVDA5SUNka2IzZHVKeUEvSUMxRFFWSkZWRjlJUlVsSFNGUWdPaUJ1ZFd4c08xeHVJQ0JzWlhRZ1kyRnlaWFJTYVdkb2RDQTlJRzFoYVc1RWFYSWdQVDA5SUNkc1pXWjBKeUEvSUMxRFFWSkZWRjlJUlVsSFNGUWdLeUF5SURvZ2JuVnNiRHRjYmlBZ2JHVjBJR05oY21WMFFtOTBkRzl0SUQwZ2JXRnBia1JwY2lBOVBUMGdKM1Z3SnlBL0lDMURRVkpGVkY5SVJVbEhTRlFnT2lCdWRXeHNPMXh1SUNCc1pYUWdZMkZ5WlhSTVpXWjBJRDBnYldGcGJrUnBjaUE5UFQwZ0ozSnBaMmgwSnlBL0lDMURRVkpGVkY5SVJVbEhTRlFnS3lBeUlEb2diblZzYkR0Y2JseHVJQ0JwWmlBb2MzVmlSR2x5SUQwOVBTQW5kWEFuS1NCN1hHNGdJQ0FnWm14NWIzVjBWRzl3SUQwZ1ltRnpaUzUwYjNBZ0xTQmxaR2RsVTJocFpuUXVabXg1YjNWMExuazdYRzRnSUNBZ1kyRnlaWFJVYjNBZ1BTQmxaR2RsVTJocFpuUXVZMkZ5WlhRdWVUdGNiaUFnZlNCbGJITmxJR2xtSUNoemRXSkVhWElnUFQwOUlDZGtiM2R1SnlrZ2UxeHVJQ0FnSUdac2VXOTFkRlJ2Y0NBOVhHNGdJQ0FnSUNCaVlYTmxMblJ2Y0NBdElHWnNlVzkxZEZOcGVtVXVhR1ZwWjJoMElDc2dkSEpwWjJkbGNsSmxZM1F1YUdWcFoyaDBJQ3NnWldSblpWTm9hV1owTG1ac2VXOTFkQzU1TzF4dUlDQWdJR05oY21WMFFtOTBkRzl0SUQwZ1pXUm5aVk5vYVdaMExtTmhjbVYwTG5rN1hHNGdJSDBnWld4elpTQnBaaUFvYzNWaVJHbHlJRDA5UFNBbmJHVm1kQ2NwSUh0Y2JpQWdJQ0JtYkhsdmRYUk1aV1owSUQwZ1ltRnpaUzVzWldaMElDMGdaV1JuWlZOb2FXWjBMbVpzZVc5MWRDNTRPMXh1SUNBZ0lHTmhjbVYwVEdWbWRDQTlJR1ZrWjJWVGFHbG1kQzVqWVhKbGRDNTRPMXh1SUNCOUlHVnNjMlVnYVdZZ0tITjFZa1JwY2lBOVBUMGdKM0pwWjJoMEp5a2dlMXh1SUNBZ0lHWnNlVzkxZEV4bFpuUWdQVnh1SUNBZ0lDQWdZbUZ6WlM1c1pXWjBJQzBnWm14NWIzVjBVMmw2WlM1M2FXUjBhQ0FySUhSeWFXZG5aWEpTWldOMExuZHBaSFJvSUNzZ1pXUm5aVk5vYVdaMExtWnNlVzkxZEM1NE8xeHVJQ0FnSUdOaGNtVjBVbWxuYUhRZ1BTQmxaR2RsVTJocFpuUXVZMkZ5WlhRdWVEdGNiaUFnZlNCbGJITmxJR2xtSUNoemRXSkVhWElnUFQwOUlDZHRhV1JrYkdVbktTQjdYRzRnSUNBZ2FXWWdLRzFoYVc1RWFYSWdQVDA5SUNkc1pXWjBKeUI4ZkNCdFlXbHVSR2x5SUQwOVBTQW5jbWxuYUhRbktTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCMGNtbG5aMlZ5VFdsa0lEMGdabXg1YjNWMFZHOXdJQ3NnZEhKcFoyZGxjbEpsWTNRdWFHVnBaMmgwSUM4Z01qdGNiaUFnSUNBZ0lHWnNlVzkxZEZSdmNDQTlJSFJ5YVdkblpYSk5hV1FnTFNCbWJIbHZkWFJUYVhwbExtaGxhV2RvZENBdklESTdYRzRnSUNBZ0lDQmpZWEpsZEZSdmNDQTlJQ2htYkhsdmRYUlRhWHBsTG1obGFXZG9kQ0F0SUVOQlVrVlVYMGhGU1VkSVZDa2dMeUF5TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYldGcGJrUnBjaUE5UFQwZ0ozVndKeUI4ZkNCdFlXbHVSR2x5SUQwOVBTQW5aRzkzYmljcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhSeWFXZG5aWEpOYVdRZ1BTQm1iSGx2ZFhSTVpXWjBJQ3NnZEhKcFoyZGxjbEpsWTNRdWQybGtkR2dnTHlBeU8xeHVJQ0FnSUNBZ1pteDViM1YwVEdWbWRDQTlJSFJ5YVdkblpYSk5hV1FnTFNCbWJIbHZkWFJUYVhwbExuZHBaSFJvSUM4Z01qdGNiaUFnSUNBZ0lHTmhjbVYwVEdWbWRDQTlJQ2htYkhsdmRYUlRhWHBsTG5kcFpIUm9JQzBnUTBGU1JWUmZTRVZKUjBoVUtTQXZJREk3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQm1iSGx2ZFhSUFptWnpaWFE2SUh0Y2JpQWdJQ0FnSUhSdmNEb2dabXg1YjNWMFZHOXdMRnh1SUNBZ0lDQWdiR1ZtZERvZ1pteDViM1YwVEdWbWRDeGNiaUFnSUNCOUxGeHVJQ0FnSUdOaGNtVjBUMlptYzJWME9pQjdYRzRnSUNBZ0lDQjBiM0E2SUdOaGNtVjBWRzl3TEZ4dUlDQWdJQ0FnY21sbmFIUTZJR05oY21WMFVtbG5hSFFzWEc0Z0lDQWdJQ0JpYjNSMGIyMDZJR05oY21WMFFtOTBkRzl0TEZ4dUlDQWdJQ0FnYkdWbWREb2dZMkZ5WlhSTVpXWjBMRnh1SUNBZ0lIMHNYRzRnSUgwN1hHNTlYRzVjYmk4cUlFTmhiR04xYkdGMFpYTWdZbUZ6Wld4cGJtVWdkRzl3SUdGdVpDQnNaV1owSUc5bVpuTmxkQ0JtYjNJZ1pteDViM1YwSUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ltRnpaVTltWm5ObGRITW9YRzRnSUdoaGMwTmhjbVYwT2lCaWIyOXNaV0Z1TEZ4dUlDQnlaV3hoZEdsMlpVOW1abk5sZERvZ2V5QjRPaUJ1ZFcxaVpYSXNJSGs2SUc1MWJXSmxjaUI5TEZ4dUlDQm1iSGx2ZFhSVGFYcGxPaUJHYkhsdmRYUXNYRzRnSUcxaGFXNUVhWEk2SUUxaGFXNUVhWElzWEc0Z0lIUnlhV2RuWlhKU1pXTjBPaUJEYkdsbGJuUlNaV04wTEZ4dUlDQjNhVzVrYjNkVGFYcGxPaUJYYVc1a2IzZGNiaWtnZTF4dUlDQmpiMjV6ZENCVFVFRkRTVTVIWDA5VlZGTkpSRVVnUFNCb1lYTkRZWEpsZENBL0lFTkJVa1ZVWDBoRlNVZElWQ0F2SURJZ09pQTRPMXh1SUNBdkx5QlVUMUFnVDBaR1UwVlVYRzRnSUd4bGRDQjBiM0E3WEc0Z0lHbG1JQ2h0WVdsdVJHbHlJRDA5UFNBblpHOTNiaWNwSUh0Y2JpQWdJQ0IwYjNBZ1BTQjNhVzVrYjNkVGFYcGxMbk5qY205c2JGa2dLeUIwY21sbloyVnlVbVZqZEM1aWIzUjBiMjBnS3lCVFVFRkRTVTVIWDA5VlZGTkpSRVU3WEc0Z0lIMGdaV3h6WlNCcFppQW9iV0ZwYmtScGNpQTlQVDBnSjNWd0p5a2dlMXh1SUNBZ0lIUnZjQ0E5WEc0Z0lDQWdJQ0IzYVc1a2IzZFRhWHBsTG5OamNtOXNiRmtnSzF4dUlDQWdJQ0FnS0hSeWFXZG5aWEpTWldOMExuUnZjQ0F0SUdac2VXOTFkRk5wZW1VdWFHVnBaMmgwSUMwZ1UxQkJRMGxPUjE5UFZWUlRTVVJGS1R0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNBdkx5QnNaV1owSUdGdVpDQnlhV2RvZEZ4dUlDQWdJSFJ2Y0NBOUlIZHBibVJ2ZDFOcGVtVXVjMk55YjJ4c1dTQXJJSFJ5YVdkblpYSlNaV04wTG5SdmNEdGNiaUFnZlZ4dVhHNGdJQzh2SUV4RlJsUWdUMFpHVTBWVVhHNGdJR3hsZENCc1pXWjBPMXh1SUNCcFppQW9iV0ZwYmtScGNpQTlQVDBnSjJ4bFpuUW5LU0I3WEc0Z0lDQWdiR1ZtZENBOVhHNGdJQ0FnSUNCM2FXNWtiM2RUYVhwbExuTmpjbTlzYkZnZ0sxeHVJQ0FnSUNBZ0tIUnlhV2RuWlhKU1pXTjBMbXhsWm5RZ0xTQm1iSGx2ZFhSVGFYcGxMbmRwWkhSb0lDMGdVMUJCUTBsT1IxOVBWVlJUU1VSRktUdGNiaUFnZlNCbGJITmxJR2xtSUNodFlXbHVSR2x5SUQwOVBTQW5jbWxuYUhRbktTQjdYRzRnSUNBZ2JHVm1kQ0E5SUhkcGJtUnZkMU5wZW1VdWMyTnliMnhzV0NBcklIUnlhV2RuWlhKU1pXTjBMbkpwWjJoMElDc2dVMUJCUTBsT1IxOVBWVlJUU1VSRk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJR1J2ZDI0Z1lXNWtJSFZ3WEc0Z0lDQWdiR1ZtZENBOUlIZHBibVJ2ZDFOcGVtVXVjMk55YjJ4c1dDQXJJSFJ5YVdkblpYSlNaV04wTG14bFpuUTdYRzRnSUgxY2JseHVJQ0F2THlCQlpHcDFjM1J6SUdadmNpQjBhR1VnY21Wc1lYUnBkbVVnY0dGeVpXNTBJR052Ym5SaGFXNWxjbHh1SUNCMGIzQWdMVDBnY21Wc1lYUnBkbVZQWm1aelpYUXVlVHRjYmlBZ2JHVm1kQ0F0UFNCeVpXeGhkR2wyWlU5bVpuTmxkQzU0TzF4dUlDQnlaWFIxY200Z2V5QjBiM0FzSUd4bFpuUWdmVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUTI5dWRHVnVkSE1nWlhoMFpXNWtjeUJTWldGamRDNURiMjF3YjI1bGJuUThVSEp2Y0hNc0lGTjBZWFJsUGlCN1hHNGdJSE4wWVhScFl5QndjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdZbWREYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25ZbXgxWlNjc0lDZGtZWEpyUjNKaGVTY3NJQ2R2Y21GdVoyVW5MQ0FuY21Wa0p5d2dKM2RvYVhSbEoxMHBMRnh1SUNBZ0lHSnZjbVJsY2pvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdZMkZ5WlhRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnSUNCcFpHVmhiRVJwY21WamRHbHZiam9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuZFhBbkxDQW5jbWxuYUhRbkxDQW5aRzkzYmljc0lDZHNaV1owSjEwcExGeHVJQ0FnSUc5dVMyVjVSRzkzYmpvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J2YmxKbGMybDZaVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQnlaV3hoZEdsMlpVOW1abk5sZERvZ1VISnZjRlI1Y0dWekxtVjRZV04wS0h0Y2JpQWdJQ0FnSUhnNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJQ0FnSUNCNU9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUgwcExGeHVJQ0FnSUhCdmMybDBhVzl1VW1Wc1lYUnBkbVZVYjBGdVkyaHZjam9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2NtOTFibVJwYm1jNklGQnliM0JVZVhCbGN5NXZibVZQWmloYk1pd2dORjBwTEZ4dUlDQWdJSE5vYjNWc1pFWnZZM1Z6T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQjBjbWxuWjJWeVVtVmpkRG9nVUhKdmNGUjVjR1Z6TG1WNFlXTjBLSHRjYmlBZ0lDQWdJR0p2ZEhSdmJUb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNBZ0lHaGxhV2RvZERvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0FnSUd4bFpuUTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ0lDQnlhV2RvZERvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2l4Y2JpQWdJQ0FnSUhSdmNEb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNBZ0lIZHBaSFJvT2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJSDBwTEZ4dUlDQWdJSGRwWkhSb09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0I5TzF4dVhHNGdJSE4wWVhScFl5QmtaV1poZFd4MFVISnZjSE1nUFNCN1hHNGdJQ0FnWW05eVpHVnlPaUIwY25WbExGeHVJQ0FnSUdOaGNtVjBPaUIwY25WbExGeHVJQ0I5TzF4dVhHNGdJSE4wWVhSbElEMGdlMXh1SUNBZ0lHWnNlVzkxZEU5bVpuTmxkRG9nZTF4dUlDQWdJQ0FnZEc5d09pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQnNaV1owT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnZlN4Y2JpQWdJQ0JqWVhKbGRFOW1abk5sZERvZ2UxeHVJQ0FnSUNBZ2RHOXdPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0J5YVdkb2REb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdZbTkwZEc5dE9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQnNaV1owT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnZlN4Y2JpQWdJQ0J0WVdsdVJHbHlPaUJ1ZFd4c0xGeHVJQ0FnSUdac2VXOTFkRkpsWmpvZ2JuVnNiQ3hjYmlBZ2ZUdGNibHh1SUNCamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENncElIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVVtVnphWHBsTENCdmJrdGxlVVJ2ZDI0Z2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdZMjl1YzNRZ2V5Qm1iSGx2ZFhSU1pXWWdmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNWNiaUFnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbk5vYjNWc1pFWnZZM1Z6SUNZbUlHWnNlVzkxZEZKbFppa2dlMXh1SUNBZ0lDQWdJQ0JtYkhsdmRYUlNaV1l1Wm05amRYTW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQnZibEpsYzJsNlpTazdYRzRnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJ0bGVXUnZkMjRuTENCdmJrdGxlVVJ2ZDI0cE8xeHVJQ0I5WEc1Y2JpQWdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblFvS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ2YmxKbGMybDZaU3dnYjI1TFpYbEViM2R1SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdkMmx1Wkc5M0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM0psYzJsNlpTY3NJRzl1VW1WemFYcGxLVHRjYmlBZ0lDQjNhVzVrYjNjdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25hMlY1Wkc5M2JpY3NJRzl1UzJWNVJHOTNiaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVjBaWEp0YVc1bGN5QjBhR1VnYldGcGJpQmthWEpsWTJsMGIyNHNJSE4xWWlCa2FYSmxZM1JwYjI0c0lHRnVaQ0JqYjNKeVpYTndiMjVrYVc1bklHOW1abk5sZEhNZ2JtVmxaR1ZrWEc0Z0lDQXFJSFJ2SUdOdmNuSmxZM1JzZVNCd2IzTnBkR2x2YmlCMGFHVWdiMlptYzJWMFhHNGdJQ0FxTDF4dUlDQnpkR0YwYVdNZ1oyVjBSR1Z5YVhabFpGTjBZWFJsUm5KdmJWQnliM0J6S0Z4dUlDQWdJSHRjYmlBZ0lDQWdJR05oY21WMExGeHVJQ0FnSUNBZ2FXUmxZV3hFYVhKbFkzUnBiMjRzWEc0Z0lDQWdJQ0J3YjNOcGRHbHZibEpsYkdGMGFYWmxWRzlCYm1Ob2IzSXNYRzRnSUNBZ0lDQnlaV3hoZEdsMlpVOW1abk5sZEN4Y2JpQWdJQ0FnSUhSeWFXZG5aWEpTWldOMExGeHVJQ0FnSUNBZ2QybGtkR2dzWEc0Z0lDQWdmVG9nVUhKdmNITXNYRzRnSUNBZ2V5Qm1iSGx2ZFhSU1pXWWdmVG9nVTNSaGRHVmNiaUFnS1NCN1hHNGdJQ0FnTHk4Z1UyTnliMnhzSUc1dmRDQnVaV1ZrWldRZ1ptOXlJSEpsYkdGMGFYWmxJR1ZzWlcxbGJuUnpYRzRnSUNBZ0x5OGdWMlVnWTJGdUozUWdkWE5sSUhkcGJtUnZkeTV6WTNKdmJHeFlJQzhnZDJsdVpHOTNMbk5qY205c2JGa2djMmx1WTJVZ2FYUW5jeUJ1YjNRZ2MzVndjRzl5ZEdWa0lHSjVJRWxGTVRGY2JpQWdJQ0JqYjI1emRDQnpZM0p2Ykd4WUlEMGdjRzl6YVhScGIyNVNaV3hoZEdsMlpWUnZRVzVqYUc5eVhHNGdJQ0FnSUNBL0lEQmNiaUFnSUNBZ0lEb2dkMmx1Wkc5M0xuQmhaMlZZVDJabWMyVjBJSHg4WEc0Z0lDQWdJQ0FnSUNoa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblFnSmlZZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG5OamNtOXNiRXhsWm5RcElIeDhYRzRnSUNBZ0lDQWdJREE3WEc0Z0lDQWdZMjl1YzNRZ2MyTnliMnhzV1NBOUlIQnZjMmwwYVc5dVVtVnNZWFJwZG1WVWIwRnVZMmh2Y2x4dUlDQWdJQ0FnUHlBd1hHNGdJQ0FnSUNBNklIZHBibVJ2ZHk1d1lXZGxXVTltWm5ObGRDQjhmRnh1SUNBZ0lDQWdJQ0FvWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBJQ1ltSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6WTNKdmJHeFViM0FwSUh4OFhHNGdJQ0FnSUNBZ0lEQTdYRzVjYmlBZ0lDQmpiMjV6ZENCM2FXNWtiM2RUYVhwbElEMGdlMXh1SUNBZ0lDQWdhR1ZwWjJoME9pQjNhVzVrYjNjdWFXNXVaWEpJWldsbmFIUXNYRzRnSUNBZ0lDQjNhV1IwYURvZ2QybHVaRzkzTG1sdWJtVnlWMmxrZEdnc1hHNGdJQ0FnSUNCelkzSnZiR3hZTEZ4dUlDQWdJQ0FnYzJOeWIyeHNXU3hjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ1pteDViM1YwVTJsNlpTQTlJSHRjYmlBZ0lDQWdJR2hsYVdkb2REb2dabXg1YjNWMFVtVm1JRDhnWm14NWIzVjBVbVZtTG1Oc2FXVnVkRWhsYVdkb2RDQTZJREFzWEc0Z0lDQWdJQ0IzYVdSMGFEb2dLR1pzZVc5MWRGSmxaaUEvSUdac2VXOTFkRkpsWmk1amJHbGxiblJYYVdSMGFDQTZJSGRwWkhSb0tTQjhmQ0F3TEZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2THlCR2FYSnpkQ0JqYUc5dmMyVWdiMjVsSUc5bUlEUWdiV0ZwYmlCa2FYSmxZM1JwYjI1Y2JpQWdJQ0JqYjI1emRDQnRZV2x1UkdseUlEMGdaMlYwVFdGcGJrUnBjaWhjYmlBZ0lDQWdJR1pzZVc5MWRGTnBlbVVzWEc0Z0lDQWdJQ0JwWkdWaGJFUnBjbVZqZEdsdmJpeGNiaUFnSUNBZ0lIUnlhV2RuWlhKU1pXTjBMRnh1SUNBZ0lDQWdkMmx1Wkc5M1UybDZaVnh1SUNBZ0lDazdYRzVjYmlBZ0lDQXZMeUJPYjNjZ2RHaGhkQ0IzWlNCb1lYWmxJSFJvWlNCdFlXbHVJR1JwY21WamRHbHZiaXdnWTJodmMyVWdabkp2YlNBeklHTmhjbVYwSUhCc1lXTmxiV1Z1ZEhNZ1ptOXlJSFJvWVhRZ1pHbHlaV04wYVc5dVhHNGdJQ0FnWTI5dWMzUWdjM1ZpUkdseUlEMGdaMlYwVTNWaVJHbHlLR1pzZVc5MWRGTnBlbVVzSUcxaGFXNUVhWElzSUhSeWFXZG5aWEpTWldOMExDQjNhVzVrYjNkVGFYcGxLVHRjYmx4dUlDQWdJQzh2SUVkbGRITWdkR2hsSUdKaGMyVWdiMlptYzJWMElIUm9ZWFFnY0c5emFYUnBiMjV6SUhSb1pTQm1iSGx2ZFhRZ1ltRnpaV1FnYjI0Z2RHaGxJRzFoYVc0Z1pHbHlaV04wYVc5dUlHOXViSGxjYmlBZ0lDQmpiMjV6ZENCaVlYTmxJRDBnWW1GelpVOW1abk5sZEhNb1hHNGdJQ0FnSUNCQ2IyOXNaV0Z1S0dOaGNtVjBLU3hjYmlBZ0lDQWdJSEpsYkdGMGFYWmxUMlptYzJWMExGeHVJQ0FnSUNBZ1pteDViM1YwVTJsNlpTeGNiaUFnSUNBZ0lHMWhhVzVFYVhJc1hHNGdJQ0FnSUNCMGNtbG5aMlZ5VW1WamRDeGNiaUFnSUNBZ0lIZHBibVJ2ZDFOcGVtVmNiaUFnSUNBcE8xeHVYRzRnSUNBZ0x5OGdSMlYwY3lCMGFHVWdaV1JuWlNCemFHbG1kSE1nWm05eUlIUm9aU0JtYkhsdmRYUmNiaUFnSUNCamIyNXpkQ0JsWkdkbFUyaHBablJ6SUQwZ1kyRnNZMFZrWjJWVGFHbG1kSE1vYzNWaVJHbHlMQ0IwY21sbloyVnlVbVZqZEN3Z2QybHVaRzkzVTJsNlpTazdYRzVjYmlBZ0lDQXZMeUJCWkdwMWMzUnpJR1p2Y2lCMGFHVWdjM1ZpWkdseVpXTjBhVzl1SUc5bUlIUm9aU0JqWVhKbGRGeHVJQ0FnSUdOdmJuTjBJSHNnWm14NWIzVjBUMlptYzJWMExDQmpZWEpsZEU5bVpuTmxkQ0I5SUQwZ1lXUnFkWE4wVDJabWMyVjBjeWhjYmlBZ0lDQWdJR0poYzJVc1hHNGdJQ0FnSUNCbFpHZGxVMmhwWm5SekxGeHVJQ0FnSUNBZ1pteDViM1YwVTJsNlpTeGNiaUFnSUNBZ0lHMWhhVzVFYVhJc1hHNGdJQ0FnSUNCemRXSkVhWElzWEc0Z0lDQWdJQ0IwY21sbloyVnlVbVZqZEZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdZMkZ5WlhSUFptWnpaWFFzWEc0Z0lDQWdJQ0JtYkhsdmRYUlBabVp6WlhRc1hHNGdJQ0FnSUNCdFlXbHVSR2x5TEZ4dUlDQWdJSDA3WEc0Z0lIMWNibHh1SUNBdkx5QkRiM0I1SUhSb1pTQm1iSGx2ZFhRZ1JFOU5JRzV2WkdVZ2RHOGdjM1JoZEdVdUlGUm9hWE1nYVhNZ2NtVnhkV2x5WldRZ1ltVmpZWFZ6WlNCM1pTQnVaV1ZrSUhSdlhHNGdJQzh2SUdSbGNtbDJaU0IwYUdVZ1pteDViM1YwSUd4dlkyRjBhVzl1SUdaeWIyMGdhWFFnYVc0Z1oyVjBSR1Z5YVhabFpGTjBZWFJsUm5KdmJWQnliM0J6TENCaGJtUWdZbVZqWVhWelpWeHVJQ0F2THlCMGFHbHpJRzFsZEdodlpDQnBjeUJ6ZEdGMGFXTXNJR2wwSUdSdlpYTnVKM1FnYUdGMlpTQmhZMk5sYzNNZ2RHOGdkR2hsSUdOdmJYQnZibVZ1ZENCcGJuTjBZVzVqWlM1Y2JpQWdMeThnU1c1emRHVmhaQ3dnZDJVZ2NtVnNlU0J2YmlCU1pXRmpkQ0J3WVhOemFXNW5JSFJvWlNCemRHRjBaU0IyWVd4MVpYTWdhVzUwYnlCMGFHRjBJRzFsZEdodlpDNWNiaUFnYzJWMFJteDViM1YwVW1WbUlEMGdLR1pzZVc5MWRGSmxaam9nUDBoVVRVeEZiR1Z0Wlc1MEtTQTlQaUI3WEc0Z0lDQWdhV1lnS0NGMGFHbHpMbk4wWVhSbExtWnNlVzkxZEZKbFppa2dlMXh1SUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lHWnNlVzkxZEZKbFppQjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dZbWREYjJ4dmNpd2dZbTl5WkdWeUxDQmpZWEpsZEN3Z1kyaHBiR1J5Wlc0c0lISnZkVzVrYVc1bkxDQjNhV1IwYUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lHTmhjbVYwVDJabWMyVjBMQ0JtYkhsdmRYUlBabVp6WlhRc0lHMWhhVzVFYVhJZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc1Y2JpQWdJQ0F2THlCT1pXVmtaV1FnZEc4Z2NISmxkbVZ1ZENCVlNTQjBhSEpoYzJocGJtZGNiaUFnSUNCamIyNXpkQ0IyYVhOcFltbHNhWFI1SUQwZ2JXRnBia1JwY2lBOVBUMGdiblZzYkNBL0lDZG9hV1JrWlc0bklEb2dKM1pwYzJsaWJHVW5PMXh1SUNBZ0lHTnZibk4wSUdKaFkydG5jbTkxYm1RZ1BTQmdKSHRpWjBOdmJHOXlmVUpuWUR0Y2JpQWdJQ0JqYjI1emRDQnpkSEp2YTJVZ1BTQmlaME52Ykc5eUlEMDlQU0FuZDJocGRHVW5JRDhnSnlObFptVm1aV1luSURvZ2JuVnNiRHRjYmx4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TG1OdmJuUmhhVzVsY24xY2JpQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ2MzUnliMnRsTENCMmFYTnBZbWxzYVhSNUxDQXVMaTVtYkhsdmRYUlBabVp6WlhRZ2ZYMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOdVlXMWxjeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lISnZkVzVrYVc1bklEMDlQU0F5SUNZbUlHSnZjbVJsY25NdWNtOTFibVJwYm1jeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY205MWJtUnBibWNnUFQwOUlEUWdKaVlnWW05eVpHVnljeTV5YjNWdVpHbHVaelFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlhNdVkyOXVkR1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pYTXViV0Y0UkdsdFpXNXphVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb0lDRTlQU0J1ZFd4c0lDWW1JSE4wZVd4bGN5NXRhVzVFYVcxbGJuTnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0J5WldZOWUzUm9hWE11YzJWMFJteDViM1YwVW1WbWZWeHVJQ0FnSUNBZ0lDQWdJSFJoWWtsdVpHVjRQWHN0TVgxY2JpQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJSHRqWVhKbGRDQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3loamIyeHZjbk5iWW1kRGIyeHZjbDBzSUhOMGVXeGxjeTVqWVhKbGRDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFh0N0lDNHVMbU5oY21WMFQyWm1jMlYwSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhEWVhKbGRDQmthWEpsWTNScGIyNDllMjFoYVc1RWFYSjlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOXlaR1Z5SUNZbUlITjBlV3hsY3k1aWIzSmtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ykc5eWMxdGlZV05yWjNKdmRXNWtYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNKelcySm5RMjlzYjNKZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIzVnVaR2x1WnlBOVBUMGdNaUFtSmlCaWIzSmtaWEp6TG5KdmRXNWthVzVuTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY205MWJtUnBibWNnUFQwOUlEUWdKaVlnWW05eVpHVnljeTV5YjNWdVpHbHVaelFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bGN5NXBibTVsY2tOdmJuUmxiblJ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pYTXViV0Y0UkdsdFpXNXphVzl1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZ2dJVDA5SUc1MWJHd2dKaVlnYzNSNWJHVnpMbTFwYmtScGJXVnVjMmx2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlQxN2V5QnRZWGhYYVdSMGFEb2dkMmxrZEdnZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCamFHbHNaSEpsYmpvZ1VtVmhZM1F1VG05a1pTeGNiaUFnYjI1RGJHbGphejg2SUNobGRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNGdkbTlwWkN4Y2JueDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJQZFhSemFXUmxSWFpsYm5SQ1pXaGhkbWx2Y2loN0lHTm9hV3hrY21WdUxDQnZia05zYVdOcklIMDZJRkJ5YjNCektTQjdYRzRnSUdOdmJuTjBJR1ZzWlcxbGJuUWdQU0JTWldGamRDNTFjMlZTWldZOFAwaFVUVXhFYVhaRmJHVnRaVzUwUGlodWRXeHNLVHRjYmx4dUlDQlNaV0ZqZEM1MWMyVkZabVpsWTNRb0tDa2dQVDRnZTF4dUlDQWdJR052Ym5OMElHaGhibVJzWlVOc2FXTnJSWFpsYm5RZ1BTQW9aWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJVzl1UTJ4cFkyc2dmSHhjYmlBZ0lDQWdJQ0FnSVdWc1pXMWxiblFnZkh4Y2JpQWdJQ0FnSUNBZ0tHVjJaVzUwTG5SaGNtZGxkQ0JwYm5OMFlXNWpaVzltSUU1dlpHVWdKaVpjYmlBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG1OMWNuSmxiblFnSmlaY2JpQWdJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExtTjFjbkpsYm5RdVkyOXVkR0ZwYm5Nb1pYWmxiblF1ZEdGeVoyVjBLU2xjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J2YmtOc2FXTnJLR1YyWlc1MEtUdGNiaUFnSUNCOU8xeHVYRzRnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblkyeHBZMnNuTENCb1lXNWtiR1ZEYkdsamEwVjJaVzUwTENCN1hHNGdJQ0FnSUNCallYQjBkWEpsT2lCMGNuVmxMRnh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCamJHVmhiblZ3S0NrZ2UxeHVJQ0FnSUNBZ1pHOWpkVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25ZMnhwWTJzbkxDQm9ZVzVrYkdWRGJHbGphMFYyWlc1MExDQjdYRzRnSUNBZ0lDQWdJR05oY0hSMWNtVTZJSFJ5ZFdVc1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVJQ0I5TENCYmIyNURiR2xqYTEwcE8xeHVYRzRnSUhKbGRIVnliaUE4WkdsMklISmxaajE3Wld4bGJXVnVkSDArZTJOb2FXeGtjbVZ1ZlR3dlpHbDJQanRjYm4xY2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCRGIyNTBaVzUwY3lCbWNtOXRJQ2N1TDBOdmJuUmxiblJ6TG1wekp6dGNibWx0Y0c5eWRDQlBkWFJ6YVdSbFJYWmxiblJDWldoaGRtbHZjaUJtY205dElDY3VMMkpsYUdGMmFXOXljeTlQZFhSemFXUmxSWFpsYm5SQ1pXaGhkbWx2Y2k1cWN5YzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCaGJtTm9iM0k2SUVoVVRVeEZiR1Z0Wlc1MExGeHVJQ0JpWjBOdmJHOXlPaUFuWW14MVpTY2dmQ0FuWkdGeWEwZHlZWGtuSUh3Z0oyOXlZVzVuWlNjZ2ZDQW5jbVZrSnlCOElDZDNhR2wwWlNjc1hHNGdJR0p2Y21SbGNqODZJR0p2YjJ4bFlXNHNYRzRnSUdOaGNtVjBQem9nWW05dmJHVmhiaXhjYmlBZ1kyaHBiR1J5Wlc0L09pQlNaV0ZqZEM1T2IyUmxMRnh1SUNCcFpHVmhiRVJwY21WamRHbHZiajg2SUNkMWNDY2dmQ0FuY21sbmFIUW5JSHdnSjJSdmQyNG5JSHdnSjJ4bFpuUW5MRnh1SUNCdmJrUnBjMjFwYzNNNklDZ3BJRDArSUhadmFXUXNYRzRnSUhCdmMybDBhVzl1VW1Wc1lYUnBkbVZVYjBGdVkyaHZjam9nWW05dmJHVmhiaXhjYmlBZ2NtOTFibVJwYm1jL09pQXlJSHdnTkN4Y2JpQWdjMmh2ZFd4a1JtOWpkWE0vT2lCaWIyOXNaV0Z1TEZ4dUlDQnphWHBsT2lBbmVITW5JSHdnSjNOdEp5QjhJQ2R0WkNjZ2ZDQW5iR2NuSUh3Z0ozaHNKeUI4SUc1MWJXSmxjaUI4SUc1MWJHd3NYRzU4ZlR0Y2JseHVZMjl1YzNRZ1UwbGFSVjlYU1VSVVNGOU5RVkFnUFNCN1hHNGdJSGh6T2lBeE9EQXNYRzRnSUhOdE9pQXlNekFzWEc0Z0lHMWtPaUF5T0RRc1hHNGdJR3huT2lBek1qQXNYRzRnSUhoc09pQXpOakFzWEc1OU8xeHVYRzVqYjI1emRDQkZVME5CVUVWZlMwVlpYME5QUkVVZ1BTQXlOenRjYmx4dWRIbHdaU0JEYkdsbGJuUlNaV04wSUQwZ2UxeHVJQ0JpYjNSMGIyMDZJRzUxYldKbGNpeGNiaUFnYUdWcFoyaDBPaUJ1ZFcxaVpYSXNYRzRnSUd4bFpuUTZJRzUxYldKbGNpeGNiaUFnY21sbmFIUTZJRzUxYldKbGNpeGNiaUFnZEc5d09pQnVkVzFpWlhJc1hHNGdJSGRwWkhSb09pQnVkVzFpWlhJc1hHNTlPMXh1WEc1MGVYQmxJRk4wWVhSbElEMGdlM3hjYmlBZ2NtVnNZWFJwZG1WUFptWnpaWFE2SUh0Y2JpQWdJQ0I0T2lCdWRXMWlaWElzWEc0Z0lDQWdlVG9nYm5WdFltVnlMRnh1SUNCOUxGeHVJQ0IwY21sbloyVnlRbTkxYm1ScGJtZFNaV04wT2lCRGJHbGxiblJTWldOMExGeHVmSDA3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRlJ5YVdkblpYSlNaV04wS0Z4dUlDQmhibU5vYjNJNklFaFVUVXhGYkdWdFpXNTBMRnh1SUNCd2IzTnBkR2x2YmxKbGJHRjBhWFpsVkc5QmJtTm9iM0k2SUdKdmIyeGxZVzVjYmlrZ2UxeHVJQ0JzWlhRZ2RISnBaMmRsY2tKdmRXNWthVzVuVW1WamREdGNiaUFnYkdWMElISmxiR0YwYVhabFQyWm1jMlYwTzF4dUlDQnBaaUFvWVc1amFHOXlLU0I3WEc0Z0lDQWdkSEpwWjJkbGNrSnZkVzVrYVc1blVtVmpkQ0E5SUdGdVkyaHZjaTVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNibHh1SUNBZ0lDOHZJRTVsWldSbFpDQm1iM0lnWTI5eWNtVmpkQ0J3YjNOcGRHbHZibWx1WnlCM2FYUm9hVzRnUTI5dWRHVnVkSE11YW5OY2JpQWdJQ0J5Wld4aGRHbDJaVTltWm5ObGRDQTlJSHRjYmlBZ0lDQWdJSGc2SUhCdmMybDBhVzl1VW1Wc1lYUnBkbVZVYjBGdVkyaHZjbHh1SUNBZ0lDQWdJQ0EvSUhSeWFXZG5aWEpDYjNWdVpHbHVaMUpsWTNRdWJHVm1kQ0F0SUdGdVkyaHZjaTV2Wm1aelpYUk1aV1owWEc0Z0lDQWdJQ0FnSURvZ01DeGNiaUFnSUNBZ0lIazZJSEJ2YzJsMGFXOXVVbVZzWVhScGRtVlViMEZ1WTJodmNseHVJQ0FnSUNBZ0lDQS9JSFJ5YVdkblpYSkNiM1Z1WkdsdVoxSmxZM1F1ZEc5d0lDMGdZVzVqYUc5eUxtOW1abk5sZEZSdmNGeHVJQ0FnSUNBZ0lDQTZJREFzWEc0Z0lDQWdmVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUI3SUhKbGJHRjBhWFpsVDJabWMyVjBMQ0IwY21sbloyVnlRbTkxYm1ScGJtZFNaV04wSUgwN1hHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklFTnZiblJ5YjJ4c1pYSWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5ROFVISnZjSE1zSUZOMFlYUmxQaUI3WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1lXNWphRzl5T2lCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJQ0FnWTI5dWRHRnBibk02SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQjlLU3hjYmlBZ0lDQmlaME52Ykc5eU9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d5ZGliSFZsSnl3Z0oyUmhjbXRIY21GNUp5d2dKMjl5WVc1blpTY3NJQ2R5WldRbkxDQW5kMmhwZEdVblhTa3NYRzRnSUNBZ1ltOXlaR1Z5T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQmpZWEpsZERvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdZMmhwYkdSeVpXNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0FnSUdsa1pXRnNSR2x5WldOMGFXOXVPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWQxY0Njc0lDZHlhV2RvZENjc0lDZGtiM2R1Snl3Z0oyeGxablFuWFNrc1hHNGdJQ0FnYjI1RWFYTnRhWE56T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSEJ2YzJsMGFXOXVVbVZzWVhScGRtVlViMEZ1WTJodmNqb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnY205MWJtUnBibWM2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiTWl3Z05GMHBMRnh1SUNBZ0lITm9iM1ZzWkVadlkzVnpPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCemFYcGxPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0Y2JpQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dWRXMWlaWElzWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YjI1bFQyWW9XeWQ0Y3ljc0lDZHpiU2NzSUNkdFpDY3NJQ2RzWnljc0lDZDRiQ2RkS1N3Z0x5OGdaR1ZtWVhWc2REb2djMjFjYmlBZ0lDQmRLU3hjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWkdWbVlYVnNkRkJ5YjNCeklEMGdlMXh1SUNBZ0lDOHZJRVJsWm1GMWJIUWdjMmw2WlNCdmJteDVJR0Z3Y0d4cFpYTWdkMmhsYmlCemFYcGxJR2x6SUc5dGFYUjBaV1FzWEc0Z0lDQWdMeThnYVdZZ2NHRnpjMlZrSUdGeklHNTFiR3dnYVhRZ2QybHNiQ0J5WlcxaGFXNGdiblZzYkZ4dUlDQWdJSE5wZW1VNklDZHpiU2NzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFUmxjbWwyWldSVGRHRjBaVVp5YjIxUWNtOXdjeWg3SUdGdVkyaHZjaXdnY0c5emFYUnBiMjVTWld4aGRHbDJaVlJ2UVc1amFHOXlJSDA2SUZCeWIzQnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxkRlJ5YVdkblpYSlNaV04wS0dGdVkyaHZjaXdnY0c5emFYUnBiMjVTWld4aGRHbDJaVlJ2UVc1amFHOXlLVHRjYmlBZ2ZWeHVYRzRnSUhOMFlYUmxJRDBnZTF4dUlDQWdJSEpsYkdGMGFYWmxUMlptYzJWME9pQjdYRzRnSUNBZ0lDQjRPaUF3TEZ4dUlDQWdJQ0FnZVRvZ01DeGNiaUFnSUNCOUxGeHVJQ0FnSUhSeWFXZG5aWEpDYjNWdVpHbHVaMUpsWTNRNklIdGNiaUFnSUNBZ0lHSnZkSFJ2YlRvZ01DeGNiaUFnSUNBZ0lHaGxhV2RvZERvZ01DeGNiaUFnSUNBZ0lHeGxablE2SURBc1hHNGdJQ0FnSUNCeWFXZG9kRG9nTUN4Y2JpQWdJQ0FnSUhSdmNEb2dNQ3hjYmlBZ0lDQWdJSGRwWkhSb09pQXdMRnh1SUNBZ0lIMHNYRzRnSUgwN1hHNWNiaUFnWTI5dGNHOXVaVzUwUkdsa1RXOTFiblFvS1NCN1hHNGdJQ0FnZEdocGN5NTFjR1JoZEdWVWNtbG5aMlZ5VW1WamRDaDBhR2x6TG5CeWIzQnpLVHRjYmlBZ2ZWeHVYRzRnSUdoaGJtUnNaVXRsZVVSdmQyNGdQU0FvWlhabGJuUTZJSHNnYTJWNVEyOWtaVG9nYm5WdFltVnlJSDBwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVJHbHpiV2x6Y3lCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQnBaaUFvWlhabGJuUXVhMlY1UTI5a1pTQTlQVDBnUlZORFFWQkZYMHRGV1Y5RFQwUkZLU0I3WEc0Z0lDQWdJQ0J2YmtScGMyMXBjM01vS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsVUdGblpVTnNhV05ySUQwZ0tHVjJaVzUwT2lCRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnWVc1amFHOXlMQ0J2YmtScGMyMXBjM01nZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ2FXWWdLR1YyWlc1MExuUmhjbWRsZENCcGJuTjBZVzVqWlc5bUlFNXZaR1VnSmlZZ0lXRnVZMmh2Y2k1amIyNTBZV2x1Y3lobGRtVnVkQzUwWVhKblpYUXBLU0I3WEc0Z0lDQWdJQ0J2YmtScGMyMXBjM01vS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsVW1WemFYcGxJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxWSEpwWjJkbGNsSmxZM1FvZEdocGN5NXdjbTl3Y3lrN1hHNGdJSDA3WEc1Y2JpQWdkWEJrWVhSbFZISnBaMmRsY2xKbFkzUWdQU0FvZXlCaGJtTm9iM0lzSUhCdmMybDBhVzl1VW1Wc1lYUnBkbVZVYjBGdVkyaHZjaUI5T2lCUWNtOXdjeWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnY21Wc1lYUnBkbVZQWm1aelpYUXNJSFJ5YVdkblpYSkNiM1Z1WkdsdVoxSmxZM1FnZlNBOUlHZGxkRlJ5YVdkblpYSlNaV04wS0Z4dUlDQWdJQ0FnWVc1amFHOXlMRnh1SUNBZ0lDQWdjRzl6YVhScGIyNVNaV3hoZEdsMlpWUnZRVzVqYUc5eVhHNGdJQ0FnS1R0Y2JpQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2djbVZzWVhScGRtVlBabVp6WlhRc0lIUnlhV2RuWlhKQ2IzVnVaR2x1WjFKbFkzUWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJR0puUTI5c2IzSXNYRzRnSUNBZ0lDQmliM0prWlhJc1hHNGdJQ0FnSUNCallYSmxkQ3hjYmlBZ0lDQWdJR05vYVd4a2NtVnVMRnh1SUNBZ0lDQWdhV1JsWVd4RWFYSmxZM1JwYjI0c1hHNGdJQ0FnSUNCd2IzTnBkR2x2YmxKbGJHRjBhWFpsVkc5QmJtTm9iM0lzWEc0Z0lDQWdJQ0J5YjNWdVpHbHVaeXhjYmlBZ0lDQWdJSE5vYjNWc1pFWnZZM1Z6TEZ4dUlDQWdJQ0FnYzJsNlpTeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lISmxiR0YwYVhabFQyWm1jMlYwTENCMGNtbG5aMlZ5UW05MWJtUnBibWRTWldOMElIMGdQU0IwYUdsekxuTjBZWFJsTzF4dVhHNGdJQ0FnWTI5dWMzUWdkMmxrZEdnZ1BTQjBlWEJsYjJZZ2MybDZaU0E5UFQwZ0ozTjBjbWx1WnljZ1B5QlRTVnBGWDFkSlJGUklYMDFCVUZ0emFYcGxYU0E2SUhOcGVtVTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BFOTFkSE5wWkdWRmRtVnVkRUpsYUdGMmFXOXlJRzl1UTJ4cFkyczllM1JvYVhNdWFHRnVaR3hsVUdGblpVTnNhV05yZlQ1Y2JpQWdJQ0FnSUNBZ1BFTnZiblJsYm5SelhHNGdJQ0FnSUNBZ0lDQWdZbWREYjJ4dmNqMTdZbWREYjJ4dmNuMWNiaUFnSUNBZ0lDQWdJQ0JpYjNKa1pYSTllMkp2Y21SbGNuMWNiaUFnSUNBZ0lDQWdJQ0JqWVhKbGREMTdZMkZ5WlhSOVhHNGdJQ0FnSUNBZ0lDQWdhV1JsWVd4RWFYSmxZM1JwYjI0OWUybGtaV0ZzUkdseVpXTjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVTMlY1Ukc5M2JqMTdkR2hwY3k1b1lXNWtiR1ZMWlhsRWIzZHVmVnh1SUNBZ0lDQWdJQ0FnSUc5dVVtVnphWHBsUFh0MGFHbHpMbWhoYm1Sc1pWSmxjMmw2WlgxY2JpQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJsSmxiR0YwYVhabFZHOUJibU5vYjNJOWUzQnZjMmwwYVc5dVVtVnNZWFJwZG1WVWIwRnVZMmh2Y24xY2JpQWdJQ0FnSUNBZ0lDQnlaV3hoZEdsMlpVOW1abk5sZEQxN2NtVnNZWFJwZG1WUFptWnpaWFI5WEc0Z0lDQWdJQ0FnSUNBZ2NtOTFibVJwYm1jOWUzSnZkVzVrYVc1bmZWeHVJQ0FnSUNBZ0lDQWdJSE5vYjNWc1pFWnZZM1Z6UFh0emFHOTFiR1JHYjJOMWMzMWNiaUFnSUNBZ0lDQWdJQ0IwY21sbloyVnlVbVZqZEQxN2RISnBaMmRsY2tKdmRXNWthVzVuVW1WamRIMWNiaUFnSUNBZ0lDQWdJQ0IzYVdSMGFEMTdkMmxrZEdoOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3WTJocGJHUnlaVzU5WEc0Z0lDQWdJQ0FnSUR3dlEyOXVkR1Z1ZEhNK1hHNGdJQ0FnSUNBOEwwOTFkSE5wWkdWRmRtVnVkRUpsYUdGMmFXOXlQbHh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQkRiMjUwY205c2JHVnlJR1p5YjIwZ0p5NHZRMjl1ZEhKdmJHeGxjaTVxY3ljN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JoYm1Ob2IzSTZJRDlJVkUxTVJXeGxiV1Z1ZEN4Y2JpQWdZMmhwYkdSeVpXNC9PaUJTWldGamRDNU9iMlJsTEZ4dUlDQmpiMnh2Y2o4NklDZGliSFZsSnlCOElDZHZjbUZ1WjJVbklId2dKM0psWkNjZ2ZDQW5kMmhwZEdVbklId2dKMlJoY210SGNtRjVKeXhjYmlBZ2FXUmxZV3hFYVhKbFkzUnBiMjQvT2lBbmRYQW5JSHdnSjNKcFoyaDBKeUI4SUNka2IzZHVKeUI4SUNkc1pXWjBKeXhjYmlBZ2IyNUVhWE50YVhOek9pQW9LU0E5UGlCMmIybGtMRnh1SUNCd2IzTnBkR2x2YmxKbGJHRjBhWFpsVkc5QmJtTm9iM0kvT2lCaWIyOXNaV0Z1TEZ4dUlDQnphRzkxYkdSR2IyTjFjejg2SUdKdmIyeGxZVzRzWEc0Z0lITm9iM2REWVhKbGREODZJR0p2YjJ4bFlXNHNYRzRnSUhOcGVtVS9PaUFuZUhNbklId2dKM050SnlCOElDZHRaQ2NnZkNBbmJHY25JSHdnSjNoc0p5QjhJQ2RtYkdWNGFXSnNaU2NnZkNCdWRXMWlaWElzWEc1OGZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdSbXg1YjNWMEtIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQmpiMjV6ZENCN1hHNGdJQ0FnWVc1amFHOXlMRnh1SUNBZ0lHTm9hV3hrY21WdUxGeHVJQ0FnSUdsa1pXRnNSR2x5WldOMGFXOXVMRnh1SUNBZ0lHOXVSR2x6YldsemN5eGNiaUFnSUNCd2IzTnBkR2x2YmxKbGJHRjBhWFpsVkc5QmJtTm9iM0lnUFNCMGNuVmxMRnh1SUNBZ0lHTnZiRzl5SUQwZ0ozZG9hWFJsSnl4Y2JpQWdJQ0J6YUc5MWJHUkdiMk4xY3lBOUlIUnlkV1VzWEc0Z0lDQWdjMmh2ZDBOaGNtVjBJRDBnWm1Gc2MyVXNYRzRnSUNBZ2MybDZaU3hjYmlBZ2ZTQTlJSEJ5YjNCek8xeHVYRzRnSUdsbUlDZ2hZVzVqYUc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQmhibU5vYjNJOWUyRnVZMmh2Y24xY2JpQWdJQ0FnSUdKblEyOXNiM0k5ZTJOdmJHOXlmVnh1SUNBZ0lDQWdZbTl5WkdWeVhHNGdJQ0FnSUNCallYSmxkRDE3YzJodmQwTmhjbVYwZlZ4dUlDQWdJQ0FnYVdSbFlXeEVhWEpsWTNScGIyNDllMmxrWldGc1JHbHlaV04wYVc5dWZWeHVJQ0FnSUNBZ2IyNUVhWE50YVhOelBYdHZia1JwYzIxcGMzTjlYRzRnSUNBZ0lDQndiM05wZEdsdmJsSmxiR0YwYVhabFZHOUJibU5vYjNJOWUzQnZjMmwwYVc5dVVtVnNZWFJwZG1WVWIwRnVZMmh2Y24xY2JpQWdJQ0FnSUhKdmRXNWthVzVuUFhzMGZWeHVJQ0FnSUNBZ2MyaHZkV3hrUm05amRYTTllM05vYjNWc1pFWnZZM1Z6ZlZ4dUlDQWdJQ0FnYzJsNlpUMTdjMmw2WlNBOVBUMGdKMlpzWlhocFlteGxKeUEvSUc1MWJHd2dPaUJ6YVhwbGZWeHVJQ0FnSUQ1Y2JpQWdJQ0FnSUh0amFHbHNaSEpsYm4xY2JpQWdJQ0E4TDBOdmJuUnliMnhzWlhJK1hHNGdJQ2s3WEc1OVhHNWNia1pzZVc5MWRDNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHRnVZMmh2Y2pvZ1VISnZjRlI1Y0dWekxuTm9ZWEJsS0h0Y2JpQWdJQ0JqYjI1MFlXbHVjem9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ1oyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnZlNrc1hHNGdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnYVdSbFlXeEVhWEpsWTNScGIyNDZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJKM1Z3Snl3Z0ozSnBaMmgwSnl3Z0oyUnZkMjRuTENBbmJHVm1kQ2RkS1N4Y2JpQWdiMjVFYVhOdGFYTnpPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNCd2IzTnBkR2x2YmxKbGJHRjBhWFpsVkc5QmJtTm9iM0k2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNCamIyeHZjam9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuWW14MVpTY3NJQ2R2Y21GdVoyVW5MQ0FuY21Wa0p5d2dKM2RvYVhSbEp5d2dKMlJoY210SGNtRjVKMTBwTEZ4dUlDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJKM2h6Snl3Z0ozTnRKeXdnSjIxa0p5d2dKMnhuSnl3Z0ozaHNKMTBwTENBdkx5QmtaV1poZFd4ME9pQnpiVnh1SUNCZEtTeGNiaUFnYzJodmQwTmhjbVYwT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2MzUjViR1Z6SUdaeWIyMGdKeTR2UjNKdmRYQkJkbUYwWVhJdVkzTnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUVsdFlXZGxJR1p5YjIwZ0p5NHZTVzFoWjJVdWFuTW5PMXh1YVcxd2IzSjBJSFI1Y0c5bmNtRndhSGtnWm5KdmJTQW5MaTlVZVhCdlozSmhjR2g1TG1OemN5YzdYRzVjYm1aMWJtTjBhVzl1SUhwcGNDaGhMQ0JpS1NCN1hHNGdJSEpsZEhWeWJpQmhMbTFoY0Nnb2FYUmxiU3dnYVdSNEtTQTlQaUJiYVhSbGJTd2dZbHRwWkhoZFhTazdYRzU5WEc1Y2JtTnZibk4wSUVKUFVrUkZVbDlYU1VSVVNDQTlJREk3WEc1Y2JtTnZibk4wSUVGV1FWUkJVbDlUU1ZwRlV5QTlJSHRjYmlBZ2VITTZJREkwTEZ4dUlDQnpiVG9nTXpJc1hHNGdJRzFrT2lBME9DeGNiaUFnYkdjNklEWTBMRnh1SUNCNGJEb2dNVEl3TEZ4dWZUdGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdOdmJHeGhZbTl5WVhSdmNuTTZJRUZ5Y21GNVBIdDhYRzRnSUNBZ2JtRnRaVG9nYzNSeWFXNW5MRnh1SUNBZ0lITnlZejg2SUhOMGNtbHVaeXhjYmlBZ2ZIMCtMRnh1SUNCdmRYUnNhVzVsUHpvZ1ltOXZiR1ZoYml4Y2JpQWdjMmw2WlQ4NklDZDRjeWNnZkNBbmMyMG5JSHdnSjIxa0p5QjhJQ2RzWnljZ2ZDQW5lR3duSUh3Z0oyWnBkQ2NzWEc1OGZUdGNibHh1WTI5dWMzUWdZWFpoZEdGeVRHRjViM1YwSUQwZ0tHNHNJSE5wZW1VcElEMCtJSHRjYmlBZ2MzZHBkR05vSUNodUtTQjdYRzRnSUNBZ1kyRnpaU0F3T2x4dUlDQWdJR05oYzJVZ01UcGNiaUFnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lIc2dkRzl3T2lBd0xDQnNaV1owT2lBd0xDQjNhV1IwYURvZ2MybDZaU3dnYUdWcFoyaDBPaUJ6YVhwbExDQjBaWGgwVEdGNWIzVjBPaUFuWTJWdWRHVnlKeUI5TEZ4dUlDQWdJQ0FnWFR0Y2JpQWdJQ0JqWVhObElESTZYRzRnSUNBZ0lDQnlaWFIxY200Z1cxeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnZEc5d09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUd4bFpuUTZJREFzWEc0Z0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUdCallXeGpLRFV3SlNBdElDUjdRazlTUkVWU1gxZEpSRlJJSUM4Z01uMXdlQ2xnTEZ4dUlDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2MybDZaU3hjYmlBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1YjNWME9pQW5ZMlZ1ZEdWeUp5eGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lIUnZjRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQnNaV1owT2lCZ1kyRnNZeWcxTUNVZ0t5QWtlMEpQVWtSRlVsOVhTVVJVU0NBdklESjljSGdwWUN4Y2JpQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ1lHTmhiR01vTlRBbElDMGdKSHRDVDFKRVJWSmZWMGxFVkVnZ0x5QXlmWEI0S1dBc1hHNGdJQ0FnSUNBZ0lDQWdhR1ZwWjJoME9pQnphWHBsTEZ4dUlDQWdJQ0FnSUNBZ0lIUmxlSFJNWVhsdmRYUTZJQ2RqWlc1MFpYSW5MRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnWFR0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlGdGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUhSdmNEb2dNQ3hjYmlBZ0lDQWdJQ0FnSUNCc1pXWjBPaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCZ1kyRnNZeWcxTUNVZ0xTQWtlMEpQVWtSRlVsOVhTVVJVU0NBdklESjljSGdwWUN4Y2JpQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklITnBlbVVzWEc0Z0lDQWdJQ0FnSUNBZ2RHVjRkRXhoZVc5MWREb2dKMk5sYm5SbGNpY3NYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBiM0E2SURBc1hHNGdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ1lHTmhiR01vTlRBbElDc2dKSHRDVDFKRVJWSmZWMGxFVkVnZ0x5QXlmWEI0S1dBc1hHNGdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklDZGpZV3hqS0RVd0pTa25MRnh1SUNBZ0lDQWdJQ0FnSUdobGFXZG9kRG9nWUdOaGJHTW9OVEFsSUMwZ0pIdENUMUpFUlZKZlYwbEVWRWdnTHlBeWZYQjRLV0FzWEc0Z0lDQWdJQ0FnSUNBZ2RHVjRkRXhoZVc5MWREb2dKM1J2Y0V4bFpuUW5MRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdkRzl3T2lCZ1kyRnNZeWcxTUNVZ0t5QWtlMEpQVWtSRlVsOVhTVVJVU0NBdklESjljSGdwWUN4Y2JpQWdJQ0FnSUNBZ0lDQnNaV1owT2lCZ1kyRnNZeWcxTUNVZ0t5QWtlMEpQVWtSRlVsOVhTVVJVU0NBdklESjljSGdwWUN4Y2JpQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ0oyTmhiR01vTlRBbEtTY3NYRzRnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBPaUJnWTJGc1l5ZzFNQ1VnTFNBa2UwSlBVa1JGVWw5WFNVUlVTQ0F2SURKOWNIZ3BZQ3hjYmlBZ0lDQWdJQ0FnSUNCMFpYaDBUR0Y1YjNWME9pQW5ZbTkwZEc5dFRHVm1kQ2NzWEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCZE8xeHVJQ0I5WEc1OU8xeHVYRzVqYjI1emRDQmtaV2RVYjFKaFpDQTlJR1JsWnlBOVBpQmtaV2NnS2lBb1RXRjBhQzVRU1NBdklERTRNQ2s3WEc1Y2JtTnZibk4wSUVSbFptRjFiSFJCZG1GMFlYSWdQU0FvY0hKdmNITTZJSHQ4WEc0Z0lITnBlbVU2SUhOMGNtbHVaeUI4SUc1MWJXSmxjaXhjYmlBZ2JtRnRaVG9nYzNSeWFXNW5MRnh1SUNCMFpYaDBUR0Y1YjNWME9pQW5ZMlZ1ZEdWeUp5QjhJQ2QwYjNCTVpXWjBKeUI4SUNkaWIzUjBiMjFNWldaMEp5eGNibng5S1NBOVBpQjdYRzRnSUdOdmJuTjBJSHNnYzJsNlpTd2dibUZ0WlN3Z2RHVjRkRXhoZVc5MWRDQjlJRDBnY0hKdmNITTdYRzVjYmlBZ1kyOXVjM1FnY1hWaGNuUmxjbEJoWkdScGJtY2dQU0JnWTJGc1l5Z2tlMDFoZEdndWMybHVLR1JsWjFSdlVtRmtLRFExS1NsOUlDb2dLQ1I3YzJsNlpYMHBJQzhnTWlsZ08xeHVYRzRnSUdOdmJuTjBJR2x1YVhScFlXd2dQU0FvWEc0Z0lDQWdQSE4yWjF4dUlDQWdJQ0FnZDJsa2RHZzlYQ0l4TURBbFhDSmNiaUFnSUNBZ0lIWnBaWGRDYjNnOVhDSXROVEFnTFRVd0lERXdNQ0F4TURCY0lseHVJQ0FnSUNBZ2RtVnljMmx2YmoxY0lqRXVNVndpWEc0Z0lDQWdJQ0J3Y21WelpYSjJaVUZ6Y0dWamRGSmhkR2x2UFZ3aWVFMXBaRmxOYVdRZ2JXVmxkRndpWEc0Z0lDQWdJQ0I0Yld4dWN6MWNJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5Mekl3TURBdmMzWm5YQ0pjYmlBZ0lDQStYRzRnSUNBZ0lDQThkR2wwYkdVK2UyNWhiV1Y5UEM5MGFYUnNaVDVjYmlBZ0lDQWdJRHgwWlhoMFhHNGdJQ0FnSUNBZ0lHWnZiblJUYVhwbFBWd2lOREJ3ZUZ3aVhHNGdJQ0FnSUNBZ0lHWnBiR3c5WENJak1URXhYQ0pjYmlBZ0lDQWdJQ0FnWkc5dGFXNWhiblJDWVhObGJHbHVaVDFjSW1ObGJuUnlZV3hjSWx4dUlDQWdJQ0FnSUNCMFpYaDBRVzVqYUc5eVBWd2liV2xrWkd4bFhDSmNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRiWEc0Z0lDQWdJQ0FnSUNBZ2RIbHdiMmR5WVhCb2VTNWhiblJwWVd4cFlYTmxaQ3hjYmlBZ0lDQWdJQ0FnSUNCMGVYQnZaM0poY0doNUxuTmhibk5UWlhKcFppeGNiaUFnSUNBZ0lDQWdJQ0IwZVhCdlozSmhjR2g1TG1admJuUlhaV2xuYUhSQ2IyeGtMRnh1SUNBZ0lDQWdJQ0JkTG1wdmFXNG9KeUFuS1gxY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2UyNWhiV1VnUHlCYkxpNHVibUZ0WlYxYk1GMHVkRzlWY0hCbGNrTmhjMlVvS1NBNklDY25mVnh1SUNBZ0lDQWdQQzkwWlhoMFBseHVJQ0FnSUR3dmMzWm5QbHh1SUNBcE8xeHVJQ0J6ZDJsMFkyZ2dLSFJsZUhSTVlYbHZkWFFwSUh0Y2JpQWdJQ0JqWVhObElDZGliM1IwYjIxTVpXWjBKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQmhjbWxoTFd4aFltVnNQWHR1WVcxbGZWeHVJQ0FnSUNBZ0lDQWdJR052Ykc5eVBWd2liR2xuYUhSSGNtRjVYQ0pjYmlBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE5WENJeE1EQWxYQ0pjYmlBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFZ3aVpteGxlRndpWEc0Z0lDQWdJQ0FnSUNBZ1lXeHBaMjVKZEdWdGN6MWNJbVZ1WkZ3aVhHNGdJQ0FnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJteHBibVZUZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gxOXpkSGxzWlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXUmthVzVuUW05MGRHOXRPaUJ4ZFdGeWRHVnlVR0ZrWkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NHRmtaR2x1WjFKcFoyaDBPaUJ4ZFdGeWRHVnlVR0ZrWkdsdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lIdHBibWwwYVdGc2ZWeHVJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNrN1hHNGdJQ0FnWTJGelpTQW5kRzl3VEdWbWRDYzZYRzRnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUNBZ1lYSnBZUzFzWVdKbGJEMTdibUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQmpiMnh2Y2oxY0lteHBaMmgwUjNKaGVWd2lYRzRnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBQVndpTVRBd0pWd2lYRzRnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVDFjSW1ac1pYaGNJbHh1SUNBZ0lDQWdJQ0FnSUdGc2FXZHVTWFJsYlhNOVhDSnpkR0Z5ZEZ3aVhHNGdJQ0FnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJteHBibVZUZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gxOXpkSGxzWlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lXUmthVzVuVkc5d09pQnhkV0Z5ZEdWeVVHRmtaR2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGa1pHbHVaMUpwWjJoME9pQnhkV0Z5ZEdWeVVHRmtaR2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUh0cGJtbDBhV0ZzZlZ4dUlDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNCaGNtbGhMV3hoWW1Wc1BYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZiRzl5UFZ3aWJHbG5hSFJIY21GNVhDSmNiaUFnSUNBZ0lDQWdJQ0JvWldsbmFIUTlYQ0l4TURBbFhDSmNiaUFnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQVndpWm14bGVGd2lYRzRnSUNBZ0lDQWdJQ0FnWVd4cFoyNUpkR1Z0Y3oxY0ltTmxiblJsY2x3aVhHNGdJQ0FnSUNBZ0lDQWdhblZ6ZEdsbWVVTnZiblJsYm5ROVhDSmpaVzUwWlhKY0lseHVJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnZTJsdWFYUnBZV3g5WEc0Z0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnUjNKdmRYQkJkbUYwWVhJb2NISnZjSE02SUZCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUhzZ1kyOXNiR0ZpYjNKaGRHOXljeXdnYjNWMGJHbHVaU3dnYzJsNlpTQTlJQ2RtYVhRbklIMGdQU0J3Y205d2N6dGNiaUFnWTI5dWMzUWdZWFpoZEdGeVYybGtkR2dnUFNCemFYcGxJRDA5UFNBblptbDBKeUEvSUNjeE1EQWxKeUE2SUVGV1FWUkJVbDlUU1ZwRlUxdHphWHBsWFR0Y2JpQWdZMjl1YzNRZ1lYWmhkR0Z5U0dWcFoyaDBJRDBnYzJsNlpTQTlQVDBnSjJacGRDY2dQeUFuSnlBNklFRldRVlJCVWw5VFNWcEZVMXR6YVhwbFhUdGNiaUFnWTI5dWMzUWdjRzl6YVhScGIyNXpJRDBnWVhaaGRHRnlUR0Y1YjNWMEtHTnZiR3hoWW05eVlYUnZjbk11YkdWdVozUm9MQ0JoZG1GMFlYSlhhV1IwYUNrN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdZMjlzYjNJOVhDSjNhR2wwWlZ3aVhHNGdJQ0FnSUNCdmRtVnlabXh2ZHoxY0ltaHBaR1JsYmx3aVhHNGdJQ0FnSUNCeWIzVnVaR2x1WnoxY0ltTnBjbU5zWlZ3aVhHNGdJQ0FnSUNCM2FXUjBhRDE3WVhaaGRHRnlWMmxrZEdoOVhHNGdJQ0FnSUNCb1pXbG5hSFE5ZTJGMllYUmhja2hsYVdkb2RIMWNiaUFnSUNBZ0lIQnZjMmwwYVc5dVBWd2ljbVZzWVhScGRtVmNJbHh1SUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSSmJteHBibVZUZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0JmWDNOMGVXeGxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0xpNHVLRzkxZEd4cGJtVWdQeUI3SUdKdmVGTm9ZV1J2ZHpvZ0p6QWdNQ0F3SURKd2VDQWpabVptSnlCOUlEb2dlMzBwTEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRwYkd4RGFHRnVaMlU2SUhSeVlXNXpabTl5YlNCbWFYaGxjeUJoSUhOMGNtRnVaMlVnWW1Wb1lYWnBiM0lnZDJobGNtVWdkR2hsSUdKdmNtUmxjaUJ2WmlCMGFHVWdZMmhwYkdSeVpXNWNiaUFnSUNBZ0lDQWdJQ0F2THlCaGNtVWdibTkwSUhCeWIzQmxjbXg1SUhSeWFXMXRaV1FnWlhabGJpQjBhRzkxWjJnZ2IzWmxjbVpzYjNjNklHaHBaR1JsYmlCcGN5QnpaWFJjYmlBZ0lDQWdJQ0FnSUNCM2FXeHNRMmhoYm1kbE9pQW5kSEpoYm5ObWIzSnRKeXhjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUgxOVhHNGdJQ0FnUGx4dUlDQWdJQ0FnUEVKdmVDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJHbHVaVk4wZVd4bFBYdDdJRjlmYzNSNWJHVTZJSHNnY0dGa1pHbHVaMEp2ZEhSdmJUb2dKekV3TUNVbklIMGdmWDBnTHo1Y2JpQWdJQ0FnSUh0NmFYQW9jRzl6YVhScGIyNXpMQ0JqYjJ4c1lXSnZjbUYwYjNKektTNXRZWEFvWEc0Z0lDQWdJQ0FnSUNoYmNHOXphWFJwYjI0c0lHTnZiR3hoWW05eVlYUnZjaUE5SUhzZ2JtRnRaVG9nSnljc0lITnlZem9nZFc1a1pXWnBibVZrSUgxZExDQnBaSGdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjdJSGRwWkhSb0xDQm9aV2xuYUhRc0lIUnZjQ3dnYkdWbWRDd2dkR1Y0ZEV4aGVXOTFkQ0I5SUQwZ2NHOXphWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2V5QnVZVzFsTENCemNtTWdmU0E5SUdOdmJHeGhZbTl5WVhSdmNqdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs5ZTJsa2VIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0OVhDSmhZbk52YkhWMFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvUFh0M2FXUjBhSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1ZwWjJoMFBYdG9aV2xuYUhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGJtZGxjbTkxYzJ4NVUyVjBTVzVzYVc1bFUzUjViR1U5ZTNzZ1gxOXpkSGxzWlRvZ2V5QjBiM0FzSUd4bFpuUWdmU0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdjM0pqSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeEpiV0ZuWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXeDBQWHR1WVcxbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJOVhDSWpSVVpGUmtWR1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE55WXoxN2MzSmpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GMGRYSmhiRmRwWkhSb1BYc3hmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GMGRYSmhiRWhsYVdkb2REMTdNWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGREMWNJbU52ZG1WeVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJRG9nS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4RVpXWmhkV3gwUVhaaGRHRnlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkRXhoZVc5MWREMTdkR1Y0ZEV4aGVXOTFkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOcGVtVTllMmhsYVdkb2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TG5kaGMyaDlJQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FwZlZ4dUlDQWdJRHd2UW05NFBseHVJQ0FwTzF4dWZWeHVYRzVIY205MWNFRjJZWFJoY2k1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdOdmJHeGhZbTl5WVhSdmNuTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRnh1SUNBZ0lGQnliM0JVZVhCbGN5NWxlR0ZqZENoN1hHNGdJQ0FnSUNCdVlXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0J6Y21NNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZlNsY2JpQWdLUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQnZkWFJzYVc1bE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdjMmw2WlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbmVITW5MQ0FuYzIwbkxDQW5iV1FuTENBbmJHY25MQ0FuZUd3bkxDQW5abWwwSjEwcExGeHVmVHRjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JqZUNCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCamIyeHZjbk1nWm5KdmJTQW5MaTlEYjJ4dmNuTXVZM056Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlJWldGa2FXNW5MbU56Y3ljN1hHNXBiWEJ2Y25RZ2RIbHdiMmR5WVhCb2VTQm1jbTl0SUNjdUwxUjVjRzluY21Gd2FIa3VZM056Snp0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0OFhHNGdJR0ZzYVdkdVB6b2dKMnhsWm5RbklId2dKM0pwWjJoMEp5QjhJQ2RqWlc1MFpYSW5JSHdnSjJwMWMzUnBabmtuTEZ4dUlDQmhZMk5sYzNOcFltbHNhWFI1VEdWMlpXdy9PaUF4SUh3Z01pQjhJRE1nZkNBMElId2dOU0I4SURZc1hHNGdJR05vYVd4a2NtVnVQem9nVW1WaFkzUXVUbTlrWlN4Y2JpQWdZMjlzYjNJL09seHVJQ0FnSUh3Z0oySnNkV1VuWEc0Z0lDQWdmQ0FuWkdGeWEwZHlZWGtuWEc0Z0lDQWdmQ0FuWldkbmNHeGhiblFuWEc0Z0lDQWdmQ0FuWjNKaGVTZGNiaUFnSUNCOElDZG5jbVZsYmlkY2JpQWdJQ0I4SUNkc2FXZG9kRWR5WVhrblhHNGdJQ0FnZkNBbmJXRnliMjl1SjF4dUlDQWdJSHdnSjIxcFpHNXBaMmgwSjF4dUlDQWdJSHdnSjI1aGRua25YRzRnSUNBZ2ZDQW5iMnhwZG1VblhHNGdJQ0FnZkNBbmIzSmhibWRsSjF4dUlDQWdJSHdnSjI5eVkyaHBaQ2RjYmlBZ0lDQjhJQ2R3YVc1bEoxeHVJQ0FnSUh3Z0ozQjFjbkJzWlNkY2JpQWdJQ0I4SUNkeVpXUW5YRzRnSUNBZ2ZDQW5kMkYwWlhKdFpXeHZiaWRjYmlBZ0lDQjhJQ2QzYUdsMFpTY3NYRzRnSUdsa1B6b2djM1J5YVc1bkxGeHVJQ0J2ZG1WeVpteHZkejg2SUNkdWIzSnRZV3duSUh3Z0oySnlaV0ZyVjI5eVpDY3NYRzRnSUhOcGVtVS9PaUFuYzIwbklId2dKMjFrSnlCOElDZHNaeWNzWEc0Z0lIUnlkVzVqWVhSbFB6b2dZbTl2YkdWaGJpeGNibng5TzF4dVhHNWpiMjV6ZENCa1pXWmhkV3gwU0dWaFpHbHVaMHhsZG1Wc2N5QTlJSHRjYmlBZ2MyMDZJRE1zWEc0Z0lHMWtPaUF5TEZ4dUlDQnNaem9nTVN4Y2JuMDdYRzVjYm1OdmJuTjBJRk5KV2tWZlUwTkJURVU2SUhzZ1czTnBlbVU2SUQ5emRISnBibWRkT2lCdWRXMWlaWElnZlNBOUlIdGNiaUFnYzIwNklERXNYRzRnSUcxa09pQXlMRnh1SUNCc1p6b2dNeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlFaGxZV1JwYm1jb2NISnZjSE02SUZCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUh0Y2JpQWdJQ0JoWTJObGMzTnBZbWxzYVhSNVRHVjJaV3dzWEc0Z0lDQWdZV3hwWjI0Z1BTQW5iR1ZtZENjc1hHNGdJQ0FnWTJocGJHUnlaVzRzWEc0Z0lDQWdZMjlzYjNJZ1BTQW5aR0Z5YTBkeVlYa25MRnh1SUNBZ0lHbGtJRDBnYm5Wc2JDeGNiaUFnSUNCdmRtVnlabXh2ZHlBOUlDZGljbVZoYTFkdmNtUW5MRnh1SUNBZ0lITnBlbVVnUFNBbmJHY25MRnh1SUNBZ0lIUnlkVzVqWVhSbElEMGdabUZzYzJVc1hHNGdJSDBnUFNCd2NtOXdjenRjYmx4dUlDQmpiMjV6ZENCamN5QTlJR040S0Z4dUlDQWdJSE4wZVd4bGN5NUlaV0ZrYVc1bkxGeHVJQ0FnSUhOMGVXeGxjMXRnWm05dWRGTnBlbVVrZTFOSldrVmZVME5CVEVWYmMybDZaVjE5WUYwc1hHNGdJQ0FnWTI5c2IzSnpXMk52Ykc5eVhTeGNiaUFnSUNCaGJHbG5iaUE5UFQwZ0oyTmxiblJsY2ljZ0ppWWdkSGx3YjJkeVlYQm9lUzVoYkdsbmJrTmxiblJsY2l4Y2JpQWdJQ0JoYkdsbmJpQTlQVDBnSjJwMWMzUnBabmtuSUNZbUlIUjVjRzluY21Gd2FIa3VZV3hwWjI1S2RYTjBhV1o1TEZ4dUlDQWdJR0ZzYVdkdUlEMDlQU0FuYkdWbWRDY2dKaVlnZEhsd2IyZHlZWEJvZVM1aGJHbG5ia3hsWm5Rc1hHNGdJQ0FnWVd4cFoyNGdQVDA5SUNkeWFXZG9kQ2NnSmlZZ2RIbHdiMmR5WVhCb2VTNWhiR2xuYmxKcFoyaDBMRnh1SUNBZ0lHOTJaWEptYkc5M0lEMDlQU0FuWW5KbFlXdFhiM0prSnlBbUppQjBlWEJ2WjNKaGNHaDVMbUp5WldGclYyOXlaQ3hjYmlBZ0lDQjBjblZ1WTJGMFpTQW1KaUIwZVhCdlozSmhjR2g1TG5SeWRXNWpZWFJsWEc0Z0lDazdYRzVjYmlBZ1kyOXVjM1FnYUdWaFpHbHVaMHhsZG1Wc0lEMGdZV05qWlhOemFXSnBiR2wwZVV4bGRtVnNJSHg4SUdSbFptRjFiSFJJWldGa2FXNW5UR1YyWld4elczTnBlbVZkTzF4dUlDQnNaWFFnYm1WM1VISnZjSE1nUFNCN0lHTnNZWE56VG1GdFpUb2dZM01nZlR0Y2JpQWdhV1lnS0dsa0tTQjdYRzRnSUNBZ2JtVjNVSEp2Y0hNZ1BTQjdJQzR1TG01bGQxQnliM0J6TENCcFpDQjlPMXh1SUNCOVhHNGdJR2xtSUNoMGNuVnVZMkYwWlNBbUppQjBlWEJsYjJZZ1kyaHBiR1J5Wlc0Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdibVYzVUhKdmNITWdQU0I3SUM0dUxtNWxkMUJ5YjNCekxDQjBhWFJzWlRvZ1kyaHBiR1J5Wlc0Z2ZUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1VtVmhZM1F1WTNKbFlYUmxSV3hsYldWdWRDaGdhQ1I3YUdWaFpHbHVaMHhsZG1Wc2ZXQXNJRzVsZDFCeWIzQnpMQ0JqYUdsc1pISmxiaWs3WEc1OVhHNWNia2hsWVdScGJtY3VjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQmhZMk5sYzNOcFltbHNhWFI1VEdWMlpXdzZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJNU3dnTWl3Z015d2dOQ3dnTlN3Z05sMHBMRnh1SUNCaGJHbG5iam9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuYkdWbWRDY3NJQ2R5YVdkb2RDY3NJQ2RqWlc1MFpYSW5MQ0FuYW5WemRHbG1lU2RkS1N4Y2JpQWdZMmhwYkdSeVpXNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0JqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNiaUFnSUNBbllteDFaU2NzWEc0Z0lDQWdKMlJoY210SGNtRjVKeXhjYmlBZ0lDQW5aV2RuY0d4aGJuUW5MRnh1SUNBZ0lDZG5jbUY1Snl4Y2JpQWdJQ0FuWjNKbFpXNG5MRnh1SUNBZ0lDZHNhV2RvZEVkeVlYa25MRnh1SUNBZ0lDZHRZWEp2YjI0bkxGeHVJQ0FnSUNkdGFXUnVhV2RvZENjc1hHNGdJQ0FnSjI1aGRua25MRnh1SUNBZ0lDZHZiR2wyWlNjc1hHNGdJQ0FnSjI5eVlXNW5aU2NzWEc0Z0lDQWdKMjl5WTJocFpDY3NYRzRnSUNBZ0ozQnBibVVuTEZ4dUlDQWdJQ2R3ZFhKd2JHVW5MRnh1SUNBZ0lDZHlaV1FuTEZ4dUlDQWdJQ2QzWVhSbGNtMWxiRzl1Snl4Y2JpQWdJQ0FuZDJocGRHVW5MRnh1SUNCZEtTeGNiaUFnYVdRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJRzkyWlhKbWJHOTNPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWR1YjNKdFlXd25MQ0FuWW5KbFlXdFhiM0prSjEwcExGeHVJQ0J6YVhwbE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d5ZHpiU2NzSUNkdFpDY3NJQ2RzWnlkZEtTeGNiaUFnZEhKMWJtTmhkR1U2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1ZlR0Y2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMMEp2ZUM1cWN5YzdYRzVwYlhCdmNuUWdTV052YmlCbWNtOXRJQ2N1TDBsamIyNHVhbk1uTzF4dWFXMXdiM0owSUdsamIyNXpJR1p5YjIwZ0p5NHZhV052Ym5NdmFXNWtaWGd1YW5Nbk8xeHVhVzF3YjNKMElITjBlV3hsY3lCbWNtOXRJQ2N1TDFCdlp5NWpjM01uTzF4dVhHNWpiMjV6ZENCVFNWcEZYMDVCVFVWZlZFOWZVRWxZUlV3Z1BTQjdYRzRnSUhoek9pQXlOQ3hjYmlBZ2MyMDZJRE15TEZ4dUlDQnRaRG9nTkRBc1hHNGdJR3huT2lBME9DeGNiaUFnZUd3NklEVTJMRnh1ZlR0Y2JseHVZMjl1YzNRZ1UwbGFSVjlPUVUxRlgxUlBYMGxEVDA1ZlUwbGFSVjlRU1ZoRlRDQTlJSHRjYmlBZ2VITTZJREV5TEZ4dUlDQnpiVG9nTVRZc1hHNGdJRzFrT2lBeE9DeGNiaUFnYkdjNklESXdMRnh1SUNCNGJEb2dNalFzWEc1OU8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWVdOMGFYWmxQem9nWW05dmJHVmhiaXhjYmlBZ1ltZERiMnh2Y2o4NlhHNGdJQ0FnZkNBbmRISmhibk53WVhKbGJuUW5YRzRnSUNBZ2ZDQW5aR0Z5YTBkeVlYa25YRzRnSUNBZ2ZDQW5kSEpoYm5Od1lYSmxiblJFWVhKclIzSmhlU2RjYmlBZ0lDQjhJQ2RuY21GNUoxeHVJQ0FnSUh3Z0oyeHBaMmgwUjNKaGVTZGNiaUFnSUNCOElDZDNhR2wwWlNkY2JpQWdJQ0I4SUNkeVpXUW5MRnh1SUNCa1lXNW5aWEp2ZFhOc2VWTmxkRk4yWjFCaGRHZy9PaUI3SUY5ZmNHRjBhRG9nYzNSeWFXNW5JSDBzWEc0Z0lHWnZZM1Z6WldRL09pQmliMjlzWldGdUxGeHVJQ0JvYjNabGNtVmtQem9nWW05dmJHVmhiaXhjYmlBZ2MyVnNaV04wWldRL09pQmliMjlzWldGdUxGeHVJQ0JwWTI5dVB6b2dKRXRsZVhNOGRIbHdaVzltSUdsamIyNXpQaXhjYmlBZ2FXTnZia052Ykc5eVB6b2dKMmR5WVhrbklId2dKMlJoY210SGNtRjVKeUI4SUNkeVpXUW5JSHdnSjNkb2FYUmxKeXhjYmlBZ2MybDZaVDg2SUNSTFpYbHpQSFI1Y0dWdlppQlRTVnBGWDA1QlRVVmZWRTlmVUVsWVJVdytMRnh1ZkgwN1hHNWNibU52Ym5OMElHUmxabUYxYkhSSlkyOXVRblYwZEc5dVNXTnZia052Ykc5eWN5QTlJSHRjYmlBZ1pHRnlhMGR5WVhrNklDZDNhR2wwWlNjc1hHNGdJR2R5WVhrNklDZDNhR2wwWlNjc1hHNGdJR3hwWjJoMFIzSmhlVG9nSjJkeVlYa25MRnh1SUNCMGNtRnVjM0JoY21WdWREb2dKMmR5WVhrbkxGeHVJQ0J5WldRNklDZDNhR2wwWlNjc1hHNGdJSFJ5WVc1emNHRnlaVzUwUkdGeWEwZHlZWGs2SUNkM2FHbDBaU2NzWEc0Z0lIZG9hWFJsT2lBblozSmhlU2NzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQlFiMmNvY0hKdmNITTZJRkJ5YjNCektTQjdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQmhZM1JwZG1VZ1BTQm1ZV3h6WlN4Y2JpQWdJQ0JpWjBOdmJHOXlJRDBnSjNSeVlXNXpjR0Z5Wlc1MEp5eGNiaUFnSUNCa1lXNW5aWEp2ZFhOc2VWTmxkRk4yWjFCaGRHZ3NYRzRnSUNBZ1ptOWpkWE5sWkNBOUlHWmhiSE5sTEZ4dUlDQWdJR2h2ZG1WeVpXUWdQU0JtWVd4elpTeGNiaUFnSUNCcFkyOXVMRnh1SUNBZ0lHbGpiMjVEYjJ4dmNpeGNiaUFnSUNCelpXeGxZM1JsWkNBOUlHWmhiSE5sTEZ4dUlDQWdJSE5wZW1VZ1BTQW5iV1FuTEZ4dUlDQjlJRDBnY0hKdmNITTdYRzVjYmlBZ1kyOXVjM1FnYVdOdmJsTnBlbVVnUFNCVFNWcEZYMDVCVFVWZlZFOWZTVU5QVGw5VFNWcEZYMUJKV0VWTVczTnBlbVZkTzF4dVhHNGdJR052Ym5OMElHTnZiRzl5SUQxY2JpQWdJQ0FvYzJWc1pXTjBaV1FnSmlZZ0ozZG9hWFJsSnlrZ2ZId2dhV052YmtOdmJHOXlJSHg4SUdSbFptRjFiSFJKWTI5dVFuVjBkRzl1U1dOdmJrTnZiRzl5YzF0aVowTnZiRzl5WFR0Y2JseHVJQ0JqYjI1emRDQnBibXhwYm1WVGRIbHNaU0E5SUh0Y2JpQWdJQ0JvWldsbmFIUTZJRk5KV2tWZlRrRk5SVjlVVDE5UVNWaEZURnR6YVhwbFhTeGNiaUFnSUNCM2FXUjBhRG9nVTBsYVJWOU9RVTFGWDFSUFgxQkpXRVZNVzNOcGVtVmRMRnh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR05zWVhOelpYTWdQU0JqYkdGemMyNWhiV1Z6S0hOMGVXeGxjeTV3YjJjc0lIdGNiaUFnSUNCYmMzUjViR1Z6VzJKblEyOXNiM0pkWFRvZ0lYTmxiR1ZqZEdWa0xGeHVJQ0FnSUZ0emRIbHNaWE11YzJWc1pXTjBaV1JkT2lCelpXeGxZM1JsWkN4Y2JpQWdJQ0JiYzNSNWJHVnpMbUZqZEdsMlpWMDZJR0ZqZEdsMlpTeGNiaUFnSUNCYmMzUjViR1Z6TG1adlkzVnpaV1JkT2lCbWIyTjFjMlZrTEZ4dUlDQWdJRnR6ZEhsc1pYTXVhRzkyWlhKbFpGMDZJR2h2ZG1WeVpXUWdKaVlnSVdadlkzVnpaV1FnSmlZZ0lXRmpkR2wyWlN4Y2JpQWdmU2s3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFpHbDJJR05zWVhOelRtRnRaVDE3WTJ4aGMzTmxjMzBnYzNSNWJHVTllMmx1YkdsdVpWTjBlV3hsZlQ1Y2JpQWdJQ0FnSUR4Q2IzZ2djbTkxYm1ScGJtYzlYQ0pqYVhKamJHVmNJajVjYmlBZ0lDQWdJQ0FnZXk4cVhHNGdJQ0FnSUNBZ0lDQWdWMlVuY21VZ1pYaHdiR2xqYVhSc2VTQnpaWFIwYVc1bklHRnVJR1Z0Y0hSNUlITjBjbWx1WnlCaGN5QmhJR3hoWW1Wc0lHOXVJSFJvWlNCSlkyOXVJSE5wYm1ObElIZGxYRzRnSUNBZ0lDQWdJQ0FnWVd4eVpXRmtlU0JvWVhabElHRnVJR0Z5YVdFdGJHRmlaV3dnYjI0Z2RHaGxJR0oxZEhSdmJpQmpiMjUwWVdsdVpYSXVYRzRnSUNBZ0lDQWdJQ0FnVkdocGN5QnBjeUJ6YVcxcGJHRnlJSFJ2SUdoaGRtbHVaeUJsYlhCMGVTQmdZV3gwWUNCaGRIUnlhV0oxZEdWek9seHVJQ0FnSUNBZ0lDQWdJR2gwZEhCek9pOHZaR0YyYVdSM1lXeHphQzV1WVcxbEwyRmpZMlZ6YzJsaWFXeHBkSGt0ZEdsd0xXVnRjSFI1TFdGc2RDMWhkSFJ5YVdKMWRHVnpYRzRnSUNBZ0lDQWdJQ292ZlZ4dUlDQWdJQ0FnSUNBOFNXTnZibHh1SUNBZ0lDQWdJQ0FnSUdGalkyVnpjMmxpYVd4cGRIbE1ZV0psYkQxY0lsd2lYRzRnSUNBZ0lDQWdJQ0FnWTI5c2IzSTllMk52Ykc5eWZWeHVJQ0FnSUNBZ0lDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFUzWm5VR0YwYUQxN1pHRnVaMlZ5YjNWemJIbFRaWFJUZG1kUVlYUm9mVnh1SUNBZ0lDQWdJQ0FnSUdsamIyNDllMmxqYjI1OVhHNGdJQ0FnSUNBZ0lDQWdjMmw2WlQxN2FXTnZibE5wZW1WOVhHNGdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0E4TDJScGRqNWNiaUFnS1R0Y2JuMWNibHh1VUc5bkxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1lXTjBhWFpsT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ1ltZERiMnh2Y2pvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0Z0Y2JpQWdJQ0FuZEhKaGJuTndZWEpsYm5RbkxGeHVJQ0FnSUNka1lYSnJSM0poZVNjc1hHNGdJQ0FnSjNSeVlXNXpjR0Z5Wlc1MFJHRnlhMGR5WVhrbkxGeHVJQ0FnSUNkbmNtRjVKeXhjYmlBZ0lDQW5iR2xuYUhSSGNtRjVKeXhjYmlBZ0lDQW5kMmhwZEdVbkxGeHVJQ0JkS1N4Y2JpQWdaR0Z1WjJWeWIzVnpiSGxUWlhSVGRtZFFZWFJvT2lCUWNtOXdWSGx3WlhNdWMyaGhjR1VvZTF4dUlDQWdJRjlmY0dGMGFEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnZlNrc1hHNGdJR1p2WTNWelpXUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0JvYjNabGNtVmtPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnYVdOdmJqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtFOWlhbVZqZEM1clpYbHpLR2xqYjI1ektTa3NYRzRnSUdsamIyNURiMnh2Y2pvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzblozSmhlU2NzSUNka1lYSnJSM0poZVNjc0lDZHlaV1FuTENBbmQyaHBkR1VuWFNrc1hHNGdJSE5sYkdWamRHVmtPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnYzJsNlpUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtFOWlhbVZqZEM1clpYbHpLRk5KV2tWZlRrRk5SVjlVVDE5UVNWaEZUQ2twTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJSE4wZVd4bGN5Qm1jbTl0SUNjdUwwbGpiMjVDZFhSMGIyNHVZM056Snp0Y2JtbHRjRzl5ZENCcFkyOXVjeUJtY205dElDY3VMMmxqYjI1ekwybHVaR1Y0TG1wekp6dGNibWx0Y0c5eWRDQlFiMmNnWm5KdmJTQW5MaTlRYjJjdWFuTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1lXTmpaWE56YVdKcGJHbDBlVVY0Y0dGdVpHVmtQem9nWW05dmJHVmhiaXhjYmlBZ1lXTmpaWE56YVdKcGJHbDBlVWhoYzNCdmNIVndQem9nWW05dmJHVmhiaXhjYmlBZ1lXTmpaWE56YVdKcGJHbDBlVXhoWW1Wc09pQnpkSEpwYm1jc1hHNGdJR0puUTI5c2IzSS9PbHh1SUNBZ0lId2dKM1J5WVc1emNHRnlaVzUwSjF4dUlDQWdJSHdnSjJSaGNtdEhjbUY1SjF4dUlDQWdJSHdnSjNSeVlXNXpjR0Z5Wlc1MFJHRnlhMGR5WVhrblhHNGdJQ0FnZkNBblozSmhlU2RjYmlBZ0lDQjhJQ2RzYVdkb2RFZHlZWGtuWEc0Z0lDQWdmQ0FuZDJocGRHVW5YRzRnSUNBZ2ZDQW5jbVZrSnl4Y2JpQWdaR0Z1WjJWeWIzVnpiSGxUWlhSVGRtZFFZWFJvUHpvZ2V5QmZYM0JoZEdnNklITjBjbWx1WnlCOUxGeHVJQ0JrYVhOaFlteGxaRDg2SUdKdmIyeGxZVzRzWEc0Z0lHbGpiMjQvT2lBa1MyVjVjengwZVhCbGIyWWdhV052Ym5NK0xGeHVJQ0JwWTI5dVEyOXNiM0kvT2lBblozSmhlU2NnZkNBblpHRnlhMGR5WVhrbklId2dKM0psWkNjZ2ZDQW5kMmhwZEdVbkxGeHVJQ0J2YmtOc2FXTnJQem9nS0hzZ1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFBpQjlLU0E5UGlCMmIybGtMRnh1SUNCelpXeGxZM1JsWkQ4NklHSnZiMnhsWVc0c1hHNGdJSE5wZW1VL09pQW5lSE1uSUh3Z0ozTnRKeUI4SUNkdFpDY2dmQ0FuYkdjbklId2dKM2hzSnl4Y2JueDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJKWTI5dVFuVjBkRzl1S0h0Y2JpQWdZV05qWlhOemFXSnBiR2wwZVVWNGNHRnVaR1ZrTEZ4dUlDQmhZMk5sYzNOcFltbHNhWFI1U0dGemNHOXdkWEFzWEc0Z0lHRmpZMlZ6YzJsaWFXeHBkSGxNWVdKbGJDeGNiaUFnWW1kRGIyeHZjaXhjYmlBZ1pHRnVaMlZ5YjNWemJIbFRaWFJUZG1kUVlYUm9MRnh1SUNCa2FYTmhZbXhsWkN4Y2JpQWdhV052Yml4Y2JpQWdhV052YmtOdmJHOXlMRnh1SUNCelpXeGxZM1JsWkN4Y2JpQWdjMmw2WlN4Y2JpQWdiMjVEYkdsamF5eGNibjA2SUZCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUZ0cGMwRmpkR2wyWlN3Z2MyVjBRV04wYVhabFhTQTlJRkpsWVdOMExuVnpaVk4wWVhSbEtHWmhiSE5sS1R0Y2JpQWdZMjl1YzNRZ1cybHpSbTlqZFhObFpDd2djMlYwUm05amRYTmxaRjBnUFNCU1pXRmpkQzUxYzJWVGRHRjBaU2htWVd4elpTazdYRzRnSUdOdmJuTjBJRnRwYzBodmRtVnlaV1FzSUhObGRFaHZkbVZ5WldSZElEMGdVbVZoWTNRdWRYTmxVM1JoZEdVb1ptRnNjMlVwTzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BHSjFkSFJ2Ymx4dUlDQWdJQ0FnWVhKcFlTMWxlSEJoYm1SbFpEMTdZV05qWlhOemFXSnBiR2wwZVVWNGNHRnVaR1ZrZlZ4dUlDQWdJQ0FnWVhKcFlTMW9ZWE53YjNCMWNEMTdZV05qWlhOemFXSnBiR2wwZVVoaGMzQnZjSFZ3ZlZ4dUlDQWdJQ0FnWVhKcFlTMXNZV0psYkQxN1lXTmpaWE56YVdKcGJHbDBlVXhoWW1Wc2ZWeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzI1aGJXVnpLRnh1SUNBZ0lDQWdJQ0J6ZEhsc1pYTXVZblYwZEc5dUxGeHVJQ0FnSUNBZ0lDQmthWE5oWW14bFpDQS9JSE4wZVd4bGN5NWthWE5oWW14bFpDQTZJSE4wZVd4bGN5NWxibUZpYkdWa1hHNGdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ1pHbHpZV0pzWldROWUyUnBjMkZpYkdWa2ZWeHVJQ0FnSUNBZ2IyNUNiSFZ5UFhzb0tTQTlQaUJ6WlhSR2IyTjFjMlZrS0daaGJITmxLWDFjYmlBZ0lDQWdJRzl1UTJ4cFkyczllMlYyWlc1MElEMCtJRzl1UTJ4cFkyc2dKaVlnYjI1RGJHbGpheWg3SUdWMlpXNTBJSDBwZlZ4dUlDQWdJQ0FnYjI1R2IyTjFjejE3S0NrZ1BUNGdjMlYwUm05amRYTmxaQ2gwY25WbEtYMWNiaUFnSUNBZ0lHOXVUVzkxYzJWRWIzZHVQWHNvS1NBOVBpQnpaWFJCWTNScGRtVW9kSEoxWlNsOVhHNGdJQ0FnSUNCdmJrMXZkWE5sUlc1MFpYSTlleWdwSUQwK0lITmxkRWh2ZG1WeVpXUW9kSEoxWlNsOVhHNGdJQ0FnSUNCdmJrMXZkWE5sVEdWaGRtVTlleWdwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjMlYwUVdOMGFYWmxLR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdjMlYwU0c5MlpYSmxaQ2htWVd4elpTazdYRzRnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdiMjVOYjNWelpWVndQWHNvS1NBOVBpQnpaWFJCWTNScGRtVW9abUZzYzJVcGZWeHVJQ0FnSUNBZ2RIbHdaVDFjSW1KMWRIUnZibHdpWEc0Z0lDQWdQbHh1SUNBZ0lDQWdQRkJ2WjF4dUlDQWdJQ0FnSUNCaFkzUnBkbVU5ZXlGa2FYTmhZbXhsWkNBbUppQnBjMEZqZEdsMlpYMWNiaUFnSUNBZ0lDQWdZbWREYjJ4dmNqMTdZbWREYjJ4dmNuMWNiaUFnSUNBZ0lDQWdaR0Z1WjJWeWIzVnpiSGxUWlhSVGRtZFFZWFJvUFh0a1lXNW5aWEp2ZFhOc2VWTmxkRk4yWjFCaGRHaDlYRzRnSUNBZ0lDQWdJR1p2WTNWelpXUTlleUZrYVhOaFlteGxaQ0FtSmlCcGMwWnZZM1Z6WldSOVhHNGdJQ0FnSUNBZ0lHaHZkbVZ5WldROWV5RmthWE5oWW14bFpDQW1KaUJwYzBodmRtVnlaV1I5WEc0Z0lDQWdJQ0FnSUdsamIyNDllMmxqYjI1OVhHNGdJQ0FnSUNBZ0lHbGpiMjVEYjJ4dmNqMTdhV052YmtOdmJHOXlmVnh1SUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRDE3YzJWc1pXTjBaV1I5WEc0Z0lDQWdJQ0FnSUhOcGVtVTllM05wZW1WOVhHNGdJQ0FnSUNBdlBseHVJQ0FnSUR3dlluVjBkRzl1UGx4dUlDQXBPMXh1ZlZ4dVhHNUpZMjl1UW5WMGRHOXVMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV05qWlhOemFXSnBiR2wwZVVWNGNHRnVaR1ZrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ1lXTmpaWE56YVdKcGJHbDBlVWhoYzNCdmNIVndPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJR0puUTI5c2IzSTZJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJYRzRnSUNBZ0ozUnlZVzV6Y0dGeVpXNTBKeXhjYmlBZ0lDQW5aR0Z5YTBkeVlYa25MRnh1SUNBZ0lDZDBjbUZ1YzNCaGNtVnVkRVJoY210SGNtRjVKeXhjYmlBZ0lDQW5aM0poZVNjc1hHNGdJQ0FnSjJ4cFoyaDBSM0poZVNjc1hHNGdJQ0FnSjNkb2FYUmxKeXhjYmlBZ0lDQW5jbVZrSnl4Y2JpQWdYU2tzWEc0Z0lHUmhibWRsY205MWMyeDVVMlYwVTNablVHRjBhRG9nVUhKdmNGUjVjR1Z6TG5Ob1lYQmxLSHRjYmlBZ0lDQmZYM0JoZEdnNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJSDBwTEZ4dUlDQmthWE5oWW14bFpEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJR2xqYjI0NklGQnliM0JVZVhCbGN5NXZibVZQWmloUFltcGxZM1F1YTJWNWN5aHBZMjl1Y3lrcExGeHVJQ0JwWTI5dVEyOXNiM0k2SUZCeWIzQlVlWEJsY3k1dmJtVlBaaWhiSjJkeVlYa25MQ0FuWkdGeWEwZHlZWGtuTENBbmNtVmtKeXdnSjNkb2FYUmxKMTBwTEZ4dUlDQnZia05zYVdOck9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdjMlZzWldOMFpXUTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0J6YVhwbE9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1d5ZDRjeWNzSUNkemJTY3NJQ2R0WkNjc0lDZHNaeWNzSUNkNGJDZGRLU3hjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCN0lHTnlaV0YwWlZCdmNuUmhiQ0I5SUdaeWIyMGdKM0psWVdOMExXUnZiU2M3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmphR2xzWkhKbGJqb2dVbVZoWTNRdVRtOWtaU3hjYm54OU8xeHVYRzUwZVhCbElGTjBZWFJsSUQwZ2UzeGNiaUFnYlc5MWJuUmxaRG9nWW05dmJHVmhiaXhjYm54OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTVlYbGxjaUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWREeFFjbTl3Y3l3Z1UzUmhkR1UrSUh0Y2JpQWdjM1JoZEdVZ1BTQjdYRzRnSUNBZ2JXOTFiblJsWkRvZ1ptRnNjMlVzWEc0Z0lIMDdYRzVjYmlBZ1pXdzZJRWhVVFV4RWFYWkZiR1Z0Wlc1ME8xeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdSdlkzVnRaVzUwSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtVnNJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxamIyNXpiMnhsWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1hHNGdJQ0FnSUNBZ0lDZFZjMmx1WnlCTVlYbGxjaUIzYVhSb2IzVjBJR1J2WTNWdFpXNTBJSEJ5WlhObGJuUXVJRU5vYVd4a2NtVnVJSGRwYkd3Z2JtOTBJR0psSUhKbGJtUmxjbVZrTGlkY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5Rb0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtiMk4xYldWdWRDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdaRzlqZFcxbGJuUXVZbTlrZVNrZ2UxeHVJQ0FnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzVoY0hCbGJtUkRhR2xzWkNoMGFHbHpMbVZzS1R0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ0YjNWdWRHVmtPaUIwY25WbElIMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR052YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwS0NrZ2UxeHVJQ0FnSUdsbUlDaGtiMk4xYldWdWRDNWliMlI1S1NCN1hHNGdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbkpsYlc5MlpVTm9hV3hrS0hSb2FYTXVaV3dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR05vYVd4a2NtVnVJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBZWFJsTG0xdmRXNTBaV1FnSmlZZ1kzSmxZWFJsVUc5eWRHRnNLR05vYVd4a2NtVnVMQ0IwYUdsekxtVnNLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRTFoYzJzZ1puSnZiU0FuTGk5TllYTnJMbXB6Snp0Y2JseHVMeXBjYmlBZ1RYVmphQ0J2WmlCMGFHVWdiV0YwYUNCaGJtUWdkVzVrWlhKemRHRnVaR2x1WnlCaFltOTFkQ0IwYUdseklHTnZiWEJ2Ym1WdWRDQmpiMjFsY3lCbWNtOXRJRUIyYW1WaGRYZ25jMXh1SUNCbGVHTmxiR3hsYm5RZ1lteHZaeUJ3YjNOMElHOXVJR2x0WVdkbElISmxjMmw2YVc1bkxseHVYRzRnSUdoMGRIQTZMeTlpYkc5bkxuWnFaWFY0TG1OdmJTOHlNREV6TDJsdFlXZGxMMk56Y3kxamIyNTBZV2x1WlhJdFlXNWtMV052ZG1WeUxtaDBiV3hjYmx4dUlDQkpJR2hwWjJoc2VTQnlaV052YlcxbGJtUWdlVzkxSUhKbFlXUWdkR2hoZENCbWFYSnpkQ0JpWldadmNtVWdZMjl1ZEdsdWRXbHVaeUJ2YmlCeVpXRmthVzVuTGx4dUtpOWNibHh1WTI5dWMzUWdZWE53WldOMFVtRjBhVzhnUFNBb2QybGtkR2dzSUdobGFXZG9kQ2tnUFQ0Z2QybGtkR2dnTHlCb1pXbG5hSFE3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmphR2xzWkhKbGJqODZJRkpsWVdOMExrNXZaR1VzWEc0Z0lHTnZiblJsYm5SQmMzQmxZM1JTWVhScGJ6b2diblZ0WW1WeUxGeHVJQ0JvWldsbmFIUTZJRzUxYldKbGNpeGNiaUFnZDJsa2RHZzZJRzUxYldKbGNpeGNibng5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCTVpYUjBaWEppYjNnb2UxeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ1kyOXVkR1Z1ZEVGemNHVmpkRkpoZEdsdkxGeHVJQ0JvWldsbmFIUXNYRzRnSUhkcFpIUm9MRnh1ZlRvZ1VISnZjSE1wSUh0Y2JpQWdZMjl1YzNRZ2RtbGxkM0J2Y25SQmMzQmxZM1JTWVhScGJ5QTlJR0Z6Y0dWamRGSmhkR2x2S0hkcFpIUm9MQ0JvWldsbmFIUXBPMXh1WEc0Z0lHeGxkQ0JqYjI1MFpXNTBTR1ZwWjJoME8xeHVJQ0JzWlhRZ1kyOXVkR1Z1ZEZkcFpIUm9PMXh1WEc0Z0lHbG1JQ2hqYjI1MFpXNTBRWE53WldOMFVtRjBhVzhnUENCMmFXVjNjRzl5ZEVGemNHVmpkRkpoZEdsdktTQjdYRzRnSUNBZ1kyOXVkR1Z1ZEZkcFpIUm9JRDBnZDJsa2RHZzdYRzRnSUNBZ1kyOXVkR1Z1ZEVobGFXZG9kQ0E5SUhkcFpIUm9JQzhnWTI5dWRHVnVkRUZ6Y0dWamRGSmhkR2x2TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdOdmJuUmxiblJYYVdSMGFDQTlJR2hsYVdkb2RDQXFJR052Ym5SbGJuUkJjM0JsWTNSU1lYUnBienRjYmlBZ0lDQmpiMjUwWlc1MFNHVnBaMmgwSUQwZ2FHVnBaMmgwTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYjJabWMyVjBWRzl3SUQwZ0tHTnZiblJsYm5SSVpXbG5hSFFnTFNCb1pXbG5hSFFwSUM4Z0xUSTdYRzRnSUdOdmJuTjBJRzltWm5ObGRFeGxablFnUFNBb1kyOXVkR1Z1ZEZkcFpIUm9JQzBnZDJsa2RHZ3BJQzhnTFRJN1hHNWNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThUV0Z6YXlCM2FXUjBhRDE3ZDJsa2RHaDlJR2hsYVdkb2REMTdhR1ZwWjJoMGZUNWNiaUFnSUNBZ0lEeGthWFlnYzNSNWJHVTllM3NnYldGeVoybHVWRzl3T2lCdlptWnpaWFJVYjNBc0lHMWhjbWRwYmt4bFpuUTZJRzltWm5ObGRFeGxablFnZlgwK1hHNGdJQ0FnSUNBZ0lEeE5ZWE5ySUhkcFpIUm9QWHRqYjI1MFpXNTBWMmxrZEdoOUlHaGxhV2RvZEQxN1kyOXVkR1Z1ZEVobGFXZG9kSDArWEc0Z0lDQWdJQ0FnSUNBZ2UyTm9hV3hrY21WdWZWeHVJQ0FnSUNBZ0lDQThMMDFoYzJzK1hHNGdJQ0FnSUNBOEwyUnBkajVjYmlBZ0lDQThMMDFoYzJzK1hHNGdJQ2s3WEc1OVhHNWNia3hsZEhSbGNtSnZlQzV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTeGNiaUFnWTI5dWRHVnVkRUZ6Y0dWamRGSmhkR2x2T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TG1selVtVnhkV2x5WldRc1hHNGdJR2hsYVdkb2REb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpNXBjMUpsY1hWcGNtVmtMRnh1SUNCM2FXUjBhRG9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaTVwYzFKbGNYVnBjbVZrTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmplQ0JtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0J6ZEhsc1pYTWdabkp2YlNBbkxpOU1hVzVyTG1OemN5YzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCamFHbHNaSEpsYmo4NklGSmxZV04wTGs1dlpHVXNYRzRnSUdoeVpXWTZJSE4wY21sdVp5eGNiaUFnYVc1c2FXNWxQem9nWW05dmJHVmhiaXhjYmlBZ2IyNURiR2xqYXo4NklDaDdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBQRDRnZlNrZ1BUNGdkbTlwWkN4Y2JpQWdkR0Z5WjJWMFB6b2diblZzYkNCOElDZHpaV3htSnlCOElDZGliR0Z1YXljc1hHNThmVHRjYmx4dVkyOXVjM1FnVkVGQ1gwdEZXVjlEVDBSRklEMGdPVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVEdsdWF5aDdYRzRnSUdOb2FXeGtjbVZ1TEZ4dUlDQm9jbVZtTEZ4dUlDQnBibXhwYm1VZ1BTQm1ZV3h6WlN4Y2JpQWdiMjVEYkdsamF5eGNiaUFnZEdGeVoyVjBJRDBnYm5Wc2JDeGNibjA2SUZCeWIzQnpLU0I3WEc0Z0lHTnZibk4wSUZ0bGJtRmliR1ZHYjJOMWMxTjBlV3hsY3l3Z2MyVjBSVzVoWW14bFJtOWpkWE5UZEhsc1pYTmRJRDBnVW1WaFkzUXVkWE5sVTNSaGRHVW9kSEoxWlNrN1hHNGdJR052Ym5OMElISmxiQ0E5SUhSaGNtZGxkQ0E5UFQwZ0oySnNZVzVySnlBL0lDZHViMjl3Wlc1bGNpQnViM0psWm1WeWNtVnlKeUE2SUc1MWJHdzdYRzRnSUdOdmJuTjBJR3hwYm10VVlYSm5aWFFnUFNCMFlYSm5aWFFnUHlCZ1h5UjdkR0Z5WjJWMGZXQWdPaUJ1ZFd4c08xeHVYRzRnSUdOdmJuTjBJR2hoYm1Sc1pVTnNhV05ySUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1MFBENHBJRDArSUh0Y2JpQWdJQ0JwWmlBb2IyNURiR2xqYXlBbUppQm9jbVZtS1NCN1hHNGdJQ0FnSUNCdmJrTnNhV05yS0hzZ1pYWmxiblFnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHTnZibk4wSUdoaGJtUnNaVTF2ZFhObFJHOTNiaUE5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvZEdGeVoyVjBJRDA5UFNBbllteGhibXNuSUNZbUlHaHlaV1lwSUh0Y2JpQWdJQ0FnSUhObGRFVnVZV0pzWlVadlkzVnpVM1I1YkdWektHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ1kyOXVjM1FnYUdGdVpHeGxTMlY1VlhBZ1BTQW9aWFpsYm5RNklGTjViblJvWlhScFkwdGxlV0p2WVhKa1JYWmxiblE4UGlrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwWVhKblpYUWdQVDA5SUNkaWJHRnVheWNnSmlZZ1pYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ1ZFRkNYMHRGV1Y5RFQwUkZJQ1ltSUdoeVpXWXBJSHRjYmlBZ0lDQWdJSE5sZEVWdVlXSnNaVVp2WTNWelUzUjViR1Z6S0hSeWRXVXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGhYRzRnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk40S0Z4dUlDQWdJQ0FnSUNCemRIbHNaWE11YkdsdWF5eGNiaUFnSUNBZ0lDQWdaVzVoWW14bFJtOWpkWE5UZEhsc1pYTWdQeUJ6ZEhsc1pYTXVZV05qWlhOemFXSnNaVVp2WTNWelUzUjViR1VnT2lBbkp5eGNiaUFnSUNBZ0lDQWdhVzVzYVc1bElEOGdKeWNnT2lCemRIbHNaWE11WW14dlkydGNiaUFnSUNBZ0lDbDlYRzRnSUNBZ0lDQm9jbVZtUFh0b2NtVm1mVnh1SUNBZ0lDQWdiMjVOYjNWelpVUnZkMjQ5ZTJoaGJtUnNaVTF2ZFhObFJHOTNibjFjYmlBZ0lDQWdJRzl1UzJWNVZYQTllMmhoYm1Sc1pVdGxlVlZ3ZlZ4dUlDQWdJQ0FnYjI1RGJHbGphejE3YUdGdVpHeGxRMnhwWTJ0OVhHNGdJQ0FnSUNCeVpXdzllM0psYkgxY2JpQWdJQ0FnSUhSaGNtZGxkRDE3YkdsdWExUmhjbWRsZEgxY2JpQWdJQ0ErWEc0Z0lDQWdJQ0I3WTJocGJHUnlaVzU5WEc0Z0lDQWdQQzloUGx4dUlDQXBPMXh1ZlZ4dVhHNU1hVzVyTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMbWx6VW1WeGRXbHlaV1FzWEc0Z0lHaHlaV1k2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdhVzVzYVc1bE9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdiMjVEYkdsamF6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJSFJoY21kbGREb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdHVkV3hzTENBbmMyVnNaaWNzSUNkaWJHRnVheWRkS1N4Y2JuMDdYRzRpTENJdktpcGNiaUFxSUdSbFltOTFibU5sSUhCeVpYWmxiblJ6SUdFZ2NHRnlkR2xqZFd4aGNpQm1kVzVqZEdsdmJpQm1jbTl0SUdKbGFXNW5JR05oYkd4bFpDQjFiblJwYkNCaFpuUmxjaUJoSUdkcGRtVnVYRzRnS2lCamIyOXNaRzkzYmlCd1pYSnBiMlFnS0dSbFptRjFiSFFnTVRBd2JYTXBMaUJGZG1WeWVTQjBhVzFsSUhSb1pTQm1kVzVqZEdsdmJpQnBjeUJqWVd4c1pXUXNJR2wwSUhKbGMyVjBjMXh1SUNvZ2RHaGxJR052YjJ4a2IzZHVMbHh1SUNvdlhHNWNiaTh2SUVCbWJHOTNJSE4wY21samRGeHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1pHVmliM1Z1WTJVb1hHNGdJR1p1T2lBb0xpNHVZWEpuY3pvZ0tpa2dQVDRnZG05cFpDeGNiaUFnZEdoeVpYTm9hRzlzWkRvZ2JuVnRZbVZ5SUQwZ01UQXdYRzRwSUh0Y2JpQWdiR1YwSUdSbFptVnlWR2x0WlhJNklGUnBiV1Z2ZFhSSlJDQjhJRzUxYkd3Z1BTQnVkV3hzTzF4dVhHNGdJR052Ym5OMElHUmxZbTkxYm1ObFpDQTlJQ2d1TGk1aGNtZHpPaUFxS1NBOVBpQjdYRzRnSUNBZ2FXWWdLR1JsWm1WeVZHbHRaWElwSUh0Y2JpQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaGtaV1psY2xScGJXVnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmtaV1psY2xScGJXVnlJRDBnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0JrWldabGNsUnBiV1Z5SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJR1p1S0M0dUxtRnlaM01wTzF4dUlDQWdJSDBzSUhSb2NtVnphR2h2YkdRcE8xeHVJQ0I5TzF4dVhHNGdJR1JsWW05MWJtTmxaQzVqYkdWaGNsUnBiV1Z2ZFhRZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHUmxabVZ5VkdsdFpYSXBJSHRjYmlBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoa1pXWmxjbFJwYldWeUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlHUmxZbTkxYm1ObFpEdGNibjFjYmlJc0lpOHFLbHh1SUNvZ1JtVjBZMmhKZEdWdGN5QnBjeUJoSUd4dloybGpJR052YlhCdmJtVnVkQ0IwYUdGMElISmxibVJsY25NZ2JtOGdZMjl1ZEdWdWRDQnBkSE5sYkdZdUlFbDBjeUJxYjJKY2JpQXFJR2x6SUhSdklHMWhibUZuWlNCM2FHVnVJSFJvWlNCbmFYWmxiaUJtWlhSamFFMXZjbVVnYldWMGFHOWtJSE5vYjNWc1pDQmlaU0JqWVd4c1pXUWdZbUZ6WldRZ2IyNWNiaUFxSUhSb1pTQm5hWFpsYmlCelkzSnZiR3d2YzJsNlpTQndjbTl3Y3k1Y2JpQXFYRzRnS2lCWGFHbHNaU0J1YnlCbGJHVnRaVzUwSUdseklHRmpkSFZoYkd4NUlIQmhjM05sWkNCMGJ5QkdaWFJqYUVsMFpXMXpMQ0JwZENCcGN5QnBiblJsYm1SbFpDQjBieUJpWlNCMWMyVmtYRzRnS2lCcGJpQmpiMjVxZFc1amRHbHZiaUIzYVhSb0lHRWdiR0Z5WjJVZ2MyTnliMnhzSUdOdmJuUmhhVzVsY2lCMGFHRjBJSFZ6WlhNZ1lYTjVibU1nWm1WMFkyaHBibWNnZEc5Y2JpQXFJR3h2WVdRZ1lXNWtJSEpsYm1SbGNpQmhaR1JwZEdsdmJtRnNJR1JoZEdFdUlFSmhjMlZrSUc5dUlIUm9aU0JvWldsbmFIUWdiMllnZEdocGN5QmpiMjUwWVdsdVpYSWdZVzVrWEc0Z0tpQnBkSE1nWTNWeWNtVnVkQ0J6WTNKdmJHd2djRzl6YVhScGIyNHNJRVpsZEdOb1NYUmxiWE1nYVhNZ2NtVnpjRzl1YzJsaWJHVWdabTl5SUhSeWFXZG5aWEpwYm1jZ1puVjBkWEpsWEc0Z0tpQm1aWFJqYUNCallXeHNjeTVjYmlBcUwxeHVYRzR2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN1hHNGdJR052Ym5SaGFXNWxja2hsYVdkb2REb2diblZ0WW1WeUxGeHVJQ0JwYzBGMFJXNWtQem9nWW05dmJHVmhiaXhjYmlBZ2FYTkdaWFJqYUdsdVp6b2dZbTl2YkdWaGJpeGNiaUFnWm1WMFkyaE5iM0psUHpvZ0tDa2dQVDRnZG05cFpDeGNiaUFnYzJOeWIyeHNTR1ZwWjJoME9pQnVkVzFpWlhJc1hHNGdJSE5qY205c2JGUnZjRG9nYm5WdFltVnlMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUm1WMFkyaEpkR1Z0Y3lCbGVIUmxibVJ6SUZKbFlXTjBMbEIxY21WRGIyMXdiMjVsYm5ROFVISnZjSE0rSUh0Y2JpQWdjM1JoZEdsaklIQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmpiMjUwWVdsdVpYSklaV2xuYUhRNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCcGMwRjBSVzVrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnBjMFpsZEdOb2FXNW5PaUJRY205d1ZIbHdaWE11WW05dmJDNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHWmxkR05vVFc5eVpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYzJOeWIyeHNTR1ZwWjJoME9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2MyTnliMnhzVkc5d09pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxtbHpVbVZ4ZFdseVpXUXNYRzRnSUgwN1hHNWNiaUFnWTI5dGNHOXVaVzUwUkdsa1RXOTFiblFvS1NCN1hHNGdJQ0FnYzJWMFZHbHRaVzkxZENoMGFHbHpMbU5vWldOcktUdGNiaUFnZlZ4dVhHNGdJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaU2dwSUh0Y2JpQWdJQ0IwYUdsekxtTm9aV05yS0NrN1hHNGdJSDFjYmx4dUlDQmphR1ZqYXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSklaV2xuYUhRc1hHNGdJQ0FnSUNCcGMwRjBSVzVrTEZ4dUlDQWdJQ0FnYVhOR1pYUmphR2x1Wnl4Y2JpQWdJQ0FnSUdabGRHTm9UVzl5WlN4Y2JpQWdJQ0FnSUhOamNtOXNiRWhsYVdkb2RDeGNiaUFnSUNBZ0lITmpjbTlzYkZSdmNDeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJR2xtSUNocGMwRjBSVzVrSUh4OElHbHpSbVYwWTJocGJtY2dmSHdnSVdabGRHTm9UVzl5WlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCelkzSnZiR3hDZFdabVpYSWdQU0JqYjI1MFlXbHVaWEpJWldsbmFIUWdLaUF6TzF4dVhHNGdJQ0FnYVdZZ0tITmpjbTlzYkZSdmNDQXJJSE5qY205c2JFSjFabVpsY2lBK0lITmpjbTlzYkVobGFXZG9kQ2tnZTF4dUlDQWdJQ0FnWm1WMFkyaE5iM0psS0NrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2lncElIdGNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZlZ4dWZWeHVJaXdpTHlvcVhHNGdLaUJUWTNKdmJHeERiMjUwWVdsdVpYSWdhWE1nWVNCd1lYTnpMWFJvY205MVoyZ2dZMjl0Y0c5dVpXNTBJSFJvWVhRZ2MybHRjR3g1SUhObGRITWdkWEFnWVc0Z2IyNVRZM0p2Ykd4Y2JpQXFJR2hoYm1Sc1pYSWdiMjRnZEdobElHZHBkbVZ1SUhOamNtOXNiRU52Ym5SaGFXNWxjaUJsYkdWdFpXNTBJQ2h2Y2lCMGFHVWdaV3hsYldWdWRDQjBhR0YwSUdselhHNGdLaUJ5WlhSMWNtNWxaQ0JoY3lCeVpYTjFiSFFnYjJZZ1kyRnNiR2x1WnlCMGFHVWdjMk55YjJ4c1EyOXVkR0ZwYm1WeUlHMWxkR2h2WkNrdUlGUm9hWE1nWVd4c2IzZHpJR1p2Y2x4dUlDb2dkR2hsSUdWMlpXNTBJR3hwYzNSbGJtVnlJSE4xWW5OamNtbHdkR2x2YmlCdlppQjBhR1VnYzJOeWIyeHNRMjl1ZEdGcGJtVnlJSFJ2SUdKbElHMWhibUZuWldRZ2FXNXphV1JsWEc0Z0tpQjBhR1VnVW1WaFkzUWdiR2xtWldONVkyeGxJSGRwZEdodmRYUWdZV1JrYVc1bklHSnNiMkYwSUhSdklFMWhjMjl1Y25rZ2IzSWdiM1JvWlhJZ2IyNVRZM0p2Ykd4Y2JpQXFJSE4xWW5OamNtbGlaWEp6TGx4dUlDcGNiaUFxSUU1dmRHVWdkR2hoZENCMGFHbHpJRU52YlhCdmJtVnVkQ0J5Wlc1a1pYSnpJR2wwY3lCamFHbHNaSEpsYmlCM2FYUm9iM1YwSUdOeVpXRjBhVzVuSUdGdWVWeHVJQ29nWVdSa2FYUnBiMjVoYkNCamIyNTBaVzUwTGlCQmJITnZJRzV2ZEdVZ2RHaGhkQ3dnZDJocGJHVWdkR2hsSUdOdmJYQnZibVZ1ZENCcGN5QmlkV2xzZENCMGJ5QnRZVzVoWjJWY2JpQXFJRzl1VTJOeWIyeHNJR2x1YzJsa1pTQnZaaUIwYUdVZ1VtVmhZM1FnYkdsbVpXTjVZMnhsTENCcGRDQmtiMlZ6YmlkMElHTm9ZVzVuWlNCdmJsTmpjbTlzYkNCbGRtVnVkSE5jYmlBcUlHOXlJSFJvWlNCQlVFa2dZWFFnWVd4c0xDQnpieUJwZENCamIzVnNaQ0JsWVhOcGJIa2dZbVVnWVdSaGNIUmxaQ0IwYnlCdmRHaGxjaUJsZG1WdWRDQjBlWEJsY3k1Y2JpQXFMMXh1WEc0dkx5QkFabXh2ZHlCemRISnBZM1JjYm1sdGNHOXlkQ0FxSUdGeklGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCamFHbHNaSEpsYmo4NklGSmxZV04wTGs1dlpHVXNYRzRnSUc5dVUyTnliMnhzT2lBb1pYWmxiblE2SUVWMlpXNTBLU0E5UGlCMmIybGtMRnh1SUNCelkzSnZiR3hEYjI1MFlXbHVaWEk2SUQ5SVZFMU1SV3hsYldWdWRDQjhJQ2dvS1NBOVBpQS9TRlJOVEVWc1pXMWxiblFwTEZ4dWZIMDdYRzVjYm1aMWJtTjBhVzl1SUdkbGRGTmpjbTlzYkVOdmJuUmhhVzVsY2loelkzSnZiR3hEYjI1MFlXbHVaWElwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCelkzSnZiR3hEYjI1MFlXbHVaWElnUFQwOUlDZG1kVzVqZEdsdmJpZGNiaUFnSUNBL0lITmpjbTlzYkVOdmJuUmhhVzVsY2lncFhHNGdJQ0FnT2lCelkzSnZiR3hEYjI1MFlXbHVaWEk3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOamNtOXNiRU52Ym5SaGFXNWxjaUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWREeFFjbTl3Y3o0Z2UxeHVJQ0J6WTNKdmJHeERiMjUwWVdsdVpYSTZJRDlJVkUxTVJXeGxiV1Z1ZER0Y2JseHVJQ0J6ZEdGMGFXTWdjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR05vYVd4a2NtVnVPaUJRY205d1ZIbHdaWE11Ym05a1pTNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHOXVVMk55YjJ4c09pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUhOamNtOXNiRU52Ym5SaGFXNWxjam9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlVISnZjRlI1Y0dWekxtOWlhbVZqZEN3Z1VISnZjRlI1Y0dWekxtWjFibU5kS1Z4dUlDQWdJQ0FnTG1selVtVnhkV2x5WldRc1hHNGdJSDA3WEc1Y2JpQWdZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2MyTnliMnhzUTI5dWRHRnBibVZ5SUQwZ1oyVjBVMk55YjJ4c1EyOXVkR0ZwYm1WeUtIUm9hWE11Y0hKdmNITXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUtUdGNiaUFnSUNCcFppQW9jMk55YjJ4c1EyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVk5qY205c2JFTnZiblJoYVc1bGNpaHpZM0p2Ykd4RGIyNTBZV2x1WlhJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCdVpYaDBVMk55YjJ4c1EyOXVkR0ZwYm1WeUlEMGdaMlYwVTJOeWIyeHNRMjl1ZEdGcGJtVnlLSFJvYVhNdWNISnZjSE11YzJOeWIyeHNRMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQnBaaUFvYm1WNGRGTmpjbTlzYkVOdmJuUmhhVzVsY2lBbUppQnVaWGgwVTJOeWIyeHNRMjl1ZEdGcGJtVnlJQ0U5UFNCMGFHbHpMbk5qY205c2JFTnZiblJoYVc1bGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZUWTNKdmJHeERiMjUwWVdsdVpYSW9ibVY0ZEZOamNtOXNiRU52Ym5SaGFXNWxjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWTI5dGNHOXVaVzUwVjJsc2JGVnViVzkxYm5Rb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWMyTnliMnhzUTI5dWRHRnBibVZ5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5qY205c2JFTnZiblJoYVc1bGNpNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R6WTNKdmJHd25MQ0IwYUdsekxtaGhibVJzWlZOamNtOXNiQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWjJWMFUyTnliMnhzUTI5dWRHRnBibVZ5VW1WbUlEMGdLQ2tnUFQ0Z2RHaHBjeTV6WTNKdmJHeERiMjUwWVdsdVpYSTdYRzVjYmlBZ2FHRnVaR3hsVTJOeWIyeHNJRDBnS0dWMlpXNTBPaUJGZG1WdWRDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWNISnZjSE11YjI1VFkzSnZiR3dvWlhabGJuUXBPMXh1SUNCOU8xeHVYRzRnSUhWd1pHRjBaVk5qY205c2JFTnZiblJoYVc1bGNpaHpZM0p2Ykd4RGIyNTBZV2x1WlhJNklFaFVUVXhGYkdWdFpXNTBLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQXZMeUJqYkdWaGJuVndJR1Y0YVhOMGFXNW5JSE5qY205c2JDQmpiMjUwWVdsdVpYSWdhV1lnYVhRZ1pYaHBjM1J6WEc0Z0lDQWdJQ0IwYUdsekxuTmpjbTlzYkVOdmJuUmhhVzVsY2k1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHpZM0p2Ykd3bkxDQjBhR2x6TG1oaGJtUnNaVk5qY205c2JDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUlEMGdjMk55YjJ4c1EyOXVkR0ZwYm1WeU8xeHVJQ0FnSUhSb2FYTXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozTmpjbTlzYkNjc0lIUm9hWE11YUdGdVpHeGxVMk55YjJ4c0tUdGNiaUFnZlZ4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1VtVmhZM1F1UTJocGJHUnlaVzR1YjI1c2VTaDBhR2x6TG5CeWIzQnpMbU5vYVd4a2NtVnVLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5b3FYRzRnS2lCMGFISnZkSFJzWlNCc2FXMXBkSE1nZEdobElHNTFiV0psY2lCdlppQjBhVzFsY3lCaElHWjFibU4wYVc5dUlHTmhiaUJpWlNCallXeHNaV1FnZEc4Z1lWeHVJQ29nWjJsMlpXNGdkR2h5WlhOb2FHOXNaQ0FvTVRBd2JYTWdZbmtnWkdWbVlYVnNkQ2t1SUZSb1pTQm1kVzVqZEdsdmJpQnBjeUJoYkhkaGVYTWdZMkZzYkdWa1hHNGdLaUJ2YmlCMGFHVWdiR1ZoWkdsdVp5QmhibVFnZEhKaGFXeHBibWNnWldSblpTNWNiaUFxTDF4dVhHNHZMeUJBWm14dmR5QnpkSEpwWTNSY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhSb2NtOTBkR3hsS0Z4dUlDQm1iam9nS0M0dUxtRnlaM002SUNvcElEMCtJSFp2YVdRc1hHNGdJSFJvY21WemFHaHZiR1E2SUc1MWJXSmxjaUE5SURFd01GeHVLU0I3WEc0Z0lHeGxkQ0JzWVhOME9pQnVkVzFpWlhJZ2ZDQjJiMmxrTzF4dUlDQnNaWFFnWkdWbVpYSlVhVzFsY2pvZ1ZHbHRaVzkxZEVsRUlId2dkbTlwWkR0Y2JpQWdZMjl1YzNRZ2RHaHliM1IwYkdWa0lEMGdLQzR1TG1GeVozTTZJQ29wSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0J1YjNjZ1BTQkVZWFJsTG01dmR5Z3BPMXh1SUNBZ0lHbG1JQ2hzWVhOMElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ2JtOTNJQzBnYkdGemRDQThJSFJvY21WemFHaHZiR1FwSUh0Y2JpQWdJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaGtaV1psY2xScGJXVnlLVHRjYmlBZ0lDQWdJR1JsWm1WeVZHbHRaWElnUFNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHRnpkQ0E5SUc1dmR6dGNiaUFnSUNBZ0lDQWdabTRvTGk0dVlYSm5jeWs3WEc0Z0lDQWdJQ0I5TENCMGFISmxjMmhvYjJ4a0lDMGdLRzV2ZHlBdElHeGhjM1FwS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiR0Z6ZENBOUlHNXZkenRjYmlBZ0lDQWdJR1p1S0M0dUxtRnlaM01wTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCMGFISnZkSFJzWldRdVkyeGxZWEpVYVcxbGIzVjBJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hrWldabGNsUnBiV1Z5S1NCN1hHNGdJQ0FnSUNCamJHVmhjbFJwYldWdmRYUW9aR1ZtWlhKVWFXMWxjaWs3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUIwYUhKdmRIUnNaV1E3WEc1OVhHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQjBlWEJsSUhzZ1EyRmphR1VnZlNCbWNtOXRJQ2N1TDBOaFkyaGxMbXB6Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nVFdWaGMzVnlaVzFsYm5SVGRHOXlaVHhVT2lCN2ZTQjhJQ1JTWldGa1QyNXNlVUZ5Y21GNVBHMXBlR1ZrUGl3Z1ZqNWNiaUFnYVcxd2JHVnRaVzUwY3lCRFlXTm9aVHhVTENCV1BpQjdYRzRnSUcxaGNEb2dWMlZoYTAxaGNEeFVMQ0JXUGlBOUlHNWxkeUJYWldGclRXRndLQ2s3WEc1Y2JpQWdaMlYwS0d0bGVUb2dWQ2s2SUQ5V0lIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXRZWEF1WjJWMEtHdGxlU2s3WEc0Z0lIMWNibHh1SUNCb1lYTW9hMlY1T2lCVUtUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0Z3TG1oaGN5aHJaWGtwTzF4dUlDQjlYRzVjYmlBZ2MyVjBLR3RsZVRvZ1ZDd2dkbUZzZFdVNklGWXBPaUIyYjJsa0lIdGNiaUFnSUNCMGFHbHpMbTFoY0M1elpYUW9hMlY1TENCMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNCeVpYTmxkQ2dwT2lCMmIybGtJSHRjYmlBZ0lDQjBhR2x6TG0xaGNDQTlJRzVsZHlCWFpXRnJUV0Z3S0NrN1hHNGdJSDFjYm4xY2JpSXNJaThxS2x4dUlDb2dUV1ZoYzNWeWFXNW5JSE5qY205c2JDQndiM05wZEdsdmJuTXNJR1ZzWlcxbGJuUWdhR1ZwWjJoMGN5d2daWFJqSUdseklHUnBabVpsY21WdWRDQmlaWFIzWldWdVhHNGdLaUJrYVdabVpYSmxiblFnWW5KdmQzTmxjbk1nWVc1a0lIUm9aU0IzYVc1a2IzY2diMkpxWldOMElIWnpJRzkwYUdWeUlFUlBUU0J1YjJSbGN5NGdWR2hsYzJWY2JpQXFJSFYwYVd4eklHRmljM1J5WVdOMElHRjNZWGtnZEdobGMyVWdaR2xtWm1WeVpXNWpaWE11WEc0Z0tpOWNibHh1THk4Z1FHWnNiM2NnYzNSeWFXTjBYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwUld4bGJXVnVkRWhsYVdkb2RDaGxiR1Z0Wlc1ME9pQklWRTFNUld4bGJXVnVkQ2s2SUc1MWJXSmxjaUI3WEc0Z0lISmxkSFZ5YmlCbGJHVnRaVzUwSUQwOVBTQjNhVzVrYjNjZ1B5QjNhVzVrYjNjdWFXNXVaWEpJWldsbmFIUWdPaUJsYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZER0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEZkcGJtUnZkMU5qY205c2JGQnZjeWdwSUh0Y2JpQWdhV1lnS0hkcGJtUnZkeTV6WTNKdmJHeFpJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBdkx5Qk5iMlJsY200Z1luSnZkM05sY2x4dUlDQWdJSEpsZEhWeWJpQjNhVzVrYjNjdWMyTnliMnhzV1R0Y2JpQWdmVnh1SUNCcFppQW9YRzRnSUNBZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwSUNZbVhHNGdJQ0FnWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbk5qY205c2JGUnZjQ0FoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ2tnZTF4dUlDQWdJQzh2SUVsRklITjFjSEJ2Y25RdVhHNGdJQ0FnY21WMGRYSnVJR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDNXpZM0p2Ykd4VWIzQTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlEQTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlNaV3hoZEdsMlpWTmpjbTlzYkZSdmNDaGxiR1Z0Wlc1ME9pQklWRTFNUld4bGJXVnVkQ2s2SUc1MWJXSmxjaUI3WEc0Z0lISmxkSFZ5YmlCbGJHVnRaVzUwSUQwOVBTQjNhVzVrYjNkY2JpQWdJQ0EvSUdkbGRGZHBibVJ2ZDFOamNtOXNiRkJ2Y3lncFhHNGdJQ0FnT2lCbGJHVnRaVzUwTG5OamNtOXNiRlJ2Y0NBdElHVnNaVzFsYm5RdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZEc5d08xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFUyTnliMnhzU0dWcFoyaDBLR1ZzWlcxbGJuUTZJRWhVVFV4RmJHVnRaVzUwS1RvZ2JuVnRZbVZ5SUh0Y2JpQWdjbVYwZFhKdUlHVnNaVzFsYm5RZ1BUMDlJSGRwYm1SdmR5QW1KaUJrYjJOMWJXVnVkQzVrYjJOMWJXVnVkRVZzWlcxbGJuUmNiaUFnSUNBL0lHUnZZM1Z0Wlc1MExtUnZZM1Z0Wlc1MFJXeGxiV1Z1ZEM1elkzSnZiR3hJWldsbmFIUmNiaUFnSUNBNklHVnNaVzFsYm5RdWMyTnliMnhzU0dWcFoyaDBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBVMk55YjJ4c1VHOXpLR1ZzWlcxbGJuUTZJRWhVVFV4RmJHVnRaVzUwS1RvZ2JuVnRZbVZ5SUh0Y2JpQWdjbVYwZFhKdUlHVnNaVzFsYm5RZ1BUMDlJSGRwYm1SdmR5QS9JR2RsZEZkcGJtUnZkMU5qY205c2JGQnZjeWdwSURvZ1pXeGxiV1Z1ZEM1elkzSnZiR3hVYjNBN1hHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYm1WNGNHOXlkQ0JqYjI1emRDQkVaV1poZFd4MFRHRjViM1YwVTNsdFltOXNJRDBnVTNsdFltOXNLQ2RrWldaaGRXeDBKeWs3WEc1bGVIQnZjblFnWTI5dWMzUWdWVzVwWm05eWJWSnZkMHhoZVc5MWRGTjViV0p2YkNBOUlGTjViV0p2YkNnbmRXNXBabTl5YlZKdmR5Y3BPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnZEhsd1pTQjdJRU5oWTJobElIMGdabkp2YlNBbkxpOURZV05vWlM1cWN5YzdYRzVjYm1WNGNHOXlkQ0IwZVhCbElGQnZjMmwwYVc5dUlEMGdlMXh1SUNCMGIzQTZJRzUxYldKbGNpeGNiaUFnYkdWbWREb2diblZ0WW1WeUxGeHVJQ0IzYVdSMGFEb2diblZ0WW1WeUxGeHVJQ0JvWldsbmFIUTZJRzUxYldKbGNpeGNibjA3WEc1Y2JtTnZibk4wSUcxcGJtUmxlQ0E5SUdGeWNpQTlQaUI3WEc0Z0lHeGxkQ0JwWkhnZ1BTQXdPMXh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHRnljaTVzWlc1bmRHZzdJR2tnS3owZ01Ta2dlMXh1SUNBZ0lHbG1JQ2hoY25KYmFWMGdQQ0JoY25KYmFXUjRYU2tnZTF4dUlDQWdJQ0FnYVdSNElEMGdhVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdjbVYwZFhKdUlHbGtlRHRjYm4wN1hHNWNibU52Ym5OMElHOW1abk5qY21WbGJpQTlJQ2gzYVdSMGFDd2dhR1ZwWjJoMElEMGdTVzVtYVc1cGRIa3BJRDArSUNoN1hHNGdJSFJ2Y0RvZ0xUazVPVGtzWEc0Z0lHeGxablE2SUMwNU9UazVMRnh1SUNCM2FXUjBhQ3hjYmlBZ2FHVnBaMmgwTEZ4dWZTazdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRHhVUGloN1hHNGdJR05oWTJobExGeHVJQ0JqYjJ4MWJXNVhhV1IwYUNBOUlESXpOaXhjYmlBZ1ozVjBkR1Z5SUQwZ01UUXNYRzRnSUcxcGJrTnZiSE1nUFNBeUxGeHVJQ0IzYVdSMGFDeGNibjA2SUh0OFhHNGdJR052YkhWdGJsZHBaSFJvUHpvZ2JuVnRZbVZ5TEZ4dUlDQm5kWFIwWlhJL09pQnVkVzFpWlhJc1hHNGdJR05oWTJobE9pQkRZV05vWlR4VUxDQnVkVzFpWlhJK0xGeHVJQ0J0YVc1RGIyeHpQem9nYm5WdFltVnlMRnh1SUNCM2FXUjBhRDg2SUQ5dWRXMWlaWElzWEc1OGZTa2dQVDRnS0dsMFpXMXpPaUJCY25KaGVUd3FQaWs2SUVGeWNtRjVQRkJ2YzJsMGFXOXVQaUE5UGlCN1hHNGdJR2xtSUNoM2FXUjBhQ0E5UFNCdWRXeHNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbDBaVzF6TG0xaGNDZ29LU0E5UGlCdlptWnpZM0psWlc0b1kyOXNkVzF1VjJsa2RHZ3BLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJuTjBJR052YkhWdGJsZHBaSFJvUVc1a1IzVjBkR1Z5SUQwZ1kyOXNkVzF1VjJsa2RHZ2dLeUJuZFhSMFpYSTdYRzRnSUdOdmJuTjBJR052YkhWdGJrTnZkVzUwSUQwZ1RXRjBhQzV0WVhnb1hHNGdJQ0FnVFdGMGFDNW1iRzl2Y2lnb2QybGtkR2dnS3lCbmRYUjBaWElwSUM4Z1kyOXNkVzF1VjJsa2RHaEJibVJIZFhSMFpYSXBMRnh1SUNBZ0lHMXBia052YkhOY2JpQWdLVHRjYmlBZ0x5OGdkR2hsSUhSdmRHRnNJR2hsYVdkb2RDQnZaaUJsWVdOb0lHTnZiSFZ0Ymx4dUlDQmpiMjV6ZENCb1pXbG5hSFJ6SUQwZ2JtVjNJRUZ5Y21GNUtHTnZiSFZ0YmtOdmRXNTBLUzVtYVd4c0tEQXBPMXh1SUNCamIyNXpkQ0JqWlc1MFpYSlBabVp6WlhRZ1BTQk5ZWFJvTG0xaGVDaGNiaUFnSUNCTllYUm9MbVpzYjI5eUtDaDNhV1IwYUNBdElHTnZiSFZ0YmxkcFpIUm9RVzVrUjNWMGRHVnlJQ29nWTI5c2RXMXVRMjkxYm5RZ0t5Qm5kWFIwWlhJcElDOGdNaWtzWEc0Z0lDQWdNRnh1SUNBcE8xeHVYRzRnSUhKbGRIVnliaUJwZEdWdGN5NXlaV1IxWTJVb0tHRmpZeXdnYVhSbGJTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIQnZjMmwwYVc5dWN5QTlJR0ZqWXp0Y2JpQWdJQ0JqYjI1emRDQm9aV2xuYUhRZ1BTQmpZV05vWlM1blpYUW9hWFJsYlNrN1hHNGdJQ0FnYkdWMElIQnZjMmwwYVc5dU8xeHVYRzRnSUNBZ2FXWWdLR2hsYVdkb2RDQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQndiM05wZEdsdmJpQTlJRzltWm5OamNtVmxiaWhqYjJ4MWJXNVhhV1IwYUNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR052Ym5OMElHaGxhV2RvZEVGdVpFZDFkSFJsY2lBOUlHaGxhV2RvZENBcklHZDFkSFJsY2p0Y2JpQWdJQ0FnSUdOdmJuTjBJR052YkNBOUlHMXBibVJsZUNob1pXbG5hSFJ6S1R0Y2JpQWdJQ0FnSUdOdmJuTjBJSFJ2Y0NBOUlHaGxhV2RvZEhOYlkyOXNYVHRjYmlBZ0lDQWdJR052Ym5OMElHeGxablFnUFNCamIyd2dLaUJqYjJ4MWJXNVhhV1IwYUVGdVpFZDFkSFJsY2lBcklHTmxiblJsY2s5bVpuTmxkRHRjYmx4dUlDQWdJQ0FnYUdWcFoyaDBjMXRqYjJ4ZElDczlJR2hsYVdkb2RFRnVaRWQxZEhSbGNqdGNiaUFnSUNBZ0lIQnZjMmwwYVc5dUlEMGdleUIwYjNBc0lHeGxablFzSUhkcFpIUm9PaUJqYjJ4MWJXNVhhV1IwYUN3Z2FHVnBaMmgwSUgwN1hHNGdJQ0FnZlZ4dUlDQWdJSEJ2YzJsMGFXOXVjeTV3ZFhOb0tIQnZjMmwwYVc5dUtUdGNiaUFnSUNCeVpYUjFjbTRnY0c5emFYUnBiMjV6TzF4dUlDQjlMQ0JiWFNrN1hHNTlPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnZEhsd1pTQjdJRU5oWTJobElIMGdabkp2YlNBbkxpOURZV05vWlM1cWN5YzdYRzVjYm5SNWNHVWdVRzl6YVhScGIyNGdQU0I3SUhSdmNEb2diblZ0WW1WeUxDQnNaV1owT2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSXNJR2hsYVdkb2REb2diblZ0WW1WeUlIMDdYRzVjYm1OdmJuTjBJRzltWm5OamNtVmxiaUE5SUNoM2FXUjBhQ3dnYUdWcFoyaDBJRDBnU1c1bWFXNXBkSGtwSUQwK0lDaDdYRzRnSUhSdmNEb2dMVGs1T1Rrc1hHNGdJR3hsWm5RNklDMDVPVGs1TEZ4dUlDQjNhV1IwYUN4Y2JpQWdhR1ZwWjJoMExGeHVmU2s3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUR4VVBpaDdYRzRnSUdOaFkyaGxMRnh1SUNCamIyeDFiVzVYYVdSMGFDQTlJREl6Tml4Y2JpQWdaM1YwZEdWeUlEMGdNVFFzWEc0Z0lIZHBaSFJvTEZ4dUlDQnRhVzVEYjJ4eklEMGdNeXhjYm4wNklIdDhYRzRnSUdOaFkyaGxPaUJEWVdOb1pUeFVMQ0J1ZFcxaVpYSStMRnh1SUNCamIyeDFiVzVYYVdSMGFEODZJRzUxYldKbGNpeGNiaUFnWjNWMGRHVnlQem9nYm5WdFltVnlMRnh1SUNCM2FXUjBhRDg2SUQ5dWRXMWlaWElzWEc0Z0lHMXBia052YkhNL09pQnVkVzFpWlhJc1hHNThmU2tnUFQ0Z0tHbDBaVzF6T2lCQmNuSmhlVHhVUGlrNklFRnljbUY1UEZCdmMybDBhVzl1UGlBOVBpQjdYRzRnSUdsbUlDaDNhV1IwYUNBOVBTQnVkV3hzS1NCN1hHNGdJQ0FnY21WMGRYSnVJR2wwWlcxekxtMWhjQ2dvS1NBOVBpQnZabVp6WTNKbFpXNG9ZMjlzZFcxdVYybGtkR2dwS1R0Y2JpQWdmVnh1WEc0Z0lHTnZibk4wSUdOdmJIVnRibGRwWkhSb1FXNWtSM1YwZEdWeUlEMGdZMjlzZFcxdVYybGtkR2dnS3lCbmRYUjBaWEk3WEc0Z0lHTnZibk4wSUdOdmJIVnRia052ZFc1MElEMGdUV0YwYUM1dFlYZ29YRzRnSUNBZ1RXRjBhQzVtYkc5dmNpZ29kMmxrZEdnZ0t5Qm5kWFIwWlhJcElDOGdZMjlzZFcxdVYybGtkR2hCYm1SSGRYUjBaWElwTEZ4dUlDQWdJRzFwYmtOdmJITmNiaUFnS1R0Y2JseHVJQ0JqYjI1emRDQndiM05wZEdsdmJuTWdQU0JiWFR0Y2JpQWdZMjl1YzNRZ2FHVnBaMmgwY3lBOUlGdGRPMXh1WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dhWFJsYlhNdWJHVnVaM1JvT3lCcElDczlJREVwSUh0Y2JpQWdJQ0JzWlhRZ2NHOXphWFJwYjI0N1hHNGdJQ0FnWTI5dWMzUWdhR1ZwWjJoMElEMGdZMkZqYUdVdVoyVjBLR2wwWlcxelcybGRLVHRjYmx4dUlDQWdJR2xtSUNob1pXbG5hSFFnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnY0c5emFYUnBiMjRnUFNCdlptWnpZM0psWlc0b1kyOXNkVzF1VjJsa2RHZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCamIyNXpkQ0JqYjJ4MWJXNGdQU0JwSUNVZ1kyOXNkVzF1UTI5MWJuUTdYRzRnSUNBZ0lDQmpiMjV6ZENCeWIzY2dQU0JOWVhSb0xtWnNiMjl5S0drZ0x5QmpiMngxYlc1RGIzVnVkQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaGpiMngxYlc0Z1BUMDlJREFnZkh3Z2FHVnBaMmgwSUQ0Z2FHVnBaMmgwYzF0eWIzZGRLU0I3WEc0Z0lDQWdJQ0FnSUdobGFXZG9kSE5iY205M1hTQTlJR2hsYVdkb2REdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ2RHOXdJRDFjYmlBZ0lDQWdJQ0FnY205M0lENGdNRnh1SUNBZ0lDQWdJQ0FnSUQ4Z2FHVnBaMmgwY3k1emJHbGpaU2d3TENCeWIzY3BMbkpsWkhWalpTZ29jM1Z0TENCNUtTQTlQaUJ6ZFcwZ0t5QjVJQ3NnWjNWMGRHVnlMQ0F3S1Z4dUlDQWdJQ0FnSUNBZ0lEb2dNRHRjYmx4dUlDQWdJQ0FnY0c5emFYUnBiMjRnUFNCN1hHNGdJQ0FnSUNBZ0lIUnZjQ3hjYmlBZ0lDQWdJQ0FnYkdWbWREb2dZMjlzZFcxdUlDb2dZMjlzZFcxdVYybGtkR2hCYm1SSGRYUjBaWElzWEc0Z0lDQWdJQ0FnSUhkcFpIUm9PaUJqYjJ4MWJXNVhhV1IwYUN4Y2JpQWdJQ0FnSUNBZ2FHVnBaMmgwTEZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjRzl6YVhScGIyNXpMbkIxYzJnb2NHOXphWFJwYjI0cE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCd2IzTnBkR2x2Ym5NN1hHNTlPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnZEhsd1pTQjdJRU5oWTJobElIMGdabkp2YlNBbkxpOURZV05vWlM1cWN5YzdYRzVjYm5SNWNHVWdVRzl6YVhScGIyNGdQU0I3SUhSdmNEb2diblZ0WW1WeUxDQnNaV1owT2lCdWRXMWlaWElzSUhkcFpIUm9PaUJ1ZFcxaVpYSXNJR2hsYVdkb2REb2diblZ0WW1WeUlIMDdYRzVjYm1OdmJuTjBJRzFwYm1SbGVDQTlJR0Z5Y2lBOVBpQjdYRzRnSUd4bGRDQnBaSGdnUFNBd08xeHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdGeWNpNXNaVzVuZEdnN0lHa2dLejBnTVNrZ2UxeHVJQ0FnSUdsbUlDaGhjbkpiYVYwZ1BDQmhjbkpiYVdSNFhTa2dlMXh1SUNBZ0lDQWdhV1I0SUQwZ2FUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdsa2VEdGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUR4VVBpaDdYRzRnSUdkMWRIUmxjaUE5SURBc1hHNGdJR05oWTJobExGeHVJQ0J0YVc1RGIyeHpJRDBnTWl4Y2JpQWdhV1JsWVd4RGIyeDFiVzVYYVdSMGFDQTlJREkwTUN4Y2JpQWdkMmxrZEdnc1hHNTlPaUI3ZkZ4dUlDQm5kWFIwWlhJL09pQnVkVzFpWlhJc1hHNGdJR05oWTJobE9pQkRZV05vWlR4VUxDQnVkVzFpWlhJK0xGeHVJQ0J0YVc1RGIyeHpQem9nYm5WdFltVnlMRnh1SUNCcFpHVmhiRU52YkhWdGJsZHBaSFJvUHpvZ2JuVnRZbVZ5TEZ4dUlDQjNhV1IwYUQ4NklEOXVkVzFpWlhJc1hHNThmU2tnUFQ0Z2UxeHVJQ0JwWmlBb2QybGtkR2dnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9hWFJsYlhNNklFRnljbUY1UEcxcGVHVmtQaWs2SUVGeWNtRjVQRkJ2YzJsMGFXOXVQaUE5UGx4dUlDQWdJQ0FnYVhSbGJYTXViV0Z3S0NncElEMCtJQ2g3WEc0Z0lDQWdJQ0FnSUhSdmNEb2dTVzVtYVc1cGRIa3NYRzRnSUNBZ0lDQWdJR3hsWm5RNklFbHVabWx1YVhSNUxGeHVJQ0FnSUNBZ0lDQjNhV1IwYURvZ1NXNW1hVzVwZEhrc1hHNGdJQ0FnSUNBZ0lHaGxhV2RvZERvZ1NXNW1hVzVwZEhrc1hHNGdJQ0FnSUNCOUtTazdYRzRnSUgxY2JseHVJQ0F2THlCY0lsUm9hWE1nYVhNZ2EybHVaQ0J2WmlCamNtRjZlU0ZjSWlBdElIbHZkVnh1SUNBdkx5QlpaWE1zSUdsdVpHVmxaQzRnVkdobElGd2laM1ZsYzNOcGJtZGNJaUJvWlhKbElHbHpJRzFsWVc1MElIUnZJSEpsY0d4cFkyRjBaU0IwYUdVZ2NHRnpjeUIwYUdGMElIUm9aVnh1SUNBdkx5QnZjbWxuYVc1aGJDQnBiWEJzWlcxbGJuUmhkR2x2YmlCMFlXdGxjeUIzYVhSb0lFTlRVeTVjYmlBZ1kyOXVjM1FnWTI5c1ozVmxjM01nUFNCTllYUm9MbVpzYjI5eUtIZHBaSFJvSUM4Z2FXUmxZV3hEYjJ4MWJXNVhhV1IwYUNrN1hHNGdJR052Ym5OMElHTnZiSFZ0YmtOdmRXNTBJRDBnVFdGMGFDNXRZWGdvWEc0Z0lDQWdUV0YwYUM1bWJHOXZjaWdvZDJsa2RHZ2dMU0JqYjJ4bmRXVnpjeUFxSUdkMWRIUmxjaWtnTHlCcFpHVmhiRU52YkhWdGJsZHBaSFJvS1N4Y2JpQWdJQ0J0YVc1RGIyeHpYRzRnSUNrN1hHNGdJR052Ym5OMElHTnZiSFZ0YmxkcFpIUm9JRDBnVFdGMGFDNW1iRzl2Y2loM2FXUjBhQ0F2SUdOdmJIVnRia052ZFc1MEtUdGNibHh1SUNCeVpYUjFjbTRnS0dsMFpXMXpPaUJCY25KaGVUeFVQaWtnUFQ0Z2UxeHVJQ0FnSUM4dklIUm9aU0IwYjNSaGJDQm9aV2xuYUhRZ2IyWWdaV0ZqYUNCamIyeDFiVzVjYmlBZ0lDQmpiMjV6ZENCb1pXbG5hSFJ6SUQwZ2JtVjNJRUZ5Y21GNUtHTnZiSFZ0YmtOdmRXNTBLUzVtYVd4c0tEQXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHbDBaVzF6TG5KbFpIVmpaU2dvWVdOakxDQnBkR1Z0S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCd2IzTnBkR2x2Ym5NZ1BTQmhZMk03WEc0Z0lDQWdJQ0JqYjI1emRDQm9aV2xuYUhRZ1BTQmpZV05vWlM1blpYUW9hWFJsYlNrN1hHNGdJQ0FnSUNCc1pYUWdjRzl6YVhScGIyNDdYRzVjYmlBZ0lDQWdJR2xtSUNob1pXbG5hSFFnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCd2IzTnBkR2x2YmlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0IwYjNBNklFbHVabWx1YVhSNUxGeHVJQ0FnSUNBZ0lDQWdJR3hsWm5RNklFbHVabWx1YVhSNUxGeHVJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQmpiMngxYlc1WGFXUjBhQ3hjYmlBZ0lDQWdJQ0FnSUNCb1pXbG5hSFE2SUVsdVptbHVhWFI1TEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5c0lEMGdiV2x1WkdWNEtHaGxhV2RvZEhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIzQWdQU0JvWldsbmFIUnpXMk52YkYwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4bFpuUWdQU0JqYjJ3Z0tpQmpiMngxYlc1WGFXUjBhQ0FySUdkMWRIUmxjaUF2SURJN1hHNWNiaUFnSUNBZ0lDQWdhR1ZwWjJoMGMxdGpiMnhkSUNzOUlHaGxhV2RvZER0Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0Z1BTQjdYRzRnSUNBZ0lDQWdJQ0FnZEc5d0xGeHVJQ0FnSUNBZ0lDQWdJR3hsWm5Rc1hHNGdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklHTnZiSFZ0YmxkcFpIUm9JQzBnWjNWMGRHVnlMRnh1SUNBZ0lDQWdJQ0FnSUdobGFXZG9kQ3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NHOXphWFJwYjI1ekxuQjFjMmdvY0c5emFYUnBiMjRwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ2YzJsMGFXOXVjenRjYmlBZ0lDQjlMQ0JiWFNrN1hHNGdJSDA3WEc1OU8xeHVJaXdpTHk4Z1FHWnNiM2NnYzNSeWFXTjBYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTllYTnZibko1VEdGNWIzVjBJSHQ5WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRlZ1YVdadmNtMVNiM2RNWVhsdmRYUWdlMzFjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JrWldKdmRXNWpaU0JtY205dElDY3VMMlJsWW05MWJtTmxMbXB6Snp0Y2JtbHRjRzl5ZENCR1pYUmphRWwwWlcxeklHWnliMjBnSnk0dlJtVjBZMmhKZEdWdGN5NXFjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZUV0Z6YjI1eWVTNWpjM01uTzF4dWFXMXdiM0owSUZOamNtOXNiRU52Ym5SaGFXNWxjaUJtY205dElDY3VMMU5qY205c2JFTnZiblJoYVc1bGNpNXFjeWM3WEc1cGJYQnZjblFnZEdoeWIzUjBiR1VnWm5KdmJTQW5MaTkwYUhKdmRIUnNaUzVxY3ljN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVOaFkyaGxJSDBnWm5KdmJTQW5MaTlEWVdOb1pTNXFjeWM3WEc1cGJYQnZjblFnVFdWaGMzVnlaVzFsYm5SVGRHOXlaU0JtY205dElDY3VMMDFsWVhOMWNtVnRaVzUwVTNSdmNtVXVhbk1uTzF4dWFXMXdiM0owSUh0Y2JpQWdaMlYwUld4bGJXVnVkRWhsYVdkb2RDeGNiaUFnWjJWMFVtVnNZWFJwZG1WVFkzSnZiR3hVYjNBc1hHNGdJR2RsZEZOamNtOXNiRkJ2Y3l4Y2JuMGdabkp2YlNBbkxpOXpZM0p2Ykd4VmRHbHNjeTVxY3ljN1hHNXBiWEJ2Y25RZ2UxeHVJQ0JFWldaaGRXeDBUR0Y1YjNWMFUzbHRZbTlzTEZ4dUlDQlZibWxtYjNKdFVtOTNUR0Y1YjNWMFUzbHRZbTlzTEZ4dWZTQm1jbTl0SUNjdUwyeGxaMkZqZVV4aGVXOTFkRk41YldKdmJITXVhbk1uTzF4dWFXMXdiM0owSUdSbFptRjFiSFJNWVhsdmRYUWdabkp2YlNBbkxpOWtaV1poZFd4MFRHRjViM1YwTG1wekp6dGNibWx0Y0c5eWRDQjFibWxtYjNKdFVtOTNUR0Y1YjNWMElHWnliMjBnSnk0dmRXNXBabTl5YlZKdmQweGhlVzkxZEM1cWN5YzdYRzVwYlhCdmNuUWdablZzYkZkcFpIUm9UR0Y1YjNWMElHWnliMjBnSnk0dlpuVnNiRmRwWkhSb1RHRjViM1YwTG1wekp6dGNibWx0Y0c5eWRDQk1aV2RoWTNsTllYTnZibko1VEdGNWIzVjBJR1p5YjIwZ0p5NHZiR0Y1YjNWMGN5OU5ZWE52Ym5KNVRHRjViM1YwTG1wekp6dGNibWx0Y0c5eWRDQk1aV2RoWTNsVmJtbG1iM0p0VW05M1RHRjViM1YwSUdaeWIyMGdKeTR2YkdGNWIzVjBjeTlWYm1sbWIzSnRVbTkzVEdGNWIzVjBMbXB6Snp0Y2JseHVkSGx3WlNCTVlYbHZkWFFnUFZ4dUlDQjhJSFI1Y0dWdlppQkVaV1poZFd4MFRHRjViM1YwVTNsdFltOXNYRzRnSUh3Z2RIbHdaVzltSUZWdWFXWnZjbTFTYjNkTVlYbHZkWFJUZVcxaWIyeGNiaUFnZkNCTVpXZGhZM2xOWVhOdmJuSjVUR0Y1YjNWMFhHNGdJSHdnVEdWbllXTjVWVzVwWm05eWJWSnZkMHhoZVc5MWRGeHVJQ0I4SUNkaVlYTnBZeWRjYmlBZ2ZDQW5abXhsZUdsaWJHVW5YRzRnSUh3Z0ozVnVhV1p2Y20xU2IzY25PMXh1WEc1MGVYQmxJRkJ5YjNCelBGUStJRDBnZTN4Y2JpQWdZMjlzZFcxdVYybGtkR2cvT2lCdWRXMWlaWElzWEc0Z0lHTnZiWEE2SUZKbFlXTjBMa052YlhCdmJtVnVkRlI1Y0dVOGUxeHVJQ0FnSUdSaGRHRTZJRlFzWEc0Z0lDQWdhWFJsYlVsa2VEb2diblZ0WW1WeUxGeHVJQ0FnSUdselRXVmhjM1Z5YVc1bk9pQmliMjlzWldGdUxGeHVJQ0I5UGl4Y2JpQWdabXhsZUdsaWJHVS9PaUJpYjI5c1pXRnVMRnh1SUNCbmRYUjBaWEpYYVdSMGFEODZJRzUxYldKbGNpeGNiaUFnYVhSbGJYTTZJRUZ5Y21GNVBGUStMRnh1SUNCdFpXRnpkWEpsYldWdWRGTjBiM0psUHpvZ1EyRmphR1U4VkN3Z0tqNHNYRzRnSUcxcGJrTnZiSE02SUc1MWJXSmxjaXhjYmlBZ2JHRjViM1YwUHpvZ1RHRjViM1YwTEZ4dUlDQXZMeUJUZFhCd2IzSjBJR3hsWjJGamVTQnNiMkZrU1hSbGJYTWdkWE5oWjJVdVhHNGdJQzh2SUZSUFJFODZJRk5wYlhCc2FXWjVJRzV2YmlCbVlXeHpaWGtnWm14dmQzUjVjR1V1WEc0Z0lHeHZZV1JKZEdWdGN6ODZYRzRnSUNBZ2ZDQm1ZV3h6WlZ4dUlDQWdJSHdnS0NoY2JpQWdJQ0FnSUNBZ1AzdGNiaUFnSUNBZ0lDQWdJQ0JtY205dE9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDa2dQVDRnZG05cFpDQjhJR0p2YjJ4bFlXNGdmQ0I3ZlNrc1hHNGdJSE5qY205c2JFTnZiblJoYVc1bGNqODZJQ2dwSUQwK0lFaFVUVXhGYkdWdFpXNTBMRnh1SUNCMmFYSjBkV0ZzUW05MWJtUnpWRzl3UHpvZ2JuVnRZbVZ5TEZ4dUlDQjJhWEowZFdGc1FtOTFibVJ6UW05MGRHOXRQem9nYm5WdFltVnlMRnh1SUNCMmFYSjBkV0ZzYVhwbFB6b2dZbTl2YkdWaGJpeGNibng5TzF4dVhHNTBlWEJsSUZOMFlYUmxQRlErSUQwZ2UzeGNiaUFnYldWaGMzVnlaVzFsYm5SVGRHOXlaVG9nUTJGamFHVThWQ3dnS2o0c1hHNGdJR2hoYzFCbGJtUnBibWROWldGemRYSmxiV1Z1ZEhNNklHSnZiMnhsWVc0c1hHNGdJR2x6Um1WMFkyaHBibWM2SUdKdmIyeGxZVzRzWEc0Z0lHbDBaVzF6T2lCQmNuSmhlVHhVUGl4Y2JpQWdjMk55YjJ4c1ZHOXdPaUJ1ZFcxaVpYSXNYRzRnSUhkcFpIUm9PaUEvYm5WdFltVnlMRnh1ZkgwN1hHNWNibU52Ym5OMElGSkZVMGxhUlY5RVJVSlBWVTVEUlNBOUlETXdNRHRjYmk4dklFMTFiSFJwY0d4cFpXUWdZV2RoYVc1emRDQmpiMjUwWVdsdVpYSWdhR1ZwWjJoMExseHVMeThnVkdobElHRnRiM1Z1ZENCdlppQmxlSFJ5WVNCaWRXWm1aWElnYzNCaFkyVWdabTl5SUhCdmNIVnNZWFJwYm1jZ2RtbHphV0pzWlNCcGRHVnRjeTVjYm1OdmJuTjBJRlpKVWxSVlFVeGZRbFZHUmtWU1gwWkJRMVJQVWlBOUlEQXVOenRjYmx4dVkyOXVjM1FnYkdGNWIzVjBUblZ0WW1WeVZHOURjM05FYVcxbGJuTnBiMjRnUFNCdUlEMCtJQ2h1SUNFOVBTQkpibVpwYm1sMGVTQS9JRzRnT2lCMWJtUmxabWx1WldRcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCTllYTnZibko1UEZRNklIdDlQaUJsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWREeGNiaUFnVUhKdmNITThWRDRzWEc0Z0lGTjBZWFJsUEZRK1hHNCtJSHRjYmlBZ2MzUmhkR2xqSUdOeVpXRjBaVTFsWVhOMWNtVnRaVzUwVTNSdmNtVThWREU2SUh0OUxDQlVNajRvS1RvZ1RXVmhjM1Z5WlcxbGJuUlRkRzl5WlR4VU1Td2dWREkrSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUUxbFlYTjFjbVZ0Wlc1MFUzUnZjbVVvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV3hoZVhNZ2NtVnphWHBsSUdoaGJtUnNhVzVuSUdsdUlHTmhjMlVnZEdobElITmpjbTlzYkNCamIyNTBZV2x1WlhJZ2FYTWdjM1JwYkd3Z1ltVnBibWNnY21WemFYcGxaQzVjYmlBZ0lDb3ZYRzRnSUdoaGJtUnNaVkpsYzJsNlpTQTlJR1JsWW05MWJtTmxLQ2dwSUQwK0lIdGNiaUFnSUNCcFppQW9kR2hwY3k1bmNtbGtWM0poY0hCbGNpa2dlMXh1SUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lIZHBaSFJvT2lCMGFHbHpMbWR5YVdSWGNtRndjR1Z5TG1Oc2FXVnVkRmRwWkhSb0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlN3Z1VrVlRTVnBGWDBSRlFrOVZUa05GS1R0Y2JseHVJQ0F2THlCVmMybHVaeUIwYUhKdmRIUnNaU0JvWlhKbElIUnZJSE5qYUdWa2RXeGxJSFJvWlNCb1lXNWtiR1Z5SUdGemVXNWpMQ0J2ZFhSemFXUmxJRzltSUhSb1pTQmxkbVZ1ZEZ4dUlDQXZMeUJzYjI5d0lIUm9ZWFFnY0hKdlpIVmpaV1FnZEdobElHVjJaVzUwTGx4dUlDQjFjR1JoZEdWVFkzSnZiR3hRYjNOcGRHbHZiaUE5SUhSb2NtOTBkR3hsS0NncElEMCtJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElITmpjbTlzYkVOdmJuUmhhVzVsY2lBOUlIUm9hWE11YzJOeWIyeHNRMjl1ZEdGcGJtVnlMbWRsZEZOamNtOXNiRU52Ym5SaGFXNWxjbEpsWmlncE8xeHVYRzRnSUNBZ2FXWWdLQ0Z6WTNKdmJHeERiMjUwWVdsdVpYSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJSE5qY205c2JGUnZjRG9nWjJWMFUyTnliMnhzVUc5ektITmpjbTlzYkVOdmJuUmhhVzVsY2lrc1hHNGdJQ0FnZlNrN1hHNGdJSDBwTzF4dVhHNGdJRzFsWVhOMWNtVkRiMjUwWVdsdVpYSkJjM2x1WXlBOUlHUmxZbTkxYm1ObEtDZ3BJRDArSUh0Y2JpQWdJQ0IwYUdsekxtMWxZWE4xY21WRGIyNTBZV2x1WlhJb0tUdGNiaUFnZlN3Z01DazdYRzVjYmlBZ1kyOXVkR0ZwYm1WeVNHVnBaMmgwT2lCdWRXMWlaWEk3WEc1Y2JpQWdZMjl1ZEdGcGJtVnlUMlptYzJWME9pQnVkVzFpWlhJN1hHNWNiaUFnWjNKcFpGZHlZWEJ3WlhJNklEOUlWRTFNUld4bGJXVnVkRHRjYmx4dUlDQnBibk5sY25SQmJtbHRZWFJwYjI1R2NtRnRaVG9nUVc1cGJXRjBhVzl1Um5KaGJXVkpSRHRjYmx4dUlDQnRaV0Z6ZFhKbFZHbHRaVzkxZERvZ1ZHbHRaVzkxZEVsRU8xeHVYRzRnSUhOamNtOXNiRU52Ym5SaGFXNWxjam9nUDFOamNtOXNiRU52Ym5SaGFXNWxjanRjYmx4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCd2NtVm1aWEp5WldRdmRHRnlaMlYwSUdsMFpXMGdkMmxrZEdndUlFbG1JR0JtYkdWNGFXSnNaV0FnYVhNZ2MyVjBMQ0IwYUdVZ2FYUmxiU0IzYVdSMGFDQjNhV3hzWEc0Z0lDQWdJQ29nWjNKdmR5QjBieUJtYVd4c0lHTnZiSFZ0YmlCemNHRmpaU3dnWVc1a0lITm9jbWx1YXlCMGJ5Qm1hWFFnYVdZZ1ltVnNiM2NnYldsdUlHTnZiSFZ0Ym5NdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5c2RXMXVWMmxrZEdnNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnWTI5dGNHOXVaVzUwSUhSdklISmxibVJsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2S2lCbGMyeHBiblFnY21WaFkzUXZibTh0ZFc1MWMyVmtMWEJ5YjNBdGRIbHdaWE02SURBZ0tpOWNiaUFnSUNCamIyMXdPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElIQnlaV1psY25KbFpDOTBZWEpuWlhRZ2FYUmxiU0IzYVdSMGFDNGdTWFJsYlNCM2FXUjBhQ0IzYVd4c0lHZHliM2NnZEc4Z1ptbHNiRnh1SUNBZ0lDQXFJR052YkhWdGJpQnpjR0ZqWlN3Z1lXNWtJSE5vY21sdWF5QjBieUJtYVhRZ2FXWWdZbVZzYjNjZ2JXbHVJR052YkhWdGJuTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pteGxlR2xpYkdVNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJR0Z0YjNWdWRDQnZaaUJ6Y0dGalpTQmlaWFIzWldWdUlHVmhZMmdnYVhSbGJTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCbmRYUjBaWEpYYVdSMGFEb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZ1SUdGeWNtRjVJRzltSUdGc2JDQnZZbXBsWTNSeklIUnZJR1JwYzNCc1lYa2dhVzRnZEdobElHZHlhV1F1WEc0Z0lDQWdJQ292WEc0Z0lDQWdhWFJsYlhNNklGQnliM0JVZVhCbGN5NWhjbkpoZVU5bUtGQnliM0JVZVhCbGN5NXphR0Z3WlNoN2ZTa3BMbWx6VW1WeGRXbHlaV1FzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTlpXRnpkWEpsYldWdWRDQlRkRzl5WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzFsWVhOMWNtVnRaVzUwVTNSdmNtVTZJRkJ5YjNCVWVYQmxjeTVwYm5OMFlXNWpaVTltS0UxbFlYTjFjbVZ0Wlc1MFUzUnZjbVVwTEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1RHRjViM1YwSUhONWMzUmxiU0IwYnlCMWMyVWdabTl5SUdsMFpXMXpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHRjViM1YwT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNBZ0lGQnliM0JVZVhCbGN5NXBibk4wWVc1alpVOW1LRXhsWjJGamVVMWhjMjl1Y25sTVlYbHZkWFFwTEZ4dUlDQWdJQ0FnVUhKdmNGUjVjR1Z6TG1sdWMzUmhibU5sVDJZb1RHVm5ZV041Vlc1cFptOXliVkp2ZDB4aGVXOTFkQ2tzWEc0Z0lDQWdJQ0JRY205d1ZIbHdaWE11YzNsdFltOXNMRnh1SUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCZEtTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUVnWTJGc2JHSmhZMnNnZDJocFkyZ2dkR2hsSUdkeWFXUWdZMkZzYkhNZ2QyaGxiaUIzWlNCdVpXVmtJSFJ2SUd4dllXUWdiVzl5WlNCcGRHVnRjeUJoY3lCMGFHVWdkWE5sY2lCelkzSnZiR3h6TGx4dUlDQWdJQ0FxSUZSb1pTQmpZV3hzWW1GamF5QnphRzkxYkdRZ2RYQmtZWFJsSUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnYVhSbGJYTXNJR0Z1WkNCd1lYTnpJSFJvYjNObElHbHVJR0Z6SUhCeWIzQnpYRzRnSUNBZ0lDb2dkRzhnZEdocGN5QmpiMjF3YjI1bGJuUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JHOWhaRWwwWlcxek9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMXBibWx0ZFcwZ2JuVnRZbVZ5SUc5bUlHTnZiSFZ0Ym5NZ2RHOGdaR2x6Y0d4aGVTNWNiaUFnSUNBZ0tpOWNiaUFnSUNCdGFXNURiMnh6T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JuVnVZM1JwYjI0Z2RHaGhkQ0IwYUdVZ1ozSnBaQ0JqWVd4c2N5QjBieUJuWlhRZ2RHaGxJSE5qY205c2JDQmpiMjUwWVdsdVpYSXVYRzRnSUNBZ0lDb2dWR2hwY3lCcGN5QnlaWEYxYVhKbFpDQnBaaUIwYUdVZ1ozSnBaQ0JwY3lCbGVIQmxZM1JsWkNCMGJ5QmlaU0J6WTNKdmJHeGhZbXhsTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSE5qY205c2JFTnZiblJoYVc1bGNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlhhR1YwYUdWeUlHOXlJRzV2ZENCMGJ5QjFjMlVnWVdOMGRXRnNJSFpwY25SMVlXeHBlbUYwYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZG1seWRIVmhiR2w2WlRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR2xqSUdSbFptRjFiSFJRY205d2N5QTlJSHRjYmlBZ0lDQmpiMngxYlc1WGFXUjBhRG9nTWpNMkxGeHVJQ0FnSUcxcGJrTnZiSE02SURNc1hHNGdJQ0FnYkdGNWIzVjBPaUFuWW1GemFXTW5MRnh1SUNBZ0lHeHZZV1JKZEdWdGN6b2dLQ2tnUFQ0Z2UzMHNYRzRnSUNBZ2RtbHlkSFZoYkdsNlpUb2dabUZzYzJVc1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0hKdmNITTZJRkJ5YjNCelBGUStLU0I3WEc0Z0lDQWdjM1Z3WlhJb2NISnZjSE1wTzF4dVhHNGdJQ0FnZEdocGN5NWpiMjUwWVdsdVpYSklaV2xuYUhRZ1BTQXdPMXh1SUNBZ0lIUm9hWE11WTI5dWRHRnBibVZ5VDJabWMyVjBJRDBnTUR0Y2JseHVJQ0FnSUdOdmJuTjBJRzFsWVhOMWNtVnRaVzUwVTNSdmNtVTZJRU5oWTJobFBGUXNJQ28rSUQxY2JpQWdJQ0FnSUhCeWIzQnpMbTFsWVhOMWNtVnRaVzUwVTNSdmNtVWdmSHdnVFdGemIyNXllUzVqY21WaGRHVk5aV0Z6ZFhKbGJXVnVkRk4wYjNKbEtDazdYRzVjYmlBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdjbVZoWTNRdmMzUmhkR1V0YVc0dFkyOXVjM1J5ZFdOMGIzSmNiaUFnSUNCMGFHbHpMbk4wWVhSbElEMGdlMXh1SUNBZ0lDQWdhR0Z6VUdWdVpHbHVaMDFsWVhOMWNtVnRaVzUwY3pvZ2NISnZjSE11YVhSbGJYTXVjMjl0WlNoY2JpQWdJQ0FnSUNBZ2FYUmxiU0E5UGlBaElXbDBaVzBnSmlZZ0lXMWxZWE4xY21WdFpXNTBVM1J2Y21VdWFHRnpLR2wwWlcwcFhHNGdJQ0FnSUNBcExGeHVJQ0FnSUNBZ2FYTkdaWFJqYUdsdVp6b2dabUZzYzJVc1hHNGdJQ0FnSUNCcGRHVnRjem9nY0hKdmNITXVhWFJsYlhNc1hHNGdJQ0FnSUNCdFpXRnpkWEpsYldWdWRGTjBiM0psTEZ4dUlDQWdJQ0FnYzJOeWIyeHNWRzl3T2lBd0xGeHVJQ0FnSUNBZ2QybGtkR2c2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nYUc5dmEzTWdZV1owWlhJZ2RHaGxJR052YlhCdmJtVnVkQ0J0YjNWdWRITXVYRzRnSUNBcUwxeHVJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0IzYVc1a2IzY3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25jbVZ6YVhwbEp5d2dkR2hwY3k1b1lXNWtiR1ZTWlhOcGVtVXBPMXh1WEc0Z0lDQWdkR2hwY3k1dFpXRnpkWEpsUTI5dWRHRnBibVZ5S0NrN1hHNWNiaUFnSUNCc1pYUWdleUJ6WTNKdmJHeFViM0FnZlNBOUlIUm9hWE11YzNSaGRHVTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWMyTnliMnhzUTI5dWRHRnBibVZ5SUNFOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSE5qY205c2JFTnZiblJoYVc1bGNpQTlJSFJvYVhNdWMyTnliMnhzUTI5dWRHRnBibVZ5TG1kbGRGTmpjbTlzYkVOdmJuUmhhVzVsY2xKbFppZ3BPMXh1SUNBZ0lDQWdhV1lnS0hOamNtOXNiRU52Ym5SaGFXNWxjaWtnZTF4dUlDQWdJQ0FnSUNCelkzSnZiR3hVYjNBZ1BTQm5aWFJUWTNKdmJHeFFiM01vYzJOeWIyeHNRMjl1ZEdGcGJtVnlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hCeVpYWlRkR0YwWlNBOVBpQW9lMXh1SUNBZ0lDQWdjMk55YjJ4c1ZHOXdMRnh1SUNBZ0lDQWdkMmxrZEdnNklIUm9hWE11WjNKcFpGZHlZWEJ3WlhJZ1B5QjBhR2x6TG1keWFXUlhjbUZ3Y0dWeUxtTnNhV1Z1ZEZkcFpIUm9JRG9nY0hKbGRsTjBZWFJsTG5kcFpIUm9MRnh1SUNBZ0lIMHBLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNod2NtVjJVSEp2Y0hNNklGQnliM0J6UEZRK0xDQndjbVYyVTNSaGRHVTZJRk4wWVhSbFBGUStLU0I3WEc0Z0lDQWdZMjl1YzNRZ2V5QnBkR1Z0Y3lCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCN0lHMWxZWE4xY21WdFpXNTBVM1J2Y21VZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc1Y2JpQWdJQ0IwYUdsekxtMWxZWE4xY21WRGIyNTBZV2x1WlhKQmMzbHVZeWdwTzF4dVhHNGdJQ0FnYVdZZ0tIQnlaWFpUZEdGMFpTNTNhV1IwYUNBaFBTQnVkV3hzSUNZbUlIUm9hWE11YzNSaGRHVXVkMmxrZEdnZ0lUMDlJSEJ5WlhaVGRHRjBaUzUzYVdSMGFDa2dlMXh1SUNBZ0lDQWdiV1ZoYzNWeVpXMWxiblJUZEc5eVpTNXlaWE5sZENncE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCallXeGpkV3hoZEdVZ2QyaGxkR2hsY2lCM1pTQnpkR2xzYkNCb1lYWmxJSEJsYm1ScGJtY2diV1ZoYzNWeVpXMWxiblJ6WEc0Z0lDQWdZMjl1YzNRZ2FHRnpVR1Z1WkdsdVowMWxZWE4xY21WdFpXNTBjeUE5SUdsMFpXMXpMbk52YldVb1hHNGdJQ0FnSUNCcGRHVnRJRDArSUNFaGFYUmxiU0FtSmlBaGJXVmhjM1Z5WlcxbGJuUlRkRzl5WlM1b1lYTW9hWFJsYlNsY2JpQWdJQ0FwTzF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUdoaGMxQmxibVJwYm1kTlpXRnpkWEpsYldWdWRITWdmSHhjYmlBZ0lDQWdJR2hoYzFCbGJtUnBibWROWldGemRYSmxiV1Z1ZEhNZ0lUMDlJSFJvYVhNdWMzUmhkR1V1YUdGelVHVnVaR2x1WjAxbFlYTjFjbVZ0Wlc1MGN5QjhmRnh1SUNBZ0lDQWdjSEpsZGxOMFlYUmxMbmRwWkhSb0lEMDlJRzUxYkd4Y2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhVzV6WlhKMFFXNXBiV0YwYVc5dVJuSmhiV1VnUFNCeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0h0Y2JpQWdJQ0FnSUNBZ0lDQm9ZWE5RWlc1a2FXNW5UV1ZoYzNWeVpXMWxiblJ6TEZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlcxdmRtVWdiR2x6ZEdWdVpYSnpJSGRvWlc0Z2RXNXRiM1Z1ZEdsdVp5NWNiaUFnSUNvdlhHNGdJR052YlhCdmJtVnVkRmRwYkd4VmJtMXZkVzUwS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1sdWMyVnlkRUZ1YVcxaGRHbHZia1p5WVcxbEtTQjdYRzRnSUNBZ0lDQmpZVzVqWld4QmJtbHRZWFJwYjI1R2NtRnRaU2gwYUdsekxtbHVjMlZ5ZEVGdWFXMWhkR2x2YmtaeVlXMWxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJOWVd0bElITjFjbVVnWVhONWJtTWdiV1YwYUc5a2N5QmhjbVVnWTJGdVkyVnNiR1ZrTGx4dUlDQWdJSFJvYVhNdWJXVmhjM1Z5WlVOdmJuUmhhVzVsY2tGemVXNWpMbU5zWldGeVZHbHRaVzkxZENncE8xeHVJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFVtVnphWHBsTG1Oc1pXRnlWR2x0Wlc5MWRDZ3BPMXh1SUNBZ0lIUm9hWE11ZFhCa1lYUmxVMk55YjJ4c1VHOXphWFJwYjI0dVkyeGxZWEpVYVcxbGIzVjBLQ2s3WEc1Y2JpQWdJQ0IzYVc1a2IzY3VjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduY21WemFYcGxKeXdnZEdocGN5NW9ZVzVrYkdWU1pYTnBlbVVwTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR2xqSUdkbGRFUmxjbWwyWldSVGRHRjBaVVp5YjIxUWNtOXdjeWh3Y205d2N6b2dVSEp2Y0hNOFZENHNJSE4wWVhSbE9pQlRkR0YwWlR4VVBpa2dlMXh1SUNBZ0lHTnZibk4wSUhzZ2FYUmxiWE1nZlNBOUlIQnliM0J6TzF4dUlDQWdJR052Ym5OMElIc2diV1ZoYzNWeVpXMWxiblJUZEc5eVpTQjlJRDBnYzNSaGRHVTdYRzVjYmlBZ0lDQXZMeUIzYUdWdVpYWmxjaUIzWlNkeVpTQnlaV05sYVhacGJtY2dibVYzSUhCeWIzQnpMQ0JrWlhSbGNtMXBibVVnZDJobGRHaGxjaUJoYm5rZ2FYUmxiWE1nYm1WbFpDQjBieUJpWlNCdFpXRnpkWEpsWkZ4dUlDQWdJQzh2SUZSUFJFOGdMU0IzWlNCemFHOTFiR1FnZEhKbFlYUWdhWFJsYlhNZ1lYTWdhVzF0ZFhSaFlteGxYRzRnSUNBZ1kyOXVjM1FnYUdGelVHVnVaR2x1WjAxbFlYTjFjbVZ0Wlc1MGN5QTlJR2wwWlcxekxuTnZiV1VvWEc0Z0lDQWdJQ0JwZEdWdElEMCtJQ0Z0WldGemRYSmxiV1Z1ZEZOMGIzSmxMbWhoY3locGRHVnRLVnh1SUNBZ0lDazdYRzVjYmlBZ0lDQXZMeUJUYUdGc2JHOTNJR052YlhCaGNtVWdZV3hzSUdsMFpXMXpMQ0JwWmlCaGJua2dZMmhoYm1kbElISmxabXh2ZHlCMGFHVWdaM0pwWkM1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsMFpXMXpMbXhsYm1kMGFEc2dhU0FyUFNBeEtTQjdYRzRnSUNBZ0lDQXZMeUJYWlNkMlpTQnlaV0ZqYUdWa0lIUm9aU0JsYm1RZ2IyWWdiM1Z5SUdOMWNuSmxiblFnY0hKdmNITWdZVzVrSUdWMlpYSjVkR2hwYm1jZ2JXRjBZMmhsY3k1Y2JpQWdJQ0FnSUM4dklFbG1JSGRsSUdocGRDQjBhR2x6SUdOaGMyVWdhWFFnYldWaGJuTWdkMlVnYm1WbFpDQjBieUJwYm5ObGNuUWdibVYzSUdsMFpXMXpMbHh1SUNBZ0lDQWdhV1lnS0hOMFlYUmxMbWwwWlcxelcybGRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0JvWVhOUVpXNWthVzVuVFdWaGMzVnlaVzFsYm5SekxGeHVJQ0FnSUNBZ0lDQWdJR2wwWlcxekxGeHVJQ0FnSUNBZ0lDQWdJR2x6Um1WMFkyaHBibWM2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QlNaWE5sZENCbmNtbGtJR2wwWlcxeklIZG9aVzQ2WEc0Z0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDOHZJRUZ1SUdsMFpXMGdiMkpxWldOMElISmxaaUJrYjJWeklHNXZkQ0J0WVhSamFDNWNiaUFnSUNBZ0lDQWdhWFJsYlhOYmFWMGdJVDA5SUhOMFlYUmxMbWwwWlcxelcybGRJSHg4WEc0Z0lDQWdJQ0FnSUM4dklFOXlJR3hsYzNNZ2FYUmxiWE1nZEdoaGJpQjNaU0JqZFhKeVpXNTBiSGtnYUdGMlpTQmhjbVVnY0dGemMyVmtJR2x1TGx4dUlDQWdJQ0FnSUNCcGRHVnRjeTVzWlc1bmRHZ2dQQ0J6ZEdGMFpTNXBkR1Z0Y3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lHaGhjMUJsYm1ScGJtZE5aV0Z6ZFhKbGJXVnVkSE1zWEc0Z0lDQWdJQ0FnSUNBZ2FYUmxiWE1zWEc0Z0lDQWdJQ0FnSUNBZ2FYTkdaWFJqYUdsdVp6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVbVZ6WlhRZ2FYUmxiWE1nYVdZZ2JtVjNJR2wwWlcxeklHRnljbUY1SUdseklHVnRjSFI1TGx4dUlDQWdJR2xtSUNocGRHVnRjeTVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdjM1JoZEdVdWFYUmxiWE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2FHRnpVR1Z1WkdsdVowMWxZWE4xY21WdFpXNTBjeXhjYmlBZ0lDQWdJQ0FnYVhSbGJYTXNYRzRnSUNBZ0lDQWdJR2x6Um1WMFkyaHBibWM2SUdaaGJITmxMRnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2hoYzFCbGJtUnBibWROWldGemRYSmxiV1Z1ZEhNZ0lUMDlJSE4wWVhSbExtaGhjMUJsYm1ScGJtZE5aV0Z6ZFhKbGJXVnVkSE1wSUh0Y2JpQWdJQ0FnSUM4dklHMWhhMlVnYzNWeVpTQjNaU0JoYkhkaGVYTWdkWEJrWVhSbElHaGhjMUJsYm1ScGJtZE5aV0Z6ZFhKbGJXVnVkSE5jYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJR2hoYzFCbGJtUnBibWROWldGemRYSmxiV1Z1ZEhNc1hHNGdJQ0FnSUNBZ0lHbDBaVzF6TEZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCU1pYUjFjbTRnYm5Wc2JDQjBieUJwYm1ScFkyRjBaU0J1YnlCamFHRnVaMlVnZEc4Z2MzUmhkR1V1WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCelpYUkhjbWxrVjNKaGNIQmxjbEpsWmlBOUlDaHlaV1k2SUQ5SVZFMU1SV3hsYldWdWRDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdVozSnBaRmR5WVhCd1pYSWdQU0J5WldZN1hHNGdJSDA3WEc1Y2JpQWdjMlYwVTJOeWIyeHNRMjl1ZEdGcGJtVnlVbVZtSUQwZ0tISmxaam9nUDFOamNtOXNiRU52Ym5SaGFXNWxjaWtnUFQ0Z2UxeHVJQ0FnSUhSb2FYTXVjMk55YjJ4c1EyOXVkR0ZwYm1WeUlEMGdjbVZtTzF4dUlDQjlPMXh1WEc0Z0lHWmxkR05vVFc5eVpTQTlJQ2dwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUd4dllXUkpkR1Z0Y3l3Z2FYUmxiWE1nZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ2FXWWdLR3h2WVdSSmRHVnRjeUFtSmlCMGVYQmxiMllnYkc5aFpFbDBaVzF6SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnYVhOR1pYUmphR2x1WnpvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0tDa2dQVDRnYkc5aFpFbDBaVzF6S0hzZ1puSnZiVG9nYVhSbGJYTXViR1Z1WjNSb0lIMHBYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J0WldGemRYSmxRMjl1ZEdGcGJtVnlLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbk5qY205c2JFTnZiblJoYVc1bGNpQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN0lITmpjbTlzYkVOdmJuUmhhVzVsY2lCOUlEMGdkR2hwY3p0Y2JpQWdJQ0FnSUdOdmJuTjBJSE5qY205c2JFTnZiblJoYVc1bGNsSmxaaUE5SUhOamNtOXNiRU52Ym5SaGFXNWxjaTVuWlhSVFkzSnZiR3hEYjI1MFlXbHVaWEpTWldZb0tUdGNiaUFnSUNBZ0lHbG1JQ2h6WTNKdmJHeERiMjUwWVdsdVpYSlNaV1lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUWdQU0JuWlhSRmJHVnRaVzUwU0dWcFoyaDBLSE5qY205c2JFTnZiblJoYVc1bGNsSmxaaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1ZzSUQwZ2RHaHBjeTVuY21sa1YzSmhjSEJsY2p0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzSUdsdWMzUmhibU5sYjJZZ1NGUk5URVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J5Wld4aGRHbDJaVk5qY205c2JGUnZjQ0E5SUdkbGRGSmxiR0YwYVhabFUyTnliMnhzVkc5d0tITmpjbTlzYkVOdmJuUmhhVzVsY2xKbFppazdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWVdsdVpYSlBabVp6WlhRZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld3dVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZEc5d0lDc2djbVZzWVhScGRtVlRZM0p2Ykd4VWIzQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTJ4bFlYSWdiV1ZoYzNWeVpXMWxiblJ6TDNCdmMybDBhVzl1Y3lCaGJtUWdabTl5WTJVZ1lTQnlaV1pzYjNjZ2IyWWdkR2hsSUdWdWRHbHlaU0JuY21sa0xseHVJQ0FnS2lCUGJteDVJSFZ6WlNCMGFHbHpJR2xtSUdGaWMyOXNkWFJsYkhrZ2JtVmpaWE56WVhKNUlDMGdaWGc2SUZkbElHNWxaV1FnZEc4Z2NtVm1iRzkzSUdsMFpXMXpJR2xtSUhSb1pWeHVJQ0FnS2lCdWRXMWlaWElnYjJZZ1kyOXNkVzF1Y3lCM1pTQjNiM1ZzWkNCa2FYTndiR0Y1SUhOb2IzVnNaQ0JqYUdGdVoyVWdZV1owWlhJZ1lTQnlaWE5wZW1VdVhHNGdJQ0FxTDF4dUlDQnlaV1pzYjNjb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCdFpXRnpkWEpsYldWdWRGTjBiM0psSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdhV1lnS0cxbFlYTjFjbVZ0Wlc1MFUzUnZjbVVwSUh0Y2JpQWdJQ0FnSUcxbFlYTjFjbVZ0Wlc1MFUzUnZjbVV1Y21WelpYUW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6ZEdGMFpTNXRaV0Z6ZFhKbGJXVnVkRk4wYjNKbExuSmxjMlYwS0NrN1hHNWNiaUFnSUNCMGFHbHpMbTFsWVhOMWNtVkRiMjUwWVdsdVpYSW9LVHRjYmlBZ0lDQjBhR2x6TG1admNtTmxWWEJrWVhSbEtDazdYRzRnSUgxY2JseHVJQ0J5Wlc1a1pYSk5ZWE52Ym5KNVEyOXRjRzl1Wlc1MElEMGdLR2wwWlcxRVlYUmhPaUJVTENCcFpIZzZJRzUxYldKbGNpd2djRzl6YVhScGIyNDZJQ29wSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0JqYjIxd09pQkRiMjF3YjI1bGJuUXNYRzRnSUNBZ0lDQnpZM0p2Ykd4RGIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCMmFYSjBkV0ZzYVhwbExGeHVJQ0FnSUNBZ2RtbHlkSFZoYkVKdmRXNWtjMVJ2Y0N4Y2JpQWdJQ0FnSUhacGNuUjFZV3hDYjNWdVpITkNiM1IwYjIwc1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnZXlCMGIzQXNJR3hsWm5Rc0lIZHBaSFJvTENCb1pXbG5hSFFnZlNBOUlIQnZjMmwwYVc5dU8xeHVYRzRnSUNBZ2JHVjBJR2x6Vm1semFXSnNaVHRjYmlBZ0lDQnBaaUFvYzJOeWIyeHNRMjl1ZEdGcGJtVnlLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjJhWEowZFdGc1FuVm1abVZ5SUQwZ2RHaHBjeTVqYjI1MFlXbHVaWEpJWldsbmFIUWdLaUJXU1ZKVVZVRk1YMEpWUmtaRlVsOUdRVU5VVDFJN1hHNGdJQ0FnSUNCamIyNXpkQ0J2Wm1aelpYUlRZM0p2Ykd4UWIzTWdQU0IwYUdsekxuTjBZWFJsTG5OamNtOXNiRlJ2Y0NBdElIUm9hWE11WTI5dWRHRnBibVZ5VDJabWMyVjBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2RtbGxkM0J2Y25SVWIzQWdQU0IyYVhKMGRXRnNRbTkxYm1SelZHOXdYRzRnSUNBZ0lDQWdJRDhnYjJabWMyVjBVMk55YjJ4c1VHOXpJQzBnZG1seWRIVmhiRUp2ZFc1a2MxUnZjRnh1SUNBZ0lDQWdJQ0E2SUc5bVpuTmxkRk5qY205c2JGQnZjeUF0SUhacGNuUjFZV3hDZFdabVpYSTdYRzRnSUNBZ0lDQmpiMjV6ZENCMmFXVjNjRzl5ZEVKdmRIUnZiU0E5SUhacGNuUjFZV3hDYjNWdVpITkNiM1IwYjIxY2JpQWdJQ0FnSUNBZ1B5QnZabVp6WlhSVFkzSnZiR3hRYjNNZ0t5QjBhR2x6TG1OdmJuUmhhVzVsY2tobGFXZG9kQ0FySUhacGNuUjFZV3hDYjNWdVpITkNiM1IwYjIxY2JpQWdJQ0FnSUNBZ09pQnZabVp6WlhSVFkzSnZiR3hRYjNNZ0t5QjBhR2x6TG1OdmJuUmhhVzVsY2tobGFXZG9kQ0FySUhacGNuUjFZV3hDZFdabVpYSTdYRzVjYmlBZ0lDQWdJR2x6Vm1semFXSnNaU0E5SUNFb1hHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dUxuUnZjQ0FySUhCdmMybDBhVzl1TG1obGFXZG9kQ0E4SUhacFpYZHdiM0owVkc5d0lIeDhYRzRnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVMblJ2Y0NBK0lIWnBaWGR3YjNKMFFtOTBkRzl0WEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJwWmlCdWJ5QnpZM0p2Ykd3Z1kyOXVkR0ZwYm1WeUlHbHpJSEJoYzNObFpDQnBiaXdnYVhSbGJYTWdjMmh2ZFd4a0lHRnNkMkY1Y3lCaVpTQjJhWE5wWW14bFhHNGdJQ0FnSUNCcGMxWnBjMmxpYkdVZ1BTQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHbDBaVzFEYjIxd2IyNWxiblFnUFNBb1hHNGdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJR3RsZVQxN1lHbDBaVzB0Skh0cFpIaDlZSDFjYmlBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0YmMzUjViR1Z6TGsxaGMyOXVjbmxmWDBsMFpXMHNJSE4wZVd4bGN5NU5ZWE52Ym5KNVgxOUpkR1Z0WDE5TmIzVnVkR1ZrWFM1cWIybHVLRnh1SUNBZ0lDQWdJQ0FnSUNjZ0oxeHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdJQ0JrWVhSaExXZHlhV1F0YVhSbGJWeHVJQ0FnSUNBZ0lDQnpkSGxzWlQxN2UxeHVJQ0FnSUNBZ0lDQWdJSFJ2Y0RvZ01DeGNiaUFnSUNBZ0lDQWdJQ0JzWldaME9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ1lIUnlZVzV6YkdGMFpWZ29KSHRzWldaMGZYQjRLU0IwY21GdWMyeGhkR1ZaS0NSN2RHOXdmWEI0S1dBc1hHNGdJQ0FnSUNBZ0lDQWdWMlZpYTJsMFZISmhibk5tYjNKdE9pQmdkSEpoYm5Oc1lYUmxXQ2drZTJ4bFpuUjljSGdwSUhSeVlXNXpiR0YwWlZrb0pIdDBiM0I5Y0hncFlDeGNiaUFnSUNBZ0lDQWdJQ0IzYVdSMGFEb2diR0Y1YjNWMFRuVnRZbVZ5Vkc5RGMzTkVhVzFsYm5OcGIyNG9kMmxrZEdncExGeHVJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REb2diR0Y1YjNWMFRuVnRZbVZ5Vkc5RGMzTkVhVzFsYm5OcGIyNG9hR1ZwWjJoMEtTeGNiaUFnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnUEVOdmJYQnZibVZ1ZENCa1lYUmhQWHRwZEdWdFJHRjBZWDBnYVhSbGJVbGtlRDE3YVdSNGZTQnBjMDFsWVhOMWNtbHVaejE3Wm1Gc2MyVjlJQzgrWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhacGNuUjFZV3hwZW1VZ1B5QW9hWE5XYVhOcFlteGxJQ1ltSUdsMFpXMURiMjF3YjI1bGJuUXBJSHg4SUc1MWJHd2dPaUJwZEdWdFEyOXRjRzl1Wlc1ME8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCamIyeDFiVzVYYVdSMGFDeGNiaUFnSUNBZ0lHTnZiWEE2SUVOdmJYQnZibVZ1ZEN4Y2JpQWdJQ0FnSUdac1pYaHBZbXhsTEZ4dUlDQWdJQ0FnWjNWMGRHVnlWMmxrZEdnNklHZDFkSFJsY2l4Y2JpQWdJQ0FnSUdsMFpXMXpMRnh1SUNBZ0lDQWdiR0Y1YjNWMExGeHVJQ0FnSUNBZ2JXbHVRMjlzY3l4Y2JpQWdJQ0FnSUhOamNtOXNiRU52Ym5SaGFXNWxjaXhjYmlBZ0lDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJR2hoYzFCbGJtUnBibWROWldGemRYSmxiV1Z1ZEhNc0lHMWxZWE4xY21WdFpXNTBVM1J2Y21Vc0lIZHBaSFJvSUgwZ1BTQjBhR2x6TG5OMFlYUmxPMXh1WEc0Z0lDQWdiR1YwSUdkbGRGQnZjMmwwYVc5dWN6dGNiaUFnSUNCcFppQW9LR1pzWlhocFlteGxJSHg4SUd4aGVXOTFkQ0E5UFQwZ0oyWnNaWGhwWW14bEp5a2dKaVlnZDJsa2RHZ2dJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR2RsZEZCdmMybDBhVzl1Y3lBOUlHWjFiR3hYYVdSMGFFeGhlVzkxZENoN1hHNGdJQ0FnSUNBZ0lHZDFkSFJsY2l4Y2JpQWdJQ0FnSUNBZ1kyRmphR1U2SUcxbFlYTjFjbVZ0Wlc1MFUzUnZjbVVzWEc0Z0lDQWdJQ0FnSUcxcGJrTnZiSE1zWEc0Z0lDQWdJQ0FnSUdsa1pXRnNRMjlzZFcxdVYybGtkR2c2SUdOdmJIVnRibGRwWkhSb0xGeHVJQ0FnSUNBZ0lDQjNhV1IwYUN4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1hHNGdJQ0FnSUNCc1lYbHZkWFFnUFQwOUlGVnVhV1p2Y20xU2IzZE1ZWGx2ZFhSVGVXMWliMndnZkh4Y2JpQWdJQ0FnSUd4aGVXOTFkQ0JwYm5OMFlXNWpaVzltSUV4bFoyRmplVlZ1YVdadmNtMVNiM2RNWVhsdmRYUWdmSHhjYmlBZ0lDQWdJR3hoZVc5MWRDQTlQVDBnSjNWdWFXWnZjbTFTYjNjblhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCblpYUlFiM05wZEdsdmJuTWdQU0IxYm1sbWIzSnRVbTkzVEdGNWIzVjBLSHRjYmlBZ0lDQWdJQ0FnWTJGamFHVTZJRzFsWVhOMWNtVnRaVzUwVTNSdmNtVXNYRzRnSUNBZ0lDQWdJR052YkhWdGJsZHBaSFJvTEZ4dUlDQWdJQ0FnSUNCbmRYUjBaWElzWEc0Z0lDQWdJQ0FnSUcxcGJrTnZiSE1zWEc0Z0lDQWdJQ0FnSUhkcFpIUm9MRnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHZGxkRkJ2YzJsMGFXOXVjeUE5SUdSbFptRjFiSFJNWVhsdmRYUW9lMXh1SUNBZ0lDQWdJQ0JqWVdOb1pUb2diV1ZoYzNWeVpXMWxiblJUZEc5eVpTeGNiaUFnSUNBZ0lDQWdZMjlzZFcxdVYybGtkR2dzWEc0Z0lDQWdJQ0FnSUdkMWRIUmxjaXhjYmlBZ0lDQWdJQ0FnYldsdVEyOXNjeXhjYmlBZ0lDQWdJQ0FnZDJsa2RHZ3NYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWjNKcFpFSnZaSGs3WEc0Z0lDQWdhV1lnS0hkcFpIUm9JRDA5SUc1MWJHd2dKaVlnYUdGelVHVnVaR2x1WjAxbFlYTjFjbVZ0Wlc1MGN5a2dlMXh1SUNBZ0lDQWdMeThnVjJobGJpQm9lWEprWVhScGJtY2dabkp2YlNCaElITmxjblpsY2lCeVpXNWtaWElzSUhkbElHUnZiaWQwSUdoaGRtVWdkR2hsSUhkcFpIUm9JRzltSUhSb1pTQm5jbWxrWEc0Z0lDQWdJQ0F2THlCaGJtUWdkR2hsSUcxbFlYTjFjbVZ0Wlc1MElITjBiM0psSUdseklHVnRjSFI1WEc0Z0lDQWdJQ0JuY21sa1FtOWtlU0E5SUNoY2JpQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TGsxaGMyOXVjbmw5WEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ2FHVnBaMmgwT2lBd0xDQjNhV1IwYURvZ0p6RXdNQ1VuSUgxOVhHNGdJQ0FnSUNBZ0lDQWdjbVZtUFh0MGFHbHpMbk5sZEVkeWFXUlhjbUZ3Y0dWeVVtVm1mVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ2UybDBaVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXVabWxzZEdWeUtHbDBaVzBnUFQ0Z2FYUmxiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNXRZWEFvS0dsMFpXMHNJR2twSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkaUF2THlCclpXVndJSFJvYVhNZ2FXNGdjM2x1WXlCM2FYUm9JSEpsYm1SbGNrMWhjMjl1Y25sRGIyMXdiMjVsYm5SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOVhDSnpkR0YwYVdOY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V0WjNKcFpDMXBkR1Z0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVBYdHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNBNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWldaME9pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTm1iM0p0T2lBbmRISmhibk5zWVhSbFdDZ3djSGdwSUhSeVlXNXpiR0YwWlZrb01IQjRLU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCWFpXSnJhWFJVY21GdWMyWnZjbTA2SUNkMGNtRnVjMnhoZEdWWUtEQndlQ2tnZEhKaGJuTnNZWFJsV1Nnd2NIZ3BKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcFpIUm9PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWJHVjRhV0pzWlNCOGZDQnNZWGx2ZFhRZ1BUMDlJQ2RtYkdWNGFXSnNaU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2diR0Y1YjNWMFRuVnRZbVZ5Vkc5RGMzTkVhVzFsYm5OcGIyNG9ZMjlzZFcxdVYybGtkR2dwTENBdkx5QjNaU0JqWVc0bmRDQnpaWFFnWVNCM2FXUjBhQ0JtYjNJZ2MyVnlkbVZ5SUhKbGJtUmxjbVZrSUdac1pYaHBZbXhsSUdsMFpXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldZOWUyVnNJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsYkNBbUppQWhLR1pzWlhocFlteGxJSHg4SUd4aGVXOTFkQ0E5UFQwZ0oyWnNaWGhwWW14bEp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiMjVzZVNCdFpXRnpkWEpsSUdac1pYaHBZbXhsSUdsMFpXMXpJRzl1SUdOc2FXVnVkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpXRnpkWEpsYldWdWRGTjBiM0psTG5ObGRDaHBkR1Z0TENCbGJDNWpiR2xsYm5SSVpXbG5hSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThRMjl0Y0c5dVpXNTBJR1JoZEdFOWUybDBaVzE5SUdsMFpXMUpaSGc5ZTJsOUlHbHpUV1ZoYzNWeWFXNW5QWHRtWVd4elpYMGdMejVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwS1gxY2JpQWdJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvZDJsa2RHZ2dQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdMeThnVjJobGJpQjBhR1VnZDJsa2RHZ2dhWE1nWlcxd2RIa2dLSFZ6ZFdGc2JIa2dZV1owWlhJZ1lTQnlaUzF0YjNWdWRDa2djbVZ1WkdWeUlHRnVJR1Z0Y0hSNVhHNGdJQ0FnSUNBdkx5QmthWFlnZEc4Z1kyOXNiR1ZqZENCMGFHVWdkMmxrZEdnZ1ptOXlJR3hoZVc5MWRGeHVJQ0FnSUNBZ1ozSnBaRUp2WkhrZ1BTQThaR2wySUhOMGVXeGxQWHQ3SUhkcFpIUm9PaUFuTVRBd0pTY2dmWDBnY21WbVBYdDBhR2x6TG5ObGRFZHlhV1JYY21Gd2NHVnlVbVZtZlNBdlBqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z1JuVnNiQ0JzWVhsdmRYUWdhWE1nY0c5emMybGliR1ZjYmlBZ0lDQWdJR052Ym5OMElHbDBaVzF6Vkc5U1pXNWtaWElnUFNCcGRHVnRjeTVtYVd4MFpYSW9YRzRnSUNBZ0lDQWdJR2wwWlcwZ1BUNGdhWFJsYlNBbUppQnRaV0Z6ZFhKbGJXVnVkRk4wYjNKbExtaGhjeWhwZEdWdEtWeHVJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lHTnZibk4wSUdsMFpXMXpWRzlOWldGemRYSmxJRDBnYVhSbGJYTmNiaUFnSUNBZ0lDQWdMbVpwYkhSbGNpaHBkR1Z0SUQwK0lHbDBaVzBnSmlZZ0lXMWxZWE4xY21WdFpXNTBVM1J2Y21VdWFHRnpLR2wwWlcwcEtWeHVJQ0FnSUNBZ0lDQXVjMnhwWTJVb01Dd2diV2x1UTI5c2N5azdYRzVjYmlBZ0lDQWdJR052Ym5OMElIQnZjMmwwYVc5dWN5QTlJR2RsZEZCdmMybDBhVzl1Y3locGRHVnRjMVJ2VW1WdVpHVnlLVHRjYmlBZ0lDQWdJR052Ym5OMElHMWxZWE4xY21sdVoxQnZjMmwwYVc5dWN5QTlJR2RsZEZCdmMybDBhVzl1Y3locGRHVnRjMVJ2VFdWaGMzVnlaU2s3WEc0Z0lDQWdJQ0F2THlCTllYUm9MbTFoZUNncElEMDlQU0F0U1c1bWFXNXBkSGtnZDJobGJpQjBhR1Z5WlNCaGNtVWdibThnY0c5emFYUnBiMjV6WEc0Z0lDQWdJQ0JqYjI1emRDQm9aV2xuYUhRZ1BTQndiM05wZEdsdmJuTXViR1Z1WjNSb1hHNGdJQ0FnSUNBZ0lEOGdUV0YwYUM1dFlYZ29MaTR1Y0c5emFYUnBiMjV6TG0xaGNDaHdiM01nUFQ0Z2NHOXpMblJ2Y0NBcklIQnZjeTVvWldsbmFIUXBLVnh1SUNBZ0lDQWdJQ0E2SURBN1hHNGdJQ0FnSUNCbmNtbGtRbTlrZVNBOUlDaGNiaUFnSUNBZ0lDQWdQR1JwZGlCemRIbHNaVDE3ZXlCM2FXUjBhRG9nSnpFd01DVW5JSDE5SUhKbFpqMTdkR2hwY3k1elpYUkhjbWxrVjNKaGNIQmxjbEpsWm4wK1hHNGdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUzTjBlV3hsY3k1TllYTnZibko1ZlNCemRIbHNaVDE3ZXlCb1pXbG5hSFFzSUhkcFpIUm9JSDE5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMmwwWlcxelZHOVNaVzVrWlhJdWJXRndLQ2hwZEdWdExDQnBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxibVJsY2sxaGMyOXVjbmxEYjIxd2IyNWxiblFvYVhSbGJTd2dhU3dnY0c5emFYUnBiMjV6VzJsZEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TGsxaGMyOXVjbmw5SUhOMGVXeGxQWHQ3SUhkcFpIUm9JSDE5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdlMmwwWlcxelZHOU5aV0Z6ZFhKbExtMWhjQ2dvWkdGMFlTd2dhU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBkR1Z0YzFSdlRXVmhjM1Z5WlNCcGN5QmhiSGRoZVhNZ2RHaGxJR3hsYm1kMGFDQnZaaUJ0YVc1RGIyeHpMQ0J6YnlCcElIZHBiR3dnWVd4M1lYbHpJR0psSURBdUxtMXBia052YkhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHNXZjbTFoYkdsNlpTQjBhR1VnYVc1a1pYZ2dhR1Z5WlNCeVpXeGhkR2wyWlNCMGJ5QjBhR1VnYVhSbGJTQnNhWE4wSUdGeklHRWdkMmh2YkdVZ2MyOGdkR2hoZENCcGRHVnRTV1I0SUdseklHTnZjbkpsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lXNWtJSE52SUhSb1lYUWdVbVZoWTNRZ1pHOWxjMjUwSUhKbGRYTmxJSFJvWlNCdFpXRnpkWEpsYldWdWRDQnViMlJsYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRaV0Z6ZFhKbGJXVnVkRWx1WkdWNElEMGdhWFJsYlhOVWIxSmxibVJsY2k1c1pXNW5kR2dnS3lCcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3YjNOcGRHbHZiaUE5SUcxbFlYTjFjbWx1WjFCdmMybDBhVzl1YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrOWUyQnRaV0Z6ZFhKcGJtY3RKSHR0WldGemRYSmxiV1Z1ZEVsdVpHVjRmV0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVDE3ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJhWE5wWW1sc2FYUjVPaUFuYUdsa1pHVnVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZGhZbk52YkhWMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmNEb2diR0Y1YjNWMFRuVnRZbVZ5Vkc5RGMzTkVhVzFsYm5OcGIyNG9jRzl6YVhScGIyNHVkRzl3S1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ2JHRjViM1YwVG5WdFltVnlWRzlEYzNORWFXMWxibk5wYjI0b2NHOXphWFJwYjI0dWJHVm1kQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZHBaSFJvT2lCc1lYbHZkWFJPZFcxaVpYSlViME56YzBScGJXVnVjMmx2Ymlod2IzTnBkR2x2Ymk1M2FXUjBhQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2JHRjViM1YwVG5WdFltVnlWRzlEYzNORWFXMWxibk5wYjI0b2NHOXphWFJwYjI0dWFHVnBaMmgwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldZOWUyVnNJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVmhjM1Z5WlcxbGJuUlRkRzl5WlM1elpYUW9aR0YwWVN3Z1pXd3VZMnhwWlc1MFNHVnBaMmgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThRMjl0Y0c5dVpXNTBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRTllMlJoZEdGOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxSlpIZzllMjFsWVhOMWNtVnRaVzUwU1c1a1pYaDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselRXVmhjM1Z5YVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsOVhHNGdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNWNiaUFnSUNBZ0lDQWdJQ0I3ZEdocGN5NXpZM0p2Ykd4RGIyNTBZV2x1WlhJZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFWmxkR05vU1hSbGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVNHVnBaMmgwUFh0MGFHbHpMbU52Ym5SaGFXNWxja2hsYVdkb2RIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ptVjBZMmhOYjNKbFBYdDBhR2x6TG1abGRHTm9UVzl5WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOR1pYUmphR2x1WnoxN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTNXBjMFpsZEdOb2FXNW5JSHg4SUhSb2FYTXVjM1JoZEdVdWFHRnpVR1Z1WkdsdVowMWxZWE4xY21WdFpXNTBjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpjbTlzYkVobGFXZG9kRDE3YUdWcFoyaDBJQ3NnZEdocGN5NWpiMjUwWVdsdVpYSlBabVp6WlhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamNtOXNiRlJ2Y0QxN2RHaHBjeTV6ZEdGMFpTNXpZM0p2Ykd4VWIzQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MyTnliMnhzUTI5dWRHRnBibVZ5SUQ4Z0tGeHVJQ0FnSUNBZ1BGTmpjbTlzYkVOdmJuUmhhVzVsY2x4dUlDQWdJQ0FnSUNCeVpXWTllM1JvYVhNdWMyVjBVMk55YjJ4c1EyOXVkR0ZwYm1WeVVtVm1mVnh1SUNBZ0lDQWdJQ0J2YmxOamNtOXNiRDE3ZEdocGN5NTFjR1JoZEdWVFkzSnZiR3hRYjNOcGRHbHZibjFjYmlBZ0lDQWdJQ0FnYzJOeWIyeHNRMjl1ZEdGcGJtVnlQWHR6WTNKdmJHeERiMjUwWVdsdVpYSjlYRzRnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJSHRuY21sa1FtOWtlWDFjYmlBZ0lDQWdJRHd2VTJOeWIyeHNRMjl1ZEdGcGJtVnlQbHh1SUNBZ0lDa2dPaUFvWEc0Z0lDQWdJQ0JuY21sa1FtOWtlVnh1SUNBZ0lDazdYRzRnSUgxY2JuMWNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWTJocGJHUnlaVzQ2SUZKbFlXTjBMazV2WkdVc1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdUbTlUWTNKdmJHeENaV2hoZG1sdmNpQmxlSFJsYm1SeklGSmxZV04wTGtOdmJYQnZibVZ1ZER4UWNtOXdjejRnZTF4dUlDQndjbVYyVDNabGNtWnNiM2M2SUhOMGNtbHVaeUI4SUc1MWJHdzdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJQ0FnYzNWd1pYSW9jSEp2Y0hNcE8xeHVJQ0FnSUhSb2FYTXVjSEpsZGs5MlpYSm1iRzkzSUQwZ2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwS0NrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2QybHVaRzkzSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXdjbVYyVDNabGNtWnNiM2NnUFNCM2FXNWtiM2N1Wkc5amRXMWxiblF1WW05a2VTNXpkSGxzWlM1dmRtVnlabXh2ZHp0Y2JpQWdJQ0FnSUhkcGJtUnZkeTVrYjJOMWJXVnVkQzVpYjJSNUxuTjBlV3hsTG05MlpYSm1iRzkzSUQwZ0oyaHBaR1JsYmljN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1kyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUW9LU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVltOWtlUzV6ZEhsc1pTNXZkbVZ5Wm14dmR5QTlJSFJvYVhNdWNISmxkazkyWlhKbWJHOTNPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3Y205d2N5NWphR2xzWkhKbGJqdGNiaUFnZlZ4dWZWeHVJaXdpTHk4Z1FHWnNiM2NnYzNSeWFXTjBYRzVwYlhCdmNuUWdLaUJoY3lCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JqYUdsc1pISmxiajg2SUZKbFlXTjBMazV2WkdVc1hHNThmVHRjYmx4dVpuVnVZM1JwYjI0Z2NYVmxjbmxHYjJOMWMyRmliR1ZCYkd3b1pXdzZJRWhVVFV4RWFYWkZiR1Z0Wlc1MEtTQjdYRzRnSUdOdmJuTjBJSE5sYkdWamRHOXlJRDBnVzF4dUlDQWdJQ2RoVzJoeVpXWmRKeXhjYmlBZ0lDQW5ZWEpsWVZ0b2NtVm1YU2NzWEc0Z0lDQWdKMmx1Y0hWME9tNXZkQ2hiWkdsellXSnNaV1JkS1Njc1hHNGdJQ0FnSjNObGJHVmpkRHB1YjNRb1cyUnBjMkZpYkdWa1hTa25MRnh1SUNBZ0lDZDBaWGgwWVhKbFlUcHViM1FvVzJScGMyRmliR1ZrWFNrbkxGeHVJQ0FnSUNkaWRYUjBiMjQ2Ym05MEtGdGthWE5oWW14bFpGMHBKeXhjYmlBZ0lDQW5hV1p5WVcxbEp5eGNiaUFnSUNBbmIySnFaV04wSnl4Y2JpQWdJQ0FuWlcxaVpXUW5MRnh1SUNBZ0lDZGJkR0ZpYVc1a1pYZzlYQ0l0TVZ3aVhTY3NYRzRnSUNBZ0oxdDBZV0pwYm1SbGVEMWNJakJjSWwwbkxGeHVJQ0FnSUNkYlkyOXVkR1Z1ZEdWa2FYUmhZbXhsWFNjc1hHNGdJQ0FnSjJGMVpHbHZXMk52Ym5SeWIyeHpYU2NzWEc0Z0lDQWdKM1pwWkdWdlcyTnZiblJ5YjJ4elhTY3NYRzRnSUNBZ0ozTjFiVzFoY25rbkxGeHVJQ0JkTG1wdmFXNG9KeXduS1R0Y2JpQWdjbVYwZFhKdUlHVnNMbkYxWlhKNVUyVnNaV04wYjNKQmJHd29jMlZzWldOMGIzSXBPMXh1ZlZ4dVhHNWpiMjV6ZENCbWIyTjFjMFZzWlcxbGJuUWdQU0FvWld3NklFaFVUVXhGYkdWdFpXNTBLU0E5UGlCN1hHNGdJR2xtSUNoMGVYQmxiMllnWld3dVptOWpkWE1nUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQmxiQzVtYjJOMWN5Z3BPMXh1SUNCOVhHNTlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JqYkdGemN5QlVjbUZ3Um05amRYTkNaV2hoZG1sdmNpQmxlSFJsYm1SeklGSmxZV04wTGtOdmJYQnZibVZ1ZER4UWNtOXdjejRnZTF4dUlDQmxiRG9nUDBoVVRVeEVhWFpGYkdWdFpXNTBPMXh1WEc0Z0lIQnlaWFpwYjNWemJIbEdiMk4xYzJWa1JXdzZJRDlJVkUxTVJXeGxiV1Z1ZER0Y2JseHVJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0IwYUdsekxuQnlaWFpwYjNWemJIbEdiMk4xYzJWa1JXd2dQU0JrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1ME8xeHVJQ0FnSUhSb2FYTXVabTlqZFhOR2FYSnpkRU5vYVd4a0tDazdYRzRnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblptOWpkWE1uTENCMGFHbHpMbWhoYm1Sc1pVWnZZM1Z6TENCMGNuVmxLVHRjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEZkcGJHeFZibTF2ZFc1MEtDa2dlMXh1SUNBZ0lHUnZZM1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KMlp2WTNWekp5d2dkR2hwY3k1b1lXNWtiR1ZHYjJOMWN5d2dkSEoxWlNrN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKbGRtbHZkWE5zZVVadlkzVnpaV1JGYkNrZ2UxeHVJQ0FnSUNBZ1ptOWpkWE5GYkdWdFpXNTBLSFJvYVhNdWNISmxkbWx2ZFhOc2VVWnZZM1Z6WldSRmJDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjMlYwUld4U1pXWWdQU0FvWld3NklEOUlWRTFNUkdsMlJXeGxiV1Z1ZENrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2hsYkNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVsYkNBOUlHVnNPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkdiMk4xY3lBOUlDaGxkbVZ1ZERvZ1JtOWpkWE5GZG1WdWRDa2dQVDRnZTF4dUlDQWdJR2xtSUNoY2JpQWdJQ0FnSUNGMGFHbHpMbVZzSUh4OFhHNGdJQ0FnSUNBb1pYWmxiblF1ZEdGeVoyVjBJR2x1YzNSaGJtTmxiMllnVG05a1pTQW1KaUIwYUdsekxtVnNMbU52Ym5SaGFXNXpLR1YyWlc1MExuUmhjbWRsZENrcFhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdaWFpsYm5RdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NrN1hHNGdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCMGFHbHpMbVp2WTNWelJtbHljM1JEYUdsc1pDZ3BPMXh1SUNCOU8xeHVYRzRnSUdadlkzVnpSbWx5YzNSRGFHbHNaQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR1ZzSUgwZ1BTQjBhR2x6TzF4dUlDQWdJR2xtSUNobGJDa2dlMXh1SUNBZ0lDQWdabTlqZFhORmJHVnRaVzUwS0hGMVpYSjVSbTlqZFhOaFlteGxRV3hzS0dWc0tWc3dYU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WdVpHVnlLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQThaR2wySUhKbFpqMTdkR2hwY3k1elpYUkZiRkpsWm4wK2UzUm9hWE11Y0hKdmNITXVZMmhwYkdSeVpXNTlQQzlrYVhZK08xeHVJQ0I5WEc1OVhHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1kyeGhjM051WVcxbGN5Qm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1YVcxd2IzSjBJRWhsWVdScGJtY2dabkp2YlNBbkxpOUlaV0ZrYVc1bkxtcHpKenRjYm1sdGNHOXlkQ0JUZEc5d1UyTnliMnhzUW1Wb1lYWnBiM0lnWm5KdmJTQW5MaTlpWldoaGRtbHZjbk12VTNSdmNGTmpjbTlzYkVKbGFHRjJhVzl5TG1wekp6dGNibWx0Y0c5eWRDQlVjbUZ3Um05amRYTkNaV2hoZG1sdmNpQm1jbTl0SUNjdUwySmxhR0YyYVc5eWN5OVVjbUZ3Um05amRYTkNaV2hoZG1sdmNpNXFjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZUVzlrWVd3dVkzTnpKenRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHRmpZMlZ6YzJsaWFXeHBkSGxOYjJSaGJFeGhZbVZzT2lCemRISnBibWNzWEc0Z0lHTm9hV3hrY21WdVB6b2dVbVZoWTNRdVRtOWtaU3hjYmlBZ1kyeHZjMlZQYms5MWRITnBaR1ZEYkdsamF6ODZJR0p2YjJ4bFlXNHNYRzRnSUdadmIzUmxjajg2SUZKbFlXTjBMazV2WkdVc1hHNGdJR2hsWVdScGJtYy9PaUJ6ZEhKcGJtY2dmQ0JTWldGamRDNU9iMlJsTEZ4dUlDQnZia1JwYzIxcGMzTTZJQ2dwSUQwK0lIWnZhV1FzWEc0Z0lISnZiR1UvT2lBbllXeGxjblJrYVdGc2IyY25JSHdnSjJScFlXeHZaeWNzWEc0Z0lITnBlbVUvT2lBbmMyMG5JSHdnSjIxa0p5QjhJQ2RzWnljZ2ZDQnVkVzFpWlhJc1hHNThmVHRjYmx4dVkyOXVjM1FnVTBsYVJWOVhTVVJVU0Y5TlFWQWdQU0I3WEc0Z0lITnRPaUExTkRBc1hHNGdJRzFrT2lBM01qQXNYRzRnSUd4bk9pQTVNREFzWEc1OU8xeHVYRzVqYjI1emRDQkZVME5CVUVWZlMwVlpYME5QUkVVZ1BTQXlOenRjYmx4dVpuVnVZM1JwYjI0Z1FtRmphMlJ5YjNBb2UxeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ2IyNURiR2xqYXl4Y2JuMDZJSHRjYmlBZ1kyaHBiR1J5Wlc0L09pQlNaV0ZqZEM1T2IyUmxMRnh1SUNCdmJrTnNhV05yUHpvZ0tHVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQTlQaUIyYjJsa0xGeHVmU2tnZTF4dUlDQmpiMjV6ZENCb1lXNWtiR1ZEYkdsamF5QTlJR1YyWlc1MElEMCtJSHRjYmlBZ0lDQnBaaUFvWlhabGJuUXVkR0Z5WjJWMElDRTlQU0JsZG1WdWRDNWpkWEp5Wlc1MFZHRnlaMlYwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0c5dVEyeHBZMnNwSUh0Y2JpQWdJQ0FnSUc5dVEyeHBZMnNvWlhabGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFBseHVJQ0FnSUNBZ2V5OHFJRVJwYzJGaWJHbHVaeUIwYUdVZ2JHbHVkR1Z5Y3lCaVpXeHZkeUJwY3lCbWFXNWxMQ0IzWlNCa2IyNG5kQ0IzWVc1MElHdGxlU0JsZG1WdWRDQnNhWE4wWlc1bGNuTWdLRVZUUXlCb1lXNWtiR1ZrSUdWc2MyVjNhR1Z5WlNrZ0tpOTlYRzRnSUNBZ0lDQjdMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR3B6ZUMxaE1URjVMMk5zYVdOckxXVjJaVzUwY3kxb1lYWmxMV3RsZVMxbGRtVnVkSE1zSUdwemVDMWhNVEY1TDI1dkxYTjBZWFJwWXkxbGJHVnRaVzUwTFdsdWRHVnlZV04wYVc5dWN5QXFMMzFjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBYdHpkSGxzWlhNdVltRmphMlJ5YjNCOUlHOXVRMnhwWTJzOWUyaGhibVJzWlVOc2FXTnJmU0F2UGx4dUlDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJRHd2UGx4dUlDQXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQklaV0ZrWlhJb2V5Qm9aV0ZrYVc1bklIMDZJSHQ4SUdobFlXUnBibWM2SUhOMGNtbHVaeUI4SUZKbFlXTjBMazV2WkdVZ2ZIMHBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQm9aV0ZrYVc1bklDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJSEpsZEhWeWJpQm9aV0ZrYVc1bk8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFFtOTRJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSWdhblZ6ZEdsbWVVTnZiblJsYm5ROVhDSmpaVzUwWlhKY0lpQndZV1JrYVc1blBYczRmVDVjYmlBZ0lDQWdJRHhJWldGa2FXNW5JSE5wZW1VOVhDSnRaRndpSUdGalkyVnpjMmxpYVd4cGRIbE1aWFpsYkQxN01YMCtYRzRnSUNBZ0lDQWdJSHRvWldGa2FXNW5mVnh1SUNBZ0lDQWdQQzlJWldGa2FXNW5QbHh1SUNBZ0lEd3ZRbTk0UGx4dUlDQXBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCTmIyUmhiQ2g3WEc0Z0lHRmpZMlZ6YzJsaWFXeHBkSGxOYjJSaGJFeGhZbVZzTEZ4dUlDQmphR2xzWkhKbGJpeGNiaUFnWTJ4dmMyVlBiazkxZEhOcFpHVkRiR2xqYXlBOUlIUnlkV1VzWEc0Z0lHOXVSR2x6YldsemN5eGNiaUFnWm05dmRHVnlMRnh1SUNCb1pXRmthVzVuTEZ4dUlDQnliMnhsSUQwZ0oyUnBZV3h2Wnljc1hHNGdJSE5wZW1VZ1BTQW5jMjBuTEZ4dWZUb2dVSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdXM05vYjNkVWIzQlRhR0ZrYjNjc0lITmxkRk5vYjNkVWIzQlRhR0ZrYjNkZElEMGdVbVZoWTNRdWRYTmxVM1JoZEdVb1ptRnNjMlVwTzF4dUlDQmpiMjV6ZENCYmMyaHZkMEp2ZEhSdmJWTm9ZV1J2ZHl3Z2MyVjBVMmh2ZDBKdmRIUnZiVk5vWVdSdmQxMGdQU0JTWldGamRDNTFjMlZUZEdGMFpTaG1ZV3h6WlNrN1hHNGdJR052Ym5OMElHTnZiblJsYm5RZ1BTQlNaV0ZqZEM1MWMyVlNaV1k4UDBoVVRVeEVhWFpGYkdWdFpXNTBQaWh1ZFd4c0tUdGNibHh1SUNCU1pXRmpkQzUxYzJWRlptWmxZM1FvS0NrZ1BUNGdlMXh1SUNBZ0lHWjFibU4wYVc5dUlHaGhibVJzWlV0bGVWVndLR1YyWlc1ME9pQjdJR3RsZVVOdlpHVTZJRzUxYldKbGNpQjlLU0I3WEc0Z0lDQWdJQ0JwWmlBb1pYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ1JWTkRRVkJGWDB0RldWOURUMFJGS1NCN1hHNGdJQ0FnSUNBZ0lHOXVSR2x6YldsemN5Z3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdoaGJtUnNaVXRsZVZWd0tUdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWTJ4bFlXNTFjQ2dwSUh0Y2JpQWdJQ0FnSUhkcGJtUnZkeTV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkclpYbDFjQ2NzSUdoaGJtUnNaVXRsZVZWd0tUdGNiaUFnSUNCOU8xeHVJQ0I5TENCYmIyNUVhWE50YVhOelhTazdYRzVjYmlBZ1kyOXVjM1FnYUdGdVpHeGxUM1YwYzJsa1pVTnNhV05ySUQwZ0tDa2dQVDRnZTF4dUlDQWdJR2xtSUNoamJHOXpaVTl1VDNWMGMybGtaVU5zYVdOcktTQjdYRzRnSUNBZ0lDQnZia1JwYzIxcGMzTW9LVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnWTI5dWMzUWdkWEJrWVhSbFUyaGhaRzkzY3lBOUlDZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjBZWEpuWlhRZ1BTQmpiMjUwWlc1MExtTjFjbkpsYm5RN1hHNGdJQ0FnYVdZZ0tDRjBZWEpuWlhRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2FHRnpWbVZ5ZEdsallXeFRZM0p2Ykd4aVlYSWdQU0IwWVhKblpYUXVZMnhwWlc1MFNHVnBaMmgwSUR3Z2RHRnlaMlYwTG5OamNtOXNiRWhsYVdkb2REdGNiaUFnSUNCelpYUlRhRzkzVkc5d1UyaGhaRzkzS0doaGMxWmxjblJwWTJGc1UyTnliMnhzWW1GeUlDWW1JSFJoY21kbGRDNXpZM0p2Ykd4VWIzQWdQaUF3S1R0Y2JpQWdJQ0J6WlhSVGFHOTNRbTkwZEc5dFUyaGhaRzkzS0Z4dUlDQWdJQ0FnYUdGelZtVnlkR2xqWVd4VFkzSnZiR3hpWVhJZ0ppWmNiaUFnSUNBZ0lDQWdkR0Z5WjJWMExtOW1abk5sZEVobGFXZG9kQ0FySUhSaGNtZGxkQzV6WTNKdmJHeFViM0FnUENCMFlYSm5aWFF1YzJOeWIyeHNTR1ZwWjJoMFhHNGdJQ0FnS1R0Y2JpQWdmVHRjYmx4dUlDQlNaV0ZqZEM1MWMyVkZabVpsWTNRb0tDa2dQVDRnZTF4dUlDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHlaWE5wZW1VbkxDQjFjR1JoZEdWVGFHRmtiM2R6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2QybHVaRzkzTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozSmxjMmw2WlNjc0lIVndaR0YwWlZOb1lXUnZkM01wTzF4dUlDQWdJSDA3WEc0Z0lIMHNJRnRkS1R0Y2JseHVJQ0JTWldGamRDNTFjMlZGWm1abFkzUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUhWd1pHRjBaVk5vWVdSdmQzTW9LVHRjYmlBZ2ZTd2dXMTBwTzF4dVhHNGdJR052Ym5OMElIZHBaSFJvSUQwZ2RIbHdaVzltSUhOcGVtVWdQVDA5SUNkemRISnBibWNuSUQ4Z1UwbGFSVjlYU1VSVVNGOU5RVkJiYzJsNlpWMGdPaUJ6YVhwbE8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRk4wYjNCVFkzSnZiR3hDWldoaGRtbHZjajVjYmlBZ0lDQWdJRHhVY21Gd1JtOWpkWE5DWldoaGRtbHZjajVjYmlBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGJHRmlaV3c5ZTJGalkyVnpjMmxpYVd4cGRIbE5iMlJoYkV4aFltVnNmVnh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TG1OdmJuUmhhVzVsY24xY2JpQWdJQ0FnSUNBZ0lDQnliMnhsUFh0eWIyeGxmVnh1SUNBZ0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUNBZ1BFSmhZMnRrY205d0lHOXVRMnhwWTJzOWUyaGhibVJzWlU5MWRITnBaR1ZEYkdsamEzMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDE3YzNSNWJHVnpMbmR5WVhCd1pYSjlJSFJoWWtsdVpHVjRQWHN0TVgwZ2MzUjViR1U5ZTNzZ2QybGtkR2dnZlgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iR1Y0UFZ3aVozSnZkMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ5WENKeVpXeGhkR2wyWlZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVQxY0ltWnNaWGhjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGNtVmpkR2x2YmoxY0ltTnZiSFZ0Ymx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c5WENJeE1EQWxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRvWldGa2FXNW5JQ1ltSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzI1aGJXVnpLSE4wZVd4bGN5NXphR0ZrYjNkRGIyNTBZV2x1WlhJc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCYmMzUjViR1Z6TG5Ob1lXUnZkMTA2SUhOb2IzZFViM0JUYUdGa2IzY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNHVmhaR1Z5SUdobFlXUnBibWM5ZTJobFlXUnBibWQ5SUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1pYZzlYQ0puY205M1hDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkyWlhKbWJHOTNQVndpWVhWMGIxd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmxOamNtOXNiRDE3ZFhCa1lYUmxVMmhoWkc5M2MzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsWmoxN1kyOXVkR1Z1ZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UyWnZiM1JsY2lBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3loemRIbHNaWE11YzJoaFpHOTNRMjl1ZEdGcGJtVnlMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXM04wZVd4bGN5NXphR0ZrYjNkZE9pQnphRzkzUW05MGRHOXRVMmhoWkc5M0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVDQndZV1JrYVc1blBYczRmVDU3Wm05dmRHVnlmVHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQThMMEpoWTJ0a2NtOXdQbHh1SUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lEd3ZWSEpoY0VadlkzVnpRbVZvWVhacGIzSStYRzRnSUNBZ1BDOVRkRzl3VTJOeWIyeHNRbVZvWVhacGIzSStYRzRnSUNrN1hHNTlYRzVjYmsxdlpHRnNMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV05qWlhOemFXSnBiR2wwZVUxdlpHRnNUR0ZpWld3NklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnWTJocGJHUnlaVzQ2SUZCeWIzQlVlWEJsY3k1dWIyUmxMRnh1SUNCamJHOXpaVTl1VDNWMGMybGtaVU5zYVdOck9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdabTl2ZEdWeU9pQlFjbTl3Vkhsd1pYTXVibTlrWlN4Y2JpQWdhR1ZoWkdsdVp6b2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXdnVUhKdmNGUjVjR1Z6TG01dlpHVmRLU3hjYmlBZ2IyNUVhWE50YVhOek9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdjbTlzWlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbllXeGxjblJrYVdGc2IyY25MQ0FuWkdsaGJHOW5KMTBwTEZ4dUlDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dUlDQWdJRkJ5YjNCVWVYQmxjeTV2Ym1WUFppaGJKM050Snl3Z0oyMWtKeXdnSjJ4bkoxMHBMRnh1SUNCZEtTeGNibjA3WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnUW05NElHWnliMjBnSnk0dlFtOTRMbXB6Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlRZFd4ellYSXVZM056Snp0Y2JseHVkSGx3WlNCUWNtOXdjeUE5SUh0OFhHNGdJSEJoZFhObFpEODZJR0p2YjJ4bFlXNHNYRzRnSUhOcGVtVS9PaUJ1ZFcxaVpYSXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1VIVnNjMkZ5S0hzZ2NHRjFjMlZrTENCemFYcGxJRDBnTVRNMUlIMDZJRkJ5YjNCektTQjdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibXhwYm1WVGRIbHNaVDE3ZTF4dUlDQWdJQ0FnSUNCZlgzTjBlV3hsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdZVzVwYldGMGFXOXVTWFJsY21GMGFXOXVRMjkxYm5RNklIQmhkWE5sWkNBL0lEQWdPaUFuYVc1bWFXNXBkR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lHOTFkR3hwYm1VNklDZHViMjVsSnl4Y2JpQWdJQ0FnSUNBZ0lDQmliM2hUYUdGa2IzYzZJQ2R1YjI1bEp5eGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0JrYVhOd2JHRjVQWHR3WVhWelpXUWdQeUFuYm05dVpTY2dPaUFuWW14dlkyc25mVnh1SUNBZ0lDQWdhR1ZwWjJoMFBYdHphWHBsZlZ4dUlDQWdJQ0FnY0c5emFYUnBiMjQ5WENKeVpXeGhkR2wyWlZ3aVhHNGdJQ0FnSUNCM2FXUjBhRDE3YzJsNlpYMWNiaUFnSUNBK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDE3YzNSNWJHVnpMbWx1Ym1WeVEybHlZMnhsZlQ1Y2JpQWdJQ0FnSUNBZ1BHUnBkaUJqYkdGemMwNWhiV1U5ZTNOMGVXeGxjeTV2ZFhSbGNrTnBjbU5zWlgwZ0x6NWNiaUFnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJRHd2UW05NFBseHVJQ0FwTzF4dWZWeHVYRzVRZFd4ellYSXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQndZWFZ6WldRNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJR052Ym5SeWIyeFRkSGxzWlhNZ1puSnZiU0FuTGk5U1lXUnBiMEoxZEhSdmJrTm9aV05yWW05NExtTnpjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZVbUZrYVc5Q2RYUjBiMjR1WTNOekp6dGNibWx0Y0c5eWRDQkNiM2dnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1YVcxd2IzSjBJRXhoWW1Wc0lHWnliMjBnSnk0dlRHRmlaV3d1YW5Nbk8xeHVhVzF3YjNKMElGUmxlSFFnWm5KdmJTQW5MaTlVWlhoMExtcHpKenRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHTm9aV05yWldRL09pQmliMjlzWldGdUxGeHVJQ0JrYVhOaFlteGxaRDg2SUdKdmIyeGxZVzRzWEc0Z0lHbGtPaUJ6ZEhKcGJtY3NYRzRnSUd4aFltVnNQem9nYzNSeWFXNW5MRnh1SUNCdVlXMWxQem9nYzNSeWFXNW5MRnh1SUNCdmJrTm9ZVzVuWlRvZ0tIdGNiaUFnSUNCbGRtVnVkRG9nVTNsdWRHaGxkR2xqU1c1d2RYUkZkbVZ1ZER3K0xGeHVJQ0FnSUdOb1pXTnJaV1E2SUdKdmIyeGxZVzRzWEc0Z0lIMHBJRDArSUhadmFXUXNYRzRnSUhaaGJIVmxPaUJ6ZEhKcGJtY3NYRzRnSUhOcGVtVS9PaUFuYzIwbklId2dKMjFrSnl4Y2JueDlPMXh1WEc1MGVYQmxJRk4wWVhSbElEMGdlM3hjYmlBZ1ptOWpkWE5sWkRvZ1ltOXZiR1ZoYml4Y2JpQWdhRzkyWlhKbFpEb2dZbTl2YkdWaGJpeGNibng5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJTWVdScGIwSjFkSFJ2YmlCbGVIUmxibVJ6SUZKbFlXTjBMa052YlhCdmJtVnVkRHhRY205d2N5d2dVM1JoZEdVK0lIdGNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYUdWamEyVmtPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCa2FYTmhZbXhsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdhV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JzWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCdVlXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHOXVRMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUhaaGJIVmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdjMmw2WlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbmMyMG5MQ0FuYldRblhTa3NYRzRnSUgwN1hHNWNiaUFnYzNSaGRHbGpJR1JsWm1GMWJIUlFjbTl3Y3lBOUlIdGNiaUFnSUNCamFHVmphMlZrT2lCbVlXeHpaU3hjYmlBZ0lDQmthWE5oWW14bFpEb2dabUZzYzJVc1hHNGdJQ0FnYzJsNlpUb2dKMjFrSnl4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwWlNBOUlIdGNiaUFnSUNCbWIyTjFjMlZrT2lCbVlXeHpaU3hjYmlBZ0lDQm9iM1psY21Wa09pQm1ZV3h6WlN4Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWRGFHRnVaMlVnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTBsdWNIVjBSWFpsYm5ROFBpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2diMjVEYUdGdVoyVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnWTI5dWMzUWdleUJqYUdWamEyVmtJSDBnUFNCbGRtVnVkQzUwWVhKblpYUTdYRzRnSUNBZ2IyNURhR0Z1WjJVb2V5QmphR1ZqYTJWa0xDQmxkbVZ1ZENCOUtUdGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkNiSFZ5SUQwZ0tDa2dQVDRnZEdocGN5NXpaWFJUZEdGMFpTaDdJR1p2WTNWelpXUTZJR1poYkhObElIMHBPMXh1WEc0Z0lHaGhibVJzWlVadlkzVnpJRDBnS0NrZ1BUNGdkR2hwY3k1elpYUlRkR0YwWlNoN0lHWnZZM1Z6WldRNklIUnlkV1VnZlNrN1hHNWNiaUFnYUdGdVpHeGxTRzkyWlhJZ1BTQW9hRzkyWlhKbFpEb2dZbTl2YkdWaGJpa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5Qm9iM1psY21Wa0lIMHBPMXh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR05vWldOclpXUXNJR1JwYzJGaWJHVmtMQ0JwWkN3Z2JHRmlaV3dzSUc1aGJXVXNJSE5wZW1Vc0lIWmhiSFZsSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUhzZ1ptOWpkWE5sWkN3Z2FHOTJaWEpsWkNCOUlEMGdkR2hwY3k1emRHRjBaVHRjYmx4dUlDQWdJR3hsZENCaWIzSmtaWEpUZEhsc1pTQTlJSE4wZVd4bGN5NUNiM0prWlhJN1hHNGdJQ0FnYVdZZ0tHUnBjMkZpYkdWa0lDWW1JR05vWldOclpXUXBJSHRjYmlBZ0lDQWdJR0p2Y21SbGNsTjBlV3hsSUQwZ2MzUjViR1Z6TGtKdmNtUmxja1JwYzJGaWJHVmtRMmhsWTJ0bFpEdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tDRmthWE5oWW14bFpDQW1KaUJqYUdWamEyVmtLU0I3WEc0Z0lDQWdJQ0JpYjNKa1pYSlRkSGxzWlNBOUlITjBlV3hsY3k1Q2IzSmtaWEpFWVhKclIzSmhlVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLQ0ZrYVhOaFlteGxaQ0FtSmlCb2IzWmxjbVZrS1NCN1hHNGdJQ0FnSUNCaWIzSmtaWEpUZEhsc1pTQTlJSE4wZVd4bGN5NUNiM0prWlhKSWIzWmxjbVZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCaWIzSmtaWEpYYVdSMGFDQTlJSE4wZVd4bGN5NUNiM0prWlhKVmJtTm9aV05yWldRN1hHNGdJQ0FnYVdZZ0tHUnBjMkZpYkdWa0lDWW1JQ0ZqYUdWamEyVmtLU0I3WEc0Z0lDQWdJQ0JpYjNKa1pYSlhhV1IwYUNBOUlITjBlV3hsY3k1Q2IzSmtaWEpFYVhOaFlteGxaRHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR05vWldOclpXUWdKaVlnYzJsNlpTQTlQVDBnSjNOdEp5a2dlMXh1SUNBZ0lDQWdZbTl5WkdWeVYybGtkR2dnUFNCemRIbHNaWE11UW05eVpHVnlRMmhsWTJ0bFpGTnRPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZMmhsWTJ0bFpDQW1KaUJ6YVhwbElEMDlQU0FuYldRbktTQjdYRzRnSUNBZ0lDQmliM0prWlhKWGFXUjBhQ0E5SUhOMGVXeGxjeTVDYjNKa1pYSkRhR1ZqYTJWa1RXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYzNSNWJHVlRhWHBsSUQxY2JpQWdJQ0FnSUhOcGVtVWdQVDA5SUNkemJTY2dQeUJqYjI1MGNtOXNVM1I1YkdWekxuTnBlbVZUYlNBNklHTnZiblJ5YjJ4VGRIbHNaWE11YzJsNlpVMWtPMXh1WEc0Z0lDQWdZMjl1YzNRZ1ltZFRkSGxzWlNBOUlHUnBjMkZpYkdWa0lDWW1JQ0ZqYUdWamEyVmtJRDhnYzNSNWJHVnpMa0puUkdsellXSnNaV1FnT2lCemRIbHNaWE11UW1kRmJtRmliR1ZrTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ1lXeHBaMjVKZEdWdGN6MWNJbU5sYm5SbGNsd2lYRzRnSUNBZ0lDQWdJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSmNiaUFnSUNBZ0lDQWdhblZ6ZEdsbWVVTnZiblJsYm5ROVhDSnpkR0Z5ZEZ3aVhHNGdJQ0FnSUNBZ0lHMWhjbWRwYmt4bFpuUTlleTB4ZlZ4dUlDQWdJQ0FnSUNCdFlYSm5hVzVTYVdkb2REMTdMVEY5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUR4TVlXSmxiQ0JvZEcxc1JtOXlQWHRwWkgwK1hHNGdJQ0FnSUNBZ0lDQWdQRUp2ZUNCd1lXUmthVzVuV0QxN01YMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBOFpHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOdVlXMWxjeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpWjFOMGVXeGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2Y21SbGNsTjBlV3hsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKdmNtUmxjbGRwWkhSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsVTJsNlpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlhNdVVtRmthVzlDZFhSMGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVzNOMGVXeGxjeTVTWVdScGIwSjFkSFJ2YmtselJtOWpkWE5sWkYwNklHWnZZM1Z6WldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4YVc1d2RYUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphR1ZqYTJWa1BYdGphR1ZqYTJWa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOdVlXMWxjeWhqYjI1MGNtOXNVM1I1YkdWekxtbHVjSFYwTENCemRIbHNaVk5wZW1Vc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnR6ZEhsc1pYTXVTVzV3ZFhSRmJtRmliR1ZrWFRvZ0lXUnBjMkZpYkdWa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtQWHRrYVhOaFlteGxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkQxN2FXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN2JtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2YmtKc2RYSTllM1JvYVhNdWFHRnVaR3hsUW14MWNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia05vWVc1blpUMTdkR2hwY3k1b1lXNWtiR1ZEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVHYjJOMWN6MTdkR2hwY3k1b1lXNWtiR1ZHYjJOMWMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZiazF2ZFhObFJXNTBaWEk5ZXlncElEMCtJSFJvYVhNdWFHRnVaR3hsU0c5MlpYSW9kSEoxWlNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNU5iM1Z6WlV4bFlYWmxQWHNvS1NBOVBpQjBhR2x6TG1oaGJtUnNaVWh2ZG1WeUtHWmhiSE5sS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxQVndpY21Ga2FXOWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDJZV3gxWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQThMMHhoWW1Wc1BseHVYRzRnSUNBZ0lDQWdJSHRzWVdKbGJDQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFeGhZbVZzSUdoMGJXeEdiM0k5ZTJsa2ZUNWNiaUFnSUNBZ0lDQWdJQ0FnSUR4Q2IzZ2djR0ZrWkdsdVoxZzllekY5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFh0a2FYTmhZbXhsWkNBL0lDZG5jbUY1SnlBNklIVnVaR1ZtYVc1bFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphWHBsUFh0emFYcGxJRDA5UFNBbmMyMG5JRDhnSjIxa0p5QTZJQ2RzWnlkOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2JHRmlaV3g5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FnSUR3dlRHRmlaV3crWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYm1sdGNHOXlkQ0FxSUdGeklGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdRbTk0TENCN1hHNGdJRUZzYVdkdVEyOXVkR1Z1ZEZCeWIzQlVlWEJsTEZ4dUlDQkJiR2xuYmtsMFpXMXpVSEp2Y0ZSNWNHVXNYRzRnSUVGc2FXZHVVMlZzWmxCeWIzQlVlWEJsTEZ4dUlDQkVhVzFsYm5OcGIyNVFjbTl3Vkhsd1pTeGNiaUFnUkdseVpXTjBhVzl1VUhKdmNGUjVjR1VzWEc0Z0lFWnNaWGhRY205d1ZIbHdaU3hjYmlBZ1NuVnpkR2xtZVVOdmJuUmxiblJRY205d1ZIbHdaU3hjYmlBZ1QzWmxjbVpzYjNkUWNtOXdWSGx3WlN4Y2JpQWdVR0ZrWkdsdVoxQnliM0JVZVhCbExGeHVJQ0IwZVhCbElFRnNhV2R1UTI5dWRHVnVkQ3hjYmlBZ2RIbHdaU0JCYkdsbmJrbDBaVzF6TEZ4dUlDQjBlWEJsSUVGc2FXZHVVMlZzWml4Y2JpQWdkSGx3WlNCRWFXMWxibk5wYjI0c1hHNGdJSFI1Y0dVZ1JHbHlaV04wYVc5dUxGeHVJQ0IwZVhCbElFWnNaWGdzWEc0Z0lIUjVjR1VnU25WemRHbG1lVU52Ym5SbGJuUXNYRzRnSUhSNWNHVWdUM1psY21ac2IzY3NYRzRnSUhSNWNHVWdVR0ZrWkdsdVp5eGNibjBnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1lXeHBaMjVEYjI1MFpXNTBQem9nUVd4cFoyNURiMjUwWlc1MExGeHVJQ0JoYkdsbmJrbDBaVzF6UHpvZ1FXeHBaMjVKZEdWdGN5eGNiaUFnWVd4cFoyNVRaV3htUHpvZ1FXeHBaMjVUWld4bUxGeHVJQ0JqYUdsc1pISmxiajg2SUZKbFlXTjBMazV2WkdVc1hHNGdJR1JwY21WamRHbHZiajg2SUVScGNtVmpkR2x2Yml4Y2JpQWdabWwwUHpvZ1ltOXZiR1ZoYml4Y2JpQWdabXhsZUQ4NklFWnNaWGdzWEc0Z0lHaGxhV2RvZEQ4NklFUnBiV1Z1YzJsdmJpeGNiaUFnYW5WemRHbG1lVU52Ym5SbGJuUS9PaUJLZFhOMGFXWjVRMjl1ZEdWdWRDeGNibHh1SUNCdFlYaElaV2xuYUhRL09pQkVhVzFsYm5OcGIyNHNYRzRnSUcxaGVGZHBaSFJvUHpvZ1JHbHRaVzV6YVc5dUxGeHVJQ0J0YVc1SVpXbG5hSFEvT2lCRWFXMWxibk5wYjI0c1hHNGdJRzFwYmxkcFpIUm9Qem9nUkdsdFpXNXphVzl1TEZ4dVhHNGdJRzkyWlhKbWJHOTNQem9nVDNabGNtWnNiM2NzWEc1Y2JpQWdjR0ZrWkdsdVp6ODZJRkJoWkdScGJtY3NYRzRnSUhOdFVHRmtaR2x1Wno4NklGQmhaR1JwYm1jc1hHNGdJRzFrVUdGa1pHbHVaejg2SUZCaFpHUnBibWNzWEc0Z0lHeG5VR0ZrWkdsdVp6ODZJRkJoWkdScGJtY3NYRzVjYmlBZ2NHRmtaR2x1WjFnL09pQlFZV1JrYVc1bkxGeHVJQ0J6YlZCaFpHUnBibWRZUHpvZ1VHRmtaR2x1Wnl4Y2JpQWdiV1JRWVdSa2FXNW5XRDg2SUZCaFpHUnBibWNzWEc0Z0lHeG5VR0ZrWkdsdVoxZy9PaUJRWVdSa2FXNW5MRnh1WEc0Z0lIQmhaR1JwYm1kWlB6b2dVR0ZrWkdsdVp5eGNiaUFnYzIxUVlXUmthVzVuV1Q4NklGQmhaR1JwYm1jc1hHNGdJRzFrVUdGa1pHbHVaMWsvT2lCUVlXUmthVzVuTEZ4dUlDQnNaMUJoWkdScGJtZFpQem9nVUdGa1pHbHVaeXhjYmx4dUlDQjNhV1IwYUQ4NklFUnBiV1Z1YzJsdmJpeGNiaUFnZDNKaGNEODZJR0p2YjJ4bFlXNHNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1JteGxlRUp2ZUNod2NtOXdjem9nVUhKdmNITXBJSHRjYmlBZ2NtVjBkWEp1SUR4Q2IzZ2daR2x6Y0d4aGVUMWNJbVpzWlhoY0lpQjdMaTR1Y0hKdmNITjlJQzgrTzF4dWZWeHVYRzVHYkdWNFFtOTRMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV3hwWjI1RGIyNTBaVzUwT2lCQmJHbG5ia052Ym5SbGJuUlFjbTl3Vkhsd1pTeGNiaUFnWVd4cFoyNUpkR1Z0Y3pvZ1FXeHBaMjVKZEdWdGMxQnliM0JVZVhCbExGeHVJQ0JoYkdsbmJsTmxiR1k2SUVGc2FXZHVVMlZzWmxCeWIzQlVlWEJsTEZ4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVc1hHNGdJR1JwY21WamRHbHZiam9nUkdseVpXTjBhVzl1VUhKdmNGUjVjR1VzWEc0Z0lHWnBkRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUdac1pYZzZJRVpzWlhoUWNtOXdWSGx3WlN4Y2JpQWdhR1ZwWjJoME9pQkVhVzFsYm5OcGIyNVFjbTl3Vkhsd1pTeGNiaUFnYW5WemRHbG1lVU52Ym5SbGJuUTZJRXAxYzNScFpubERiMjUwWlc1MFVISnZjRlI1Y0dVc1hHNWNiaUFnYldGNFNHVnBaMmgwT2lCRWFXMWxibk5wYjI1UWNtOXdWSGx3WlN4Y2JpQWdiV0Y0VjJsa2RHZzZJRVJwYldWdWMybHZibEJ5YjNCVWVYQmxMRnh1SUNCdGFXNUlaV2xuYUhRNklFUnBiV1Z1YzJsdmJsQnliM0JVZVhCbExGeHVJQ0J0YVc1WGFXUjBhRG9nUkdsdFpXNXphVzl1VUhKdmNGUjVjR1VzWEc1Y2JpQWdiM1psY21ac2IzYzZJRTkyWlhKbWJHOTNVSEp2Y0ZSNWNHVXNYRzVjYmlBZ2NHRmtaR2x1WnpvZ1VHRmtaR2x1WjFCeWIzQlVlWEJsTEZ4dUlDQndZV1JrYVc1bldEb2dVR0ZrWkdsdVoxQnliM0JVZVhCbExGeHVJQ0J3WVdSa2FXNW5XVG9nVUdGa1pHbHVaMUJ5YjNCVWVYQmxMRnh1WEc0Z0lITnRVR0ZrWkdsdVp6b2dVR0ZrWkdsdVoxQnliM0JVZVhCbExGeHVJQ0J6YlZCaFpHUnBibWRZT2lCUVlXUmthVzVuVUhKdmNGUjVjR1VzWEc0Z0lITnRVR0ZrWkdsdVoxazZJRkJoWkdScGJtZFFjbTl3Vkhsd1pTeGNibHh1SUNCdFpGQmhaR1JwYm1jNklGQmhaR1JwYm1kUWNtOXdWSGx3WlN4Y2JpQWdiV1JRWVdSa2FXNW5XRG9nVUdGa1pHbHVaMUJ5YjNCVWVYQmxMRnh1SUNCdFpGQmhaR1JwYm1kWk9pQlFZV1JrYVc1blVISnZjRlI1Y0dVc1hHNWNiaUFnYkdkUVlXUmthVzVuT2lCUVlXUmthVzVuVUhKdmNGUjVjR1VzWEc0Z0lHeG5VR0ZrWkdsdVoxZzZJRkJoWkdScGJtZFFjbTl3Vkhsd1pTeGNiaUFnYkdkUVlXUmthVzVuV1RvZ1VHRmtaR2x1WjFCeWIzQlVlWEJsTEZ4dVhHNGdJSGRwWkhSb09pQkVhVzFsYm5OcGIyNVFjbTl3Vkhsd1pTeGNiaUFnZDNKaGNEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNTlPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRVpzWlhoQ2IzZ2dabkp2YlNBbkxpOUdiR1Y0UW05NExtcHpKenRjYm1sdGNHOXlkQ0JDYjNnc0lIdGNiaUFnUVd4cFoyNURiMjUwWlc1MFVISnZjRlI1Y0dVc1hHNGdJRUZzYVdkdVNYUmxiWE5RY205d1ZIbHdaU3hjYmlBZ1FXeHBaMjVUWld4bVVISnZjRlI1Y0dVc1hHNGdJRVJwYldWdWMybHZibEJ5YjNCVWVYQmxMRnh1SUNCR2JHVjRVSEp2Y0ZSNWNHVXNYRzRnSUVwMWMzUnBabmxEYjI1MFpXNTBVSEp2Y0ZSNWNHVXNYRzRnSUU5MlpYSm1iRzkzVUhKdmNGUjVjR1VzWEc0Z0lGQmhaR1JwYm1kUWNtOXdWSGx3WlN4Y2JpQWdkSGx3WlNCQmJHbG5ia052Ym5SbGJuUXNYRzRnSUhSNWNHVWdRV3hwWjI1SmRHVnRjeXhjYmlBZ2RIbHdaU0JCYkdsbmJsTmxiR1lzWEc0Z0lIUjVjR1VnUkdsdFpXNXphVzl1TEZ4dUlDQjBlWEJsSUVac1pYZ3NYRzRnSUhSNWNHVWdTblZ6ZEdsbWVVTnZiblJsYm5Rc1hHNGdJSFI1Y0dVZ1QzWmxjbVpzYjNjc1hHNGdJSFI1Y0dVZ1VHRmtaR2x1Wnl4Y2JuMGdabkp2YlNBbkxpOUNiM2d1YW5Nbk8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWVd4cFoyNURiMjUwWlc1MFB6b2dRV3hwWjI1RGIyNTBaVzUwTEZ4dUlDQmhiR2xuYmtsMFpXMXpQem9nUVd4cFoyNUpkR1Z0Y3l4Y2JpQWdZV3hwWjI1VFpXeG1Qem9nUVd4cFoyNVRaV3htTEZ4dUlDQmphR2xzWkhKbGJqODZJRkpsWVdOMExrNXZaR1VzWEc0Z0lHWnNaWGcvT2lCR2JHVjRMRnh1SUNCbllYQS9PaUJRWVdSa2FXNW5MRnh1SUNCb1pXbG5hSFEvT2lCRWFXMWxibk5wYjI0c1hHNGdJR3AxYzNScFpubERiMjUwWlc1MFB6b2dTblZ6ZEdsbWVVTnZiblJsYm5Rc1hHNGdJRzFoZUVobGFXZG9kRDg2SUVScGJXVnVjMmx2Yml4Y2JpQWdiV0Y0VjJsa2RHZy9PaUJFYVcxbGJuTnBiMjRzWEc0Z0lHMXBia2hsYVdkb2REODZJRVJwYldWdWMybHZiaXhjYmlBZ2JXbHVWMmxrZEdnL09pQkVhVzFsYm5OcGIyNHNYRzRnSUc5MlpYSm1iRzkzUHpvZ1QzWmxjbVpzYjNjc1hHNGdJSGRwWkhSb1B6b2dSR2x0Wlc1emFXOXVMRnh1SUNCM2NtRndQem9nWW05dmJHVmhiaXhjYm54OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQlNiM2NvZTF4dUlDQmhiR2xuYmtsMFpXMXpJRDBnSjJObGJuUmxjaWNzWEc0Z0lHTm9hV3hrY21WdUxGeHVJQ0JuWVhBZ1BTQXdMRnh1SUNCb1pXbG5hSFFzWEc0Z0lHcDFjM1JwWm5sRGIyNTBaVzUwSUQwZ0ozTjBZWEowSnl4Y2JpQWdkMmxrZEdnc1hHNGdJQzR1TG5KbGMzUmNibjA2SUZCeWIzQnpLU0I3WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ2FHVnBaMmgwUFh0b1pXbG5hSFI5WEc0Z0lDQWdJQ0J0WVhKbmFXNVRkR0Z5ZEQxN1oyRndJRDhnTFdkaGNDQTZJREI5WEc0Z0lDQWdJQ0J0WVhKbmFXNUZibVE5ZTJkaGNDQS9JQzFuWVhBZ09pQXdmVnh1SUNBZ0lDQWdkMmxrZEdnOWUzZHBaSFJvZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJRHhHYkdWNFFtOTRYRzRnSUNBZ0lDQWdJR0ZzYVdkdVNYUmxiWE05ZTJGc2FXZHVTWFJsYlhOOVhHNGdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqMWNJbkp2ZDF3aVhHNGdJQ0FnSUNBZ0lHaGxhV2RvZEQxN2FHVnBaMmgwZlZ4dUlDQWdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRDE3YW5WemRHbG1lVU52Ym5SbGJuUjlYRzRnSUNBZ0lDQWdJSGRwWkhSb1BYdDNhV1IwYUgxY2JpQWdJQ0FnSUNBZ2V5NHVMbkpsYzNSOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdFNaV0ZqZEM1RGFHbHNaSEpsYmk1dFlYQW9ZMmhwYkdSeVpXNHNJR05vYVd4a0lEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFFtOTRJSEJoWkdScGJtZFlQWHRuWVhCOVBudGphR2xzWkgwOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnS1NsOVhHNGdJQ0FnSUNBOEwwWnNaWGhDYjNnK1hHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlYRzVjYmxKdmR5NXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lHRnNhV2R1UTI5dWRHVnVkRG9nUVd4cFoyNURiMjUwWlc1MFVISnZjRlI1Y0dVc1hHNGdJR0ZzYVdkdVNYUmxiWE02SUVGc2FXZHVTWFJsYlhOUWNtOXdWSGx3WlN4Y2JpQWdZV3hwWjI1VFpXeG1PaUJCYkdsbmJsTmxiR1pRY205d1ZIbHdaU3hjYmlBZ1kyaHBiR1J5Wlc0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQm1iR1Y0T2lCR2JHVjRVSEp2Y0ZSNWNHVXNYRzRnSUdkaGNEb2dVR0ZrWkdsdVoxQnliM0JVZVhCbExGeHVJQ0JvWldsbmFIUTZJRVJwYldWdWMybHZibEJ5YjNCVWVYQmxMRnh1SUNCcWRYTjBhV1o1UTI5dWRHVnVkRG9nU25WemRHbG1lVU52Ym5SbGJuUlFjbTl3Vkhsd1pTeGNiaUFnYldGNFNHVnBaMmgwT2lCRWFXMWxibk5wYjI1UWNtOXdWSGx3WlN4Y2JpQWdiV0Y0VjJsa2RHZzZJRVJwYldWdWMybHZibEJ5YjNCVWVYQmxMRnh1SUNCdGFXNUlaV2xuYUhRNklFUnBiV1Z1YzJsdmJsQnliM0JVZVhCbExGeHVJQ0J0YVc1WGFXUjBhRG9nUkdsdFpXNXphVzl1VUhKdmNGUjVjR1VzWEc0Z0lHOTJaWEptYkc5M09pQlBkbVZ5Wm14dmQxQnliM0JVZVhCbExGeHVJQ0IzYVdSMGFEb2dSR2x0Wlc1emFXOXVVSEp2Y0ZSNWNHVXNYRzRnSUhkeVlYQTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVmVHRjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JHWlhSamFFbDBaVzF6SUdaeWIyMGdKeTR2Um1WMFkyaEpkR1Z0Y3k1cWN5YzdYRzVwYlhCdmNuUWdVMk55YjJ4c1EyOXVkR0ZwYm1WeUlHWnliMjBnSnk0dlUyTnliMnhzUTI5dWRHRnBibVZ5TG1wekp6dGNibWx0Y0c5eWRDQjdYRzRnSUdkbGRFVnNaVzFsYm5SSVpXbG5hSFFzWEc0Z0lHZGxkRk5qY205c2JFaGxhV2RvZEN4Y2JpQWdaMlYwVTJOeWIyeHNVRzl6TEZ4dWZTQm1jbTl0SUNjdUwzTmpjbTlzYkZWMGFXeHpMbXB6Snp0Y2JtbHRjRzl5ZENCMGFISnZkSFJzWlNCbWNtOXRJQ2N1TDNSb2NtOTBkR3hsTG1wekp6dGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdGNiaUFnWTI5dWRHRnBibVZ5UHpvZ1NGUk5URVZzWlcxbGJuUXNYRzRnSUdselFYUkZibVEvT2lCaWIyOXNaV0Z1TEZ4dUlDQnBjMFpsZEdOb2FXNW5PaUJpYjI5c1pXRnVMRnh1SUNCbVpYUmphRTF2Y21VL09pQW9LU0E5UGlCMmIybGtMRnh1SUNCeVpXNWtaWEpJWldsbmFIUS9PaUFvS1NBOVBpQnVkVzFpWlhJc1hHNTlPMXh1WEc1MGVYQmxJRk4wWVhSbElEMGdlMXh1SUNCamIyNTBZV2x1WlhKSVpXbG5hSFE2SUc1MWJXSmxjaXhjYmlBZ2MyTnliMnhzU0dWcFoyaDBPaUJ1ZFcxaVpYSXNYRzRnSUhOamNtOXNiRlJ2Y0RvZ2JuVnRZbVZ5TEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1UyTnliMnhzUm1WMFkyZ2daWGgwWlc1a2N5QlNaV0ZqZEM1UWRYSmxRMjl0Y0c5dVpXNTBQRkJ5YjNCekxDQlRkR0YwWlQ0Z2UxeHVJQ0F2S2lwY2JpQWdJQ29nUm1WMFkyaGxjeUJoWkdScGRHbHZibUZzSUdsMFpXMXpJR2xtSUc1bFpXUmxaQzVjYmlBZ0lDb3ZYRzRnSUhWd1pHRjBaVkJ2YzJsMGFXOXVJRDBnZEdoeWIzUjBiR1VvS0NrZ1BUNGdlMXh1SUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZEdocGN5NW5aWFJUWTNKdmJHeFRkR0YwWlNncEtUdGNiaUFnZlNrN1hHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdjMk55YjJ4c0lHTnZiblJoYVc1bGNpQjBieUIxYzJVdUlFUmxabUYxYkhSeklIUnZJSGRwYm1SdmR5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNTBZV2x1WlhJNklGQnliM0JVZVhCbGN5NXphR0Z3WlNoN1hHNGdJQ0FnSUNCaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQWdJSEpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWEk2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lIMHBMRnh1SUNBZ0lISmxibVJsY2tobGFXZG9kRG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2FYTkJkRVZ1WkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdhWE5HWlhSamFHbHVaem9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ1ptVjBZMmhOYjNKbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnZTF4dUlDQWdJR052Ym5SaGFXNWxjam9nZEhsd1pXOW1JSGRwYm1SdmR5QWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QjNhVzVrYjNjZ09pQjFibVJsWm1sdVpXUXNYRzRnSUgwN1hHNWNiaUFnYzNSaGRHVWdQU0I3WEc0Z0lDQWdZMjl1ZEdGcGJtVnlTR1ZwWjJoME9pQXdMRnh1SUNBZ0lITmpjbTlzYkVobGFXZG9kRG9nTUN4Y2JpQWdJQ0J6WTNKdmJHeFViM0E2SURBc1hHNGdJSDA3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ2MyTnliMnhzSUd4cGMzUmxibVZ5SUdGbWRHVnlJSFJvWlNCamIyMXdiMjVsYm5RZ2JXOTFiblJ6TGx4dUlDQWdLaTljYmlBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5Rb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCamIyNTBZV2x1WlhJZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0NGamIyNTBZV2x1WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0h0Y2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVNHVnBaMmgwT2lCblpYUkZiR1Z0Wlc1MFNHVnBaMmgwS0dOdmJuUmhhVzVsY2lrc1hHNGdJQ0FnSUNBZ0lDNHVMblJvYVhNdVoyVjBVMk55YjJ4c1UzUmhkR1VvS1N4Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ3WkdGMFpTQnpZM0p2Ykd3Z1luVm1abVZ5SUdGdVpDQmphR1ZqYXlCaFpuUmxjaUIwYUdVZ1kyOXRjRzl1Wlc1MElIVndaR0YwWlhNdVhHNGdJQ0FxTDF4dUlDQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVW9LU0I3WEc0Z0lDQWdMeThnYzJWMFZHbHRaVzkxZENCemJ5QjBhR1VnY0dGeVpXNTBJR052YlhCdmJtVnVkQ0JqWVc0Z1kyRnNZM1ZzWVhSbElISmxibVJsY2tobGFXZG9kQ2dwTGx4dUlDQWdJSFJvYVhNdWRYQmtZWFJsVUc5emFYUnBiMjRvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0J6WTNKdmJHeGhZbXhsSUdOdmJuUmxiblFnYUdWcFoyaDBMbHh1SUNBZ0tpOWNiaUFnWjJWMFUyTnliMnhzU0dWcFoyaDBJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ1kyOXVkR0ZwYm1WeUlIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR2xtSUNnaFkyOXVkR0ZwYm1WeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR2RsZEZOamNtOXNiRWhsYVdkb2RDaGpiMjUwWVdsdVpYSXBPMXh1SUNCOU8xeHVYRzRnSUdkbGRGTmpjbTlzYkZOMFlYUmxLQ2tnZTF4dUlDQWdJR052Ym5OMElIc2dZMjl1ZEdGcGJtVnlMQ0J5Wlc1a1pYSklaV2xuYUhRZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0NGamIyNTBZV2x1WlhJcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J6WTNKdmJHeElaV2xuYUhRZ1BTQnlaVzVrWlhKSVpXbG5hSFFnZkh3Z2RHaHBjeTVuWlhSVFkzSnZiR3hJWldsbmFIUTdYRzVjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ2MyTnliMnhzU0dWcFoyaDBPaUJ6WTNKdmJHeElaV2xuYUhRb0tTeGNiaUFnSUNBZ0lITmpjbTlzYkZSdmNEb2daMlYwVTJOeWIyeHNVRzl6S0dOdmJuUmhhVzVsY2lrc1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lISmxibVJsY2lncElIdGNiaUFnSUNCamIyNXpkQ0I3SUdOdmJuUmhhVzVsY2tobGFXZG9kQ3dnYzJOeWIyeHNTR1ZwWjJoMExDQnpZM0p2Ykd4VWIzQWdmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNGdJQ0FnWTI5dWMzUWdleUJqYjI1MFlXbHVaWElzSUdabGRHTm9UVzl5WlN3Z2FYTkJkRVZ1WkN3Z2FYTkdaWFJqYUdsdVp5QjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdOdmJuTjBJSEJ5YjNCeklEMGdlMXh1SUNBZ0lDQWdZMjl1ZEdGcGJtVnlTR1ZwWjJoMExGeHVJQ0FnSUNBZ1ptVjBZMmhOYjNKbExGeHVJQ0FnSUNBZ2FYTkJkRVZ1WkN4Y2JpQWdJQ0FnSUdselJtVjBZMmhwYm1jc1hHNGdJQ0FnSUNCelkzSnZiR3hJWldsbmFIUXNYRzRnSUNBZ0lDQnpZM0p2Ykd4VWIzQXNYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2doWTI5dWRHRnBibVZ5SUh4OElHbHpRWFJGYm1RcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEZOamNtOXNiRU52Ym5SaGFXNWxjbHh1SUNBZ0lDQWdJQ0J2YmxOamNtOXNiRDE3ZEdocGN5NTFjR1JoZEdWUWIzTnBkR2x2Ym4xY2JpQWdJQ0FnSUNBZ2MyTnliMnhzUTI5dWRHRnBibVZ5UFh0amIyNTBZV2x1WlhKOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lEeEdaWFJqYUVsMFpXMXpJSHN1TGk1d2NtOXdjMzBnTHo1Y2JpQWdJQ0FnSUR3dlUyTnliMnhzUTI5dWRHRnBibVZ5UGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dVhHNXBiWEJ2Y25RZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJR3hoZVc5MWRDQm1jbTl0SUNjdUwweGhlVzkxZEM1amMzTW5PMXh1YVcxd2IzSjBJSE4wZVd4bGN5Qm1jbTl0SUNjdUwxTmxZWEpqYUVacFpXeGtMbU56Y3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHZRbTk0TG1wekp6dGNibWx0Y0c5eWRDQkpZMjl1SUdaeWIyMGdKeTR2U1dOdmJpNXFjeWM3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmhZMk5sYzNOcFltbHNhWFI1VEdGaVpXdzZJSE4wY21sdVp5eGNiaUFnWVhWMGIwTnZiWEJzWlhSbFB6b2dKMjl1SnlCOElDZHZabVluSUh3Z0ozVnpaWEp1WVcxbEp5QjhJQ2R1WVcxbEp5eGNiaUFnYVdRNklITjBjbWx1Wnl4Y2JpQWdiMjVDYkhWeVB6b2dLSHNnWlhabGJuUTZJRk41Ym5Sb1pYUnBZMFYyWlc1MFBFaFVUVXhKYm5CMWRFVnNaVzFsYm5RK0lIMHBJRDArSUhadmFXUXNYRzRnSUc5dVEyaGhibWRsT2lBb2UxeHVJQ0FnSUhaaGJIVmxPaUJ6ZEhKcGJtY3NYRzRnSUNBZ2MzbHVkR2hsZEdsalJYWmxiblE2SUZONWJuUm9aWFJwWTBWMlpXNTBQRWhVVFV4SmJuQjFkRVZzWlcxbGJuUStMRnh1SUNCOUtTQTlQaUIyYjJsa0xGeHVJQ0J2YmtadlkzVnpQem9nS0h0Y2JpQWdJQ0IyWVd4MVpUb2djM1J5YVc1bkxGeHVJQ0FnSUhONWJuUm9aWFJwWTBWMlpXNTBPaUJUZVc1MGFHVjBhV05GZG1WdWREeElWRTFNU1c1d2RYUkZiR1Z0Wlc1MFBpeGNiaUFnZlNrZ1BUNGdkbTlwWkN4Y2JpQWdjR3hoWTJWb2IyeGtaWEkvT2lCemRISnBibWNzWEc0Z0lITnBlbVUvT2lBbmJXUW5JSHdnSjJ4bkp5eGNiaUFnZG1Gc2RXVS9PaUJ6ZEhKcGJtY3NYRzU4ZlR0Y2JseHVkSGx3WlNCVGRHRjBaU0E5SUh0OFhHNGdJR1p2WTNWelpXUTZJR0p2YjJ4bFlXNHNYRzRnSUdodmRtVnlaV1E2SUdKdmIyeGxZVzRzWEc1OGZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1UyVmhjbU5vUm1sbGJHUWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5ROFVISnZjSE1zSUZOMFlYUmxQaUI3WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ1lYVjBiME52YlhCc1pYUmxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XeWR2Ymljc0lDZHZabVluTENBbmRYTmxjbTVoYldVbkxDQW5ibUZ0WlNkZEtTeGNiaUFnSUNCcFpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHOXVRbXgxY2pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdiMjVEYUdGdVoyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2IyNUdiMk4xY3pvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjR3hoWTJWb2IyeGtaWEk2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdjMmw2WlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbmJXUW5MQ0FuYkdjblhTa3NYRzRnSUNBZ2RtRnNkV1U2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lIMDdYRzVjYmlBZ2MzUmhkR1VnUFNCN1hHNGdJQ0FnWm05amRYTmxaRG9nWm1Gc2MyVXNYRzRnSUNBZ2FHOTJaWEpsWkRvZ1ptRnNjMlVzWEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsUTJoaGJtZGxJRDBnS0dWMlpXNTBPaUJUZVc1MGFHVjBhV05GZG1WdWREeElWRTFNU1c1d2RYUkZiR1Z0Wlc1MFBpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2diMjVEYUdGdVoyVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnYjI1RGFHRnVaMlVvZTF4dUlDQWdJQ0FnZG1Gc2RXVTZJR1YyWlc1MExtTjFjbkpsYm5SVVlYSm5aWFF1ZG1Gc2RXVXNYRzRnSUNBZ0lDQnplVzUwYUdWMGFXTkZkbVZ1ZERvZ1pYWmxiblFzWEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsUTJ4bFlYSWdQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMFYyWlc1MFBFaFVUVXhKYm5CMWRFVnNaVzFsYm5RK0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnZia05vWVc1blpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0J2YmtOb1lXNW5aU2g3SUhaaGJIVmxPaUFuSnl3Z2MzbHVkR2hsZEdsalJYWmxiblE2SUdWMlpXNTBJSDBwTzF4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlUxdmRYTmxSVzUwWlhJZ1BTQW9LU0E5UGlCMGFHbHpMbk5sZEZOMFlYUmxLSHNnYUc5MlpYSmxaRG9nZEhKMVpTQjlLVHRjYmx4dUlDQm9ZVzVrYkdWTmIzVnpaVXhsWVhabElEMGdLQ2tnUFQ0Z2RHaHBjeTV6WlhSVGRHRjBaU2g3SUdodmRtVnlaV1E2SUdaaGJITmxJSDBwTzF4dVhHNGdJR2hoYm1Sc1pVWnZZM1Z6SUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdORmRtVnVkRHhJVkUxTVNXNXdkWFJGYkdWdFpXNTBQaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjI1R2IyTjFjeUI5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnWm05amRYTmxaRG9nZEhKMVpTQjlLVHRjYmx4dUlDQWdJR2xtSUNodmJrWnZZM1Z6S1NCN1hHNGdJQ0FnSUNCdmJrWnZZM1Z6S0h0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUdWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhRdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUhONWJuUm9aWFJwWTBWMlpXNTBPaUJsZG1WdWRDeGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkNiSFZ5SUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdORmRtVnVkRHhJVkUxTVNXNXdkWFJGYkdWdFpXNTBQaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjI1Q2JIVnlJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJtYjJOMWMyVmtPaUJtWVd4elpTQjlLVHRjYmx4dUlDQWdJR2xtSUNodmJrSnNkWElwSUh0Y2JpQWdJQ0FnSUc5dVFteDFjaWg3SUdWMlpXNTBJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNMRnh1SUNBZ0lDQWdZWFYwYjBOdmJYQnNaWFJsTEZ4dUlDQWdJQ0FnYVdRc1hHNGdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNpeGNiaUFnSUNBZ0lITnBlbVVnUFNBbmJXUW5MRnh1SUNBZ0lDQWdkbUZzZFdVc1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQmpiMjV6ZENCN0lHWnZZM1Z6WldRc0lHaHZkbVZ5WldRZ2ZTQTlJSFJvYVhNdWMzUmhkR1U3WEc1Y2JpQWdJQ0JqYjI1emRDQm9ZWE5XWVd4MVpTQTlJSFpoYkhWbElDWW1JSFpoYkhWbExteGxibWQwYUNBK0lEQTdYRzRnSUNBZ1kyOXVjM1FnYUdsa1pWTmxZWEpqYUVsamIyNGdQU0JtYjJOMWMyVmtJSHg4SUdoaGMxWmhiSFZsTzF4dVhHNGdJQ0FnWTI5dWMzUWdZMnhoYzNOT1lXMWxJRDBnWTJ4aGMzTnVZVzFsY3loemRIbHNaWE11YVc1d2RYUXNJSHRjYmlBZ0lDQWdJRnRzWVhsdmRYUXViV1ZrYVhWdFhUb2djMmw2WlNBOVBUMGdKMjFrSnl4Y2JpQWdJQ0FnSUZ0c1lYbHZkWFF1YkdGeVoyVmRPaUJ6YVhwbElEMDlQU0FuYkdjbkxGeHVJQ0FnSUNBZ1czTjBlV3hsY3k1cGJuQjFkRUZqZEdsMlpWMDZJR1p2WTNWelpXUWdmSHdnYUdGelZtRnNkV1VzWEc0Z0lDQWdJQ0JiYzNSNWJHVnpMbWx1Y0hWMFNHOTJaWEpsWkYwNklHaHZkbVZ5WldRc1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCamIyNXpkQ0JqYkdWaGNrSjFkSFJ2YmxOcGVtVWdQU0J6YVhwbElEMDlQU0FuYkdjbklEOGdNalFnT2lBeU1EdGNiaUFnSUNCamIyNXpkQ0JqYkdWaGNrbGpiMjVUYVhwbElEMGdjMmw2WlNBOVBUMGdKMnhuSnlBL0lERXlJRG9nTVRBN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQmhiR2xuYmtsMFpXMXpQVndpWTJWdWRHVnlYQ0pjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlVDFjSW1ac1pYaGNJbHh1SUNBZ0lDQWdJQ0J2YmsxdmRYTmxSVzUwWlhJOWUzUm9hWE11YUdGdVpHeGxUVzkxYzJWRmJuUmxjbjFjYmlBZ0lDQWdJQ0FnYjI1TmIzVnpaVXhsWVhabFBYdDBhR2x6TG1oaGJtUnNaVTF2ZFhObFRHVmhkbVY5WEc0Z0lDQWdJQ0FnSUc5dVJtOWpkWE05ZTNSb2FYTXVhR0Z1Wkd4bFJtOWpkWE45WEc0Z0lDQWdJQ0FnSUc5dVFteDFjajE3ZEdocGN5NW9ZVzVrYkdWQ2JIVnlmVnh1SUNBZ0lDQWdJQ0J3YjNOcGRHbHZiajFjSW5KbGJHRjBhWFpsWENKY2JpQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ2V5Rm9hV1JsVTJWaGNtTm9TV052YmlBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGdVoyVnliM1Z6YkhsVFpYUkpibXhwYm1WVGRIbHNaVDE3ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmWDNOMGVXeGxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5cGJuUmxja1YyWlc1MGN6b2dKMjV2Ym1VbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRUZrWkdWa0lIUm9aU0JtYjJ4c2IzZHBibWNnYkdsdVpYTWdabTl5SUZOaFptRnlhU0J6ZFhCd2IzSjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzl3T2lBbk5UQWxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyWnZjbTA2SUNkMGNtRnVjMnhoZEdWWktDMDFNQ1VwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaV1owWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZV1JrYVc1bldEMTdOSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2lZV0p6YjJ4MWRHVmNJbHh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhKWTI5dUlHbGpiMjQ5WENKelpXRnlZMmhjSWlCaFkyTmxjM05wWW1sc2FYUjVUR0ZpWld3OVhDSmNJaUF2UGx4dUlDQWdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQThhVzV3ZFhSY2JpQWdJQ0FnSUNBZ0lDQmhjbWxoTFd4aFltVnNQWHRoWTJObGMzTnBZbWxzYVhSNVRHRmlaV3g5WEc0Z0lDQWdJQ0FnSUNBZ1lYVjBiME52YlhCc1pYUmxQWHRoZFhSdlEyOXRjR3hsZEdWOVhHNGdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ2FXUTllMmxrZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG1oaGJtUnNaVU5vWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0J3YkdGalpXaHZiR1JsY2oxN2NHeGhZMlZvYjJ4a1pYSjlYRzRnSUNBZ0lDQWdJQ0FnY205c1pUMWNJbk5sWVhKamFHSnZlRndpWEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVDFjSW5ObFlYSmphRndpWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U5ZTNaaGJIVmxmVnh1SUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNCN2FHRnpWbUZzZFdVZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4aWRYUjBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdjM1I1YkdWekxtTnNaV0Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdkR2hwY3k1b1lXNWtiR1ZEYkdWaGNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSaFlrbHVaR1Y0UFhzdE1YMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0ppZFhSMGIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4cFoyNUpkR1Z0Y3oxY0ltTmxiblJsY2x3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHRtYjJOMWMyVmtJRDhnSjJSaGNtdEhjbUY1SnlBNklDZDBjbUZ1YzNCaGNtVnVkQ2Q5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FHVnBaMmgwUFh0amJHVmhja0oxZEhSdmJsTnBlbVY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3AxYzNScFpubERiMjUwWlc1MFBWd2lZMlZ1ZEdWeVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtOTFibVJwYm1jOVhDSmphWEpqYkdWY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRDE3WTJ4bFlYSkNkWFIwYjI1VGFYcGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1BseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFNXTnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZqWTJWemMybGlhV3hwZEhsTVlXSmxiRDFjSWx3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTJadlkzVnpaV1FnUHlBbmQyaHBkR1VuSURvZ0oyUmhjbXRIY21GNUozMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1UFZ3aVkyRnVZMlZzWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFYcGxQWHRqYkdWaGNrbGpiMjVUYVhwbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ0FnUEM5aWRYUjBiMjQrWEc0Z0lDQWdJQ0FnSUNsOVhHNGdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYm1sdGNHOXlkQ0FxSUdGeklGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUZSbGVIUWdabkp2YlNBbkxpOVVaWGgwTG1wekp6dGNibWx0Y0c5eWRDQnNZWGx2ZFhRZ1puSnZiU0FuTGk5TVlYbHZkWFF1WTNOekp6dGNibWx0Y0c5eWRDQnpkSGxzWlhNZ1puSnZiU0FuTGk5VFpXZHRaVzUwWldSRGIyNTBjbTlzTG1OemN5YzdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCcGRHVnRjem9nUVhKeVlYazhVbVZoWTNRdVRtOWtaVDRzWEc0Z0lHOXVRMmhoYm1kbE9pQW9leUJsZG1WdWREb2dVM2x1ZEdobGRHbGpUVzkxYzJWRmRtVnVkRHcrTENCaFkzUnBkbVZKYm1SbGVEb2diblZ0WW1WeUlIMHBJRDArSUhadmFXUXNYRzRnSUhKbGMzQnZibk5wZG1VL09pQmliMjlzWldGdUxGeHVJQ0J6Wld4bFkzUmxaRWwwWlcxSmJtUmxlRG9nYm5WdFltVnlMRnh1SUNCemFYcGxQem9nSjIxa0p5QjhJQ2RzWnljc1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVTJWbmJXVnVkR1ZrUTI5dWRISnZiQ2h3Y205d2N6b2dVSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdleUJwZEdWdGN5d2diMjVEYUdGdVoyVXNJSEpsYzNCdmJuTnBkbVVzSUhObGJHVmpkR1ZrU1hSbGJVbHVaR1Y0TENCemFYcGxJRDBnSjIxa0p5QjlJRDBnY0hKdmNITTdYRzRnSUdOdmJuTjBJR0oxZEhSdmJsZHBaSFJvSUQwZ2NtVnpjRzl1YzJsMlpWeHVJQ0FnSUQ4Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnT2lCZ0pIdE5ZWFJvTG1ac2IyOXlLREV3TUNBdklFMWhkR2d1YldGNEtERXNJR2wwWlcxekxteGxibWQwYUNrcGZTVmdPMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhrYVhaY2JpQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5aGNiaUFnSUNBZ0lDQWdjM1I1YkdWekxsTmxaMjFsYm5SbFpFTnZiblJ5YjJ3c1hHNGdJQ0FnSUNBZ0lITnBlbVVnUFQwOUlDZHRaQ2NnUHlCc1lYbHZkWFF1YldWa2FYVnRJRG9nYkdGNWIzVjBMbXhoY21kbFhHNGdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ2NtOXNaVDFjSW5SaFlteHBjM1JjSWx4dUlDQWdJRDVjYmlBZ0lDQWdJSHRwZEdWdGN5NXRZWEFvS0dsMFpXMHNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FYTlRaV3hsWTNSbFpDQTlJR2tnUFQwOUlITmxiR1ZqZEdWa1NYUmxiVWx1WkdWNE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamN5QTlJR05zWVhOemJtRnRaWE1vYzNSNWJHVnpMbWwwWlcwc0lIdGNiaUFnSUNBZ0lDQWdJQ0JiYzNSNWJHVnpMbWwwWlcxSmMwNXZkRk5sYkdWamRHVmtYVG9nSVdselUyVnNaV04wWldRc1hHNGdJQ0FnSUNBZ0lDQWdXM04wZVd4bGN5NXBkR1Z0U1hOVFpXeGxZM1JsWkYwNklHbHpVMlZzWldOMFpXUXNYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lEeGlkWFIwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGMyVnNaV04wWldROWUybHpVMlZzWldOMFpXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUyTnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVQWHRwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdaWFpsYm5RZ1BUNGdiMjVEYUdGdVoyVW9leUJsZG1WdWRDd2dZV04wYVhabFNXNWtaWGc2SUdrZ2ZTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNCeWIyeGxQVndpZEdGaVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0ppZFhSMGIyNWNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ2QybGtkR2c2SUdKMWRIUnZibGRwWkhSb0lIMTlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM1I1Y0dWdlppQnBkR1Z0SUQwOVBTQW5jM1J5YVc1bkp5QS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjajE3YVhOVFpXeGxZM1JsWkNBL0lDZGtZWEpyUjNKaGVTY2dPaUFuWjNKaGVTZDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3hwWjI0OVhDSmpaVzUwWlhKY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnBlbVU5ZTNOcGVtVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZwWjJoMFBWd2lZbTlzWkZ3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2FYUmxiWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1NBNklDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BFSnZlQ0JrYVhOd2JHRjVQVndpWm14bGVGd2lJR3AxYzNScFpubERiMjUwWlc1MFBWd2lZMlZ1ZEdWeVhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMmwwWlcxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0E4TDJKMWRIUnZiajVjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgwcGZWeHVJQ0FnSUR3dlpHbDJQbHh1SUNBcE8xeHVmVnh1WEc1VFpXZHRaVzUwWldSRGIyNTBjbTlzTG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnYVhSbGJYTTZJRkJ5YjNCVWVYQmxjeTVoY25KaGVVOW1LRkJ5YjNCVWVYQmxjeTV1YjJSbEtTNXBjMUpsY1hWcGNtVmtMRnh1SUNCdmJrTm9ZVzVuWlRvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdjbVZ6Y0c5dWMybDJaVG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUhObGJHVmpkR1ZrU1hSbGJVbHVaR1Y0T2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TG1selVtVnhkV2x5WldRc1hHNGdJSE5wZW1VNklGQnliM0JVZVhCbGN5NXZibVZQWmloYkoyMWtKeXdnSjJ4bkoxMHBMRnh1ZlR0Y2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVYRzVwYlhCdmNuUWdLaUJoY3lCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMMEp2ZUM1cWN5YzdYRzVwYlhCdmNuUWdWR1Y0ZENCbWNtOXRJQ2N1TDFSbGVIUXVhbk1uTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCR2IzSnRTR1ZzY0dWeVZHVjRkQ2g3SUhSbGVIUWdmVG9nZTN3Z2RHVjRkRG9nYzNSeWFXNW5JSHg5S1NCN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFSnZlQ0J0WVhKbmFXNVViM0E5ZXpKOVBseHVJQ0FnSUNBZ1BGUmxlSFFnWTI5c2IzSTlYQ0puY21GNVhDSWdjMmw2WlQxY0luTnRYQ0krWEc0Z0lDQWdJQ0FnSUh0MFpYaDBmVnh1SUNBZ0lDQWdQQzlVWlhoMFBseHVJQ0FnSUR3dlFtOTRQbHh1SUNBcE8xeHVmVnh1WEc1R2IzSnRTR1ZzY0dWeVZHVjRkQzV3Y205d1ZIbHdaWE1nUFNCN1hHNGdJSFJsZUhRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNibjA3WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JseHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlHYjNKdFRHRmlaV3d1WTNOekp6dGNibWx0Y0c5eWRDQlVaWGgwSUdaeWIyMGdKeTR2VkdWNGRDNXFjeWM3WEc1cGJYQnZjblFnVEdGaVpXd2dabkp2YlNBbkxpOU1ZV0psYkM1cWN5YzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRVp2Y20xTVlXSmxiQ2g3WEc0Z0lHbGtMRnh1SUNCc1lXSmxiQ3hjYm4wNklIdDhYRzRnSUdsa09pQnpkSEpwYm1jc1hHNGdJR3hoWW1Wc09pQnpkSEpwYm1jc1hHNThmU2tnZTF4dUlDQnlaWFIxY200Z0tGeHVJQ0FnSUR4TVlXSmxiQ0JvZEcxc1JtOXlQWHRwWkgwK1hHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDE3YzNSNWJHVnpMbVp2Y20xTVlXSmxiSDArWEc0Z0lDQWdJQ0FnSUR4VVpYaDBJSE5wZW1VOVhDSnpiVndpUG50c1lXSmxiSDA4TDFSbGVIUStYRzRnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0E4TDB4aFltVnNQbHh1SUNBcE8xeHVmVnh1WEc1R2IzSnRUR0ZpWld3dWNISnZjRlI1Y0dWeklEMGdlMXh1SUNCcFpEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5NXBjMUpsY1hWcGNtVmtMRnh1SUNCc1lXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeTVwYzFKbGNYVnBjbVZrTEZ4dWZUdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TDBKdmVDNXFjeWM3WEc1cGJYQnZjblFnWm05eWJVVnNaVzFsYm5RZ1puSnZiU0FuTGk5R2IzSnRSV3hsYldWdWRDNWpjM01uTzF4dWFXMXdiM0owSUd4aGVXOTFkQ0JtY205dElDY3VMMHhoZVc5MWRDNWpjM01uTzF4dWFXMXdiM0owSUVadmNtMUZjbkp2Y2sxbGMzTmhaMlVnWm5KdmJTQW5MaTlHYjNKdFJYSnliM0pOWlhOellXZGxMbXB6Snp0Y2JtbHRjRzl5ZENCR2IzSnRTR1ZzY0dWeVZHVjRkQ0JtY205dElDY3VMMFp2Y20xSVpXeHdaWEpVWlhoMExtcHpKenRjYm1sdGNHOXlkQ0JHYjNKdFRHRmlaV3dnWm5KdmJTQW5MaTlHYjNKdFRHRmlaV3d1YW5Nbk8xeHVhVzF3YjNKMElFbGpiMjRnWm5KdmJTQW5MaTlKWTI5dUxtcHpKenRjYm1sdGNHOXlkQ0J6ZEhsc1pYTWdabkp2YlNBbkxpOVRaV3hsWTNSTWFYTjBMbU56Y3ljN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JsY25KdmNrMWxjM05oWjJVL09pQnpkSEpwYm1jc1hHNGdJR1JwYzJGaWJHVmtQem9nWW05dmJHVmhiaXhjYmlBZ2FHVnNjR1Z5VkdWNGREODZJSE4wY21sdVp5eGNiaUFnYVdRNklITjBjbWx1Wnl4Y2JpQWdiR0ZpWld3L09pQnpkSEpwYm1jc1hHNGdJRzVoYldVL09pQnpkSEpwYm1jc1hHNGdJRzl1UTJoaGJtZGxPaUFvZXlCbGRtVnVkRG9nVTNsdWRHaGxkR2xqU1c1d2RYUkZkbVZ1ZER3K0xDQjJZV3gxWlRvZ2MzUnlhVzVuSUgwcElEMCtJSFp2YVdRc1hHNGdJRzl3ZEdsdmJuTTZJRUZ5Y21GNVBIdGNiaUFnSUNCc1lXSmxiRG9nYzNSeWFXNW5MRnh1SUNBZ0lIWmhiSFZsT2lCemRISnBibWNzWEc0Z0lIMCtMRnh1SUNCd2JHRmpaV2h2YkdSbGNqODZJSE4wY21sdVp5eGNiaUFnYzJsNlpUODZJQ2R0WkNjZ2ZDQW5iR2NuTEZ4dUlDQjJZV3gxWlQ4NklEOXpkSEpwYm1jc1hHNThmVHRjYmx4dWRIbHdaU0JUZEdGMFpTQTlJSHQ4WEc0Z0lHWnZZM1Z6WldRNklHSnZiMnhsWVc0c1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVMlZzWldOMFRHbHpkQ0JsZUhSbGJtUnpJRkpsWVdOMExrTnZiWEJ2Ym1WdWREeFFjbTl3Y3l3Z1UzUmhkR1UrSUh0Y2JpQWdjMlZzWldOME9pQS9TRlJOVEZObGJHVmpkRVZzWlcxbGJuUTdYRzVjYmlBZ2MzUmhkR2xqSUhCeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCa2FYTmhZbXhsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdaWEp5YjNKTlpYTnpZV2RsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR2hsYkhCbGNsUmxlSFE2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JzWVdKbGJEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCdVlXMWxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHOXVRMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUc5d2RHbHZibk02SUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0Z4dUlDQWdJQ0FnVUhKdmNGUjVjR1Z6TG1WNFlXTjBLSHRjYmlBZ0lDQWdJQ0FnYkdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQWdJQ0FnZG1Gc2RXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdLU3hjYmlBZ0lDQndiR0ZqWldodmJHUmxjam9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3lkdFpDY3NJQ2RzWnlkZEtTeGNiaUFnSUNCMllXeDFaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWkdWbVlYVnNkRkJ5YjNCeklEMGdlMXh1SUNBZ0lHUnBjMkZpYkdWa09pQm1ZV3h6WlN4Y2JpQWdJQ0J6YVhwbE9pQW5iV1FuTEZ4dUlDQWdJRzl3ZEdsdmJuTTZJRnRkTEZ4dUlDQjlPMXh1WEc0Z0lITjBZWFJsSUQwZ2UxeHVJQ0FnSUdadlkzVnpaV1E2SUdaaGJITmxMRnh1SUNCOU8xeHVYRzRnSUhObGRGTmxiR1ZqZEV4cGMzUlNaV1lnUFNBb2NtVm1PaUEvU0ZSTlRGTmxiR1ZqZEVWc1pXMWxiblFwSUQwK0lIdGNiaUFnSUNCMGFHbHpMbk5sYkdWamRDQTlJSEpsWmp0Y2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWUGJrTm9ZVzVuWlNBOUlDaGxkbVZ1ZERvZ1UzbHVkR2hsZEdsalNXNXdkWFJGZG1WdWREdytLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJ2YmtOb1lXNW5aU3dnZG1Gc2RXVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ1pYWmxiblF1ZEdGeVoyVjBJR2x1YzNSaGJtTmxiMllnU0ZSTlRGTmxiR1ZqZEVWc1pXMWxiblFnSmlaY2JpQWdJQ0FnSUhaaGJIVmxJQ0U5UFNCbGRtVnVkQzUwWVhKblpYUXVkbUZzZFdWY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUc5dVEyaGhibWRsS0hzZ1pYWmxiblFzSUhaaGJIVmxPaUJsZG1WdWRDNTBZWEpuWlhRdWRtRnNkV1VnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lISmxibVJsY2lncElIdGNiaUFnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0JrYVhOaFlteGxaQ3hjYmlBZ0lDQWdJR1Z5Y205eVRXVnpjMkZuWlN4Y2JpQWdJQ0FnSUdobGJIQmxjbFJsZUhRc1hHNGdJQ0FnSUNCcFpDeGNiaUFnSUNBZ0lHeGhZbVZzTEZ4dUlDQWdJQ0FnYm1GdFpTeGNiaUFnSUNBZ0lHOXdkR2x2Ym5Nc1hHNGdJQ0FnSUNCd2JHRmpaV2h2YkdSbGNpeGNiaUFnSUNBZ0lITnBlbVVzWEc0Z0lDQWdJQ0IyWVd4MVpTeGNiaUFnSUNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmx4dUlDQWdJR052Ym5OMElIc2dabTlqZFhObFpDQjlJRDBnZEdocGN5NXpkR0YwWlR0Y2JseHVJQ0FnSUdOdmJuTjBJR05zWVhOelpYTWdQU0JqYkdGemMyNWhiV1Z6S0Z4dUlDQWdJQ0FnYzNSNWJHVnpMbk5sYkdWamRDeGNiaUFnSUNBZ0lHWnZjbTFGYkdWdFpXNTBMbUpoYzJVc1hHNGdJQ0FnSUNCa2FYTmhZbXhsWkNBL0lHWnZjbTFGYkdWdFpXNTBMbVJwYzJGaWJHVmtJRG9nWm05eWJVVnNaVzFsYm5RdVpXNWhZbXhsWkN4Y2JpQWdJQ0FnSUdWeWNtOXlUV1Z6YzJGblpTQS9JR1p2Y20xRmJHVnRaVzUwTG1WeWNtOXlaV1FnT2lCbWIzSnRSV3hsYldWdWRDNXViM0p0WVd3c1hHNGdJQ0FnSUNCemFYcGxJRDA5UFNBbmJXUW5JRDhnYkdGNWIzVjBMbTFsWkdsMWJTQTZJR3hoZVc5MWRDNXNZWEpuWlZ4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JqYjI1emRDQnphRzkzVUd4aFkyVm9iMnhrWlhJZ1BTQndiR0ZqWldodmJHUmxjaUFtSmlBaGRtRnNkV1U3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQRUp2ZUQ1Y2JpQWdJQ0FnSUNBZ2UyeGhZbVZzSUNZbUlEeEdiM0p0VEdGaVpXd2dhV1E5ZTJsa2ZTQnNZV0psYkQxN2JHRmlaV3g5SUM4K2ZWeHVJQ0FnSUNBZ0lDQThRbTk0WEc0Z0lDQWdJQ0FnSUNBZ1kyOXNiM0k5ZTJScGMyRmliR1ZrSUQ4Z0oyeHBaMmgwUjNKaGVTY2dPaUFuZDJocGRHVW5mVnh1SUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGs5WENKbWJHVjRYQ0pjYmlBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmoxY0luSmxiR0YwYVhabFhDSmNiaUFnSUNBZ0lDQWdJQ0J5YjNWdVpHbHVaejE3TkgxY2JpQWdJQ0FnSUNBZ0lDQjNhV1IwYUQxY0lqRXdNQ1ZjSWx4dUlDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdQRUp2ZUZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV3hwWjI1SmRHVnRjejFjSW1ObGJuUmxjbHdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQmliM1IwYjIxY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoYm1kbGNtOTFjMng1VTJWMFNXNXNhVzVsVTNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYMTl6ZEhsc1pUb2dleUJ3WVdSa2FXNW5VbWxuYUhRNklERTBMQ0J3WVdSa2FXNW5WRzl3T2lBeUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVDFjSW1ac1pYaGNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0OVhDSmhZbk52YkhWMFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCeWFXZG9kRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOXdYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRWxqYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJqMWNJbUZ5Y205M0xXUnZkMjVjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYc3hNbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlzYjNJOWUyUnBjMkZpYkdWa0lEOGdKMmR5WVhrbklEb2dKMlJoY210SGNtRjVKMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNQVndpWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQzgrWEc0Z0lDQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUNBZ1BITmxiR1ZqZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZWEpwWVMxa1pYTmpjbWxpWldSaWVUMTdaWEp5YjNKTlpYTnpZV2RsSUNZbUlHWnZZM1Z6WldRZ1B5QmdKSHRwWkgwdFpYSnliM0pnSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlhV0V0YVc1MllXeHBaRDE3WlhKeWIzSk5aWE56WVdkbElEOGdKM1J5ZFdVbklEb2dKMlpoYkhObEozMWNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05sYzMxY2JpQWdJQ0FnSUNBZ0lDQWdJR1JwYzJGaWJHVmtQWHRrYVhOaFlteGxaSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtQWHRwWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVOWUyNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia0pzZFhJOWUzUm9hWE11YUdGdVpHeGxUMjVEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlQxN2RHaHBjeTVvWVc1a2JHVlBia05vWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFpqMTdkR2hwY3k1elpYUlRaV3hsWTNSTWFYTjBVbVZtZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVOWUzTm9iM2RRYkdGalpXaHZiR1JsY2lBL0lIQnNZV05sYUc5c1pHVnlJRG9nZG1Gc2RXVjlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdlM05vYjNkUWJHRmpaV2h2YkdSbGNpQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHh2Y0hScGIyNGdaR2x6WVdKc1pXUWdkbUZzZFdVOWUzQnNZV05sYUc5c1pHVnlmU0JvYVdSa1pXNCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM0JzWVdObGFHOXNaR1Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDI5d2RHbHZiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNCN2IzQjBhVzl1Y3k1dFlYQW9iM0IwYVc5dUlEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdQRzl3ZEdsdmJpQnJaWGs5ZTI5d2RHbHZiaTUyWVd4MVpYMGdkbUZzZFdVOWUyOXdkR2x2Ymk1MllXeDFaWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTI5d2RHbHZiaTVzWVdKbGJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BDOXZjSFJwYjI0K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwS1gxY2JpQWdJQ0FnSUNBZ0lDQThMM05sYkdWamRENWNiaUFnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lIdG9aV3h3WlhKVVpYaDBJQ1ltSUNGbGNuSnZjazFsYzNOaFoyVWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFWnZjbTFJWld4d1pYSlVaWGgwSUhSbGVIUTllMmhsYkhCbGNsUmxlSFI5SUM4K1hHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c2ZWeHVJQ0FnSUNBZ0lDQjdaWEp5YjNKTlpYTnpZV2RsSUNZbUlEeEdiM0p0UlhKeWIzSk5aWE56WVdkbElHbGtQWHRwWkgwZ2RHVjRkRDE3WlhKeWIzSk5aWE56WVdkbGZTQXZQbjFjYmlBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElFSnZlQ0JtY205dElDY3VMMEp2ZUM1cWN5YzdYRzVwYlhCdmNuUWdTV052YmlCbWNtOXRJQ2N1TDBsamIyNHVhbk1uTzF4dWFXMXdiM0owSUhOMGVXeGxjeUJtY205dElDY3VMMU53YVc1dVpYSXVZM056Snp0Y2JseHVZMjl1YzNRZ1UwbGFSVjlPUVUxRlgxUlBYMUJKV0VWTUlEMGdlMXh1SUNCemJUb2dNeklzWEc0Z0lHMWtPaUEwTUN4Y2JuMDdYRzVjYm5SNWNHVWdVSEp2Y0hNZ1BTQjdmRnh1SUNCaFkyTmxjM05wWW1sc2FYUjVUR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdaR1ZzWVhrL09pQmliMjlzWldGdUxGeHVJQ0J6YUc5M09pQmliMjlzWldGdUxGeHVJQ0J6YVhwbFB6b2dKM050SnlCOElDZHRaQ2NzWEc1OGZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdVM0JwYm01bGNpaDdYRzRnSUdGalkyVnpjMmxpYVd4cGRIbE1ZV0psYkN4Y2JpQWdaR1ZzWVhrZ1BTQjBjblZsTEZ4dUlDQnphRzkzTEZ4dUlDQnphWHBsSUQwZ0oyMWtKeXhjYm4wNklGQnliM0J6S1NCN1hHNGdJSEpsZEhWeWJpQnphRzkzSUQ4Z0tGeHVJQ0FnSUR4Q2IzZ2daR2x6Y0d4aGVUMWNJbVpzWlhoY0lpQnFkWE4wYVdaNVEyOXVkR1Z1ZEQxY0ltRnliM1Z1WkZ3aUlHOTJaWEptYkc5M1BWd2lhR2xrWkdWdVhDSStYRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxN1kyeGhjM051WVcxbGN5aHpkSGxzWlhNdWFXTnZiaXdnZXlCYmMzUjViR1Z6TG1SbGJHRjVYVG9nWkdWc1lYa2dmU2w5UGx4dUlDQWdJQ0FnSUNBOFNXTnZibHh1SUNBZ0lDQWdJQ0FnSUdsamIyNDlYQ0pyYm05dmNGd2lYRzRnSUNBZ0lDQWdJQ0FnWVdOalpYTnphV0pwYkdsMGVVeGhZbVZzUFh0aFkyTmxjM05wWW1sc2FYUjVUR0ZpWld4OVhHNGdJQ0FnSUNBZ0lDQWdjMmw2WlQxN1UwbGFSVjlPUVUxRlgxUlBYMUJKV0VWTVczTnBlbVZkZlZ4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ1BDOWthWFkrWEc0Z0lDQWdQQzlDYjNnK1hHNGdJQ2tnT2lBb1hHNGdJQ0FnUEdScGRpQXZQbHh1SUNBcE8xeHVmVnh1WEc1VGNHbHVibVZ5TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnYzJodmR6b2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3dWFYTlNaWEYxYVhKbFpDeGNiaUFnWVdOalpYTnphV0pwYkdsMGVVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJR1JsYkdGNU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdjMmw2WlRvZ1VISnZjRlI1Y0dWekxtOXVaVTltS0ZzbmMyMG5MQ0FuYldRblhTa3NYRzU5TzF4dUlpd2lMeThnUUdac2IzY2djM1J5YVdOMFhHNXBiWEJ2Y25RZ0tpQmhjeUJTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUVac1pYaENiM2dnWm5KdmJTQW5MaTlHYkdWNFFtOTRMbXB6Snp0Y2JtbHRjRzl5ZENCQ2IzZ3NJSHRjYmlBZ1FXeHBaMjVEYjI1MFpXNTBVSEp2Y0ZSNWNHVXNYRzRnSUVGc2FXZHVTWFJsYlhOUWNtOXdWSGx3WlN4Y2JpQWdRV3hwWjI1VFpXeG1VSEp2Y0ZSNWNHVXNYRzRnSUVScGJXVnVjMmx2YmxCeWIzQlVlWEJsTEZ4dUlDQkdiR1Y0VUhKdmNGUjVjR1VzWEc0Z0lFcDFjM1JwWm5sRGIyNTBaVzUwVUhKdmNGUjVjR1VzWEc0Z0lFOTJaWEptYkc5M1VISnZjRlI1Y0dVc1hHNGdJRkJoWkdScGJtZFFjbTl3Vkhsd1pTeGNiaUFnZEhsd1pTQkJiR2xuYmtOdmJuUmxiblFzWEc0Z0lIUjVjR1VnUVd4cFoyNUpkR1Z0Y3l4Y2JpQWdkSGx3WlNCQmJHbG5ibE5sYkdZc1hHNGdJSFI1Y0dVZ1JHbHRaVzV6YVc5dUxGeHVJQ0IwZVhCbElFWnNaWGdzWEc0Z0lIUjVjR1VnU25WemRHbG1lVU52Ym5SbGJuUXNYRzRnSUhSNWNHVWdUM1psY21ac2IzY3NYRzRnSUhSNWNHVWdVR0ZrWkdsdVp5eGNibjBnWm5KdmJTQW5MaTlDYjNndWFuTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1lXeHBaMjVEYjI1MFpXNTBQem9nUVd4cFoyNURiMjUwWlc1MExGeHVJQ0JoYkdsbmJrbDBaVzF6UHpvZ1FXeHBaMjVKZEdWdGN5eGNiaUFnWVd4cFoyNVRaV3htUHpvZ1FXeHBaMjVUWld4bUxGeHVJQ0JqYUdsc1pISmxiajg2SUZKbFlXTjBMazV2WkdVc1hHNGdJR1pzWlhnL09pQkdiR1Y0TEZ4dUlDQm5ZWEEvT2lCUVlXUmthVzVuTEZ4dUlDQm9aV2xuYUhRL09pQkVhVzFsYm5OcGIyNHNYRzRnSUdwMWMzUnBabmxEYjI1MFpXNTBQem9nU25WemRHbG1lVU52Ym5SbGJuUXNYRzRnSUcxaGVFaGxhV2RvZEQ4NklFUnBiV1Z1YzJsdmJpeGNiaUFnYldGNFYybGtkR2cvT2lCRWFXMWxibk5wYjI0c1hHNGdJRzFwYmtobGFXZG9kRDg2SUVScGJXVnVjMmx2Yml4Y2JpQWdiV2x1VjJsa2RHZy9PaUJFYVcxbGJuTnBiMjRzWEc0Z0lHOTJaWEptYkc5M1B6b2dUM1psY21ac2IzY3NYRzRnSUhkcFpIUm9Qem9nUkdsdFpXNXphVzl1TEZ4dUlDQjNjbUZ3UHpvZ1ltOXZiR1ZoYml4Y2JueDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJUZEdGamF5aDdYRzRnSUdGc2FXZHVTWFJsYlhNZ1BTQW5jM1JoY25RbkxGeHVJQ0JqYUdsc1pISmxiaXhjYmlBZ1oyRndJRDBnTUN4Y2JpQWdhR1ZwWjJoMExGeHVJQ0JxZFhOMGFXWjVRMjl1ZEdWdWRDQTlJQ2RqWlc1MFpYSW5MRnh1SUNCM2FXUjBhQ3hjYmlBZ0xpNHVjbVZ6ZEZ4dWZUb2dVSEp2Y0hNcElIdGNiaUFnY21WMGRYSnVJQ2hjYmlBZ0lDQThRbTk0WEc0Z0lDQWdJQ0JvWldsbmFIUTllMmhsYVdkb2RIMWNiaUFnSUNBZ0lHMWhjbWRwYmxSdmNEMTdaMkZ3SUQ4Z0xXZGhjQ0E2SURCOVhHNGdJQ0FnSUNCdFlYSm5hVzVDYjNSMGIyMDllMmRoY0NBL0lDMW5ZWEFnT2lBd2ZWeHVJQ0FnSUNBZ2QybGtkR2c5ZTNkcFpIUm9mVnh1SUNBZ0lENWNiaUFnSUNBZ0lEeEdiR1Y0UW05NFhHNGdJQ0FnSUNBZ0lHRnNhV2R1U1hSbGJYTTllMkZzYVdkdVNYUmxiWE45WEc0Z0lDQWdJQ0FnSUdScGNtVmpkR2x2YmoxY0ltTnZiSFZ0Ymx3aVhHNGdJQ0FnSUNBZ0lHaGxhV2RvZEQxN2FHVnBaMmgwZlZ4dUlDQWdJQ0FnSUNCcWRYTjBhV1o1UTI5dWRHVnVkRDE3YW5WemRHbG1lVU52Ym5SbGJuUjlYRzRnSUNBZ0lDQWdJSGRwWkhSb1BYdDNhV1IwYUgxY2JpQWdJQ0FnSUNBZ2V5NHVMbkpsYzNSOVhHNGdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lIdFNaV0ZqZEM1RGFHbHNaSEpsYmk1dFlYQW9ZMmhwYkdSeVpXNHNJR05vYVd4a0lEMCtJQ2hjYmlBZ0lDQWdJQ0FnSUNBOFFtOTRJSEJoWkdScGJtZFpQWHRuWVhCOVBudGphR2xzWkgwOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnS1NsOVhHNGdJQ0FnSUNBOEwwWnNaWGhDYjNnK1hHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlYRzVjYmxOMFlXTnJMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdZV3hwWjI1RGIyNTBaVzUwT2lCQmJHbG5ia052Ym5SbGJuUlFjbTl3Vkhsd1pTeGNiaUFnWVd4cFoyNUpkR1Z0Y3pvZ1FXeHBaMjVKZEdWdGMxQnliM0JVZVhCbExGeHVJQ0JoYkdsbmJsTmxiR1k2SUVGc2FXZHVVMlZzWmxCeWIzQlVlWEJsTEZ4dUlDQmphR2xzWkhKbGJqb2dVSEp2Y0ZSNWNHVnpMbTV2WkdVc1hHNGdJR1pzWlhnNklFWnNaWGhRY205d1ZIbHdaU3hjYmlBZ1oyRndPaUJRWVdSa2FXNW5VSEp2Y0ZSNWNHVXNYRzRnSUdobGFXZG9kRG9nUkdsdFpXNXphVzl1VUhKdmNGUjVjR1VzWEc0Z0lHcDFjM1JwWm5sRGIyNTBaVzUwT2lCS2RYTjBhV1o1UTI5dWRHVnVkRkJ5YjNCVWVYQmxMRnh1SUNCdFlYaElaV2xuYUhRNklFUnBiV1Z1YzJsdmJsQnliM0JVZVhCbExGeHVJQ0J0WVhoWGFXUjBhRG9nUkdsdFpXNXphVzl1VUhKdmNGUjVjR1VzWEc0Z0lHMXBia2hsYVdkb2REb2dSR2x0Wlc1emFXOXVVSEp2Y0ZSNWNHVXNYRzRnSUcxcGJsZHBaSFJvT2lCRWFXMWxibk5wYjI1UWNtOXdWSGx3WlN4Y2JpQWdiM1psY21ac2IzYzZJRTkyWlhKbWJHOTNVSEp2Y0ZSNWNHVXNYRzRnSUhkcFpIUm9PaUJFYVcxbGJuTnBiMjVRY205d1ZIbHdaU3hjYmlBZ2QzSmhjRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzU5TzF4dUlpd2lMeThnUUdac2IzY2djM1J5YVdOMFhHNWNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ2JHRjViM1YwSUdaeWIyMGdKeTR2VEdGNWIzVjBMbU56Y3ljN1hHNWNiblI1Y0dVZ1ZHaHlaWE5vYjJ4a0lEMWNiaUFnZkNCN2ZDQjBiM0E2SUc1MWJXSmxjaUI4SUhOMGNtbHVaeUI4ZlZ4dUlDQjhJSHQ4SUdKdmRIUnZiVG9nYm5WdFltVnlJSHdnYzNSeWFXNW5JSHg5WEc0Z0lId2dlM3dnYkdWbWREb2diblZ0WW1WeUlId2djM1J5YVc1bklIeDlYRzRnSUh3Z2Uzd2djbWxuYUhRNklHNTFiV0psY2lCOElITjBjbWx1WnlCOGZWeHVJQ0I4SUh0OElIUnZjRG9nYm5WdFltVnlJSHdnYzNSeWFXNW5MQ0JpYjNSMGIyMDZJRzUxYldKbGNpQjhJSE4wY21sdVp5QjhmVnh1SUNCOElIdDhJR3hsWm5RNklHNTFiV0psY2lCOElITjBjbWx1Wnl3Z2NtbG5hSFE2SUc1MWJXSmxjaUI4SUhOMGNtbHVaeUI4ZlZ4dUlDQjhJSHQ4WEc0Z0lDQWdJQ0IwYjNBNklHNTFiV0psY2lCOElITjBjbWx1Wnl4Y2JpQWdJQ0FnSUd4bFpuUTZJRzUxYldKbGNpQjhJSE4wY21sdVp5eGNiaUFnSUNBZ0lISnBaMmgwT2lCdWRXMWlaWElnZkNCemRISnBibWNzWEc0Z0lDQWdJQ0JpYjNSMGIyMDZJRzUxYldKbGNpQjhJSE4wY21sdVp5eGNiaUFnSUNCOGZUdGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdOb2FXeGtjbVZ1T2lCU1pXRmpkQzVPYjJSbExGeHVJQ0JrWVc1blpYSnZkWE5zZVZObGRGcEpibVJsZUQ4NklIc2dYMTk2U1c1a1pYZzZJRzUxYldKbGNpQjlMRnh1SUNBdUxpNVVhSEpsYzJodmJHUXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1UzUnBZMnQ1S0hCeWIzQnpPaUJRY205d2N5a2dlMXh1SUNCamIyNXpkQ0I3SUdSaGJtZGxjbTkxYzJ4NVUyVjBXa2x1WkdWNElEMGdleUJmWDNwSmJtUmxlRG9nTVNCOUxDQmphR2xzWkhKbGJpQjlJRDBnY0hKdmNITTdYRzRnSUdOdmJuTjBJSE4wZVd4bElEMGdlMXh1SUNBZ0lIUnZjRG9nY0hKdmNITXVkRzl3SUNFOUlHNTFiR3dnUHlCd2NtOXdjeTUwYjNBZ09pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ2JHVm1kRG9nY0hKdmNITXViR1ZtZENBaFBTQnVkV3hzSUQ4Z2NISnZjSE11YkdWbWRDQTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQnlhV2RvZERvZ2NISnZjSE11Y21sbmFIUWdJVDBnYm5Wc2JDQS9JSEJ5YjNCekxuSnBaMmgwSURvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUdKdmRIUnZiVG9nY0hKdmNITXVZbTkwZEc5dElDRTlJRzUxYkd3Z1B5QndjbTl3Y3k1aWIzUjBiMjBnT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVaR1Z5YzJOdmNtVXRaR0Z1WjJ4bFhHNGdJQ0FnZWtsdVpHVjRPaUJrWVc1blpYSnZkWE5zZVZObGRGcEpibVJsZUM1ZlgzcEpibVJsZUN4Y2JpQWdmVHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMTdiR0Y1YjNWMExuTjBhV05yZVgwZ2MzUjViR1U5ZTNOMGVXeGxmVDVjYmlBZ0lDQWdJSHRqYUdsc1pISmxibjFjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4xY2JseHVVM1JwWTJ0NUxuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ1kyaHBiR1J5Wlc0NklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQmtZVzVuWlhKdmRYTnNlVk5sZEZwSmJtUmxlRG9nVUhKdmNGUjVjR1Z6TG1WNFlXTjBLSHRjYmlBZ0lDQmZYM3BKYm1SbGVEb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnZlNrc1hHNGdJSFJ2Y0RvZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpd2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVoxMHBMRnh1SUNCc1pXWjBPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdWJuVnRZbVZ5TENCUWNtOXdWSGx3WlhNdWMzUnlhVzVuWFNrc1hHNGdJR0p2ZEhSdmJUb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXdnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaMTBwTEZ4dUlDQnlhV2RvZERvZ1VISnZjRlI1Y0dWekxtOXVaVTltVkhsd1pTaGJVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpd2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVoxMHBMRnh1ZlR0Y2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dWFXMXdiM0owSUZCeWIzQlVlWEJsY3lCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElITjBlV3hsY3lCbWNtOXRJQ2N1TDFOM2FYUmphQzVqYzNNbk8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWkdsellXSnNaV1EvT2lCaWIyOXNaV0Z1TEZ4dUlDQnBaRG9nYzNSeWFXNW5MRnh1SUNCdVlXMWxQem9nYzNSeWFXNW5MRnh1SUNCdmJrTm9ZVzVuWlRvZ0tIc2daWFpsYm5RNklGTjViblJvWlhScFkwbHVjSFYwUlhabGJuUThQaXdnZG1Gc2RXVTZJR0p2YjJ4bFlXNGdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2MzZHBkR05vWldRL09pQmliMjlzWldGdUxGeHVmSDA3WEc1Y2JuUjVjR1VnVTNSaGRHVWdQU0I3ZkZ4dUlDQm1iMk4xYzJWa09pQmliMjlzWldGdUxGeHVmSDA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRk4zYVhSamFDQmxlSFJsYm1SeklGSmxZV04wTGtOdmJYQnZibVZ1ZER4UWNtOXdjeXdnVTNSaGRHVStJSHRjYmlBZ2MzUmhkR2xqSUhCeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCa2FYTmhZbXhsWkRvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdhV1E2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J1WVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUc5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJSE4zYVhSamFHVmtPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnZlR0Y2JseHVJQ0J6ZEdGMGFXTWdaR1ZtWVhWc2RGQnliM0J6SUQwZ2UxeHVJQ0FnSUdScGMyRmliR1ZrT2lCbVlXeHpaU3hjYmlBZ0lDQnpkMmwwWTJobFpEb2dabUZzYzJVc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdVZ1BTQjdYRzRnSUNBZ1ptOWpkWE5sWkRvZ1ptRnNjMlVzWEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsUW14MWNpQTlJQ2dwSUQwK0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCbWIyTjFjMlZrT2lCbVlXeHpaU0I5S1R0Y2JseHVJQ0JvWVc1a2JHVkdiMk4xY3lBOUlDZ3BJRDArSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJtYjJOMWMyVmtPaUIwY25WbElIMHBPMXh1WEc0Z0lHaGhibVJzWlVOb1lXNW5aU0E5SUNobGRtVnVkRG9nVTNsdWRHaGxkR2xqU1c1d2RYUkZkbVZ1ZER3K0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnZia05vWVc1blpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJR05vWldOclpXUWdmU0E5SUdWMlpXNTBMblJoY21kbGREdGNiaUFnSUNCdmJrTm9ZVzVuWlNoN0lHVjJaVzUwTENCMllXeDFaVG9nWTJobFkydGxaQ0I5S1R0Y2JpQWdmVHRjYmx4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnZXlCa2FYTmhZbXhsWkN3Z2FXUXNJRzVoYldVc0lITjNhWFJqYUdWa0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWTI5dWMzUWdjM2RwZEdOb1UzUjViR1Z6SUQwZ1kyeGhjM051WVcxbGN5aGNiaUFnSUNBZ0lITjBlV3hsY3k1emQybDBZMmdzWEc0Z0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUZ0emRIbHNaWE11Wm05amRYTmxaRjA2SUhSb2FYTXVjM1JoZEdVdVptOWpkWE5sWkN4Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRibVZ6ZEdWa0xYUmxjbTVoY25sY2JpQWdJQ0FnSUdScGMyRmliR1ZrWEc0Z0lDQWdJQ0FnSUQ4Z2MzZHBkR05vWldSY2JpQWdJQ0FnSUNBZ0lDQS9JSE4wZVd4bGN5NXpkMmwwWTJoSGNtRjVYRzRnSUNBZ0lDQWdJQ0FnT2lCemRIbHNaWE11YzNkcGRHTm9UR2xuYUhSSGNtRjVYRzRnSUNBZ0lDQWdJRG9nYzNkcGRHTm9aV1JjYmlBZ0lDQWdJQ0FnUHlCemRIbHNaWE11YzNkcGRHTm9SR0Z5YTBkeVlYbGNiaUFnSUNBZ0lDQWdPaUJ6ZEhsc1pYTXVjM2RwZEdOb1YyaHBkR1ZjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2MyeHBaR1Z5VTNSNWJHVnpJRDBnWTJ4aGMzTnVZVzFsY3loY2JpQWdJQ0FnSUhOMGVXeGxjeTV6Ykdsa1pYSXNYRzRnSUNBZ0lDQnpkMmwwWTJobFpDQS9JSE4wZVd4bGN5NXpiR2xrWlhKU2FXZG9kQ0E2SUhOMGVXeGxjeTV6Ykdsa1pYSk1aV1owTEZ4dUlDQWdJQ0FnYzNkcGRHTm9aV1FnSmlZZ0lXUnBjMkZpYkdWa0lEOGdjM1I1YkdWekxuTnNhV1JsY2tSaGNtc2dPaUJ6ZEhsc1pYTXVjMnhwWkdWeVRHbG5hSFJjYmlBZ0lDQXBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2FXNXdkWFJUZEhsc1pYTWdQU0JqYkdGemMyNWhiV1Z6S0hOMGVXeGxjeTVqYUdWamEySnZlQ3dnZTF4dUlDQWdJQ0FnVzNOMGVXeGxjeTVqYUdWamEySnZlRVZ1WVdKc1pXUmRPaUFoWkdsellXSnNaV1FzWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUzTjNhWFJqYUZOMGVXeGxjMzArWEc0Z0lDQWdJQ0FnSUR4cGJuQjFkRnh1SUNBZ0lDQWdJQ0FnSUdOb1pXTnJaV1E5ZTNOM2FYUmphR1ZrZlZ4dUlDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdhVzV3ZFhSVGRIbHNaWE45WEc0Z0lDQWdJQ0FnSUNBZ1pHbHpZV0pzWldROWUyUnBjMkZpYkdWa2ZWeHVJQ0FnSUNBZ0lDQWdJR2xrUFh0cFpIMWNiaUFnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRbXgxY2oxN2RHaHBjeTVvWVc1a2JHVkNiSFZ5ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG1oaGJtUnNaVU5vWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0J2YmtadlkzVnpQWHQwYUdsekxtaGhibVJzWlVadlkzVnpmVnh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTlYQ0pqYUdWamEySnZlRndpWEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lEeGthWFlnWTJ4aGMzTk9ZVzFsUFh0emJHbGtaWEpUZEhsc1pYTjlJQzgrWEc0Z0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlVWVdKc1pTNWpjM01uTzF4dVhHNTBlWEJsSUZCeWIzQnpJRDBnZTN4Y2JpQWdZMmhwYkdSeVpXNDZJRkpsWVdOMExrNXZaR1VzWEc0Z0lHTnZiRk53WVc0L09pQnVkVzFpWlhJc1hHNGdJSEp2ZDFOd1lXNC9PaUJ1ZFcxaVpYSXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1ZHRmliR1ZEWld4c0tIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQmpiMjV6ZENCN0lHTm9hV3hrY21WdUxDQmpiMnhUY0dGdUxDQnliM2RUY0dGdUlIMGdQU0J3Y205d2N6dGNibHh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHgwWkNCamJHRnpjMDVoYldVOWUzTjBlV3hsY3k1MFpIMGdZMjlzVTNCaGJqMTdZMjlzVTNCaGJuMGdjbTkzVTNCaGJqMTdjbTkzVTNCaGJuMCtYRzRnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ1BDOTBaRDVjYmlBZ0tUdGNibjFjYmlJc0lpOHZJRUJtYkc5M0lITjBjbWxqZEZ4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1kyaHBiR1J5Wlc0NklGSmxZV04wTGs1dlpHVXNYRzU4ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1ZHRmliR1ZDYjJSNUtIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQnlaWFIxY200Z1BIUmliMlI1UG50d2NtOXdjeTVqYUdsc1pISmxibjA4TDNSaWIyUjVQanRjYm4xY2JpSXNJaTh2SUVCbWJHOTNJSE4wY21samRGeHVhVzF3YjNKMElDb2dZWE1nVW1WaFkzUWdabkp2YlNBbmNtVmhZM1FuTzF4dVhHNTBlWEJsSUZCeWIzQnpJRDBnZTN4Y2JpQWdZMmhwYkdSeVpXNDZJRkpsWVdOMExrNXZaR1VzWEc1OGZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdWR0ZpYkdWR2IyOTBaWElvY0hKdmNITTZJRkJ5YjNCektTQjdYRzRnSUhKbGRIVnliaUE4ZEdadmIzUStlM0J5YjNCekxtTm9hV3hrY21WdWZUd3ZkR1p2YjNRK08xeHVmVnh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdjM1I1YkdWeklHWnliMjBnSnk0dlZHRmliR1V1WTNOekp6dGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdOb2FXeGtjbVZ1T2lCU1pXRmpkQzVPYjJSbExGeHVmSDA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUZSaFlteGxTR1ZoWkdWeUtIQnliM0J6T2lCUWNtOXdjeWtnZTF4dUlDQnlaWFIxY200Z1BIUm9aV0ZrSUdOc1lYTnpUbUZ0WlQxN2MzUjViR1Z6TG5Sb1pXRmtmVDU3Y0hKdmNITXVZMmhwYkdSeVpXNTlQQzkwYUdWaFpENDdYRzU5WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0J6ZEhsc1pYTWdabkp2YlNBbkxpOVVZV0pzWlM1amMzTW5PMXh1WEc1MGVYQmxJRkJ5YjNCeklEMGdlM3hjYmlBZ1kyaHBiR1J5Wlc0NklGSmxZV04wTGs1dlpHVXNYRzRnSUdOdmJGTndZVzQvT2lCdWRXMWlaWElzWEc0Z0lISnZkMU53WVc0L09pQnVkVzFpWlhJc1hHNGdJSE5qYjNCbFB6b2dKMk52YkNjZ2ZDQW5ZMjlzWjNKdmRYQW5JSHdnSjNKdmR5Y2dmQ0FuY205M1ozSnZkWEFuTEZ4dWZIMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRlJoWW14bFNHVmhaR1Z5UTJWc2JDaHdjbTl3Y3pvZ1VISnZjSE1wSUh0Y2JpQWdZMjl1YzNRZ2V5QmphR2xzWkhKbGJpd2dZMjlzVTNCaGJpd2djMk52Y0dVc0lISnZkMU53WVc0Z2ZTQTlJSEJ5YjNCek8xeHVYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdQSFJvWEc0Z0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTNOMGVXeGxjeTUwYUgxY2JpQWdJQ0FnSUhOamIzQmxQWHR6WTI5d1pTQjhmQ0FuWTI5c0ozMWNiaUFnSUNBZ0lHTnZiRk53WVc0OWUyTnZiRk53WVc1OVhHNGdJQ0FnSUNCeWIzZFRjR0Z1UFh0eWIzZFRjR0Z1ZlZ4dUlDQWdJRDVjYmlBZ0lDQWdJSHRqYUdsc1pISmxibjFjYmlBZ0lDQThMM1JvUGx4dUlDQXBPMXh1ZlZ4dUlpd2lMeThnUUdac2IzY2djM1J5YVdOMFhHNXBiWEJ2Y25RZ0tpQmhjeUJTWldGamRDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmphR2xzWkhKbGJqb2dVbVZoWTNRdVRtOWtaU3hjYm54OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQlVZV0pzWlZKdmR5aHdjbTl3Y3pvZ1VISnZjSE1wSUh0Y2JpQWdjbVYwZFhKdUlEeDBjajU3Y0hKdmNITXVZMmhwYkdSeVpXNTlQQzkwY2o0N1hHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYm1sdGNHOXlkQ0FxSUdGeklGSmxZV04wSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdZMnhoYzNOdVlXMWxjeUJtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JpYjNKa1pYSnpJR1p5YjIwZ0p5NHZRbTl5WkdWeWN5NWpjM01uTzF4dWFXMXdiM0owSUhOMGVXeGxjeUJtY205dElDY3VMMVJ2ZFdOb1lXSnNaUzVqYzNNbk8xeHVhVzF3YjNKMElIc2dabkp2YlVOc1lYTnpUbUZ0WlN3Z2FXUmxiblJwZEhrc0lIUnZVSEp2Y0hNc0lIUjVjR1VnVTNSNWJHVWdmU0JtY205dElDY3VMM04wZVd4bExtcHpKenRjYm1sdGNHOXlkQ0I3SUdKcGJtUXNJSEpoYm1kbElIMGdabkp2YlNBbkxpOTBjbUZ1YzJadmNtMXpMbXB6Snp0Y2JseHVkSGx3WlNCTmIzVnpaVU4xY25OdmNpQTlYRzRnSUh3Z0oyTnZjSGtuWEc0Z0lId2dKMmR5WVdJblhHNGdJSHdnSjJkeVlXSmlhVzVuSjF4dUlDQjhJQ2R0YjNabEoxeHVJQ0I4SUNkdWIwUnliM0FuWEc0Z0lId2dKM0J2YVc1MFpYSW5YRzRnSUh3Z0ozcHZiMjFKYmlkY2JpQWdmQ0FuZW05dmJVOTFkQ2M3WEc1MGVYQmxJRkp2ZFc1a2FXNW5JRDBnTUNCOElERWdmQ0F5SUh3Z015QjhJRFFnZkNBMUlId2dOaUI4SURjZ2ZDQTRJSHdnSjJOcGNtTnNaU2NnZkNBbmNHbHNiQ2M3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmphR2xzWkhKbGJqODZJRkpsWVdOMExrNXZaR1VzWEc0Z0lHWjFiR3hJWldsbmFIUS9PaUJpYjI5c1pXRnVMRnh1SUNCbWRXeHNWMmxrZEdnL09pQmliMjlzWldGdUxGeHVJQ0J0YjNWelpVTjFjbk52Y2o4NklFMXZkWE5sUTNWeWMyOXlMRnh1SUNCdmJrSnNkWEkvT2lBb2V5QmxkbVZ1ZERvZ1UzbHVkR2hsZEdsalJtOWpkWE5GZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0Z2ZTa2dQVDRnZG05cFpDeGNiaUFnYjI1R2IyTjFjejg2SUNoN0lHVjJaVzUwT2lCVGVXNTBhR1YwYVdOR2IyTjFjMFYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlCOUtTQTlQaUIyYjJsa0xGeHVJQ0J2YmsxdmRYTmxSVzUwWlhJL09pQW9leUJsZG1WdWREb2dVM2x1ZEdobGRHbGpUVzkxYzJWRmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENGdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2IyNU5iM1Z6WlV4bFlYWmxQem9nS0hzZ1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErSUgwcElEMCtJSFp2YVdRc1hHNGdJRzl1Vkc5MVkyZy9PaUFvZTF4dUlDQWdJR1YyWlc1ME9seHVJQ0FnSUNBZ2ZDQlRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBseHVJQ0FnSUNBZ2ZDQlRlVzUwYUdWMGFXTkxaWGxpYjJGeVpFVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQaXhjYmlBZ2ZTa2dQVDRnZG05cFpDeGNiaUFnY205MWJtUnBibWMvT2lCU2IzVnVaR2x1Wnl4Y2JueDlPMXh1WEc1amIyNXpkQ0JUVUVGRFJWOURTRUZTWDBOUFJFVWdQU0F6TWp0Y2JtTnZibk4wSUVWT1ZFVlNYME5JUVZKZlEwOUVSU0E5SURFek8xeHVYRzVqYjI1emRDQlNiM1Z1WkdsdVoxQnliM0JVZVhCbElEMGdVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGdGNiaUFnTUN4Y2JpQWdNU3hjYmlBZ01peGNiaUFnTXl4Y2JpQWdOQ3hjYmlBZ05TeGNiaUFnTml4Y2JpQWdOeXhjYmlBZ09DeGNiaUFnSjJOcGNtTnNaU2NzWEc0Z0lDZHdhV3hzSnl4Y2JsMHBPMXh1WEc1amIyNXpkQ0JuWlhSU2IzVnVaR2x1WjFOMGVXeGxJRDBnS0hJNklGSnZkVzVrYVc1bktUb2dVM1I1YkdVZ1BUNGdlMXh1SUNCcFppQW9kSGx3Wlc5bUlISWdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnY21WMGRYSnVJR0pwYm1Rb2NtRnVaMlVvSjNKdmRXNWthVzVuSnlrc0lHSnZjbVJsY25NcEtISXBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tISWdQVDA5SUNkamFYSmpiR1VuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIxRGJHRnpjMDVoYldVb1ltOXlaR1Z5Y3k1amFYSmpiR1VwTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSElnUFQwOUlDZHdhV3hzSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtY205dFEyeGhjM05PWVcxbEtHSnZjbVJsY25NdWNHbHNiQ2s3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYVdSbGJuUnBkSGtvS1R0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGUnZkV05vWVdKc1pTQmxlSFJsYm1SeklGSmxZV04wTGtOdmJYQnZibVZ1ZER4UWNtOXdjejRnZTF4dUlDQnpkR0YwYVdNZ2NISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHTm9hV3hrY21WdU9pQlFjbTl3Vkhsd1pYTXVibTlrWlN4Y2JpQWdJQ0JtZFd4c1NHVnBaMmgwT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQm1kV3hzVjJsa2RHZzZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUcxdmRYTmxRM1Z5YzI5eU9pQlFjbTl3Vkhsd1pYTXViMjVsVDJZb1cxeHVJQ0FnSUNBZ0oyTnZjSGtuTEZ4dUlDQWdJQ0FnSjJkeVlXSW5MRnh1SUNBZ0lDQWdKMmR5WVdKaWFXNW5KeXhjYmlBZ0lDQWdJQ2R0YjNabEp5eGNiaUFnSUNBZ0lDZHViMFJ5YjNBbkxGeHVJQ0FnSUNBZ0ozQnZhVzUwWlhJbkxGeHVJQ0FnSUNBZ0ozcHZiMjFKYmljc1hHNGdJQ0FnSUNBbmVtOXZiVTkxZENjc1hHNGdJQ0FnWFNrc1hHNGdJQ0FnYjI1Q2JIVnlPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJrWnZZM1Z6T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQnZibFJ2ZFdOb09pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmsxdmRYTmxSVzUwWlhJNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1VFc5MWMyVk1aV0YyWlRvZ1VISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdjbTkxYm1ScGJtYzZJRkp2ZFc1a2FXNW5VSEp2Y0ZSNWNHVXNYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxTMlY1VUhKbGMzTWdQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMHRsZVdKdllYSmtSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCdmJsUnZkV05vSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lDOHZJRU5vWldOcklIUnZJSE5sWlNCcFppQnpjR0ZqWlNCdmNpQmxiblJsY2lCM1pYSmxJSEJ5WlhOelpXUmNiaUFnSUNCcFppQW9YRzRnSUNBZ0lDQnZibFJ2ZFdOb0lDWW1YRzRnSUNBZ0lDQW9aWFpsYm5RdVkyaGhja052WkdVZ1BUMDlJRk5RUVVORlgwTklRVkpmUTA5RVJTQjhmQ0JsZG1WdWRDNWphR0Z5UTI5a1pTQTlQVDBnUlU1VVJWSmZRMGhCVWw5RFQwUkZLVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdMeThnVUhKbGRtVnVkQ0IwYUdVZ1pHVm1ZWFZzZENCaFkzUnBiMjRnZEc4Z2MzUnZjQ0J6WTNKdmJHeHBibWNnZDJobGJpQnpjR0ZqWlNCcGN5QndjbVZ6YzJWa1hHNGdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdiMjVVYjNWamFDaDdJR1YyWlc1MElIMHBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkNiSFZ5SUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdOR2IyTjFjMFYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNUNiSFZ5SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2h2YmtKc2RYSXBJSHRjYmlBZ0lDQWdJRzl1UW14MWNpaDdJR1YyWlc1MElIMHBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVkdiMk4xY3lBOUlDaGxkbVZ1ZERvZ1UzbHVkR2hsZEdsalJtOWpkWE5GZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVSbTlqZFhNZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0c5dVJtOWpkWE1wSUh0Y2JpQWdJQ0FnSUc5dVJtOWpkWE1vZXlCbGRtVnVkQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2FHRnVaR3hsVFc5MWMyVkZiblJsY2lBOUlDaGxkbVZ1ZERvZ1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVUVzkxYzJWRmJuUmxjaUI5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCcFppQW9iMjVOYjNWelpVVnVkR1Z5S1NCN1hHNGdJQ0FnSUNCdmJrMXZkWE5sUlc1MFpYSW9leUJsZG1WdWRDQjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxUVzkxYzJWTVpXRjJaU0E5SUNobGRtVnVkRG9nVTNsdWRHaGxkR2xqVFc5MWMyVkZkbVZ1ZER4SVZFMU1SR2wyUld4bGJXVnVkRDRwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVRXOTFjMlZNWldGMlpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JwWmlBb2IyNU5iM1Z6WlV4bFlYWmxLU0I3WEc0Z0lDQWdJQ0J2YmsxdmRYTmxUR1ZoZG1Vb2V5QmxkbVZ1ZENCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFEyeHBZMnNnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnZXlCdmJsUnZkV05vSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2h2YmxSdmRXTm9LU0I3WEc0Z0lDQWdJQ0J2YmxSdmRXTm9LSHNnWlhabGJuUWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdYRzRnSUNBZ0lDQmphR2xzWkhKbGJpeGNiaUFnSUNBZ0lHWjFiR3hYYVdSMGFDQTlJSFJ5ZFdVc1hHNGdJQ0FnSUNCbWRXeHNTR1ZwWjJoMExGeHVJQ0FnSUNBZ2JXOTFjMlZEZFhKemIzSWdQU0FuY0c5cGJuUmxjaWNzWEc0Z0lDQWdJQ0J5YjNWdVpHbHVaeUE5SURBc1hHNGdJQ0FnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQmpiMjV6ZENCamJHRnpjMlZ6SUQwZ1kyeGhjM051WVcxbGN5aGNiaUFnSUNBZ0lITjBlV3hsY3k1MGIzVmphR0ZpYkdVc1hHNGdJQ0FnSUNCemRIbHNaWE5iYlc5MWMyVkRkWEp6YjNKZExGeHVJQ0FnSUNBZ2RHOVFjbTl3Y3loblpYUlNiM1Z1WkdsdVoxTjBlV3hsS0hKdmRXNWthVzVuS1NrdVkyeGhjM05PWVcxbExGeHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQmJjM1I1YkdWekxtWjFiR3hJWldsbmFIUmRPaUJtZFd4c1NHVnBaMmgwTEZ4dUlDQWdJQ0FnSUNCYmMzUjViR1Z6TG1aMWJHeFhhV1IwYUYwNklHWjFiR3hYYVdSMGFDeGNiaUFnSUNBZ0lIMWNiaUFnSUNBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMyVnpmVnh1SUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHQwYUdsekxtaGhibVJzWlVOc2FXTnJmVnh1SUNBZ0lDQWdJQ0J2YmtKc2RYSTllM1JvYVhNdWFHRnVaR3hsUW14MWNuMWNiaUFnSUNBZ0lDQWdiMjVHYjJOMWN6MTdkR2hwY3k1b1lXNWtiR1ZHYjJOMWMzMWNiaUFnSUNBZ0lDQWdiMjVOYjNWelpVVnVkR1Z5UFh0MGFHbHpMbWhoYm1Sc1pVMXZkWE5sUlc1MFpYSjlYRzRnSUNBZ0lDQWdJRzl1VFc5MWMyVk1aV0YyWlQxN2RHaHBjeTVvWVc1a2JHVk5iM1Z6WlV4bFlYWmxmVnh1SUNBZ0lDQWdJQ0J2Ymt0bGVWQnlaWE56UFh0MGFHbHpMbWhoYm1Sc1pVdGxlVkJ5WlhOemZWeHVJQ0FnSUNBZ0lDQnliMnhsUFZ3aVluVjBkRzl1WENKY2JpQWdJQ0FnSUNBZ2RHRmlTVzVrWlhnOVhDSXdYQ0pjYmlBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0tUdGNiaUFnZlZ4dWZWeHVJaXdpTHk4Z1FHWnNiM2NnYzNSeWFXTjBYRzVwYlhCdmNuUWdLaUJoY3lCU1pXRmpkQ0JtY205dElDZHlaV0ZqZENjN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHZRbTk0TG1wekp6dGNibWx0Y0c5eWRDQkpZMjl1SUdaeWIyMGdKeTR2U1dOdmJpNXFjeWM3WEc1cGJYQnZjblFnVkdGaWJHVklaV0ZrWlhKRFpXeHNJR1p5YjIwZ0p5NHZWR0ZpYkdWSVpXRmtaWEpEWld4c0xtcHpKenRjYm1sdGNHOXlkQ0JVYjNWamFHRmliR1VnWm5KdmJTQW5MaTlVYjNWamFHRmliR1V1YW5Nbk8xeHVYRzUwZVhCbElGQnliM0J6SUQwZ2UzeGNiaUFnWTJocGJHUnlaVzQ2SUZKbFlXTjBMazV2WkdVc1hHNGdJR052YkZOd1lXNC9PaUJ1ZFcxaVpYSXNYRzRnSUc5dVUyOXlkRU5vWVc1blpUb2dLSHRjYmlBZ0lDQmxkbVZ1ZERwY2JpQWdJQ0FnSUh3Z1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ1Y2JpQWdJQ0FnSUh3Z1UzbHVkR2hsZEdsalMyVjVZbTloY21SRmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENHNYRzRnSUgwcElEMCtJSFp2YVdRc1hHNGdJSEp2ZDFOd1lXNC9PaUJ1ZFcxaVpYSXNYRzRnSUhOamIzQmxQem9nSjJOdmJDY2dmQ0FuWTI5c1ozSnZkWEFuSUh3Z0ozSnZkeWNnZkNBbmNtOTNaM0p2ZFhBbkxGeHVJQ0J6YjNKMFQzSmtaWEk2SUNkaGMyTW5JSHdnSjJSbGMyTW5MRnh1SUNCemRHRjBkWE02SUNkaFkzUnBkbVVuSUh3Z0oybHVZV04wYVhabEp5eGNibng5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCVVlXSnNaVk52Y25SaFlteGxTR1ZoWkdWeVEyVnNiQ2h3Y205d2N6b2dVSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHTm9hV3hrY21WdUxGeHVJQ0FnSUdOdmJGTndZVzRzWEc0Z0lDQWdjMk52Y0dVc1hHNGdJQ0FnY205M1UzQmhiaXhjYmlBZ0lDQnpkR0YwZFhNc1hHNGdJQ0FnYzI5eWRFOXlaR1Z5TEZ4dUlDQWdJRzl1VTI5eWRFTm9ZVzVuWlN4Y2JpQWdmU0E5SUhCeWIzQnpPMXh1WEc0Z0lHTnZibk4wSUZ0cGMwWnZZM1Z6WldRc0lITmxkRVp2WTNWelpXUmRJRDBnVW1WaFkzUXVkWE5sVTNSaGRHVW9abUZzYzJVcE8xeHVJQ0JqYjI1emRDQmJhWE5JYjNabGNtVmtMQ0J6WlhSSWIzWmxjbVZrWFNBOUlGSmxZV04wTG5WelpWTjBZWFJsS0daaGJITmxLVHRjYmx4dUlDQmpiMjV6ZENCemFHOTFiR1JUYUc5M1NXTnZiaUE5SUhOMFlYUjFjeUE5UFQwZ0oyRmpkR2wyWlNjZ2ZId2dhWE5JYjNabGNtVmtJSHg4SUdselJtOWpkWE5sWkR0Y2JpQWdZMjl1YzNRZ2RtbHphV0pwYkdsMGVTQTlJSE5vYjNWc1pGTm9iM2RKWTI5dUlEOGdKM1pwYzJsaWJHVW5JRG9nSjJocFpHUmxiaWM3WEc1Y2JpQWdjbVYwZFhKdUlDaGNiaUFnSUNBOFZHRmliR1ZJWldGa1pYSkRaV3hzSUdOdmJGTndZVzQ5ZTJOdmJGTndZVzU5SUhKdmQxTndZVzQ5ZTNKdmQxTndZVzU5SUhOamIzQmxQWHR6WTI5d1pYMCtYRzRnSUNBZ0lDQThWRzkxWTJoaFlteGxYRzRnSUNBZ0lDQWdJRzl1Vkc5MVkyZzllMjl1VTI5eWRFTm9ZVzVuWlgxY2JpQWdJQ0FnSUNBZ2IyNU5iM1Z6WlVWdWRHVnlQWHNvS1NBOVBpQnpaWFJJYjNabGNtVmtLSFJ5ZFdVcGZWeHVJQ0FnSUNBZ0lDQnZiazF2ZFhObFRHVmhkbVU5ZXlncElEMCtJSE5sZEVodmRtVnlaV1FvWm1Gc2MyVXBmVnh1SUNBZ0lDQWdJQ0J2YmtadlkzVnpQWHNvS1NBOVBpQnpaWFJHYjJOMWMyVmtLSFJ5ZFdVcGZWeHVJQ0FnSUNBZ0lDQnZia0pzZFhJOWV5Z3BJRDArSUhObGRFWnZZM1Z6WldRb1ptRnNjMlVwZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBOFFtOTRJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSStYRzRnSUNBZ0lDQWdJQ0FnZTJOb2FXeGtjbVZ1ZlZ4dUlDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWhjbWRwYmt4bFpuUTlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZVzVuWlhKdmRYTnNlVk5sZEVsdWJHbHVaVk4wZVd4bFBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOWZjM1I1YkdVNklIc2dkbWx6YVdKcGJHbDBlU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4U1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM05wWW1sc2FYUjVUR0ZpWld3OVhDSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBZMjl1UFh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRjBkWE1nUFQwOUlDZGhZM1JwZG1VbklDWW1JSE52Y25SUGNtUmxjaUE5UFQwZ0oyRnpZeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z0ozTnZjblF0WVhOalpXNWthVzVuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQW5jMjl5ZEMxa1pYTmpaVzVrYVc1bkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQWHR6ZEdGMGRYTWdQVDA5SUNkaFkzUnBkbVVuSUQ4Z0oyUmhjbXRIY21GNUp5QTZJQ2RuY21GNUozMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnUEM5VWIzVmphR0ZpYkdVK1hHNGdJQ0FnUEM5VVlXSnNaVWhsWVdSbGNrTmxiR3crWEc0Z0lDazdYRzU5WEc0aUxDSXZMeUJBWm14dmR5QnpkSEpwWTNSY2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUhOMGVXeGxjeUJtY205dElDY3VMMVJoWW14bExtTnpjeWM3WEc1cGJYQnZjblFnVkdGaWJHVkRaV3hzSUdaeWIyMGdKeTR2VkdGaWJHVkRaV3hzTG1wekp6dGNibWx0Y0c5eWRDQlVZV0pzWlVKdlpIa2dabkp2YlNBbkxpOVVZV0pzWlVKdlpIa3Vhbk1uTzF4dWFXMXdiM0owSUZSaFlteGxSbTl2ZEdWeUlHWnliMjBnSnk0dlZHRmliR1ZHYjI5MFpYSXVhbk1uTzF4dWFXMXdiM0owSUZSaFlteGxTR1ZoWkdWeUlHWnliMjBnSnk0dlZHRmliR1ZJWldGa1pYSXVhbk1uTzF4dWFXMXdiM0owSUZSaFlteGxTR1ZoWkdWeVEyVnNiQ0JtY205dElDY3VMMVJoWW14bFNHVmhaR1Z5UTJWc2JDNXFjeWM3WEc1cGJYQnZjblFnVkdGaWJHVlNiM2NnWm5KdmJTQW5MaTlVWVdKc1pWSnZkeTVxY3ljN1hHNXBiWEJ2Y25RZ1ZHRmliR1ZUYjNKMFlXSnNaVWhsWVdSbGNrTmxiR3dnWm5KdmJTQW5MaTlVWVdKc1pWTnZjblJoWW14bFNHVmhaR1Z5UTJWc2JDNXFjeWM3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmphR2xzWkhKbGJqb2dVbVZoWTNRdVRtOWtaU3hjYmlBZ1ltOXlaR1Z5VTJsNlpUODZJQ2R6YlNjZ2ZDQW5ibTl1WlNjc1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnVkdGaWJHVW9jSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJR052Ym5OMElIc2dZbTl5WkdWeVUybDZaU3dnWTJocGJHUnlaVzRnZlNBOUlIQnliM0J6TzF4dVhHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ1BFSnZlRnh1SUNBZ0lDQWdiM1psY21ac2IzYzlYQ0poZFhSdlhDSmNiaUFnSUNBZ0lIc3VMaTRvWW05eVpHVnlVMmw2WlNBOVBUMGdKM050SnlBL0lIc2dZbTl5WkdWeVUybDZaVG9nSjNOdEp5d2djbTkxYm1ScGJtYzZJREVnZlNBNklIdDlLWDFjYmlBZ0lDQStYRzRnSUNBZ0lDQThkR0ZpYkdVZ1kyeGhjM05PWVcxbFBYdHpkSGxzWlhNdWRHRmliR1Y5UG50amFHbHNaSEpsYm4wOEwzUmhZbXhsUGx4dUlDQWdJRHd2UW05NFBseHVJQ0FwTzF4dWZWeHVYRzVVWVdKc1pTNUNiMlI1SUQwZ1ZHRmliR1ZDYjJSNU8xeHVYRzVVWVdKc1pTNURaV3hzSUQwZ1ZHRmliR1ZEWld4c08xeHVYRzVVWVdKc1pTNUdiMjkwWlhJZ1BTQlVZV0pzWlVadmIzUmxjanRjYmx4dVZHRmliR1V1U0dWaFpHVnlJRDBnVkdGaWJHVklaV0ZrWlhJN1hHNWNibFJoWW14bExraGxZV1JsY2tObGJHd2dQU0JVWVdKc1pVaGxZV1JsY2tObGJHdzdYRzVjYmxSaFlteGxMbEp2ZHlBOUlGUmhZbXhsVW05M08xeHVYRzVVWVdKc1pTNVRiM0owWVdKc1pVaGxZV1JsY2tObGJHd2dQU0JVWVdKc1pWTnZjblJoWW14bFNHVmhaR1Z5UTJWc2JEdGNiaUlzSWk4dklFQm1iRzkzSUhOMGNtbGpkRnh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQmpiR0Z6YzI1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRlJsZUhRZ1puSnZiU0FuTGk5VVpYaDBMbXB6Snp0Y2JtbHRjRzl5ZENCemRIbHNaWE1nWm5KdmJTQW5MaTlVWVdKekxtTnpjeWM3WEc1cGJYQnZjblFnYkdGNWIzVjBJR1p5YjIwZ0p5NHZUR0Y1YjNWMExtTnpjeWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUZSaFluTW9lMXh1SUNCaFkzUnBkbVZVWVdKSmJtUmxlQ3hjYmlBZ2IyNURhR0Z1WjJVc1hHNGdJSE5wZW1VZ1BTQW5iV1FuTEZ4dUlDQjBZV0p6TEZ4dUlDQjNjbUZ3TEZ4dWZUb2dlM3hjYmlBZ1lXTjBhWFpsVkdGaVNXNWtaWGc2SUc1MWJXSmxjaXhjYmlBZ2IyNURhR0Z1WjJVNklDaDdYRzRnSUNBZ1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFBpeGNiaUFnSUNCaFkzUnBkbVZVWVdKSmJtUmxlRG9nYm5WdFltVnlMRnh1SUNCOUtTQTlQaUIyYjJsa0xGeHVJQ0J6YVhwbFB6b2dKMjFrSnlCOElDZHNaeWNzWEc0Z0lIUmhZbk02SUVGeWNtRjVQSHQ4WEc0Z0lDQWdkR1Y0ZERvZ1VtVmhZM1F1VG05a1pTeGNiaUFnSUNCb2NtVm1PaUJ6ZEhKcGJtY3NYRzRnSUh4OVBpeGNiaUFnZDNKaGNEODZJR0p2YjJ4bFlXNHNYRzU4ZlNrZ2UxeHVJQ0JqYjI1emRDQm9ZVzVrYkdWVVlXSkRiR2xqYXlBOUlDaHBPaUJ1ZFcxaVpYSXNJR1U2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFBpa2dQVDVjYmlBZ0lDQnZia05vWVc1blpTaDdJR0ZqZEdsMlpWUmhZa2x1WkdWNE9pQnBMQ0JsZG1WdWREb2daU0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lEeGthWFpjYmlBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTnVZVzFsY3loY2JpQWdJQ0FnSUNBZ2MzUjViR1Z6TGxSaFluTXNYRzRnSUNBZ0lDQWdJSGR5WVhBZ0ppWWdiR0Y1YjNWMExtWnNaWGhYY21Gd0xGeHVJQ0FnSUNBZ0lDQnphWHBsSUQwOVBTQW5iV1FuSUQ4Z2JHRjViM1YwTG0xbFpHbDFiU0E2SUd4aGVXOTFkQzVzWVhKblpWeHVJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lISnZiR1U5WENKMFlXSnNhWE4wWENKY2JpQWdJQ0ErWEc0Z0lDQWdJQ0I3ZEdGaWN5NXRZWEFvS0hzZ2RHVjRkQ3dnYUhKbFppQjlMQ0JwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHpRV04wYVhabElEMGdhU0E5UFQwZ1lXTjBhWFpsVkdGaVNXNWtaWGc3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR056SUQwZ1kyeGhjM051WVcxbGN5aHpkSGxzWlhNdWRHRmlMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ1czTjBlV3hsY3k1MFlXSkpjMDV2ZEVGamRHbDJaVjA2SUNGcGMwRmpkR2wyWlN4Y2JpQWdJQ0FnSUNBZ0lDQmJjM1I1YkdWekxuUmhZa2x6UVdOMGFYWmxYVG9nYVhOQlkzUnBkbVVzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhoWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhjbWxoTFhObGJHVmpkR1ZrUFh0cGMwRmpkR2wyWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTNOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JvY21WbVBYdG9jbVZtZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1UFh0Z0pIdHBmU1I3YUhKbFpuMWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN0tHVTZJRk41Ym5Sb1pYUnBZMDF2ZFhObFJYWmxiblE4UGlrZ1BUNGdhR0Z1Wkd4bFZHRmlRMnhwWTJzb2FTd2daU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnliMnhsUFZ3aWRHRmlYQ0pjYmlBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRDQmpiMnh2Y2oxN2FYTkJZM1JwZG1VZ1B5QW5kMmhwZEdVbklEb2dKMlJoY210SGNtRjVKMzBnZDJWcFoyaDBQVndpWW05c1pGd2lQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjdkR1Y0ZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2VkdWNGRENWNiaUFnSUNBZ0lDQWdJQ0E4TDJFK1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlLWDFjYmlBZ0lDQThMMlJwZGo1Y2JpQWdLVHRjYm4xY2JseHVWR0ZpY3k1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUdGamRHbDJaVlJoWWtsdVpHVjRPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMbWx6VW1WeGRXbHlaV1FzWEc0Z0lIUmhZbk02SUZCeWIzQlVlWEJsY3k1aGNuSmhlVTltS0Z4dUlDQWdJRkJ5YjNCVWVYQmxjeTVsZUdGamRDaDdYRzRnSUNBZ0lDQjBaWGgwT2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ0lDQWdJR2h5WldZNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnZlNsY2JpQWdLUzVwYzFKbGNYVnBjbVZrTEZ4dUlDQnZia05vWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnZDNKaGNEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNTlPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1Y2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnWTJ4aGMzTnVZVzFsY3lCbWNtOXRJQ2RqYkdGemMyNWhiV1Z6Snp0Y2JtbHRjRzl5ZENCbWIzSnRSV3hsYldWdWRDQm1jbTl0SUNjdUwwWnZjbTFGYkdWdFpXNTBMbU56Y3ljN1hHNXBiWEJ2Y25RZ1JtOXliVVZ5Y205eVRXVnpjMkZuWlNCbWNtOXRJQ2N1TDBadmNtMUZjbkp2Y2sxbGMzTmhaMlV1YW5Nbk8xeHVhVzF3YjNKMElFWnZjbTFJWld4d1pYSlVaWGgwSUdaeWIyMGdKeTR2Um05eWJVaGxiSEJsY2xSbGVIUXVhbk1uTzF4dWFXMXdiM0owSUVadmNtMU1ZV0psYkNCbWNtOXRJQ2N1TDBadmNtMU1ZV0psYkM1cWN5YzdYRzVwYlhCdmNuUWdjM1I1YkdWeklHWnliMjBnSnk0dlZHVjRkRUZ5WldFdVkzTnpKenRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHVnljbTl5VFdWemMyRm5aVDg2SUhOMGNtbHVaeXhjYmlBZ1pHbHpZV0pzWldRL09pQmliMjlzWldGdUxGeHVJQ0JvWVhORmNuSnZjajg2SUdKdmIyeGxZVzRzWEc0Z0lHaGxiSEJsY2xSbGVIUS9PaUJ6ZEhKcGJtY3NYRzRnSUdsa09pQnpkSEpwYm1jc1hHNGdJR3hoWW1Wc1B6b2djM1J5YVc1bkxGeHVJQ0J1WVcxbFB6b2djM1J5YVc1bkxGeHVJQ0J2YmtKc2RYSS9PaUFvZTF4dUlDQWdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkdiMk4xYzBWMlpXNTBQRWhVVFV4VVpYaDBRWEpsWVVWc1pXMWxiblErTEZ4dUlDQWdJSFpoYkhWbE9pQnpkSEpwYm1jc1hHNGdJSDBwSUQwK0lIWnZhV1FzWEc0Z0lHOXVRMmhoYm1kbE9pQW9lMXh1SUNBZ0lHVjJaVzUwT2lCVGVXNTBhR1YwYVdOSmJuQjFkRVYyWlc1MFBFaFVUVXhVWlhoMFFYSmxZVVZzWlcxbGJuUStMRnh1SUNBZ0lIWmhiSFZsT2lCemRISnBibWNzWEc0Z0lIMHBJRDArSUhadmFXUXNYRzRnSUc5dVJtOWpkWE0vT2lBb2UxeHVJQ0FnSUdWMlpXNTBPaUJUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwUEVoVVRVeFVaWGgwUVhKbFlVVnNaVzFsYm5RK0xGeHVJQ0FnSUhaaGJIVmxPaUJ6ZEhKcGJtY3NYRzRnSUgwcElEMCtJSFp2YVdRc1hHNGdJRzl1UzJWNVJHOTNiajg2SUNoN1hHNGdJQ0FnWlhabGJuUTZJRk41Ym5Sb1pYUnBZMHRsZVdKdllYSmtSWFpsYm5ROFNGUk5URlJsZUhSQmNtVmhSV3hsYldWdWRENHNYRzRnSUNBZ2RtRnNkV1U2SUhOMGNtbHVaeXhjYmlBZ2ZTa2dQVDRnZG05cFpDeGNiaUFnY0d4aFkyVm9iMnhrWlhJL09pQnpkSEpwYm1jc1hHNGdJSEp2ZDNNL09pQnVkVzFpWlhJZ0x5b2daR1ZtWVhWc2REb2dNeUFxTHl4Y2JpQWdkbUZzZFdVL09pQnpkSEpwYm1jc1hHNThmVHRjYmx4dWRIbHdaU0JUZEdGMFpTQTlJSHQ4WEc0Z0lHWnZZM1Z6WldRNklHSnZiMnhsWVc0c1hHNThmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdWR1Y0ZEVGeVpXRWdaWGgwWlc1a2N5QlNaV0ZqZEM1RGIyMXdiMjVsYm5ROFVISnZjSE1zSUZOMFlYUmxQaUI3WEc0Z0lDOHZJRTVQVkVVNklIZGxJR05oYm01dmRDQnRiM1psSUhSdklGSmxZV04wSUdOeVpXRjBaVkpsWmlCMWJuUnBiQ0IzWlNCaGRXUnBkQ0IxYzJWeklHOW1JR05oYkd4emFYUmxjMXh1SUNBdkx5QjBhR0YwSUhKbFlXTm9JR2x1ZEc4Z2RHaHBjeUJqYjIxd2IyNWxiblFnWVc1a0lIVnpaU0IwYUdseklHbHVjM1JoYm1ObElIWmhjbWxoWW14bFhHNGdJSFJsZUhSaGNtVmhPaUEvU0ZSTlRFVnNaVzFsYm5RN1hHNWNiaUFnYzNSaGRHbGpJSEJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JrYVhOaFlteGxaRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ1pYSnliM0pOWlhOellXZGxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHaGhjMFZ5Y205eU9pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JvWld4d1pYSlVaWGgwT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR2xrT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYm1GdFpUb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCc1lXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnZia0pzZFhJNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1UTJoaGJtZGxPaUJRY205d1ZIbHdaWE11Wm5WdVl5NXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHOXVSbTlqZFhNNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1UzJWNVJHOTNiam9nVUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ2NHeGhZMlZvYjJ4a1pYSTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2NtOTNjem9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQjJZV3gxWlRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwYVdNZ1pHVm1ZWFZzZEZCeWIzQnpJRDBnZTF4dUlDQWdJR1JwYzJGaWJHVmtPaUJtWVd4elpTeGNiaUFnSUNCb1lYTkZjbkp2Y2pvZ1ptRnNjMlVzWEc0Z0lDQWdjbTkzY3pvZ015eGNiaUFnZlR0Y2JseHVJQ0J6ZEdGMFpTQTlJSHRjYmlBZ0lDQm1iMk4xYzJWa09pQm1ZV3h6WlN4Y2JpQWdmVHRjYmx4dUlDQnpaWFJVWlhoMFFYSmxZVkpsWmlBOUlDaHlaV1k2SUQ5SVZFMU1WR1Y0ZEVGeVpXRkZiR1Z0Wlc1MEtTQTlQaUI3WEc0Z0lDQWdkR2hwY3k1MFpYaDBZWEpsWVNBOUlISmxaanRjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZEYUdGdVoyVWdQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMGx1Y0hWMFJYWmxiblE4U0ZSTlRGUmxlSFJCY21WaFJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVRMmhoYm1kbElIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJRzl1UTJoaGJtZGxLSHNnWlhabGJuUXNJSFpoYkhWbE9pQmxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBMblpoYkhWbElIMHBPMXh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVUpzZFhJZ1BTQW9aWFpsYm5RNklGTjViblJvWlhScFkwWnZZM1Z6UlhabGJuUThTRlJOVEZSbGVIUkJjbVZoUld4bGJXVnVkRDRwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVFteDFjaUI5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCcFppQW9iMjVDYkhWeUtTQjdYRzRnSUNBZ0lDQnZia0pzZFhJb2V5QmxkbVZ1ZEN3Z2RtRnNkV1U2SUdWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhRdWRtRnNkV1VnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lHaGhibVJzWlVadlkzVnpJRDBnS0dWMlpXNTBPaUJUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwUEVoVVRVeFVaWGgwUVhKbFlVVnNaVzFsYm5RK0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ2V5QnZia1p2WTNWeklIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR2xtSUNodmJrWnZZM1Z6S1NCN1hHNGdJQ0FnSUNCdmJrWnZZM1Z6S0hzZ1pYWmxiblFzSUhaaGJIVmxPaUJsZG1WdWRDNWpkWEp5Wlc1MFZHRnlaMlYwTG5aaGJIVmxJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCb1lXNWtiR1ZMWlhsRWIzZHVJRDBnS0dWMlpXNTBPaUJUZVc1MGFHVjBhV05MWlhsaWIyRnlaRVYyWlc1MFBFaFVUVXhVWlhoMFFYSmxZVVZzWlcxbGJuUStLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJ2Ymt0bGVVUnZkMjRnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ2FXWWdLRzl1UzJWNVJHOTNiaWtnZTF4dUlDQWdJQ0FnYjI1TFpYbEViM2R1S0hzZ1pYWmxiblFzSUhaaGJIVmxPaUJsZG1WdWRDNWpkWEp5Wlc1MFZHRnlaMlYwTG5aaGJIVmxJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdlMXh1SUNBZ0lDQWdaR2x6WVdKc1pXUXNYRzRnSUNBZ0lDQmxjbkp2Y2sxbGMzTmhaMlVzWEc0Z0lDQWdJQ0JvWVhORmNuSnZjaXhjYmlBZ0lDQWdJR2hsYkhCbGNsUmxlSFFzWEc0Z0lDQWdJQ0JwWkN4Y2JpQWdJQ0FnSUd4aFltVnNMRnh1SUNBZ0lDQWdibUZ0WlN4Y2JpQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeUxGeHVJQ0FnSUNBZ2NtOTNjeXhjYmlBZ0lDQWdJSFpoYkhWbExGeHVJQ0FnSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdZMjl1YzNRZ2V5Qm1iMk4xYzJWa0lIMGdQU0IwYUdsekxuTjBZWFJsTzF4dVhHNGdJQ0FnWTI5dWMzUWdZMnhoYzNObGN5QTlJR05zWVhOemJtRnRaWE1vWEc0Z0lDQWdJQ0J6ZEhsc1pYTXVkR1Y0ZEVGeVpXRXNYRzRnSUNBZ0lDQm1iM0p0Uld4bGJXVnVkQzVpWVhObExGeHVJQ0FnSUNBZ1pHbHpZV0pzWldRZ1B5Qm1iM0p0Uld4bGJXVnVkQzVrYVhOaFlteGxaQ0E2SUdadmNtMUZiR1Z0Wlc1MExtVnVZV0pzWldRc1hHNGdJQ0FnSUNCb1lYTkZjbkp2Y2lCOGZDQmxjbkp2Y2sxbGMzTmhaMlVnUHlCbWIzSnRSV3hsYldWdWRDNWxjbkp2Y21Wa0lEb2dabTl5YlVWc1pXMWxiblF1Ym05eWJXRnNYRzRnSUNBZ0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOGMzQmhiajVjYmlBZ0lDQWdJQ0FnZTJ4aFltVnNJQ1ltSUR4R2IzSnRUR0ZpWld3Z2FXUTllMmxrZlNCc1lXSmxiRDE3YkdGaVpXeDlJQzgrZlZ4dUlDQWdJQ0FnSUNBOGRHVjRkR0Z5WldGY2JpQWdJQ0FnSUNBZ0lDQmhjbWxoTFdSbGMyTnlhV0psWkdKNVBYdGxjbkp2Y2sxbGMzTmhaMlVnSmlZZ1ptOWpkWE5sWkNBL0lHQWtlMmxrZlMxbGNuSnZjbUFnT2lCdWRXeHNmVnh1SUNBZ0lDQWdJQ0FnSUdGeWFXRXRhVzUyWVd4cFpEMTdaWEp5YjNKTlpYTnpZV2RsSUh4OElHaGhjMFZ5Y205eUlEOGdKM1J5ZFdVbklEb2dKMlpoYkhObEozMWNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpaWE45WEc0Z0lDQWdJQ0FnSUNBZ1pHbHpZV0pzWldROWUyUnBjMkZpYkdWa2ZWeHVJQ0FnSUNBZ0lDQWdJR2xrUFh0cFpIMWNiaUFnSUNBZ0lDQWdJQ0J1WVcxbFBYdHVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRbXgxY2oxN2RHaHBjeTVvWVc1a2JHVkNiSFZ5ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdDBhR2x6TG1oaGJtUnNaVU5vWVc1blpYMWNiaUFnSUNBZ0lDQWdJQ0J2YmtadlkzVnpQWHQwYUdsekxtaGhibVJzWlVadlkzVnpmVnh1SUNBZ0lDQWdJQ0FnSUc5dVMyVjVSRzkzYmoxN2RHaHBjeTVvWVc1a2JHVkxaWGxFYjNkdWZWeHVJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFh0d2JHRmpaV2h2YkdSbGNuMWNiaUFnSUNBZ0lDQWdJQ0J5WldZOWUzUm9hWE11YzJWMFZHVjRkRUZ5WldGU1pXWjlYRzRnSUNBZ0lDQWdJQ0FnY205M2N6MTdjbTkzYzMxY2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlQxN2RtRnNkV1Y5WEc0Z0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lIdG9aV3h3WlhKVVpYaDBJQ1ltSUNGbGNuSnZjazFsYzNOaFoyVWdQeUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFWnZjbTFJWld4d1pYSlVaWGgwSUhSbGVIUTllMmhsYkhCbGNsUmxlSFI5SUM4K1hHNGdJQ0FnSUNBZ0lDa2dPaUJ1ZFd4c2ZWeHVJQ0FnSUNBZ0lDQjdaWEp5YjNKTlpYTnpZV2RsSUNZbUlEeEdiM0p0UlhKeWIzSk5aWE56WVdkbElHbGtQWHRwWkgwZ2RHVjRkRDE3WlhKeWIzSk5aWE56WVdkbGZTQXZQbjFjYmlBZ0lDQWdJRHd2YzNCaGJqNWNiaUFnSUNBcE8xeHVJQ0I5WEc1OVhHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibWx0Y0c5eWRDQXFJR0Z6SUZKbFlXTjBJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCamJHRnpjMjVoYldWeklHWnliMjBnSjJOc1lYTnpibUZ0WlhNbk8xeHVhVzF3YjNKMElGQnliM0JVZVhCbGN5Qm1jbTl0SUNkd2NtOXdMWFI1Y0dWekp6dGNibWx0Y0c5eWRDQm1iM0p0Uld4bGJXVnVkQ0JtY205dElDY3VMMFp2Y20xRmJHVnRaVzUwTG1OemN5YzdYRzVwYlhCdmNuUWdSbTl5YlVWeWNtOXlUV1Z6YzJGblpTQm1jbTl0SUNjdUwwWnZjbTFGY25KdmNrMWxjM05oWjJVdWFuTW5PMXh1YVcxd2IzSjBJRVp2Y20xSVpXeHdaWEpVWlhoMElHWnliMjBnSnk0dlJtOXliVWhsYkhCbGNsUmxlSFF1YW5Nbk8xeHVhVzF3YjNKMElFWnZjbTFNWVdKbGJDQm1jbTl0SUNjdUwwWnZjbTFNWVdKbGJDNXFjeWM3WEc1cGJYQnZjblFnYkdGNWIzVjBJR1p5YjIwZ0p5NHZUR0Y1YjNWMExtTnpjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZWR1Y0ZEVacFpXeGtMbU56Y3ljN1hHNWNiblI1Y0dVZ1VISnZjSE1nUFNCN2ZGeHVJQ0JoZFhSdlEyOXRjR3hsZEdVL09seHVJQ0FnSUh3Z0oyTjFjbkpsYm5RdGNHRnpjM2R2Y21RblhHNGdJQ0FnZkNBbmJtVjNMWEJoYzNOM2IzSmtKMXh1SUNBZ0lId2dKMjl1SjF4dUlDQWdJSHdnSjI5bVppZGNiaUFnSUNCOElDZDFjMlZ5Ym1GdFpTY3NYRzRnSUdScGMyRmliR1ZrUHpvZ1ltOXZiR1ZoYml4Y2JpQWdaWEp5YjNKTlpYTnpZV2RsUHpvZ2MzUnlhVzVuTEZ4dUlDQm9ZWE5GY25KdmNqODZJR0p2YjJ4bFlXNHNYRzRnSUdobGJIQmxjbFJsZUhRL09pQnpkSEpwYm1jc1hHNGdJR2xrT2lCemRISnBibWNzWEc0Z0lHeGhZbVZzUHpvZ2MzUnlhVzVuTEZ4dUlDQnVZVzFsUHpvZ2MzUnlhVzVuTEZ4dUlDQnZia0pzZFhJL09pQW9lMXh1SUNBZ0lHVjJaVzUwT2lCVGVXNTBhR1YwYVdOR2IyTjFjMFYyWlc1MFBFaFVUVXhKYm5CMWRFVnNaVzFsYm5RK0xGeHVJQ0FnSUhaaGJIVmxPaUJ6ZEhKcGJtY3NYRzRnSUgwcElEMCtJSFp2YVdRc1hHNGdJRzl1UTJoaGJtZGxPaUFvZTF4dUlDQWdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkpibkIxZEVWMlpXNTBQRWhVVFV4SmJuQjFkRVZzWlcxbGJuUStMRnh1SUNBZ0lIWmhiSFZsT2lCemRISnBibWNzWEc0Z0lIMHBJRDArSUhadmFXUXNYRzRnSUc5dVJtOWpkWE0vT2lBb2UxeHVJQ0FnSUdWMlpXNTBPaUJUZVc1MGFHVjBhV05HYjJOMWMwVjJaVzUwUEVoVVRVeEpibkIxZEVWc1pXMWxiblErTEZ4dUlDQWdJSFpoYkhWbE9pQnpkSEpwYm1jc1hHNGdJSDBwSUQwK0lIWnZhV1FzWEc0Z0lHOXVTMlY1Ukc5M2JqODZJQ2g3WEc0Z0lDQWdaWFpsYm5RNklGTjViblJvWlhScFkwdGxlV0p2WVhKa1JYWmxiblE4U0ZSTlRFbHVjSFYwUld4bGJXVnVkRDRzWEc0Z0lDQWdkbUZzZFdVNklITjBjbWx1Wnl4Y2JpQWdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2NHeGhZMlZvYjJ4a1pYSS9PaUJ6ZEhKcGJtY3NYRzRnSUhSNWNHVS9PaUFuWkdGMFpTY2dmQ0FuWlcxaGFXd25JSHdnSjI1MWJXSmxjaWNnZkNBbmNHRnpjM2R2Y21RbklId2dKM1JsZUhRbklId2dKM1Z5YkNjc1hHNGdJSE5wZW1VL09pQW5iV1FuSUh3Z0oyeG5KeXhjYmlBZ2RtRnNkV1UvT2lCemRISnBibWNzWEc1OGZUdGNibHh1ZEhsd1pTQlRkR0YwWlNBOUlIdDhYRzRnSUdadlkzVnpaV1E2SUdKdmIyeGxZVzRzWEc1OGZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdZMnhoYzNNZ1ZHVjRkRVpwWld4a0lHVjRkR1Z1WkhNZ1VtVmhZM1F1UTI5dGNHOXVaVzUwUEZCeWIzQnpMQ0JUZEdGMFpUNGdlMXh1SUNBdkx5Qk9UMVJGT2lCM1pTQmpZVzV1YjNRZ2JXOTJaU0IwYnlCU1pXRmpkQ0JqY21WaGRHVlNaV1lnZFc1MGFXd2dkMlVnWVhWa2FYUWdkWE5sY3lCdlppQmpZV3hzYzJsMFpYTmNiaUFnTHk4Z2RHaGhkQ0J5WldGamFDQnBiblJ2SUhSb2FYTWdZMjl0Y0c5dVpXNTBJR0Z1WkNCMWMyVWdkR2hwY3lCcGJuTjBZVzVqWlNCMllYSnBZV0pzWlZ4dUlDQjBaWGgwWm1sbGJHUTZJRDlJVkUxTVNXNXdkWFJGYkdWdFpXNTBPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1lYVjBiME52YlhCc1pYUmxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XMXh1SUNBZ0lDQWdKMk4xY25KbGJuUXRjR0Z6YzNkdmNtUW5MRnh1SUNBZ0lDQWdKMjVsZHkxd1lYTnpkMjl5WkNjc1hHNGdJQ0FnSUNBbmIyNG5MRnh1SUNBZ0lDQWdKMjltWmljc1hHNGdJQ0FnSUNBbmRYTmxjbTVoYldVbkxGeHVJQ0FnSUYwcExGeHVJQ0FnSUdScGMyRmliR1ZrT2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQmxjbkp2Y2sxbGMzTmhaMlU2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhR0Z6UlhKeWIzSTZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdobGJIQmxjbFJsZUhRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYVdRNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCc1lXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnVZVzFsT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJRzl1UW14MWNqb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjI1RGFHRnVaMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdiMjVHYjJOMWN6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjI1TFpYbEViM2R1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQndiR0ZqWldodmJHUmxjam9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnphWHBsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3lkdFpDY3NJQ2RzWnlkZEtTeGNiaUFnSUNCMGVYQmxPaUJRY205d1ZIbHdaWE11YjI1bFQyWW9XMXh1SUNBZ0lDQWdKMlJoZEdVbkxGeHVJQ0FnSUNBZ0oyVnRZV2xzSnl4Y2JpQWdJQ0FnSUNkdWRXMWlaWEluTEZ4dUlDQWdJQ0FnSjNCaGMzTjNiM0prSnl4Y2JpQWdJQ0FnSUNkMFpYaDBKeXhjYmlBZ0lDQWdJQ2QxY213bkxGeHVJQ0FnSUYwcExGeHVJQ0FnSUhaaGJIVmxPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNCOU8xeHVYRzRnSUhOMFlYUnBZeUJrWldaaGRXeDBVSEp2Y0hNZ1BTQjdYRzRnSUNBZ1pHbHpZV0pzWldRNklHWmhiSE5sTEZ4dUlDQWdJR2hoYzBWeWNtOXlPaUJtWVd4elpTeGNiaUFnSUNCemFYcGxPaUFuYldRbkxGeHVJQ0FnSUhSNWNHVTZJQ2QwWlhoMEp5eGNiaUFnZlR0Y2JseHVJQ0J6ZEdGMFpTQTlJSHRjYmlBZ0lDQm1iMk4xYzJWa09pQm1ZV3h6WlN4Y2JpQWdmVHRjYmx4dUlDQnpaWFJVWlhoMFJtbGxiR1JTWldZZ1BTQW9jbVZtT2lBL1NGUk5URWx1Y0hWMFJXeGxiV1Z1ZENrZ1BUNGdlMXh1SUNBZ0lIUm9hWE11ZEdWNGRHWnBaV3hrSUQwZ2NtVm1PMXh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVU5vWVc1blpTQTlJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpTVzV3ZFhSRmRtVnVkRHhJVkUxTVNXNXdkWFJGYkdWdFpXNTBQaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjI1RGFHRnVaMlVnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ2IyNURhR0Z1WjJVb2V5QmxkbVZ1ZEN3Z2RtRnNkV1U2SUdWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhRdWRtRnNkV1VnZlNrN1hHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFFteDFjaUE5SUNobGRtVnVkRG9nVTNsdWRHaGxkR2xqUm05amRYTkZkbVZ1ZER4SVZFMU1TVzV3ZFhSRmJHVnRaVzUwUGlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNUNiSFZ5SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2h2YmtKc2RYSXBJSHRjYmlBZ0lDQWdJRzl1UW14MWNpaDdJR1YyWlc1MExDQjJZV3gxWlRvZ1pYWmxiblF1WTNWeWNtVnVkRlJoY21kbGRDNTJZV3gxWlNCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFJtOWpkWE1nUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTBadlkzVnpSWFpsYm5ROFNGUk5URWx1Y0hWMFJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVSbTlqZFhNZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc0Z0lDQWdhV1lnS0c5dVJtOWpkWE1wSUh0Y2JpQWdJQ0FnSUc5dVJtOWpkWE1vZXlCbGRtVnVkQ3dnZG1Gc2RXVTZJR1YyWlc1MExtTjFjbkpsYm5SVVlYSm5aWFF1ZG1Gc2RXVWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUdoaGJtUnNaVXRsZVVSdmQyNGdQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMHRsZVdKdllYSmtSWFpsYm5ROFNGUk5URWx1Y0hWMFJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVTMlY1Ukc5M2JpQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JwWmlBb2IyNUxaWGxFYjNkdUtTQjdYRzRnSUNBZ0lDQnZia3RsZVVSdmQyNG9leUJsZG1WdWRDd2dkbUZzZFdVNklHVjJaVzUwTG1OMWNuSmxiblJVWVhKblpYUXVkbUZzZFdVZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCaGRYUnZRMjl0Y0d4bGRHVXNYRzRnSUNBZ0lDQmthWE5oWW14bFpDeGNiaUFnSUNBZ0lHVnljbTl5VFdWemMyRm5aU3hjYmlBZ0lDQWdJR2hoYzBWeWNtOXlMRnh1SUNBZ0lDQWdhR1ZzY0dWeVZHVjRkQ3hjYmlBZ0lDQWdJR2xrTEZ4dUlDQWdJQ0FnYkdGaVpXd3NYRzRnSUNBZ0lDQnVZVzFsTEZ4dUlDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJc1hHNGdJQ0FnSUNCemFYcGxMRnh1SUNBZ0lDQWdkSGx3WlN4Y2JpQWdJQ0FnSUhaaGJIVmxMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnWTI5dWMzUWdleUJtYjJOMWMyVmtJSDBnUFNCMGFHbHpMbk4wWVhSbE8xeHVYRzRnSUNBZ1kyOXVjM1FnWTJ4aGMzTmxjeUE5SUdOc1lYTnpibUZ0WlhNb1hHNGdJQ0FnSUNCemRIbHNaWE11ZEdWNGRFWnBaV3hrTEZ4dUlDQWdJQ0FnWm05eWJVVnNaVzFsYm5RdVltRnpaU3hjYmlBZ0lDQWdJR1JwYzJGaWJHVmtJRDhnWm05eWJVVnNaVzFsYm5RdVpHbHpZV0pzWldRZ09pQm1iM0p0Uld4bGJXVnVkQzVsYm1GaWJHVmtMRnh1SUNBZ0lDQWdhR0Z6UlhKeWIzSWdmSHdnWlhKeWIzSk5aWE56WVdkbElEOGdabTl5YlVWc1pXMWxiblF1WlhKeWIzSmxaQ0E2SUdadmNtMUZiR1Z0Wlc1MExtNXZjbTFoYkN4Y2JpQWdJQ0FnSUhOcGVtVWdQVDA5SUNkdFpDY2dQeUJzWVhsdmRYUXViV1ZrYVhWdElEb2diR0Y1YjNWMExteGhjbWRsWEc0Z0lDQWdLVHRjYmx4dUlDQWdJQzh2SUhSNWNHVTlKMjUxYldKbGNpY2daRzlsYzI0bmRDQjNiM0pySUc5dUlHbHZjeUJ6WVdaaGNta2dkMmwwYUc5MWRDQmhJSEJoZEhSbGNtNWNiaUFnSUNBdkx5Qm9kSFJ3Y3pvdkwzTjBZV05yYjNabGNtWnNiM2N1WTI5dEwzRjFaWE4wYVc5dWN5OHhORFEwTnpZMk9DOXBibkIxZEMxMGVYQmxMVzUxYldKbGNpMXBjeTF1YjNRdGMyaHZkMmx1WnkxaExXNTFiV0psY2kxclpYbHdZV1F0YjI0dGFXOXpYRzRnSUNBZ1kyOXVjM1FnY0dGMGRHVnliaUE5SUhSNWNHVWdQVDA5SUNkdWRXMWlaWEluSUQ4Z0oxeGNYRnhrS2ljZ09pQjFibVJsWm1sdVpXUTdYRzVjYmlBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ1BITndZVzQrWEc0Z0lDQWdJQ0FnSUh0c1lXSmxiQ0FtSmlBOFJtOXliVXhoWW1Wc0lHbGtQWHRwWkgwZ2JHRmlaV3c5ZTJ4aFltVnNmU0F2UG4xY2JpQWdJQ0FnSUNBZ1BHbHVjSFYwWEc0Z0lDQWdJQ0FnSUNBZ1lYSnBZUzFrWlhOamNtbGlaV1JpZVQxN1pYSnliM0pOWlhOellXZGxJQ1ltSUdadlkzVnpaV1FnUHlCZ0pIdHBaSDB0WlhKeWIzSmdJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdJQ0JoY21saExXbHVkbUZzYVdROWUyVnljbTl5VFdWemMyRm5aU0I4ZkNCb1lYTkZjbkp2Y2lBL0lDZDBjblZsSnlBNklDZG1ZV3h6WlNkOVhHNGdJQ0FnSUNBZ0lDQWdZWFYwYjBOdmJYQnNaWFJsUFh0aGRYUnZRMjl0Y0d4bGRHVjlYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMlZ6ZlZ4dUlDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWa1BYdGthWE5oWW14bFpIMWNiaUFnSUNBZ0lDQWdJQ0JwWkQxN2FXUjlYRzRnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdibUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQnZia0pzZFhJOWUzUm9hWE11YUdGdVpHeGxRbXgxY24xY2JpQWdJQ0FnSUNBZ0lDQnZia05vWVc1blpUMTdkR2hwY3k1b1lXNWtiR1ZEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnYjI1R2IyTjFjejE3ZEdocGN5NW9ZVzVrYkdWR2IyTjFjMzFjYmlBZ0lDQWdJQ0FnSUNCdmJrdGxlVVJ2ZDI0OWUzUm9hWE11YUdGdVpHeGxTMlY1Ukc5M2JuMWNiaUFnSUNBZ0lDQWdJQ0J3WVhSMFpYSnVQWHR3WVhSMFpYSnVmVnh1SUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBYdHdiR0ZqWldodmJHUmxjbjFjYmlBZ0lDQWdJQ0FnSUNCeVpXWTllM1JvYVhNdWMyVjBWR1Y0ZEVacFpXeGtVbVZtZlZ4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U5ZTNSNWNHVjlYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1poYkhWbGZWeHVJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0I3YUdWc2NHVnlWR1Y0ZENBbUppQWhaWEp5YjNKTlpYTnpZV2RsSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJRHhHYjNKdFNHVnNjR1Z5VkdWNGRDQjBaWGgwUFh0b1pXeHdaWEpVWlhoMGZTQXZQbHh1SUNBZ0lDQWdJQ0FwSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnZTJWeWNtOXlUV1Z6YzJGblpTQW1KaUE4Um05eWJVVnljbTl5VFdWemMyRm5aU0JwWkQxN2FXUjlJSFJsZUhROWUyVnljbTl5VFdWemMyRm5aWDBnTHo1OVhHNGdJQ0FnSUNBOEwzTndZVzQrWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1cGJYQnZjblFnS2lCaGN5QlNaV0ZqZENCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRUp2ZUNCbWNtOXRJQ2N1TDBKdmVDNXFjeWM3WEc1cGJYQnZjblFnVFdGemF5Qm1jbTl0SUNjdUwwMWhjMnN1YW5Nbk8xeHVhVzF3YjNKMElGUmxlSFFnWm5KdmJTQW5MaTlVWlhoMExtcHpKenRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHSjFkSFJ2Ymo4NklGSmxZV04wTGs1dlpHVXNYRzRnSUdOdmJHOXlQem9nSjJSaGNtdEhjbUY1SnlCOElDZHlaV1FuTEZ4dUlDQjBaWGgwT2lCemRISnBibWNnZkNCU1pXRmpkQzVGYkdWdFpXNTBQQ28rTEZ4dUlDQjBhSFZ0WW01aGFXdy9PaUJTWldGamRDNU9iMlJsTEZ4dUlDQjBhSFZ0WW01aGFXeFRhR0Z3WlQ4NklDZGphWEpqYkdVbklId2dKM0psWTNSaGJtZHNaU2NnZkNBbmMzRjFZWEpsSnl4Y2JueDlPMXh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJVYjJGemRDaDdYRzRnSUdKMWRIUnZiaXhjYmlBZ1kyOXNiM0lnUFNBblpHRnlhMGR5WVhrbkxGeHVJQ0IwWlhoMExGeHVJQ0IwYUhWdFltNWhhV3dzWEc0Z0lIUm9kVzFpYm1GcGJGTm9ZWEJsSUQwZ0ozTnhkV0Z5WlNjc1hHNTlPaUJRY205d2N5a2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJRHhDYjNnZ2JXRnlaMmx1UW05MGRHOXRQWHN6ZlNCd1lXUmthVzVuV0QxN05IMGdiV0Y0VjJsa2RHZzllek0yTUgwZ2QybGtkR2c5WENJeE1EQjJkMXdpUGx4dUlDQWdJQ0FnUEVKdmVDQmpiMnh2Y2oxN1kyOXNiM0o5SUdacGRDQndZV1JrYVc1blBYczJmU0J5YjNWdVpHbHVaejFjSW5CcGJHeGNJajVjYmlBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYazlYQ0ptYkdWNFhDSmNiaUFnSUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzdE1uMWNiaUFnSUNBZ0lDQWdJQ0J0WVhKbmFXNVNhV2RvZEQxN0xUSjlYRzRnSUNBZ0lDQWdJQ0FnWVd4cFoyNUpkR1Z0Y3oxY0ltTmxiblJsY2x3aVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0I3ZEdoMWJXSnVZV2xzSUQ4Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEVKdmVGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1UFZ3aVpteGxlRndpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1pzWlhnOVhDSnViMjVsWENKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYW5WemRHbG1lVU52Ym5SbGJuUTlYQ0pqWlc1MFpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndZV1JrYVc1bldEMTdNbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BFMWhjMnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjNWdVpHbHVaejE3ZEdoMWJXSnVZV2xzVTJoaGNHVWdQVDA5SUNkamFYSmpiR1VuSUQ4Z0oyTnBjbU5zWlNjZ09pQXlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hsYVdkb2REMTdkR2gxYldKdVlXbHNVMmhoY0dVZ1BUMDlJQ2R5WldOMFlXNW5iR1VuSUQ4Z05qUWdPaUEwT0gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXUjBhRDE3TkRoOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2RHaDFiV0p1WVdsc2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwwMWhjMnMrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMEp2ZUQ1Y2JpQWdJQ0FnSUNBZ0lDQXBJRG9nYm5Wc2JIMWNiaUFnSUNBZ0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVQVndpWm14bGVGd2lYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0OVhDSmpiMngxYlc1Y0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWm14bGVEMWNJbWR5YjNkY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnYW5WemRHbG1lVU52Ym5SbGJuUTlYQ0pqWlc1MFpYSmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRmtaR2x1WjFnOWV6SjlYRzRnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQRlJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTlYQ0ozYUdsMFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNhV2R1UFhzaGRHaDFiV0p1WVdsc0lDWW1JQ0ZpZFhSMGIyNGdQeUFuWTJWdWRHVnlKeUE2SUNkc1pXWjBKMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUmxlSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMVJsZUhRK1hHNGdJQ0FnSUNBZ0lDQWdQQzlDYjNnK1hHNGdJQ0FnSUNBZ0lDQWdlMkoxZEhSdmJpQS9JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lEeENiM2dnWm14bGVEMWNJbTV2Ym1WY0lpQndZV1JrYVc1bldEMTdNbjArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSHRpZFhSMGIyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnSUNBcElEb2diblZzYkgxY2JpQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBOEwwSnZlRDVjYmlBZ0tUdGNibjFjYmx4dVZHOWhjM1F1Y0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0JpZFhSMGIyNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0JqYjJ4dmNqb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25aR0Z5YTBkeVlYa25MQ0FuY21Wa0oxMHBMRnh1SUNCMFpYaDBPaUJRY205d1ZIbHdaWE11YjI1bFQyWlVlWEJsS0Z0UWNtOXdWSGx3WlhNdWMzUnlhVzVuTENCUWNtOXdWSGx3WlhNdVpXeGxiV1Z1ZEYwcExtbHpVbVZ4ZFdseVpXUXNYRzRnSUhSb2RXMWlibUZwYkRvZ1VISnZjRlI1Y0dWekxtNXZaR1VzWEc0Z0lIUm9kVzFpYm1GcGJGTm9ZWEJsT2lCUWNtOXdWSGx3WlhNdWIyNWxUMllvV3lkamFYSmpiR1VuTENBbmNtVmpkR0Z1WjJ4bEp5d2dKM054ZFdGeVpTZGRLU3hjYm4wN1hHNGlMQ0l2THlCQVpteHZkeUJ6ZEhKcFkzUmNibHh1YVcxd2IzSjBJQ29nWVhNZ1VtVmhZM1FnWm5KdmJTQW5jbVZoWTNRbk8xeHVhVzF3YjNKMElFTnZiblJ5YjJ4c1pYSWdabkp2YlNBbkxpOURiMjUwY205c2JHVnlMbXB6Snp0Y2JtbHRjRzl5ZENCVVpYaDBJR1p5YjIwZ0p5NHZWR1Y0ZEM1cWN5YzdYRzVwYlhCdmNuUWdRbTk0SUdaeWIyMGdKeTR2UW05NExtcHpKenRjYm1sdGNHOXlkQ0JNWVhsbGNpQm1jbTl0SUNjdUwweGhlV1Z5TG1wekp6dGNibHh1WTI5dWMzUWdibTl2Y0NBOUlDZ3BJRDArSUh0OU8xeHVZMjl1YzNRZ1ZFbE5SVTlWVkNBOUlERXdNRHRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHTm9hV3hrY21WdU9pQlNaV0ZqZEM1T2IyUmxMRnh1SUNCc2FXNXJQem9nVW1WaFkzUXVUbTlrWlN4Y2JpQWdhV1JsWVd4RWFYSmxZM1JwYjI0L09pQW5kWEFuSUh3Z0ozSnBaMmgwSnlCOElDZGtiM2R1SnlCOElDZHNaV1owSnl4Y2JpQWdhVzVzYVc1bFB6b2dZbTl2YkdWaGJpeGNiaUFnZEdWNGREb2djM1J5YVc1bkxGeHVmSDA3WEc1Y2JtTnZibk4wSUdsdWFYUnBZV3hUZEdGMFpTQTlJSHNnYUc5MlpYSmxaRWxqYjI0NklHWmhiSE5sTENCb2IzWmxjbVZrVkdWNGREb2dabUZzYzJVc0lHbHpUM0JsYmpvZ1ptRnNjMlVnZlR0Y2JseHVZMjl1YzNRZ2NtVmtkV05sY2lBOUlDaHpkR0YwWlN3Z1lXTjBhVzl1S1NBOVBpQjdYRzRnSUhOM2FYUmphQ0FvWVdOMGFXOXVMblI1Y0dVcElIdGNiaUFnSUNCallYTmxJQ2RvYjNabGNrbHVTV052YmljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBdUxpNXpkR0YwWlN4Y2JpQWdJQ0FnSUNBZ2FHOTJaWEpsWkVsamIyNDZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lHbHpUM0JsYmpvZ2RISjFaU3hjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBbmFHOTJaWEpKYmxSbGVIUW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdMaTR1YzNSaGRHVXNYRzRnSUNBZ0lDQWdJR2h2ZG1WeVpXUlVaWGgwT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0JwYzA5d1pXNDZJSFJ5ZFdVc1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUdOaGMyVWdKMmh2ZG1WeVQzVjBTV052YmljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBdUxpNXpkR0YwWlN4Y2JpQWdJQ0FnSUNBZ2FHOTJaWEpsWkVsamIyNDZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQXVMaTRvSVhOMFlYUmxMbWh2ZG1WeVpXUlVaWGgwSUQ4Z2V5QnBjMDl3Wlc0NklHWmhiSE5sSUgwZ09pQjdmU2tzWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJR05oYzJVZ0oyaHZkbVZ5VDNWMFZHVjRkQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0F1TGk1emRHRjBaU3hjYmlBZ0lDQWdJQ0FnYUc5MlpYSmxaRlJsZUhRNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBdUxpNG9JWE4wWVhSbExtaHZkbVZ5WldSSlkyOXVJRDhnZXlCcGMwOXdaVzQ2SUdaaGJITmxJSDBnT2lCN2ZTa3NYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvS1R0Y2JpQWdmVnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z1ZHOXZiSFJwY0NoN1hHNGdJR05vYVd4a2NtVnVMRnh1SUNCc2FXNXJMRnh1SUNCcFpHVmhiRVJwY21WamRHbHZiaUE5SUNka2IzZHVKeXhjYmlBZ2FXNXNhVzVsTEZ4dUlDQjBaWGgwTEZ4dWZUb2dVSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdXM04wWVhSbExDQmthWE53WVhSamFGMGdQU0JTWldGamRDNTFjMlZTWldSMVkyVnlLSEpsWkhWalpYSXNJR2x1YVhScFlXeFRkR0YwWlNrN1hHNGdJR052Ym5OMElIc2dhWE5QY0dWdUlIMGdQU0J6ZEdGMFpUdGNibHh1SUNCamIyNXpkQ0JqYUdsc1pGSmxaaUE5SUZKbFlXTjBMblZ6WlZKbFpqdy9TRlJOVEVScGRrVnNaVzFsYm5RK0tHNTFiR3dwTzF4dUlDQmpiMjV6ZENCN0lHTjFjbkpsYm5RNklHRnVZMmh2Y2lCOUlEMGdZMmhwYkdSU1pXWTdYRzVjYmlBZ1kyOXVjM1FnYUdGdVpHeGxTV052YmsxdmRYTmxSVzUwWlhJZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnWkdsemNHRjBZMmdvZXlCMGVYQmxPaUFuYUc5MlpYSkpia2xqYjI0bklIMHBPMXh1SUNCOU8xeHVYRzRnSUdOdmJuTjBJR2hoYm1Sc1pVbGpiMjVOYjNWelpVeGxZWFpsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdaR2x6Y0dGMFkyZ29leUIwZVhCbE9pQW5hRzkyWlhKUGRYUkpZMjl1SnlCOUtUdGNiaUFnSUNCOUxDQlVTVTFGVDFWVUtUdGNiaUFnZlR0Y2JseHVJQ0JqYjI1emRDQm9ZVzVrYkdWVVpYaDBUVzkxYzJWRmJuUmxjaUE5SUNncElEMCtJSHRjYmlBZ0lDQmthWE53WVhSamFDaDdJSFI1Y0dVNklDZG9iM1psY2tsdVZHVjRkQ2NnZlNrN1hHNGdJSDA3WEc1Y2JpQWdZMjl1YzNRZ2FHRnVaR3hsVkdWNGRFMXZkWE5sVEdWaGRtVWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNCa2FYTndZWFJqYUNoN0lIUjVjR1U2SUNkb2IzWmxjazkxZEZSbGVIUW5JSDBwTzF4dUlDQWdJSDBzSUZSSlRVVlBWVlFwTzF4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlBb1hHNGdJQ0FnUEVKdmVDQmthWE53YkdGNVBYdHBibXhwYm1VZ1B5QW5hVzVzYVc1bFFteHZZMnNuSURvZ0oySnNiMk5ySjMwK1hHNGdJQ0FnSUNBOFFtOTRYRzRnSUNBZ0lDQWdJR0Z5YVdFdGJHRmlaV3c5ZTNSbGVIUjlYRzRnSUNBZ0lDQWdJSEpsWmoxN1kyaHBiR1JTWldaOVhHNGdJQ0FnSUNBZ0lHOXVSbTlqZFhNOWUyaGhibVJzWlVsamIyNU5iM1Z6WlVWdWRHVnlmVnh1SUNBZ0lDQWdJQ0J2YmtKc2RYSTllMmhoYm1Sc1pVbGpiMjVOYjNWelpVeGxZWFpsZlZ4dUlDQWdJQ0FnSUNCdmJrMXZkWE5sUlc1MFpYSTllMmhoYm1Sc1pVbGpiMjVOYjNWelpVVnVkR1Z5ZlZ4dUlDQWdJQ0FnSUNCdmJrMXZkWE5sVEdWaGRtVTllMmhoYm1Sc1pVbGpiMjVOYjNWelpVeGxZWFpsZlZ4dUlDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNCN1kyaHBiR1J5Wlc1OVhHNGdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJSHRwYzA5d1pXNGdKaVlnSVNGaGJtTm9iM0lnSmlZZ0tGeHVJQ0FnSUNBZ0lDQThUR0Y1WlhJK1hHNGdJQ0FnSUNBZ0lDQWdQRU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnVZMmh2Y2oxN1lXNWphRzl5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ5WlhROWUyWmhiSE5sZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbWREYjJ4dmNqMWNJbVJoY210SGNtRjVYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnZjbVJsY2oxN1ptRnNjMlY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaR1ZoYkVScGNtVmpkR2x2YmoxN2FXUmxZV3hFYVhKbFkzUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia1JwYzIxcGMzTTllMjV2YjNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOcGRHbHZibEpsYkdGMGFYWmxWRzlCYm1Ob2IzSTllMlpoYkhObGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY205MWJtUnBibWM5ZXpKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYdHVkV3hzZlZ4dUlDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUR4Q2IzaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRWMmxrZEdnOWV6RTRNSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0ZrWkdsdVp6MTdNbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVDYkhWeVBYdHNhVzVySUQ4Z2FHRnVaR3hsVkdWNGRFMXZkWE5sVEdWaGRtVWdPaUIxYm1SbFptbHVaV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1Um05amRYTTllMnhwYm1zZ1B5Qm9ZVzVrYkdWVVpYaDBUVzkxYzJWRmJuUmxjaUE2SUhWdVpHVm1hVzVsWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1TmIzVnpaVVZ1ZEdWeVBYdHNhVzVySUQ4Z2FHRnVaR3hsVkdWNGRFMXZkWE5sUlc1MFpYSWdPaUIxYm1SbFptbHVaV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVk1aV0YyWlQxN2JHbHVheUEvSUdoaGJtUnNaVlJsZUhSTmIzVnpaVXhsWVhabElEb2dkVzVrWldacGJtVmtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnliMnhsUFZ3aWRHOXZiSFJwY0Z3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaFlrbHVaR1Y0UFhzd2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0E4VkdWNGRDQmpiMnh2Y2oxY0luZG9hWFJsWENJZ2MybDZaVDFjSW5OdFhDSStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM1JsZUhSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlZHVjRkRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdlMnhwYm1zZ0ppWWdQRUp2ZUNCdFlYSm5hVzVVYjNBOWV6RjlQbnRzYVc1cmZUd3ZRbTk0UG4xY2JpQWdJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJRHd2UTI5dWRISnZiR3hsY2o1Y2JpQWdJQ0FnSUNBZ1BDOU1ZWGxsY2o1Y2JpQWdJQ0FnSUNsOVhHNGdJQ0FnUEM5Q2IzZytYRzRnSUNrN1hHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYmx4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUhOMGVXeGxjeUJtY205dElDY3VMMVpwWkdWdkxtTnpjeWM3WEc1Y2JuUjVjR1VnVUhKdmNITWdQU0I3ZkZ4dUlDQmpkWEp5Wlc1MFZHbHRaVG9nYm5WdFltVnlMRnh1SUNCa2RYSmhkR2x2YmpvZ2JuVnRZbVZ5TEZ4dUlDQnZibEJzWVhsb1pXRmtSRzkzYmpvZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlrZ1BUNGdkbTlwWkN4Y2JpQWdiMjVRYkdGNWFHVmhaRlZ3T2lBb1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjJiMmxrTEZ4dUlDQnpaV1ZyT2lBb2RHbHRaVG9nYm5WdFltVnlLU0E5UGlCMmIybGtMRnh1ZkgwN1hHNWNiblI1Y0dVZ1UzUmhkR1VnUFNCN2ZGeHVJQ0J6WldWcmFXNW5PaUJpYjI5c1pXRnVMRnh1ZkgwN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZacFpHVnZVR3hoZVdobFlXUWdaWGgwWlc1a2N5QlNaV0ZqZEM1UWRYSmxRMjl0Y0c5dVpXNTBQRkJ5YjNCekxDQlRkR0YwWlQ0Z2UxeHVJQ0J3YkdGNWFHVmhaRG9nUDBoVVRVeEVhWFpGYkdWdFpXNTBPMXh1WEc0Z0lITjBZWFJwWXlCd2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1kzVnljbVZ1ZEZScGJXVTZJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQmtkWEpoZEdsdmJqb2dVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpNXBjMUpsY1hWcGNtVmtMRnh1SUNBZ0lHOXVVR3hoZVdobFlXUkViM2R1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJRzl1VUd4aGVXaGxZV1JWY0RvZ1VISnZjRlI1Y0dWekxtWjFibU11YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0J6WldWck9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0I5TzF4dVhHNGdJSE4wWVhSbElEMGdlMXh1SUNBZ0lITmxaV3RwYm1jNklHWmhiSE5sTEZ4dUlDQjlPMXh1WEc0Z0lITmxkRkJzWVhsb1pXRmtVbVZtSUQwZ0tISmxaam9nUDBoVVRVeEVhWFpGYkdWdFpXNTBLU0E5UGlCN1hHNGdJQ0FnZEdocGN5NXdiR0Y1YUdWaFpDQTlJSEpsWmp0Y2JpQWdmVHRjYmx4dUlDQnpaV1ZySUQwZ0tHTnNhV1Z1ZEZnNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuQnNZWGxvWldGa0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCN0lHUjFjbUYwYVc5dUxDQnpaV1ZySUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lDQWdZMjl1YzNRZ2V5QnNaV1owTENCM2FXUjBhQ0I5SUQwZ2RHaHBjeTV3YkdGNWFHVmhaQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNiaUFnSUNBZ0lHTnZibk4wSUhCbGNtTmxiblFnUFNCTllYUm9MbTFoZUNnd0xDQk5ZWFJvTG0xcGJpZ29ZMnhwWlc1MFdDQXRJR3hsWm5RcElDOGdkMmxrZEdnc0lERXBLVHRjYmlBZ0lDQWdJR052Ym5OMElHNWxkMVJwYldVZ1BTQndaWEpqWlc1MElDb2daSFZ5WVhScGIyNDdYRzRnSUNBZ0lDQnpaV1ZyS0c1bGQxUnBiV1VwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCemRHOXdRMnhwWTJzZ1BTQW9aWFpsYm5RNklGTjViblJvWlhScFkwVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQaWtnUFQ1Y2JpQWdJQ0JsZG1WdWRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNibHh1SUNCb1lXNWtiR1ZOYjNWelpVUnZkMjRnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTAxdmRYTmxSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjdYRzRnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVVR3hoZVdobFlXUkViM2R1SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHOXVVR3hoZVdobFlXUkViM2R1S0dWMlpXNTBLVHRjYmlBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ2MyVmxhMmx1WnpvZ2RISjFaU0I5S1R0Y2JpQWdJQ0IwYUdsekxuTmxaV3NvWlhabGJuUXVZMnhwWlc1MFdDazdYRzRnSUgwN1hHNWNiaUFnYUdGdVpHeGxUVzkxYzJWTVpXRjJaU0E5SUNobGRtVnVkRG9nVTNsdWRHaGxkR2xqVFc5MWMyVkZkbVZ1ZER4SVZFMU1SR2wyUld4bGJXVnVkRDRwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVVHeGhlV2hsWVdSVmNDQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JqYjI1emRDQjdJSE5sWld0cGJtY2dmU0E5SUhSb2FYTXVjM1JoZEdVN1hHNGdJQ0FnTHk4Z1NXWWdkR2hsSUhWelpYSWdhWE1nYzJWbGEybHVaeUJoYm1RZ2JXOTFjMlVnYkdWaGRtVnpJSEJzWVhsb1pXRmtJSFJvWlc0Z1pXNWtJSFJvWlNCelpXVnJYRzRnSUNBZ2FXWWdLSE5sWld0cGJtY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2V5QnpaV1ZyYVc1bk9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNBZ0lHOXVVR3hoZVdobFlXUlZjQ2hsZG1WdWRDazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJR2hoYm1Sc1pVMXZkWE5sVFc5MlpTQTlJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpUVzkxYzJWRmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENHBJRDArSUh0Y2JpQWdJQ0JsZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUdOdmJuTjBJSHNnYzJWbGEybHVaeUI5SUQwZ2RHaHBjeTV6ZEdGMFpUdGNiaUFnSUNCcFppQW9jMlZsYTJsdVp5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1elpXVnJLR1YyWlc1MExtTnNhV1Z1ZEZncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQm9ZVzVrYkdWTmIzVnpaVlZ3SUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNVFiR0Y1YUdWaFpGVndJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJ6WldWcmFXNW5PaUJtWVd4elpTQjlLVHRjYmlBZ0lDQnZibEJzWVhsb1pXRmtWWEFvWlhabGJuUXBPMXh1SUNCOU8xeHVYRzRnSUhKbGJtUmxjaWdwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR04xY25KbGJuUlVhVzFsTENCa2RYSmhkR2x2YmlCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCM2FXUjBhQ0E5SUdBa2UwMWhkR2d1Wm14dmIzSW9LR04xY25KbGJuUlVhVzFsSUNvZ01UQXdNREFwSUM4Z1pIVnlZWFJwYjI0cElDOGdNVEF3ZlNWZ08xeHVJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0E4UW05NFhHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dVBWd2ljbVZzWVhScGRtVmNJbHh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVQVndpWm14bGVGd2lYRzRnSUNBZ0lDQWdJR1pzWlhnOVhDSm5jbTkzWENKY2JpQWdJQ0FnSUNBZ1lXeHBaMjVKZEdWdGN6MWNJbU5sYm5SbGNsd2lYRzRnSUNBZ0lDQWdJR2hsYVdkb2REMTdNVFo5WEc0Z0lDQWdJQ0ErWEc0Z0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0JoY21saExYWmhiSFZsYldGNFBYdGtkWEpoZEdsdmJuMWNiaUFnSUNBZ0lDQWdJQ0JoY21saExYWmhiSFZsYldsdVBWd2lNRndpWEc0Z0lDQWdJQ0FnSUNBZ1lYSnBZUzEyWVd4MVpXNXZkejE3WTNWeWNtVnVkRlJwYldWOVhHNGdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHR6ZEhsc1pYTXVjR3hoZVdobFlXUjlYRzRnSUNBZ0lDQWdJQ0FnYjI1RGJHbGphejE3ZEdocGN5NXpkRzl3UTJ4cFkydDlYRzRnSUNBZ0lDQWdJQ0FnYjI1TFpYbFFjbVZ6Y3oxN2RHaHBjeTV6ZEc5d1EyeHBZMnQ5WEc0Z0lDQWdJQ0FnSUNBZ2IyNU5iM1Z6WlVSdmQyNDllM1JvYVhNdWFHRnVaR3hsVFc5MWMyVkViM2R1ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVUVzkxYzJWTVpXRjJaVDE3ZEdocGN5NW9ZVzVrYkdWTmIzVnpaVXhsWVhabGZWeHVJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVk5iM1psUFh0MGFHbHpMbWhoYm1Sc1pVMXZkWE5sVFc5MlpYMWNiaUFnSUNBZ0lDQWdJQ0J2YmsxdmRYTmxWWEE5ZTNSb2FYTXVhR0Z1Wkd4bFRXOTFjMlZWY0gxY2JpQWdJQ0FnSUNBZ0lDQnlaV1k5ZTNSb2FYTXVjMlYwVUd4aGVXaGxZV1JTWldaOVhHNGdJQ0FnSUNBZ0lDQWdjbTlzWlQxY0luQnliMmR5WlhOelltRnlYQ0pjYmlBZ0lDQWdJQ0FnSUNCMFlXSkpibVJsZUQxY0lpMHhYQ0pjYmlBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxablJjYmlBZ0lDQWdJQ0FnSUNBZ0lISnBaMmgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05wZEdsdmJqMWNJbUZpYzI5c2RYUmxYQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFZ3aWJHbG5hSFJIY21GNVhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUhKdmRXNWthVzVuUFhzeWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWcFoyaDBQWHMwZlZ4dUlDQWdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUR4Q2IzZ2dZMjlzYjNJOVhDSjNhR2wwWlZ3aUlISnZkVzVrYVc1blBYc3lmU0JvWldsbmFIUTlYQ0l4TURBbFhDSWdkMmxrZEdnOWUzZHBaSFJvZlNBdlBseHVJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQWdJRHhDYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzJsMGFXOXVQVndpWVdKemIyeDFkR1ZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdjbTkxYm1ScGJtYzlleko5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm9aV2xuYUhROWV6UjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lXNW5aWEp2ZFhOc2VWTmxkRWx1YkdsdVpWTjBlV3hsUFh0N0lGOWZjM1I1YkdVNklIc2diR1ZtZERvZ2QybGtkR2dnZlNCOWZWeHVJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lEeENiM2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbTkxYm1ScGJtYzlYQ0pqYVhKamJHVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYUQxN01UWjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGxhV2RvZEQxN01UWjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5UFZ3aWQyaHBkR1ZjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J0WVhKbmFXNU1aV1owUFhzdE1uMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pHRnVaMlZ5YjNWemJIbFRaWFJKYm14cGJtVlRkSGxzWlQxN2V5QmZYM04wZVd4bE9pQjdJRzFoY21kcGJsUnZjRG9nTFRZZ2ZTQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0E4TDBKdmVENWNiaUFnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQXBPMXh1SUNCOVhHNTlYRzRpTENJdkx5QkFabXh2ZHlCemRISnBZM1JjYmx4dWFXMXdiM0owSUNvZ1lYTWdVbVZoWTNRZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JDYjNnZ1puSnZiU0FuTGk5Q2IzZ3Vhbk1uTzF4dWFXMXdiM0owSUVsamIyNGdabkp2YlNBbkxpOUpZMjl1TG1wekp6dGNibWx0Y0c5eWRDQlVaWGgwSUdaeWIyMGdKeTR2VkdWNGRDNXFjeWM3WEc1cGJYQnZjblFnVkc5MVkyaGhZbXhsSUdaeWIyMGdKeTR2Vkc5MVkyaGhZbXhsTG1wekp6dGNibWx0Y0c5eWRDQldhV1JsYjFCc1lYbG9aV0ZrSUdaeWIyMGdKeTR2Vm1sa1pXOVFiR0Y1YUdWaFpDNXFjeWM3WEc1cGJYQnZjblFnYzNSNWJHVnpJR1p5YjIwZ0p5NHZWbWxrWlc4dVkzTnpKenRjYmx4dWRIbHdaU0JRY205d2N5QTlJSHQ4WEc0Z0lHRmpZMlZ6YzJsaWFXeHBkSGxOWVhocGJXbDZaVXhoWW1Wc09pQnpkSEpwYm1jc1hHNGdJR0ZqWTJWemMybGlhV3hwZEhsTmFXNXBiV2w2WlV4aFltVnNPaUJ6ZEhKcGJtY3NYRzRnSUdGalkyVnpjMmxpYVd4cGRIbE5kWFJsVEdGaVpXdzZJSE4wY21sdVp5eGNiaUFnWVdOalpYTnphV0pwYkdsMGVWQmhkWE5sVEdGaVpXdzZJSE4wY21sdVp5eGNiaUFnWVdOalpYTnphV0pwYkdsMGVWQnNZWGxNWVdKbGJEb2djM1J5YVc1bkxGeHVJQ0JoWTJObGMzTnBZbWxzYVhSNVZXNXRkWFJsVEdGaVpXdzZJSE4wY21sdVp5eGNiaUFnWTNWeWNtVnVkRlJwYldVNklHNTFiV0psY2l4Y2JpQWdaSFZ5WVhScGIyNDZJRzUxYldKbGNpeGNiaUFnWm5Wc2JITmpjbVZsYmpvZ1ltOXZiR1ZoYml4Y2JpQWdiMjVHZFd4c2MyTnlaV1Z1UTJoaGJtZGxPaUFvS1NBOVBpQjJiMmxrTEZ4dUlDQnZibEJoZFhObE9pQW9aWFpsYm5RNklGTjViblJvWlhScFkwVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQaWtnUFQ0Z2RtOXBaQ3hjYmlBZ2IyNVFiR0Y1T2lBb1pYWmxiblE2SUZONWJuUm9aWFJwWTBWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpa2dQVDRnZG05cFpDeGNiaUFnYjI1UWJHRjVhR1ZoWkVSdmQyNDZJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpUVzkxYzJWRmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENHBJRDArSUhadmFXUXNYRzRnSUc5dVVHeGhlV2hsWVdSVmNEb2dLR1YyWlc1ME9pQlRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpa2dQVDRnZG05cFpDeGNiaUFnYjI1V2IyeDFiV1ZEYUdGdVoyVTZJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpSWFpsYm5ROFNGUk5URVJwZGtWc1pXMWxiblErS1NBOVBpQjJiMmxrTEZ4dUlDQndiR0Y1YVc1bk9pQmliMjlzWldGdUxGeHVJQ0J6WldWck9pQW9kR2x0WlRvZ2JuVnRZbVZ5S1NBOVBpQjJiMmxrTEZ4dUlDQjJiMngxYldVNklHNTFiV0psY2l4Y2JueDlPMXh1WEc1amIyNXpkQ0JtZFd4c2MyTnlaV1Z1Ulc1aFlteGxaQ0E5SUNncElEMCtYRzRnSUdSdlkzVnRaVzUwTG1aMWJHeHpZM0psWlc1RmJtRmliR1ZrSUh4OFhHNGdJQzh2SUNSR2JHOTNTWE56ZFdVZ0xTQjJaVzVrYjNJZ2NISmxabWw0SUcxcGMzTnBibWNnWm5KdmJTQkdiRzkzWEc0Z0lHUnZZM1Z0Wlc1MExuZGxZbXRwZEVaMWJHeHpZM0psWlc1RmJtRmliR1ZrSUh4OFhHNGdJQzh2SUNSR2JHOTNTWE56ZFdVZ0xTQjJaVzVrYjNJZ2NISmxabWw0SUcxcGMzTnBibWNnWm5KdmJTQkdiRzkzWEc0Z0lHUnZZM1Z0Wlc1MExtMXZla1oxYkd4VFkzSmxaVzVGYm1GaWJHVmtJSHg4WEc0Z0lDOHZJQ1JHYkc5M1NYTnpkV1VnTFNCMlpXNWtiM0lnY0hKbFptbDRJRzFwYzNOcGJtY2dabkp2YlNCR2JHOTNYRzRnSUdSdlkzVnRaVzUwTG0xelJuVnNiSE5qY21WbGJrVnVZV0pzWldRN1hHNWNibU52Ym5OMElIUnBiV1ZVYjFOMGNtbHVaeUE5SUNoMGFXMWxQem9nYm5WdFltVnlLU0E5UGlCN1hHNGdJR052Ym5OMElISnZkVzVrWldRZ1BTQk5ZWFJvTG1ac2IyOXlLSFJwYldVZ2ZId2dNQ2s3WEc0Z0lHTnZibk4wSUcxcGJuVjBaWE1nUFNCTllYUm9MbVpzYjI5eUtISnZkVzVrWldRZ0x5QTJNQ2s3WEc0Z0lHTnZibk4wSUhObFkyOXVaSE1nUFNCeWIzVnVaR1ZrSUMwZ2JXbHVkWFJsY3lBcUlEWXdPMXh1SUNCamIyNXpkQ0J0YVc1MWRHVnpVM1J5SUQwZ2JXbHVkWFJsY3lBOElERXdJRDhnWURBa2UyMXBiblYwWlhOOVlDQTZJRzFwYm5WMFpYTTdYRzRnSUdOdmJuTjBJSE5sWTI5dVpITlRkSElnUFNCelpXTnZibVJ6SUR3Z01UQWdQeUJnTUNSN2MyVmpiMjVrYzMxZ0lEb2djMlZqYjI1a2N6dGNiaUFnY21WMGRYSnVJR0FrZTIxcGJuVjBaWE5UZEhKOU9pUjdjMlZqYjI1a2MxTjBjbjFnTzF4dWZUdGNibHh1WTJ4aGMzTWdWbWxrWlc5RGIyNTBjbTlzY3lCbGVIUmxibVJ6SUZKbFlXTjBMa052YlhCdmJtVnVkRHhRY205d2N6NGdlMXh1SUNCemRHRjBhV01nY0hKdmNGUjVjR1Z6SUQwZ2UxeHVJQ0FnSUdGalkyVnpjMmxpYVd4cGRIbE5ZWGhwYldsNlpVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnWVdOalpYTnphV0pwYkdsMGVVMXBibWx0YVhwbFRHRmlaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JoWTJObGMzTnBZbWxzYVhSNVRYVjBaVXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVkJoZFhObFRHRmlaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0JoWTJObGMzTnBZbWxzYVhSNVVHeGhlVXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVlZ1YlhWMFpVeGhZbVZzT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnWTNWeWNtVnVkRlJwYldVNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCa2RYSmhkR2x2YmpvZ1VISnZjRlI1Y0dWekxtNTFiV0psY2k1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUdaMWJHeHpZM0psWlc0NklGQnliM0JVZVhCbGN5NWliMjlzTG1selVtVnhkV2x5WldRc1hHNGdJQ0FnYjI1R2RXeHNjMk55WldWdVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJRzl1VUdGMWMyVTZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2IyNVFiR0Y1T2lCUWNtOXdWSGx3WlhNdVpuVnVZeTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJRzl1VUd4aGVXaGxZV1JFYjNkdU9pQlFjbTl3Vkhsd1pYTXVablZ1WXk1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUc5dVVHeGhlV2hsWVdSVmNEb2dVSEp2Y0ZSNWNHVnpMbVoxYm1NdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCdmJsWnZiSFZ0WlVOb1lXNW5aVG9nVUhKdmNGUjVjR1Z6TG1aMWJtTXVhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQndiR0Y1YVc1bk9pQlFjbTl3Vkhsd1pYTXVZbTl2YkM1cGMxSmxjWFZwY21Wa0xGeHVJQ0FnSUhObFpXczZJRkJ5YjNCVWVYQmxjeTVtZFc1akxtbHpVbVZ4ZFdseVpXUXNYRzRnSUNBZ2RtOXNkVzFsT2lCUWNtOXdWSGx3WlhNdWJuVnRZbVZ5TG1selVtVnhkV2x5WldRc1hHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFJuVnNiSE5qY21WbGJrTm9ZVzVuWlNBOUlDaDdYRzRnSUNBZ1pYWmxiblFzWEc0Z0lIMDZJSHRjYmlBZ0lDQmxkbVZ1ZERwY2JpQWdJQ0FnSUh3Z1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ1Y2JpQWdJQ0FnSUh3Z1UzbHVkR2hsZEdsalMyVjVZbTloY21SRmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENHNYRzRnSUgwcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVSblZzYkhOamNtVmxia05vWVc1blpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JpQWdJQ0JsZG1WdWRDNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tUdGNiaUFnSUNCdmJrWjFiR3h6WTNKbFpXNURhR0Z1WjJVb0tUdGNiaUFnZlR0Y2JseHVJQ0JvWVc1a2JHVlFiR0Y1YVc1blEyaGhibWRsSUQwZ0tIdGNiaUFnSUNCbGRtVnVkQ3hjYmlBZ2ZUb2dlMXh1SUNBZ0lHVjJaVzUwT2x4dUlDQWdJQ0FnZkNCVGVXNTBhR1YwYVdOTmIzVnpaVVYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGx4dUlDQWdJQ0FnZkNCVGVXNTBhR1YwYVdOTFpYbGliMkZ5WkVWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpeGNiaUFnZlNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2NHeGhlV2x1Wnl3Z2IyNVFZWFZ6WlN3Z2IyNVFiR0Y1SUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHbG1JQ2h3YkdGNWFXNW5LU0I3WEc0Z0lDQWdJQ0J2YmxCaGRYTmxLR1YyWlc1MEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYjI1UWJHRjVLR1YyWlc1MEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdhR0Z1Wkd4bFZtOXNkVzFsUTJoaGJtZGxJRDBnS0h0Y2JpQWdJQ0JsZG1WdWRDeGNiaUFnZlRvZ2UxeHVJQ0FnSUdWMlpXNTBPbHh1SUNBZ0lDQWdmQ0JUZVc1MGFHVjBhV05OYjNWelpVVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQbHh1SUNBZ0lDQWdmQ0JUZVc1MGFHVjBhV05MWlhsaWIyRnlaRVYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGl4Y2JpQWdmU2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjI1V2IyeDFiV1ZEYUdGdVoyVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnYjI1V2IyeDFiV1ZEYUdGdVoyVW9aWFpsYm5RcE8xeHVJQ0I5TzF4dVhHNGdJSEpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCN1hHNGdJQ0FnSUNCaFkyTmxjM05wWW1sc2FYUjVUV0Y0YVcxcGVtVk1ZV0psYkN4Y2JpQWdJQ0FnSUdGalkyVnpjMmxpYVd4cGRIbE5hVzVwYldsNlpVeGhZbVZzTEZ4dUlDQWdJQ0FnWVdOalpYTnphV0pwYkdsMGVVMTFkR1ZNWVdKbGJDeGNiaUFnSUNBZ0lHRmpZMlZ6YzJsaWFXeHBkSGxRWVhWelpVeGhZbVZzTEZ4dUlDQWdJQ0FnWVdOalpYTnphV0pwYkdsMGVWQnNZWGxNWVdKbGJDeGNiaUFnSUNBZ0lHRmpZMlZ6YzJsaWFXeHBkSGxWYm0xMWRHVk1ZV0psYkN4Y2JpQWdJQ0FnSUdOMWNuSmxiblJVYVcxbExGeHVJQ0FnSUNBZ1pIVnlZWFJwYjI0c1hHNGdJQ0FnSUNCbWRXeHNjMk55WldWdUxGeHVJQ0FnSUNBZ2IyNVFiR0Y1YUdWaFpFUnZkMjRzWEc0Z0lDQWdJQ0J2YmxCc1lYbG9aV0ZrVlhBc1hHNGdJQ0FnSUNCd2JHRjVhVzVuTEZ4dUlDQWdJQ0FnYzJWbGF5eGNiaUFnSUNBZ0lIWnZiSFZ0WlN4Y2JpQWdJQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNiaUFnSUNCamIyNXpkQ0J0ZFhSbFpDQTlJSFp2YkhWdFpTQTlQVDBnTUR0Y2JpQWdJQ0JqYjI1emRDQnphRzkzUm5Wc2JITmpjbVZsYmtKMWRIUnZiaUE5WEc0Z0lDQWdJQ0IwZVhCbGIyWWdaRzlqZFcxbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JQ0VoWm5Wc2JITmpjbVZsYmtWdVlXSnNaV1FvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUzTjBlV3hsY3k1amIyNTBjbTlzYzMwK1hHNGdJQ0FnSUNBZ0lEeENiM2dnY0dGa1pHbHVaejE3TW4wK1hHNGdJQ0FnSUNBZ0lDQWdQRlJ2ZFdOb1lXSnNaU0J2YmxSdmRXTm9QWHQwYUdsekxtaGhibVJzWlZCc1lYbHBibWREYUdGdVoyVjlJR1oxYkd4WGFXUjBhRDE3Wm1Gc2MyVjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNQWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGNWFXNW5JRDhnWVdOalpYTnphV0pwYkdsMGVWQmhkWE5sVEdGaVpXd2dPaUJoWTJObGMzTnBZbWxzYVhSNVVHeGhlVXhoWW1Wc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSTlYQ0ozYUdsMFpWd2lYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGpiMjQ5ZTNCc1lYbHBibWNnUHlBbmNHRjFjMlVuSURvZ0ozQnNZWGtuZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J6YVhwbFBYc3lNSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnUEM5VWIzVmphR0ZpYkdVK1hHNGdJQ0FnSUNBZ0lEd3ZRbTk0UGx4dUlDQWdJQ0FnSUNBOFFtOTRJSGRwWkhSb1BYczFNSDBnY0dGa1pHbHVaejE3TW4wK1hHNGdJQ0FnSUNBZ0lDQWdQRlJsZUhRZ1lXeHBaMjQ5WENKeWFXZG9kRndpSUdOdmJHOXlQVndpZDJocGRHVmNJaUJ2ZG1WeVpteHZkejFjSW01dmNtMWhiRndpSUhOcGVtVTlYQ0p6YlZ3aVBseHVJQ0FnSUNBZ0lDQWdJQ0FnZTNScGJXVlViMU4wY21sdVp5aGpkWEp5Wlc1MFZHbHRaU2w5WEc0Z0lDQWdJQ0FnSUNBZ1BDOVVaWGgwUGx4dUlDQWdJQ0FnSUNBOEwwSnZlRDVjYmlBZ0lDQWdJQ0FnUEVKdmVDQndZV1JrYVc1blBYc3lmU0JtYkdWNFBWd2laM0p2ZDF3aVBseHVJQ0FnSUNBZ0lDQWdJRHhXYVdSbGIxQnNZWGxvWldGa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBWR2x0WlQxN1kzVnljbVZ1ZEZScGJXVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2RYSmhkR2x2YmoxN1pIVnlZWFJwYjI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmxCc1lYbG9aV0ZrUkc5M2JqMTdiMjVRYkdGNWFHVmhaRVJ2ZDI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmxCc1lYbG9aV0ZrVlhBOWUyOXVVR3hoZVdobFlXUlZjSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxaV3M5ZTNObFpXdDlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ1BDOUNiM2crWEc0Z0lDQWdJQ0FnSUR4Q2IzZ2dkMmxrZEdnOWV6VXdmU0J3WVdSa2FXNW5QWHN5ZlQ1Y2JpQWdJQ0FnSUNBZ0lDQThWR1Y0ZENCaGJHbG5iajFjSW5KcFoyaDBYQ0lnWTI5c2IzSTlYQ0ozYUdsMFpWd2lJRzkyWlhKbWJHOTNQVndpYm05eWJXRnNYQ0lnYzJsNlpUMWNJbk50WENJK1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3ZEdsdFpWUnZVM1J5YVc1bktHUjFjbUYwYVc5dUtYMWNiaUFnSUNBZ0lDQWdJQ0E4TDFSbGVIUStYRzRnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQThRbTk0SUhCaFpHUnBibWM5ZXpKOVBseHVJQ0FnSUNBZ0lDQWdJRHhVYjNWamFHRmliR1VnYjI1VWIzVmphRDE3ZEdocGN5NW9ZVzVrYkdWV2IyeDFiV1ZEYUdGdVoyVjlJR1oxYkd4WGFXUjBhRDE3Wm1Gc2MyVjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BFbGpiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOemFXSnBiR2wwZVV4aFltVnNQWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0ZFhSbFpDQS9JR0ZqWTJWemMybGlhV3hwZEhsVmJtMTFkR1ZNWVdKbGJDQTZJR0ZqWTJWemMybGlhV3hwZEhsTmRYUmxUR0ZpWld4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4dmNqMWNJbmRvYVhSbFhDSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXTnZiajE3YlhWMFpXUWdQeUFuYlhWMFpTY2dPaUFuYzI5MWJtUW5mVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnphWHBsUFhzeU1IMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdQQzlVYjNWamFHRmliR1UrWEc0Z0lDQWdJQ0FnSUR3dlFtOTRQbHh1SUNBZ0lDQWdJQ0I3YzJodmQwWjFiR3h6WTNKbFpXNUNkWFIwYjI0Z0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4Q2IzZ2djR0ZrWkdsdVp6MTdNbjArWEc0Z0lDQWdJQ0FnSUNBZ0lDQThWRzkxWTJoaFlteGxJRzl1Vkc5MVkyZzllM1JvYVhNdWFHRnVaR3hsUm5Wc2JITmpjbVZsYmtOb1lXNW5aWDBnWm5Wc2JGZHBaSFJvUFh0bVlXeHpaWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHhKWTI5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVXhoWW1Wc1BYdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1oxYkd4elkzSmxaVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QmhZMk5sYzNOcFltbHNhWFI1VFdsdWFXMXBlbVZNWVdKbGJGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdGalkyVnpjMmxpYVd4cGRIbE5ZWGhwYldsNlpVeGhZbVZzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlQVndpZDJocGRHVmNJbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0OWUyWjFiR3h6WTNKbFpXNGdQeUFuYldsdWFXMXBlbVVuSURvZ0oyMWhlR2x0YVhwbEozMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphWHBsUFhzeU1IMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlZHOTFZMmhoWW14bFBseHVJQ0FnSUNBZ0lDQWdJRHd2UW05NFBseHVJQ0FnSUNBZ0lDQXBmVnh1SUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCV2FXUmxiME52Ym5SeWIyeHpPMXh1SWl3aUx5OGdRR1pzYjNjZ2MzUnlhV04wWEc1Y2JtbHRjRzl5ZENBcUlHRnpJRkpsWVdOMElHWnliMjBnSjNKbFlXTjBKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVm1sa1pXOURiMjUwY205c2N5Qm1jbTl0SUNjdUwxWnBaR1Z2UTI5dWRISnZiSE11YW5Nbk8xeHVhVzF3YjNKMElITjBlV3hsY3lCbWNtOXRJQ2N1TDFacFpHVnZMbU56Y3ljN1hHNXBiWEJ2Y25RZ1FtOTRJR1p5YjIwZ0p5NHZRbTk0TG1wekp6dGNibHh1ZEhsd1pTQlRiM1Z5WTJVZ1BWeHVJQ0I4SUhOMGNtbHVaMXh1SUNCOElFRnljbUY1UEh0OElIUjVjR1U2SUNkMmFXUmxieTl0TTNVNEp5QjhJQ2QyYVdSbGJ5OXRjRFFuSUh3Z0ozWnBaR1Z2TDI5blp5Y3NJSE55WXpvZ2MzUnlhVzVuSUh4OVBqdGNibHh1ZEhsd1pTQlFjbTl3Y3lBOUlIdDhYRzRnSUdGalkyVnpjMmxpYVd4cGRIbE5ZWGhwYldsNlpVeGhZbVZzT2lCemRISnBibWNzWEc0Z0lHRmpZMlZ6YzJsaWFXeHBkSGxOYVc1cGJXbDZaVXhoWW1Wc09pQnpkSEpwYm1jc1hHNGdJR0ZqWTJWemMybGlhV3hwZEhsTmRYUmxUR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdZV05qWlhOemFXSnBiR2wwZVZCaGRYTmxUR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdZV05qWlhOemFXSnBiR2wwZVZCc1lYbE1ZV0psYkRvZ2MzUnlhVzVuTEZ4dUlDQmhZMk5sYzNOcFltbHNhWFI1Vlc1dGRYUmxUR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdZWE53WldOMFVtRjBhVzg2SUc1MWJXSmxjaXhjYmlBZ1kyRndkR2x2Ym5NNklITjBjbWx1Wnl4Y2JpQWdZMmhwYkdSeVpXNC9PaUJTWldGamRDNU9iMlJsTEZ4dUlDQmpiMjUwY205c2N6ODZJR0p2YjJ4bFlXNHNYRzRnSUd4dmIzQS9PaUJpYjI5c1pXRnVMRnh1SUNCdmJrUjFjbUYwYVc5dVEyaGhibWRsUHpvZ0tIdGNiaUFnSUNCbGRtVnVkRG9nVTNsdWRHaGxkR2xqUlhabGJuUThTRlJOVEZacFpHVnZSV3hsYldWdWRENHNYRzRnSUNBZ1pIVnlZWFJwYjI0NklHNTFiV0psY2l4Y2JpQWdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2IyNUZibVJsWkQ4NklDaDdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkZkbVZ1ZER4SVZFMU1WbWxrWlc5RmJHVnRaVzUwUGlCOUtTQTlQaUIyYjJsa0xGeHVJQ0J2YmtaMWJHeHpZM0psWlc1RGFHRnVaMlUvT2lBb2V5QmxkbVZ1ZERvZ1JYWmxiblFzSUdaMWJHeHpZM0psWlc0NklHSnZiMnhsWVc0Z2ZTa2dQVDRnZG05cFpDeGNiaUFnYjI1TWIyRmtaV1JEYUdGdVoyVS9PaUFvZTF4dUlDQWdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkZkbVZ1ZER4SVZFMU1WbWxrWlc5RmJHVnRaVzUwUGl4Y2JpQWdJQ0JzYjJGa1pXUTZJRzUxYldKbGNpeGNiaUFnZlNrZ1BUNGdkbTlwWkN4Y2JpQWdiMjVRYkdGNVB6b2dLSHNnWlhabGJuUTZJRk41Ym5Sb1pYUnBZMFYyWlc1MFBFaFVUVXhFYVhaRmJHVnRaVzUwUGlCOUtTQTlQaUIyYjJsa0xGeHVJQ0J2YmxCc1lYbG9aV0ZrUkc5M2JqODZJQ2g3SUdWMlpXNTBPaUJUZVc1MGFHVjBhV05OYjNWelpVVjJaVzUwUEVoVVRVeEVhWFpGYkdWdFpXNTBQaUI5S1NBOVBpQjJiMmxrTEZ4dUlDQnZibEJzWVhsb1pXRmtWWEEvT2lBb2V5QmxkbVZ1ZERvZ1UzbHVkR2hsZEdsalRXOTFjMlZGZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0Z2ZTa2dQVDRnZG05cFpDeGNiaUFnYjI1UVlYVnpaVDg2SUNoN0lHVjJaVzUwT2lCVGVXNTBhR1YwYVdORmRtVnVkRHhJVkUxTVJHbDJSV3hsYldWdWRENGdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2IyNVNaV0ZrZVQ4NklDaDdJR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkZkbVZ1ZER4SVZFMU1WbWxrWlc5RmJHVnRaVzUwUGlCOUtTQTlQaUIyYjJsa0xGeHVJQ0J2YmxObFpXcy9PaUFvZXlCbGRtVnVkRG9nVTNsdWRHaGxkR2xqUlhabGJuUThTRlJOVEZacFpHVnZSV3hsYldWdWRENGdmU2tnUFQ0Z2RtOXBaQ3hjYmlBZ2IyNVVhVzFsUTJoaGJtZGxQem9nS0h0Y2JpQWdJQ0JsZG1WdWREb2dVM2x1ZEdobGRHbGpSWFpsYm5ROFNGUk5URlpwWkdWdlJXeGxiV1Z1ZEQ0c1hHNGdJQ0FnZEdsdFpUb2diblZ0WW1WeUxGeHVJQ0I5S1NBOVBpQjJiMmxrTEZ4dUlDQnZibFp2YkhWdFpVTm9ZVzVuWlQ4NklDaDdYRzRnSUNBZ1pYWmxiblE2SUZONWJuUm9aWFJwWTBWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpeGNiaUFnSUNCMmIyeDFiV1U2SUc1MWJXSmxjaXhjYmlBZ2ZTa2dQVDRnZG05cFpDeGNiaUFnY0d4aGVXSmhZMnRTWVhSbE9pQnVkVzFpWlhJc1hHNGdJSEJzWVhscGJtYzZJR0p2YjJ4bFlXNHNYRzRnSUhCc1lYbHpTVzVzYVc1bFB6b2dZbTl2YkdWaGJpeGNiaUFnY0c5emRHVnlQem9nYzNSeWFXNW5MRnh1SUNCd2NtVnNiMkZrT2lBbllYVjBieWNnZkNBbmJXVjBZV1JoZEdFbklId2dKMjV2Ym1VbkxGeHVJQ0J6Y21NNklGTnZkWEpqWlN4Y2JpQWdkbTlzZFcxbE9pQnVkVzFpWlhJc1hHNThmVHRjYmx4dWRIbHdaU0JUZEdGMFpTQTlJSHQ4WEc0Z0lHTjFjbkpsYm5SVWFXMWxPaUJ1ZFcxaVpYSXNYRzRnSUdSMWNtRjBhVzl1T2lCdWRXMWlaWElzWEc0Z0lHWjFiR3h6WTNKbFpXNDZJR0p2YjJ4bFlXNHNYRzU4ZlR0Y2JseHVMeThnUm05eUlHMXZjbVVnYVc1bWIzSnRZWFJwYjI0Z2IyNGdablZzYkhOamNtVmxiaUJoYm1RZ2RtVnVaRzl5SUhCeVpXWnBlR1Z6SUhObFpWeHVMeThnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2UVZCSkwwWjFiR3h6WTNKbFpXNWZRVkJKWEc1Y2JtTnZibk4wSUhKbGNYVmxjM1JHZFd4c2MyTnlaV1Z1SUQwZ0tHVnNaVzFsYm5RNklFaFVUVXhGYkdWdFpXNTBLU0E5UGlCN1hHNGdJR2xtSUNobGJHVnRaVzUwTG5KbGNYVmxjM1JHZFd4c2MyTnlaV1Z1S1NCN1hHNGdJQ0FnWld4bGJXVnVkQzV5WlhGMVpYTjBSblZzYkhOamNtVmxiaWdwTzF4dUlDQWdJQzh2SUNSR2JHOTNTWE56ZFdVZ0xTQjJaVzVrYjNJZ2NISmxabWw0SUcxcGMzTnBibWNnWm5KdmJTQkdiRzkzWEc0Z0lIMGdaV3h6WlNCcFppQW9aV3hsYldWdWRDNTNaV0pyYVhSU1pYRjFaWE4wUm5Wc2JITmpjbVZsYmlrZ2UxeHVJQ0FnSUM4dklDUkdiRzkzU1hOemRXVWdMU0IyWlc1a2IzSWdjSEpsWm1sNElHMXBjM05wYm1jZ1puSnZiU0JHYkc5M1hHNGdJQ0FnWld4bGJXVnVkQzUzWldKcmFYUlNaWEYxWlhOMFJuVnNiSE5qY21WbGJpZ3BPMXh1SUNBZ0lDOHZJQ1JHYkc5M1NYTnpkV1VnTFNCMlpXNWtiM0lnY0hKbFptbDRJRzFwYzNOcGJtY2dabkp2YlNCR2JHOTNYRzRnSUgwZ1pXeHpaU0JwWmlBb1pXeGxiV1Z1ZEM1dGIzcFNaWEYxWlhOMFJuVnNiRk5qY21WbGJpa2dlMXh1SUNBZ0lDOHZJQ1JHYkc5M1NYTnpkV1VnTFNCMlpXNWtiM0lnY0hKbFptbDRJRzFwYzNOcGJtY2dabkp2YlNCR2JHOTNYRzRnSUNBZ1pXeGxiV1Z1ZEM1dGIzcFNaWEYxWlhOMFJuVnNiRk5qY21WbGJpZ3BPMXh1SUNBZ0lDOHZJQ1JHYkc5M1NYTnpkV1VnTFNCMlpXNWtiM0lnY0hKbFptbDRJRzFwYzNOcGJtY2dabkp2YlNCR2JHOTNYRzRnSUgwZ1pXeHpaU0JwWmlBb1pXeGxiV1Z1ZEM1dGMxSmxjWFZsYzNSR2RXeHNjMk55WldWdUtTQjdYRzRnSUNBZ0x5OGdKRVpzYjNkSmMzTjFaU0F0SUhabGJtUnZjaUJ3Y21WbWFYZ2diV2x6YzJsdVp5Qm1jbTl0SUVac2IzZGNiaUFnSUNCbGJHVnRaVzUwTG0xelVtVnhkV1Z6ZEVaMWJHeHpZM0psWlc0b0tUdGNiaUFnZlZ4dWZUdGNibHh1WTI5dWMzUWdaWGhwZEVaMWJHeHpZM0psWlc0Z1BTQW9LU0E5UGlCN1hHNGdJR2xtSUNoa2IyTjFiV1Z1ZEM1bGVHbDBSblZzYkhOamNtVmxiaWtnZTF4dUlDQWdJR1J2WTNWdFpXNTBMbVY0YVhSR2RXeHNjMk55WldWdUtDazdYRzRnSUNBZ0x5OGdKRVpzYjNkSmMzTjFaU0F0SUhabGJtUnZjaUJ3Y21WbWFYZ2diV2x6YzJsdVp5Qm1jbTl0SUVac2IzZGNiaUFnZlNCbGJITmxJR2xtSUNoa2IyTjFiV1Z1ZEM1M1pXSnJhWFJGZUdsMFJuVnNiSE5qY21WbGJpa2dlMXh1SUNBZ0lDOHZJQ1JHYkc5M1NYTnpkV1VnTFNCMlpXNWtiM0lnY0hKbFptbDRJRzFwYzNOcGJtY2dabkp2YlNCR2JHOTNYRzRnSUNBZ1pHOWpkVzFsYm5RdWQyVmlhMmwwUlhocGRFWjFiR3h6WTNKbFpXNG9LVHRjYmlBZ0lDQXZMeUFrUm14dmQwbHpjM1ZsSUMwZ2RtVnVaRzl5SUhCeVpXWnBlQ0J0YVhOemFXNW5JR1p5YjIwZ1JteHZkMXh1SUNCOUlHVnNjMlVnYVdZZ0tHUnZZM1Z0Wlc1MExtMXZla05oYm1ObGJFWjFiR3hUWTNKbFpXNHBJSHRjYmlBZ0lDQXZMeUFrUm14dmQwbHpjM1ZsSUMwZ2RtVnVaRzl5SUhCeVpXWnBlQ0J0YVhOemFXNW5JR1p5YjIwZ1JteHZkMXh1SUNBZ0lHUnZZM1Z0Wlc1MExtMXZla05oYm1ObGJFWjFiR3hUWTNKbFpXNG9LVHRjYmlBZ0lDQXZMeUFrUm14dmQwbHpjM1ZsSUMwZ2RtVnVaRzl5SUhCeVpXWnBlQ0J0YVhOemFXNW5JR1p5YjIwZ1JteHZkMXh1SUNCOUlHVnNjMlVnYVdZZ0tHUnZZM1Z0Wlc1MExtMXpSWGhwZEVaMWJHeHpZM0psWlc0cElIdGNiaUFnSUNBdkx5QWtSbXh2ZDBsemMzVmxJQzBnZG1WdVpHOXlJSEJ5WldacGVDQnRhWE56YVc1bklHWnliMjBnUm14dmQxeHVJQ0FnSUdSdlkzVnRaVzUwTG0xelJYaHBkRVoxYkd4elkzSmxaVzRvS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnVG05eWJXRnNiSGtnWkc5amRXMWxiblF1Wm5Wc2JITmpjbVZsYmlCemRXWm1hV05sY3lCb1pYSmxJR0Z6SUdFZ1pteGhaeXdnWW5WMElFbEZNVEVnWkc5bGN5QnViM1JjYmk4dklHaGhkbVVnWVNCMlpXNWtiM0lnYzNCbFkybG1hV01nZG1WeWMybHZiaUJ6YnlCM1pTQnRkWE4wSUdsdWMzUmxZV1FnZFhObElIUm9aU0JoWTNSMVlXd2daV3hsYldWdWRGeHVZMjl1YzNRZ2FYTkdkV3hzYzJOeVpXVnVJRDBnS0NrZ1BUNWNiaUFnWkc5amRXMWxiblF1Wm5Wc2JITmpjbVZsYmtWc1pXMWxiblFnZkh4Y2JpQWdMeThnSkVac2IzZEpjM04xWlNBdElIWmxibVJ2Y2lCd2NtVm1hWGdnYldsemMybHVaeUJtY205dElFWnNiM2RjYmlBZ1pHOWpkVzFsYm5RdWQyVmlhMmwwUm5Wc2JITmpjbVZsYmtWc1pXMWxiblFnZkh4Y2JpQWdMeThnSkVac2IzZEpjM04xWlNBdElIWmxibVJ2Y2lCd2NtVm1hWGdnYldsemMybHVaeUJtY205dElFWnNiM2RjYmlBZ1pHOWpkVzFsYm5RdWJXOTZSblZzYkZOamNtVmxia1ZzWlcxbGJuUWdmSHhjYmlBZ0x5OGdKRVpzYjNkSmMzTjFaU0F0SUhabGJtUnZjaUJ3Y21WbWFYZ2diV2x6YzJsdVp5Qm1jbTl0SUVac2IzZGNiaUFnWkc5amRXMWxiblF1YlhOR2RXeHNjMk55WldWdVJXeGxiV1Z1ZER0Y2JseHVZMjl1YzNRZ1lXUmtSblZzYkhOamNtVmxia1YyWlc1MFRHbHpkR1Z1WlhJZ1BTQW9iR2x6ZEdWdVpYSTZJRVYyWlc1MFRHbHpkR1Z1WlhJcElEMCtJSHRjYmlBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblpuVnNiSE5qY21WbGJtTm9ZVzVuWlNjc0lHeHBjM1JsYm1WeUtUdGNiaUFnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZDJWaWEybDBablZzYkhOamNtVmxibU5vWVc1blpTY3NJR3hwYzNSbGJtVnlLVHRjYmlBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTZablZzYkhOamNtVmxibU5vWVc1blpTY3NJR3hwYzNSbGJtVnlLVHRjYmlBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblRWTkdkV3hzYzJOeVpXVnVRMmhoYm1kbEp5d2diR2x6ZEdWdVpYSXBPMXh1ZlR0Y2JseHVZMjl1YzNRZ2NtVnRiM1psUm5Wc2JITmpjbVZsYmtWMlpXNTBUR2x6ZEdWdVpYSWdQU0FvYkdsemRHVnVaWEk2SUVWMlpXNTBUR2x6ZEdWdVpYSXBJRDArSUh0Y2JpQWdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduWm5Wc2JITmpjbVZsYm1Ob1lXNW5aU2NzSUd4cGMzUmxibVZ5S1R0Y2JpQWdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduZDJWaWEybDBablZzYkhOamNtVmxibU5vWVc1blpTY3NJR3hwYzNSbGJtVnlLVHRjYmlBZ1pHOWpkVzFsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzk2Wm5Wc2JITmpjbVZsYm1Ob1lXNW5aU2NzSUd4cGMzUmxibVZ5S1R0Y2JpQWdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduVFZOR2RXeHNjMk55WldWdVEyaGhibWRsSnl3Z2JHbHpkR1Z1WlhJcE8xeHVmVHRjYmx4dVkyOXVjM1FnYVhOT1pYZFRiM1Z5WTJVZ1BTQW9iMnhrVTI5MWNtTmxPaUJUYjNWeVkyVXNJRzVsZDFOdmRYSmpaVG9nVTI5MWNtTmxLVG9nWW05dmJHVmhiaUE5UGlCN1hHNGdJR2xtSUNoMGVYQmxiMllnYjJ4a1UyOTFjbU5sSUNFOVBTQjBlWEJsYjJZZ2JtVjNVMjkxY21ObEtTQjdYRzRnSUNBZ0x5OGdTV1lnZEdobElITnZkWEpqWlNCMGVYQmxJR05vWVc1blpXUWdabkp2YlNCemRISnBibWNnZEc4Z1FYSnlZWGxjYmlBZ0lDQXZMeUJ2Y2lCMmFXTmxJSFpsY25OaExDQjNaU0JvWVhabElHRWdibVYzSUhOdmRYSmpaVnh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLRzVsZDFOdmRYSmpaU2twSUh0Y2JpQWdJQ0JwWmlBb2IyeGtVMjkxY21ObExteGxibWQwYUNBaFBUMGdibVYzVTI5MWNtTmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdMeThnU1dZZ2RHaGxJSE52ZFhKalpYTWdZWEpsSUdKdmRHZ2dZVzRnUVhKeVlYa3NJR0Z1WkNCMGFHVWdiR1Z1WjNSb2MxeHVJQ0FnSUNBZ0x5OGdaRzhnYm05MElHMWhkR05vSUhkbElHVjJZV3gxWVhSbElHRnpJR0VnYm1WM0lITnZkWEpqWlZ4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVsbUlIUm9aU0J6YjNWeVkyVnpJR0Z5WlNCaWIzUm9JR0Z1SUVGeWNtRjVJR0Z1WkNCMGFHVWdjMkZ0WlNCc1pXNW5kR2dzWEc0Z0lDQWdMeThnZG1WeWFXWjVJR1YyWlhKNUlHVnNaVzFsYm5RZ2MzUmhlV1ZrSUhSb1pTQnpZVzFsWEc0Z0lDQWdjbVYwZFhKdUlHNWxkMU52ZFhKalpTNXpiMjFsS0Z4dUlDQWdJQ0FnS0hOdmRYSmpaU3dnYVc1a1pYZ3BJRDArWEc0Z0lDQWdJQ0FnSUNGQmNuSmhlUzVwYzBGeWNtRjVLRzlzWkZOdmRYSmpaU2tnZkh4Y2JpQWdJQ0FnSUNBZ2MyOTFjbU5sTG5SNWNHVWdJVDA5SUc5c1pGTnZkWEpqWlZ0cGJtUmxlRjB1ZEhsd1pTQjhmRnh1SUNBZ0lDQWdJQ0J6YjNWeVkyVXVjM0pqSUNFOVBTQnZiR1JUYjNWeVkyVmJhVzVrWlhoZExuTnlZMXh1SUNBZ0lDazdYRzRnSUgxY2JpQWdMeThnU1dZZ2RHaGxJSE52ZFhKalpYTWdZWEpsSUdKdmRHZ2dZU0J6ZEhKcGJtY3NJSE5wYlhCc2VTQmpiMjF3WVhKbFhHNGdJQzh2SUhSb1pTQnVaWGNnZDJsMGFDQjBhR1VnYjJ4a1hHNGdJSEpsZEhWeWJpQnVaWGRUYjNWeVkyVWdJVDA5SUc5c1pGTnZkWEpqWlR0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGWnBaR1Z2SUdWNGRHVnVaSE1nVW1WaFkzUXVVSFZ5WlVOdmJYQnZibVZ1ZER4UWNtOXdjeXdnVTNSaGRHVStJSHRjYmlBZ2RtbGtaVzg2SUQ5SVZFMU1WbWxrWlc5RmJHVnRaVzUwTzF4dVhHNGdJSEJzWVhsbGNqb2dQMGhVVFV4RWFYWkZiR1Z0Wlc1ME8xeHVYRzRnSUhOMFlYUnBZeUJ3Y205d1ZIbHdaWE1nUFNCN1hHNGdJQ0FnWVdOalpYTnphV0pwYkdsMGVVMWhlR2x0YVhwbFRHRmlaV3c2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZV05qWlhOemFXSnBiR2wwZVUxcGJtbHRhWHBsVEdGaVpXdzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ1lXTmpaWE56YVdKcGJHbDBlVTExZEdWTVlXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmhZMk5sYzNOcFltbHNhWFI1VUdGMWMyVk1ZV0psYkRvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0JoWTJObGMzTnBZbWxzYVhSNVVHeGhlVXhoWW1Wc09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdGalkyVnpjMmxpYVd4cGRIbFZibTExZEdWTVlXSmxiRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmhjM0JsWTNSU1lYUnBiem9nVUhKdmNGUjVjR1Z6TG01MWJXSmxjaTVwYzFKbGNYVnBjbVZrTEZ4dUlDQWdJR05oY0hScGIyNXpPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdZMmhwYkdSeVpXNDZJRkJ5YjNCVWVYQmxjeTV1YjJSbExGeHVJQ0FnSUdOdmJuUnliMnh6T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnNiMjl3T2lCUWNtOXdWSGx3WlhNdVltOXZiQ3hjYmlBZ0lDQnZia1IxY21GMGFXOXVRMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmtWdVpHVmtPaUJRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNCdmJrWjFiR3h6WTNKbFpXNURhR0Z1WjJVNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1VEc5aFpHVmtRMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmxCc1lYazZJRkJ5YjNCVWVYQmxjeTVtZFc1akxGeHVJQ0FnSUc5dVVHRjFjMlU2SUZCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lHOXVVbVZoWkhrNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJRzl1VTJWbGF6b2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnYjI1VWFXMWxRMmhoYm1kbE9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0J2YmxadmJIVnRaVU5vWVc1blpUb2dVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnY0d4aGVXSmhZMnRTWVhSbE9pQlFjbTl3Vkhsd1pYTXViblZ0WW1WeUxGeHVJQ0FnSUhCc1lYbHBibWM2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lIQnNZWGx6U1c1c2FXNWxPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCd2IzTjBaWEk2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdjSEpsYkc5aFpEb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bUtGc25ZWFYwYnljc0lDZHRaWFJoWkdGMFlTY3NJQ2R1YjI1bEoxMHBMRnh1SUNBZ0lITnlZem9nVUhKdmNGUjVjR1Z6TG05dVpVOW1WSGx3WlNoYlhHNGdJQ0FnSUNCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnVUhKdmNGUjVjR1Z6TG1GeWNtRjVUMllvWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emFHRndaU2g3WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nVUhKdmNGUjVjR1Z6TG05dVpVOW1LRnNuZG1sa1pXOHZiVE4xT0Njc0lDZDJhV1JsYnk5dGNEUW5MQ0FuZG1sa1pXOHZiMmRuSjEwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0FnSUNBZ0lDQnpjbU02SUZCeWIzQlVlWEJsY3k1emRISnBibWN1YVhOU1pYRjFhWEpsWkN4Y2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDa3NYRzRnSUNBZ1hTa3VhWE5TWlhGMWFYSmxaQ3hjYmlBZ0lDQjJiMngxYldVNklGQnliM0JVZVhCbGN5NXVkVzFpWlhJc1hHNGdJSDA3WEc1Y2JpQWdjM1JoZEdsaklHUmxabUYxYkhSUWNtOXdjeUE5SUh0Y2JpQWdJQ0J3YkdGNVltRmphMUpoZEdVNklERXNYRzRnSUNBZ2NHeGhlV2x1WnpvZ1ptRnNjMlVzWEc0Z0lDQWdjSEpsYkc5aFpEb2dKMkYxZEc4bkxGeHVJQ0FnSUhadmJIVnRaVG9nTVN4Y2JpQWdmVHRjYmx4dUlDQnpkR0YwWlNBOUlIdGNiaUFnSUNCamRYSnlaVzUwVkdsdFpUb2dNQ3hjYmlBZ0lDQmtkWEpoZEdsdmJqb2dNQ3hjYmlBZ0lDQm1kV3hzYzJOeVpXVnVPaUJtWVd4elpTeGNiaUFnZlR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WaFkzUWdiR2xtWldONVkyeGxJR2h2YjJ0eklIQmxjblJwYm1WdWRDQjBieUJXYVdSbGIxeHVJQ0FnS2k5Y2JseHVJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJSEJzWVhsaVlXTnJVbUYwWlN3Z2NHeGhlV2x1Wnl3Z2RtOXNkVzFsSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lDOHZJRk5sZENCMWNDQmxkbVZ1ZENCc2FYTjBaVzVsY25NZ2RHOGdZMkYwWTJnZ1ltRmphMlJ2YjNKeklHbHVJR1oxYkd4elkzSmxaVzVjYmlBZ0lDQXZMeUJqYUdGdVoyVnpJSE4xWTJnZ1lYTWdkWE5wYm1jZ2RHaGxJRVZUUXlCclpYa2dkRzhnWlhocGRGeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHOWpkVzFsYm5RZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNCaFpHUkdkV3hzYzJOeVpXVnVSWFpsYm5STWFYTjBaVzVsY2loMGFHbHpMbWhoYm1Sc1pVWjFiR3h6WTNKbFpXNURhR0Z1WjJVcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2THlCTWIyRmtJSFJvWlNCMmFXUmxieUIwYnlCb2VXUnlZWFJsSUhSb1pTQkVUMDBnWVdaMFpYSWdZU0J6WlhKMlpYSWdjbVZ1WkdWeVhHNGdJQ0FnZEdocGN5NXNiMkZrS0NrN1hHNGdJQ0FnTHk4Z1UyVjBJSFJvWlNCcGJtbDBhV0ZzSUhadmJIVnRaVnh1SUNBZ0lIUm9hWE11YzJWMFZtOXNkVzFsS0hadmJIVnRaU2s3WEc0Z0lDQWdMeThnVTJWMElIUm9aU0JwYm1sMGFXRnNJSEJzWVhsaVlXTnJJSEpoZEdWY2JpQWdJQ0IwYUdsekxuTmxkRkJzWVhsaVlXTnJVbUYwWlNod2JHRjVZbUZqYTFKaGRHVXBPMXh1SUNBZ0lDOHZJRk5wYlhWc1lYUmxJR0Z1SUdGMWRHOXdiR0Y1SUdWbVptVmpkQ0JwWmlCMGFHVWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ2FXWWdLSEJzWVhscGJtY3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWNHeGhlU2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNod2NtVjJVSEp2Y0hNNklGQnliM0J6S1NCN1hHNGdJQ0FnTHk4Z1NXWWdkR2hsSUhacFpHVnZJSE52ZFhKalpTQmphR0Z1WjJWa0xDQnlaV3h2WVdRZ2RHaGxJSFpwWkdWdlhHNGdJQ0FnYVdZZ0tHbHpUbVYzVTI5MWNtTmxLSEJ5WlhaUWNtOXdjeTV6Y21Nc0lIUm9hWE11Y0hKdmNITXVjM0pqS1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVzYjJGa0tDazdYRzRnSUNBZ2ZWeHVJQ0FnSUM4dklFbG1JSFJvWlNCMmIyeDFiV1VnWTJoaGJtZGxaQ3dnYzJWMElIUm9aU0J1WlhjZ2RtOXNkVzFsWEc0Z0lDQWdhV1lnS0hCeVpYWlFjbTl3Y3k1MmIyeDFiV1VnSVQwOUlIUm9hWE11Y0hKdmNITXVkbTlzZFcxbEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5ObGRGWnZiSFZ0WlNoMGFHbHpMbkJ5YjNCekxuWnZiSFZ0WlNrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUVsbUlIUm9aU0J3YkdGNVltRmpheUJ5WVhSbElHTm9ZVzVuWldRc0lITmxkQ0IwYUdVZ2JtVjNJSEpoZEdWY2JpQWdJQ0JwWmlBb2NISmxkbEJ5YjNCekxuQnNZWGxpWVdOclVtRjBaU0FoUFQwZ2RHaHBjeTV3Y205d2N5NXdiR0Y1WW1GamExSmhkR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjMlYwVUd4aGVXSmhZMnRTWVhSbEtIUm9hWE11Y0hKdmNITXVjR3hoZVdKaFkydFNZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnU1dZZ2RHaGxJSEJzWVhsaVlXTnJJR05vWVc1blpXUXNJSEJzWVhrZ2IzSWdjR0YxYzJVZ2RHaGxJSFpwWkdWdlhHNGdJQ0FnYVdZZ0tIQnlaWFpRY205d2N5NXdiR0Y1YVc1bklDRTlQU0IwYUdsekxuQnliM0J6TG5Cc1lYbHBibWNwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbkJzWVhscGJtY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiR0Y1S0NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJoZFhObEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdZMjl0Y0c5dVpXNTBWMmxzYkZWdWJXOTFiblFvS1NCN1hHNGdJQ0FnY21WdGIzWmxSblZzYkhOamNtVmxia1YyWlc1MFRHbHpkR1Z1WlhJb2RHaHBjeTVvWVc1a2JHVkdkV3hzYzJOeVpXVnVRMmhoYm1kbEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJFVDAwZ2NtVm1aWEpsYm1ObElHaHZkWE5sYTJWbGNHbHVaeUIwYUdGMElHbHpJRzVsWldSbFpDQm1iM0lnWm5WdVkzUnBiMjVoYkdsMGVWeHVJQ0FnS2k5Y2JseHVJQ0F2THlCVWFHVWdjR3hoZVdWeUlHVnNaVzFsYm5RZ1pXNWpZWEJ6ZFd4aGRHVnpJSFJvWlNCaFkzUjFZV3dnZG1sa1pXOGdSRTlOWEc0Z0lDOHZJR1ZzWlcxbGJuUWdZWE1nZDJWc2JDQmhjeUIwYUdVZ1kyOXVkSEp2YkhNZ2RHOGdZbkpwYm1jZ1ltOTBhQ0JtZFd4c2MyTnlaV1Z1WEc0Z0lITmxkRkJzWVhsbGNsSmxaaUE5SUNoeVpXWTZJRDlJVkUxTVJHbDJSV3hsYldWdWRDa2dQVDRnZTF4dUlDQWdJSFJvYVhNdWNHeGhlV1Z5SUQwZ2NtVm1PMXh1SUNCOU8xeHVYRzRnSUM4dklGUm9aU0JoWTNSMVlXd2djbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQjJhV1JsYnlCSVZFMU1JRVJQVFNCbGJHVnRaVzUwWEc0Z0lITmxkRlpwWkdWdlVtVm1JRDBnS0hKbFpqb2dQMGhVVFV4V2FXUmxiMFZzWlcxbGJuUXBJRDArSUh0Y2JpQWdJQ0IwYUdsekxuWnBaR1Z2SUQwZ2NtVm1PMXh1SUNCOU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCR2RXNWpkR2x2Ym5NZ2RHaGhkQ0JrYVhKbFkzUnNlU0JwYm5SbGNtRmpkQ0IzYVhSb0lIUm9aU0JJVkUxTUlIWnBaR1Z2SUdWc1pXMWxiblJjYmlBZ0lDb3ZYRzVjYmlBZ0x5OGdVMlYwSUhSb1pTQjJhV1JsYnlCMGJ5QjBhR1VnWkdWemFYSmxaQ0J3YkdGNVltRmpheUJ5WVhSbE9pQXhJQ2h1YjNKdFlXd3BYRzRnSUhObGRGQnNZWGxpWVdOclVtRjBaU0E5SUNod2JHRjVZbUZqYTFKaGRHVTZJRzUxYldKbGNpa2dQVDRnZTF4dUlDQWdJR2xtSUNoMGFHbHpMblpwWkdWdktTQjdYRzRnSUNBZ0lDQjBhR2x6TG5acFpHVnZMbkJzWVhsaVlXTnJVbUYwWlNBOUlIQnNZWGxpWVdOclVtRjBaVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnTHk4Z1UyVjBJSFJvWlNCMmFXUmxieUIwYnlCMGFHVWdaR1Z6YVhKbFpDQjJiMngxYldVNklEQWdLRzExZEdWa0tTQXRQaUF4SUNodFlYZ3BYRzRnSUhObGRGWnZiSFZ0WlNBOUlDaDJiMngxYldVNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuWnBaR1Z2S1NCN1hHNGdJQ0FnSUNCMGFHbHpMblpwWkdWdkxuWnZiSFZ0WlNBOUlIWnZiSFZ0WlR0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRMmhoYm1kbElIUm9aU0IyYVdSbGJ5QnpiM1Z5WTJVZ1lXNWtJSEpsTFd4dllXUWdkR2hsSUhacFpHVnZYRzRnSUd4dllXUWdQU0FvS1NBOVBpQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWRtbGtaVzhnSmlZZ2RHaHBjeTUyYVdSbGJ5NXNiMkZrS1NCN1hHNGdJQ0FnSUNCMGFHbHpMblpwWkdWdkxteHZZV1FvS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVR0YxYzJVZ2RHaGxJSFpwWkdWdlhHNGdJSEJoZFhObElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5acFpHVnZLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuWnBaR1Z2TG5CaGRYTmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUM4dklGQnNZWGtnZEdobElIWnBaR1Z2WEc0Z0lIQnNZWGtnUFNBb0tTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVkbWxrWlc4cElIdGNiaUFnSUNBZ0lIUm9hWE11ZG1sa1pXOHVjR3hoZVNncE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZMeUJUWldWcklIUm9aU0IyYVdSbGJ5QjBieUIwYUdVZ1pHVnphWEpsWkNCMGFXMWxYRzRnSUhObFpXc2dQU0FvZEdsdFpUb2diblZ0WW1WeUtTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSb2FYTXVkbWxrWlc4cElIdGNiaUFnSUNBZ0lIUm9hWE11ZG1sa1pXOHVZM1Z5Y21WdWRGUnBiV1VnUFNCMGFXMWxPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0F2THlCRmJuUmxjaTlsZUdsMElHWjFiR3h6WTNKbFpXNGdkbWxrWlc4Z2NHeGhlV1Z5SUcxdlpHVmNiaUFnZEc5bloyeGxSblZzYkhOamNtVmxiaUE5SUNncElEMCtJSHRjYmlBZ0lDQnBaaUFvYVhOR2RXeHNjMk55WldWdUtDa3BJSHRjYmlBZ0lDQWdJR1Y0YVhSR2RXeHNjMk55WldWdUtDazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5Cc1lYbGxjaWtnZTF4dUlDQWdJQ0FnY21WeGRXVnpkRVoxYkd4elkzSmxaVzRvZEdocGN5NXdiR0Y1WlhJcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTR0Z1Wkd4bGNuTWdabTl5SUhaaGNtbHZkWE1nYldWa2FXRWdaWFpsYm5SeklHOXVJSFJvWlNCMmFXUmxiMXh1SUNBZ0tpOWNibHh1SUNBdkx5QlRaVzUwSUhkb1pXNGdaVzV2ZFdkb0lHUmhkR0VnYVhNZ1lYWmhhV3hoWW14bElIUm9ZWFFnZEdobElHMWxaR2xoSUdOaGJpQmlaU0J3YkdGNVpXUmNiaUFnYUdGdVpHeGxRMkZ1VUd4aGVTQTlJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpSWFpsYm5ROFNGUk5URlpwWkdWdlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVVbVZoWkhrZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JwWmlBb2IyNVNaV0ZrZVNrZ2UxeHVJQ0FnSUNBZ2IyNVNaV0ZrZVNoN0lHVjJaVzUwSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZMeUJVYUdVZ2JXVjBZV1JoZEdFZ2FHRnpJR3h2WVdSbFpDQnZjaUJqYUdGdVoyVmtMQ0JwYm1ScFkyRjBhVzVuSUdFZ1kyaGhibWRsSUdsdVhHNGdJQzh2SUdSMWNtRjBhVzl1SUc5bUlIUm9aU0J0WldScFlWeHVJQ0JvWVc1a2JHVkVkWEpoZEdsdmJrTm9ZVzVuWlNBOUlDaGxkbVZ1ZERvZ1UzbHVkR2hsZEdsalJYWmxiblE4U0ZSTlRGWnBaR1Z2Uld4bGJXVnVkRDRwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVJIVnlZWFJwYjI1RGFHRnVaMlVnZlNBOUlIUm9hWE11Y0hKdmNITTdYRzRnSUNBZ1kyOXVjM1FnWkhWeVlYUnBiMjRnUFNBb2RHaHBjeTUyYVdSbGJ5QW1KaUIwYUdsekxuWnBaR1Z2TG1SMWNtRjBhVzl1S1NCOGZDQXdPMXh1SUNBZ0lIUm9hWE11YzJWMFUzUmhkR1VvZXlCa2RYSmhkR2x2YmlCOUtUdGNibHh1SUNBZ0lHbG1JQ2h2YmtSMWNtRjBhVzl1UTJoaGJtZGxLU0I3WEc0Z0lDQWdJQ0J2YmtSMWNtRjBhVzl1UTJoaGJtZGxLSHNnWlhabGJuUXNJR1IxY21GMGFXOXVJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNBdkx5QlRaVzUwSUhkb1pXNGdjR3hoZVdKaFkyc2dZMjl0Y0d4bGRHVnpMbHh1SUNCb1lXNWtiR1ZGYm1SbFpDQTlJQ2hsZG1WdWREb2dVM2x1ZEdobGRHbGpSWFpsYm5ROFNGUk5URlpwWkdWdlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVSVzVrWldRZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JwWmlBb2IyNUZibVJsWkNrZ2UxeHVJQ0FnSUNBZ2IyNUZibVJsWkNoN0lHVjJaVzUwSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQXZMeUJUWlc1MElIZG9aVzRnZEdobElIWnBaR1Z2SUdseklITjNhWFJqYUdWa0lIUnZMMjkxZEMxdlppQm1kV3hzYzJOeVpXVnVJRzF2WkdWY2JpQWdhR0Z1Wkd4bFJuVnNiSE5qY21WbGJrTm9ZVzVuWlNBOUlDaGxkbVZ1ZERvZ1JYWmxiblFwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0I3SUc5dVJuVnNiSE5qY21WbGJrTm9ZVzVuWlNCOUlEMGdkR2hwY3k1d2NtOXdjenRjYmlBZ0lDQmpiMjV6ZENCbWRXeHNjMk55WldWdUlEMGdJU0ZwYzBaMWJHeHpZM0psWlc0b0tUdGNiaUFnSUNCMGFHbHpMbk5sZEZOMFlYUmxLSHNnWm5Wc2JITmpjbVZsYmlCOUtUdGNibHh1SUNBZ0lHbG1JQ2h2YmtaMWJHeHpZM0psWlc1RGFHRnVaMlVwSUh0Y2JpQWdJQ0FnSUc5dVJuVnNiSE5qY21WbGJrTm9ZVzVuWlNoN0lHVjJaVzUwTENCbWRXeHNjMk55WldWdUlIMHBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0F2THlCVFpXNTBJSGRvWlc0Z2NHeGhlV0poWTJzZ2IyWWdkR2hsSUcxbFpHbGhJSE4wWVhKMGN5QmhablJsY2lCb1lYWnBibWNnWW1WbGJpQndZWFZ6WldRdVhHNGdJR2hoYm1Sc1pWQnNZWGtnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTBWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2diMjVRYkdGNUlIMGdQU0IwYUdsekxuQnliM0J6TzF4dVhHNGdJQ0FnYVdZZ0tHOXVVR3hoZVNrZ2UxeHVJQ0FnSUNBZ2IyNVFiR0Y1S0hzZ1pYWmxiblFnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lDOHZJRk5sYm5RZ2QyaGxiaUJ0YjNWelpTQmtiM2R1SUdWMlpXNTBJR2hoY0hCbGJuTWdiMjRnY0d4aGVXaGxZV1JjYmlBZ2FHRnVaR3hsVUd4aGVXaGxZV1JFYjNkdUlEMGdLR1YyWlc1ME9pQlRlVzUwYUdWMGFXTk5iM1Z6WlVWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2diMjVRYkdGNWFHVmhaRVJ2ZDI0Z2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JwWmlBb2IyNVFiR0Y1YUdWaFpFUnZkMjRwSUh0Y2JpQWdJQ0FnSUc5dVVHeGhlV2hsWVdSRWIzZHVLSHNnWlhabGJuUWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUM4dklGTmxiblFnZDJobGJpQnRiM1Z6WlNCMWNDQmxkbVZ1ZENCb1lYQndaVzV6SUc5dUlIQnNZWGxvWldGa1hHNGdJR2hoYm1Sc1pWQnNZWGxvWldGa1ZYQWdQU0FvWlhabGJuUTZJRk41Ym5Sb1pYUnBZMDF2ZFhObFJYWmxiblE4U0ZSTlRFUnBka1ZzWlcxbGJuUStLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdleUJ2YmxCc1lYbG9aV0ZrVlhBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0JwWmlBb2IyNVFiR0Y1YUdWaFpGVndLU0I3WEc0Z0lDQWdJQ0J2YmxCc1lYbG9aV0ZrVlhBb2V5QmxkbVZ1ZENCOUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdMeThnVTJWdWRDQjNhR1Z1SUhCc1lYbGlZV05ySUdseklIQmhkWE5sWkM1Y2JpQWdhR0Z1Wkd4bFVHRjFjMlVnUFNBb1pYWmxiblE2SUZONWJuUm9aWFJwWTBWMlpXNTBQRWhVVFV4RWFYWkZiR1Z0Wlc1MFBpa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIc2diMjVRWVhWelpTQjlJRDBnZEdocGN5NXdjbTl3Y3p0Y2JseHVJQ0FnSUdsbUlDaHZibEJoZFhObEtTQjdYRzRnSUNBZ0lDQnZibEJoZFhObEtIc2daWFpsYm5RZ2ZTazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJQzh2SUZObGJuUWdjR1Z5YVc5a2FXTmhiR3g1SUhSdklHbHVabTl5YlNCcGJuUmxjbVZ6ZEdWa0lIQmhjblJwWlhNZ2IyWWdjSEp2WjNKbGMzTWdaRzkzYm14dllXUnBibWNnZEdobElHMWxaR2xoWEc0Z0lHaGhibVJzWlZCeWIyZHlaWE56SUQwZ0tHVjJaVzUwT2lCVGVXNTBhR1YwYVdORmRtVnVkRHhJVkUxTVZtbGtaVzlGYkdWdFpXNTBQaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJSHNnYjI1TWIyRmtaV1JEYUdGdVoyVWdmU0E5SUhSb2FYTXVjSEp2Y0hNN1hHNGdJQ0FnWTI5dWMzUWdleUJpZFdabVpYSmxaQ0I5SUQwZ2RHaHBjeTUyYVdSbGJ5QjhmQ0I3ZlR0Y2JpQWdJQ0JqYjI1emRDQnNiMkZrWldRZ1BWeHVJQ0FnSUNBZ1luVm1abVZ5WldRZ0ppWWdZblZtWm1WeVpXUXViR1Z1WjNSb0lENGdNQ0EvSUdKMVptWmxjbVZrTG1WdVpDaGlkV1ptWlhKbFpDNXNaVzVuZEdnZ0xTQXhLU0E2SURBN1hHNWNiaUFnSUNCcFppQW9iMjVNYjJGa1pXUkRhR0Z1WjJVcElIdGNiaUFnSUNBZ0lHOXVURzloWkdWa1EyaGhibWRsS0hzZ1pYWmxiblFzSUd4dllXUmxaQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVMlZ1ZENCM2FHVnVJR0VnYzJWbGF5QnZjR1Z5WVhScGIyNGdZMjl0Y0d4bGRHVnpMbHh1SUNCb1lXNWtiR1ZUWldWcklEMGdLR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkZkbVZ1ZER4SVZFMU1WbWxrWlc5RmJHVnRaVzUwUGlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNVRaV1ZySUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdhV1lnS0c5dVUyVmxheWtnZTF4dUlDQWdJQ0FnYjI1VFpXVnJLSHNnWlhabGJuUWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUM4dklGUm9aU0IwYVcxbElHbHVaR2xqWVhSbFpDQmllU0IwYUdVZ1pXeGxiV1Z1ZENkeklHTjFjbkpsYm5SVWFXMWxJR0YwZEhKcFluVjBaU0JvWVhNZ1kyaGhibWRsWkZ4dUlDQm9ZVzVrYkdWVWFXMWxWWEJrWVhSbElEMGdLR1YyWlc1ME9pQlRlVzUwYUdWMGFXTkZkbVZ1ZER4SVZFMU1WbWxrWlc5RmJHVnRaVzUwUGlrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhzZ2IyNVVhVzFsUTJoaGJtZGxJSDBnUFNCMGFHbHpMbkJ5YjNCek8xeHVJQ0FnSUdOdmJuTjBJR04xY25KbGJuUlVhVzFsSUQwZ0tIUm9hWE11ZG1sa1pXOGdKaVlnZEdocGN5NTJhV1JsYnk1amRYSnlaVzUwVkdsdFpTa2dmSHdnTUR0Y2JpQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIc2dZM1Z5Y21WdWRGUnBiV1VnZlNrN1hHNWNiaUFnSUNCcFppQW9iMjVVYVcxbFEyaGhibWRsS1NCN1hHNGdJQ0FnSUNCdmJsUnBiV1ZEYUdGdVoyVW9leUJsZG1WdWRDd2dkR2x0WlRvZ1kzVnljbVZ1ZEZScGJXVWdmU2s3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUM4dklGTmxiblFnZDJobGJpQjBhR1VnWVhWa2FXOGdkbTlzZFcxbElHTm9ZVzVuWlhOY2JpQWdhR0Z1Wkd4bFZtOXNkVzFsUTJoaGJtZGxJRDBnS0dWMlpXNTBPaUJUZVc1MGFHVjBhV05GZG1WdWREeElWRTFNUkdsMlJXeGxiV1Z1ZEQ0cElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHOXVWbTlzZFcxbFEyaGhibWRsSUgwZ1BTQjBhR2x6TG5CeWIzQnpPMXh1SUNBZ0lHTnZibk4wSUcxMWRHVmtJRDBnS0hSb2FYTXVkbWxrWlc4Z0ppWWdkR2hwY3k1MmFXUmxieTV0ZFhSbFpDa2dmSHdnWm1Gc2MyVTdYRzVjYmlBZ0lDQnBaaUFvYjI1V2IyeDFiV1ZEYUdGdVoyVXBJSHRjYmlBZ0lDQWdJRzl1Vm05c2RXMWxRMmhoYm1kbEtIc2daWFpsYm5Rc0lIWnZiSFZ0WlRvZ2JYVjBaV1FnUHlBeElEb2dNQ0I5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2NtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJR0Z6Y0dWamRGSmhkR2x2TEZ4dUlDQWdJQ0FnWTJGd2RHbHZibk1zWEc0Z0lDQWdJQ0JqYUdsc1pISmxiaXhjYmlBZ0lDQWdJR3h2YjNBc1hHNGdJQ0FnSUNCd2JHRjVhVzVuTEZ4dUlDQWdJQ0FnY0d4aGVYTkpibXhwYm1Vc1hHNGdJQ0FnSUNCd2IzTjBaWElzWEc0Z0lDQWdJQ0J3Y21Wc2IyRmtMRnh1SUNBZ0lDQWdjM0pqTEZ4dUlDQWdJQ0FnZG05c2RXMWxMRnh1SUNBZ0lIMGdQU0IwYUdsekxuQnliM0J6TzF4dUlDQWdJR052Ym5OMElIc2dZM1Z5Y21WdWRGUnBiV1VzSUdSMWNtRjBhVzl1TENCbWRXeHNjMk55WldWdUlIMGdQU0IwYUdsekxuTjBZWFJsTzF4dVhHNGdJQ0FnWTI5dWMzUWdjR0ZrWkdsdVowSnZkSFJ2YlNBOUlDaG1kV3hzYzJOeVpXVnVJQ1ltSUNjd0p5a2dmSHdnWUNSN0tERWdMeUJoYzNCbFkzUlNZWFJwYnlrZ0tpQXhNREI5SldBN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQnlaV1k5ZTNSb2FYTXVjMlYwVUd4aGVXVnlVbVZtZlZ4dUlDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUzTjBlV3hsY3k1d2JHRjVaWEo5WEc0Z0lDQWdJQ0FnSUhOMGVXeGxQWHQ3SUhCaFpHUnBibWRDYjNSMGIyMHNJR2hsYVdkb2REb2dablZzYkhOamNtVmxiaUEvSUNjeE1EQWxKeUE2SURBZ2ZYMWNiaUFnSUNBZ0lENWNiaUFnSUNBZ0lDQWdQSFpwWkdWdlhHNGdJQ0FnSUNBZ0lDQWdZWFYwYjFCc1lYazllM0JzWVhscGJtZDlYRzRnSUNBZ0lDQWdJQ0FnYkc5dmNEMTdiRzl2Y0gxY2JpQWdJQ0FnSUNBZ0lDQnRkWFJsWkQxN2RtOXNkVzFsSUQwOVBTQXdmVnh1SUNBZ0lDQWdJQ0FnSUhCc1lYbHpTVzVzYVc1bFBYdHdiR0Y1YzBsdWJHbHVaWDFjYmlBZ0lDQWdJQ0FnSUNCd2IzTjBaWEk5ZTNCdmMzUmxjbjFjYmlBZ0lDQWdJQ0FnSUNCd2NtVnNiMkZrUFh0d2NtVnNiMkZrZlZ4dUlDQWdJQ0FnSUNBZ0lITnlZejE3ZEhsd1pXOW1JSE55WXlBOVBUMGdKM04wY21sdVp5Y2dQeUJ6Y21NZ09pQjFibVJsWm1sdVpXUjlYRzRnSUNBZ0lDQWdJQ0FnY21WbVBYdDBhR2x6TG5ObGRGWnBaR1Z2VW1WbWZWeHVJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3YzNSNWJHVnpMblpwWkdWdmZWeHVJQ0FnSUNBZ0lDQWdJRzl1UTJGdVVHeGhlVDE3ZEdocGN5NW9ZVzVrYkdWRFlXNVFiR0Y1ZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVSSFZ5WVhScGIyNURhR0Z1WjJVOWUzUm9hWE11YUdGdVpHeGxSSFZ5WVhScGIyNURhR0Z1WjJWOVhHNGdJQ0FnSUNBZ0lDQWdiMjVGYm1SbFpEMTdkR2hwY3k1b1lXNWtiR1ZGYm1SbFpIMWNiaUFnSUNBZ0lDQWdJQ0J2YmxObFpXdGxaRDE3ZEdocGN5NW9ZVzVrYkdWVFpXVnJmVnh1SUNBZ0lDQWdJQ0FnSUc5dVZHbHRaVlZ3WkdGMFpUMTdkR2hwY3k1b1lXNWtiR1ZVYVcxbFZYQmtZWFJsZlZ4dUlDQWdJQ0FnSUNBZ0lHOXVVSEp2WjNKbGMzTTllM1JvYVhNdWFHRnVaR3hsVUhKdlozSmxjM045WEc0Z0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQjdRWEp5WVhrdWFYTkJjbkpoZVNoemNtTXBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpjbU11YldGd0tITnZkWEpqWlNBOVBpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpiM1Z5WTJVZ2EyVjVQWHR6YjNWeVkyVXVjM0pqZlNCemNtTTllM052ZFhKalpTNXpjbU45SUhSNWNHVTllM052ZFhKalpTNTBlWEJsZlNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnS1NsOVhHNGdJQ0FnSUNBZ0lDQWdQSFJ5WVdOcklHdHBibVE5WENKallYQjBhVzl1YzF3aUlITnlZejE3WTJGd2RHbHZibk45SUM4K1hHNGdJQ0FnSUNBZ0lEd3ZkbWxrWlc4K1hHNGdJQ0FnSUNBZ0lIdGphR2xzWkhKbGJpQW1KaUFvWEc0Z0lDQWdJQ0FnSUNBZ1BFSnZlQ0J3YjNOcGRHbHZiajFjSW1GaWMyOXNkWFJsWENJZ2RHOXdJR3hsWm5RZ1ltOTBkRzl0SUhKcFoyaDBJRzkyWlhKbWJHOTNQVndpYUdsa1pHVnVYQ0krWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdZMmhwYkdSeVpXNTlYRzRnSUNBZ0lDQWdJQ0FnUEM5Q2IzZytYRzRnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUhzdktpQk9aV1ZrSUhSdklIVnpaU0JtZFd4c0lIQmhkR2dnWm05eUlIUm9aWE5sSUhCeWIzQnpJSE52SUVac2IzY2dZMkZ1SUdsdVptVnlJR052Y25KbFkzUWdjM1ZpZEhsd1pTQXFMMzFjYmlBZ0lDQWdJQ0FnZTNSb2FYTXVjSEp2Y0hNdVkyOXVkSEp2YkhNZ0ppWWdLRnh1SUNBZ0lDQWdJQ0FnSUR4V2FXUmxiME52Ym5SeWIyeHpYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM05wWW1sc2FYUjVUV0Y0YVcxcGVtVk1ZV0psYkQxN2RHaHBjeTV3Y205d2N5NWhZMk5sYzNOcFltbHNhWFI1VFdGNGFXMXBlbVZNWVdKbGJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdGalkyVnpjMmxpYVd4cGRIbE5hVzVwYldsNlpVeGhZbVZzUFh0MGFHbHpMbkJ5YjNCekxtRmpZMlZ6YzJsaWFXeHBkSGxOYVc1cGJXbDZaVXhoWW1Wc2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOalpYTnphV0pwYkdsMGVVMTFkR1ZNWVdKbGJEMTdkR2hwY3k1d2NtOXdjeTVoWTJObGMzTnBZbWxzYVhSNVRYVjBaVXhoWW1Wc2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdOalpYTnphV0pwYkdsMGVWQmhkWE5sVEdGaVpXdzllM1JvYVhNdWNISnZjSE11WVdOalpYTnphV0pwYkdsMGVWQmhkWE5sVEdGaVpXeDlYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM05wWW1sc2FYUjVVR3hoZVV4aFltVnNQWHQwYUdsekxuQnliM0J6TG1GalkyVnpjMmxpYVd4cGRIbFFiR0Y1VEdGaVpXeDlYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTmxjM05wWW1sc2FYUjVWVzV0ZFhSbFRHRmlaV3c5ZTNSb2FYTXVjSEp2Y0hNdVlXTmpaWE56YVdKcGJHbDBlVlZ1YlhWMFpVeGhZbVZzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGUnBiV1U5ZTJOMWNuSmxiblJVYVcxbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhWeVlYUnBiMjQ5ZTJSMWNtRjBhVzl1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdablZzYkhOamNtVmxiajE3Wm5Wc2JITmpjbVZsYm4xY2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VUd4aGVUMTdkR2hwY3k1b1lXNWtiR1ZRYkdGNWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1UWJHRjVhR1ZoWkVSdmQyNDllM1JvYVhNdWFHRnVaR3hsVUd4aGVXaGxZV1JFYjNkdWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1UWJHRjVhR1ZoWkZWd1BYdDBhR2x6TG1oaGJtUnNaVkJzWVhsb1pXRmtWWEI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZibEJoZFhObFBYdDBhR2x6TG1oaGJtUnNaVkJoZFhObGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1R2RXeHNjMk55WldWdVEyaGhibWRsUFh0MGFHbHpMblJ2WjJkc1pVWjFiR3h6WTNKbFpXNTlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJsWnZiSFZ0WlVOb1lXNW5aVDE3ZEdocGN5NW9ZVzVrYkdWV2IyeDFiV1ZEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNCd2JHRjVhVzVuUFh0d2JHRjVhVzVuZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZsYXoxN2RHaHBjeTV6WldWcmZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG05c2RXMWxQWHQyYjJ4MWJXVjlYRzRnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjFjYmlKZExDSnVZVzFsY3lJNld5SnBaR1Z1ZEdsMGVTSXNJbU5zWVhOelRtRnRaU0lzSWxObGRDSXNJbWx1YkdsdVpWTjBlV3hsSWl3aVpuSnZiVU5zWVhOelRtRnRaU0lzSW1Oc1lYTnpUbUZ0WlhNaUxDSm1jbTl0U1c1c2FXNWxVM1I1YkdVaUxDSmpiMjVqWVhRaUxDSnpkSGxzWlhNaUxDSnlaV1IxWTJVaUxDSmpiR0Z6YzA1aGJXVkJJaXdpYVc1c2FXNWxVM1I1YkdWQklpd2lZMnhoYzNOT1lXMWxRaUlzSW1sdWJHbHVaVk4wZVd4bFFpSXNJbTFoY0VOc1lYTnpUbUZ0WlNJc0ltWnVJaXdpUVhKeVlYa2lMQ0ptY205dElpd2liV0Z3SWl3aWRHOVFjbTl3Y3lJc0luQnliM0J6SWl3aWMybDZaU0lzSW5OdmNuUWlMQ0pxYjJsdUlpd2lUMkpxWldOMElpd2lhMlY1Y3lJc0lteGxibWQwYUNJc0luTjBlV3hsSWl3aWRHOW5aMnhsSWl3aWRtRnNJaXdpYldGd2NHbHVaeUlzSW5CeWIzUnZkSGx3WlNJc0ltaGhjMDkzYmxCeWIzQmxjblI1SWl3aVkyRnNiQ0lzSW5KaGJtZGxJaXdpYzJOaGJHVWlMQ0p1SWl3aVRXRjBhQ0lzSW1GaWN5SXNJbkpoYm1kbFYybDBhRzkxZEZwbGNtOGlMQ0ppYVc1a0lpd2ljMk52Y0dVaUxDSnVZVzFsSWl3aWRXNXBiMjRpTENKbWJuTWlMQ0owY21GdWMyWnZjbTFPZFcxaVpYSlBjbEJoYzNOMGFISnZkV2RvSWl3aWMyVnNaV04wYjNJaUxDSnRJaXdpZDJocGRHVnpjR0ZqWlNJc0luSnZkVzVrYVc1bklpd2ljaUlzSW1KdmNtUmxjbk1pTENKamFYSmpiR1VpTENKd2FXeHNJaXdpYldGeVoybHVVM1JoY25RaUxDSnRZWEpuYVc1RmJtUWlMQ0p0WVhKbmFXNVViM0FpTENKdFlYSm5hVzVTYVdkb2RDSXNJbTFoY21kcGJrSnZkSFJ2YlNJc0ltMWhjbWRwYmt4bFpuUWlMQ0p0WVhKbmFXNGlMQ0p6YlUxaGNtZHBibFJ2Y0NJc0luTnRUV0Z5WjJsdVVtbG5hSFFpTENKemJVMWhjbWRwYmtKdmRIUnZiU0lzSW5OdFRXRnlaMmx1VEdWbWRDSXNJbk50VFdGeVoybHVJaXdpYldSTllYSm5hVzVVYjNBaUxDSnRaRTFoY21kcGJsSnBaMmgwSWl3aWJXUk5ZWEpuYVc1Q2IzUjBiMjBpTENKdFpFMWhjbWRwYmt4bFpuUWlMQ0p0WkUxaGNtZHBiaUlzSW14blRXRnlaMmx1Vkc5d0lpd2liR2ROWVhKbmFXNVNhV2RvZENJc0lteG5UV0Z5WjJsdVFtOTBkRzl0SWl3aWJHZE5ZWEpuYVc1TVpXWjBJaXdpYkdkTllYSm5hVzRpTENKd1lXUmthVzVuV0NJc0luQmhaR1JwYm1kWklpd2ljR0ZrWkdsdVp5SXNJbk50VUdGa1pHbHVaMWdpTENKemJWQmhaR1JwYm1kWklpd2ljMjFRWVdSa2FXNW5JaXdpYldSUVlXUmthVzVuV0NJc0ltMWtVR0ZrWkdsdVoxa2lMQ0p0WkZCaFpHUnBibWNpTENKc1oxQmhaR1JwYm1kWUlpd2liR2RRWVdSa2FXNW5XU0lzSW14blVHRmtaR2x1WnlJc0ltOXdZV05wZEhsTllYQWlMQ0p2Y0dGamFYUjVJaXdpY0hKbFptbDRJaXdpY0hKbElpd2laR2x6Y0d4aGVTSXNJblpoYkhWbElpd2lZMjlzZFcxdUlpd2ljSEp2Y0ZSdlJtNGlMQ0o0Y3lJc0ltTWlMQ0p6YlNJc0ltMWtJaXdpYkdjaUxDSnViMjVsSWl3aWVITkVhWE53YkdGNVRtOXVaU0lzSW1ac1pYZ2lMQ0o0YzBScGMzQnNZWGxHYkdWNElpd2lZbXh2WTJzaUxDSjRjMFJwYzNCc1lYbENiRzlqYXlJc0ltbHViR2x1WlVKc2IyTnJJaXdpZUhORWFYTndiR0Y1U1c1c2FXNWxRbXh2WTJzaUxDSjJhWE4xWVd4c2VVaHBaR1JsYmlJc0luaHpSR2x6Y0d4aGVWWnBjM1ZoYkd4NVNHbGtaR1Z1SWl3aVpHbHlaV04wYVc5dUlpd2ljbTkzSWl3aWVITkVhWEpsWTNScGIyNVNiM2NpTENKNGMwUnBjbVZqZEdsdmJrTnZiSFZ0YmlJc0luTnRSR2x6Y0d4aGVTSXNJbk50UkdsemNHeGhlVTV2Ym1VaUxDSnpiVVJwYzNCc1lYbEdiR1Y0SWl3aWMyMUVhWE53YkdGNVFteHZZMnNpTENKemJVUnBjM0JzWVhsSmJteHBibVZDYkc5amF5SXNJbk50UkdsemNHeGhlVlpwYzNWaGJHeDVTR2xrWkdWdUlpd2ljMjFEYjJ4MWJXNGlMQ0p6YlVScGNtVmpkR2x2YmlJc0luTnRSR2x5WldOMGFXOXVVbTkzSWl3aWMyMUVhWEpsWTNScGIyNURiMngxYlc0aUxDSnRaRVJwYzNCc1lYa2lMQ0p0WkVScGMzQnNZWGxPYjI1bElpd2liV1JFYVhOd2JHRjVSbXhsZUNJc0ltMWtSR2x6Y0d4aGVVSnNiMk5ySWl3aWJXUkVhWE53YkdGNVNXNXNhVzVsUW14dlkyc2lMQ0p0WkVScGMzQnNZWGxXYVhOMVlXeHNlVWhwWkdSbGJpSXNJbTFrUTI5c2RXMXVJaXdpYldSRWFYSmxZM1JwYjI0aUxDSnRaRVJwY21WamRHbHZibEp2ZHlJc0ltMWtSR2x5WldOMGFXOXVRMjlzZFcxdUlpd2liR2RFYVhOd2JHRjVJaXdpYkdkRWFYTndiR0Y1VG05dVpTSXNJbXhuUkdsemNHeGhlVVpzWlhnaUxDSnNaMFJwYzNCc1lYbENiRzlqYXlJc0lteG5SR2x6Y0d4aGVVbHViR2x1WlVKc2IyTnJJaXdpYkdkRWFYTndiR0Y1Vm1semRXRnNiSGxJYVdSa1pXNGlMQ0pzWjBOdmJIVnRiaUlzSW14blJHbHlaV04wYVc5dUlpd2liR2RFYVhKbFkzUnBiMjVTYjNjaUxDSnNaMFJwY21WamRHbHZia052YkhWdGJpSXNJbUZzYVdkdVEyOXVkR1Z1ZENJc0luTjBZWEowSWl3aWJHRjViM1YwSWl3aVkyOXVkR1Z1ZEZOMFlYSjBJaXdpWlc1a0lpd2lZMjl1ZEdWdWRFVnVaQ0lzSW1ObGJuUmxjaUlzSW1OdmJuUmxiblJEWlc1MFpYSWlMQ0ppWlhSM1pXVnVJaXdpWTI5dWRHVnVkRUpsZEhkbFpXNGlMQ0poY205MWJtUWlMQ0pqYjI1MFpXNTBRWEp2ZFc1a0lpd2laWFpsYm14NUlpd2lZMjl1ZEdWdWRFVjJaVzVzZVNJc0ltRnNhV2R1U1hSbGJYTWlMQ0pwZEdWdGMxTjBZWEowSWl3aWFYUmxiWE5GYm1RaUxDSnBkR1Z0YzBObGJuUmxjaUlzSW1KaGMyVnNhVzVsSWl3aWFYUmxiWE5DWVhObGJHbHVaU0lzSW1Gc2FXZHVVMlZzWmlJc0luTmxiR1pUZEdGeWRDSXNJbk5sYkdaRmJtUWlMQ0p6Wld4bVEyVnVkR1Z5SWl3aWMyVnNaa0poYzJWc2FXNWxJaXdpYzNSeVpYUmphQ0lzSW5ObGJHWlRkSEpsZEdOb0lpd2lZbTkwZEc5dElpd2lZbTkwZEc5dE1DSXNJbUp2Y21SbGNsTnBlbVVpTENKemFYcGxVMjBpTENKemFYcGxUR2NpTENKemIyeHBaQ0lzSW1KdmNtUmxja052Ykc5eVRHbG5hSFJIY21GNUlpd2lZMjlzYjNJaUxDSmliSFZsSWl3aVkyOXNiM0p6SWl3aVlteDFaVUpuSWl3aVpHRnlhMGR5WVhraUxDSmtZWEpyUjNKaGVVSm5JaXdpY0dsdVpTSXNJbkJwYm1WQ1p5SXNJbWR5WVhraUxDSm5jbUY1UW1jaUxDSnlaV1FpTENKeVpXUkNaeUlzSW05c2FYWmxJaXdpYjJ4cGRtVkNaeUlzSW14cFoyaDBSM0poZVNJc0lteHBaMmgwUjNKaGVVSm5JaXdpZDJocGRHVWlMQ0ozYUdsMFpVSm5JaXdpYjNKaGJtZGxJaXdpYjNKaGJtZGxRbWNpTENKbmNtVmxiaUlzSW1keVpXVnVRbWNpTENKdVlYWjVJaXdpYm1GMmVVSm5JaXdpYldsa2JtbG5hSFFpTENKdGFXUnVhV2RvZEVKbklpd2ljSFZ5Y0d4bElpd2ljSFZ5Y0d4bFFtY2lMQ0p2Y21Ob2FXUWlMQ0p2Y21Ob2FXUkNaeUlzSW1WblozQnNZVzUwSWl3aVpXZG5jR3hoYm5SQ1p5SXNJbTFoY205dmJpSXNJbTFoY205dmJrSm5JaXdpZDJGMFpYSnRaV3h2YmlJc0luZGhkR1Z5YldWc2IyNUNaeUlzSW14cFoyaDBWMkZ6YUNJc0lteHBaMmgwVjJGemFFSm5JaXdpWkdGeWExZGhjMmdpTENKa1lYSnJWMkZ6YUVKbklpd2lkSEpoYm5Od1lYSmxiblJFWVhKclIzSmhlU0lzSW5SeVlXNXpjR0Z5Wlc1MFJHRnlhMGR5WVhsQ1p5SXNJbVpwZENJc0ltZHliM2NpTENKbWJHVjRSM0p2ZHlJc0ltWnNaWGhPYjI1bElpd2lhR1ZwWjJoMElpd2lhblZ6ZEdsbWVVTnZiblJsYm5RaUxDSnFkWE4wYVdaNVJXNWtJaXdpYW5WemRHbG1lVU5sYm5SbGNpSXNJbXAxYzNScFpubENaWFIzWldWdUlpd2lhblZ6ZEdsbWVVRnliM1Z1WkNJc0ltcDFjM1JwWm5sRmRtVnViSGtpTENKc1pXWjBJaXdpYkdWbWREQWlMQ0p0WVhoSVpXbG5hSFFpTENKdFlYaFhhV1IwYUNJc0ltMXBia2hsYVdkb2RDSXNJbTFwYmxkcFpIUm9JaXdpYjNabGNtWnNiM2NpTENKb2FXUmtaVzRpTENKdmRtVnlabXh2ZDBocFpHUmxiaUlzSW5OamNtOXNiQ0lzSW05MlpYSm1iRzkzVTJOeWIyeHNJaXdpWVhWMGJ5SXNJbTkyWlhKbWJHOTNRWFYwYnlJc0luTmpjbTlzYkZnaUxDSnZkbVZ5Wm14dmQxTmpjbTlzYkZnaUxDSnpZM0p2Ykd4Wklpd2liM1psY21ac2IzZFRZM0p2Ykd4Wklpd2ljRzl6YVhScGIyNGlMQ0poWW5OdmJIVjBaU0lzSW5KbGJHRjBhWFpsSWl3aVptbDRaV1FpTENKeWFXZG9kQ0lzSW5KcFoyaDBNQ0lzSW5SdmNDSXNJblJ2Y0RBaUxDSjNhV1IwYUNJc0luZHlZWEFpTENKbWJHVjRWM0poY0NJc0ltUmhibWRsY205MWMyeDVVMlYwU1c1c2FXNWxVM1I1YkdVaUxDSmZYM04wZVd4bElpd2lZMjl1ZEdGcGJuTWlMQ0pyWlhraUxDSmhjbklpTENKcGJtUmxlRTltSWl3aWIyMXBkQ0lzSW05aWFpSXNJbUZqWXlJc0ltc2lMQ0ppYkdGamEyeHBjM1JRY205d2N5SXNJa0p2ZUNJc0lsSmxZV04wSWl3aWNtVm1JaXdpWTJocGJHUnlaVzRpTENKeklpd2lZbTk0SWl3aWIyMXBkRkJ5YjNCeklpd2ljSEp2Y0NJc0luQjFjMmdpTENKU1pXRmpkQzVqY21WaGRHVkZiR1Z0Wlc1MElpd2laR2x6Y0d4aGVVNWhiV1VpTENKQmJHbG5ia052Ym5SbGJuUlFjbTl3Vkhsd1pTSXNJbEJ5YjNCVWVYQmxjeUlzSW05dVpVOW1JaXdpUVd4cFoyNUpkR1Z0YzFCeWIzQlVlWEJsSWl3aVFXeHBaMjVUWld4bVVISnZjRlI1Y0dVaUxDSkRiMngxYlc1UWNtOXdWSGx3WlNJc0lrUnBiV1Z1YzJsdmJsQnliM0JVZVhCbElpd2liMjVsVDJaVWVYQmxJaXdpYm5WdFltVnlJaXdpYzNSeWFXNW5JaXdpUkdseVpXTjBhVzl1VUhKdmNGUjVjR1VpTENKRWFYTndiR0Y1VUhKdmNGUjVjR1VpTENKR2JHVjRVSEp2Y0ZSNWNHVWlMQ0pLZFhOMGFXWjVRMjl1ZEdWdWRGQnliM0JVZVhCbElpd2lUV0Z5WjJsdVVISnZjRlI1Y0dVaUxDSlBkbVZ5Wm14dmQxQnliM0JVZVhCbElpd2lVR0ZrWkdsdVoxQnliM0JVZVhCbElpd2lVbTkxYm1ScGJtZFFjbTl3Vkhsd1pTSXNJbE5wZW1WRWFYTndiR0Y1VUhKdmNGUjVjR1VpTENKd2NtOXdWSGx3WlhNaUxDSnViMlJsSWl3aVpYaGhZM1FpTENKdlltcGxZM1FpTENKaWIyOXNJaXdpWVdRaUxDSmhaRWR5YjNWd0lpd2lZV1JrSWl3aVlXUmtRMmx5WTJ4bElpd2lZV1JrVEdGNWIzVjBJaXdpWVdSa1VHbHVJaXdpWVdSelUzUmhkSE1pTENKaFpITlBkbVZ5ZG1sbGR5SXNJbUZzWlhKMElpd2lZV3hwWjI1Q2IzUjBiMjFEWlc1MFpYSWlMQ0poYkdsbmJrSnZkSFJ2YlV4bFpuUWlMQ0poYkdsbmJrSnZkSFJ2YlZKcFoyaDBJaXdpWVd4cFoyNUNiM1IwYjIwaUxDSmhiR2xuYmsxcFpHUnNaU0lzSW1Gc2FXZHVWRzl3UTJWdWRHVnlJaXdpWVd4cFoyNVViM0JNWldaMElpd2lZV3hwWjI1VWIzQlNhV2RvZENJc0ltRnNhV2R1Vkc5d0lpd2lZVzVrY205cFpGTm9ZWEpsSWl3aVlXNW5iR1ZrVUdsdUlpd2lZWEJ3Y3lJc0ltRnljbTkzUW1GamF5SXNJbUZ5Y205M1EybHlZMnhsUkc5M2JpSXNJbUZ5Y205M1EybHlZMnhsUm05eWQyRnlaQ0lzSW1GeWNtOTNRMmx5WTJ4bFZYQWlMQ0poY25KdmQwUnZkMjRpTENKaGNuSnZkMFZ1WkNJc0ltRnljbTkzUm05eWQyRnlaQ0lzSW1GeWNtOTNVM1JoY25RaUxDSmhjbkp2ZDFWd0lpd2lZWEp5YjNkVmNGSnBaMmgwSWl3aVltVnNiQ0lzSW1OaGJHVnVaR0Z5SWl3aVkyRnRaWEpoSWl3aVkyRnRaWEpoVW05c2JDSXNJbU5oYm1ObGJDSXNJbU5oYm05dWFXTmhiRkJwYmlJc0ltTnZiRzl5VUdsamEyVnlJaXdpWTJobFkyc2lMQ0pqYUdWamEwTnBjbU5zWlNJc0ltTnBjbU5zWlU5MWRHeHBibVVpTENKamJHVmhjaUlzSW1Oc2IyTnJJaXdpWTI5a1pTSXNJbU52WnlJc0ltTnZiWEJoYzNNaUxDSmpiMjF3YjNObElpd2lZM0p2Y0NJc0ltUmhjMmdpTENKamIyNTJaWEp6YVc5dVZHRm5JaXdpWTNKbFpHbDBRMkZ5WkNJc0ltUnBjbVZqZEdsdmJtRnNRWEp5YjNkTVpXWjBJaXdpWkdseVpXTjBhVzl1WVd4QmNuSnZkMUpwWjJoMElpd2laRzkzYm14dllXUWlMQ0prZFhCc2FXTmhkR1VpTENKbFpHbDBJaXdpWld4c2FYQnphWE1pTENKbGJHeHBjSE5wYzBOcGNtTnNaVTkxZEd4cGJtVWlMQ0psYm5abGJHOXdaU0lzSW1WNVpTSXNJbVpoWTJWaWIyOXJJaXdpWm1GalpVaGhjSEI1SWl3aVptRmpaVk5oWkNJc0ltWmhZMlZUYldsc1pYa2lMQ0ptYVd4bFZXNXJibTkzYmlJc0ltWnBiR3hQY0dGeGRXVWlMQ0ptYVd4c1ZISmhibk53WVhKbGJuUWlMQ0ptYVd4MFpYSWlMQ0ptYkdGbklpd2labXhoYzJnaUxDSm1iR0Z6YUd4cFoyaDBJaXdpWm14cGNFaHZjbWw2YjI1MFlXd2lMQ0ptYkdsd1ZtVnlkR2xqWVd3aUxDSm1iMnhrWlhJaUxDSm5hV1lpTENKbmJHOWlaU0lzSW1kc2IySmxRMmhsWTJ0bFpDSXNJbWR0WVdsc0lpd2laMjl2WjJ4bFVHeDFjeUlzSW1keVlYQm9RbUZ5SWl3aWFHRnVaR3hsSWl3aWFHRnVaRkJ2YVc1MGFXNW5JaXdpYUdWaGNuUWlMQ0pvWldGeWRFOTFkR3hwYm1VaUxDSm9aV0Z5ZEVKeWIydGxiaUlzSW1sdGNISmxjM04xYlNJc0ltbHVabTlEYVhKamJHVWlMQ0pyYm05dmNDSXNJbXhwWjJoMFluVnNZaUlzSW14cFoyaDBibWx1WjBKdmJIUkRhWEpqYkdVaUxDSnNhVzVySWl3aWJHOWpZWFJwYjI0aUxDSnNiMk5ySWl3aWJHOW5iMHhoY21kbElpd2liRzluYjFOdFlXeHNJaXdpYkc5bmIzVjBJaXdpYldGeVoybHVjMHhoY21kbElpd2liV0Z5WjJsdWMwMWxaR2wxYlNJc0ltMWhjbWRwYm5OVGJXRnNiQ0lzSW0xaGVHbHRhWHBsSWl3aWJXVm5ZWEJvYjI1bElpd2liV1Z1ZFNJc0ltMXBibWx0YVhwbElpd2liVzkyWlNJc0ltMTFkR1VpTENKdmRtVnliR0Y1VkdWNGRDSXNJbkJoZFhObElpd2ljR1Z2Y0d4bElpd2ljR1Z5YzI5dUlpd2ljR1Z5YzI5dVFXUmtJaXdpY0dodmJtVWlMQ0p3YVc0aUxDSndhVzVJYVdSbElpd2ljR2x1ZEdWeVpYTjBJaXdpY0d4aGVTSXNJbkpsWm5KbGMyZ2lMQ0p4ZFdWemRHbHZiazFoY21zaUxDSnlaVzF2ZG1VaUxDSnlaVzl5WkdWeVNXMWhaMlZ6SWl3aWNtVndiR0ZqWlNJc0luSmxjRzl5ZENJc0luSnZkR0YwWlNJc0luTmxZWEpqYUNJc0luTmxZM1Z5YVhSNUlpd2ljMmh2Y0hCcGJtZENZV2NpTENKemJXbHNaWGtpTENKemJXbHNaWGxQZFhSc2FXNWxJaXdpYzJWdVpDSXNJbk5vWVhKbElpd2ljMjkxYm1RaUxDSnpiM0owUVhOalpXNWthVzVuSWl3aWMyOXlkRVJsYzJObGJtUnBibWNpTENKemNHVmxZMmdpTENKemNHVmxZMmhGYkd4cGNITnBjeUlzSW5OMFlYSWlMQ0p6ZEdGeVNHRnNaaUlzSW5OMGIzSjVVR2x1SWl3aWMzZHBkR05vUVdOamIzVnVkQ0lzSW5SaFp5SXNJblJsY20xeklpd2lkR1Y0ZEVGc2FXZHVUR1ZtZENJc0luUmxlSFJCYkdsbmJrTmxiblJsY2lJc0luUmxlSFJCYkdsbmJsSnBaMmgwSWl3aWRHVjRkRUZzYkVOaGNITWlMQ0owWlhoMFJYaDBjbUZUYldGc2JDSXNJblJsZUhSTVlYSm5aU0lzSW5SbGVIUk1hVzVsU0dWcFoyaDBJaXdpZEdWNGRFMWxaR2wxYlNJc0luUmxlSFJUWlc1MFpXNWpaVU5oYzJVaUxDSjBaWGgwVTJsNlpTSXNJblJsZUhSVGJXRnNiQ0lzSW5SbGVIUlRjR0ZqYVc1bklpd2lkSEpoYzJoRFlXNGlMQ0owZDJsMGRHVnlJaXdpZG1sa1pXOURZVzFsY21FaUxDSjJhV1YzVkhsd1pVUmxabUYxYkhRaUxDSjJhV1YzVkhsd1pVUmxibk5sSWl3aWRtbGxkMVI1Y0dWTWFYTjBJaXdpZDI5eWEyWnNiM2RUZEdGMGRYTkJiR3dpTENKM2IzSnJabXh2ZDFOMFlYUjFjMGhoYkhSbFpDSXNJbmR2Y210bWJHOTNVM1JoZEhWelNXNVFjbTluY21WemN5SXNJbmR2Y210bWJHOTNVM1JoZEhWelQyc2lMQ0ozYjNKclpteHZkMU4wWVhSMWMxQnliMkpzWlcwaUxDSjNiM0pyWm14dmQxTjBZWFIxYzFWdWMzUmhjblJsWkNJc0luZHZjbXRtYkc5M1UzUmhkSFZ6VjJGeWJtbHVaeUlzSWtsamIyNU9ZVzFsY3lJc0ltbGpiMjV6SWl3aVpteHBjRTl1VW5Sc1NXTnZiazVoYldWeklpd2lTV052YmlJc0ltRmpZMlZ6YzJsaWFXeHBkSGxNWVdKbGJDSXNJbVJoYm1kbGNtOTFjMng1VTJWMFUzWm5VR0YwYUNJc0ltbGpiMjRpTENKcGJteHBibVVpTENKamN5SXNJbU5zWVhOemJtRnRaWE1pTENKcGJtTnNkV1JsY3lJc0luSjBiRk4xY0hCdmNuUWlMQ0pwWTI5dVFteHZZMnNpTENKd1lYUm9JaXdpWDE5d1lYUm9JaXdpZFc1a1pXWnBibVZrSWl3aVlYSnBZVWhwWkdSbGJpSXNJbWx6VW1WeGRXbHlaV1FpTENKemFHRndaU0lzSW5Ob2IzVnNaRk5qWVd4bFNXMWhaMlVpTENKSmJXRm5aU0lzSW05dVRHOWhaQ0lzSW05dVJYSnliM0lpTENKc2IyRmtTVzFoWjJVaUxDSndjbVYyVUhKdmNITWlMQ0p6Y21NaUxDSjNhVzVrYjNjaUxDSnBiV0ZuWlNJc0ltOXViRzloWkNJc0ltaGhibVJzWlV4dllXUWlMQ0p2Ym1WeWNtOXlJaXdpYUdGdVpHeGxSWEp5YjNJaUxDSmhiSFFpTENKcGJYQnZjblJoYm1ObElpd2liRzloWkdsdVp5SXNJbTVoZEhWeVlXeElaV2xuYUhRaUxDSnVZWFIxY21Gc1YybGtkR2dpTENKemFYcGxjeUlzSW5OeVkxTmxkQ0lzSW1selUyTmhiR1ZrU1cxaFoyVWlMQ0pqYUdsc1pFTnZiblJsYm5RaUxDSmlZV05yWjNKdmRXNWtRMjlzYjNJaUxDSmlZV05yWjNKdmRXNWtTVzFoWjJVaUxDSndZV1JrYVc1blFtOTBkRzl0SWl3aWFXMW5JaXdpWm5WdVl5SXNJbWRsZEZKdmRXNWthVzVuVTNSNWJHVWlMQ0pOWVhOcklpd2lkMmxzYkVOb1lXNW5aVlJ5WVc1elptOXliU0lzSW5kaGMyZ2lMQ0pqZUNJc0lsTnhkV0Z5WlNJc0lrUmxabUYxYkhSQmRtRjBZWElpTENKMWMyVkVaV1poZFd4MFNXTnZiaUlzSW1acGNuTjBTVzVwZEdsaGJDSXNJblJ2VlhCd1pYSkRZWE5sSWl3aVVHVnljMjl1VTNabklpd2lkSGx3YjJkeVlYQm9lU0lzSW1GdWRHbGhiR2xoYzJWa0lpd2ljMkZ1YzFObGNtbG1JaXdpWm05dWRGZGxhV2RvZEVKdmJHUWlMQ0o0YkNJc0lrRjJZWFJoY2lJc0ltbHpTVzFoWjJWTWIyRmtaV1FpTENKelpYUkpjMGx0WVdkbFRHOWhaR1ZrSWl3aWIzVjBiR2x1WlNJc0luWmxjbWxtYVdWa0lpd2lYMTlrWVc1blpYSnZkWE5zZVZWelpVUmxabUYxYkhSSlkyOXVJaXdpYUdGdVpHeGxTVzFoWjJWRmNuSnZjaUlzSW1KdmVGTm9ZV1J2ZHlJc0lrRjJZWFJoY2xCaGFYSWlMQ0pqYjJ4c1lXSnZjbUYwYjNKeklpd2ljMnhwWTJVaUxDSnBibVJsZUNJc0ltRnljbUY1VDJZaUxDSkNZV1JuWlNJc0luUmxlSFFpTENKVFNWcEZYMU5EUVV4Rklpd2lWR1Y0ZENJc0ltRnNhV2R1SWl3aWFYUmhiR2xqSWl3aWRISjFibU5oZEdVaUxDSjNaV2xuYUhRaUxDSmhiR2xuYmtObGJuUmxjaUlzSW1Gc2FXZHVTblZ6ZEdsbWVTSXNJbUZzYVdkdVRHVm1kQ0lzSW1Gc2FXZHVVbWxuYUhRaUxDSmljbVZoYTFkdmNtUWlMQ0ptYjI1MFUzUjViR1ZKZEdGc2FXTWlMQ0ptYjI1MFYyVnBaMmgwVG05eWJXRnNJaXdpVkdGbklpd2lkR2wwYkdVaUxDSkVSVVpCVlV4VVgxUkZXRlJmUTA5TVQxSlRJaXdpZEhKaGJuTndZWEpsYm5RaUxDSlRTVnBGWDA1QlRVVmZWRTlmVUVsWVJVd2lMQ0pDZFhSMGIyNGlMQ0poWTJObGMzTnBZbWxzYVhSNVJYaHdZVzVrWldRaUxDSmhZMk5sYzNOcFltbHNhWFI1U0dGemNHOXdkWEFpTENKa2FYTmhZbXhsWkNJc0ltbGpiMjVGYm1RaUxDSnZia05zYVdOcklpd2ljMlZzWldOMFpXUWlMQ0owWlhoMFEyOXNiM0pRY205d0lpd2lkR1Y0ZEVOdmJHOXlJaXdpZEhsd1pTSXNJbU5zWVhOelpYTWlMQ0ppZFhSMGIyNGlMQ0psYm1GaWJHVmtJaXdpWW5WMGRHOXVWR1Y0ZENJc0ltVjJaVzUwSWl3aVEyRnlaQ0lzSW1odmRtVnlaV1FpTENKelpYUkliM1psY21Wa0lpd2lZV04wYVhabElpd2liMjVOYjNWelpVVnVkR1Z5SWl3aWIyNU5iM1Z6WlV4bFlYWmxJaXdpYUdGdVpHeGxUVzkxYzJWRmJuUmxjaUlzSW1oaGJtUnNaVTF2ZFhObFRHVmhkbVVpTENKallYSmtJaXdpYUc5MlpYSWlMQ0pHYjNKdFJYSnliM0pOWlhOellXZGxJaXdpYVdRaUxDSk1ZV0psYkNJc0ltaDBiV3hHYjNJaUxDSnNZV0psYkNJc0lrTm9aV05yWW05NElpd2lZMmhsWTJ0bFpDSXNJbVZ5Y205eVRXVnpjMkZuWlNJc0ltaGhjMFZ5Y205eUlpd2lhVzVrWlhSbGNtMXBibUYwWlNJc0ltOXVRMmhoYm1kbElpd2lhVzV3ZFhSRmJHVnRaVzUwSWl3aVptOWpkWE5sWkNJc0luTmxkRVp2WTNWelpXUWlMQ0p6WlhSSWIzWmxjaUlzSW1OMWNuSmxiblFpTENKb1lXNWtiR1ZEYUdGdVoyVWlMQ0owWVhKblpYUWlMQ0pvWVc1a2JHVkRiR2xqYXlJc0ltTjFjbkpsYm5SVVlYSm5aWFFpTENKb1lXNWtiR1ZJYjNabGNpSXNJbUpuVTNSNWJHVWlMQ0ppYjNKa1pYSlRkSGxzWlNJc0ltSnZjbVJsY2lJc0ltSnZjbVJsY2tScGMyRmliR1ZrSWl3aVltOXlaR1Z5UkdGeWEwZHlZWGtpTENKaWIzSmtaWEpGY25KdmNpSXNJbUp2Y21SbGNraHZkbVZ5WldRaUxDSmliM0prWlhKU1lXUnBkWE5UZEhsc1pTSXNJbUp2Y21SbGNsSmhaR2wxYzFOdElpd2lZbTl5WkdWeVVtRmthWFZ6VFdRaUxDSnpkSGxzWlZOcGVtVWlMQ0pqYjI1MGNtOXNVM1I1YkdWeklpd2ljMmw2WlUxa0lpd2lhVzV3ZFhRaUxDSnBibkIxZEVWdVlXSnNaV1FpTENKamFHVmphMFp2WTNWelpXUWlMQ0pEYjJ4c1pXTjBhVzl1SWl3aVNYUmxiU0lzSW5acFpYZHdiM0owVkc5d0lpd2lkbWxsZDNCdmNuUk1aV1owSWl3aWJXRjRJaXdpYVhSbGJTSXNJblpwWlhkd2IzSjBWMmxrZEdnaUxDSjJhV1YzY0c5eWRFaGxhV2RvZENJc0ltbDBaVzF6SWl3aWFXUjRJaXdpYkdGNWIzVjBVM1I1YkdWeklpd2lZVzU1SWl3aVZWQWlMQ0pFVDFkT0lpd2lUVWxFSWl3aVkyOXNkVzF1VEdGNWIzVjBJaXdpYm5WdFQyWkRiMngxYlc1eklpd2ljR0ZrWkdsdVowRnNiQ0lzSW1kMWRIUmxjaUlzSW5CdmMybDBhVzl1Y3lJc0ltMXBibVJsZUNJc0ltMXBia2x1WkdWNElpd2lhU0lzSW1OdmJIVnRibk5HYjNKRGIyeHNZV2RsVjJsMGFFTnZkbVZ5SWl3aVoyVjBRMjlzYkdGblpVeGhlVzkxZENJc0ltTnZkbVZ5SWl3aWJuVnRRMjlzY3lJc0ltTnZiSFZ0Ym5NaUxDSm9JaXdpZHlJc0lteGhlVzkxZEV0bGVTSXNJbWR5YVdSRGIyeHpJaXdpYkdGNWIzVjBTV1I0SWl3aVkyOXNTR1ZwWjJoMGN5SXNJbVpwYkd3aUxDSmpiMnhEYjNWdWRITWlMQ0pqYjJ3aUxDSmpiMnhKWkhnaUxDSnBkR1Z0U0dWcFoyaDBJaXdpWTI5MlpYSkpiV0ZuWlZkcFpIUm9JaXdpWTJWcGJDSXNJblZ1YzJocFpuUWlMQ0pEYjJ4c1lXZGxJaXdpY21WdVpHVnlTVzFoWjJVaUxDSkRiMngxYlc0aUxDSmtaWEJ5WldOaGRHVmtRMjlzZFcxdUlpd2ljM0JoYmlJc0luTnRVM0JoYmlJc0ltMWtVM0JoYmlJc0lteG5VM0JoYmlJc0lrTnZiblJoYVc1bGNpSXNJa1JwZG1sa1pYSWlMQ0prYVhacFpHVnlJaXdpUTJGeVpYUWlMQ0pUVUVGRFJWTmZTVTVFUlZoZlRVRlFJaXdpUkVsU1gwbE9SRVZZWDAxQlVDSXNJblZ3SWl3aVpHOTNiaUlzSWsxQlVrZEpUaUlzSWtOQlVrVlVYMGhGU1VkSVZDSXNJa05CVWtWVVgwOUdSbE5GVkY5R1VrOU5YMU5KUkVVaUxDSkNUMUpFUlZKZlVrRkVTVlZUSWl3aVoyVjBUV0ZwYmtScGNpSXNJbVpzZVc5MWRGTnBlbVVpTENKcFpHVmhiRVJwY21WamRHbHZiaUlzSW5SeWFXZG5aWEpTWldOMElpd2lkMmx1Wkc5M1UybDZaU0lzSW5Od1lXTmxjeUlzSW0xaGFXNUVhWElpTENKblpYUlRkV0pFYVhJaUxDSnZabVp6WlhRaUxDSjBjbWxuWjJWeVRXbGtJaXdpZDJsdVpHOTNVM0JoWTJWQmRtRnBiR0ZpYkdVaUxDSmhZbTkyWlU5eVRHVm1kQ0lzSW1KbGJHOTNUM0pTYVdkb2RDSXNJbk4xWWtScGNpSXNJbU5oYkdORlpHZGxVMmhwWm5Seklpd2labXg1YjNWMFZtVnlkR2xqWVd4VGFHbG1kQ0lzSW1ac2VXOTFkRWh2Y21sNmIyNTBZV3hUYUdsbWRDSXNJbU5oY21WMFZtVnlkR2xqWVd4VGFHbG1kQ0lzSW1OaGNtVjBTRzl5YVhwdmJuUmhiRk5vYVdaMElpd2lhWE5EYkc5elpWWmxjblJwWTJGc2JIa2lMQ0pwYzBOc2IzTmxTRzl5YVhwdmJuUmhiR3g1SWl3aVpteDViM1YwSWl3aWVDSXNJbmtpTENKallYSmxkQ0lzSW1Ga2FuVnpkRTltWm5ObGRITWlMQ0ppWVhObElpd2laV1JuWlZOb2FXWjBJaXdpWm14NWIzVjBUR1ZtZENJc0ltWnNlVzkxZEZSdmNDSXNJbU5oY21WMFZHOXdJaXdpWTJGeVpYUlNhV2RvZENJc0ltTmhjbVYwUW05MGRHOXRJaXdpWTJGeVpYUk1aV1owSWl3aVpteDViM1YwVDJabWMyVjBJaXdpWTJGeVpYUlBabVp6WlhRaUxDSmlZWE5sVDJabWMyVjBjeUlzSW1oaGMwTmhjbVYwSWl3aWNtVnNZWFJwZG1WUFptWnpaWFFpTENKVFVFRkRTVTVIWDA5VlZGTkpSRVVpTENKRGIyNTBaVzUwY3lJc0ltWnNlVzkxZEZKbFppSXNJbk4wWVhSbElpd2ljMlYwVTNSaGRHVWlMQ0p2YmxKbGMybDZaU0lzSW05dVMyVjVSRzkzYmlJc0luTmxkRlJwYldWdmRYUWlMQ0p6YUc5MWJHUkdiMk4xY3lJc0ltWnZZM1Z6SWl3aVlXUmtSWFpsYm5STWFYTjBaVzVsY2lJc0luSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSWlMQ0ppWjBOdmJHOXlJaXdpZG1semFXSnBiR2wwZVNJc0ltSmhZMnRuY205MWJtUWlMQ0p6ZEhKdmEyVWlMQ0pqYjI1MFlXbHVaWElpTENKeWIzVnVaR2x1WnpJaUxDSnliM1Z1WkdsdVp6UWlMQ0pqYjI1MFpXNTBjeUlzSW0xaGVFUnBiV1Z1YzJsdmJuTWlMQ0p0YVc1RWFXMWxibk5wYjI1eklpd2ljMlYwUm14NWIzVjBVbVZtSWl3aWFXNXVaWEpEYjI1MFpXNTBjeUlzSW5CdmMybDBhVzl1VW1Wc1lYUnBkbVZVYjBGdVkyaHZjaUlzSW5CaFoyVllUMlptYzJWMElpd2laRzlqZFcxbGJuUWlMQ0prYjJOMWJXVnVkRVZzWlcxbGJuUWlMQ0p6WTNKdmJHeE1aV1owSWl3aWNHRm5aVmxQWm1aelpYUWlMQ0p6WTNKdmJHeFViM0FpTENKcGJtNWxja2hsYVdkb2RDSXNJbWx1Ym1WeVYybGtkR2dpTENKamJHbGxiblJJWldsbmFIUWlMQ0pqYkdsbGJuUlhhV1IwYUNJc0lrSnZiMnhsWVc0aUxDSmxaR2RsVTJocFpuUnpJaXdpVDNWMGMybGtaVVYyWlc1MFFtVm9ZWFpwYjNJaUxDSmxiR1Z0Wlc1MElpd2lhR0Z1Wkd4bFEyeHBZMnRGZG1WdWRDSXNJazV2WkdVaUxDSmpZWEIwZFhKbElpd2lZMnhsWVc1MWNDSXNJbE5KV2tWZlYwbEVWRWhmVFVGUUlpd2lSVk5EUVZCRlgwdEZXVjlEVDBSRklpd2laMlYwVkhKcFoyZGxjbEpsWTNRaUxDSmhibU5vYjNJaUxDSjBjbWxuWjJWeVFtOTFibVJwYm1kU1pXTjBJaXdpWjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMElpd2liMlptYzJWMFRHVm1kQ0lzSW05bVpuTmxkRlJ2Y0NJc0lrTnZiblJ5YjJ4c1pYSWlMQ0p2YmtScGMyMXBjM01pTENKclpYbERiMlJsSWl3aWRYQmtZWFJsVkhKcFoyZGxjbEpsWTNRaUxDSm9ZVzVrYkdWUVlXZGxRMnhwWTJzaUxDSm9ZVzVrYkdWTFpYbEViM2R1SWl3aWFHRnVaR3hsVW1WemFYcGxJaXdpUm14NWIzVjBJaXdpYzJodmQwTmhjbVYwSWl3aWVtbHdJaXdpWVNJc0ltSWlMQ0pDVDFKRVJWSmZWMGxFVkVnaUxDSkJWa0ZVUVZKZlUwbGFSVk1pTENKaGRtRjBZWEpNWVhsdmRYUWlMQ0owWlhoMFRHRjViM1YwSWl3aVpHVm5WRzlTWVdRaUxDSmtaV2NpTENKUVNTSXNJbkYxWVhKMFpYSlFZV1JrYVc1bklpd2ljMmx1SWl3aWFXNXBkR2xoYkNJc0luQmhaR1JwYm1kU2FXZG9kQ0lzSW5CaFpHUnBibWRVYjNBaUxDSkhjbTkxY0VGMllYUmhjaUlzSW1GMllYUmhjbGRwWkhSb0lpd2lZWFpoZEdGeVNHVnBaMmgwSWl3aWQybHNiRU5vWVc1blpTSXNJbU52Ykd4aFltOXlZWFJ2Y2lJc0ltUmxabUYxYkhSSVpXRmthVzVuVEdWMlpXeHpJaXdpU0dWaFpHbHVaeUlzSW1GalkyVnpjMmxpYVd4cGRIbE1aWFpsYkNJc0ltaGxZV1JwYm1kTVpYWmxiQ0lzSW01bGQxQnliM0J6SWl3aVUwbGFSVjlPUVUxRlgxUlBYMGxEVDA1ZlUwbGFSVjlRU1ZoRlRDSXNJbVJsWm1GMWJIUkpZMjl1UW5WMGRHOXVTV052YmtOdmJHOXljeUlzSWxCdlp5SXNJbWxqYjI1RGIyeHZjaUlzSW1samIyNVRhWHBsSWl3aWNHOW5JaXdpU1dOdmJrSjFkSFJ2YmlJc0ltbHpRV04wYVhabElpd2ljMlYwUVdOMGFYWmxJaXdpYVhOR2IyTjFjMlZrSWl3aWFYTkliM1psY21Wa0lpd2lUR0Y1WlhJaUxDSnRiM1Z1ZEdWa0lpd2lZM0psWVhSbFJXeGxiV1Z1ZENJc0ltVnNJaXdpWTI5dWMyOXNaU0lzSW5kaGNtNGlMQ0ppYjJSNUlpd2lZWEJ3Wlc1a1EyaHBiR1FpTENKeVpXMXZkbVZEYUdsc1pDSXNJbU55WldGMFpWQnZjblJoYkNJc0ltRnpjR1ZqZEZKaGRHbHZJaXdpVEdWMGRHVnlZbTk0SWl3aVkyOXVkR1Z1ZEVGemNHVmpkRkpoZEdsdklpd2lkbWxsZDNCdmNuUkJjM0JsWTNSU1lYUnBieUlzSW1OdmJuUmxiblJJWldsbmFIUWlMQ0pqYjI1MFpXNTBWMmxrZEdnaUxDSlVRVUpmUzBWWlgwTlBSRVVpTENKTWFXNXJJaXdpYUhKbFppSXNJbVZ1WVdKc1pVWnZZM1Z6VTNSNWJHVnpJaXdpYzJWMFJXNWhZbXhsUm05amRYTlRkSGxzWlhNaUxDSnlaV3dpTENKc2FXNXJWR0Z5WjJWMElpd2lhR0Z1Wkd4bFRXOTFjMlZFYjNkdUlpd2lhR0Z1Wkd4bFMyVjVWWEFpTENKaFkyTmxjM05wWW14bFJtOWpkWE5UZEhsc1pTSXNJbVJsWW05MWJtTmxJaXdpZEdoeVpYTm9hRzlzWkNJc0ltUmxabVZ5VkdsdFpYSWlMQ0prWldKdmRXNWpaV1FpTENKaGNtZHpJaXdpWTJ4bFlYSlVhVzFsYjNWMElpd2lSbVYwWTJoSmRHVnRjeUlzSW1OdmJuUmhhVzVsY2tobGFXZG9kQ0lzSW1selFYUkZibVFpTENKcGMwWmxkR05vYVc1bklpd2labVYwWTJoTmIzSmxJaXdpYzJOeWIyeHNTR1ZwWjJoMElpd2ljMk55YjJ4c1FuVm1abVZ5SWl3aVoyVjBVMk55YjJ4c1EyOXVkR0ZwYm1WeUlpd2ljMk55YjJ4c1EyOXVkR0ZwYm1WeUlpd2lVMk55YjJ4c1EyOXVkR0ZwYm1WeUlpd2liMjVUWTNKdmJHd2lMQ0oxY0dSaGRHVlRZM0p2Ykd4RGIyNTBZV2x1WlhJaUxDSnVaWGgwVTJOeWIyeHNRMjl1ZEdGcGJtVnlJaXdpYUdGdVpHeGxVMk55YjJ4c0lpd2liMjVzZVNJc0luUm9jbTkwZEd4bElpd2liR0Z6ZENJc0luUm9jbTkwZEd4bFpDSXNJbTV2ZHlJc0lrUmhkR1VpTENKTlpXRnpkWEpsYldWdWRGTjBiM0psSWl3aVYyVmhhMDFoY0NJc0ltZGxkQ0lzSW1oaGN5SXNJbk5sZENJc0ltZGxkRVZzWlcxbGJuUklaV2xuYUhRaUxDSm5aWFJYYVc1a2IzZFRZM0p2Ykd4UWIzTWlMQ0puWlhSU1pXeGhkR2wyWlZOamNtOXNiRlJ2Y0NJc0ltZGxkRk5qY205c2JFaGxhV2RvZENJc0ltZGxkRk5qY205c2JGQnZjeUlzSWxWdWFXWnZjbTFTYjNkTVlYbHZkWFJUZVcxaWIyd2lMQ0pUZVcxaWIyd2lMQ0p2Wm1aelkzSmxaVzRpTENKSmJtWnBibWwwZVNJc0ltTmhZMmhsSWl3aVkyOXNkVzF1VjJsa2RHZ2lMQ0p0YVc1RGIyeHpJaXdpWTI5c2RXMXVWMmxrZEdoQmJtUkhkWFIwWlhJaUxDSmpiMngxYlc1RGIzVnVkQ0lzSW1ac2IyOXlJaXdpYUdWcFoyaDBjeUlzSW1ObGJuUmxjazltWm5ObGRDSXNJbWhsYVdkb2RFRnVaRWQxZEhSbGNpSXNJbk4xYlNJc0ltbGtaV0ZzUTI5c2RXMXVWMmxrZEdnaUxDSmpiMnhuZFdWemN5SXNJazFoYzI5dWNubE1ZWGx2ZFhRaUxDSlZibWxtYjNKdFVtOTNUR0Y1YjNWMElpd2lVa1ZUU1ZwRlgwUkZRazlWVGtORklpd2lWa2xTVkZWQlRGOUNWVVpHUlZKZlJrRkRWRTlTSWl3aWJHRjViM1YwVG5WdFltVnlWRzlEYzNORWFXMWxibk5wYjI0aUxDSk5ZWE52Ym5KNUlpd2laM0pwWkZkeVlYQndaWElpTENKblpYUlRZM0p2Ykd4RGIyNTBZV2x1WlhKU1pXWWlMQ0p0WldGemRYSmxRMjl1ZEdGcGJtVnlJaXdpYkc5aFpFbDBaVzF6SWl3aWFYUmxiVVJoZEdFaUxDSkRiMjF3YjI1bGJuUWlMQ0pqYjIxd0lpd2lkbWx5ZEhWaGJHbDZaU0lzSW5acGNuUjFZV3hDYjNWdVpITlViM0FpTENKMmFYSjBkV0ZzUW05MWJtUnpRbTkwZEc5dElpd2lhWE5XYVhOcFlteGxJaXdpZG1seWRIVmhiRUoxWm1abGNpSXNJbTltWm5ObGRGTmpjbTlzYkZCdmN5SXNJbU52Ym5SaGFXNWxjazltWm5ObGRDSXNJblpwWlhkd2IzSjBRbTkwZEc5dElpd2lhWFJsYlVOdmJYQnZibVZ1ZENJc0lrMWhjMjl1Y25sZlgwbDBaVzBpTENKTllYTnZibko1WDE5SmRHVnRYMTlOYjNWdWRHVmtJaXdpZEhKaGJuTm1iM0p0SWl3aVYyVmlhMmwwVkhKaGJuTm1iM0p0SWl3aWJXVmhjM1Z5WlcxbGJuUlRkRzl5WlNJc0ltTnlaV0YwWlUxbFlYTjFjbVZ0Wlc1MFUzUnZjbVVpTENKb1lYTlFaVzVrYVc1blRXVmhjM1Z5WlcxbGJuUnpJaXdpYzI5dFpTSXNJbkJ5WlhaVGRHRjBaU0lzSW0xbFlYTjFjbVZEYjI1MFlXbHVaWEpCYzNsdVl5SXNJbkpsYzJWMElpd2lhVzV6WlhKMFFXNXBiV0YwYVc5dVJuSmhiV1VpTENKeVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVWlMQ0pqWVc1alpXeEJibWx0WVhScGIyNUdjbUZ0WlNJc0luVndaR0YwWlZOamNtOXNiRkJ2YzJsMGFXOXVJaXdpYzJOeWIyeHNRMjl1ZEdGcGJtVnlVbVZtSWl3aVNGUk5URVZzWlcxbGJuUWlMQ0p5Wld4aGRHbDJaVk5qY205c2JGUnZjQ0lzSW1admNtTmxWWEJrWVhSbElpd2labXhsZUdsaWJHVWlMQ0puZFhSMFpYSlhhV1IwYUNJc0ltZGxkRkJ2YzJsMGFXOXVjeUlzSW1aMWJHeFhhV1IwYUV4aGVXOTFkQ0lzSWt4bFoyRmplVlZ1YVdadmNtMVNiM2RNWVhsdmRYUWlMQ0oxYm1sbWIzSnRVbTkzVEdGNWIzVjBJaXdpWkdWbVlYVnNkRXhoZVc5MWRDSXNJbWR5YVdSQ2IyUjVJaXdpYzJWMFIzSnBaRmR5WVhCd1pYSlNaV1lpTENKcGRHVnRjMVJ2VW1WdVpHVnlJaXdpYVhSbGJYTlViMDFsWVhOMWNtVWlMQ0p0WldGemRYSnBibWRRYjNOcGRHbHZibk1pTENKd2IzTWlMQ0p5Wlc1a1pYSk5ZWE52Ym5KNVEyOXRjRzl1Wlc1MElpd2laR0YwWVNJc0ltMWxZWE4xY21WdFpXNTBTVzVrWlhnaUxDSnpaWFJUWTNKdmJHeERiMjUwWVdsdVpYSlNaV1lpTENKcGJuTjBZVzVqWlU5bUlpd2lUR1ZuWVdONVRXRnpiMjV5ZVV4aGVXOTFkQ0lzSW5ONWJXSnZiQ0lzSWs1dlUyTnliMnhzUW1Wb1lYWnBiM0lpTENKd2NtVjJUM1psY21ac2IzY2lMQ0p4ZFdWeWVVWnZZM1Z6WVdKc1pVRnNiQ0lzSW5GMVpYSjVVMlZzWldOMGIzSkJiR3dpTENKbWIyTjFjMFZzWlcxbGJuUWlMQ0pVY21Gd1JtOWpkWE5DWldoaGRtbHZjaUlzSW5OMGIzQlFjbTl3WVdkaGRHbHZiaUlzSW5CeVpYWmxiblJFWldaaGRXeDBJaXdpWm05amRYTkdhWEp6ZEVOb2FXeGtJaXdpY0hKbGRtbHZkWE5zZVVadlkzVnpaV1JGYkNJc0ltRmpkR2wyWlVWc1pXMWxiblFpTENKb1lXNWtiR1ZHYjJOMWN5SXNJbk5sZEVWc1VtVm1JaXdpUW1GamEyUnliM0FpTENKaVlXTnJaSEp2Y0NJc0lraGxZV1JsY2lJc0ltaGxZV1JwYm1jaUxDSk5iMlJoYkNJc0ltRmpZMlZ6YzJsaWFXeHBkSGxOYjJSaGJFeGhZbVZzSWl3aVkyeHZjMlZQYms5MWRITnBaR1ZEYkdsamF5SXNJbVp2YjNSbGNpSXNJbkp2YkdVaUxDSnphRzkzVkc5d1UyaGhaRzkzSWl3aWMyVjBVMmh2ZDFSdmNGTm9ZV1J2ZHlJc0luTm9iM2RDYjNSMGIyMVRhR0ZrYjNjaUxDSnpaWFJUYUc5M1FtOTBkRzl0VTJoaFpHOTNJaXdpWTI5dWRHVnVkQ0lzSW1oaGJtUnNaVTkxZEhOcFpHVkRiR2xqYXlJc0luVndaR0YwWlZOb1lXUnZkM01pTENKb1lYTldaWEowYVdOaGJGTmpjbTlzYkdKaGNpSXNJbTltWm5ObGRFaGxhV2RvZENJc0lsTjBiM0JUWTNKdmJHeENaV2hoZG1sdmNpSXNJbmR5WVhCd1pYSWlMQ0p6YUdGa2IzZERiMjUwWVdsdVpYSWlMQ0p6YUdGa2IzY2lMQ0pRZFd4ellYSWlMQ0p3WVhWelpXUWlMQ0poYm1sdFlYUnBiMjVKZEdWeVlYUnBiMjVEYjNWdWRDSXNJbWx1Ym1WeVEybHlZMnhsSWl3aWIzVjBaWEpEYVhKamJHVWlMQ0pTWVdScGIwSjFkSFJ2YmlJc0lrSnZjbVJsY2lJc0lrSnZjbVJsY2tScGMyRmliR1ZrUTJobFkydGxaQ0lzSWtKdmNtUmxja1JoY210SGNtRjVJaXdpUW05eVpHVnlTRzkyWlhKbFpDSXNJbUp2Y21SbGNsZHBaSFJvSWl3aVFtOXlaR1Z5Vlc1amFHVmphMlZrSWl3aVFtOXlaR1Z5UkdsellXSnNaV1FpTENKQ2IzSmtaWEpEYUdWamEyVmtVMjBpTENKQ2IzSmtaWEpEYUdWamEyVmtUV1FpTENKQ1owUnBjMkZpYkdWa0lpd2lRbWRGYm1GaWJHVmtJaXdpVW1Ga2FXOUNkWFIwYjI1SmMwWnZZM1Z6WldRaUxDSkpibkIxZEVWdVlXSnNaV1FpTENKb1lXNWtiR1ZDYkhWeUlpd2lSbXhsZUVKdmVDSXNJbEp2ZHlJc0ltZGhjQ0lzSW5KbGMzUWlMQ0pqYUdsc1pDSXNJbE5qY205c2JFWmxkR05vSWl3aVoyVjBVMk55YjJ4c1UzUmhkR1VpTENKMWNHUmhkR1ZRYjNOcGRHbHZiaUlzSW5KbGJtUmxja2hsYVdkb2RDSXNJbE5sWVhKamFFWnBaV3hrSWl3aWMzbHVkR2hsZEdsalJYWmxiblFpTENKdmJrWnZZM1Z6SWl3aWIyNUNiSFZ5SWl3aVlYVjBiME52YlhCc1pYUmxJaXdpY0d4aFkyVm9iMnhrWlhJaUxDSm9ZWE5XWVd4MVpTSXNJbWhwWkdWVFpXRnlZMmhKWTI5dUlpd2liV1ZrYVhWdElpd2liR0Z5WjJVaUxDSnBibkIxZEVGamRHbDJaU0lzSW1sdWNIVjBTRzkyWlhKbFpDSXNJbU5zWldGeVFuVjBkRzl1VTJsNlpTSXNJbU5zWldGeVNXTnZibE5wZW1VaUxDSndiMmx1ZEdWeVJYWmxiblJ6SWl3aWFHRnVaR3hsUTJ4bFlYSWlMQ0pUWldkdFpXNTBaV1JEYjI1MGNtOXNJaXdpY21WemNHOXVjMmwyWlNJc0luTmxiR1ZqZEdWa1NYUmxiVWx1WkdWNElpd2lZblYwZEc5dVYybGtkR2dpTENKcGMxTmxiR1ZqZEdWa0lpd2lhWFJsYlVselRtOTBVMlZzWldOMFpXUWlMQ0pwZEdWdFNYTlRaV3hsWTNSbFpDSXNJbUZqZEdsMlpVbHVaR1Y0SWl3aVJtOXliVWhsYkhCbGNsUmxlSFFpTENKR2IzSnRUR0ZpWld3aUxDSm1iM0p0VEdGaVpXd2lMQ0pUWld4bFkzUk1hWE4wSWl3aWMyVnNaV04wSWl3aVNGUk5URk5sYkdWamRFVnNaVzFsYm5RaUxDSm9aV3h3WlhKVVpYaDBJaXdpYjNCMGFXOXVjeUlzSW1admNtMUZiR1Z0Wlc1MElpd2laWEp5YjNKbFpDSXNJbTV2Y20xaGJDSXNJbk5vYjNkUWJHRmpaV2h2YkdSbGNpSXNJbWhoYm1Sc1pVOXVRMmhoYm1kbElpd2ljMlYwVTJWc1pXTjBUR2x6ZEZKbFppSXNJbTl3ZEdsdmJpSXNJbE53YVc1dVpYSWlMQ0prWld4aGVTSXNJbk5vYjNjaUxDSlRkR0ZqYXlJc0lsTjBhV05yZVNJc0ltUmhibWRsY205MWMyeDVVMlYwV2tsdVpHVjRJaXdpWDE5NlNXNWtaWGdpTENKNlNXNWtaWGdpTENKemRHbGphM2tpTENKVGQybDBZMmdpTENKemQybDBZMmhsWkNJc0luTjNhWFJqYUZOMGVXeGxjeUlzSW5OM2FYUmphQ0lzSW5OM2FYUmphRWR5WVhraUxDSnpkMmwwWTJoTWFXZG9kRWR5WVhraUxDSnpkMmwwWTJoRVlYSnJSM0poZVNJc0luTjNhWFJqYUZkb2FYUmxJaXdpYzJ4cFpHVnlVM1I1YkdWeklpd2ljMnhwWkdWeUlpd2ljMnhwWkdWeVVtbG5hSFFpTENKemJHbGtaWEpNWldaMElpd2ljMnhwWkdWeVJHRnlheUlzSW5Oc2FXUmxja3hwWjJoMElpd2lhVzV3ZFhSVGRIbHNaWE1pTENKamFHVmphMkp2ZUNJc0ltTm9aV05yWW05NFJXNWhZbXhsWkNJc0lsUmhZbXhsUTJWc2JDSXNJbU52YkZOd1lXNGlMQ0p5YjNkVGNHRnVJaXdpZEdRaUxDSlVZV0pzWlVKdlpIa2lMQ0pVWVdKc1pVWnZiM1JsY2lJc0lsUmhZbXhsU0dWaFpHVnlJaXdpZEdobFlXUWlMQ0pVWVdKc1pVaGxZV1JsY2tObGJHd2lMQ0owYUNJc0lsUmhZbXhsVW05M0lpd2lVMUJCUTBWZlEwaEJVbDlEVDBSRklpd2lSVTVVUlZKZlEwaEJVbDlEVDBSRklpd2lWRzkxWTJoaFlteGxJaXdpYjI1VWIzVmphQ0lzSW1Ob1lYSkRiMlJsSWl3aVpuVnNiRmRwWkhSb0lpd2lablZzYkVobGFXZG9kQ0lzSW0xdmRYTmxRM1Z5YzI5eUlpd2lkRzkxWTJoaFlteGxJaXdpYUdGdVpHeGxTMlY1VUhKbGMzTWlMQ0pVWVdKc1pWTnZjblJoWW14bFNHVmhaR1Z5UTJWc2JDSXNJbk4wWVhSMWN5SXNJbk52Y25SUGNtUmxjaUlzSW05dVUyOXlkRU5vWVc1blpTSXNJbk5vYjNWc1pGTm9iM2RKWTI5dUlpd2lWR0ZpYkdVaUxDSjBZV0pzWlNJc0lrSnZaSGtpTENKRFpXeHNJaXdpUm05dmRHVnlJaXdpU0dWaFpHVnlRMlZzYkNJc0lsTnZjblJoWW14bFNHVmhaR1Z5UTJWc2JDSXNJbFJoWW5NaUxDSmhZM1JwZG1WVVlXSkpibVJsZUNJc0luUmhZbk1pTENKb1lXNWtiR1ZVWVdKRGJHbGpheUlzSW1VaUxDSjBZV0lpTENKMFlXSkpjMDV2ZEVGamRHbDJaU0lzSW5SaFlrbHpRV04wYVhabElpd2lWR1Y0ZEVGeVpXRWlMQ0owWlhoMFlYSmxZU0lzSW5KdmQzTWlMQ0owWlhoMFFYSmxZU0lzSW5ObGRGUmxlSFJCY21WaFVtVm1JaXdpVkdWNGRFWnBaV3hrSWl3aWRHVjRkR1pwWld4a0lpd2lkR1Y0ZEVacFpXeGtJaXdpY0dGMGRHVnliaUlzSW5ObGRGUmxlSFJHYVdWc1pGSmxaaUlzSWxSdllYTjBJaXdpZEdoMWJXSnVZV2xzSWl3aWRHaDFiV0p1WVdsc1UyaGhjR1VpTENKdWIyOXdJaXdpVkVsTlJVOVZWQ0lzSW1sdWFYUnBZV3hUZEdGMFpTSXNJbWh2ZG1WeVpXUkpZMjl1SWl3aWFHOTJaWEpsWkZSbGVIUWlMQ0pwYzA5d1pXNGlMQ0p5WldSMVkyVnlJaXdpWVdOMGFXOXVJaXdpUlhKeWIzSWlMQ0pVYjI5c2RHbHdJaXdpWkdsemNHRjBZMmdpTENKamFHbHNaRkpsWmlJc0ltaGhibVJzWlVsamIyNU5iM1Z6WlVWdWRHVnlJaXdpYUdGdVpHeGxTV052YmsxdmRYTmxUR1ZoZG1VaUxDSm9ZVzVrYkdWVVpYaDBUVzkxYzJWRmJuUmxjaUlzSW1oaGJtUnNaVlJsZUhSTmIzVnpaVXhsWVhabElpd2lWbWxrWlc5UWJHRjVhR1ZoWkNJc0luTmxaV3RwYm1jaUxDSndiR0Y1YUdWaFpDSXNJbU5zYVdWdWRGZ2lMQ0prZFhKaGRHbHZiaUlzSW5ObFpXc2lMQ0p3WlhKalpXNTBJaXdpYldsdUlpd2libVYzVkdsdFpTSXNJbTl1VUd4aGVXaGxZV1JFYjNkdUlpd2liMjVRYkdGNWFHVmhaRlZ3SWl3aVkzVnljbVZ1ZEZScGJXVWlMQ0p6ZEc5d1EyeHBZMnNpTENKb1lXNWtiR1ZOYjNWelpVMXZkbVVpTENKb1lXNWtiR1ZOYjNWelpWVndJaXdpYzJWMFVHeGhlV2hsWVdSU1pXWWlMQ0ptZFd4c2MyTnlaV1Z1Ulc1aFlteGxaQ0lzSW5kbFltdHBkRVoxYkd4elkzSmxaVzVGYm1GaWJHVmtJaXdpYlc5NlJuVnNiRk5qY21WbGJrVnVZV0pzWldRaUxDSnRjMFoxYkd4elkzSmxaVzVGYm1GaWJHVmtJaXdpZEdsdFpWUnZVM1J5YVc1bklpd2lkR2x0WlNJc0luSnZkVzVrWldRaUxDSnRhVzUxZEdWeklpd2ljMlZqYjI1a2N5SXNJbTFwYm5WMFpYTlRkSElpTENKelpXTnZibVJ6VTNSeUlpd2lWbWxrWlc5RGIyNTBjbTlzY3lJc0ltOXVSblZzYkhOamNtVmxia05vWVc1blpTSXNJbkJzWVhscGJtY2lMQ0p2YmxCaGRYTmxJaXdpYjI1UWJHRjVJaXdpYjI1V2IyeDFiV1ZEYUdGdVoyVWlMQ0poWTJObGMzTnBZbWxzYVhSNVRXRjRhVzFwZW1WTVlXSmxiQ0lzSW1GalkyVnpjMmxpYVd4cGRIbE5hVzVwYldsNlpVeGhZbVZzSWl3aVlXTmpaWE56YVdKcGJHbDBlVTExZEdWTVlXSmxiQ0lzSW1GalkyVnpjMmxpYVd4cGRIbFFZWFZ6WlV4aFltVnNJaXdpWVdOalpYTnphV0pwYkdsMGVWQnNZWGxNWVdKbGJDSXNJbUZqWTJWemMybGlhV3hwZEhsVmJtMTFkR1ZNWVdKbGJDSXNJbVoxYkd4elkzSmxaVzRpTENKMmIyeDFiV1VpTENKdGRYUmxaQ0lzSW5Ob2IzZEdkV3hzYzJOeVpXVnVRblYwZEc5dUlpd2lZMjl1ZEhKdmJITWlMQ0pvWVc1a2JHVlFiR0Y1YVc1blEyaGhibWRsSWl3aWFHRnVaR3hsVm05c2RXMWxRMmhoYm1kbElpd2lhR0Z1Wkd4bFJuVnNiSE5qY21WbGJrTm9ZVzVuWlNJc0luSmxjWFZsYzNSR2RXeHNjMk55WldWdUlpd2lkMlZpYTJsMFVtVnhkV1Z6ZEVaMWJHeHpZM0psWlc0aUxDSnRiM3BTWlhGMVpYTjBSblZzYkZOamNtVmxiaUlzSW0xelVtVnhkV1Z6ZEVaMWJHeHpZM0psWlc0aUxDSmxlR2wwUm5Wc2JITmpjbVZsYmlJc0luZGxZbXRwZEVWNGFYUkdkV3hzYzJOeVpXVnVJaXdpYlc5NlEyRnVZMlZzUm5Wc2JGTmpjbVZsYmlJc0ltMXpSWGhwZEVaMWJHeHpZM0psWlc0aUxDSnBjMFoxYkd4elkzSmxaVzRpTENKbWRXeHNjMk55WldWdVJXeGxiV1Z1ZENJc0luZGxZbXRwZEVaMWJHeHpZM0psWlc1RmJHVnRaVzUwSWl3aWJXOTZSblZzYkZOamNtVmxia1ZzWlcxbGJuUWlMQ0p0YzBaMWJHeHpZM0psWlc1RmJHVnRaVzUwSWl3aVlXUmtSblZzYkhOamNtVmxia1YyWlc1MFRHbHpkR1Z1WlhJaUxDSnNhWE4wWlc1bGNpSXNJbkpsYlc5MlpVWjFiR3h6WTNKbFpXNUZkbVZ1ZEV4cGMzUmxibVZ5SWl3aWFYTk9aWGRUYjNWeVkyVWlMQ0p2YkdSVGIzVnlZMlVpTENKdVpYZFRiM1Z5WTJVaUxDSnBjMEZ5Y21GNUlpd2ljMjkxY21ObElpd2lWbWxrWlc4aUxDSndiR0Y1WlhJaUxDSjJhV1JsYnlJc0luQnNZWGxpWVdOclVtRjBaU0lzSW14dllXUWlMQ0p2YmxKbFlXUjVJaXdpYjI1RWRYSmhkR2x2YmtOb1lXNW5aU0lzSW05dVJXNWtaV1FpTENKdmJreHZZV1JsWkVOb1lXNW5aU0lzSW1KMVptWmxjbVZrSWl3aWJHOWhaR1ZrSWl3aWIyNVRaV1ZySWl3aWIyNVVhVzFsUTJoaGJtZGxJaXdpYzJWMFZtOXNkVzFsSWl3aWMyVjBVR3hoZVdKaFkydFNZWFJsSWl3aVkyRndkR2x2Ym5NaUxDSnNiMjl3SWl3aWNHeGhlWE5KYm14cGJtVWlMQ0p3YjNOMFpYSWlMQ0p3Y21Wc2IyRmtJaXdpYzJWMFVHeGhlV1Z5VW1WbUlpd2ljMlYwVm1sa1pXOVNaV1lpTENKb1lXNWtiR1ZEWVc1UWJHRjVJaXdpYUdGdVpHeGxSSFZ5WVhScGIyNURhR0Z1WjJVaUxDSm9ZVzVrYkdWRmJtUmxaQ0lzSW1oaGJtUnNaVk5sWldzaUxDSm9ZVzVrYkdWVWFXMWxWWEJrWVhSbElpd2lhR0Z1Wkd4bFVISnZaM0psYzNNaUxDSm9ZVzVrYkdWUWJHRjVJaXdpYUdGdVpHeGxVR3hoZVdobFlXUkViM2R1SWl3aWFHRnVaR3hsVUd4aGVXaGxZV1JWY0NJc0ltaGhibVJzWlZCaGRYTmxJaXdpZEc5bloyeGxSblZzYkhOamNtVmxiaUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVVZCT3pzN096czdPenM3T3pzN096czdRVUZyUWtFN1FVRkRRVHRCUVUxQkxFRkJRVThzU1VGQlRVRXNVVUZCVVN4SFFVRkhMRk5CUVZoQkxGRkJRVmM3UVVGQlFTeFRRVUZqTzBGQlEzQkRReXhKUVVGQlFTeFRRVUZUTEVWQlFVVXNTVUZCU1VNc1IwRkJTaXhGUVVSNVFqdEJRVVZ3UTBNc1NVRkJRVUVzVjBGQlZ5eEZRVUZGTzBGQlJuVkNMRWRCUVdRN1FVRkJRU3hEUVVGcVFqdEJRVXRRTEVGQlFVOHNTVUZCVFVNc1lVRkJZU3hIUVVGSExGTkJRV2hDUVN4aFFVRm5RanRCUVVGQkxHOURRVUZKUXl4VlFVRktPMEZCUVVsQkxFbEJRVUZCTEZWQlFVbzdRVUZCUVRzN1FVRkJRU3hUUVVFd1F6dEJRVU55UlVvc1NVRkJRVUVzVTBGQlV5eEZRVUZGTEVsQlFVbERMRWRCUVVvc1EwRkJVVWNzVlVGQlVpeERRVVF3UkR0QlFVVnlSVVlzU1VGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUm5kRUxFZEJRVEZETzBGQlFVRXNRMEZCZEVJN1FVRkxVQ3hCUVVGUExFbEJRVTFITEdWQlFXVXNSMEZCUnl4VFFVRnNRa0VzWlVGQmEwSXNRMEZCUTBnc1YwRkJSRHRCUVVGQkxGTkJRWE5ETzBGQlEyNUZSaXhKUVVGQlFTeFRRVUZUTEVWQlFVVXNTVUZCU1VNc1IwRkJTaXhGUVVSM1JEdEJRVVZ1UlVNc1NVRkJRVUVzVjBGQlZ5eEZRVUZZUVR0QlFVWnRSU3hIUVVGMFF6dEJRVUZCTEVOQlFYaENPMEZCUzFBc1FVRkJUeXhKUVVGTlNTeE5RVUZOTEVkQlFVY3NVMEZCVkVFc1RVRkJVeXhEUVVGRFF5eE5RVUZFTzBGQlFVRXNVMEZEY0VKQkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVTkZPMEZCUVVFc1VVRkRaVU1zVlVGRVppeFJRVU5KVkN4VFFVUktPMEZCUVVFc1VVRkRkME5WTEZsQlJIaERMRkZCUXpKQ1VpeFhRVVF6UWp0QlFVRkJMRkZCUldWVExGVkJSbVlzVTBGRlNWZ3NVMEZHU2p0QlFVRkJMRkZCUlhkRFdTeFpRVVo0UXl4VFFVVXlRbFlzVjBGR00wSTdRVUZCUVN4WFFVZE5PMEZCUTBwR0xFMUJRVUZCTEZOQlFWTXNSVUZCUlN4SlFVRkpReXhIUVVGS0xEaENRVUZaVVN4VlFVRmFMSE5DUVVFeVFrVXNWVUZCTTBJc1IwRkVVRHRCUVVWS1ZDeE5RVUZCUVN4WFFVRlhMRzlEUVVGUFVTeFpRVUZRTEVkQlFYZENSU3haUVVGNFFqdEJRVVpRTEV0QlNFNDdRVUZCUVN4SFFVUkdMRVZCVVVWaUxGRkJRVkVzUlVGU1ZpeERRVVJ2UWp0QlFVRkJMRU5CUVdZN1FVRlpVQ3hCUVVGUExFbEJRVTFqTEZsQlFWa3NSMEZCUnl4VFFVRm1RU3haUVVGbExFTkJRVU5ETEVWQlFVUTdRVUZCUVN4VFFVRXJRanRCUVVGQkxGRkJRM3BFWkN4VFFVUjVSQ3hUUVVONlJFRXNVMEZFZVVRN1FVRkJRU3hSUVVWNlJFVXNWMEZHZVVRc1UwRkZla1JCTEZkQlJubEVPMEZCUVVFc1YwRkhkRU03UVVGRGJrSkdMRTFCUVVGQkxGTkJRVk1zUlVGQlJTeEpRVUZKUXl4SFFVRktMRU5CUVZGakxFdEJRVXNzUTBGQlEwTXNTVUZCVGl4RFFVRlhhRUlzVTBGQldDeEZRVUZ6UW1sQ0xFZEJRWFJDTEVOQlFUQkNTQ3hGUVVFeFFpeERRVUZTTEVOQlJGRTdRVUZGYmtKYUxFMUJRVUZCTEZkQlFWY3NSVUZCV0VFN1FVRkdiVUlzUzBGSWMwTTdRVUZCUVN4SFFVRXZRanRCUVVGQkxFTkJRWEpDTzBGQlVWQXNRVUZCVHl4SlFVRk5aMElzVDBGQlR5eEhRVUZITEZOQlFWWkJMRTlCUVZVc1VVRkhhVU03UVVGQlFTeE5RVVowUkd4Q0xGTkJSWE5FTEZOQlJuUkVRU3hUUVVWelJEdEJRVUZCTEUxQlJIUkVSU3hYUVVOelJDeFRRVVIwUkVFc1YwRkRjMFE3UVVGRGRFUXNUVUZCVFdsQ0xFdEJRVXNzUjBGQlJ5eEZRVUZrT3p0QlFVVkJMRTFCUVVsdVFpeFRRVUZUTEVOQlFVTnZRaXhKUVVGV0xFZEJRV2xDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM1JDTzBGQlEwRTdRVUZEUVR0QlFVTkJSQ3hKUVVGQlFTeExRVUZMTEVOQlFVTnVRaXhUUVVGT0xFZEJRV3RDWlN4TFFVRkxMRU5CUVVORExFbEJRVTRzUTBGQlYyaENMRk5CUVZnc1JVRkRabkZDTEVsQlJHVXNSMEZGWmtNc1NVRkdaU3hEUVVWV0xFZEJSbFVzUTBGQmJFSTdRVUZIUkRzN1FVRkZSQ3hOUVVGSlF5eE5RVUZOTEVOQlFVTkRMRWxCUVZBc1EwRkJXWFJDTEZkQlFWb3NSVUZCZVVKMVFpeE5RVUY2UWl4SFFVRnJReXhEUVVGMFF5eEZRVUY1UXp0QlFVTjJRMDRzU1VGQlFVRXNTMEZCU3l4RFFVRkRUeXhMUVVGT0xFZEJRV040UWl4WFFVRmtPMEZCUTBRN08wRkJSVVFzVTBGQlQybENMRXRCUVZBN1FVRkRSQ3hEUVhCQ1RUczdRVU53UkZBN096czdPenM3TzBGQlZVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hCUVVGUExFbEJRVTFSTEUxQlFVMHNSMEZCUnl4VFFVRlVRU3hOUVVGVE8wRkJRVUVzYjBOQlFVbDJRaXhWUVVGS08wRkJRVWxCTEVsQlFVRkJMRlZCUVVvN1FVRkJRVHM3UVVGQlFTeFRRVUZyUXl4VlFVRkRkMElzUjBGQlJEdEJRVUZCTEZkQlEzUkVRU3hIUVVGSExFZEJRVWQ2UWl4aFFVRmhMRTFCUVdJc1UwRkJhVUpETEZWQlFXcENMRU5CUVVnc1IwRkJhME5NTEZGQlFWRXNSVUZFVXp0QlFVRkJMRWRCUVd4RE8wRkJRVUVzUTBGQlpqdEJRVWxRTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hCUVVGUExFbEJRVTA0UWl4UFFVRlBMRWRCUVVjc1UwRkJWa0VzVDBGQlZTeERRVUZEV2l4SFFVRkVPMEZCUVVFc1UwRkJiME1zVlVGQlExY3NSMEZCUkR0QlFVRkJMRmRCUTNwRVRDeE5RVUZOTEVOQlFVTlBMRk5CUVZBc1EwRkJhVUpETEdOQlFXcENMRU5CUVdkRFF5eEpRVUZvUXl4RFFVRnhRMllzUjBGQmNrTXNSVUZCTUVOWExFZEJRVEZETEVsQlEwbDZRaXhoUVVGaExFTkJRVU5qTEVkQlFVY3NRMEZCUTFjc1IwRkJSQ3hEUVVGS0xFTkJSR3BDTEVkQlJVazNRaXhSUVVGUkxFVkJTRFpETzBGQlFVRXNSMEZCY0VNN1FVRkJRU3hEUVVGb1FqdEJRVTFRTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hCUVVGUExFbEJRVTFyUXl4TFFVRkxMRWRCUVVjc1UwRkJVa0VzUzBGQlVTeERRVUZEUXl4TFFVRkVPMEZCUVVFc1UwRkJiVUlzVlVGQlEwTXNRMEZCUkR0QlFVRkJMRmRCUTNSRGFFTXNZVUZCWVN4WFFVRkpLMElzUzBGQlNpeFRRVUZaUXl4RFFVRkRMRWRCUVVjc1EwRkJTaXhqUVVGWlF5eEpRVUZKTEVOQlFVTkRMRWRCUVV3c1EwRkJVMFlzUTBGQlZDeERRVUZhTEVsQlFUUkNRU3hEUVVGNFF5eEZRVVI1UWp0QlFVRkJMRWRCUVc1Q08wRkJRVUVzUTBGQlpEdEJRVWxRTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hCUVVGUExFbEJRVTFITEdkQ1FVRm5RaXhIUVVGSExGTkJRVzVDUVN4blFrRkJiVUlzUTBGQlEwb3NTMEZCUkR0QlFVRkJMRk5CUVcxQ0xGVkJRVU5ETEVOQlFVUTdRVUZCUVN4WFFVTnFSRUVzUTBGQlF5eExRVUZMTEVOQlFVNHNSMEZCVlhCRExGRkJRVkVzUlVGQmJFSXNSMEZCZFVKclF5eExRVUZMTEVOQlFVTkRMRXRCUVVRc1EwRkJUQ3hEUVVGaFF5eERRVUZpTEVOQlJEQkNPMEZCUVVFc1IwRkJia0k3UVVGQlFTeERRVUY2UWp0QlFVbFFPMEZCUTBFN08wRkJRMEVzUVVGQlR5eFRRVUZUU1N4SlFVRlVMRU5CUTB4NlFpeEZRVVJMTEVWQlJVd3dRaXhMUVVaTExFVkJSMk03UVVGRGJrSXNUVUZCVFhaQ0xFZEJRVWNzUjBGQlIwb3NXVUZCV1N4RFFVRkRMRlZCUVVFMFFpeEpRVUZKTzBGQlFVRXNWMEZCU1VRc1MwRkJTeXhEUVVGRFF5eEpRVUZFTEVOQlFWUTdRVUZCUVN4SFFVRk1MRU5CUVhoQ08wRkJRMEVzVTBGQlR5eFZRVUZEWWl4SFFVRkVPMEZCUVVFc1YwRkJiVUpZTEVkQlFVY3NRMEZCUTBnc1JVRkJSU3hEUVVGRFl5eEhRVUZFTEVOQlFVZ3NRMEZCZEVJN1FVRkJRU3hIUVVGUU8wRkJRMFE3UVVGSFJEczdRVUZEUVN4QlFVRlBMRWxCUVUxakxFdEJRVXNzUjBGQlJ5eFRRVUZTUVN4TFFVRlJPMEZCUVVFc2NVTkJRVTlETEVkQlFWQTdRVUZCVDBFc1NVRkJRVUVzUjBGQlVEdEJRVUZCT3p0QlFVRkJMRk5CUVd0RExGVkJRVU5tTEVkQlFVUTdRVUZCUVN4WFFVTnlSSFJDTEUxQlFVMHNRMEZCUTNGRExFZEJRVWNzUTBGQlF6RkNMRWRCUVVvc1EwRkJVU3hWUVVGQlNDeEZRVUZGTzBGQlFVRXNZVUZCU1VFc1JVRkJSU3hEUVVGRFl5eEhRVUZFTEVOQlFVNDdRVUZCUVN4TFFVRldMRU5CUVVRc1EwRkVLME03UVVGQlFTeEhRVUZzUXp0QlFVRkJMRU5CUVdRN08wRkRja0pRT3pzN096czdPenM3T3p0QlFXbE9RVHM3UVVGRlFUczdPenM3T3pzN08wRkJWVUVzU1VGQlRXZENMRFJDUVVFMFFpeEhRVUZITEZOQlFTOUNRU3cwUWtGQkswSXNRMEZCUTBNc1VVRkJSRHRCUVVGQkxGTkJRWE5DTEZWQlEzcEVReXhEUVVSNVJDeEZRVVV2UXp0QlFVTldMRkZCUVVrc1QwRkJUMEVzUTBGQlVDeExRVUZoTEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTEdGQlFVOVFMRWxCUVVrc1EwRkJRMFFzWjBKQlFXZENMRU5CUVVOUExGRkJRVVFzUTBGQmFrSXNSVUZCTmtKRkxGVkJRVGRDTEVOQlFVb3NRMEZCTmtORUxFTkJRVGRETEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hSUVVGSlFTeERRVUZETEV0QlFVc3NUVUZCVml4RlFVRnJRanRCUVVOb1FpeGhRVUZQTTBNc1lVRkJZU3hEUVVGRE5FTXNWVUZCVlN4WFFVRkpSaXhSUVVGS0xGVkJRVmdzUTBGQmNFSTdRVUZEUkRzN1FVRkZSQ3hYUVVGUE9VTXNVVUZCVVN4RlFVRm1PMEZCUTBRc1IwRmFiME03UVVGQlFTeERRVUZ5UXpzN1FVRmhRU3hKUVVGTmFVUXNVVUZCVVN4SFFVRkhMRk5CUVZoQkxGRkJRVmNzUTBGQlEwTXNRMEZCUkN4RlFVRjNRanRCUVVOMlF5eE5RVUZKTEU5QlFVOUJMRU5CUVZBc1MwRkJZU3hSUVVGcVFpeEZRVUV5UWp0QlFVTjZRaXhYUVVGUFZpeEpRVUZKTEVOQlFVTk9MRXRCUVVzc1EwRkJReXhWUVVGRUxFTkJRVTRzUlVGQmIwSnBRaXhQUVVGd1FpeERRVUZLTEVOQlFXbERSQ3hEUVVGcVF5eERRVUZRTzBGQlEwUTdPMEZCUlVRc1RVRkJTVUVzUTBGQlF5eExRVUZMTEZGQlFWWXNSVUZCYjBJN1FVRkRiRUlzVjBGQlR6bERMR0ZCUVdFc1EwRkJReXRETEU5QlFVOHNRMEZCUTBNc1RVRkJWQ3hEUVVGd1FqdEJRVU5FT3p0QlFVVkVMRTFCUVVsR0xFTkJRVU1zUzBGQlN5eE5RVUZXTEVWQlFXdENPMEZCUTJoQ0xGZEJRVTg1UXl4aFFVRmhMRU5CUVVNclF5eFBRVUZQTEVOQlFVTkZMRWxCUVZRc1EwRkJjRUk3UVVGRFJEczdRVUZGUkN4VFFVRlBja1FzVVVGQlVTeEZRVUZtTzBGQlEwUXNRMEZrUkRzN1FVRm5Ra0VzU1VGQlRYTkVMRmRCUVZjc1IwRkJSMVFzTkVKQlFUUkNMRU5CUVVNc1lVRkJSQ3hEUVVGb1JEdEJRVU5CTEVsQlFVMVZMRk5CUVZNc1IwRkJSMVlzTkVKQlFUUkNMRU5CUVVNc1YwRkJSQ3hEUVVFNVF6dEJRVU5CTEVsQlFVMVhMRk5CUVZNc1IwRkJSMWdzTkVKQlFUUkNMRU5CUVVNc1YwRkJSQ3hEUVVFNVF6dEJRVU5CTEVsQlFVMVpMRmRCUVZjc1IwRkJSMW9zTkVKQlFUUkNMRU5CUVVNc1lVRkJSQ3hEUVVGb1JEdEJRVU5CTEVsQlFVMWhMRmxCUVZrc1IwRkJSMklzTkVKQlFUUkNMRU5CUVVNc1kwRkJSQ3hEUVVGcVJEdEJRVU5CTEVsQlFVMWpMRlZCUVZVc1IwRkJSMlFzTkVKQlFUUkNMRU5CUVVNc1dVRkJSQ3hEUVVFdlF6dEJRVU5CTEVsQlFVMWxMRTFCUVUwc1IwRkJSMnBDTEV0QlFVc3NRMEZCUTJFc1UwRkJSQ3hGUVVGWlJTeFpRVUZhTEVWQlFUQkNReXhWUVVFeFFpeEZRVUZ6UTBZc1YwRkJkRU1zUTBGQmNFSTdRVUZGUVN4SlFVRk5TU3hYUVVGWExFZEJRVWRvUWl3MFFrRkJORUlzUTBGQlF5eGhRVUZFTEVOQlFXaEVPMEZCUTBFc1NVRkJUV2xDTEdGQlFXRXNSMEZCUjJwQ0xEUkNRVUUwUWl4RFFVRkRMR1ZCUVVRc1EwRkJiRVE3UVVGRFFTeEpRVUZOYTBJc1kwRkJZeXhIUVVGSGJFSXNORUpCUVRSQ0xFTkJRVU1zWjBKQlFVUXNRMEZCYmtRN1FVRkRRU3hKUVVGTmJVSXNXVUZCV1N4SFFVRkhia0lzTkVKQlFUUkNMRU5CUVVNc1kwRkJSQ3hEUVVGcVJEdEJRVU5CTEVsQlFVMXZRaXhSUVVGUkxFZEJRVWQwUWl4TFFVRkxMRU5CUTNCQ2EwSXNWMEZFYjBJc1JVRkZjRUpGTEdOQlJtOUNMRVZCUjNCQ1F5eFpRVWh2UWl4RlFVbHdRa1lzWVVGS2IwSXNRMEZCZEVJN1FVRlBRU3hKUVVGTlNTeFhRVUZYTEVkQlFVZHlRaXcwUWtGQk5FSXNRMEZCUXl4aFFVRkVMRU5CUVdoRU8wRkJRMEVzU1VGQlRYTkNMR0ZCUVdFc1IwRkJSM1JDTERSQ1FVRTBRaXhEUVVGRExHVkJRVVFzUTBGQmJFUTdRVUZEUVN4SlFVRk5kVUlzWTBGQll5eEhRVUZIZGtJc05FSkJRVFJDTEVOQlFVTXNaMEpCUVVRc1EwRkJia1E3UVVGRFFTeEpRVUZOZDBJc1dVRkJXU3hIUVVGSGVFSXNORUpCUVRSQ0xFTkJRVU1zWTBGQlJDeERRVUZxUkR0QlFVTkJMRWxCUVUxNVFpeFJRVUZSTEVkQlFVY3pRaXhMUVVGTExFTkJRM0JDZFVJc1YwRkViMElzUlVGRmNFSkZMR05CUm05Q0xFVkJSM0JDUXl4WlFVaHZRaXhGUVVsd1FrWXNZVUZLYjBJc1EwRkJkRUk3UVVGUFFTeEpRVUZOU1N4WFFVRlhMRWRCUVVjeFFpdzBRa0ZCTkVJc1EwRkJReXhoUVVGRUxFTkJRV2hFTzBGQlEwRXNTVUZCVFRKQ0xHRkJRV0VzUjBGQlJ6TkNMRFJDUVVFMFFpeERRVUZETEdWQlFVUXNRMEZCYkVRN1FVRkRRU3hKUVVGTk5FSXNZMEZCWXl4SFFVRkhOVUlzTkVKQlFUUkNMRU5CUVVNc1owSkJRVVFzUTBGQmJrUTdRVUZEUVN4SlFVRk5Oa0lzV1VGQldTeEhRVUZITjBJc05FSkJRVFJDTEVOQlFVTXNZMEZCUkN4RFFVRnFSRHRCUVVOQkxFbEJRVTA0UWl4UlFVRlJMRWRCUVVkb1F5eExRVUZMTEVOQlEzQkNORUlzVjBGRWIwSXNSVUZGY0VKRkxHTkJSbTlDTEVWQlIzQkNReXhaUVVodlFpeEZRVWx3UWtZc1lVRktiMElzUTBGQmRFSTdRVUZQUVN4SlFVRk5TU3hSUVVGUkxFZEJRVWR3UXl4SlFVRkpMRU5CUVVORUxHZENRVUZuUWl4RFFVRkRMRlZCUVVRc1EwRkJha0lzUlVGQkswSlRMRlZCUVM5Q0xFTkJRWEpDTzBGQlEwRXNTVUZCVFRaQ0xGRkJRVkVzUjBGQlIzSkRMRWxCUVVrc1EwRkJRMFFzWjBKQlFXZENMRU5CUVVNc1ZVRkJSQ3hEUVVGcVFpeEZRVUVyUWxNc1ZVRkJMMElzUTBGQmNrSTdRVUZEUVN4SlFVRk5PRUlzVDBGQlR5eEhRVUZIYmtNc1MwRkJTeXhEUVVGRGFVTXNVVUZCUkN4RlFVRlhReXhSUVVGWUxFTkJRWEpDTzBGQlJVRXNTVUZCVFVVc1ZVRkJWU3hIUVVGSGRrTXNTVUZCU1N4RFFVRkRSQ3huUWtGQlowSXNRMEZCUXl4WlFVRkVMRU5CUVdwQ0xFVkJRV2xEVXl4VlFVRnFReXhEUVVGMlFqdEJRVU5CTEVsQlFVMW5ReXhWUVVGVkxFZEJRVWQ0UXl4SlFVRkpMRU5CUVVORUxHZENRVUZuUWl4RFFVRkRMRmxCUVVRc1EwRkJha0lzUlVGQmFVTlRMRlZCUVdwRExFTkJRWFpDTzBGQlEwRXNTVUZCVFdsRExGTkJRVk1zUjBGQlIzUkRMRXRCUVVzc1EwRkJRMjlETEZWQlFVUXNSVUZCWVVNc1ZVRkJZaXhEUVVGMlFqdEJRVVZCTEVsQlFVMUZMRlZCUVZVc1IwRkJSekZETEVsQlFVa3NRMEZCUTBRc1owSkJRV2RDTEVOQlFVTXNXVUZCUkN4RFFVRnFRaXhGUVVGcFExTXNWVUZCYWtNc1EwRkJka0k3UVVGRFFTeEpRVUZOYlVNc1ZVRkJWU3hIUVVGSE0wTXNTVUZCU1N4RFFVRkRSQ3huUWtGQlowSXNRMEZCUXl4WlFVRkVMRU5CUVdwQ0xFVkJRV2xEVXl4VlFVRnFReXhEUVVGMlFqdEJRVU5CTEVsQlFVMXZReXhUUVVGVExFZEJRVWQ2UXl4TFFVRkxMRU5CUVVOMVF5eFZRVUZFTEVWQlFXRkRMRlZCUVdJc1EwRkJka0k3UVVGRlFTeEpRVUZOUlN4VlFVRlZMRWRCUVVjM1F5eEpRVUZKTEVOQlFVTkVMR2RDUVVGblFpeERRVUZETEZsQlFVUXNRMEZCYWtJc1JVRkJhVU5UTEZWQlFXcERMRU5CUVhaQ08wRkJRMEVzU1VGQlRYTkRMRlZCUVZVc1IwRkJSemxETEVsQlFVa3NRMEZCUTBRc1owSkJRV2RDTEVOQlFVTXNXVUZCUkN4RFFVRnFRaXhGUVVGcFExTXNWVUZCYWtNc1EwRkJka0k3UVVGRFFTeEpRVUZOZFVNc1UwRkJVeXhIUVVGSE5VTXNTMEZCU3l4RFFVRkRNRU1zVlVGQlJDeEZRVUZoUXl4VlFVRmlMRU5CUVhaQ08wRkJSVUVzU1VGQlRVVXNWVUZCVlN4SFFVRkhNVVVzV1VGQldTeERRVUZETEZWQlFVRTBRaXhKUVVGSk8wRkJRVUVzVTBGQlNXeERMRTFCUVUwc1EwRkJRMnRETEVsQlFVUXNRMEZCVmp0QlFVRkJMRU5CUVV3c1EwRkJMMEk3TzBGQlEwRXNTVUZCVFN0RExFOUJRVThzUjBGQlJ5eFRRVUZXUVN4UFFVRlZMRU5CUVVFMVJDeEhRVUZITEVWQlFVazdRVUZEY2tJc1RVRkJTVUVzUjBGQlJ5eEhRVUZITEVOQlFVNHNTVUZCVjBFc1IwRkJSeXhIUVVGSExFTkJRWEpDTEVWQlFYZENPMEZCUTNSQ0xGZEJRVTh5UkN4VlFVRlZMRU5CUVVOMFJDeExRVUZMTEVOQlFVTXNWVUZCUkN4RFFVRk1MRU5CUVd0Q1RDeEhRVUZITEVkQlFVY3NSVUZCZUVJc1EwRkJSQ3hEUVVGcVFqdEJRVU5FT3p0QlFVTkVMRk5CUVU4eVJDeFZRVUZWTEVOQlFVTjBSQ3hMUVVGTExFTkJRVU1zVTBGQlJDeERRVUZNTEVOQlFXbENUQ3hIUVVGcVFpeERRVUZFTEVOQlFXcENPMEZCUTBRc1EwRk1SRHRCUVU5Qk96czdPenM3TzBGQlRVRXNTVUZCVFRaRUxFMUJRVTBzUjBGQlJ5eFRRVUZVUVN4TlFVRlRMRU5CUVVORExFZEJRVVE3UVVGQlFTeFRRVUZwUWpkRkxGbEJRVmtzUTBGQlF5eFZRVUZCTkVJc1NVRkJTVHRCUVVGQkxIRkNRVUZQYVVRc1IwRkJVQ3hUUVVGaGFrUXNTVUZCWWp0QlFVRkJMRWRCUVV3c1EwRkJOMEk3UVVGQlFTeERRVUZtT3p0QlFVTkJMRWxCUVUxclJDeFBRVUZQTEVkQlFVY3NVMEZCVmtFc1QwRkJWU3hEUVVGQlF5eExRVUZMTEVWQlFVazdRVUZEZGtJc1ZVRkJVVUVzUzBGQlVqdEJRVU5GTEZOQlFVc3NUVUZCVER0QlFVTkZMR0ZCUVU5NlJpeGhRVUZoTEVOQlFVTXNZVUZCUkN4RlFVRm5RaXhqUVVGb1FpeERRVUZ3UWpzN1FVRkRSaXhUUVVGTExGbEJRVXc3UVVGRFJTeGhRVUZQUVN4aFFVRmhMRU5CUVVNc1lVRkJSQ3hGUVVGblFpeHBRa0ZCYUVJc1EwRkJjRUk3TzBGQlEwWXNVMEZCU3l4aFFVRk1PMEZCUTBVc1lVRkJUMEVzWVVGQllTeERRVUZETEc5Q1FVRkVMRU5CUVhCQ096dEJRVU5HTEZOQlFVc3NaMEpCUVV3N1FVRkRSU3hoUVVGUFFTeGhRVUZoTEVOQlFVTXNkVUpCUVVRc1EwRkJjRUk3TzBGQlEwWXNVMEZCU3l4TFFVRk1PMEZCUTBVc1lVRkJUMEVzWVVGQllTeERRVUZETEdGQlFVUXNRMEZCY0VJN08wRkJRMFk3UVVGRFJUdEJRVU5CTEdGQlFVOUJMR0ZCUVdFc1EwRkJReXhqUVVGRUxFTkJRWEJDTzBGQllrbzdRVUZsUkN4RFFXaENSRHM3UVVGcFFrRXNTVUZCVFRCR0xFMUJRVTBzUjBGQlJ6VkVMRXRCUVVzc1EwRkJReXhMUVVGRUxFTkJRWEJDTzBGQlJVRTdPenM3T3p0QlFVMUJMRWxCUVUwMlJDeFJRVUZSTEVkQlFVYzdRVUZEWmtNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEZsQlFVRklMRXRCUVVzc1JVRkJTVHRCUVVOWUxGRkJRVWtzUTBGQlEwRXNTMEZCVEN4RlFVRlpPMEZCUTFZc1lVRkJUemRHTEZGQlFWRXNSVUZCWmp0QlFVTkVPenRCUVVORUxGZEJRVTlqTEZsQlFWa3NRMEZCUXl4VlFVRkJiVVlzUTBGQlF6dEJRVUZCTEdGQlFVbDZSaXhOUVVGTkxFTkJRVU41Uml4RFFVRkVMRU5CUVZZN1FVRkJRU3hMUVVGR0xFTkJRVm9zUTBGRFRGQXNUVUZCVFN4RFFVRkRMRWxCUVVRc1EwRkJUaXhEUVVORmJrWXNUVUZCVFN4RFFVRkRMRU5CUTB4elJpeExRVUZMTEVOQlFVTkRMRTFCUVU0c1IwRkJaVUVzVFVGQlRTeERRVUZEUkN4TFFVRkxMRU5CUVVORExFMUJRVkFzUTBGQmNrSXNSMEZCYzBNNVJpeFJRVUZSTEVWQlJIcERMRVZCUlV3c1QwRkJUelpHTEV0QlFVc3NRMEZCUTBRc1QwRkJZaXhMUVVGNVFpeFhRVUY2UWl4SFFVTkpRU3hQUVVGUExFTkJRVU5ETEV0QlFVc3NRMEZCUTBRc1QwRkJVQ3hEUVVSWUxFZEJSVWsxUml4UlFVRlJMRVZCU2xBc1EwRkJSQ3hEUVVSU0xFTkJSRXNzUTBGQlVEdEJRVlZFTEVkQlptTTdRVUZuUW1aclJ5eEZRVUZCUVN4RlFVRkZMRVZCUVVVc1dVRkJRVXdzUzBGQlN5eEZRVUZKTzBGQlExZ3NVVUZCU1N4RFFVRkRRU3hMUVVGTUxFVkJRVms3UVVGRFZpeGhRVUZQTjBZc1VVRkJVU3hGUVVGbU8wRkJRMFE3TzBGQlEwUXNWMEZCVDJNc1dVRkJXU3hEUVVGRExGVkJRVUZ0Uml4RFFVRkRPMEZCUVVFc1lVRkJTWHBHTEUxQlFVMHNRMEZCUTNsR0xFTkJRVVFzUTBGQlZqdEJRVUZCTEV0QlFVWXNRMEZCV2l4RFFVTk1VQ3hOUVVGTkxFTkJRVU1zU1VGQlJDeERRVUZPTEVOQlEwVnVSaXhOUVVGTkxFTkJRVU1zUTBGRFRITkdMRXRCUVVzc1EwRkJRME1zVFVGQlRpeEhRVUZsUVN4TlFVRk5MRU5CUVVORUxFdEJRVXNzUTBGQlEwTXNUVUZCVUN4RFFVRnlRaXhIUVVGelF6bEdMRkZCUVZFc1JVRkVla01zUlVGRlRDeFBRVUZQTmtZc1MwRkJTeXhEUVVGRFJDeFBRVUZpTEV0QlFYbENMRmRCUVhwQ0xFZEJRMGxCTEU5QlFVOHNRMEZCUTBNc1MwRkJTeXhEUVVGRFJDeFBRVUZRTEVOQlJGZ3NSMEZGU1RWR0xGRkJRVkVzUlVGS1VDeERRVUZFTEVOQlJGSXNRMEZFU3l4RFFVRlFPMEZCVlVRc1IwRTVRbU03UVVFclFtWnRSeXhGUVVGQlFTeEZRVUZGTEVWQlFVVXNXVUZCUVU0c1MwRkJTeXhGUVVGSk8wRkJRMWdzVVVGQlNTeERRVUZEUVN4TFFVRk1MRVZCUVZrN1FVRkRWaXhoUVVGUE4wWXNVVUZCVVN4RlFVRm1PMEZCUTBRN08wRkJRMFFzVjBGQlQyTXNXVUZCV1N4RFFVRkRMRlZCUVVGdFJpeERRVUZETzBGQlFVRXNZVUZCU1hwR0xFMUJRVTBzUTBGQlEzbEdMRU5CUVVRc1EwRkJWanRCUVVGQkxFdEJRVVlzUTBGQldpeERRVU5NVUN4TlFVRk5MRU5CUVVNc1NVRkJSQ3hEUVVGT0xFTkJRMFZ1Uml4TlFVRk5MRU5CUVVNc1EwRkRUSE5HTEV0QlFVc3NRMEZCUTBNc1RVRkJUaXhIUVVGbFFTeE5RVUZOTEVOQlFVTkVMRXRCUVVzc1EwRkJRME1zVFVGQlVDeERRVUZ5UWl4SFFVRnpRemxHTEZGQlFWRXNSVUZFZWtNc1JVRkZUQ3hQUVVGUE5rWXNTMEZCU3l4RFFVRkRSQ3hQUVVGaUxFdEJRWGxDTEZkQlFYcENMRWRCUTBsQkxFOUJRVThzUTBGQlEwTXNTMEZCU3l4RFFVRkRSQ3hQUVVGUUxFTkJSRmdzUjBGRlNUVkdMRkZCUVZFc1JVRktVQ3hEUVVGRUxFTkJSRklzUTBGRVN5eERRVUZRTzBGQlZVUXNSMEUzUTJNN1FVRTRRMlp2Unl4RlFVRkJRU3hGUVVGRkxFVkJRVVVzV1VGQlFWQXNTMEZCU3l4RlFVRkpPMEZCUTFnc1VVRkJTU3hEUVVGRFFTeExRVUZNTEVWQlFWazdRVUZEVml4aFFVRlBOMFlzVVVGQlVTeEZRVUZtTzBGQlEwUTdPMEZCUTBRc1YwRkJUMk1zV1VGQldTeERRVUZETEZWQlFVRnRSaXhEUVVGRE8wRkJRVUVzWVVGQlNYcEdMRTFCUVUwc1EwRkJRM2xHTEVOQlFVUXNRMEZCVmp0QlFVRkJMRXRCUVVZc1EwRkJXaXhEUVVOTVVDeE5RVUZOTEVOQlFVTXNTVUZCUkN4RFFVRk9MRU5CUTBWdVJpeE5RVUZOTEVOQlFVTXNRMEZEVEhOR0xFdEJRVXNzUTBGQlEwTXNUVUZCVGl4SFFVRmxRU3hOUVVGTkxFTkJRVU5FTEV0QlFVc3NRMEZCUTBNc1RVRkJVQ3hEUVVGeVFpeEhRVUZ6UXpsR0xGRkJRVkVzUlVGRWVrTXNSVUZGVEN4UFFVRlBOa1lzUzBGQlN5eERRVUZEUkN4UFFVRmlMRXRCUVhsQ0xGZEJRWHBDTEVkQlEwbEJMRTlCUVU4c1EwRkJRME1zUzBGQlN5eERRVUZEUkN4UFFVRlFMRU5CUkZnc1IwRkZTVFZHTEZGQlFWRXNSVUZLVUN4RFFVRkVMRU5CUkZJc1EwRkVTeXhEUVVGUU8wRkJWVVFzUjBFMVJHTTdRVUU0UkdZMFJpeEZRVUZCUVN4UFFVRlBMRVZCUVVVNVJDeFBRVUZQTEVOQlFVTTdRVUZEWm5WRkxFbEJRVUZCTEVsQlFVa3NSVUZCUlRkR0xFMUJRVTBzUTBGQlF6aEdMR0ZCUkVVN1FVRkZaa01zU1VGQlFVRXNTVUZCU1N4RlFVRkZMMFlzVFVGQlRTeERRVUZEWjBjc1lVRkdSVHRCUVVkbVF5eEpRVUZCUVN4TFFVRkxMRVZCUVVWcVJ5eE5RVUZOTEVOQlFVTnJSeXhqUVVoRE8wRkJTV1pETEVsQlFVRkJMRmRCUVZjc1JVRkJSVzVITEUxQlFVMHNRMEZCUTI5SExHOUNRVXBNTzBGQlMyWkRMRWxCUVVGQkxHTkJRV01zUlVGQlJYSkhMRTFCUVUwc1EwRkJRM05ITzBGQlRGSXNSMEZCUkN4RFFUbEVSRHRCUVhGRlptaENMRVZCUVVGQkxFMUJRVTBzUlVGQlJYUkVMRWxCUVVrc1EwRkJRMDRzUzBGQlN5eERRVUZETEU5QlFVUXNRMEZCVGl4RlFVRnBRakZDTEUxQlFXcENMRU5CY2tWSE8wRkJjMFZtZFVjc1JVRkJRVUVzVTBGQlV5eEZRVUZGYWtZc1QwRkJUeXhEUVVGRE8wRkJRMnBDYTBZc1NVRkJRVUVzUjBGQlJ5eEZRVUZGZUVjc1RVRkJUU3hEUVVGRGVVY3NZMEZFU3p0QlFVVnFRbTVDTEVsQlFVRkJMRTFCUVUwc1JVRkJSWFJHTEUxQlFVMHNRMEZCUXpCSE8wRkJSa1VzUjBGQlJDeERRWFJGU0R0QlFUSkZaa01zUlVGQlFVRXNVMEZCVXl4RlFVRkZja1lzVDBGQlR5eERRVUZETzBGQlEycENkVVVzU1VGQlFVRXNTVUZCU1N4RlFVRkZOMFlzVFVGQlRTeERRVUZETkVjc1lVRkVTVHRCUVVWcVFtSXNTVUZCUVVFc1NVRkJTU3hGUVVGRkwwWXNUVUZCVFN4RFFVRkROa2NzWVVGR1NUdEJRVWRxUWxvc1NVRkJRVUVzUzBGQlN5eEZRVUZGYWtjc1RVRkJUU3hEUVVGRE9FY3NZMEZJUnp0QlFVbHFRbGdzU1VGQlFVRXNWMEZCVnl4RlFVRkZia2NzVFVGQlRTeERRVUZESzBjc2IwSkJTa2c3UVVGTGFrSldMRWxCUVVGQkxHTkJRV01zUlVGQlJYSkhMRTFCUVUwc1EwRkJRMmRJTzBGQlRFNHNSMEZCUkN4RFFUTkZTRHRCUVd0R1prTXNSVUZCUVVFc1VVRkJVU3hGUVVGRmFrWXNTVUZCU1N4RFFVRkRUaXhMUVVGTExFTkJRVU1zVDBGQlJDeERRVUZPTEVWQlFXbENNVUlzVFVGQmFrSXNRMEZzUmtNN1FVRnRSbVpyU0N4RlFVRkJRU3hYUVVGWExFVkJRVVUxUml4UFFVRlBMRU5CUVVNN1FVRkRia0pyUml4SlFVRkJRU3hIUVVGSExFVkJRVVY0Unl4TlFVRk5MRU5CUVVOdFNDeGpRVVJQTzBGQlJXNUNOMElzU1VGQlFVRXNUVUZCVFN4RlFVRkZkRVlzVFVGQlRTeERRVUZEYjBnN1FVRkdTU3hIUVVGRUxFTkJia1pNTzBGQmQwWm1ReXhGUVVGQlFTeFRRVUZUTEVWQlFVVXZSaXhQUVVGUExFTkJRVU03UVVGRGFrSjFSU3hKUVVGQlFTeEpRVUZKTEVWQlFVVTNSaXhOUVVGTkxFTkJRVU56U0N4aFFVUkpPMEZCUldwQ2RrSXNTVUZCUVVFc1NVRkJTU3hGUVVGRkwwWXNUVUZCVFN4RFFVRkRkVWdzWVVGR1NUdEJRVWRxUW5SQ0xFbEJRVUZCTEV0QlFVc3NSVUZCUldwSExFMUJRVTBzUTBGQlEzZElMR05CU0VjN1FVRkpha0p5UWl4SlFVRkJRU3hYUVVGWExFVkJRVVZ1Unl4TlFVRk5MRU5CUVVONVNDeHZRa0ZLU0R0QlFVdHFRbkJDTEVsQlFVRkJMR05CUVdNc1JVRkJSWEpITEUxQlFVMHNRMEZCUXpCSU8wRkJURTRzUjBGQlJDeERRWGhHU0R0QlFTdEdaa01zUlVGQlFVRXNVVUZCVVN4RlFVRkZNMFlzU1VGQlNTeERRVUZEVGl4TFFVRkxMRU5CUVVNc1QwRkJSQ3hEUVVGT0xFVkJRV2xDTVVJc1RVRkJha0lzUTBFdlJrTTdRVUZuUjJZMFNDeEZRVUZCUVN4WFFVRlhMRVZCUVVWMFJ5eFBRVUZQTEVOQlFVTTdRVUZEYmtKclJpeEpRVUZCUVN4SFFVRkhMRVZCUVVWNFJ5eE5RVUZOTEVOQlFVTTJTQ3hqUVVSUE8wRkJSVzVDZGtNc1NVRkJRVUVzVFVGQlRTeEZRVUZGZEVZc1RVRkJUU3hEUVVGRE9FZzdRVUZHU1N4SFFVRkVMRU5CYUVkTU8wRkJjVWRtUXl4RlFVRkJRU3hUUVVGVExFVkJRVVY2Unl4UFFVRlBMRU5CUVVNN1FVRkRha0oxUlN4SlFVRkJRU3hKUVVGSkxFVkJRVVUzUml4TlFVRk5MRU5CUVVOblNTeGhRVVJKTzBGQlJXcENha01zU1VGQlFVRXNTVUZCU1N4RlFVRkZMMFlzVFVGQlRTeERRVUZEYVVrc1lVRkdTVHRCUVVkcVFtaERMRWxCUVVGQkxFdEJRVXNzUlVGQlJXcEhMRTFCUVUwc1EwRkJRMnRKTEdOQlNFYzdRVUZKYWtJdlFpeEpRVUZCUVN4WFFVRlhMRVZCUVVWdVJ5eE5RVUZOTEVOQlFVTnRTU3h2UWtGS1NEdEJRVXRxUWpsQ0xFbEJRVUZCTEdOQlFXTXNSVUZCUlhKSExFMUJRVTBzUTBGQlEyOUpPMEZCVEU0c1IwRkJSQ3hEUVhKSFNEdEJRVFJIWmtNc1JVRkJRVUVzVVVGQlVTeEZRVUZGY2tjc1NVRkJTU3hEUVVGRFRpeExRVUZMTEVOQlFVTXNUMEZCUkN4RFFVRk9MRVZCUVdsQ01VSXNUVUZCYWtJc1EwRTFSME03UVVFMlIyWnpTU3hGUVVGQlFTeFhRVUZYTEVWQlFVVm9TQ3hQUVVGUExFTkJRVU03UVVGRGJrSnJSaXhKUVVGQlFTeEhRVUZITEVWQlFVVjRSeXhOUVVGTkxFTkJRVU4xU1N4alFVUlBPMEZCUlc1Q2FrUXNTVUZCUVVFc1RVRkJUU3hGUVVGRmRFWXNUVUZCVFN4RFFVRkRkMGs3UVVGR1NTeEhRVUZFTEVOQk4wZE1PMEZCYTBobVF5eEZRVUZCUVN4WlFVRlpMRVZCUVVWdVNDeFBRVUZQTEVOQlFVTTdRVUZEY0VKdlNDeEpRVUZCUVN4TFFVRkxMRVZCUVVWRExFMUJRVTBzUTBGQlEwTXNXVUZFVFR0QlFVVndRa01zU1VGQlFVRXNSMEZCUnl4RlFVRkZSaXhOUVVGTkxFTkJRVU5ITEZWQlJsRTdRVUZIY0VKRExFbEJRVUZCTEUxQlFVMHNSVUZCUlVvc1RVRkJUU3hEUVVGRFN5eGhRVWhMTzBGQlNYQkNReXhKUVVGQlFTeFBRVUZQTEVWQlFVVk9MRTFCUVUwc1EwRkJRMDhzWTBGS1NUdEJRVXR3UWtNc1NVRkJRVUVzVFVGQlRTeEZRVUZGVWl4TlFVRk5MRU5CUVVOVExHRkJURXM3UVVGTmNFSkRMRWxCUVVGQkxFMUJRVTBzUlVGQlJWWXNUVUZCVFN4RFFVRkRWeXhoUVU1TE96dEJRVUZCTEVkQlFVUXNRMEZzU0U0N1FVRXlTR1pETEVWQlFVRkJMRlZCUVZVc1JVRkJSV3BKTEU5QlFVOHNRMEZCUXp0QlFVTnNRbTlJTEVsQlFVRkJMRXRCUVVzc1JVRkJSVU1zVFVGQlRTeERRVUZEWVN4VlFVUkpPMEZCUld4Q1dDeEpRVUZCUVN4SFFVRkhMRVZCUVVWR0xFMUJRVTBzUTBGQlEyTXNVVUZHVFR0QlFVZHNRbFlzU1VGQlFVRXNUVUZCVFN4RlFVRkZTaXhOUVVGTkxFTkJRVU5sTEZkQlNFYzdRVUZKYkVKRExFbEJRVUZCTEZGQlFWRXNSVUZCUldoQ0xFMUJRVTBzUTBGQlEybENMR0ZCU2tNN08wRkJRVUVzUjBGQlJDeERRVE5JU2p0QlFXdEpaa01zUlVGQlFVRXNVMEZCVXl4RlFVRkZka2tzVDBGQlR5eERRVUZETzBGQlEycENiMGdzU1VGQlFVRXNTMEZCU3l4RlFVRkZReXhOUVVGTkxFTkJRVU50UWl4VFFVUkhPMEZCUldwQ2FrSXNTVUZCUVVFc1IwRkJSeXhGUVVGRlJpeE5RVUZOTEVOQlFVTnZRaXhQUVVaTE8wRkJSMnBDYUVJc1NVRkJRVUVzVFVGQlRTeEZRVUZGU2l4TlFVRk5MRU5CUVVOeFFpeFZRVWhGTzBGQlNXcENUQ3hKUVVGQlFTeFJRVUZSTEVWQlFVVm9RaXhOUVVGTkxFTkJRVU56UWl4WlFVcEJPMEZCUzJwQ1F5eEpRVUZCUVN4UFFVRlBMRVZCUVVWMlFpeE5RVUZOTEVOQlFVTjNRaXhYUVV4RE96dEJRVUZCTEVkQlFVUXNRMEZzU1VnN1FVRXdTV1pETEVWQlFVRkJMRTFCUVUwc1JVRkJSV2hLTEUxQlFVMHNRMEZCUTNWSUxFMUJRVTBzUTBGQlF6QkNMRTlCUVZJc1EwRXhTVU03UVVFeVNXWkRMRVZCUVVGQkxGVkJRVlVzUlVGQlJTeHZRa0ZCUVdwR0xFdEJRVXM3UVVGQlFTeFhRVU5tZEVZc1RVRkJUU3hEUVVGRExFTkJRMHgxUWl4UFFVRlBMRU5CUVVNN1FVRkRUbTlGTEUxQlFVRkJMRVZCUVVVc1JVRkJSUzlETEU5QlFVOHNRMEZCUXpSSUxFMUJSRTQ3UVVGRlRqTkZMRTFCUVVGQkxFVkJRVVVzUlVGQlJXcEVMRTlCUVU4c1EwRkJRelpJTEUxQlJrNDdPMEZCUVVFc1MwRkJSQ3hEUVVGUUxFTkJTVWR1Uml4TFFVcElMRU5CUkVzc1JVRk5USHBHTEdGQlFXRXNRMEZCUXl0RExFOUJRVThzUTBGQlF6aElMRXRCUVZRc1EwRk9VaXhGUVU5TU4wc3NZVUZCWVN4RFFVRkRLME1zVDBGQlR5eERRVUZESzBnc2IwSkJRVlFzUTBGUVVpeERRVUZFTEVOQlJGTTdRVUZCUVN4SFFUTkpSanRCUVhGS1prTXNSVUZCUVVFc1MwRkJTeXhGUVVGRmNrb3NUMEZCVHl4RFFVRkRPMEZCUTJKelNpeEpRVUZCUVN4SlFVRkpMRVZCUVVWRExFMUJRVTBzUTBGQlEwTXNUVUZFUVR0QlFVVmlReXhKUVVGQlFTeFJRVUZSTEVWQlFVVkdMRTFCUVUwc1EwRkJRMGNzVlVGR1NqdEJRVWRpUXl4SlFVRkJRU3hKUVVGSkxFVkJRVVZLTEUxQlFVMHNRMEZCUTBzc1RVRklRVHRCUVVsaVF5eEpRVUZCUVN4SlFVRkpMRVZCUVVWT0xFMUJRVTBzUTBGQlEwOHNUVUZLUVR0QlFVdGlReXhKUVVGQlFTeEhRVUZITEVWQlFVVlNMRTFCUVUwc1EwRkJRMU1zUzBGTVF6dEJRVTFpUXl4SlFVRkJRU3hMUVVGTExFVkJRVVZXTEUxQlFVMHNRMEZCUTFjc1QwRk9SRHRCUVU5aVF5eEpRVUZCUVN4VFFVRlRMRVZCUVVWYUxFMUJRVTBzUTBGQlEyRXNWMEZRVER0QlFWRmlReXhKUVVGQlFTeExRVUZMTEVWQlFVVmtMRTFCUVUwc1EwRkJRMlVzVDBGU1JEdEJRVk5pUXl4SlFVRkJRU3hOUVVGTkxFVkJRVVZvUWl4TlFVRk5MRU5CUVVOcFFpeFJRVlJHTzBGQlZXSkRMRWxCUVVGQkxFdEJRVXNzUlVGQlJXeENMRTFCUVUwc1EwRkJRMjFDTEU5QlZrUTdRVUZYWWtNc1NVRkJRVUVzU1VGQlNTeEZRVUZGY0VJc1RVRkJUU3hEUVVGRGNVSXNUVUZZUVR0QlFWbGlReXhKUVVGQlFTeFJRVUZSTEVWQlFVVjBRaXhOUVVGTkxFTkJRVU4xUWl4VlFWcEtPMEZCWVdKRExFbEJRVUZCTEUxQlFVMHNSVUZCUlhoQ0xFMUJRVTBzUTBGQlEzbENMRkZCWWtZN1FVRmpZa01zU1VGQlFVRXNUVUZCVFN4RlFVRkZNVUlzVFVGQlRTeERRVUZETWtJc1VVRmtSanRCUVdWaVF5eEpRVUZCUVN4UlFVRlJMRVZCUVVVMVFpeE5RVUZOTEVOQlFVTTJRaXhWUVdaS08wRkJaMEppUXl4SlFVRkJRU3hOUVVGTkxFVkJRVVU1UWl4TlFVRk5MRU5CUVVNclFpeFJRV2hDUmp0QlFXbENZa01zU1VGQlFVRXNWVUZCVlN4RlFVRkZhRU1zVFVGQlRTeERRVUZEYVVNc1dVRnFRazQ3UVVGclFtSkRMRWxCUVVGQkxGTkJRVk1zUlVGQlJXeERMRTFCUVUwc1EwRkJRMjFETEZkQmJFSk1PMEZCYlVKaVF5eEpRVUZCUVN4UlFVRlJMRVZCUVVWd1F5eE5RVUZOTEVOQlFVTnhReXhWUVc1Q1NqdEJRVzlDWWtNc1NVRkJRVUVzYlVKQlFXMUNMRVZCUVVWMFF5eE5RVUZOTEVOQlFVTjFReXh4UWtGd1FtWTdPMEZCUVVFc1IwRkJSQ3hEUVhKS1F6dEJRVFJMWmtNc1JVRkJRVUVzUjBGQlJ5eEZRVUZGYWswc1RVRkJUU3hEUVVGRGRVZ3NUVUZCVFN4RFFVRkRNRVVzUjBGQlVpeERRVFZMU1R0QlFUWkxablJJTEVWQlFVRkJMRWxCUVVrc1JVRkJSWHBGTEU5QlFVOHNRMEZCUXp0QlFVTmFaMDBzU1VGQlFVRXNTVUZCU1N4RlFVRkZNMFVzVFVGQlRTeERRVUZETkVVc1VVRkVSRHRCUVVWYU1VZ3NTVUZCUVVFc1NVRkJTU3hGUVVGRk9FTXNUVUZCVFN4RFFVRkROa1VzVVVGR1JEczdRVUZCUVN4SFFVRkVMRU5CTjB0Rk8wRkJhMHhtUXl4RlFVRkJRU3hOUVVGTkxFVkJRVVVzWjBKQlFVRkJMRTlCUVUwN1FVRkJRU3hYUVVGSk0wNHNaVUZCWlN4RFFVRkRPMEZCUVVVeVRpeE5RVUZCUVN4TlFVRk5MRVZCUVU1Qk8wRkJRVVlzUzBGQlJDeERRVUZ1UWp0QlFVRkJMRWRCYkV4RE8wRkJiVXhtUXl4RlFVRkJRU3hqUVVGakxFVkJRVVZ3VFN4UFFVRlBMRU5CUVVNN1FVRkRkRUoxU0N4SlFVRkJRU3hIUVVGSExFVkJRVVZHTEUxQlFVMHNRMEZCUTJkR0xGVkJSRlU3UVVGRmRFSTFSU3hKUVVGQlFTeE5RVUZOTEVWQlFVVktMRTFCUVUwc1EwRkJRMmxHTEdGQlJrODdRVUZIZEVJelJTeEpRVUZCUVN4UFFVRlBMRVZCUVVWT0xFMUJRVTBzUTBGQlEydEdMR05CU0UwN1FVRkpkRUl4UlN4SlFVRkJRU3hOUVVGTkxFVkJRVVZTTEUxQlFVMHNRMEZCUTIxR0xHRkJTazg3UVVGTGRFSjZSU3hKUVVGQlFTeE5RVUZOTEVWQlFVVldMRTFCUVUwc1EwRkJRMjlHTEdGQlRFODdPMEZCUVVFc1IwRkJSQ3hEUVc1TVVqdEJRVEpNWmtNc1JVRkJRVUVzU1VGQlNTeEZRVUZGTlUwc1RVRkJUU3hEUVVGRGRVZ3NUVUZCVFN4RFFVRkRjMFlzUzBGQlVpeERRVE5NUnp0QlFUUk1abTVNTEVWQlFVRkJMRmRCUVZjc1JVRkJXRUVzVjBFMVRHVTdRVUUyVEdaRExFVkJRVUZCTEZOQlFWTXNSVUZCVkVFc1UwRTNUR1U3UVVFNFRHWkxMRVZCUVVGQkxFMUJRVTBzUlVGQlRrRXNUVUU1VEdVN1FVRXJUR1pLTEVWQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBFdlRHVTdRVUZuVFdaRExFVkJRVUZCTEZkQlFWY3NSVUZCV0VFc1YwRm9UV1U3UVVGcFRXWkRMRVZCUVVGQkxGbEJRVmtzUlVGQldrRXNXVUZxVFdVN1FVRnJUV1pETEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVGc1RXVTdRVUZ0VFdaTkxFVkJRVUZCTEZGQlFWRXNSVUZCVWtFc1VVRnVUV1U3UVVGdlRXWktMRVZCUVVGQkxGZEJRVmNzUlVGQldFRXNWMEZ3VFdVN1FVRnhUV1pETEVWQlFVRkJMR0ZCUVdFc1JVRkJZa0VzWVVGeVRXVTdRVUZ6VFdaRExFVkJRVUZCTEdOQlFXTXNSVUZCWkVFc1kwRjBUV1U3UVVGMVRXWkRMRVZCUVVGQkxGbEJRVmtzUlVGQldrRXNXVUYyVFdVN1FVRjNUV1pOTEVWQlFVRkJMRkZCUVZFc1JVRkJVa0VzVVVGNFRXVTdRVUY1VFdaS0xFVkJRVUZCTEZkQlFWY3NSVUZCV0VFc1YwRjZUV1U3UVVFd1RXWkRMRVZCUVVGQkxHRkJRV0VzUlVGQllrRXNZVUV4VFdVN1FVRXlUV1pETEVWQlFVRkJMR05CUVdNc1JVRkJaRUVzWTBFelRXVTdRVUUwVFdaRExFVkJRVUZCTEZsQlFWa3NSVUZCV2tFc1dVRTFUV1U3UVVFMlRXWk5MRVZCUVVGQkxGRkJRVkVzUlVGQlVrRXNVVUUzVFdVN1FVRTRUV1pLTEVWQlFVRkJMRmRCUVZjc1JVRkJXRUVzVjBFNVRXVTdRVUVyVFdaRExFVkJRVUZCTEdGQlFXRXNSVUZCWWtFc1lVRXZUV1U3UVVGblRtWkRMRVZCUVVGQkxHTkJRV01zUlVGQlpFRXNZMEZvVG1VN1FVRnBUbVpETEVWQlFVRkJMRmxCUVZrc1JVRkJXa0VzV1VGcVRtVTdRVUZyVG1ablN5eEZRVUZCUVN4VFFVRlRMRVZCUVVVc2JVSkJRVUZCTEZWQlFWTTdRVUZCUVN4WFFVRkpjRThzWlVGQlpTeERRVUZETzBGQlFVVnZUeXhOUVVGQlFTeFRRVUZUTEVWQlFWUkJPMEZCUVVZc1MwRkJSQ3hEUVVGdVFqdEJRVUZCTEVkQmJFNU1PMEZCYlU1bVF5eEZRVUZCUVN4UlFVRlJMRVZCUVVVc2EwSkJRVUZCTEZOQlFWRTdRVUZCUVN4WFFVRkpjazhzWlVGQlpTeERRVUZETzBGQlFVVnhUeXhOUVVGQlFTeFJRVUZSTEVWQlFWSkJPMEZCUVVZc1MwRkJSQ3hEUVVGdVFqdEJRVUZCTEVkQmJrNUlPMEZCYjA1bVF5eEZRVUZCUVN4VFFVRlRMRVZCUVVVc2JVSkJRVUZCTEZWQlFWTTdRVUZCUVN4WFFVRkpkRThzWlVGQlpTeERRVUZETzBGQlFVVnpUeXhOUVVGQlFTeFRRVUZUTEVWQlFWUkJPMEZCUVVZc1MwRkJSQ3hEUVVGdVFqdEJRVUZCTEVkQmNFNU1PMEZCY1U1bVF5eEZRVUZCUVN4UlFVRlJMRVZCUVVVc2EwSkJRVUZCTEZOQlFWRTdRVUZCUVN4WFFVRkpkazhzWlVGQlpTeERRVUZETzBGQlFVVjFUeXhOUVVGQlFTeFJRVUZSTEVWQlFWSkJPMEZCUVVZc1MwRkJSQ3hEUVVGdVFqdEJRVUZCTEVkQmNrNUlPMEZCYzA1bWNFb3NSVUZCUVVFc1QwRkJUeXhGUVVGUVFTeFBRWFJPWlR0QlFYVk9abkZLTEVWQlFVRkJMRkZCUVZFc1JVRkJSV2hPTEU5QlFVOHNRMEZCUXp0QlFVTm9RbWxPTEVsQlFVRkJMRTFCUVUwc1JVRkJSVFZHTEUxQlFVMHNRMEZCUXpaR0xHTkJSRU03UVVGRmFFSkRMRWxCUVVGQkxFMUJRVTBzUlVGQlJUbEdMRTFCUVUwc1EwRkJReXRHTEdOQlJrTTdRVUZIYUVKRExFbEJRVUZCTEVsQlFVa3NSVUZCUldoSExFMUJRVTBzUTBGQlEybEhMRmxCU0VjN1FVRkphRUpETEVsQlFVRkJMRTlCUVU4c1JVRkJSV3hITEUxQlFVMHNRMEZCUTIxSExHVkJTa0U3UVVGTGFFSkRMRWxCUVVGQkxFOUJRVThzUlVGQlJYQkhMRTFCUVUwc1EwRkJRM0ZITEdWQlRFRTdPMEZCUVVFc1IwRkJSQ3hEUVhaT1JqdEJRU3RPWmpGTExFVkJRVUZCTEU5QlFVOHNSVUZCVUVFc1QwRXZUbVU3UVVGblQyWkdMRVZCUVVGQkxGRkJRVkVzUlVGQlVrRXNVVUZvVDJVN1FVRnBUMlpETEVWQlFVRkJMRkZCUVZFc1JVRkJVa0VzVVVGcVQyVTdRVUZyVDJaSkxFVkJRVUZCTEZOQlFWTXNSVUZCVkVFc1UwRnNUMlU3UVVGdFQyWkdMRVZCUVVGQkxGVkJRVlVzUlVGQlZrRXNWVUZ1VDJVN1FVRnZUMlpETEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVGd1QyVTdRVUZ4VDJaSkxFVkJRVUZCTEZOQlFWTXNSVUZCVkVFc1UwRnlUMlU3UVVGelQyWkdMRVZCUVVGQkxGVkJRVlVzUlVGQlZrRXNWVUYwVDJVN1FVRjFUMlpETEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVGMlQyVTdRVUYzVDJaSkxFVkJRVUZCTEZOQlFWTXNSVUZCVkVFc1UwRjRUMlU3UVVGNVQyWkdMRVZCUVVGQkxGVkJRVlVzUlVGQlZrRXNWVUY2VDJVN1FVRXdUMlpETEVWQlFVRkJMRlZCUVZVc1JVRkJWa0VzVlVFeFQyVTdRVUV5VDJadFN5eEZRVUZCUVN4UlFVRlJMRVZCUVVVelRpeFBRVUZQTEVOQlFVTTdRVUZEYUVJMFRpeEpRVUZCUVN4UlFVRlJMRVZCUVVWMlJ5eE5RVUZOTEVOQlFVTjFSeXhSUVVSRU8wRkJSV2hDUXl4SlFVRkJRU3hSUVVGUkxFVkJRVVY0Unl4TlFVRk5MRU5CUVVOM1J5eFJRVVpFTzBGQlIyaENReXhKUVVGQlFTeExRVUZMTEVWQlFVVjZSeXhOUVVGTkxFTkJRVU41Unl4TFFVaEZPenRCUVVGQkxFZEJRVVFzUTBFelQwWTdRVUZwVUdaRExFVkJRVUZCTEV0QlFVc3NSVUZCUldwUExFMUJRVTBzUTBGQlEzVklMRTFCUVUwc1EwRkJRekpITEUxQlFWSXNRMEZxVUVVN1FVRnJVR1kzVFN4RlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQmJGQmxPMEZCYlZCbU9FMHNSVUZCUVVFc1IwRkJSeXhGUVVGRmJrOHNUVUZCVFN4RFFVRkRkVWdzVFVGQlRTeERRVUZETmtjc1NVRkJVaXhEUVc1UVNUdEJRVzlRWmtNc1JVRkJRVUVzUzBGQlN5eEZRVUZGTEdWQlFVRkJMRTFCUVVzN1FVRkJRU3hYUVVGSk0xQXNaVUZCWlN4RFFVRkRPMEZCUVVVeVVDeE5RVUZCUVN4TFFVRkxMRVZCUVV4Qk8wRkJRVVlzUzBGQlJDeERRVUZ1UWp0QlFVRkJMRWRCY0ZCSE8wRkJjVkJtUXl4RlFVRkJRU3hKUVVGSkxFVkJRVVYwVHl4TlFVRk5MRU5CUVVOMVNDeE5RVUZOTEVOQlFVTm5TQ3hSUVVGU0xFTkJjbEJITzBGQmMxQm1ReXhGUVVGQlFTeDVRa0ZCZVVJc1JVRkJSU3h0UTBGQlFYWkxMRXRCUVVzN1FVRkJRVHRCUVVNNVFqdEJRVU5CUVN4TlFVRkJRU3hMUVVGTExFbEJRVWxCTEV0QlFVc3NRMEZCUTNkTExFOUJRV1lzUjBGQmVVSXZVQ3hsUVVGbExFTkJRVU4xUml4TFFVRkxMRU5CUVVOM1N5eFBRVUZRTEVOQlFYaERMRWRCUVRCRWNsRXNVVUZCVVR0QlFVWndRenRCUVVGQk8wRkJkRkJxUWl4RFFVRnFRanRCUVRKUVFUczdPenM3TzBGQlRVRXNTVUZCVFhOUkxGRkJRVkVzUjBGQlJ5eFRRVUZZUVN4UlFVRlhMRU5CUVVORExFZEJRVVFzUlVGQlRVTXNSMEZCVGp0QlFVRkJMRk5CUVdOQkxFZEJRVWNzUTBGQlEwTXNUMEZCU2l4RFFVRlpSaXhIUVVGYUxFdEJRVzlDTEVOQlFXeERPMEZCUVVFc1EwRkJha0k3TzBGQlEwRXNTVUZCVFVjc1NVRkJTU3hIUVVGSExGTkJRVkJCTEVsQlFVOHNRMEZCUTJwUUxFbEJRVVFzUlVGQlQydFFMRWRCUVZBN1FVRkJRU3hUUVVOWWJsQXNUVUZCVFN4RFFVRkRReXhKUVVGUUxFTkJRVmxyVUN4SFFVRmFMRVZCUVdsQ2JGRXNUVUZCYWtJc1EwRkJkMElzVlVGQlEyMVJMRWRCUVVRc1JVRkJUVU1zUTBGQlRpeEZRVUZ2UWp0QlFVTXhReXhSUVVGSlVDeFJRVUZSTEVOQlFVTlBMRU5CUVVRc1JVRkJTWEJRTEVsQlFVb3NRMEZCV2l4RlFVRjFRanRCUVVOeVFpeGhRVUZQYlZBc1IwRkJVRHRCUVVORU96dEJRVU5FTERaRFFVTkxRU3hIUVVSTUxESkNRVVZIUXl4RFFVWklMRVZCUlU5R0xFZEJRVWNzUTBGQlEwVXNRMEZCUkN4RFFVWldPMEZCU1VRc1IwRlNSQ3hGUVZGSExFVkJVa2dzUTBGRVZ6dEJRVUZCTEVOQlFXSTdRVUZaUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlEwRXNTVUZCVFVNc1kwRkJZeXhIUVVGSExFTkJRVU1zVTBGQlJDeEZRVUZaTEZkQlFWb3NSVUZCZVVJc1QwRkJla0lzUTBGQmRrSTdPMEZCUjBFc1NVRkJUVU1zUjBGQlJ5eEhRVUZIUXl4VlFVRkJMRU5CUTFZc1owSkJRVzFEUXl4SFFVRnVReXhGUVVGblJUdEJRVUZCTEUxQlFUZEVReXhSUVVFMlJDeFJRVUUzUkVFc1VVRkJOa1E3UVVGQlFTeE5RVUZvUkRsUUxFdEJRV2RFT3p0QlFVTTVSRHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTEUxQlFVa3JVQ3hEUVVGRExFZEJRVWN2VVN4aFFVRmhMRU5CUVVOSkxFMUJRVTBzUTBGQlF6UlJMRWRCUVZJc1EwRkJja0lzUTBGT09FUTdRVUZUT1VRN08wRkJRMEVzVFVGQlRVTXNVMEZCVXl4aFFVRlBVQ3hqUVVGUUxFTkJRV1lzUTBGV09FUTdRVUZoT1VRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVRzN1FVRkRRU3hQUVVGTExFbEJRVTFSTEVsQlFWZ3NTVUZCYlVKc1VTeExRVUZ1UWl4RlFVRXdRanRCUVVONFFpeFJRVUZKU1N4TlFVRk5MRU5CUVVOUExGTkJRVkFzUTBGQmFVSkRMR05CUVdwQ0xFTkJRV2REUXl4SlFVRm9ReXhEUVVGeFF6aEVMRkZCUVhKRExFVkJRU3REZFV3c1NVRkJMME1zUTBGQlNpeEZRVUV3UkR0QlFVTjRSQ3hWUVVGTmRsRXNSVUZCUlN4SFFVRkhaMFlzVVVGQlVTeERRVUZEZFV3c1NVRkJSQ3hEUVVGdVFqdEJRVU5CTEZWQlFVMTZUQ3hMUVVGTExFZEJRVWQ2UlN4TFFVRkxMRU5CUVVOclVTeEpRVUZFTEVOQlFXNUNPMEZCUTBGRUxFMUJRVUZCTEZOQlFWTXNRMEZCUTBVc1NVRkJWaXhEUVVGbFJDeEpRVUZtTzBGQlEwRklMRTFCUVVGQkxFTkJRVU1zUjBGQlJ6VlJMRTFCUVUwc1EwRkJReXhEUVVGRE5GRXNRMEZCUkN4RlFVRkpjRkVzUlVGQlJTeERRVUZET0VVc1MwRkJSQ3hEUVVGT0xFTkJRVVFzUTBGQlZqdEJRVU5FTzBGQlEwWXNSMEUzUWpaRU96czdRVUZuUXpsRUxITkNRVU5GTWt3c2EwTkJRVk5rTEVsQlFVa3NRMEZCUTFjc1UwRkJSQ3hGUVVGWmFsRXNTMEZCV2l4RFFVRmlMRVZCUVhGRFJDeFBRVUZQTEVOQlFVTm5VU3hEUVVGRUxFTkJRVFZETzBGQlFXbEVMRWxCUVVFc1IwRkJSeXhGUVVGRlJqdEJRVUYwUkN4TlFVTkhReXhSUVVSSUxFTkJSRVk3UVVGTFJDeERRWFJEVXl4RFFVRmFPMEZCTUVOQk96dEJRVU5CU0N4SFFVRkhMRU5CUVVOVkxGZEJRVW9zUjBGQmEwSXNTMEZCYkVJN1FVRkZRU3hCUVVWQk96czdPenM3T3p0QlFWRkJMRUZCUVU4c1NVRkJUVU1zYjBKQlFXOUNMRWRCUVVkRExGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVOc1JDeFBRVVJyUkN4RlFVVnNSQ3hMUVVaclJDeEZRVWRzUkN4UlFVaHJSQ3hGUVVsc1JDeFRRVXByUkN4RlFVdHNSQ3hSUVV4clJDeEZRVTFzUkN4UlFVNXJSQ3hGUVU5c1JDeFRRVkJyUkN4RFFVRm9RaXhEUVVFM1FqdEJRVlZRTEVGQlFVOHNTVUZCVFVNc2EwSkJRV3RDTEVkQlFVZEdMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVTm9SQ3hQUVVSblJDeEZRVVZvUkN4TFFVWm5SQ3hGUVVkb1JDeFJRVWhuUkN4RlFVbG9SQ3hWUVVwblJDeEZRVXRvUkN4VFFVeG5SQ3hEUVVGb1FpeERRVUV6UWp0QlFWRlFMRUZCUVU4c1NVRkJUVVVzYVVKQlFXbENMRWRCUVVkSUxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVNdlF5eE5RVVFyUXl4RlFVVXZReXhQUVVZclF5eEZRVWN2UXl4TFFVZ3JReXhGUVVrdlF5eFJRVW9yUXl4RlFVc3ZReXhWUVV3clF5eEZRVTB2UXl4VFFVNHJReXhEUVVGb1FpeERRVUV4UWp0QlFWTlFMRWxCUVUxSExHTkJRV01zUjBGQlIwb3NVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlEzSkRMRU5CUkhGRExFVkJSWEpETEVOQlJuRkRMRVZCUjNKRExFTkJTSEZETEVWQlNYSkRMRU5CU25GRExFVkJTM0pETEVOQlRIRkRMRVZCVFhKRExFTkJUbkZETEVWQlQzSkRMRU5CVUhGRExFVkJVWEpETEVOQlVuRkRMRVZCVTNKRExFTkJWSEZETEVWQlZYSkRMRU5CVm5GRExFVkJWM0pETEVWQldIRkRMRVZCV1hKRExFVkJXbkZETEVWQllYSkRMRVZCWW5GRExFTkJRV2hDTEVOQlFYWkNPMEZCWjBKQkxFRkJRVThzU1VGQlRVa3NhVUpCUVdsQ0xFZEJRVWRNTEZOQlFWTXNRMEZCUTAwc1UwRkJWaXhEUVVGdlFpeERRVU51UkU0c1UwRkJVeXhEUVVGRFR5eE5RVVI1UXl4RlFVVnVSRkFzVTBGQlV5eERRVUZEVVN4TlFVWjVReXhEUVVGd1FpeERRVUV4UWp0QlFVdFFMRUZCUVU4c1NVRkJUVU1zYVVKQlFXbENMRWRCUVVkVUxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFdEJRVVFzUlVGQlVTeFJRVUZTTEVOQlFXaENMRU5CUVRGQ08wRkJSVkFzU1VGQlRWTXNaVUZCWlN4SFFVRkhWaXhUUVVGVExFTkJRVU5ETEV0QlFWWXNRMEZCWjBJc1EwRkRkRU1zVFVGRWMwTXNSVUZGZEVNc1RVRkdjME1zUlVGSGRFTXNUMEZJYzBNc1JVRkpkRU1zWVVGS2MwTXNSVUZMZEVNc1owSkJUSE5ETEVOQlFXaENMRU5CUVhoQ08wRkJVVUVzUVVGQlR5eEpRVUZOVlN4WlFVRlpMRWRCUVVkWUxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFMUJRVVFzUlVGQlV5eFJRVUZVTEVWQlFXMUNMRTFCUVc1Q0xFTkJRV2hDTEVOQlFYSkNPMEZCUlZBc1FVRkJUeXhKUVVGTlZ5eHpRa0ZCYzBJc1IwRkJSMW9zVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRM0JFTEU5QlJHOUVMRVZCUlhCRUxFdEJSbTlFTEVWQlIzQkVMRkZCU0c5RUxFVkJTWEJFTEZOQlNtOUVMRVZCUzNCRUxGRkJURzlFTEVWQlRYQkVMRkZCVG05RUxFTkJRV2hDTEVOQlFTOUNPMEZCVTFBc1FVRkJUeXhKUVVGTldTeGpRVUZqTEVkQlFVZGlMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVTTFReXhEUVVGRExFVkJSREpETEVWQlJUVkRMRU5CUVVNc1JVRkdNa01zUlVGSE5VTXNRMEZCUXl4RlFVZ3lReXhGUVVrMVF5eERRVUZETEVOQlNqSkRMRVZCU3pWRExFTkJRVU1zUTBGTU1rTXNSVUZOTlVNc1EwRkJReXhEUVU0eVF5eEZRVTgxUXl4RFFVRkRMRU5CVURKRExFVkJVVFZETEVOQlFVTXNRMEZTTWtNc1JVRlROVU1zUTBGQlF5eERRVlF5UXl4RlFWVTFReXhEUVVGRExFTkJWakpETEVWQlZ6VkRMRU5CUVVNc1EwRllNa01zUlVGWk5VTXNRMEZCUXl4RFFWb3lReXhGUVdFMVF5eERRV0kwUXl4RlFXTTFReXhEUVdRMFF5eEZRV1UxUXl4RFFXWTBReXhGUVdkQ05VTXNRMEZvUWpSRExFVkJhVUkxUXl4RFFXcENORU1zUlVGclFqVkRMRU5CYkVJMFF5eEZRVzFDTlVNc1EwRnVRalJETEVWQmIwSTFReXhEUVhCQ05FTXNSVUZ4UWpWRExFTkJja0kwUXl4RlFYTkNOVU1zUTBGMFFqUkRMRVZCZFVJMVF5eEZRWFpDTkVNc1JVRjNRalZETEVWQmVFSTBReXhGUVhsQ05VTXNSVUY2UWpSRExFVkJNRUkxUXl4TlFURkNORU1zUTBGQmFFSXNRMEZCZGtJN1FVRTJRbEFzUVVGQlR5eEpRVUZOWVN4blFrRkJaMElzUjBGQlIyUXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlF6bERMRk5CUkRoRExFVkJSVGxETEZGQlJqaERMRVZCUnpsRExGRkJTRGhETEVWQlNUbERMRk5CU2poRExFVkJTemxETEZOQlREaERMRVZCVFRsRExFMUJUamhETEVOQlFXaENMRU5CUVhwQ08wRkJVMUFzUVVGQlR5eEpRVUZOWXl4bFFVRmxMRWRCUVVkbUxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVNM1F5eERRVVEyUXl4RlFVVTNReXhEUVVZMlF5eEZRVWMzUXl4RFFVZzJReXhGUVVrM1F5eERRVW8yUXl4RlFVczNReXhEUVV3MlF5eEZRVTAzUXl4RFFVNDJReXhGUVU4M1F5eERRVkEyUXl4RlFWRTNReXhEUVZJMlF5eEZRVk0zUXl4RFFWUTJReXhGUVZVM1F5eERRVlkyUXl4RlFWYzNReXhGUVZnMlF5eEZRVmszUXl4RlFWbzJReXhGUVdFM1F5eEZRV0kyUXl4RFFVRm9RaXhEUVVGNFFqdEJRV2RDVUN4SlFVRk5aU3huUWtGQlowSXNSMEZCUjJoQ0xGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVOMlF5eERRVVIxUXl4RlFVVjJReXhEUVVaMVF5eEZRVWQyUXl4RFFVaDFReXhGUVVsMlF5eERRVXAxUXl4RlFVdDJReXhEUVV4MVF5eEZRVTEyUXl4RFFVNTFReXhGUVU5MlF5eERRVkIxUXl4RlFWRjJReXhEUVZKMVF5eEZRVk4yUXl4RFFWUjFReXhGUVZWMlF5eFJRVloxUXl4RlFWZDJReXhOUVZoMVF5eERRVUZvUWl4RFFVRjZRanRCUVdOQkxFbEJRVTFuUWl4dFFrRkJiVUlzUjBGQlIycENMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVTXhReXhOUVVRd1F5eEZRVVV4UXl4WlFVWXdReXhGUVVjeFF5eGhRVWd3UXl4RFFVRm9RaXhEUVVFMVFqczdRVUZQUVdJc1IwRkJSeXhEUVVGRE9FSXNVMEZCU2l4SFFVRm5RanRCUVVOa00wSXNSVUZCUVVFc1VVRkJVU3hGUVVGRlV5eFRRVUZUTEVOQlFVTnRRaXhKUVVST08wRkJSV1F4UXl4RlFVRkJRU3g1UWtGQmVVSXNSVUZCUlhWQ0xGTkJRVk1zUTBGQlEyOUNMRXRCUVZZc1EwRkJaMEk3UVVGRGVrTXhReXhKUVVGQlFTeFBRVUZQTEVWQlFVVnpRaXhUUVVGVExFTkJRVU54UWp0QlFVUnpRaXhIUVVGb1FpeERRVVppTzBGQlRXUm9UaXhGUVVGQlFTeEZRVUZGTEVWQlFVVXlUQ3hUUVVGVExFTkJRVU52UWl4TFFVRldMRU5CUVdkQ08wRkJRMnhDYms0c1NVRkJRVUVzVDBGQlR5eEZRVUZGSzB3c1UwRkJVeXhEUVVGRFRTeFRRVUZXTEVOQlFXOUNMRU5CUVVOT0xGTkJRVk1zUTBGQlEzTkNMRWxCUVZnc1JVRkJhVUpNTEcxQ1FVRnFRaXhEUVVGd1FpeERRVVJUTzBGQlJXeENPVTBzU1VGQlFVRXNUVUZCVFN4RlFVRkZOa3dzVTBGQlV5eERRVUZEVHp0QlFVWkJMRWRCUVdoQ0xFTkJUbFU3UVVGVlpHaE5MRVZCUVVGQkxFVkJRVVVzUlVGQlJYbE1MRk5CUVZNc1EwRkJRMjlDTEV0QlFWWXNRMEZCWjBJN1FVRkRiRUp1VGl4SlFVRkJRU3hQUVVGUExFVkJRVVVyVEN4VFFVRlRMRU5CUVVOTkxGTkJRVllzUTBGQmIwSXNRMEZCUTA0c1UwRkJVeXhEUVVGRGMwSXNTVUZCV0N4RlFVRnBRa3dzYlVKQlFXcENMRU5CUVhCQ0xFTkJSRk03UVVGRmJFSTVUU3hKUVVGQlFTeE5RVUZOTEVWQlFVVTJUQ3hUUVVGVExFTkJRVU5QTzBGQlJrRXNSMEZCYUVJc1EwRldWVHRCUVdOa0wwd3NSVUZCUVVFc1JVRkJSU3hGUVVGRmQwd3NVMEZCVXl4RFFVRkRiMElzUzBGQlZpeERRVUZuUWp0QlFVTnNRbTVPTEVsQlFVRkJMRTlCUVU4c1JVRkJSU3RNTEZOQlFWTXNRMEZCUTAwc1UwRkJWaXhEUVVGdlFpeERRVUZEVGl4VFFVRlRMRU5CUVVOelFpeEpRVUZZTEVWQlFXbENUQ3h0UWtGQmFrSXNRMEZCY0VJc1EwRkVVenRCUVVWc1FqbE5MRWxCUVVGQkxFMUJRVTBzUlVGQlJUWk1MRk5CUVZNc1EwRkJRMDg3UVVGR1FTeEhRVUZvUWl4RFFXUlZPMEZCYTBKa09Vd3NSVUZCUVVFc1JVRkJSU3hGUVVGRmRVd3NVMEZCVXl4RFFVRkRiMElzUzBGQlZpeERRVUZuUWp0QlFVTnNRbTVPTEVsQlFVRkJMRTlCUVU4c1JVRkJSU3RNTEZOQlFWTXNRMEZCUTAwc1UwRkJWaXhEUVVGdlFpeERRVUZEVGl4VFFVRlRMRU5CUVVOelFpeEpRVUZZTEVWQlFXbENUQ3h0UWtGQmFrSXNRMEZCY0VJc1EwRkVVenRCUVVWc1FqbE5MRWxCUVVGQkxFMUJRVTBzUlVGQlJUWk1MRk5CUVZNc1EwRkJRMDg3UVVGR1FTeEhRVUZvUWl4RFFXeENWVHRCUVhWQ1pIUk5MRVZCUVVGQkxFOUJRVThzUlVGQlJYbE5MR1ZCZGtKTE8wRkJkMEprZEV3c1JVRkJRVUVzVTBGQlV5eEZRVUZGY1V3c2FVSkJlRUpITzBGQmVVSmtkRTBzUlVGQlFVRXNUVUZCVFN4RlFVRkZhVTBzWTBGNlFrMDdRVUV5UW1RMVN5eEZRVUZCUVN4VFFVRlRMRVZCUVVWclRDeGxRVE5DUnp0QlFUUkNaRE5MTEVWQlFVRkJMRmRCUVZjc1JVRkJSVEJMTEdsQ1FUVkNRenRCUVRaQ1pETkxMRVZCUVVGQkxGRkJRVkVzUlVGQlJYTkxMR05CTjBKSk8wRkJLMEprYkVzc1JVRkJRVUVzVTBGQlV5eEZRVUZGZDBzc1pVRXZRa2M3UVVGblEyUnFTeXhGUVVGQlFTeFhRVUZYTEVWQlFVVm5TeXhwUWtGb1EwTTdRVUZwUTJScVN5eEZRVUZCUVN4UlFVRlJMRVZCUVVVMFNpeGpRV3BEU1R0QlFXMURaSGhLTEVWQlFVRkJMRk5CUVZNc1JVRkJSVGhLTEdWQmJrTkhPMEZCYjBOa2Rrb3NSVUZCUVVFc1YwRkJWeXhGUVVGRmMwb3NhVUpCY0VORE8wRkJjVU5rZGtvc1JVRkJRVUVzVVVGQlVTeEZRVUZGYTBvc1kwRnlRMGs3UVVGMVEyUTVTU3hGUVVGQlFTeFpRVUZaTEVWQlFVVjVTU3h2UWtGMlEwRTdRVUYzUTJRelNDeEZRVUZCUVN4VlFVRlZMRVZCUVVVNFNDeHJRa0Y0UTBVN1FVRjVRMlI0U0N4RlFVRkJRU3hUUVVGVExFVkJRVVY1U0N4cFFrRjZRMGM3UVVFd1EyUnNTQ3hGUVVGQlFTeE5RVUZOTEVWQlFVVXJSeXhUUVVGVExFTkJRVU56UWl4SlFURkRTanRCUVRKRFpHNUpMRVZCUVVGQkxGVkJRVlVzUlVGQlJUWkhMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRWxCUVVRc1JVRkJUeXhKUVVGUUxFVkJRV0VzVFVGQllpeERRVUZvUWl4RFFUTkRSVHRCUVRSRFpIcEhMRVZCUVVGQkxFdEJRVXNzUlVGQlJYZEhMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVTnlRaXhOUVVSeFFpeEZRVVZ5UWl4VlFVWnhRaXhGUVVkeVFpeFZRVWh4UWl4RlFVbHlRaXhWUVVweFFpeEZRVXR5UWl4TlFVeHhRaXhGUVUxeVFpeFBRVTV4UWl4RlFVOXlRaXhYUVZCeFFpeEZRVkZ5UWl4WFFWSnhRaXhGUVZOeVFpeFJRVlJ4UWl4RlFWVnlRaXhWUVZaeFFpeEZRVmR5UWl4TlFWaHhRaXhGUVZseVFpeFBRVnB4UWl4RlFXRnlRaXhSUVdKeFFpeEZRV055UWl4UlFXUnhRaXhGUVdWeVFpeE5RV1p4UWl4RlFXZENja0lzVVVGb1FuRkNMRVZCYVVKeVFpeExRV3BDY1VJc1JVRnJRbkpDTEdGQmJFSnhRaXhGUVcxQ2NrSXNjVUpCYmtKeFFpeEZRVzlDY2tJc1dVRndRbkZDTEVWQmNVSnlRaXhQUVhKQ2NVSXNRMEZCYUVJc1EwRTFRMDg3UVVGdFJXUXZSQ3hGUVVGQlFTeEhRVUZITEVWQlFVVTRSQ3hUUVVGVExFTkJRVU56UWl4SlFXNUZSRHRCUVc5RlpERk5MRVZCUVVGQkxFbEJRVWtzUlVGQlJTdE1MRmxCY0VWUk8wRkJjVVZrY2tVc1JVRkJRVUVzVFVGQlRTeEZRVUZGSzBRc2FVSkJja1ZOTzBGQmMwVmtPVVFzUlVGQlFVRXNZMEZCWXl4RlFVRkZjVVVzYzBKQmRFVkdPMEZCZFVWa0wwUXNSVUZCUVVFc1NVRkJTU3hGUVVGRmJVUXNVMEZCVXl4RFFVRkRjMElzU1VGMlJVWTdRVUY1UldRelVDeEZRVUZCUVN4WFFVRlhMRVZCUVVWclVDeGpRWHBGUXp0QlFUQkZaR3BRTEVWQlFVRkJMRk5CUVZNc1JVRkJSV2xRTEdOQk1VVkhPMEZCTkVWa05VOHNSVUZCUVVFc1RVRkJUU3hGUVVGRk5FOHNZMEUxUlUwN1FVRTJSV1JvVUN4RlFVRkJRU3hUUVVGVExFVkJRVVZuVUN4alFUZEZSenRCUVRoRlpDOVBMRVZCUVVGQkxGZEJRVmNzUlVGQlJTdFBMR05CT1VWRE8wRkJLMFZrT1U4c1JVRkJRVUVzV1VGQldTeEZRVUZGT0U4c1kwRXZSVUU3UVVGblJtUTNUeXhGUVVGQlFTeFZRVUZWTEVWQlFVVTJUeXhqUVdoR1JUdEJRV3RHWkhaUExFVkJRVUZCTEZGQlFWRXNSVUZCUlhWUExHTkJiRVpKTzBGQmJVWmtNMDhzUlVGQlFVRXNWMEZCVnl4RlFVRkZNazhzWTBGdVJrTTdRVUZ2Um1ReFR5eEZRVUZCUVN4aFFVRmhMRVZCUVVVd1R5eGpRWEJHUkR0QlFYRkdaSHBQTEVWQlFVRkJMR05CUVdNc1JVRkJSWGxQTEdOQmNrWkdPMEZCYzBaa2VFOHNSVUZCUVVFc1dVRkJXU3hGUVVGRmQwOHNZMEYwUmtFN1FVRjNSbVJzVHl4RlFVRkJRU3hSUVVGUkxFVkJRVVZyVHl4alFYaEdTVHRCUVhsR1pIUlBMRVZCUVVGQkxGZEJRVmNzUlVGQlJYTlBMR05CZWtaRE8wRkJNRVprY2s4c1JVRkJRVUVzWVVGQllTeEZRVUZGY1U4c1kwRXhSa1E3UVVFeVJtUndUeXhGUVVGQlFTeGpRVUZqTEVWQlFVVnZUeXhqUVROR1JqdEJRVFJHWkc1UExFVkJRVUZCTEZsQlFWa3NSVUZCUlcxUExHTkJOVVpCTzBGQk9FWmtOMDRzUlVGQlFVRXNVVUZCVVN4RlFVRkZOazRzWTBFNVJrazdRVUVyUm1ScVR5eEZRVUZCUVN4WFFVRlhMRVZCUVVWcFR5eGpRUzlHUXp0QlFXZEhaR2hQTEVWQlFVRkJMR0ZCUVdFc1JVRkJSV2RQTEdOQmFFZEVPMEZCYVVka0wwNHNSVUZCUVVFc1kwRkJZeXhGUVVGRkswNHNZMEZxUjBZN1FVRnJSMlE1VGl4RlFVRkJRU3haUVVGWkxFVkJRVVU0VGl4alFXeEhRVHRCUVc5SFpEbEVMRVZCUVVGQkxGTkJRVk1zUlVGQlJYTkVMR2xDUVhCSFJ6dEJRWEZIWkhKRUxFVkJRVUZCTEZGQlFWRXNSVUZCUlhGRUxHbENRWEpIU1R0QlFYTkhaSEJFTEVWQlFVRkJMRk5CUVZNc1JVRkJSVzlFTEdsQ1FYUkhSenRCUVhWSFpHNUVMRVZCUVVGQkxGRkJRVkVzUlVGQlJXMUVMR2xDUVhaSFNUdEJRWGxIWkhaTkxFVkJRVUZCTEU5QlFVOHNSVUZCUld0TkxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFTkJRVVFzUlVGQlNTeEhRVUZLTEVWQlFWTXNSMEZCVkN4RlFVRmpMRWRCUVdRc1JVRkJiVUlzUjBGQmJrSXNSVUZCZDBJc1IwRkJlRUlzUlVGQk5rSXNSMEZCTjBJc1JVRkJhME1zUjBGQmJFTXNSVUZCZFVNc1IwRkJka01zUlVGQk5FTXNSMEZCTlVNc1JVRkJhVVFzUTBGQmFrUXNRMEZCYUVJc1EwRjZSMHM3UVVFeVIyUTVReXhGUVVGQlFTeFJRVUZSTEVWQlFVVXlSQ3huUWtFelIwazdRVUUyUjJRelRpeEZRVUZCUVN4UFFVRlBMRVZCUVVVMFRpeGxRVGRIU3p0QlFUaEhaRGxPTEVWQlFVRkJMRkZCUVZFc1JVRkJSVGhPTEdWQk9VZEpPMEZCSzBka04wNHNSVUZCUVVFc1VVRkJVU3hGUVVGRk5rNHNaVUV2UjBrN1FVRnBTR1I2VGl4RlFVRkJRU3hUUVVGVExFVkJRVVY1VGl4bFFXcElSenRCUVd0SVpETk9MRVZCUVVGQkxGVkJRVlVzUlVGQlJUSk9MR1ZCYkVoRk8wRkJiVWhrTVU0c1JVRkJRVUVzVlVGQlZTeEZRVUZGTUU0c1pVRnVTRVU3UVVGeFNHUjBUaXhGUVVGQlFTeFRRVUZUTEVWQlFVVnpUaXhsUVhKSVJ6dEJRWE5JWkhoT0xFVkJRVUZCTEZWQlFWVXNSVUZCUlhkT0xHVkJkRWhGTzBGQmRVaGtkazRzUlVGQlFVRXNWVUZCVlN4RlFVRkZkVTRzWlVGMlNFVTdRVUY1U0dSdVRpeEZRVUZCUVN4VFFVRlRMRVZCUVVWdFRpeGxRWHBJUnp0QlFUQklaSEpPTEVWQlFVRkJMRlZCUVZVc1JVRkJSWEZPTEdWQk1VaEZPMEZCTWtoa2NFNHNSVUZCUVVFc1ZVRkJWU3hGUVVGRmIwNHNaVUV6U0VVN1FVRTJTR1JxUkN4RlFVRkJRU3hSUVVGUkxFVkJRVVZyUXl4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4UlFVRkVMRVZCUVZjc1ZVRkJXQ3hGUVVGMVFpeFZRVUYyUWl4RlFVRnRReXhQUVVGdVF5eERRVUZvUWl4RFFUZElTVHRCUVRoSVpDOUNMRVZCUVVGQkxFdEJRVXNzUlVGQlJUaENMRk5CUVZNc1EwRkJRM05DTEVsQk9VaElPMEZCSzBoa2FGRXNSVUZCUVVFc1VVRkJVU3hGUVVGRk1GQXNaMEpCTDBoSk8wRkJaMGxrTlVNc1JVRkJRVUVzUjBGQlJ5eEZRVUZGTkVJc1UwRkJVeXhEUVVGRGMwSXNTVUZvU1VRN1FVRnBTV1JvUkN4RlFVRkJRU3hMUVVGTExFVkJRVVVyUWl4cFFrRnFTVTg3UVVGclNXUTVRaXhGUVVGQlFTeEpRVUZKTEVWQlFVVjVRaXhUUVVGVExFTkJRVU56UWp0QlFXeEpSaXhEUVVGb1FqczdPenRCUTJveVFrRXNVMEZCWlN3d1JrRkJNRVk3TzBGRFFYcEhMRlZCUVdVc2EwWkJRV3RHT3p0QlEwRnFSeXhuUWtGQlpTd3lUVUZCTWswN08wRkRRVEZPTEdkQ1FVRmxMSEZpUVVGeFlqczdRVU5CY0dNc1lVRkJaU3cyVWtGQk5sSTdPMEZEUVRWVExHTkJRV1VzYjFGQlFXOVJPenRCUTBGdVVpeGxRVUZsTERoWVFVRTRXRHM3UVVOQk4xa3NhMEpCUVdVc05scEJRVFphT3p0QlEwRTFZU3haUVVGbExEaFRRVUU0VXpzN1FVTkJOMVFzYTBKQlFXVXNlVTFCUVhsTk96dEJRMEY0VGl4M1FrRkJaU3cwVVVGQk5GRTdPMEZEUVROU0xITkNRVUZsTERKUFFVRXlUenM3UVVOQk1WQXNkVUpCUVdVc2VVOUJRWGxQT3p0QlEwRjRVQ3hyUWtGQlpTeG5Va0ZCWjFJN08wRkRRUzlTTEdWQlFXVXNOazFCUVRaTk96dEJRMEUxVGl4eFFrRkJaU3h6VVVGQmMxRTdPMEZEUVhKU0xHMUNRVUZsTEhsUFFVRjVUenM3UVVOQmVGQXNiMEpCUVdVc2RVOUJRWFZQT3p0QlEwRjBVQ3h0UWtGQlpTdzRXRUZCT0ZnN08wRkRRVGRaTEdkQ1FVRmxMREJuUWtGQk1HZENPenRCUTBGNmFFSXNWMEZCWlN4MVUwRkJkVk03TzBGRFFYUlVMR2RDUVVGbExEUktRVUUwU2pzN1FVTkJNMHNzYzBKQlFXVXNhMUJCUVd0UU96dEJRMEZxVVN4NVFrRkJaU3h0VUVGQmJWQTdPMEZEUVd4UkxHOUNRVUZsTEN0UFFVRXJUenM3UVVOQk9WQXNaMEpCUVdVc01rbEJRVEpKT3p0QlEwRXhTaXhsUVVGbExEaEtRVUU0U2pzN1FVTkJOMHNzYlVKQlFXVXNaMHRCUVdkTE96dEJRMEV2U3l4cFFrRkJaU3d5U2tGQk1rbzdPMEZEUVRGTExHTkJRV1VzYzB0QlFYTkxPenRCUTBGeVRDeHRRa0ZCWlN4NVdFRkJlVmc3TzBGRFFYaFpMRmRCUVdVc2IwcEJRVzlLT3p0QlEwRnVTeXhsUVVGbExHZE1RVUZuVERzN1FVTkJMMHdzWVVGQlpTd3JWVUZCSzFVN08wRkRRVGxXTEdsQ1FVRmxMSEZTUVVGeFVqczdRVU5CY0ZNc1lVRkJaU3g1VkVGQmVWUTdPMEZEUVhoVkxHMUNRVUZsTERCV1FVRXdWanM3UVVOQmVsY3NXVUZCWlN3MlNrRkJOa283TzBGRFFUVkxMR3RDUVVGbExEWktRVUUyU2pzN1FVTkJOVXNzYjBKQlFXVXNNa3RCUVRKTE96dEJRMEV4VEN4WlFVRmxMRFpWUVVFMlZUczdRVU5CTlZZc1dVRkJaU3d3VGtGQk1FNDdPMEZEUVhwUExGZEJRV1VzYVdSQlFXbGtPenRCUTBGb1pTeFZRVUZsTEhkR1FVRjNSanM3UVVOQmRrY3NhMEpCUVdVc2QxSkJRWGRTT3p0QlEwRjJVeXhqUVVGbExEaFZRVUU0VlRzN1FVTkJOMVlzWTBGQlpTeHJUMEZCYTA4N08wRkRRV3BRTEc5Q1FVRmxMSE5VUVVGelZEczdRVU5CY2xVc2FVSkJRV1VzZFU1QlFYVk9PenRCUTBGMFR5eFhRVUZsTERoT1FVRTRUanM3UVVOQk4wOHNWMEZCWlN4dFJVRkJiVVU3TzBGRFFXeEdMREpDUVVGbExIZElRVUYzU0RzN1FVTkJka2tzTkVKQlFXVXNOa2hCUVRaSU96dEJRMEUxU1N4bFFVRmxMRGhPUVVFNFRqczdRVU5CTjA4c1owSkJRV1VzYjJKQlFXOWlPenRCUTBGdVl5eFhRVUZsTEdkTVFVRm5URHM3UVVOQkwwd3NaVUZCWlN3NFMwRkJPRXM3TzBGRFFUZE1MRFJDUVVGbExDdFlRVUVyV0RzN1FVTkJPVmtzWlVGQlpTeHRVRUZCYlZBN08wRkRRV3hSTEZWQlFXVXNjVmRCUVhGWE96dEJRMEZ3V0N4bFFVRmxMSGxNUVVGNVREczdRVU5CZUUwc1owSkJRV1VzT0ZsQlFUaFpPenRCUTBFM1dpeGpRVUZsTERacVFrRkJObXBDT3p0QlEwRTFhMElzYVVKQlFXVXNkVlpCUVhWV096dEJRMEYwVnl4clFrRkJaU3d3YkVKQlFUQnNRanM3UVVOQmVtMUNMR2xDUVVGbExIZFJRVUYzVVRzN1FVTkJkbElzYzBKQlFXVXNObGRCUVRaWE96dEJRMEUxV0N4aFFVRmxMREJrUVVFd1pEczdRVU5CZW1Vc1YwRkJaU3gzUkVGQmQwUTdPMEZEUVhaRkxGbEJRV1VzSzBOQlFTdERPenRCUTBFNVJDeHBRa0ZCWlN4eFowSkJRWEZuUWpzN1FVTkJjR2hDTEhGQ1FVRmxMQ3RNUVVFclREczdRVU5CT1Uwc2JVSkJRV1VzTUUxQlFUQk5PenRCUTBGNlRpeGhRVUZsTEc5SlFVRnZTVHM3UVVOQmJrb3NWVUZCWlN4dE1VSkJRVzB4UWpzN1FVTkJiREpDTEZsQlFXVXNaMmxDUVVGbmFVSTdPMEZEUVM5cFFpeHRRa0ZCWlN4bmFFSkJRV2RvUWpzN1FVTkJMMmhDTEZsQlFXVXNNa1ZCUVRKRk96dEJRMEV4Uml4cFFrRkJaU3gxVWtGQmRWSTdPMEZEUVhSVExHVkJRV1VzZDBSQlFYZEVPenRCUTBGMlJTeGhRVUZsTEhGSVFVRnhTRHM3UVVOQmNFa3NiVUpCUVdVc2JYRkRRVUZ0Y1VNN08wRkRRV3h5UXl4WlFVRmxMRFpOUVVFMlRUczdRVU5CTlU0c2JVSkJRV1VzZVdoQ1FVRjVhRUk3TzBGRFFYaHBRaXhyUWtGQlpTeHRZVUZCYldFN08wRkRRV3hpTEdkQ1FVRmxMRGhXUVVFNFZqczdRVU5CTjFjc2FVSkJRV1VzTmt0QlFUWkxPenRCUTBFMVRDeFZRVUZsTEhOS1FVRnpTanM3UVVOQmNrc3NXVUZCWlN3clYwRkJLMWM3TzBGRFFUbFlMR2RDUVVGbExIbE9RVUY1VGpzN1FVTkJlRThzTUVKQlFXVXNNRTVCUVRCT096dEJRMEY2VHl4WFFVRmxMSGRUUVVGM1V6czdRVU5CZGxRc1pVRkJaU3g1VEVGQmVVdzdPMEZEUVhoTkxGZEJRV1VzTmt0QlFUWkxPenRCUTBFMVRDeG5Ra0ZCWlN3eVdVRkJNbGs3TzBGRFFURmFMR2RDUVVGbExHbFlRVUZwV0RzN1FVTkJhRmtzWVVGQlpTeG5Za0ZCWjJJN08wRkRRUzlpTEcxQ1FVRmxMREpTUVVFeVVqczdRVU5CTVZNc2IwSkJRV1VzYVZoQlFXbFlPenRCUTBGb1dTeHRRa0ZCWlN4dldFRkJiMWc3TzBGRFFXNVpMR1ZCUVdVc1oxUkJRV2RVT3p0QlEwRXZWQ3huUWtGQlpTeHBVVUZCYVZFN08wRkRRV2hTTEZkQlFXVXNhMVZCUVd0Vk96dEJRMEZxVml4bFFVRmxMR2RVUVVGblZEczdRVU5CTDFRc1YwRkJaU3cwY1VKQlFUUnhRanM3UVVOQk0zSkNMRmRCUVdVc09HcENRVUU0YWtJN08wRkRRVGRyUWl4clFrRkJaU3cyVkVGQk5sUTdPMEZEUVRWVkxGbEJRV1VzTWtwQlFUSktPenRCUTBFeFN5eGhRVUZsTEhGT1FVRnhUanM3UVVOQmNFOHNaMEpCUVdVc2VVZEJRWGxIT3p0QlEwRjRTQ3huUWtGQlpTeHZUMEZCYjA4N08wRkRRVzVRTEZsQlFXVXNORXRCUVRSTE96dEJRMEV6VEN4VlFVRmxMREpKUVVFeVNUczdRVU5CTVVvc1kwRkJaU3c0WVVGQk9HRTdPMEZEUVRkaUxHZENRVUZsTEc5MVFrRkJiM1ZDT3p0QlEwRnVka0lzVjBGQlpTeDFSMEZCZFVjN08wRkRRWFJJTEcxQ1FVRmxMSE5ZUVVGeldEczdRVU5CY2xrc1kwRkJaU3hyVWtGQmExSTdPMEZEUVdwVExHRkJRV1VzY1VsQlFYRkpPenRCUTBGd1NpeHZRa0ZCWlN3NFpFRkJPR1E3TzBGRFFUZGxMR05CUVdVc09HcENRVUU0YWtJN08wRkRRVGRyUWl4aFFVRmxMRGhMUVVFNFN6czdRVU5CTjB3c1lVRkJaU3gxWWtGQmRXSTdPMEZEUVhSakxGbEJRV1VzT0ZaQlFUaFdPenRCUTBFM1Z5eGhRVUZsTEN0T1FVRXJUanM3UVVOQk9VOHNaVUZCWlN3MlIwRkJOa2M3TzBGRFFUVklMRmRCUVdVc09GSkJRVGhTT3p0QlEwRTNVeXhaUVVGbExHdFNRVUZyVWpzN1FVTkJhbE1zYTBKQlFXVXNiVWhCUVcxSU96dEJRMEZzU1N4aFFVRmxMR3RoUVVGcllUczdRVU5CYW1Jc2IwSkJRV1VzTW10Q1FVRXlhMEk3TzBGRFFURnNRaXhaUVVGbExESm5Ra0ZCTW1kQ096dEJRMEV4YUVJc2IwSkJRV1VzZDBoQlFYZElPenRCUTBGMlNTeHhRa0ZCWlN3MFNFRkJORWc3TzBGRFFUTkpMR0ZCUVdVc05FcEJRVFJLT3p0QlEwRXpTeXh4UWtGQlpTeHhVMEZCY1ZNN08wRkRRWEJVTEZkQlFXVXNkVlpCUVhWV096dEJRMEYwVnl4bFFVRmxMSFZOUVVGMVRUczdRVU5CZEU0c1pVRkJaU3cyVEVGQk5rdzdPMEZEUVRWTkxHOUNRVUZsTERoWVFVRTRXRHM3UVVOQk4xa3NWVUZCWlN4dFRrRkJiVTQ3TzBGRFFXeFBMRmxCUVdVc2QwNUJRWGRPT3p0QlEwRjJUeXh6UWtGQlpTeDFSVUZCZFVVN08wRkRRWFJHTEc5Q1FVRmxMSE5GUVVGelJUczdRVU5CY2tZc2NVSkJRV1VzYVVWQlFXbEZPenRCUTBGb1JpeHJRa0ZCWlN3NGEwSkJRVGhyUWpzN1FVTkJOMnhDTEhGQ1FVRmxMRFpYUVVFMlZ6czdRVU5CTlZnc1owSkJRV1VzZVZsQlFYbFpPenRCUTBGNFdpeHhRa0ZCWlN4blRVRkJaMDA3TzBGRFFTOU5MR2xDUVVGbExEaFhRVUU0VnpzN1FVTkJOMWdzZFVKQlFXVXNhVzVDUVVGcGJrSTdPMEZEUVdodlFpeGxRVUZsTEdsbVFVRnBaanM3UVVOQmFHZENMR2RDUVVGbExHbFlRVUZwV0RzN1FVTkJhRmtzYTBKQlFXVXNPRzVDUVVFNGJrSTdPMEZEUVRkdlFpeGxRVUZsTEdkTlFVRm5UVHM3UVVOQkwwMHNZMEZCWlN4dlprRkJiMlk3TzBGRFFXNW5RaXhyUWtGQlpTd3JTMEZCSzBzN08wRkRRVGxNTEhOQ1FVRmxMRFpHUVVFMlJqczdRVU5CTlVjc2IwSkJRV1VzZFV4QlFYVk1PenRCUTBGMFRTeHRRa0ZCWlN3d1JFRkJNRVE3TzBGRFFYcEZMSGRDUVVGbExIZFBRVUYzVHpzN1FVTkJkbEFzTWtKQlFXVXNLMDVCUVN0T096dEJRMEU1VHl3clFrRkJaU3gzUmtGQmQwWTdPMEZEUVhaSExIVkNRVUZsTERaTVFVRTJURHM3UVVOQk5VMHNORUpCUVdVc2RWZEJRWFZYT3p0QlEwRjBXQ3c0UWtGQlpTdzJURUZCTmt3N08wRkRRVFZOTERSQ1FVRmxMSFZRUVVGMVVEczdiMUpCUVVNc2NGSkRlVXQyVVN4WlFVRmxPMEZCUTJKRExFVkJRVUZCTEVWQlFVVXNSVUZCUmtFc1JVRkVZVHRCUVVWaUxHTkJRVmxETEU5QlJrTTdRVUZIWWtNc1JVRkJRVUVzUjBGQlJ5eEZRVUZJUVN4SFFVaGhPMEZCU1dJc1owSkJRV05ETEZOQlNrUTdRVUZMWWl4blFrRkJZME1zVTBGTVJEdEJRVTFpTEdGQlFWZERMRTFCVGtVN1FVRlBZaXhsUVVGaFF5eFJRVkJCTzBGQlVXSXNhMEpCUVdkQ1F5eFhRVkpJTzBGQlUySkRMRVZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZVWVR0QlFWVmlMSGxDUVVGMVFrTXNhVUpCVmxZN1FVRlhZaXgxUWtGQmNVSkRMR1ZCV0ZJN1FVRlpZaXgzUWtGQmMwSkRMR2RDUVZwVU8wRkJZV0lzYTBKQlFXZENReXhYUVdKSU8wRkJZMklzYTBKQlFXZENReXhYUVdSSU8wRkJaV0lzYzBKQlFXOUNReXhqUVdaUU8wRkJaMEppTEc5Q1FVRnJRa01zV1VGb1FrdzdRVUZwUW1Jc2NVSkJRVzFDUXl4aFFXcENUanRCUVd0Q1lpeGxRVUZoUXl4UlFXeENRVHRCUVcxQ1lpeHRRa0ZCYVVKRExGbEJia0pLTzBGQmIwSmlMR2RDUVVGalF5eFRRWEJDUkR0QlFYRkNZa01zUlVGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVhKQ1lUdEJRWE5DWWl4blFrRkJZME1zVTBGMFFrUTdRVUYxUW1Jc2RVSkJRWEZDUXl4bFFYWkNVanRCUVhkQ1lpd3dRa0ZCZDBKRExHdENRWGhDV0R0QlFYbENZaXh4UWtGQmJVSkRMR0ZCZWtKT08wRkJNRUppTEdkQ1FVRmpReXhUUVRGQ1JEdEJRVEpDWWl4bFFVRmhReXhSUVROQ1FUdEJRVFJDWWl4dFFrRkJhVUpETEZsQk5VSktPMEZCTmtKaUxHbENRVUZsUXl4VlFUZENSanRCUVRoQ1lpeGpRVUZaUXl4UFFUbENRenRCUVN0Q1lpeHZRa0ZCYTBKRExGbEJMMEpNTzBGQlowTmlReXhGUVVGQlFTeEpRVUZKTEVWQlFVcEJMRWxCYUVOaE8wRkJhVU5pUXl4RlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQmFrTmhPMEZCYTBOaVF5eEZRVUZCUVN4TlFVRk5MRVZCUVU1QkxFMUJiRU5oTzBGQmJVTmlMR2xDUVVGbFF5eFZRVzVEUmp0QlFXOURZa01zUlVGQlFVRXNUVUZCVFN4RlFVRk9RU3hOUVhCRFlUdEJRWEZEWWl4dFFrRkJhVUpETEZsQmNrTktPMEZCYzBOaUxHdENRVUZuUWtNc1YwRjBRMGc3UVVGMVEySkRMRVZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEYyUTJFN1FVRjNRMklzYTBKQlFXZENReXhYUVhoRFNEdEJRWGxEWWl4dlFrRkJhMEpETEdGQmVrTk1PMEZCTUVOaVF5eEZRVUZCUVN4TFFVRkxMRVZCUVV4QkxFdEJNVU5oTzBGQk1rTmlReXhGUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCTTBOaE8wRkJORU5pUXl4RlFVRkJRU3hKUVVGSkxFVkJRVXBCTEVsQk5VTmhPMEZCTmtOaVF5eEZRVUZCUVN4SFFVRkhMRVZCUVVoQkxFZEJOME5oTzBGQk9FTmlReXhGUVVGQlFTeFBRVUZQTEVWQlFWQkJMRTlCT1VOaE8wRkJLME5pUXl4RlFVRkJRU3hQUVVGUExFVkJRVkJCTEU5QkwwTmhPMEZCWjBSaVF5eEZRVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJhRVJoTzBGQmFVUmlReXhGUVVGQlFTeEpRVUZKTEVWQlFVcEJMRWxCYWtSaE8wRkJhMFJpTEc5Q1FVRnJRa01zWVVGc1JFdzdRVUZ0UkdJc2FVSkJRV1ZETEZWQmJrUkdPMEZCYjBSaUxEUkNRVUV3UWtNc2IwSkJjRVJpTzBGQmNVUmlMRFpDUVVFeVFrTXNjVUpCY2tSa08wRkJjMFJpUXl4RlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQmRFUmhPMEZCZFVSaVF5eEZRVUZCUVN4VFFVRlRMRVZCUVZSQkxGTkJka1JoTzBGQmQwUmlReXhGUVVGQlFTeEpRVUZKTEVWQlFVcEJMRWxCZUVSaE8wRkJlVVJpUXl4RlFVRkJRU3hSUVVGUkxFVkJRVkpCTEZGQmVrUmhPMEZCTUVSaUxEWkNRVUV5UWtNc2NVSkJNVVJrTzBGQk1rUmlReXhGUVVGQlFTeFJRVUZSTEVWQlFWSkJMRkZCTTBSaE8wRkJORVJpUXl4RlFVRkJRU3hIUVVGSExFVkJRVWhCTEVkQk5VUmhPMEZCTmtSaVF5eEZRVUZCUVN4UlFVRlJMRVZCUVZKQkxGRkJOMFJoTzBGQk9FUmlMR2RDUVVGalF5eFRRVGxFUkR0QlFTdEVZaXhqUVVGWlF5eFBRUzlFUXp0QlFXZEZZaXhwUWtGQlpVTXNWVUZvUlVZN1FVRnBSV0lzYTBKQlFXZENReXhYUVdwRlNEdEJRV3RGWWl4cFFrRkJaVU1zVlVGc1JVWTdRVUZ0UldJc2MwSkJRVzlDUXl4bFFXNUZVRHRCUVc5RllrTXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RWEJGWVR0QlFYRkZZa01zUlVGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVhKRllUdEJRWE5GWWtNc1JVRkJRVUVzUzBGQlN5eEZRVUZNUVN4TFFYUkZZVHRCUVhWRllrTXNSVUZCUVVFc1ZVRkJWU3hGUVVGV1FTeFZRWFpGWVR0QlFYZEZZa01zUlVGQlFVRXNZMEZCWXl4RlFVRmtRU3hqUVhoRllUdEJRWGxGWWtNc1JVRkJRVUVzV1VGQldTeEZRVUZhUVN4WlFYcEZZVHRCUVRCRllrTXNSVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVEZGWVR0QlFUSkZZa01zUlVGQlFVRXNSMEZCUnl4RlFVRklRU3hIUVRORllUdEJRVFJGWWtNc1JVRkJRVUVzUzBGQlN5eEZRVUZNUVN4TFFUVkZZVHRCUVRaRllpeHRRa0ZCYVVKRExGbEJOMFZLTzBGQk9FVmlReXhGUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCT1VWaE8wRkJLMFZpTEdsQ1FVRmxReXhWUVM5RlJqdEJRV2RHWWl4bFFVRmhReXhSUVdoR1FUdEJRV2xHWWtNc1JVRkJRVUVzVFVGQlRTeEZRVUZPUVN4TlFXcEdZVHRCUVd0R1lpeHRRa0ZCYVVKRExGbEJiRVpLTzBGQmJVWmlReXhGUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCYmtaaE8wRkJiMFppTEcxQ1FVRnBRa01zV1VGd1JrbzdRVUZ4Um1Jc2EwSkJRV2RDUXl4WFFYSkdTRHRCUVhOR1lrTXNSVUZCUVVFc1UwRkJVeXhGUVVGVVFTeFRRWFJHWVR0QlFYVkdZaXhwUWtGQlpVTXNWVUYyUmtZN1FVRjNSbUpxU1N4RlFVRkJRU3hIUVVGSExFVkJRVWhCTEVkQmVFWmhPMEZCZVVaaWEwa3NSVUZCUVVFc1MwRkJTeXhGUVVGTVFTeExRWHBHWVR0QlFUQkdZa01zUlVGQlFVRXNVMEZCVXl4RlFVRlVRU3hUUVRGR1lUdEJRVEpHWWl3eVFrRkJlVUpETEcxQ1FUTkdXanRCUVRSR1lrTXNSVUZCUVVFc1NVRkJTU3hGUVVGS1FTeEpRVFZHWVR0QlFUWkdZa01zUlVGQlFVRXNVVUZCVVN4RlFVRlNRU3hSUVRkR1lUdEJRVGhHWWtNc1JVRkJRVUVzU1VGQlNTeEZRVUZLUVN4SlFUbEdZVHRCUVN0R1lpeG5Ra0ZCWTBNc1UwRXZSa1E3UVVGblIySXNaMEpCUVdORExGTkJhRWRFTzBGQmFVZGlReXhGUVVGQlFTeE5RVUZOTEVWQlFVNUJMRTFCYWtkaE8wRkJhMGRpTEcxQ1FVRnBRa01zV1VGc1IwbzdRVUZ0UjJJc2IwSkJRV3RDUXl4aFFXNUhURHRCUVc5SFlpeHRRa0ZCYVVKRExGbEJjRWRLTzBGQmNVZGlReXhGUVVGQlFTeFJRVUZSTEVWQlFWSkJMRkZCY2tkaE8wRkJjMGRpUXl4RlFVRkJRU3hUUVVGVExFVkJRVlJCTEZOQmRFZGhPMEZCZFVkaVF5eEZRVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJka2RoTzBGQmQwZGlReXhGUVVGQlFTeFJRVUZSTEVWQlFWSkJMRkZCZUVkaE8wRkJlVWRpUXl4RlFVRkJRU3hKUVVGSkxFVkJRVXBCTEVsQmVrZGhPMEZCTUVkaVF5eEZRVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJNVWRoTzBGQk1rZGlMR3RDUVVGblFrTXNWMEV6UjBnN1FVRTBSMkpETEVWQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBFMVIyRTdRVUUyUjJKRExFVkJRVUZCTEUxQlFVMHNSVUZCVGtFc1RVRTNSMkU3UVVFNFIySkRMRVZCUVVGQkxFMUJRVTBzUlVGQlRrRXNVMEU1UjJFN1FVRXJSMklzWjBKQlFXTkRMRk5CTDBkRU8wRkJaMGhpUXl4RlFVRkJRU3hMUVVGTExFVkJRVXhCTEV0QmFFaGhPMEZCYVVoaVF5eEZRVUZCUVN4SFFVRkhMRVZCUVVoQkxFZEJha2hoTzBGQmEwaGlMR05CUVZsRExFOUJiRWhETzBGQmJVaGlReXhGUVVGQlFTeFRRVUZUTEVWQlFWUkJMRk5CYmtoaE8wRkJiMGhpUXl4RlFVRkJRU3hKUVVGSkxFVkJRVXBCTEVsQmNFaGhPMEZCY1VoaVF5eEZRVUZCUVN4UFFVRlBMRVZCUVZCQkxFOUJja2hoTzBGQmMwaGlMRzFDUVVGcFFrTXNXVUYwU0VvN1FVRjFTR0pETEVWQlFVRkJMRTFCUVUwc1JVRkJUa0VzVFVGMlNHRTdRVUYzU0dJc2IwSkJRV3RDUXl4aFFYaElURHRCUVhsSVlrTXNSVUZCUVVFc1QwRkJUeXhGUVVGUVFTeFBRWHBJWVR0QlFUQklZa01zUlVGQlFVRXNUVUZCVFN4RlFVRk9RU3hOUVRGSVlUdEJRVEpJWWtNc1JVRkJRVUVzVFVGQlRTeEZRVUZPUVN4TlFUTklZVHRCUVRSSVluaFpMRVZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEUxU0dFN1FVRTJTR0o1V1N4RlFVRkJRU3hOUVVGTkxFVkJRVTVCTEUxQk4waGhPMEZCT0VoaVF5eEZRVUZCUVN4UlFVRlJMRVZCUVZKQkxGRkJPVWhoTzBGQkswaGlMR3RDUVVGblFrTXNWMEV2U0VnN1FVRm5TV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJUa0VzVFVGb1NXRTdRVUZwU1dJc2IwSkJRV3RDUXl4aFFXcEpURHRCUVd0SllrTXNSVUZCUVVFc1NVRkJTU3hGUVVGS1FTeEpRV3hKWVR0QlFXMUpZa01zUlVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVc1SllUdEJRVzlKWWtNc1JVRkJRVUVzUzBGQlN5eEZRVUZNUVN4TFFYQkpZVHRCUVhGSllpeHZRa0ZCYTBKRExHRkJja2xNTzBGQmMwbGlMSEZDUVVGdFFrTXNZMEYwU1U0N1FVRjFTV0pETEVWQlFVRkJMRTFCUVUwc1JVRkJUa0VzVFVGMlNXRTdRVUYzU1dJc2NVSkJRVzFDUXl4alFYaEpUanRCUVhsSllrTXNSVUZCUVVFc1NVRkJTU3hGUVVGS1FTeEpRWHBKWVR0QlFUQkpZaXhsUVVGaFF5eFJRVEZKUVR0QlFUSkpZaXhsUVVGaFF5eFJRVE5KUVR0QlFUUkpZaXh2UWtGQmEwSkRMR0ZCTlVsTU8wRkJOa2xpUXl4RlFVRkJRU3hIUVVGSExFVkJRVWhCTEVkQk4wbGhPMEZCT0VsaVF5eEZRVUZCUVN4TFFVRkxMRVZCUVV4QkxFdEJPVWxoTzBGQkswbGlMSEZDUVVGdFFrTXNZVUV2U1U0N1FVRm5TbUlzZFVKQlFYRkNReXhsUVdoS1VqdEJRV2xLWWl4elFrRkJiMEpETEdOQmFrcFFPMEZCYTBwaUxHMUNRVUZwUWtNc1YwRnNTa283UVVGdFNtSXNjMEpCUVc5Q1F5eGpRVzVLVUR0QlFXOUtZaXhuUWtGQlkwTXNVMEZ3U2tRN1FVRnhTbUlzYzBKQlFXOUNReXhqUVhKS1VEdEJRWE5LWWl4cFFrRkJaVU1zVlVGMFNrWTdRVUYxU21Jc2QwSkJRWE5DUXl4blFrRjJTbFE3UVVGM1NtSXNaVUZCWVVNc1VVRjRTa0U3UVVGNVNtSXNaMEpCUVdORExGTkJla3BFTzBGQk1FcGlMR3RDUVVGblFrTXNWMEV4U2tnN1FVRXlTbUlzWlVGQllVTXNVVUV6U2tFN1FVRTBTbUpETEVWQlFVRkJMRTlCUVU4c1JVRkJVRUVzVDBFMVNtRTdRVUUyU21Jc2EwSkJRV2RDUXl4WFFUZEtTRHRCUVRoS1lpeDFRa0ZCY1VKRExHVkJPVXBTTzBGQkswcGlMSEZDUVVGdFFrTXNZVUV2U2s0N1FVRm5TMklzYjBKQlFXdENReXhaUVdoTFREdEJRV2xMWWl4NVFrRkJkVUpETEdsQ1FXcExWanRCUVd0TFlpdzBRa0ZCTUVKRExHOUNRV3hMWWp0QlFXMUxZaXhwUTBGQkswSkRMSGRDUVc1TGJFSTdRVUZ2UzJJc2QwSkJRWE5DUXl4blFrRndTMVE3UVVGeFMySXNOa0pCUVRKQ1F5eHhRa0Z5UzJRN1FVRnpTMklzSzBKQlFUWkNReXgxUWtGMFMyaENPMEZCZFV0aUxEWkNRVUV5UWtNN1FVRjJTMlFzUTBGQlpqczdRVU4yU1VFc1NVRkJUVU1zVTBGQlV5eEhRVUZITDJJc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWa3JZaXhMUVVGYUxFTkJRV3hDTzBGQlJVRXNTVUZCVFVNc2EwSkJRV3RDTEVkQlFVY3NRMEZEZWtJc1YwRkVlVUlzUlVGRmVrSXNZMEZHZVVJc1JVRkhla0lzV1VGSWVVSXNSVUZKZWtJc2MwSkJTbmxDTEVWQlMzcENMRmRCVEhsQ0xFVkJUWHBDTEdWQlRubENMRVZCVDNwQ0xHRkJVSGxDTEVWQlVYcENMR2RDUVZKNVFpeEZRVk42UWl4VFFWUjVRaXhGUVZWNlFpeDNRa0ZXZVVJc1JVRlhla0lzZVVKQldIbENMRVZCV1hwQ0xHTkJXbmxDTEVWQllYcENMR1ZCWW5sQ0xFVkJZM3BDTEUxQlpIbENMRVZCWlhwQ0xHZENRV1o1UWl4RlFXZENla0lzVFVGb1FubENMRVZCYVVKNlFpeFBRV3BDZVVJc1JVRnJRbnBDTEZGQmJFSjVRaXhGUVcxQ2VrSXNhVUpCYmtKNVFpeEZRVzlDZWtJc1owSkJjRUo1UWl4RlFYRkNla0lzVjBGeVFubENMRU5CUVROQ08wRkJkMEpCTEVGQlFXVXNVMEZCVTBNc1NVRkJWQ3hEUVVGamRHTXNTMEZCWkN4RlFVRTBRanRCUVVGQkxFMUJSWFpEZFdNc2EwSkJSblZETEVkQlVYSkRkbU1zUzBGU2NVTXNRMEZGZGtOMVl5eHJRa0ZHZFVNN1FVRkJRU3h4UWtGUmNrTjJZeXhMUVZKeFF5eERRVWQyUXl0S0xFdEJTSFZETzBGQlFVRXNUVUZIZGtOQkxFdEJTSFZETERaQ1FVY3ZRaXhOUVVnclFqdEJRVUZCTEUxQlNYWkRlVk1zY1VKQlNuVkRMRWRCVVhKRGVHTXNTMEZTY1VNc1EwRkpka04zWXl4eFFrRktkVU03UVVGQlFTeE5RVXQyUTBNc1NVRk1kVU1zUjBGUmNrTjZZeXhMUVZKeFF5eERRVXQyUTNsakxFbEJUSFZETzBGQlFVRXNUVUZOZGtORExFMUJUblZETEVkQlVYSkRNV01zUzBGU2NVTXNRMEZOZGtNd1l5eE5RVTUxUXp0QlFVRkJMRzlDUVZGeVF6RmpMRXRCVW5GRExFTkJUM1pEUXl4SlFWQjFRenRCUVVGQkxFMUJUM1pEUVN4SlFWQjFReXcwUWtGUGFFTXNSVUZRWjBNN1FVRlZla01zVFVGQlRUQmpMRVZCUVVVc1IwRkJSME1zVlVGQlZTeERRVU51UWxBc2EwSkJRV3RDTEVOQlFVTlJMRkZCUVc1Q0xFTkJRVFJDU2l4SlFVRTFRaXhMUVVGeFEzSmtMRkZCUVUwc1EwRkJRekJrTEZWQlJIcENMRVZCUlc1Q01XUXNVVUZCVFN4RFFVRkRjV1FzU1VGR1dTeEZRVWR1UW5oVExFMUJRVTBzUTBGQlEwWXNTMEZCUkN4RFFVaGhMSE5DUVVsb1FqTkxMRkZCUVUwc1EwRkJRekprTEZOQlNsTXNSVUZKUnl4RFFVRkRUQ3hOUVVwS0xFVkJRWEpDTzBGQlQwRXNUVUZCVFUwc1NVRkJTU3hIUVVOUVVDeEpRVUZKTEVsQlFVbE1MRXRCUVVzc1EwRkJRMHNzU1VGQlJDeERRVUZrTzBGQlEwRTdRVUZEUTBRc1JVRkJRVUVzY1VKQlFYRkNMRWxCUVVsQkxIRkNRVUZ4UWl4RFFVRkRVeXhOUVVab1JDeEpRVWRCUXl4VFFVcEdPMEZCVFVFc1RVRkJUVU1zVlVGQlZTeEhRVUZIV2l4clFrRkJhMElzUzBGQlN5eEZRVUYyUWl4SFFVRTBRaXhKUVVFMVFpeEhRVUZ0UXl4SlFVRjBSRHRCUVVWQkxITkNRVU5GYmswN1FVRkRSU3hKUVVGQkxGTkJRVk1zUlVGQlJYVk5MRVZCUkdJN1FVRkZSU3hKUVVGQkxFMUJRVTBzUlVGQlJURmpMRWxCUmxZN1FVRkhSU3hKUVVGQkxFdEJRVXNzUlVGQlJVRXNTVUZJVkR0QlFVbEZMRWxCUVVFc1QwRkJUeXhGUVVGRExGZEJTbFk3UVVGTFJTeHRRa0ZCWVd0a0xGVkJUR1k3UVVGTlJTeHJRa0ZCV1Zvc2EwSkJUbVE3UVVGUFJTeEpRVUZCTEVsQlFVa3NSVUZCUXp0QlFWQlFMR3RDUVZORmJrMDdRVUZCVFN4SlFVRkJMRU5CUVVNc1JVRkJSVFJOTzBGQlFWUXNTVUZVUml4RFFVUkdPMEZCWVVRN1FVRkZSRllzU1VGQlNTeERRVUZEUml4TFFVRk1MRWRCUVdGRUxGTkJRV0k3UVVGRlFVY3NTVUZCU1N4RFFVRkROMHNzVTBGQlRDeEhRVUZwUWp0QlFVTm1PRXNzUlVGQlFVRXNhMEpCUVd0Q0xFVkJRVVZvVFN4VFFVRlRMRU5CUVVOUkxFMUJRVllzUTBGQmFVSnhUU3hWUVVSMFFqdEJRVVZtY2xRc1JVRkJRVUVzUzBGQlN5eEZRVUZGZDBjc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENMRU5CUTNKQ0xFMUJSSEZDTEVWQlJYSkNMRlZCUm5GQ0xFVkJSM0pDTEZWQlNIRkNMRVZCU1hKQ0xFMUJTbkZDTEVWQlMzSkNMRTlCVEhGQ0xFVkJUWEpDTEZkQlRuRkNMRVZCVDNKQ0xGRkJVSEZDTEVWQlVYSkNMRlZCVW5GQ0xFVkJVM0pDTEUxQlZIRkNMRVZCVlhKQ0xFOUJWbkZDTEVWQlYzSkNMRkZCV0hGQ0xFVkJXWEpDTEZGQlduRkNMRVZCWVhKQ0xFMUJZbkZDTEVWQlkzSkNMRkZCWkhGQ0xFVkJaWEpDTEV0QlpuRkNMRVZCWjBKeVFpeFpRV2hDY1VJc1JVRnBRbkpDTEU5QmFrSnhRaXhEUVVGb1FpeERRVVpSTzBGQmNVSm1aMDBzUlVGQlFVRXNjVUpCUVhGQ0xFVkJRVVZxVFN4VFFVRlRMRU5CUVVNNFRTeExRVUZXTEVOQlFXZENPMEZCUTNKRFNpeEpRVUZCUVN4TlFVRk5MRVZCUVVVeFRTeFRRVUZUTEVOQlFVTlJPMEZCUkcxQ0xFZEJRV2hDTEVOQmNrSlNPMEZCZDBKbU1Fd3NSVUZCUVVFc1NVRkJTU3hGUVVGRmJFMHNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTWt3c1UwRkJhRUlzUTBGNFFsTTdRVUY1UW1aUExFVkJRVUZCTEUxQlFVMHNSVUZCUlc1TkxGTkJRVk1zUTBGQlEzTkNMRWxCZWtKSU8wRkJNRUptTlZJc1JVRkJRVUVzU1VGQlNTeEZRVUZGYzFFc1UwRkJVeXhEUVVGRFRTeFRRVUZXTEVOQlFXOUNMRU5CUVVOT0xGTkJRVk1zUTBGQlEwOHNUVUZCV0N4RlFVRnRRbEFzVTBGQlV5eERRVUZEVVN4TlFVRTNRaXhEUVVGd1FqdEJRVEZDVXl4RFFVRnFRanM3T3p0QlEyaEhRU3hKUVVGTmRVMHNaMEpCUVdkQ0xFZEJRVWNzVTBGQmJrSkJMR2RDUVVGdFFpeERRVUZCTjFFc1IwRkJSenRCUVVGQkxGTkJRVWxCTEVkQlFVY3NTMEZCU3l4UFFVRlNMRWxCUVcxQ1FTeEhRVUZITEV0QlFVc3NVMEZCTDBJN1FVRkJRU3hEUVVFMVFqczdTVUZyUW5GQ09GRTdPenM3T3pzN096czdPenM3T3pzN2FVVkJjVU5PTEZsQlFVMDdRVUZEYWtJc1ZVRkJTU3hOUVVGTGRtUXNTMEZCVEN4RFFVRlhkMlFzVFVGQlppeEZRVUYxUWp0QlFVTnlRaXhqUVVGTGVHUXNTMEZCVEN4RFFVRlhkMlFzVFVGQldEdEJRVU5FTzBGQlEwWTdPMnRGUVVWaExGbEJRVTA3UVVGRGJFSXNWVUZCU1N4TlFVRkxlR1FzUzBGQlRDeERRVUZYZVdRc1QwRkJaaXhGUVVGM1FqdEJRVU4wUWl4alFVRkxlbVFzUzBGQlRDeERRVUZYZVdRc1QwRkJXRHRCUVVORU8wRkJRMFk3T3pzN096czdkME5CZGtKdFFqdEJRVU5zUWl4VlFVRkpTQ3huUWtGQlowSXNRMEZCUXl4TFFVRkxkR1FzUzBGQlRDeERRVUZYZVUwc1IwRkJXaXhEUVVGd1FpeEZRVUZ6UXp0QlFVTndReXhoUVVGTGFWSXNVMEZCVER0QlFVTkVPMEZCUTBZN096dDFRMEZGYTBKRExGZEJRV3RDTzBGQlFVRXNkMEpCUTJRc1MwRkJTek5rTEV0QlJGTTdRVUZCUVN4VlFVTXpRbmxOTEVkQlJESkNMR1ZCUXpOQ1FTeEhRVVF5UWp0QlFVRkJMRlZCUTNSQ2JWSXNSMEZFYzBJc1pVRkRkRUpCTEVkQlJITkNPenRCUVVWdVF5eFZRVUZKVGl4blFrRkJaMElzUTBGQlF6ZFJMRWRCUVVRc1EwRkJhRUlzU1VGQmVVSnJVaXhUUVVGVExFTkJRVU5ETEVkQlFWWXNTMEZCYTBKQkxFZEJRUzlETEVWQlFXOUVPMEZCUTJ4RUxHRkJRVXRHTEZOQlFVdzdRVUZEUkR0QlFVTkdPenM3WjBOQlkxYzdRVUZEVml4VlFVRkpMRTlCUVU5SExFMUJRVkFzUzBGQmEwSXNWMEZCZEVJc1JVRkJiVU03UVVGRGFrTXNXVUZCVFVNc1MwRkJTeXhIUVVGSExFbEJRVWxFTEUxQlFVMHNRMEZCUTA0c1MwRkJXQ3hGUVVGa08wRkJRMEZQTEZGQlFVRkJMRXRCUVVzc1EwRkJRME1zVFVGQlRpeEhRVUZsTEV0QlFVdERMRlZCUVhCQ08wRkJRMEZHTEZGQlFVRkJMRXRCUVVzc1EwRkJRMGNzVDBGQlRpeEhRVUZuUWl4TFFVRkxReXhYUVVGeVFqdEJRVU5CU2l4UlFVRkJRU3hMUVVGTExFTkJRVU5HTEVkQlFVNHNSMEZCV1N4TFFVRkxOV1FzUzBGQlRDeERRVUZYTkdRc1IwRkJka0k3UVVGRFJEdEJRVU5HT3pzN05rSkJSVkU3UVVGQlFTeDVRa0ZoU0N4TFFVRkxOV1FzUzBGaVJqdEJRVUZCTEZWQlJVeHRaU3hIUVVaTExHZENRVVZNUVN4SFFVWkxPMEZCUVVFc1ZVRkhUSEJWTEV0QlNFc3NaMEpCUjB4QkxFdEJTRXM3UVVGQlFTeFZRVWxNSzBZc1VVRktTeXhuUWtGSlRFRXNVVUZLU3p0QlFVRkJMRlZCUzB4eVJDeEhRVXhMTEdkQ1FVdE1RU3hIUVV4TE8wRkJRVUVzVlVGTlRESlNMRlZCVGtzc1owSkJUVXhCTEZWQlRrczdRVUZCUVN4VlFVOU1ReXhQUVZCTExHZENRVTlNUVN4UFFWQkxPMEZCUVVFc1ZVRlJURU1zWVVGU1N5eG5Ra0ZSVEVFc1lVRlNTenRCUVVGQkxGVkJVMHhETEZsQlZFc3NaMEpCVTB4QkxGbEJWRXM3UVVGQlFTeFZRVlZNUXl4TFFWWkxMR2RDUVZWTVFTeExRVlpMTzBGQlFVRXNWVUZYVEZvc1IwRllTeXhuUWtGWFRFRXNSMEZZU3p0QlFVRkJMRlZCV1V4aExFMUJXa3NzWjBKQldVeEJMRTFCV2tzN1FVRmxVQ3hWUVVGTlF5eGhRVUZoTEVkQlFVZHdRaXhuUWtGQlowSXNRMEZCUXpkUkxFZEJRVVFzUTBGQmRFTTdRVUZEUVN4VlFVRk5hMU1zV1VGQldTeEhRVUZITjA4c1VVRkJVU3huUWtGRE0wSk5MR05CUVVNc1IwRkJSRHRCUVVGTExGRkJRVUVzVVVGQlVTeEZRVUZETEZWQlFXUTdRVUZCZVVJc1VVRkJRU3hIUVVGSExFMUJRVFZDTzBGQlFUWkNMRkZCUVVFc1NVRkJTU3hOUVVGcVF6dEJRVUZyUXl4UlFVRkJMRTFCUVUwc1RVRkJlRU03UVVGQmVVTXNVVUZCUVN4TFFVRkxMRTFCUVRsRE8wRkJRU3RETEZGQlFVRXNVVUZCVVN4RlFVRkRPMEZCUVhoRUxGTkJRMGRPTEZGQlJFZ3NRMEZFTWtJc1IwRkpla0lzU1VGS1NqdEJRVTFCTEdGQlFVODBUeXhoUVVGaExHZENRVU5zUW5SUE8wRkJRMFVzYzBKQlFWa3JUaXhIUVVSa08wRkJSVVVzVVVGQlFTeFRRVUZUTEVWQlFVVXhVaXhIUVVGSExFdEJRVXNzVTBGQlVpeEpRVUZ4UWtFc1IwRkJSeXhMUVVGTExFOUJRVGRDTEVkQlFYVkRjazRzVVVGQlRTeERRVUZEY1U0c1IwRkJSQ3hEUVVFM1F5eEhRVUZ4UkN4SlFVWnNSVHRCUVVkRkxGRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlEweHRVeXhWUVVGQlFTeGxRVUZsTEVWQlFVVTNWU3hMUVVSYU8wRkJSVXc0VlN4VlFVRkJRU3hsUVVGbExHbENRVUZWYWtJc1IwRkJWanRCUVVaV0xGTkJTRlE3UVVGUFJTeFJRVUZCTEVsQlFVa3NSVUZCUXp0QlFWQlFMRk5CVTBkbExGbEJWRWdzUTBGRWEwSXNaMEpCWVd4Q2RrOHNZMEZCUXl4SFFVRkVPMEZCUTBVc1VVRkJRU3hSUVVGUkxFVkJRVU1zVlVGRVdEdEJRVVZGTEZGQlFVRXNlVUpCUVhsQ0xFVkJRVVU3UVVGRGVrSnVRaXhWUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZEVURKUUxGbEJRVUZCTEdWQlFXVXNSVUZCUlRkVkxFdEJSRlk3UVVGRlVDdFZMRmxCUVVGQkxHRkJRV0VzV1VGQlRWSXNZVUZCWVN4SFFVRkhReXhaUVVGcVFpeEhRVUZwUXl4SFFVRjBRenRCUVVaT08wRkJSR2RDTzBGQlJqZENMSE5DUVZORmJrODdRVUZEUlN4UlFVRkJMRWRCUVVjc1JVRkJSU3RPTEVkQlJGQTdRVUZGUlN4UlFVRkJMRk5CUVZNc1JVRkJSUzlsTEZGQlFVMHNRMEZCUXpKbUxFZEJSbkJDTzBGQlIwVXNVVUZCUVN4VlFVRlZMRVZCUVVWWUxGVkJTR1E3UVVGSlJTeFJRVUZCTEU5QlFVOHNSVUZCUlVNc1QwRktXRHRCUVV0RkxGRkJRVUVzVDBGQlR5eEZRVUZGTEV0QlFVdElMRmRCVEdoQ08wRkJUVVVzVVVGQlFTeE5RVUZOTEVWQlFVVXNTMEZCUzBZc1ZVRk9aanRCUVU5RkxGRkJRVUVzUzBGQlN5eEZRVUZGVVN4TFFWQlVPMEZCVVVVc1VVRkJRU3hIUVVGSExFVkJRVVZhTEVkQlVsQTdRVUZUUlN4UlFVRkJMRTFCUVUwc1JVRkJSV0U3UVVGVVZpeFJRVlJHTEVWQmIwSkhSU3haUVhCQ1NDeERRV0pHTzBGQmIwTkVPenM3TzBWQmNFaG5ReTlQT3p0blFrRkJaREpPTEc5Q1FVTkJPMEZCUTJwQ1dTeEZRVUZCUVN4SFFVRkhMRVZCUVVVMVRpeFRRVUZUTEVOQlFVTlJMRTFCUVZZc1EwRkJhVUp4VFN4VlFVUk1PMEZCUldwQ2RFNHNSVUZCUVVFc1VVRkJVU3hGUVVGRlV5eFRRVUZUTEVOQlFVTnRRaXhKUVVaSU8wRkJSMnBDTTBnc1JVRkJRVUVzUzBGQlN5eEZRVUZGZDBjc1UwRkJVeXhEUVVGRFVTeE5RVWhCTzBGQlNXcENkRVVzUlVGQlFVRXNSMEZCUnl4RlFVRkZPRVFzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRVU1zVTBGQlJDeEZRVUZaTEU5QlFWb3NSVUZCY1VJc1RVRkJja0lzUTBGQmFFSXNRMEZLV1R0QlFVdHFRalJPTEVWQlFVRkJMRlZCUVZVc1JVRkJSVGRPTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEUxQlFVUXNSVUZCVXl4TFFVRlVMRVZCUVdkQ0xFMUJRV2hDTEVOQlFXaENMRU5CVEVzN1FVRk5ha0kyVGl4RlFVRkJRU3hQUVVGUExFVkJRVVU1VGl4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGclFpeE5RVUZzUWl4RFFVRm9RaXhEUVU1Uk8wRkJUMnBDT0U0c1JVRkJRVUVzWVVGQllTeEZRVUZGTDA0c1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDBzVlVGUVpqdEJRVkZxUW0xQ0xFVkJRVUZCTEZsQlFWa3NSVUZCUldoUExGTkJRVk1zUTBGQlEwOHNUVUZCVml4RFFVRnBRbk5OTEZWQlVtUTdRVUZUYWtKTExFVkJRVUZCTEU5QlFVOHNSVUZCUld4T0xGTkJRVk1zUTBGQlEzbFBMRWxCVkVZN1FVRlZha0o0UWl4RlFVRkJRU3hOUVVGTkxFVkJRVVZxVGl4VFFVRlRMRU5CUVVONVR5eEpRVlpFTzBGQlYycENVaXhGUVVGQlFTeExRVUZMTEVWQlFVVnFUeXhUUVVGVExFTkJRVU5STEUxQldFRTdRVUZaYWtJMlRTeEZRVUZCUVN4SFFVRkhMRVZCUVVWeVRpeFRRVUZUTEVOQlFVTlJMRTFCUVZZc1EwRkJhVUp4VFN4VlFWcE1PMEZCWVdwQ2NVSXNSVUZCUVVFc1RVRkJUU3hGUVVGRmJFOHNVMEZCVXl4RFFVRkRVVHRCUVdKRU96dG5Ra0ZFUVhkTkxIVkNRV2xDUnp0QlFVTndRbmhVTEVWQlFVRkJMRXRCUVVzc1JVRkJSU3hoUVVSaE8wRkJSWEJDTUVNc1JVRkJRVUVzUjBGQlJ5eEZRVUZGTEUxQlJtVTdRVUZIY0VJeVVpeEZRVUZCUVN4VlFVRlZMRVZCUVVVc1RVRklVVHRCUVVsd1FrTXNSVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJTbGM3T3pzN1FVTnlRbmhDTEVsQlFVMVpMR2RDUVVGblFpeEhRVUZITEZOQlFXNUNRU3huUWtGQmJVSXNRMEZCUTI1a0xFTkJRVVFzUlVGQmQwSTdRVUZETDBNc1RVRkJTU3hQUVVGUFFTeERRVUZRTEV0QlFXRXNVVUZCYWtJc1JVRkJNa0k3UVVGRGVrSXNWMEZCVDFZc1NVRkJTU3hEUVVGRFRpeExRVUZMTEVOQlFVTXNWVUZCUkN4RFFVRk9MRVZCUVc5Q2FVSXNUMEZCY0VJc1EwRkJTaXhEUVVGcFEwUXNRMEZCYWtNc1EwRkJVRHRCUVVORU96dEJRVVZFTEUxQlFVbEJMRU5CUVVNc1MwRkJTeXhSUVVGV0xFVkJRVzlDTzBGQlEyeENMRmRCUVU4NVF5eGhRVUZoTEVOQlFVTXJReXhQUVVGUExFTkJRVU5ETEUxQlFWUXNRMEZCY0VJN1FVRkRSRHM3UVVGRlJDeFRRVUZQY0VRc1VVRkJVU3hGUVVGbU8wRkJRMFFzUTBGV1JEczdRVUZaUVN4QlFVRmxMRk5CUVZOelowSXNTVUZCVkN4RFFVRmpiR1lzUzBGQlpDeEZRVUUwUWp0QlFVRkJMRTFCUlhaRE9GQXNVVUZHZFVNc1IwRlJja001VUN4TFFWSnhReXhEUVVWMlF6aFFMRkZCUm5WRE8wRkJRVUVzZDBKQlVYSkRPVkFzUzBGU2NVTXNRMEZIZGtNMlFpeFJRVWgxUXp0QlFVRkJMRTFCUjNaRFFTeFJRVWgxUXl4blEwRkhOVUlzUTBGSU5FSTdRVUZCUVN4TlFVbDJRMmRPTEV0QlNuVkRMRWRCVVhKRE4wOHNTMEZTY1VNc1EwRkpka00yVHl4TFFVcDFRenRCUVVGQkxFMUJTM1pEYUVNc1RVRk1kVU1zUjBGUmNrTTNUU3hMUVZKeFF5eERRVXQyUXpaTkxFMUJUSFZETzBGQlFVRXNPRUpCVVhKRE4wMHNTMEZTY1VNc1EwRk5ka050Wml4dFFrRk9kVU03UVVGQlFTeE5RVTEyUTBFc2JVSkJUblZETEhORFFVMXFRaXhKUVU1cFFqdEJRVUZCTEc5Q1FWRnlRMjVtTEV0QlVuRkRMRU5CVDNaRGIyWXNTVUZRZFVNN1FVRkJRU3hOUVU5MlEwRXNTVUZRZFVNc05FSkJUMmhETEV0QlVHZERPMEZCVTNwRExITkNRVU5GYUZBN1FVRkRSU3hKUVVGQkxGTkJRVk1zUlVGQlJXbFFMRlZCUVVVc1EwRkRXR3BuUWl4UlFVRk5MRU5CUVVNNFppeEpRVVJKTEVWQlJWaHVaaXhQUVVGUExFTkJRVU5yWml4blFrRkJaMElzUTBGQlEzQmtMRkZCUVVRc1EwRkJha0lzUTBGQlVDeERRVUZ2UTJoRUxGTkJSbnBDTEhOQ1FVbFNUeXhSUVVGTkxFTkJRVU1yWml4dFFrRktReXhGUVVseFFrRXNiVUpCU25KQ0xFVkJSR1k3UVVGUlJTeEpRVUZCTEV0QlFVc3NSVUZCUlR0QlFVRkZkRkVzVFVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGR08wRkJRVk5vUXl4TlFVRkJRU3hOUVVGTkxFVkJRVTVCTzBGQlFWUTdRVUZTVkN4TFFWVkhhVVFzVVVGV1NDeEZRVmRIYzFBc1NVRkJTU3hwUWtGQlNXaFFPMEZCUVVzc1NVRkJRU3hUUVVGVExFVkJRVVZvVWl4UlFVRk5MRU5CUVVOblowSTdRVUZCZGtJc1NVRllXQ3hEUVVSR08wRkJaVVE3UVVGRlJDeEpRVUZOTjA0c2EwSkJRV2RDTEVkQlFVZG9RaXhUUVVGVExFTkJRVU5ETEV0QlFWWXNRMEZCWjBJc1EwRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNpeEZRVUZQTEVOQlFWQXNSVUZCVlN4RFFVRldMRVZCUVdFc1EwRkJZaXhGUVVGblFpeERRVUZvUWl4RlFVRnRRaXhEUVVGdVFpeEZRVUZ6UWl4RFFVRjBRaXhGUVVGNVFpeERRVUY2UWl4RlFVRTBRaXhSUVVFMVFpeERRVUZvUWl4RFFVRjZRanRCUVVWQk1FOHNTVUZCU1N4RFFVRkRlazRzVTBGQlRDeEhRVUZwUWp0QlFVTm1NMElzUlVGQlFVRXNVVUZCVVN4RlFVRkZVeXhUUVVGVExFTkJRVU50UWl4SlFVUk1PMEZCUldZM1JTeEZRVUZCUVN4TlFVRk5MRVZCUVVVd1JDeFRRVUZUTEVOQlFVTk5MRk5CUVZZc1EwRkJiMElzUTBGQlEwNHNVMEZCVXl4RFFVRkRUeXhOUVVGWUxFVkJRVzFDVUN4VFFVRlRMRU5CUVVOUkxFMUJRVGRDTEVOQlFYQkNMRU5CUms4N1FVRkhabXhRTEVWQlFVRkJMRkZCUVZFc1JVRkJSVEJRTEd0Q1FVaExPMEZCU1dZeFF5eEZRVUZCUVN4TFFVRkxMRVZCUVVVd1FpeFRRVUZUTEVOQlFVTk5MRk5CUVZZc1EwRkJiMElzUTBGQlEwNHNVMEZCVXl4RFFVRkRUeXhOUVVGWUxFVkJRVzFDVUN4VFFVRlRMRU5CUVVOUkxFMUJRVGRDTEVOQlFYQkNMRU5CU2xFN1FVRkxabTlQTEVWQlFVRkJMRzFDUVVGdFFpeEZRVUZGTlU4c1UwRkJVeXhEUVVGRGMwSXNTVUZNYUVJN1FVRk5ablZPTEVWQlFVRkJMRWxCUVVrc1JVRkJSVGRQTEZOQlFWTXNRMEZCUTNOQ08wRkJUa1FzUTBGQmFrSTdPenM3UVVOc1JFRXNTVUZCVFhsT0xFMUJRVTBzUjBGQlJ5eFRRVUZVUVN4TlFVRlRMRU5CUVVOMFppeExRVUZFTzBGQlFVRXNjMEpCUTJKdlVTeGpRVUZETEVkQlFVUXNaVUZCVTNCUkxFdEJRVlE3UVVGQlowSXNTVUZCUVN4UlFVRlJMRVZCUVVNN1FVRkJla0lzYlVKQlEwVnZVU3hqUVVGRExFZEJRVVE3UVVGRFJTeEpRVUZCTEhsQ1FVRjVRaXhGUVVGRk8wRkJRVVZ1UWl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJUWlFMRkZCUVVGQkxHRkJRV0VzUlVGQlJUdEJRVUZxUWp0QlFVRllMRXRCUkRkQ08wRkJSVVVzU1VGQlFTeFJRVUZSTEVWQlFVTTdRVUZHV0N4SlFVUkdMR1ZCUzBVeFR5eGpRVUZETEVkQlFVUTdRVUZCU3l4SlFVRkJMRkZCUVZFc1JVRkJReXhWUVVGa08wRkJRWGxDTEVsQlFVRXNSMEZCUnl4TlFVRTFRanRCUVVFMlFpeEpRVUZCTEVsQlFVa3NUVUZCYWtNN1FVRkJhME1zU1VGQlFTeE5RVUZOTEUxQlFYaERPMEZCUVhsRExFbEJRVUVzUzBGQlN6dEJRVUU1UXl4TFFVTkhjRkVzUzBGQlN5eERRVUZET0ZBc1VVRkVWQ3hEUVV4R0xFTkJSR0U3UVVGQlFTeERRVUZtT3p0QlFWbEJMRWxCUVUxNVVDeGhRVUZoTEVkQlFVY3NVMEZCYUVKQkxHRkJRV2RDTEU5QlRXWTdRVUZCUVN4TlFVeE1hbVVzU1VGTFN5eFJRVXhNUVN4SlFVdExPMEZCUVVFc1RVRktUR3RsTEdOQlNVc3NVVUZLVEVFc1kwRkpTenRCUVVOTUxFMUJRVTFETEZsQlFWa3NSMEZCUjI1bExFbEJRVWtzUjBGQlJ5eHRRa0ZCU1VFc1NVRkJTaXhGUVVGVkxFTkJRVllzUlVGQllXOWxMRmRCUVdJc1JVRkJTQ3hIUVVGblF5eEZRVUY2UkR0QlFVTkJMSE5DUVVORmRGQXNZMEZCUXl4TlFVRkVPMEZCUVZFc1NVRkJRU3hMUVVGTExFVkJRVU1zVjBGQlpEdEJRVUV3UWl4SlFVRkJMRkZCUVZFc1JVRkJReXhSUVVGdVF6dEJRVUUwUXl4SlFVRkJMRkZCUVZFc1JVRkJRenRCUVVGeVJDeExRVU5IYjFBc1kwRkJZeXhKUVVGSkxFTkJRVU5ETEZsQlFXNUNMR2RDUVVORGNsQTdRVUZEUlN4SlFVRkJMRzFDUVVGdFFpeEZRVUZETEdWQlJIUkNPMEZCUlVVc1NVRkJRU3hKUVVGSkxFVkJRVU1zUzBGR1VEdEJRVWRGTEVsQlFVRXNUMEZCVHl4RlFVRkRMRXRCU0ZZN1FVRkpSU3hKUVVGQkxFOUJRVThzUlVGQlF5eGpRVXBXTzBGQlMwVXNTVUZCUVN4TFFVRkxMRVZCUVVNN1FVRk1VaXhMUVU5SE9VOHNTVUZCU1N4cFFrRkJTVGhQTERaQ1FVRlJPVThzU1VGQlVpeERRVkJZTEdWQlVVVTRUenRCUVVGTkxFbEJRVUVzUTBGQlF5eEZRVUZGZFZBc1UwRkJWRHRCUVVGdlFpeEpRVUZCTEVsQlFVa3NSVUZCUXp0QlFVRjZRaXhKUVZKR0xFTkJSRVFzWjBKQldVTjJVRHRCUVVORkxFbEJRVUVzUzBGQlN5eEZRVUZETEUxQlJGSTdRVUZGUlN4SlFVRkJMRTlCUVU4c1JVRkJReXhwUWtGR1ZqdEJRVWRGTEVsQlFVRXNUMEZCVHl4RlFVRkRMRXRCU0ZZN1FVRkpSU3hKUVVGQkxHMUNRVUZ0UWl4RlFVRkRMR1ZCU25SQ08wRkJTMFVzU1VGQlFTeExRVUZMTEVWQlFVTTdRVUZNVWl4clFrRlBSVUVzTmtKQlFWRTVUeXhKUVVGU0xFTkJVRVlzWlVGUlJUaFBPMEZCUTBVc1NVRkJRU3hSUVVGUkxFVkJRVU1zVFVGRVdEdEJRVVZGTEVsQlFVRXNTVUZCU1N4RlFVRkRMRTFCUmxBN1FVRkhSU3hKUVVGQkxFVkJRVVVzUlVGQlF5eFJRVWhNTzBGQlNVVXNTVUZCUVN4VlFVRlZMRVZCUVVNc1VVRktZanRCUVV0RkxFbEJRVUVzVTBGQlV5eEZRVUZGTEVOQlExUjNVQ3hWUVVGVkxFTkJRVU5ETEZkQlJFWXNSVUZGVkVRc1ZVRkJWU3hEUVVGRFJTeFRRVVpHTEVWQlIxUkdMRlZCUVZVc1EwRkJRMGNzWTBGSVJpeEZRVWxVTldZc1NVRktVeXhEUVVsS0xFZEJTa2s3UVVGTVlpeExRVmRIYzJZc1dVRllTQ3hEUVZKR0xFTkJZa29zUTBGRVJqdEJRWFZEUkN4RFFTOURSRHM3UVVFd1JFRXNTVUZCVFdwQ0xFdEJRVXNzUjBGQlJ6dEJRVU5hTlZvc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlJGRTdRVUZGV2tVc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlJsRTdRVUZIV2tNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlNGRTdRVUZKV2tNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlNsRTdRVUZMV21kaUxFVkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVeFJMRU5CUVdRN1FVRlJRU3hCUVVGbExGTkJRVk5ETEUxQlFWUXNRMEZCWjBKcVowSXNTMEZCYUVJc1JVRkJPRUk3UVVGQlFTeDNRa0ZEUkRSUUxGRkJRVUVzUTBGQlpTeEpRVUZtTEVOQlJFTTdRVUZCUVR0QlFVRkJMRTFCUTNCRGMxRXNZVUZFYjBNN1FVRkJRU3hOUVVOeVFrTXNaMEpCUkhGQ096dEJRVUZCTEUxQlIzcEROMlVzU1VGSWVVTXNSMEZUZGtOMFFpeExRVlIxUXl4RFFVZDZRM05DTEVsQlNIbERPMEZCUVVFc1RVRkpla000WlN4UFFVcDVReXhIUVZOMlEzQm5RaXhMUVZSMVF5eERRVWw2UTI5blFpeFBRVXA1UXp0QlFVRkJMRzlDUVZOMlEzQm5RaXhMUVZSMVF5eERRVXQ2UTBNc1NVRk1lVU03UVVGQlFTeE5RVXQ2UTBFc1NVRk1lVU1zTkVKQlMyeERMRXRCVEd0RE8wRkJRVUVzVFVGTmVrTXlaQ3hIUVU1NVF5eEhRVk4yUXpWa0xFdEJWSFZETEVOQlRYcEROR1FzUjBGT2VVTTdRVUZCUVN4TlFVOTZRM2xETEZGQlVIbERMRWRCVTNaRGNtZENMRXRCVkhWRExFTkJUM3BEY1dkQ0xGRkJVSGxETzBGQlFVRXNPRUpCVTNaRGNtZENMRXRCVkhWRExFTkJVWHBEYzJkQ0xESkNRVko1UXp0QlFVRkJMRTFCVVZwa0xHTkJVbGtzYzBOQlVVc3NTMEZTVER0QlFWVXpReXhOUVVGTk0xRXNTMEZCU3l4SFFVRkhOVThzU1VGQlNTeExRVUZMTEV0QlFWUXNSMEZCYVVJc1RVRkJha0lzUjBGQk1FSjFaU3hMUVVGTExFTkJRVU4yWlN4SlFVRkVMRU5CUVRkRE8wRkJRMEVzVFVGQlRUUk5MRTFCUVUwc1IwRkJSelZOTEVsQlFVa3NTMEZCU3l4TFFVRlVMRWRCUVdsQ0xFVkJRV3BDTEVkQlFYTkNkV1VzUzBGQlN5eERRVUZEZG1Vc1NVRkJSQ3hEUVVFeFF6czdRVUZGUVN4TlFVRk5jMmRDTEdkQ1FVRm5RaXhIUVVGSExGTkJRVzVDUVN4blFrRkJiVUk3UVVGQlFTeFhRVUZOU2l4blFrRkJaMElzUTBGQlF5eExRVUZFTEVOQlFYUkNPMEZCUVVFc1IwRkJla0k3TzBGQlJVRXNjMEpCUTBVdlVDeGpRVUZETEVkQlFVUTdRVUZEUlN4SlFVRkJMRXRCUVVzc1JVRkJRenRCUVVSU0xFdEJSVTluVVN4UFFVRlBMRWRCUTFJN1FVRkRSWEJTTEVsQlFVRkJMSGxDUVVGNVFpeEZRVUZGTzBGQlEzcENReXhOUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZEVUhWU0xGRkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVUktPMEZCUkdkQ08wRkJSRGRDTEVkQlJGRXNSMEZSVWl4RlFWWk9PMEZCVjBVc1NVRkJRU3hMUVVGTExFVkJRVVV6VWl4TFFWaFVPMEZCV1VVc1NVRkJRU3hOUVVGTkxFVkJRVVZvUXl4TlFWcFdPMEZCWVVVc1NVRkJRU3hSUVVGUkxFVkJRVU1zVlVGaVdEdEJRV05GTEVsQlFVRXNVVUZCVVN4RlFVRkRPMEZCWkZnc1RVRm5Ra2NyVVN4SFFVRkhMRWxCUVVselF5eGhRVUZRTEdkQ1FVTkRPVkFzWTBGQlF5eEpRVUZFTzBGQlFVMHNTVUZCUVN4UlFVRlJMRVZCUVVNc1VVRkJaanRCUVVGM1FpeEpRVUZCTEVsQlFVazdRVUZCTlVJc2EwSkJRMFZCTEdOQlFVTXNTMEZCUkR0QlFVTkZMRWxCUVVFc1IwRkJSeXhGUVVGRk9VOHNTVUZFVUR0QlFVVkZMRWxCUVVFc1MwRkJTeXhGUVVGRExGTkJSbEk3UVVGSFJTeEpRVUZCTEdGQlFXRXNSVUZCUlN4RFFVaHFRanRCUVVsRkxFbEJRVUVzV1VGQldTeEZRVUZGTEVOQlNtaENPMEZCUzBVc1NVRkJRU3hIUVVGSExFVkJRVVZ6WXl4SFFVeFFPMEZCVFVVc1NVRkJRU3hQUVVGUExFVkJRVVV5UXp0QlFVNVlMRWxCUkVZc1EwRkVSQ3huUWtGWlEyNVJMR05CUVVNc1lVRkJSRHRCUVVGbExFbEJRVUVzU1VGQlNTeEZRVUZGT1U4c1NVRkJja0k3UVVGQk1rSXNTVUZCUVN4alFVRmpMRVZCUVVWclpUdEJRVUV6UXl4SlFUVkNTaXhGUVRoQ1IyRXNVVUZCVVN4cFFrRkRVR3BSTEdOQlFVTXNSMEZCUkR0QlFVTkZMRWxCUVVFc1VVRkJVU3hGUVVGRExGVkJSRmc3UVVGRlJTeEpRVUZCTEV0QlFVc3NSVUZCUXl4TFFVWlNPMEZCUjBVc1NVRkJRU3hOUVVGTkxFVkJRVU1zUzBGSVZEdEJRVWxGTEVsQlFVRXNVVUZCVVN4RlFVRkZMRVZCU2xvN1FVRkxSU3hKUVVGQkxGTkJRVk1zUlVGQlJTeEZRVXhpTzBGQlRVVXNTVUZCUVN4NVFrRkJlVUlzUlVGQlJUdEJRVU42UW01Q0xFMUJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVTlFla1lzVVVGQlFVRXNUVUZCVFN4RlFVRkZMRWxCUkVRN1FVRkZVR2xHTEZGQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVaQk8wRkJSR2RDTzBGQlRqZENMR3RDUVdGRk1rSXNZMEZCUXl4SFFVRkVPMEZCUVVzc1NVRkJRU3hMUVVGTExFVkJRVU1zVDBGQldEdEJRVUZ0UWl4SlFVRkJMRXRCUVVzc1JVRkJReXhOUVVGNlFqdEJRVUZuUXl4SlFVRkJMRTFCUVUwc1JVRkJReXhOUVVGMlF6dEJRVUU0UXl4SlFVRkJMRkZCUVZFc1JVRkJRenRCUVVGMlJDeHJRa0ZEUlVFc1kwRkJReXhKUVVGRU8wRkJRMFVzU1VGQlFTeExRVUZMTEVWQlFVTXNTMEZFVWp0QlFVVkZMRWxCUVVFc1NVRkJTU3hGUVVGRExHTkJSbEE3UVVGSFJTeEpRVUZCTEd0Q1FVRnJRaXhGUVVGRExFVkJTSEpDTzBGQlNVVXNTVUZCUVN4SlFVRkpMRVZCUVVNN1FVRktVQ3hKUVVSR0xFTkJZa1lzUTBFdlFrb3NRMEZFUmp0QlFYbEVSRHRCUVVWRU5sQXNUVUZCVFN4RFFVRkRlRThzVTBGQlVDeEhRVUZ0UWp0QlFVTnFRbTVSTEVWQlFVRkJMRWxCUVVrc1JVRkJSV2xRTEZOQlFWTXNRMEZCUTFFc1RVRkJWaXhEUVVGcFFuRk5MRlZCUkU0N1FVRkZha0puUkN4RlFVRkJRU3hQUVVGUExFVkJRVVUzVUN4VFFVRlRMRU5CUVVOelFpeEpRVVpHTzBGQlIycENLMHdzUlVGQlFVRXNSMEZCUnl4RlFVRkZjazRzVTBGQlV5eERRVUZEVVN4TlFVaEZPMEZCU1dwQ09WRXNSVUZCUVVFc1NVRkJTU3hGUVVGRmMxRXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNTVUZCUkN4RlFVRlBMRWxCUVZBc1JVRkJZU3hKUVVGaUxFVkJRVzFDTEVsQlFXNUNMRVZCUVhsQ0xFbEJRWHBDTEVWQlFTdENMRXRCUVM5Q0xFTkJRV2hDTEVOQlNsYzdRVUZMYWtJMlVDeEZRVUZCUVN4UlFVRlJMRVZCUVVVNVVDeFRRVUZUTEVOQlFVTnpRanRCUVV4SUxFTkJRVzVDT3p0QlEzQktRU3hKUVVGTk1rMHNUMEZCU3l4SFFVRkhPMEZCUTFwNldpeEZRVUZCUVN4RlFVRkZMRVZCUVVVc1JVRkVVVHRCUVVWYVF5eEZRVUZCUVN4RlFVRkZMRVZCUVVVN1FVRkdVU3hEUVVGa08wRkJTMEVzUVVGQlpTeFRRVUZUZVdJc1ZVRkJWQ3hQUVVFMFJEdEJRVUZCTEUxQlFYUkRReXhoUVVGelF5eFJRVUYwUTBFc1lVRkJjME03UVVGQlFTeDFRa0ZCZGtKNlowSXNTVUZCZFVJN1FVRkJRU3hOUVVGMlFrRXNTVUZCZFVJc01FSkJRV2hDTEV0QlFXZENPMEZCUTNwRkxFMUJRVTAwVHl4TFFVRkxMRWRCUVVjMVR5eEpRVUZKTEV0QlFVc3NTMEZCVkN4SFFVRnBRaXhOUVVGcVFpeEhRVUV3UW5WbExFOUJRVXNzUTBGQlEzWmxMRWxCUVVRc1EwRkJOME03UVVGRFFTeHpRa0ZEUlcxUkxHTkJRVU1zUjBGQlJEdEJRVUZMTEVsQlFVRXNVVUZCVVN4RlFVRkRMRlZCUVdRN1FVRkJlVUlzU1VGQlFTeExRVUZMTEVWQlFVVjJRanRCUVVGb1F5eHJRa0ZEUlhWQ0xHTkJRVU1zUjBGQlJEdEJRVUZMTEVsQlFVRXNlVUpCUVhsQ0xFVkJRVVU3UVVGQlJXNUNMRTFCUVVGQkxFOUJRVThzUlVGQlJUdEJRVUZGTmxBc1VVRkJRVUVzWVVGQllTeEZRVUZGTzBGQlFXcENPMEZCUVZnN1FVRkJhRU1zU1VGRVJpeEZRVVZITEVOQlFVTTBRaXhoUVVGaExFbEJRVWtzUlVGQmJFSXNSVUZCYzBKRExFdEJRWFJDTEVOQlFUUkNMRU5CUVRWQ0xFVkJRU3RDTEVOQlFTOUNMRVZCUVd0RE4yZENMRWRCUVd4RExFTkJRWE5ETEdsQ1FVRm5RamhuUWl4TFFVRm9RanRCUVVGQkxGRkJRVWQwWml4SlFVRklMRk5CUVVkQkxFbEJRVWc3UVVGQlFTeFJRVUZUYzJNc1IwRkJWQ3hUUVVGVFFTeEhRVUZVTzBGQlFVRXNkMEpCUTNKRGVFNHNZMEZCUXl4SFFVRkVPMEZCUTBVc1RVRkJRU3hIUVVGSExGbEJRVXM1VHl4SlFVRk1MR05CUVdGelppeExRVUZpTEVOQlJFdzdRVUZGUlN4TlFVRkJMRkZCUVZFc1JVRkJReXhWUVVaWU8wRkJSMFVzVFVGQlFTeE5RVUZOTEVWQlFVTXNTMEZJVkR0QlFVbEZMRTFCUVVFc1MwRkJTeXhGUVVGRExFdEJTbEk3UVVGTFJTeE5RVUZCTEhsQ1FVRjVRaXhGUVVGRk8wRkJRM3BDTTFJc1VVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlExQTNRaXhWUVVGQlFTeEpRVUZKTEVWQlFVVjNWQ3hMUVVGTExFdEJRVXNzUTBGQlZpeEhRVUZqTEVOQlFXUXNSMEZCYTBJc1MwRkVha0k3UVVGRlVHcFRMRlZCUVVGQkxFZEJRVWNzUlVGQlJXbFRMRXRCUVVzc1MwRkJTeXhEUVVGV0xFZEJRV01zUTBGQlpDeEhRVUZyUWp0QlFVWm9RanRCUVVSblFqdEJRVXczUWl4dlFrRlpSWGhSTEdOQlFVTXNUVUZCUkR0QlFVRlJMRTFCUVVFc1IwRkJSeXhGUVVGRmQwNHNSMEZCWWp0QlFVRnJRaXhOUVVGQkxFbEJRVWtzUlVGQlJYUmpMRWxCUVhoQ08wRkJRVGhDTEUxQlFVRXNUMEZCVHp0QlFVRnlReXhOUVZwR0xFTkJSSEZETzBGQlFVRXNSMEZCZEVNc1EwRkdTQ3hEUVVSR08wRkJjVUpFTzBGQlJVUnRaaXhWUVVGVkxFTkJRVU5vVUN4VFFVRllMRWRCUVhWQ08wRkJRM0pDYVZBc1JVRkJRVUVzWVVGQllTeEZRVUZGYmxFc1UwRkJVeXhEUVVGRGMxRXNUMEZCVml4RFFVTmlkRkVzVTBGQlV5eERRVUZEYjBJc1MwRkJWaXhEUVVGblFqdEJRVU5rY2xFc1NVRkJRVUVzU1VGQlNTeEZRVUZGYVZBc1UwRkJVeXhEUVVGRFVTeE5RVUZXTEVOQlFXbENjVTBzVlVGRVZEdEJRVVZrVVN4SlFVRkJRU3hIUVVGSExFVkJRVVZ5VGl4VFFVRlRMRU5CUVVOUk8wRkJSa1FzUjBGQmFFSXNRMEZFWVN4RlFVdGljVTBzVlVGT2JVSTdRVUZQY2tKdVpDeEZRVUZCUVN4SlFVRkpMRVZCUVVWelVTeFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eEpRVUZFTEVWQlFVOHNTVUZCVUN4RlFVRmhMRXRCUVdJc1EwRkJhRUk3UVVGUVpTeERRVUYyUWpzN096dEJRMmhEWlN4VFFVRlRjMUVzUzBGQlZDeERRVUZsT1dkQ0xFdEJRV1lzUlVGQk5rSTdRVUZCUVN4M1FrRkRTa0VzUzBGRVNTeERRVU5zUTNGUExGRkJSR3RETzBGQlFVRXNUVUZEYkVOQkxGRkJSR3RETEdkRFFVTjJRaXhSUVVSMVFqdEJRVUZCTEUxQlEySXdVeXhKUVVSaExFZEJRMG92WjBJc1MwRkVTU3hEUVVOaUsyZENMRWxCUkdFN1FVRkhNVU1zVFVGQlRYQkZMRVZCUVVVc1IwRkJSekJETEZWQlFVVXNRMEZCUTJwblFpeFJRVUZOTEVOQlFVTXdhRUlzUzBGQlVpeEZRVUZsTVdoQ0xGRkJRVTBzUTBGQlEybFFMRkZCUVVRc1EwRkJja0lzUlVGQmFVTndSU3hOUVVGTkxFTkJRVU5ETEUxQlFYaERMRU5CUVdJN1FVRkZRU3h6UWtGQlQydEhPMEZCUVUwc1NVRkJRU3hUUVVGVExFVkJRVVYxVFR0QlFVRnFRaXhMUVVGelFtOUZMRWxCUVhSQ0xFTkJRVkE3UVVGRFJEdEJRVVZFUkN4TFFVRkxMRU5CUVVOeVVDeFRRVUZPTEVkQlFXdENPMEZCUTJoQ2NFUXNSVUZCUVVFc1VVRkJVU3hGUVVGRmEwTXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNVVUZCUkN4RlFVRlhMRXRCUVZnc1EwRkJhRUlzUTBGRVRUdEJRVVZvUW5WUkxFVkJRVUZCTEVsQlFVa3NSVUZCUlhoUkxGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTzBGQlJsQXNRMEZCYkVJN096czdPenRCUTFoQkxFbEJRVTAwUkN4VlFVRjFReXhIUVVGSE8wRkJRemxEYkdNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVOQlJEQkRPMEZCUlRsRFF5eEZRVUZCUVN4RlFVRkZMRVZCUVVVc1EwRkdNRU03UVVGSE9VTkRMRVZCUVVGQkxFVkJRVVVzUlVGQlJUdEJRVWd3UXl4RFFVRm9SRHRCUVcxRFFTeEJRVUZsTEZOQlFWTnBZeXhKUVVGVUxFOUJWVXc3UVVGQlFTeDNRa0ZVVWtNc1MwRlRVVHRCUVVGQkxFMUJWRkpCTEV0QlUxRXNNa0pCVkVFc1RVRlRRVHRCUVVGQkxFMUJVbEp3VWl4UlFWRlJMRkZCVWxKQkxGRkJVVkU3UVVGQlFTeDNRa0ZRVWk5R0xFdEJUMUU3UVVGQlFTeE5RVkJTUVN4TFFVOVJMREpDUVZCQkxGVkJUMEU3UVVGQlFTeDVRa0ZPVWpKVExFMUJUVkU3UVVGQlFTeE5RVTVTUVN4TlFVMVJMRFJDUVU1RExFdEJUVVE3UVVGQlFTeDVRa0ZNVW5sRkxFMUJTMUU3UVVGQlFTeE5RVXhTUVN4TlFVdFJMRFJDUVV4RExFdEJTMFE3UVVGQlFTd3lRa0ZLVW5wVUxGRkJTVkU3UVVGQlFTeE5RVXBTUVN4UlFVbFJMRGhDUVVwSExGZEJTVWc3UVVGQlFTeDFRa0ZJVW5wT0xFbEJSMUU3UVVGQlFTeE5RVWhTUVN4SlFVZFJMREJDUVVoRUxFbEJSME03UVVGQlFTd3lRa0ZHVW0xb1FpeFJRVVZSTzBGQlFVRXNUVUZHVWtFc1VVRkZVU3c0UWtGR1J5eExRVVZJTzBGQlFVRXNlVUpCUkZKRExFMUJRMUU3UVVGQlFTeE5RVVJTUVN4TlFVTlJMRFJDUVVSRExGRkJRMFE3UVVGRFVpeE5RVUZOZEdkQ0xFdEJRVXNzUjBGQlIybG5RaXhWUVVGVkxFTkJRVU12WjBJc1NVRkJSQ3hEUVVGNFFqdEJRVVZCTEUxQlFVMHdZeXhGUVVGRkxFZEJRVWN3UXl4VlFVRkZMRU5CUTFocVowSXNVVUZCVFN4RFFVRkRObWhDTEVsQlJFa3NSVUZGV0Rkb1FpeFJRVUZOTEcxQ1FVRlpNa0lzUzBGQldpeEZRVVpMTEVWQlIxaG5TaXhMUVVGTExFdEJRVXNzVFVGQlZpeEpRVUZ2UWtVc1RVRkJUU3hEUVVGRFJDeEpRVWhvUWl4RlFVbFlSQ3hMUVVGTExFdEJRVXNzVlVGQlZpeEpRVUYzUWtVc1RVRkJUU3hEUVVGRFJTeFJRVXB3UWl4RlFVdFlTaXhMUVVGTExFdEJRVXNzVlVGQlZpeEpRVUYzUWtVc1RVRkJUU3hEUVVGRE5FSXNVVUZNY0VJc1JVRk5XRGxDTEV0QlFVc3NTMEZCU3l4TlFVRldMRWxCUVc5Q1JTeE5RVUZOTEVOQlFVTk5MRWxCVG1oQ0xFVkJUMWhTTEV0QlFVc3NTMEZCU3l4UFFVRldMRWxCUVhGQ1JTeE5RVUZOTEVOQlFVTnJRaXhMUVZCcVFpeEZRVkZZY0VJc1MwRkJTeXhMUVVGTExGZEJRVllzU1VGQmVVSkZMRTFCUVUwc1EwRkJRMWtzVTBGU2NrSXNSVUZUV0dRc1MwRkJTeXhMUVVGTExGRkJRVllzU1VGQmMwSkZMRTFCUVUwc1EwRkJRemhDTEUxQlZHeENMRVZCVlZob1F5eExRVUZMTEV0QlFVc3NWVUZCVml4SlFVRjNRa1VzVFVGQlRTeERRVUZEYzBJc1VVRldjRUlzUlVGWFdIaENMRXRCUVVzc1MwRkJTeXhOUVVGV0xFbEJRVzlDUlN4TlFVRk5MRU5CUVVOdlFpeEpRVmhvUWl4RlFWbFlkRUlzUzBGQlN5eExRVUZMTEU5QlFWWXNTVUZCY1VKRkxFMUJRVTBzUTBGQlExVXNTMEZhYWtJc1JVRmhXRm9zUzBGQlN5eExRVUZMTEZGQlFWWXNTVUZCYzBKRkxFMUJRVTBzUTBGQlEyZENMRTFCWW14Q0xFVkJZMWhzUWl4TFFVRkxMRXRCUVVzc1VVRkJWaXhKUVVGelFrVXNUVUZCVFN4RFFVRkRNRUlzVFVGa2JFSXNSVUZsV0RWQ0xFdEJRVXNzUzBGQlN5eE5RVUZXTEVsQlFXOUNSU3hOUVVGTkxFTkJRVU5KTEVsQlptaENMRVZCWjBKWVRpeExRVUZMTEV0QlFVc3NVVUZCVml4SlFVRnpRa1VzVFVGQlRTeERRVUZEZDBJc1RVRm9RbXhDTEVWQmFVSllNVUlzUzBGQlN5eExRVUZMTEV0QlFWWXNTVUZCYlVKRkxFMUJRVTBzUTBGQlExRXNSMEZxUW1Zc1JVRnJRbGhXTEV0QlFVc3NTMEZCU3l4WlFVRldMRWxCUVRCQ1JTeE5RVUZOTEVOQlFVTm5ReXhWUVd4Q2RFSXNSVUZ0UWxoc1F5eExRVUZMTEV0QlFVc3NUMEZCVml4SlFVRnhRa1VzVFVGQlRTeERRVUZEWXl4TFFXNUNha0lzUlVGdlFsaHRWeXhMUVVGTExFdEJRVXNzVVVGQlZpeEpRVUZ6UW5SQ0xGVkJRVlVzUTBGQlF6QkNMRmRCY0VKMFFpeEZRWEZDV0Vvc1MwRkJTeXhMUVVGTExGTkJRVllzU1VGQmRVSjBRaXhWUVVGVkxFTkJRVU15UWl4WlFYSkNka0lzUlVGelFsaE1MRXRCUVVzc1MwRkJTeXhOUVVGV0xFbEJRVzlDZEVJc1ZVRkJWU3hEUVVGRE5FSXNVMEYwUW5CQ0xFVkJkVUpZVGl4TFFVRkxMRXRCUVVzc1QwRkJWaXhKUVVGeFFuUkNMRlZCUVZVc1EwRkJRelpDTEZWQmRrSnlRaXhGUVhkQ1dDOVVMRkZCUVZFc1MwRkJTeXhYUVVGaUxFbEJRVFJDYTFNc1ZVRkJWU3hEUVVGRE9FSXNVMEY0UWpWQ0xFVkJlVUpZVUN4TlFVRk5MRWxCUVVsMlFpeFZRVUZWTEVOQlFVTXJRaXhsUVhwQ1ZpeEZRVEJDV0U0c1RVRkJUU3hMUVVGTExFMUJRVmdzU1VGQmNVSjZRaXhWUVVGVkxFTkJRVU5ITEdOQk1VSnlRaXhGUVRKQ1dITkNMRTFCUVUwc1MwRkJTeXhSUVVGWUxFbEJRWFZDZWtJc1ZVRkJWU3hEUVVGRFowTXNaMEpCTTBKMlFpeEZRVFJDV0ZJc1VVRkJVU3hKUVVGSmVFSXNWVUZCVlN4RFFVRkRkMElzVVVFMVFsb3NRMEZCWWp0QlFUaENRU3hOUVVGTlV5eEhRVUZITEVkQlFVZHVSaXhOUVVGTkxFZEJRVWNzVFVGQlNDeEhRVUZaTEV0QlFUbENPMEZCUlVFc2MwSkJRMFYwVFN4alFVRkRMRWRCUVVRN1FVRkRSU3hKUVVGQkxGTkJRVk1zUlVGQlJYVk5PMEZCUkdJc1MwRkZUM2xGTEZGQlFWRXNTVUZCU1N4UFFVRlBkRklzVVVGQlVDeExRVUZ2UWl4UlFVRm9ReXhIUVVORU8wRkJRVVZuVXl4SlFVRkJRU3hMUVVGTExFVkJRVVZvVXp0QlFVRlVMRWRCUkVNc1IwRkZSQ3hKUVVwT0xFZEJUVWRCTEZGQlRrZ3NRMEZFUmp0QlFWVkVPMEZCUlVSdFVpeEpRVUZKTEVOQlFVTjRVQ3hUUVVGTUxFZEJRV2xDTzBGQlEyWjVVQ3hGUVVGQlFTeExRVUZMTEVWQlFVVXpVU3hUUVVGVExFTkJRVU5ETEV0QlFWWXNRMEZCWjBJc1EwRkJReXhOUVVGRUxFVkJRVk1zVDBGQlZDeEZRVUZyUWl4UlFVRnNRaXhGUVVFMFFpeFRRVUUxUWl4RFFVRm9RaXhEUVVSUk8wRkJSV1pXTEVWQlFVRkJMRkZCUVZFc1JVRkJSVk1zVTBGQlV5eERRVUZEYlVJc1NVRkdURHRCUVVkbU0wZ3NSVUZCUVVFc1MwRkJTeXhGUVVGRmQwY3NVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlEzSkNMRTlCUkhGQ0xFVkJSWEpDTEUxQlJuRkNMRVZCUjNKQ0xFOUJTSEZDTEVWQlNYSkNMRTFCU25GQ0xFVkJTM0pDTEUxQlRIRkNMRVZCVFhKQ0xGVkJUbkZDTEVWQlQzSkNMRkZCVUhGQ0xFVkJVWEpDTEZGQlVuRkNMRVZCVTNKQ0xGVkJWSEZDTEVWQlZYSkNMRkZCVm5GQ0xFVkJWM0pDTEZsQldIRkNMRVZCV1hKQ0xGRkJXbkZDTEVWQllYSkNMRlZCWW5GQ0xFVkJZM0pDTEUxQlpIRkNMRVZCWlhKQ0xGZEJabkZDTEVWQlowSnlRaXhMUVdoQ2NVSXNSVUZwUW5KQ0xFOUJha0p4UWl4RFFVRm9RaXhEUVVoUk8wRkJjMEptYTAwc1JVRkJRVUVzVFVGQlRTeEZRVUZGYmswc1UwRkJVeXhEUVVGRGMwSXNTVUYwUWtnN1FVRjFRbVp6VUN4RlFVRkJRU3hOUVVGTkxFVkJRVVUxVVN4VFFVRlRMRU5CUVVOelFpeEpRWFpDU0R0QlFYZENabTVGTEVWQlFVRkJMRkZCUVZFc1JVRkJSVFpETEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEZGQlFVUXNSVUZCVnl4WFFVRllMRU5CUVdoQ0xFTkJlRUpMTzBGQmVVSm1kbEVzUlVGQlFVRXNTVUZCU1N4RlFVRkZjMUVzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRVU1zU1VGQlJDeEZRVUZQTEVsQlFWQXNSVUZCWVN4SlFVRmlMRU5CUVdoQ0xFTkJla0pUTzBGQk1FSm1ORkVzUlVGQlFVRXNVVUZCVVN4RlFVRkZOMUVzVTBGQlV5eERRVUZEYzBJc1NVRXhRa3c3UVVFeVFtWjNVQ3hGUVVGQlFTeE5RVUZOTEVWQlFVVTVVU3hUUVVGVExFTkJRVU5ETEV0QlFWWXNRMEZCWjBJc1EwRkJReXhOUVVGRUxFVkJRVk1zVVVGQlZDeERRVUZvUWp0QlFUTkNUeXhEUVVGcVFqczdRVU14UmtFc1NVRkJUWFZTTEcxQ1FVRnRRaXhIUVVGSE8wRkJRekZDTDFnc1JVRkJRVUVzU1VGQlNTeEZRVUZGTEU5QlJHOUNPMEZCUlRGQ1R5eEZRVUZCUVN4SlFVRkpMRVZCUVVVc1ZVRkdiMEk3UVVGSE1VSkZMRVZCUVVGQkxFZEJRVWNzUlVGQlJTeFBRVWh4UWp0QlFVa3hRblZZTEVWQlFVRkJMRmRCUVZjc1JVRkJSU3hQUVVwaE8wRkJTekZDYWxnc1JVRkJRVUVzUzBGQlN5eEZRVUZGTzBGQlRHMUNMRU5CUVRWQ08wRkJVVUVzU1VGQlRXdFlMR3RDUVVGclFpeEhRVUZITzBGQlEzcENibVFzUlVGQlFVRXNSVUZCUlN4RlFVRkZMRVZCUkhGQ08wRkJSWHBDUXl4RlFVRkJRU3hGUVVGRkxFVkJRVVVzUlVGR2NVSTdRVUZIZWtKRExFVkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVaHhRaXhEUVVFelFqdEJRWFZDUVN4QlFVRmxMRk5CUVZOclpDeE5RVUZVTEVOQlFXZENiR2xDTEV0QlFXaENMRVZCUVRoQ08wRkJRVUU3TzBGQlFVRXNUVUZGZWtOdGFVSXNjVUpCUm5sRExFZEJaMEoyUTI1cFFpeExRV2hDZFVNc1EwRkZla050YVVJc2NVSkJSbmxETzBGQlFVRXNUVUZIZWtORExIRkNRVWg1UXl4SFFXZENka053YVVJc1MwRm9RblZETEVOQlIzcERiMmxDTEhGQ1FVaDVRenRCUVVGQkxFMUJTWHBETjBZc2EwSkJTbmxETEVkQlowSjJRM1pqTEV0QmFFSjFReXhEUVVsNlEzVmpMR3RDUVVwNVF6dEJRVUZCTEhGQ1FXZENka04yWXl4TFFXaENkVU1zUTBGTGVrTXJTaXhMUVV4NVF6dEJRVUZCTEUxQlMzcERRU3hMUVV4NVF5dzJRa0ZMYWtNc1RVRk1hVU03UVVGQlFTeDNRa0ZuUW5aREwwb3NTMEZvUW5WRExFTkJUWHBEY1dsQ0xGRkJUbmxETzBGQlFVRXNUVUZOZWtOQkxGRkJUbmxETEdkRFFVMDVRaXhMUVU0NFFqdEJRVUZCTEUxQlQzcERReXhQUVZCNVF5eEhRV2RDZGtOMGFVSXNTMEZvUW5WRExFTkJUM3BEYzJsQ0xFOUJVSGxETzBGQlFVRXNjMEpCWjBKMlEzUnBRaXhMUVdoQ2RVTXNRMEZSZWtNd1l5eE5RVko1UXp0QlFVRkJMRTFCVVhwRFFTeE5RVko1UXl3NFFrRlJhRU1zUzBGU1owTTdRVUZCUVN4TlFWTjZRM0JpTEVsQlZIbERMRWRCWjBKMlEzUkNMRXRCYUVKMVF5eERRVk42UTNOQ0xFbEJWSGxETzBGQlFVRXNUVUZWZWtOcGFFSXNVVUZXZVVNc1IwRm5RblpEZG1sQ0xFdEJhRUoxUXl4RFFWVjZRM1ZwUWl4UFFWWjVRenRCUVVGQkxIZENRV2RDZGtOMmFVSXNTMEZvUW5WRExFTkJWM3BEZDJsQ0xGRkJXSGxETzBGQlFVRXNUVUZYZWtOQkxGRkJXSGxETEdkRFFWYzVRaXhMUVZnNFFqdEJRVUZCTEc5Q1FXZENka040YVVJc1MwRm9RblZETEVOQldYcERReXhKUVZwNVF6dEJRVUZCTEUxQldYcERRU3hKUVZwNVF5dzBRa0ZaYkVNc1NVRmFhME03UVVGQlFTeE5RV0Y2UXpoblFpeEpRV0o1UXl4SFFXZENka012WjBJc1MwRm9RblZETEVOQllYcERLMmRDTEVsQllubERPMEZCUVVFc1RVRmpPVUl3UWl4aFFXUTRRaXhIUVdkQ2RrTjZhVUlzUzBGb1FuVkRMRU5CWTNwRE1HbENMRk5CWkhsRE8wRkJRVUVzYjBKQlowSjJRekZwUWl4TFFXaENkVU1zUTBGbGVrTXlhVUlzU1VGbWVVTTdRVUZCUVN4TlFXVjZRMEVzU1VGbWVVTXNORUpCWld4RExGRkJabXRETzBGQmEwSXpReXhOUVVGTlF5eFBRVUZQTEVkQlFVZG9SeXhWUVVGVkxFTkJRVU40WkN4UlFVRk5MRU5CUVVONWFrSXNUVUZCVWl4clJFRkRka0o2YWtJc1VVRkJUU3hEUVVGRE1FWXNSVUZFWjBJc1JVRkRXRGRGTEVsQlFVa3NTMEZCU3l4SlFVUkZMR2REUVVWMlFtSXNVVUZCVFN4RFFVRkRNa1lzUlVGR1owSXNSVUZGV0RsRkxFbEJRVWtzUzBGQlN5eEpRVVpGTEdkRFFVZDJRbUlzVVVGQlRTeERRVUZETkVZc1JVRklaMElzUlVGSFdDOUZMRWxCUVVrc1MwRkJTeXhKUVVoRkxHZERRVWwyUW1Jc1VVRkJUU3hEUVVGRGVVc3NTMEZLWjBJc1JVRkpVa1VzUzBGQlN5eExRVUZMTEdGQlNrWXNaME5CUzNaQ00wc3NVVUZCVFN4RFFVRkRNa3NzUzBGQlJDeERRVXhwUWl4RlFVdFFMRU5CUVVOeldTeFJRVUZFTEVsQlFXRXNRMEZCUTBjc1VVRk1VQ3huUTBGTmRrSndha0lzVVVGQlRTeERRVUZEYjJwQ0xGRkJUbWRDTEVWQlRVd3NRMEZCUTBnc1VVRkJSQ3hKUVVGaFJ5eFJRVTVTTEdkRFFVOTJRbkJxUWl4UlFVRk5MRU5CUVVOcGFrSXNVVUZRWjBJc1JVRlBURUVzVVVGUVN5eG5RMEZSZGtKcWFrSXNVVUZCVFN4RFFVRkRNR3BDTEU5QlVtZENMRVZCVVU0c1EwRkJRMVFzVVVGU1N5eG5RMEZUZGtKcWFrSXNVVUZCVFN4RFFVRkRjMlFzVFVGVVowSXNSVUZUVUVFc1RVRlVUeXhuUTBGVmRrSjBaQ3hSUVVGTkxFTkJRVU5wUnl4TFFWWm5RaXhGUVZWU0xFTkJRVU54V0N4TlFWWlBMR2RDUVVFeFFqdEJRV0ZCTEUxQlFVMW5SeXhUUVVGVExFZEJRMXBNTEZGQlFWRXNTVUZCU1N4TlFVRmlMRWxCUTBOSExGRkJRVkVzU1VGQlNTeFBRVVJpTEVsQlJVRkRMR0ZCUmtFc1NVRkhRVllzYlVKQlFXMUNMRU5CUVVOb1dTeExRVUZFTEVOQlNuSkNPMEZCVFVFc1RVRkJUV2RhTEZWQlFWVXNaMEpCUTJSdVZDdzJRa0ZCUXl4SlFVRkVPMEZCUVUwc1NVRkJRU3hMUVVGTExFVkJRVU1zVVVGQldqdEJRVUZ4UWl4SlFVRkJMRXRCUVVzc1JVRkJSVGhUTEZOQlFUVkNPMEZCUVhWRExFbEJRVUVzVVVGQlVTeEZRVUZETEZGQlFXaEVPMEZCUVhsRUxFbEJRVUVzVFVGQlRTeEZRVUZETzBGQlFXaEZMRXRCUTBjelFpeEpRVVJJTEVOQlJFWTdRVUZOUVRzN1FVRkRRU3h6UWtGRFJXNVNPMEZCUTBVc2NVSkJRV1YxVXl4eFFrRkVha0k3UVVGRlJTeHhRa0ZCWlVNc2NVSkJSbXBDTzBGQlIwVXNhMEpCUVZrM1JpeHJRa0ZJWkR0QlFVbEZMRWxCUVVFc1UwRkJVeXhGUVVGRmNVY3NUMEZLWWp0QlFVdEZMRWxCUVVFc1VVRkJVU3hGUVVGRlVDeFJRVXhhTzBGQlRVVXNTVUZCUVN4SlFVRkpMRVZCUVVVdlowSXNTVUZPVWp0QlFVOUZMRWxCUVVFc1QwRkJUeXhGUVVGRkxHbENRVUZCTUdoQ0xFdEJRVXM3UVVGQlFTeGhRVUZKVkN4UlFVRlBMRWxCUVVsQkxGRkJRVThzUTBGQlF6dEJRVUZGVXl4UlFVRkJRU3hMUVVGTExFVkJRVXhCTzBGQlFVWXNUMEZCUkN4RFFVRjBRanRCUVVGQkxFdEJVR2hDTzBGQlVVVXNTVUZCUVN4SlFVRkpMRVZCUVVWTU8wRkJVbElzUzBGVlIwd3NUMEZCVHl4blFrRkRUakZUTERaQ1FVRkRMRWRCUVVRN1FVRkJTeXhKUVVGQkxGVkJRVlVzUlVGQlF5eFJRVUZvUWp0QlFVRjVRaXhKUVVGQkxFOUJRVThzUlVGQlF6dEJRVUZxUXl4TFFVTkhiVlFzVlVGRVNDeGxRVWRGYmxRc05rSkJRVU1zUjBGQlJEdEJRVUZMTEVsQlFVRXNUMEZCVHl4RlFVRkRMR0ZCUVdJN1FVRkJNa0lzU1VGQlFTeEpRVUZKTEVWQlFVTXNUVUZCYUVNN1FVRkJkVU1zU1VGQlFTeFhRVUZYTEVWQlFVVTdRVUZCY0VRc2EwSkJRMFZCTERaQ1FVRkRMRWxCUVVRN1FVRkRSU3hKUVVGQkxHdENRVUZyUWl4RlFVRkRMRVZCUkhKQ08wRkJSVVVzU1VGQlFTeExRVUZMTEVWQlFVVTRVeXhUUVVaVU8wRkJSMFVzU1VGQlFTeEpRVUZKTEVWQlFVVktMRTlCU0ZJN1FVRkpSU3hKUVVGQkxFbEJRVWtzUlVGQlJVd3NhMEpCUVd0Q0xFTkJRVU5vYVVJc1NVRkJSRHRCUVVveFFpeEpRVVJHTEVOQlNFWXNRMEZFVFN4SFFXTk9PR2xDTEZWQmVFSktMRU5CUkVZN1FVRTJRa0U3UVVGRFJEdEJRVVZFWWl4TlFVRk5MRU5CUVVONlVTeFRRVUZRTEVkQlFXMUNPMEZCUTJwQ01GRXNSVUZCUVVFc2NVSkJRWEZDTEVWQlFVVTFVaXhUUVVGVExFTkJRVU56UWl4SlFVUm9RanRCUVVWcVFuVlJMRVZCUVVGQkxIRkNRVUZ4UWl4RlFVRkZOMUlzVTBGQlV5eERRVUZEYzBJc1NVRkdhRUk3UVVGSGFrSXdTeXhGUVVGQlFTeHJRa0ZCYTBJc1JVRkJSV2hOTEZOQlFWTXNRMEZCUTFFc1RVRklZanRCUVVscVFtaElMRVZCUVVGQkxFdEJRVXNzUlVGQlJYZEhMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRTFCUVVRc1JVRkJVeXhOUVVGVUxFVkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xHRkJRWGhDTEVWQlFYVkRMRTlCUVhaRExFTkJRV2hDTEVOQlNsVTdRVUZMYWtJMlVpeEZRVUZCUVN4UlFVRlJMRVZCUVVVNVVpeFRRVUZUTEVOQlFVTnpRaXhKUVV4SU8wRkJUV3BDZVZFc1JVRkJRVUVzVDBGQlR5eEZRVUZGTDFJc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENjRkVzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrcllpeExRVUZhTEVOQlFXaENMRU5CVGxFN1FVRlBha0pOTEVWQlFVRkJMRTFCUVUwc1JVRkJSVzVOTEZOQlFWTXNRMEZCUTNOQ0xFbEJVRVE3UVVGUmFrSjJVU3hGUVVGQlFTeEpRVUZKTEVWQlFVVnBVQ3hUUVVGVExFTkJRVU5STEUxQlVrTTdRVUZUYWtKM1VpeEZRVUZCUVN4UFFVRlBMRVZCUVVWb1V5eFRRVUZUTEVOQlFVTjVUeXhKUVZSR08wRkJWV3BDZDBRc1JVRkJRVUVzVVVGQlVTeEZRVUZGYWxNc1UwRkJVeXhEUVVGRGMwSXNTVUZXU0R0QlFWZHFRalZTTEVWQlFVRkJMRWxCUVVrc1JVRkJSWE5STEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4SlFVRlFMRVZCUVdFc1NVRkJZaXhEUVVGb1FpeERRVmhYTzBGQldXcENkVkVzUlVGQlFVRXNTVUZCU1N4RlFVRkZlRkVzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZhVGp0QlFXRnFRbk5HTEVWQlFVRkJMRk5CUVZNc1JVRkJSVzVUTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEU5QlFVUXNSVUZCVlN4VlFVRldMRVZCUVhOQ0xFMUJRWFJDTEVWQlFUaENMRXRCUVRsQ0xFTkJRV2hDTEVOQllrMDdRVUZqYWtKdFV5eEZRVUZCUVN4SlFVRkpMRVZCUVVWd1V5eFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eFJRVUZFTEVWQlFWY3NVVUZCV0N4RFFVRm9RanRCUVdSWExFTkJRVzVDT3pzN08wRkRka2RsTEZOQlFWTjVVeXhKUVVGVUxFTkJRV05xYWtJc1MwRkJaQ3hGUVVFMFFqdEJRVUZCTEhkQ1FVTllORkFzVVVGQlFTeERRVUZsTEV0QlFXWXNRMEZFVnp0QlFVRkJPMEZCUVVFc1RVRkRiRU56VkN4UFFVUnJRenRCUVVGQkxFMUJRM3BDUXl4VlFVUjVRanM3UVVGQlFTeE5RVVZxUTBNc1RVRkdhVU1zUjBGRmRVSndha0lzUzBGR2RrSXNRMEZGYWtOdmFrSXNUVUZHYVVNN1FVRkJRU3hOUVVWNlFuUlVMRkZCUm5sQ0xFZEJSWFZDT1ZBc1MwRkdka0lzUTBGRmVrSTRVQ3hSUVVaNVFqdEJRVUZCTEUxQlJXWm5UeXhMUVVabExFZEJSWFZDT1dRc1MwRkdka0lzUTBGRlpqaGtMRXRCUm1VN1FVRkJRU3hOUVVWU2RVWXNXVUZHVVN4SFFVVjFRbkpxUWl4TFFVWjJRaXhEUVVWU2NXcENMRmxCUmxFN1FVRkJRU3hOUVVWTlF5eFpRVVpPTEVkQlJYVkNkR3BDTEV0QlJuWkNMRU5CUlUxemFrSXNXVUZHVGpzN1FVRkpla01zVFVGQlRVTXNaMEpCUVdkQ0xFZEJRVWNzVTBGQmJrSkJMR2RDUVVGdFFpeERRVUZEVUN4TFFVRkVMRVZCUVdkRU8wRkJRM1pGUnl4SlFVRkJRU3hWUVVGVkxFTkJRVU1zU1VGQlJDeERRVUZXT3p0QlFVTkJMRkZCUVVsRkxGbEJRVW9zUlVGQmEwSTdRVUZEYUVKQkxFMUJRVUZCTEZsQlFWa3NRMEZCUXp0QlFVRkZUQ3hSUVVGQlFTeExRVUZMTEVWQlFVeEJPMEZCUVVZc1QwRkJSQ3hEUVVGYU8wRkJRMFE3UVVGRFJpeEhRVXhFT3p0QlFVOUJMRTFCUVUxUkxHZENRVUZuUWl4SFFVRkhMRk5CUVc1Q1FTeG5Ra0ZCYlVJc1EwRkJRMUlzUzBGQlJDeEZRVUZuUkR0QlFVTjJSVWNzU1VGQlFVRXNWVUZCVlN4RFFVRkRMRXRCUVVRc1EwRkJWanM3UVVGRFFTeFJRVUZKUnl4WlFVRktMRVZCUVd0Q08wRkJRMmhDUVN4TlFVRkJRU3haUVVGWkxFTkJRVU03UVVGQlJVNHNVVUZCUVVFc1MwRkJTeXhGUVVGTVFUdEJRVUZHTEU5QlFVUXNRMEZCV2p0QlFVTkVPMEZCUTBZc1IwRk1SRHM3UVVGUFFTeE5RVUZOU2l4UFFVRlBMRWRCUVVkb1J5eFZRVUZWTEVOQlFVTjRaQ3hSUVVGTkxFTkJRVU54YTBJc1NVRkJVaXh6UWtGSGRrSnlhMElzVVVGQlRTeERRVUZEYzJ0Q0xFdEJTR2RDTEVWQlIxSk9MRTFCUVUwc1NVRkJTMEVzVFVGQlRTeEpRVUZKTEVsQlFWWXNTVUZCYTBKR0xFOUJTSEpDTEVWQlFURkNPMEZCVFVFc2MwSkJRMFU1VXl4alFVRkRMRWRCUVVRN1FVRkRSU3hKUVVGQkxGbEJRVmtzUlVGQlJXMVVMR2RDUVVSb1FqdEJRVVZGTEVsQlFVRXNXVUZCV1N4RlFVRkZReXhuUWtGR2FFSTdRVUZIUlN4SlFVRkJMRkZCUVZFc1JVRkJRenRCUVVoWUxFdEJTMGN4Uml4TFFVRkxMR2xDUVVGSk1VNHNZMEZCUXl4SFFVRkVPMEZCUVVzc1NVRkJRU3haUVVGWkxFVkJRVVU3UVVGQmJrSXNTMEZCZFVJd1RpeExRVUYyUWl4RFFVeGFMR1ZCVFVVeFRpeGpRVUZETEVkQlFVUXNVVUZCVFU0c1VVRkJUaXhEUVU1R0xHVkJUMFZOTzBGQlFVc3NTVUZCUVN4VFFVRlRMRVZCUVVWM1V6dEJRVUZvUWl4SlFWQkdMRU5CUkVZN1FVRlhSRHRCUVVWRVN5eEpRVUZKTEVOQlFVTjRVaXhUUVVGTUxFZEJRV2xDTzBGQlEyWXlVaXhGUVVGQlFTeE5RVUZOTEVWQlFVVTNVeXhUUVVGVExFTkJRVU56UWl4SlFVUklPMEZCUldZdlFpeEZRVUZCUVN4UlFVRlJMRVZCUVVWVExGTkJRVk1zUTBGQlEyMUNMRWxCUmt3N1FVRkhabTlOTEVWQlFVRkJMRXRCUVVzc1JVRkJSWFpPTEZOQlFWTXNRMEZCUTIxQ0xFbEJTRVk3UVVGSlpqSlNMRVZCUVVGQkxGbEJRVmtzUlVGQlJUbFRMRk5CUVZNc1EwRkJRM2xQTEVsQlNsUTdRVUZMWm5ORkxFVkJRVUZCTEZsQlFWa3NSVUZCUlM5VExGTkJRVk1zUTBGQlEzbFBPMEZCVEZRc1EwRkJha0k3T3pzN096dEJRemREWlN4VFFVRlRNa1VzWjBKQlFWUXNUMEZOV0R0QlFVRkJMRTFCVEVaRExFVkJTMFVzVVVGTVJrRXNSVUZMUlR0QlFVRkJMSFZDUVVwR04wTXNTVUZKUlR0QlFVRkJMRTFCU2taQkxFbEJTVVVzTUVKQlNrc3NSVUZKVER0QlFVTkdMSE5DUVVORk0xRXNZMEZCUXl4SFFVRkVPMEZCUVVzc1NVRkJRU3hUUVVGVExFVkJRVVU3UVVGQmFFSXNhMEpCUTBWQkxHTkJRVU1zU1VGQlJEdEJRVUZOTEVsQlFVRXNTMEZCU3l4RlFVRkRMRXRCUVZvN1FVRkJhMElzU1VGQlFTeEpRVUZKTEVWQlFVTTdRVUZCZGtJc2EwSkJRMFZCTzBGQlFVMHNTVUZCUVN4RlFVRkZMRmxCUVV0M1ZDeEZRVUZNTzBGQlFWSXNTMEZCTUVJM1F5eEpRVUV4UWl4RFFVUkdMRU5CUkVZc1EwRkVSanRCUVU5RU8wRkJSVVEwUXl4blFrRkJaMElzUTBGQlEyeFRMRk5CUVdwQ0xFZEJRVFpDTzBGQlF6TkNiVk1zUlVGQlFVRXNSVUZCUlN4RlFVRkZjbFFzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZFVFR0QlFVVXpRakpFTEVWQlFVRkJMRWxCUVVrc1JVRkJSWGhSTEZOQlFWTXNRMEZCUTFFN1FVRkdWeXhEUVVFM1FqczdPenRCUTJKbExGTkJRVk00VXl4TFFVRlVMRU5CUVdVM2FrSXNTMEZCWml4RlFVRTJRanRCUVVGQkxFMUJRMnhET0ZBc1VVRkVhME1zUjBGRFdqbFFMRXRCUkZrc1EwRkRiRU00VUN4UlFVUnJRenRCUVVGQkxFMUJRM2hDWjFVc1QwRkVkMElzUjBGRFdqbHFRaXhMUVVSWkxFTkJRM2hDT0dwQ0xFOUJSSGRDTzBGQlJ6RkRMSE5DUVVORk1WUTdRVUZCVHl4SlFVRkJMRk5CUVZNc1JVRkJSV2hTTEZGQlFVMHNRMEZCUXpKclFpeExRVUY2UWp0QlFVRm5ReXhKUVVGQkxFOUJRVThzUlVGQlJVUTdRVUZCZWtNc1MwRkRSMmhWTEZGQlJFZ3NRMEZFUmp0QlFVdEVPMEZCUlVRclZDeExRVUZMTEVOQlFVTndVeXhUUVVGT0xFZEJRV3RDTzBGQlEyaENNMElzUlVGQlFVRXNVVUZCVVN4RlFVRkZVeXhUUVVGVExFTkJRVU50UWl4SlFVUktPMEZCUldoQ2IxTXNSVUZCUVVFc1QwRkJUeXhGUVVGRmRsUXNVMEZCVXl4RFFVRkRVU3hOUVVGV0xFTkJRV2xDY1UwN1FVRkdWaXhEUVVGc1FqczdRVU5WWlN4VFFVRlRORWNzVVVGQlZDeFBRVmxNTzBGQlFVRXNNRUpCV0ZKRExFOUJWMUU3UVVGQlFTeE5RVmhTUVN4UFFWZFJMRFpDUVZoRkxFdEJWMFk3UVVGQlFTd3lRa0ZXVWpWQ0xGRkJWVkU3UVVGQlFTeE5RVlpTUVN4UlFWVlJMRGhDUVZaSExFdEJWVWc3UVVGQlFTeE5RVlJTTmtJc1dVRlRVU3hSUVZSU1FTeFpRVk5STzBGQlFVRXNNa0pCVWxKRExGRkJVVkU3UVVGQlFTeE5RVkpTUVN4UlFWRlJMRGhDUVZKSExFdEJVVWc3UVVGQlFTeE5RVkJTVUN4RlFVOVJMRkZCVUZKQkxFVkJUMUU3UVVGQlFTeG5RMEZPVWxFc1lVRk5VVHRCUVVGQkxFMUJUbEpCTEdGQlRWRXNiVU5CVGxFc1MwRk5VanRCUVVGQkxFMUJURkpNTEV0QlMxRXNVVUZNVWtFc1MwRkxVVHRCUVVGQkxFMUJTbEo2YVVJc1NVRkpVU3hSUVVwU1FTeEpRVWxSTzBGQlFVRXNUVUZJVWl0cFFpeFJRVWRSTEZGQlNGSkJMRkZCUjFFN1FVRkJRU3hOUVVaU09VSXNUMEZGVVN4UlFVWlNRU3hQUVVWUk8wRkJRVUVzZFVKQlJGSjBhVUlzU1VGRFVUdEJRVUZCTEUxQlJGSkJMRWxCUTFFc01FSkJSRVFzU1VGRFF6dEJRVU5TTEUxQlFVMXhhMElzV1VGQldTeEhRVUZITVZVc1RVRkJRU3hEUVVGblF5eEpRVUZvUXl4RFFVRnlRanM3UVVGRVVTeDNRa0ZGYzBKQkxGRkJRVUVzUTBGQlpTeExRVUZtTEVOQlJuUkNPMEZCUVVFN1FVRkJRU3hOUVVWRU1sVXNUMEZHUXp0QlFVRkJMRTFCUlZGRExGVkJSbEk3TzBGQlFVRXNlVUpCUjI5Q05WVXNVVUZCUVN4RFFVRmxMRXRCUVdZc1EwRkljRUk3UVVGQlFUdEJRVUZCTEUxQlIwUnpWQ3hQUVVoRE8wRkJRVUVzVFVGSFVYVkNMRkZCU0ZJN08wRkJTMUkzVlN4RlFVRkJRU3hUUVVGQkxFTkJRV2RDTEZsQlFVMDdRVUZEY0VJc1VVRkJTVEJWTEZsQlFWa3NTVUZCU1VFc1dVRkJXU3hEUVVGRFNTeFBRVUZxUXl4RlFVRXdRenRCUVVONFEwb3NUVUZCUVVFc1dVRkJXU3hEUVVGRFNTeFBRVUZpTEVOQlFYRkNUaXhoUVVGeVFpeEhRVUZ4UTBFc1lVRkJja003UVVGRFJEdEJRVU5HTEVkQlNrUXNSVUZKUnl4RFFVRkRRU3hoUVVGRUxFTkJTa2c3TzBGQlRVRXNUVUZCVFU4c1dVRkJXU3hIUVVGSExGTkJRV1pCTEZsQlFXVXNRMEZCUXpOQ0xFdEJRVVFzUlVGQmEwTTdRVUZEY2tRc1VVRkJTWEZDTEZGQlFVb3NSVUZCWXp0QlFVTmFRU3hOUVVGQlFTeFJRVUZSTEVOQlFVTTdRVUZCUlhKQ0xGRkJRVUZCTEV0QlFVc3NSVUZCVEVFc1MwRkJSanRCUVVGVGFVSXNVVUZCUVVFc1QwRkJUeXhGUVVGRmFrSXNTMEZCU3l4RFFVRkRORUlzVFVGQlRpeERRVUZoV0R0QlFVRXZRaXhQUVVGRUxFTkJRVkk3UVVGRFJEdEJRVU5HTEVkQlNrUTdPMEZCVFVFc1RVRkJUVmtzVjBGQlZ5eEhRVUZITEZOQlFXUkJMRmRCUVdNc1EwRkJRemRDTEV0QlFVUXNSVUZCYTBRN1FVRkRjRVVzVVVGQlNWUXNUMEZCU2l4RlFVRmhPMEZCUTFoQkxFMUJRVUZCTEU5QlFVOHNRMEZCUXp0QlFVRkZVeXhSUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUVVZN1FVRkJVMmxDTEZGQlFVRkJMRTlCUVU4c1JVRkJSV3BDTEV0QlFVc3NRMEZCUXpoQ0xHRkJRVTRzUTBGQmIwSmlPMEZCUVhSRExFOUJRVVFzUTBGQlVEdEJRVU5FTzBGQlEwWXNSMEZLUkRzN1FVRk5RU3hOUVVGTll5eFhRVUZYTEVkQlFVY3NVMEZCWkVFc1YwRkJZeXhIUVVGTk8wRkJRM2hDVGl4SlFVRkJRU3hSUVVGUkxFTkJRVU1zUTBGQlEzWkNMRTlCUVVZc1EwRkJVanRCUVVORUxFZEJSa1E3TzBGQlNVRXNUVUZCU1RoQ0xFOUJRVThzUjBGQlJ5OWhMRTFCUVUwc1EwRkJRMlVzVDBGQmNrSTdPMEZCUTBFc1RVRkJTWEZZTEZGQlFVb3NSVUZCWXp0QlFVTmFNa01zU1VGQlFVRXNUMEZCVHl4SFFVRkhMMkVzVFVGQlRTeERRVUZEWVN4WFFVRnFRanRCUVVORUxFZEJSa1FzVFVGRlR5eEpRVUZKYlZvc1QwRkJUeXhKUVVGSlJ5eGhRVUZtTEVWQlFUaENPMEZCUTI1RFdTeEpRVUZCUVN4UFFVRlBMRWRCUVVjdllTeE5RVUZOTEVOQlFVTkhMRlZCUVdwQ08wRkJRMFE3TzBGQlJVUXNUVUZCU1RaaExGZEJRVmNzUjBGQlJ6ZHNRaXhSUVVGTkxFTkJRVU00YkVJc1RVRkJla0k3TzBGQlEwRXNUVUZCU1RkRExGRkJRVW9zUlVGQll6dEJRVU5hTkVNc1NVRkJRVUVzVjBGQlZ5eEhRVUZITjJ4Q0xGRkJRVTBzUTBGQlF5dHNRaXhqUVVGeVFqdEJRVU5FTEVkQlJrUXNUVUZGVHl4SlFVRkpMRU5CUVVNNVF5eFJRVUZFTEV0QlFXTTBRaXhQUVVGUExFbEJRVWxITEdGQlFYcENMRU5CUVVvc1JVRkJOa003UVVGRGJFUmhMRWxCUVVGQkxGZEJRVmNzUjBGQlJ6ZHNRaXhSUVVGTkxFTkJRVU5uYlVJc1kwRkJja0k3UVVGRFJDeEhRVVpOTEUxQlJVRXNTVUZCU1dwQ0xGRkJRVkVzU1VGQlNVUXNXVUZCYUVJc1JVRkJPRUk3UVVGRGJrTmxMRWxCUVVGQkxGZEJRVmNzUjBGQlJ6ZHNRaXhSUVVGTkxFTkJRVU5wYlVJc1YwRkJja0k3UVVGRFJDeEhRVVpOTEUxQlJVRXNTVUZCU1N4RFFVRkRhRVFzVVVGQlJDeEpRVUZoWVN4UFFVRnFRaXhGUVVFd1FqdEJRVU12UWl0Q0xFbEJRVUZCTEZkQlFWY3NSMEZCUnpkc1FpeFJRVUZOTEVOQlFVTnJiVUlzWVVGQmNrSTdRVUZEUkRzN1FVRkZSQ3hOUVVGTlF5eHBRa0ZCYVVJc1IwRkRja0owYkVJc1NVRkJTU3hMUVVGTExFbEJRVlFzUjBGQlowSmlMRkZCUVUwc1EwRkJRMjl0UWl4alFVRjJRaXhIUVVGM1EzQnRRaXhSUVVGTkxFTkJRVU54YlVJc1kwRkVha1E3UVVGSFFTeE5RVUZOUXl4VFFVRlRMRWRCUVVkNmJFSXNTVUZCU1N4TFFVRkxMRWxCUVZRc1IwRkJaMEl3YkVJc1lVRkJZU3hEUVVGRGFHTXNUVUZCT1VJc1IwRkJkVU5uWXl4aFFVRmhMRU5CUVVORExFMUJRWFpGTzBGQlJVRXNjMEpCUTBWNFZpeGpRVUZETEVkQlFVUXNjVUpCUTBWQkxHTkJRVU1zUjBGQlJEdEJRVU5GTEVsQlFVRXNWVUZCVlN4RlFVRkRMRkZCUkdJN1FVRkZSU3hKUVVGQkxFOUJRVThzUlVGQlF5eE5RVVpXTzBGQlIwVXNTVUZCUVN4alFVRmpMRVZCUVVNc1QwRklha0k3UVVGSlJTeEpRVUZCTEZWQlFWVXNSVUZCUlN4RFFVRkRMRU5CU21ZN1FVRkxSU3hKUVVGQkxGZEJRVmNzUlVGQlJTeERRVUZETzBGQlRHaENMR3RDUVU5RlFTeGpRVUZETEV0QlFVUTdRVUZCVHl4SlFVRkJMRTlCUVU4c1JVRkJSWGRVTzBGQlFXaENMR3RDUVVORmVGUXNZMEZCUXl4SFFVRkVPMEZCUVVzc1NVRkJRU3hSUVVGUkxFVkJRVVVzUTBGQlpqdEJRVUZyUWl4SlFVRkJMRkZCUVZFc1JVRkJRenRCUVVFelFpeHJRa0ZEUlVFN1FVRkRSU3hKUVVGQkxFOUJRVThzUlVGQlJUWlVMRTlCUkZnN1FVRkZSU3hKUVVGQkxGTkJRVk1zUlVGQlJYSklMRlZCUVZVc1EwRkJReXRKTEdGQlFXRXNRMEZCUTBVc1MwRkJaaXhGUVVGelFrZ3NVMEZCZEVJc2MwSkJRMnhDZEcxQ0xGRkJRVTBzUTBGQlF6QnRRaXhaUVVSWExFVkJRMGtzUTBGQlEzcEVMRkZCUkV3c1JVRkdka0k3UVVGTFJTeEpRVUZCTEZGQlFWRXNSVUZCUlVFc1VVRk1XanRCUVUxRkxFbEJRVUVzUlVGQlJTeEZRVUZGZFVJc1JVRk9UanRCUVU5RkxFbEJRVUVzU1VGQlNTeEZRVUZGZEdsQ0xFbEJVRkk3UVVGUlJTeEpRVUZCTEUxQlFVMHNSVUZCUlR0QlFVRkJMR0ZCUVUxcmFrSXNWVUZCVlN4RFFVRkRMRXRCUVVRc1EwRkJhRUk3UVVGQlFTeExRVkpXTzBGQlUwVXNTVUZCUVN4UlFVRlJMRVZCUVVWSExGbEJWRm83UVVGVlJTeEpRVUZCTEU5QlFVOHNSVUZCUlVVc1YwRldXRHRCUVZkRkxFbEJRVUVzVDBGQlR5eEZRVUZGTzBGQlFVRXNZVUZCVFV3c1ZVRkJWU3hEUVVGRExFbEJRVVFzUTBGQmFFSTdRVUZCUVN4TFFWaFlPMEZCV1VVc1NVRkJRU3haUVVGWkxFVkJRVVZQTEZkQldtaENPMEZCWVVVc1NVRkJRU3haUVVGWkxFVkJRVVZCTEZkQlltaENPMEZCWTBVc1NVRkJRU3hIUVVGSExFVkJRVVZVTEZsQlpGQTdRVUZsUlN4SlFVRkJMRWxCUVVrc1JVRkJRenRCUVdaUUxFbEJSRVlzWlVGclFrVnNWVHRCUVVORkxFbEJRVUVzVTBGQlV5eEZRVUZGZDAwc1ZVRkJWU3hEUVVOdVFtOUpMRTlCUkcxQ0xFVkJSVzVDUXl4WFFVWnRRaXhGUVVkdVFrMHNhVUpCU0cxQ0xFVkJTVzVDUnl4VFFVcHRRaXhGUVV0dVFuUnRRaXhSUVVGTkxFTkJRVU5uVml4TFFVeFpMSE5DUVU5b1FtaFdMRkZCUVUwc1EwRkJRekp0UWl4WlFWQlRMRVZCVDAxNFFpeFBRVkJPTzBGQlJIWkNMRXRCV1Vjc1EwRkJRMDRzVDBGQlR5eEpRVUZKUnl4aFFVRmFMR3RDUVVORGFGVXNZMEZCUXl4SlFVRkVPMEZCUTBVc1NVRkJRU3hyUWtGQmEwSXNSVUZCUXl4RlFVUnlRanRCUVVWRkxFbEJRVUVzUzBGQlN5eEZRVUZETEU5QlJsSTdRVUZIUlN4SlFVRkJMRWxCUVVrc1JVRkJSV2RWTEdGQlFXRXNSMEZCUnl4TlFVRklMRWRCUVZrc1QwRklha003UVVGSlJTeEpRVUZCTEVsQlFVa3NSVUZCUlc1clFpeEpRVUZKTEV0QlFVc3NTVUZCVkN4SFFVRm5RaXhEUVVGb1FpeEhRVUZ2UWp0QlFVbzFRaXhKUVdKS0xFTkJiRUpHTEVOQlJFWXNRMEZRUml4RlFXdEVSemhxUWl4TFFVRkxMR2xDUVVOS00xUXNZMEZCUXl4TFFVRkVPMEZCUVU4c1NVRkJRU3hQUVVGUExFVkJRVVYzVkR0QlFVRm9RaXhyUWtGRFJYaFVMR05CUVVNc1IwRkJSRHRCUVVGTExFbEJRVUVzVVVGQlVTeEZRVUZGTzBGQlFXWXNhMEpCUTBWQkxHTkJRVU1zU1VGQlJEdEJRVU5GTEVsQlFVRXNTMEZCU3l4RlFVRkZhVk1zVVVGQlVTeEhRVUZITEUxQlFVZ3NSMEZCV1c1R0xGTkJSRGRDTzBGQlJVVXNTVUZCUVN4SlFVRkpMRVZCUVVWcVpDeEpRVUZKTEV0QlFVc3NTVUZCVkN4SFFVRm5RaXhKUVVGb1FpeEhRVUYxUWp0QlFVWXZRaXhMUVVsSE9HcENMRXRCU2tnc1EwRkVSaXhEUVVSR0xFTkJia1JLTEVOQlJFWXNSVUZuUlVkSExGbEJRVmtzYVVKQlExZzVWQ3hqUVVGRExFZEJRVVE3UVVGQlN5eEpRVUZCTEZOQlFWTXNSVUZCUlR0QlFVRm9RaXhyUWtGRFJVRXNZMEZCUXl4SlFVRkVPMEZCUVUwc1NVRkJRU3hMUVVGTExFVkJRVU1zUzBGQldqdEJRVUZyUWl4SlFVRkJMRWxCUVVrc1JVRkJRenRCUVVGMlFpeHJRa0ZEUlVFc1kwRkJReXhuUWtGQlJEdEJRVUZyUWl4SlFVRkJMRVZCUVVVc1JVRkJSWGRVTEVWQlFYUkNPMEZCUVRCQ0xFbEJRVUVzU1VGQlNTeEZRVUZGVFR0QlFVRm9ReXhKUVVSR0xFTkJSRVlzUTBGcVJVb3NRMEZFUmp0QlFUQkZSRHRCUVVWRVJpeFJRVUZSTEVOQlFVTjJVeXhUUVVGVUxFZEJRWEZDTzBGQlEyNUNkMU1zUlVGQlFVRXNUMEZCVHl4RlFVRkZNVlFzVTBGQlV5eERRVUZEYzBJc1NVRkVRVHRCUVVWdVFuZFJMRVZCUVVGQkxGRkJRVkVzUlVGQlJUbFNMRk5CUVZNc1EwRkJRM05DTEVsQlJrUTdRVUZIYmtKeFV5eEZRVUZCUVN4WlFVRlpMRVZCUVVVelZDeFRRVUZUTEVOQlFVTlJMRTFCU0V3N1FVRkpia0p2VkN4RlFVRkJRU3hSUVVGUkxFVkJRVVUxVkN4VFFVRlRMRU5CUVVOelFpeEpRVXBFTzBGQlMyNUNLMUlzUlVGQlFVRXNSVUZCUlN4RlFVRkZjbFFzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZNUmp0QlFVMXVRbWRJTEVWQlFVRkJMR0ZCUVdFc1JVRkJSVGRVTEZOQlFWTXNRMEZCUTNOQ0xFbEJUazQ3UVVGUGJrSnJVeXhGUVVGQlFTeExRVUZMTEVWQlFVVjRWQ3hUUVVGVExFTkJRVU5STEUxQlVFVTdRVUZSYmtKNlVDeEZRVUZCUVN4SlFVRkpMRVZCUVVWcFVDeFRRVUZUTEVOQlFVTlJMRTFCVWtjN1FVRlRia0p6VkN4RlFVRkJRU3hSUVVGUkxFVkJRVVU1VkN4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVZST08wRkJWVzVDYlVZc1JVRkJRVUVzVDBGQlR5eEZRVUZGYUZNc1UwRkJVeXhEUVVGRGVVOHNTVUZXUVR0QlFWZHVRaTlsTEVWQlFVRkJMRWxCUVVrc1JVRkJSWE5STEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4SlFVRlFMRU5CUVdoQ08wRkJXR0VzUTBGQmNrSTdPMGxETjBkeFFuZFdPenM3T3pzN096czdPenM3T3paQ1FYZENWanRCUVVGQkxIZENRVU54UkN4TFFVRkxhRzFDTEV0QlJERkVPMEZCUVVFc1ZVRkRRMmx0UWl4SlFVUkVMR1ZCUTBOQkxFbEJSRVE3UVVGQlFTeFZRVU5QYkdVc1VVRkVVQ3hsUVVOUFFTeE5RVVJRTzBGQlFVRXNPRU5CUTJWdFpTeFhRVVJtTzBGQlFVRXNWVUZEWlVFc1YwRkVaaXh6UTBGRE5rSXNRMEZFTjBJN1FVRkJRU3c0UTBGRFowTkRMRmxCUkdoRE8wRkJRVUVzVlVGRFowTkJMRmxCUkdoRExITkRRVU1yUXl4RFFVUXZRenM3UVVGSlVDeFZRVUZOZEZnc1MwRkJTeXhIUVVGSE5VNHNTVUZCU1N4RFFVRkRiV3hDTEVkQlFVd3NUMEZCUVc1c1FpeEpRVUZKTEhGQ1FVRlJPRWNzVVVGQlRTeERRVUZEYWtrc1IwRkJVQ3hEUVVGWExGVkJRVUYxYlVJc1NVRkJTVHRCUVVGQkxHVkJRVWxCTEVsQlFVa3NRMEZCUTJwYUxFbEJRVXdzUjBGQldXbGFMRWxCUVVrc1EwRkJRM2hZTEV0QlFYSkNPMEZCUVVFc1QwRkJaaXhEUVVGU0xFVkJRV3hDTzBGQlEwRXNWVUZCVFdoRExFMUJRVTBzUjBGQlJ6Vk1MRWxCUVVrc1EwRkJRMjFzUWl4SFFVRk1MRTlCUVVGdWJFSXNTVUZCU1N4eFFrRkJVVGhITEZGQlFVMHNRMEZCUTJwSkxFZEJRVkFzUTBGQlZ5eFZRVUZCZFcxQ0xFbEJRVWs3UVVGQlFTeGxRVUZKUVN4SlFVRkpMRU5CUVVNeFdDeEhRVUZNTEVkQlFWY3dXQ3hKUVVGSkxFTkJRVU40V2l4TlFVRndRanRCUVVGQkxFOUJRV1lzUTBGQlVpeEZRVUZ1UWl4RFFVeFBPenRCUVVGQkxIbENRVkZ2UkN4TFFVRkxOMDBzUzBGU2VrUTdRVUZCUVN3clEwRlJRM050UWl4aFFWSkVPMEZCUVVFc1ZVRlJRMEVzWVVGU1JDeHpRMEZSYVVKNldDeExRVkpxUWp0QlFVRkJMR2RFUVZGM1FqQllMR05CVW5oQ08wRkJRVUVzVlVGUmQwSkJMR05CVW5oQ0xIVkRRVkY1UXpGYUxFMUJVbnBETzBGQlYxQTdPMEZCUTBFc1ZVRkJUVEphTEV0QlFVc3NSMEZCUjNwbExGRkJRVTBzUTBGQlF6RkpMRTFCUVZBc1EwRkJZeXhWUVVGRGJWRXNSMEZCUkN4RlFVRk5ia0lzVVVGQlRpeEZRVUZuUW05WkxFZEJRV2hDTEVWQlFYZENPMEZCUTJ4RUxGbEJRMFZ3V1N4UlFVRlJMRU5CUVVOTkxFZEJRVlFzUjBGQlpVNHNVVUZCVVN4RFFVRkRlRUlzVFVGQmVFSXNSMEZCYVVOeFdpeFhRVUZxUXl4SlFVTkJOMWdzVVVGQlVTeERRVUZEVFN4SFFVRlVMRWRCUVdVMFdDeGpRVUZqTEVkQlFVZE1MRmRCUkdoRExFbEJSVUUzV0N4UlFVRlJMRU5CUVVOcVFpeEpRVUZVTEVkQlFXZENhMW9zWVVGQllTeEhRVUZIU0N4WlFVWm9ReXhKUVVkQk9WZ3NVVUZCVVN4RFFVRkRha0lzU1VGQlZDeEhRVUZuUW1sQ0xGRkJRVkVzUTBGQlExRXNTMEZCZWtJc1IwRkJhVU56V0N4WlFVcHVReXhGUVV0Rk8wRkJRMEV6Vnl4VlFVRkJRU3hIUVVGSExFTkJRVU5YTEVsQlFVbzdRVUZCVjNOWExGbEJRVUZCTEVkQlFVY3NSVUZCU0VFN1FVRkJXQ3hoUVVGdFFuQlpMRkZCUVc1Q08wRkJRMFE3TzBGQlEwUXNaVUZCVDIxQ0xFZEJRVkE3UVVGRFJDeFBRVlpoTEVWQlZWZ3NSVUZXVnl4RFFVRmtPMEZCV1VFc01FSkJRMFZaTzBGQlFVc3NVVUZCUVN4VFFVRlRMRVZCUVVWelZ5eE5RVUZaTEVOQlFVTnVXU3hSUVVFM1FqdEJRVUYxUXl4UlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGRlRTeFZRVUZCUVN4TFFVRkxMRVZCUVV4QkxFdEJRVVk3UVVGQlUyaERMRlZCUVVGQkxFMUJRVTBzUlVGQlRrRTdRVUZCVkR0QlFVRTVReXhUUVVOSE1sb3NTMEZCU3l4RFFVRkRNVzFDTEVkQlFVNHNRMEZCVlR0QlFVRkJMRmxCUVVjeWJVSXNSMEZCU0N4UlFVRkhRU3hIUVVGSU8wRkJRVUVzV1VGQlYyeHRRaXhMUVVGWU96dEJRVUZCTERSQ1FVTlVObEE3UVVGQlN5eFZRVUZCTEVkQlFVY3NSVUZCUlhGWExFZEJRVlk3UVVGQlpTeFZRVUZCTEZOQlFWTXNSVUZCUlVNc1RVRkJXU3hEUVVGRGNGa3NVVUZCZGtNN1FVRkJhVVFzVlVGQlFTeExRVUZMTEVWQlFVVXZUanRCUVVGNFJDeDNRa0ZEUlRaUUxHTkJRVU1zU1VGQlJEdEJRVUZOTEZWQlFVRXNSMEZCUnl4RlFVRkZjVmM3UVVGQldDeFZRVVJHTEVOQlJGTTdRVUZCUVN4UFFVRldMRU5CUkVnc1EwRkVSanRCUVZORU96czdPMFZCZWtSeFF6ZFhPenRuUWtGQmJrSnZWeXg1UWtGRFFUdEJRVU5xUWp0QlFVTkJReXhGUVVGQlFTeEpRVUZKTEVWQlFVVXhWaXhUUVVGVExFTkJRVU52Vnl4SFFVWkRPMEZCUjJwQ05XVXNSVUZCUVVFc1RVRkJUU3hGUVVGRmQwa3NVMEZCVXl4RFFVRkRjMUVzVDBGQlZpeERRVU5PZEZFc1UwRkJVeXhEUVVGRGIwSXNTMEZCVml4RFFVRm5RanRCUVVOa2FFUXNTVUZCUVVFc1IwRkJSeXhGUVVGRk5FSXNVMEZCVXl4RFFVRkRUeXhOUVVGV0xFTkJRV2xDYzAwc1ZVRkVVanRCUVVWa2FGRXNTVUZCUVVFc1NVRkJTU3hGUVVGRmJVUXNVMEZCVXl4RFFVRkRUeXhOUVVGV0xFTkJRV2xDYzAwc1ZVRkdWRHRCUVVka2RrOHNTVUZCUVVFc1MwRkJTeXhGUVVGRk1FSXNVMEZCVXl4RFFVRkRUeXhOUVVGV0xFTkJRV2xDYzAwc1ZVRklWanRCUVVsa2RsRXNTVUZCUVVFc1RVRkJUU3hGUVVGRk1FUXNVMEZCVXl4RFFVRkRUeXhOUVVGV0xFTkJRV2xDYzAwN1FVRktXQ3hIUVVGb1FpeEZRVXRIUVN4VlFVNUhMRU5CU0ZNN1FVRlhha0p0U2l4RlFVRkJRU3hqUVVGakxFVkJRVVZvVnl4VFFVRlRMRU5CUVVOUExFMUJXRlE3UVVGWmFrSnhWaXhGUVVGQlFTeFpRVUZaTEVWQlFVVTFWaXhUUVVGVExFTkJRVU5QTEUxQldsQTdRVUZoYWtKdlZpeEZRVUZCUVN4WFFVRlhMRVZCUVVVelZpeFRRVUZUTEVOQlFVTlBMRTFCWWs0N1FVRmpha0ozVml4RlFVRkJRU3hoUVVGaExFVkJRVVV2Vml4VFFVRlRMRU5CUVVOUE8wRkJaRkk3TzJkQ1FVUkJhMVlzTkVKQmEwSkhPMEZCUTNCQ2FtVXNSVUZCUVVFc1RVRkJUU3hGUVVGRkxFVkJSRms3UVVGRmNFSnZaU3hGUVVGQlFTeFpRVUZaTEVWQlFVVXNRMEZHVFR0QlFVZHdRa1FzUlVGQlFVRXNWMEZCVnl4RlFVRkZPMEZCU0U4N08wRkRkRVY0UWpzN096czdPenM3T3pzN08wRkJXVUVzU1VGQlRWVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUTBGQldEdEJRVU5CTEVsQlFVMURMRWxCUVVrc1IwRkJSeXhEUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTEVOQlFXSTdRVUZEUVN4SlFVRk5ReXhIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZFTEVWQlFVMHNSMEZCVGl4RFFVRmFPenRCUVVOQkxFbEJRVTFETEZsQlFWa3NSMEZCUnl4VFFVRm1RU3haUVVGbExFTkJRVU5ETEZsQlFVUXNSVUZCT0VJN1FVRkRha1FzVlVGQlVVRXNXVUZCVWp0QlFVTkZMRk5CUVVzc1EwRkJURHRCUVVORkxHRkJRVThzUTBGQlF5eERRVUZEUml4SFFVRkVMRU5CUVVRc1JVRkJVU3hEUVVGRFJpeEZRVUZFTEVOQlFWSXNSVUZCWXl4RFFVRkRReXhKUVVGRUxFTkJRV1FzUTBGQlVEczdRVUZEUml4VFFVRkxMRU5CUVV3N1FVRkRSU3hoUVVGUExFTkJRMHdzUTBGQlEwUXNSVUZCUkN4RlFVRkxSU3hIUVVGTUxFTkJSRXNzUlVGRlRDeERRVUZEUkN4SlFVRkVMRVZCUVU5RExFZEJRVkFzUTBGR1N5eEZRVWRNTEVOQlFVTkJMRWRCUVVRc1JVRkJUVVlzUlVGQlRpeERRVWhMTEVWQlNVd3NRMEZCUTBVc1IwRkJSQ3hGUVVGTlJDeEpRVUZPTEVOQlNrc3NRMEZCVURzN1FVRk5SaXhUUVVGTExFTkJRVXc3UVVGRFJTeGhRVUZQTEVOQlEwd3NRMEZCUTBNc1IwRkJSQ3hGUVVGTlJpeEZRVUZPTEVWQlFWVkZMRWRCUVZZc1JVRkJaVUVzUjBGQlppeERRVVJMTEVWQlJVd3NRMEZCUTBFc1IwRkJSQ3hGUVVGTlJDeEpRVUZPTEVWQlFWbERMRWRCUVZvc1JVRkJhVUpCTEVkQlFXcENMRU5CUmtzc1JVRkhUQ3hEUVVGRFFTeEhRVUZFTEVWQlFVMUJMRWRCUVU0c1JVRkJWMFlzUlVGQldDeEZRVUZsUlN4SFFVRm1MRU5CU0Vzc1JVRkpUQ3hEUVVGRFFTeEhRVUZFTEVWQlFVMUJMRWRCUVU0c1JVRkJWMFFzU1VGQldDeEZRVUZwUWtNc1IwRkJha0lzUTBGS1N5eEZRVXRNTEVOQlFVTkJMRWRCUVVRc1JVRkJUVVlzUlVGQlRpeEZRVUZWUlN4SFFVRldMRVZCUVdWRUxFbEJRV1lzUTBGTVN5eEZRVTFNTEVOQlFVTkRMRWRCUVVRc1JVRkJUVVFzU1VGQlRpeEZRVUZaUXl4SFFVRmFMRVZCUVdsQ1JpeEZRVUZxUWl4RFFVNUxMRU5CUVZBN08wRkJVVVlzVTBGQlN5eERRVUZNTzBGQlEwRTdRVUZEUlN4aFFVRlBMRU5CUTB3c1EwRkJRMFVzUjBGQlJDeEZRVUZOUml4RlFVRk9MRVZCUVZWRkxFZEJRVllzUTBGRVN5eEZRVVZNTEVOQlFVTkJMRWRCUVVRc1JVRkJUVVFzU1VGQlRpeEZRVUZaUXl4SFFVRmFMRU5CUmtzc1JVRkhUQ3hEUVVGRFFTeEhRVUZFTEVWQlFVMUJMRWRCUVU0c1JVRkJWMFlzUlVGQldDeERRVWhMTEVWQlNVd3NRMEZCUTBVc1IwRkJSQ3hGUVVGTlFTeEhRVUZPTEVWQlFWZEVMRWxCUVZnc1EwRktTeXhEUVVGUU8wRkJja0pLTzBGQk5FSkVMRU5CTjBKRU96dEJRU3RDUVN4SlFVRk5TU3hWUVVGVkxFZEJRVWNzVTBGQllrRXNWVUZCWVN4RFFVRkRReXhOUVVGRUxFVkJRVk5ETEZOQlFWUTdRVUZCUVN4VFFVTnFRa0VzVTBGQlV5eERRVUZEY201Q0xFZEJRVllzUTBGQll6dEJRVUZCTEZGQlFVYzJUeXhIUVVGSUxGRkJRVWRCTEVkQlFVZzdRVUZCUVN4UlFVRlJka0lzU1VGQlVpeFJRVUZSUVN4SlFVRlNPMEZCUVVFc1VVRkJZM2xDTEV0QlFXUXNVVUZCWTBFc1MwRkJaRHRCUVVGQkxGRkJRWEZDYUVNc1RVRkJja0lzVVVGQmNVSkJMRTFCUVhKQ08wRkJRVUVzVjBGQmJVTTdRVUZETDBNNFFpeE5RVUZCUVN4SFFVRkhMRVZCUVVoQkxFZEJSQ3RETzBGQlJTOURka0lzVFVGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVVZclF6dEJRVWN2UTNsQ0xFMUJRVUZCTEV0QlFVc3NSVUZCUlVFc1MwRkJTeXhIUVVGSGNWa3NUVUZJWjBNN1FVRkpMME55WVN4TlFVRkJRU3hOUVVGTkxFVkJRVVZCTEUxQlFVMHNSMEZCUjNGaE8wRkJTamhDTEV0QlFXNURPMEZCUVVFc1IwRkJaQ3hEUVVScFFqdEJRVUZCTEVOQlFXNUNPenRCUVZGQkxFbEJRVTFGTEUxQlFVMHNSMEZCUnl4VFFVRlVRU3hOUVVGVExFTkJRVUZvV1N4SFFVRkhPMEZCUVVFc1UwRkRhRUpCTEVkQlFVY3NRMEZCUXk5UUxFMUJRVW9zUTBGQlZ5eFZRVUZEWjI5Q0xGRkJRVVFzUlVGQlYyaENMRWxCUVZnc1JVRkJhVUpwUWl4RFFVRnFRanRCUVVGQkxGZEJRWGRDYWtJc1NVRkJTU3hIUVVGSGFsZ3NSMEZCUnl4RFFVRkRhVmtzVVVGQlJDeERRVUZXTEVkQlFYVkNReXhEUVVGMlFpeEhRVUV5UWtRc1VVRkJia1E3UVVGQlFTeEhRVUZZTEVWQlFYbEZMRU5CUVhwRkxFTkJSR2RDTzBGQlFVRXNRMEZCYkVJN08wRkJSMEVzU1VGQlRVVXNNRUpCUVRCQ0xFZEJRVWNzVTBGQk4wSkJMREJDUVVFMlFpeERRVUZEVUN4WlFVRkVPMEZCUVVFc1UwRkRha05CTEZsQlFWa3NTMEZCU3l4RFFVRnFRaXhIUVVGeFFpeERRVUZ5UWl4SFFVRjVRaXhEUVVSUk8wRkJRVUVzUTBGQmJrTTdPMEZCUjBFc1UwRkJVMUVzWjBKQlFWUXNVVUZqUnp0QlFVRkJMRTFCWWtST0xFMUJZVU1zVTBGaVJFRXNUVUZoUXp0QlFVRkJMRTFCV2tSUExFdEJXVU1zVTBGYVJFRXNTMEZaUXp0QlFVRkJMRTFCV0ZGRExFOUJWMUlzVTBGWVJFTXNUMEZYUXp0QlFVRkJMRTFCVms5RExFTkJWVkFzVTBGV1JDOWhMRTFCVlVNN1FVRkJRU3hOUVZSTloySXNRMEZUVGl4VFFWUkVhRm9zUzBGVFF6dEJRVUZCTEUxQlVrUnBXaXhUUVZGRExGTkJVa1JCTEZOQlVVTTdRVUZEUkN4TlFVRkpXQ3hUUVVGVExFZEJRVWNzUlVGQmFFSTdRVUZEUVN4TlFVRk5kRmtzUzBGQlN5eEhRVUZIWjFvc1EwRkJReXhIUVVGSFdDeE5RVUZzUWp0QlFVTkJMRTFCUVUxeVlTeE5RVUZOTEVkQlFVY3JZU3hEUVVGRExFZEJRVWRXTEUxQlFXNUNMRU5CU0VNN1FVRk5SRHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNUVUZCVFdFc1VVRkJVU3hIUVVGSFRpeExRVUZMTEVkQlFVZEdMREJDUVVFd1FpeERRVUZEUnl4UFFVRkVMRU5CUVRkQ0xFZEJRWGxEUVN4UFFVRXZSQ3hEUVZSRE96dEJRVmxFTEUxQlFVMURMRTlCUVU4c1IwRkJSMW9zV1VGQldTeERRVUZEWjBJc1VVRkJSQ3hEUVVFMVFqdEJRVU5CTEUxQlFVMURMRk5CUVZNc1IwRkJSMFlzVTBGQlV5eEhRVUZIU0N4UFFVRlBMRU5CUVVOeWJrSXNUVUZCZEVNN1FVRkRRU3hOUVVGTmVVZ3NUVUZCVFN4SFFVRkhOR1lzVDBGQlR5eERRVUZEU3l4VFFVRkVMRU5CUVhSQ0xFTkJaRU03UVVGcFFrUTdRVUZEUVR0QlFVTkJPenRCUVVOQkxFMUJRVTFETEZWQlFWVXNSMEZCUnl4SlFVRkpjbTlDTEV0QlFVb3NRMEZCVlcxdlFpeFJRVUZXTEVWQlFXOUNSeXhKUVVGd1FpeERRVUY1UWl4RFFVRjZRaXhEUVVGdVFqdEJRVU5CTEUxQlFVMURMRk5CUVZNc1IwRkJSeXhKUVVGSmRtOUNMRXRCUVVvc1EwRkJWVzF2UWl4UlFVRldMRVZCUVc5Q1J5eEpRVUZ3UWl4RFFVRjVRaXhEUVVGNlFpeERRVUZzUWl4RFFYSkNRenRCUVhkQ1JEczdRVUZEUVN4UFFVRkxMRWxCUVVsYUxFTkJRVU1zUjBGQlJ5eERRVUZpTEVWQlFXZENRU3hEUVVGRExFZEJRVWNzU1VGQlNWTXNVVUZCZUVJc1JVRkJhME5VTEVOQlFVTXNTVUZCU1N4RFFVRjJReXhGUVVFd1F6dEJRVU40UXl4UlFVRk5ZeXhIUVVGSExFZEJRVWRvUWl4TlFVRk5MRU5CUVVOaExGVkJRVVFzUTBGQmJFSTdRVUZEUVN4UlFVRk5TU3hOUVVGTkxFZEJRVWRHTEZOQlFWTXNRMEZCUTBNc1IwRkJSQ3hEUVVGNFFqdEJRVU5CTEZGQlFVMUZMRlZCUVZVc1IwRkJSM1puUWl4TlFVRk5MRU5CUVVOeFowSXNSMEZCUkN4RFFVRk9MRU5CUVZsRExFMUJRVm9zU1VGQmMwSjRZaXhOUVVGNlF6dEJRVVZCYzJFc1NVRkJRVUVzVTBGQlV5eERRVUZEYUZnc1NVRkJWaXhEUVVGbE8wRkJRMko0UWl4TlFVRkJRU3hIUVVGSExFVkJRVVZ6V2l4VlFVRlZMRU5CUVVOSExFZEJRVVFzUTBGRVJqdEJRVVZpYUdJc1RVRkJRVUVzU1VGQlNTeEZRVUZGWjJJc1IwRkJSeXhKUVVGSmRsb3NTMEZCU3l4SFFVRkhObGtzVDBGQldpeERRVVpKTzBGQlIySTNXU3hOUVVGQlFTeExRVUZMTEVWQlFVVkJMRXRCUVVzc1IwRkJSelpaTEU5QlNFWTdRVUZKWWpkaExFMUJRVUZCTEUxQlFVMHNSVUZCUlhsaU8wRkJTa3NzUzBGQlpqdEJRVTlCVEN4SlFVRkJRU3hWUVVGVkxFTkJRVU5ITEVkQlFVUXNRMEZCVml4SlFVRnRRa1VzVlVGQmJrSTdRVUZEUVVnc1NVRkJRVUVzVTBGQlV5eERRVUZEUXl4SFFVRkVMRU5CUVZRc1NVRkJhMElzUTBGQmJFSTdRVUZEUkN4SFFYWkRRVHRCUVRCRFJEczdPMEZCUTBFc1RVRkJTVmdzUzBGQlNpeEZRVUZYTzBGQlExUXNVVUZCVFdNc1pVRkJaU3hIUVVGSGRHNUNMRWxCUVVrc1EwRkJRM1Z1UWl4SlFVRk1MRU5CUVZWa0xFOUJRVThzUjBGQlJ5eERRVUZ3UWl4TFFVRXdRamRaTEV0QlFVc3NSMEZCUnpaWkxFOUJRV3hETEVOQlFYaENPMEZCUTBGUUxFbEJRVUZCTEZOQlFWTXNSMEZCUjBFc1UwRkJVeXhEUVVGRGNtNUNMRWRCUVZZc1EwRkJZeXhWUVVGQmRVOHNVVUZCVVR0QlFVRkJMQ3REUVVNM1FrRXNVVUZFTmtJN1FVRkZhRU5xUWl4UlFVRkJRU3hKUVVGSkxFVkJRVVZ0WWl4bFFVRmxMRWRCUVVkc1lTeFJRVUZSTEVOQlFVTnFRanRCUVVaRU8wRkJRVUVzUzBGQmRFSXNRMEZCV2p0QlFVbEJLMW9zU1VGQlFVRXNVMEZCVXl4RFFVRkRjMElzVDBGQlZpeERRVUZyUWp0QlFVRkZPVm9zVFVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUVZBN1FVRkJWWFpDTEUxQlFVRkJMRWxCUVVrc1JVRkJSU3hEUVVGb1FqdEJRVUZ0UW5sQ0xFMUJRVUZCTEV0QlFVc3NSVUZCUlRCYUxHVkJRVEZDTzBGQlFUSkRNV0lzVFVGQlFVRXNUVUZCVFN4RlFVRk9RVHRCUVVFelF5eExRVUZzUWp0QlFVTkVMRWRCYkVSQk8wRkJjVVJFTzBGQlEwRTdPenRCUVVOQkxFMUJRVWx4WVN4TlFVRktMRVZCUVZrN1FVRkRWa01zU1VGQlFVRXNVMEZCVXl4SFFVRkhSaXhWUVVGVkxFTkJRVU5ETEUxQlFVUXNSVUZCVTBNc1UwRkJWQ3hEUVVGMFFqdEJRVU5FT3p0QlFVVkVMRk5CUVU5QkxGTkJRVkE3UVVGRFJEczdRVUZuUWtRc1FVRkJaU3hUUVVGVGRVSXNUMEZCVkN4RFFVRnBRakZ2UWl4TFFVRnFRaXhGUVVFclFqdEJRVUZCTEUxQlJURkRNbTVDTEU5QlJqQkRMRWRCVTNoRE0yNUNMRXRCVkhkRExFTkJSVEZETW01Q0xFOUJSakJETzBGQlFVRXNUVUZITVVOR0xFdEJTREJETEVkQlUzaERlbTVDTEV0QlZIZERMRU5CUnpGRGVXNUNMRXRCU0RCRE8wRkJRVUVzVFVGSk1VTlFMRTFCU2pCRExFZEJVM2hEYkc1Q0xFdEJWSGRETEVOQlNURkRhMjVDTEUxQlNqQkRPMEZCUVVFc1RVRkxNVU55WVN4TlFVd3dReXhIUVZONFF6ZE5MRXRCVkhkRExFTkJTekZETmswc1RVRk1NRU03UVVGQlFTeE5RVTB4UTJsaUxGTkJUakJETEVkQlUzaERPVzVDTEV0QlZIZERMRU5CVFRGRE9HNUNMRk5CVGpCRE8wRkJRVUVzVFVGUE1VTmhMRmRCVURCRExFZEJVM2hETTI5Q0xFdEJWSGRETEVOQlR6RkRNbTlDTEZkQlVEQkRPMEZCUVVFc1RVRlJNVU01V2l4TFFWSXdReXhIUVZONFF6ZFBMRXRCVkhkRExFTkJVVEZETms4c1MwRlNNRU03UVVGVk5VTXNUVUZCVFhOWkxGTkJRVk1zUjBGQlIwc3NaMEpCUVdkQ0xFTkJRVU03UVVGRGFrTkhMRWxCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZFYVVNN1FVRkZha05HTEVsQlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU5CTEV0QlJuZENPMEZCUjJwRE5Wa3NTVUZCUVVFc1MwRkJTeXhGUVVGTVFTeExRVWhwUXp0QlFVbHFRMmhETEVsQlFVRkJMRTFCUVUwc1JVRkJUa0VzVFVGS2FVTTdRVUZMYWtOeFlTeEpRVUZCUVN4TlFVRk5MRVZCUVVWQkxFMUJRVTBzU1VGQlNTeERRVXhsTzBGQlRXcERXU3hKUVVGQlFTeFRRVUZUTEVWQlFVVkJMRk5CUVZNc1NVRkJTVHRCUVU1VExFZEJRVVFzUTBGQmJFTTdRVUZSUVN4elFrRkRSVEZZTEdOQlFVTXNWVUZCUkR0QlFVTkZMRWxCUVVFc1NVRkJTU3hGUVVGRk8wRkJRVUVzVlVGQlVYZFJMRXRCUVZJc1UwRkJSelpHTEVkQlFVZzdRVUZCUVN4aFFVTkthME1zVjBGQlZ5eERRVUZETzBGQlExWXZTQ3hSUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUkZVN1FVRkZWaTlTTEZGQlFVRkJMRXRCUVVzc1JVRkJSWE5aTEZOQlFWTXNRMEZCUTNaSExFdEJRVVFzUTBGQlZDeERRVUZwUWk5U0xFdEJSbVE3UVVGSFZtaERMRkZCUVVGQkxFMUJRVTBzUlVGQlJYTmhMRk5CUVZNc1EwRkJRM1pITEV0QlFVUXNRMEZCVkN4RFFVRnBRaTlVTzBGQlNHWXNUMEZCUkN4RFFVUlFPMEZCUVVFc1MwRkVVanRCUVZGRkxFbEJRVUVzVFVGQlRTeEZRVUZGYzJFN1FVRlNWaXhKUVVSR08wRkJXVVE3UVVGRlJIVkNMRTlCUVU4c1EwRkJRMnBZTEZOQlFWSXNSMEZCYjBJN1FVRkRiRUpyVnl4RlFVRkJRU3hQUVVGUExFVkJRVVZ3V0N4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUTBGQmFFSXNSVUZCTWtJMFRTeFZRVVJzUWp0QlFVVnNRbkZMTEVWQlFVRkJMRXRCUVVzc1JVRkJSV3hZTEZOQlFWTXNRMEZCUTNOQ0xFbEJSa003UVVGSGJFSnhWaXhGUVVGQlFTeE5RVUZOTEVWQlFVVXpWeXhUUVVGVExFTkJRVU5QTEUxQlNFRTdRVUZKYkVKcVJTeEZRVUZCUVN4TlFVRk5MRVZCUVVVd1JDeFRRVUZUTEVOQlFVTlBMRTFCUVZZc1EwRkJhVUp6VFN4VlFVcFFPMEZCUzJ4Q01Fc3NSVUZCUVVFc1UwRkJVeXhGUVVGRmRsZ3NVMEZCVXl4RFFVRkRUeXhOUVV4SU8wRkJUV3hDTmxnc1JVRkJRVUVzVjBGQlZ5eEZRVUZGY0Zrc1UwRkJVeXhEUVVGRGVVOHNTVUZCVml4RFFVRmxOVUlzVlVGT1ZqdEJRVTlzUW5aUExFVkJRVUZCTEV0QlFVc3NSVUZCUlRCQ0xGTkJRVk1zUTBGQlEwOHNUVUZCVml4RFFVRnBRbk5OTzBGQlVFNHNRMEZCY0VJN096czdRVU53UzJVc1UwRkJVM2RNTEUxQlFWUXNRMEZCWjBJMWIwSXNTMEZCYUVJc1JVRkJiME03UVVGQlFTeE5RVU42UXpoUUxGRkJSSGxETEVkQlF6VkNPVkFzUzBGRU5FSXNRMEZEZWtNNFVDeFJRVVI1UXp0QlFVVnFSQ3hOUVVGTk5rMHNSVUZCUlN4SFFVRkhReXhWUVVGVkxFTkJRMjVDTEVOQlFVTTFZeXhMUVVGTExFTkJRVU0wUlN4RlFVRk9MRXRCUVdGeldTeFRRVUZpTEVsQlEwTnNaQ3hMUVVGTExFTkJRVU00UlN4RlFVRk9MRXRCUVdGdldTeFRRVVJrTEVsQlJVTnNaQ3hMUVVGTExFTkJRVU1yUlN4RlFVRk9MRXRCUVdGdFdTeFRRVVprTEVsQlIwTnNaQ3hMUVVGTExFTkJRVU5uUml4RlFVRk9MRXRCUVdGcldTeFRRVWhtTEV0QlNVVTVaQ3hSUVVGTkxFTkJRVU41Y0VJc1owSkJURlVzUlVGTmJrSTNiMElzUzBGQlN5eERRVUZETkVVc1JVRkJUaXhKUVVGWmVFWXNVVUZCVFN4blFrRkJVMWtzUzBGQlN5eERRVUZETkVVc1JVRkJaaXhGUVU1RExFVkJUMjVDTlVVc1MwRkJTeXhEUVVGRE9FVXNSVUZCVGl4SlFVRlpNVVlzVVVGQlRTeG5Ra0ZCVTFrc1MwRkJTeXhEUVVGRE9FVXNSVUZCWml4RlFWQkRMRVZCVVc1Q09VVXNTMEZCU3l4RFFVRkRLMFVzUlVGQlRpeEpRVUZaTTBZc1VVRkJUU3huUWtGQlUxa3NTMEZCU3l4RFFVRkRLMFVzUlVGQlppeEZRVkpETEVWQlUyNUNMMFVzUzBGQlN5eERRVUZEWjBZc1JVRkJUaXhKUVVGWk5VWXNVVUZCVFN4blFrRkJVMWtzUzBGQlN5eERRVUZEWjBZc1JVRkJaaXhGUVZSRExFVkJWVzVDYUVZc1MwRkJTeXhEUVVGRE9HOUNMRWxCUVU0c1NVRkJZeXhKUVVGa0xFbEJRWE5DTVhCQ0xGRkJRVTBzWjBKQlFWTlpMRXRCUVVzc1EwRkJRemh2UWl4SlFVRm1MRVZCVmxRc1JVRlhia0k1YjBJc1MwRkJTeXhEUVVGREsyOUNMRTFCUVU0c1NVRkJaMElzU1VGQmFFSXNTVUZCZDBJemNFSXNVVUZCVFN4blFrRkJVMWtzUzBGQlN5eERRVUZESzI5Q0xFMUJRV1lzUlVGWVdDeEZRVmx1UWk5dlFpeExRVUZMTEVOQlFVTm5jRUlzVFVGQlRpeEpRVUZuUWl4SlFVRm9RaXhKUVVGM1FqVndRaXhSUVVGTkxHZENRVUZUV1N4TFFVRkxMRU5CUVVObmNFSXNUVUZCWml4RlFWcFlMRVZCWVc1Q2FIQkNMRXRCUVVzc1EwRkJRMmx3UWl4TlFVRk9MRWxCUVdkQ0xFbEJRV2hDTEVsQlFYZENOM0JDTEZGQlFVMHNaMEpCUVZOWkxFdEJRVXNzUTBGQlEybHdRaXhOUVVGbUxFVkJZbGdzUTBGQmNrSTdRVUZsUVN4elFrRkJUemRaTzBGQlFVc3NTVUZCUVN4VFFVRlRMRVZCUVVWMVRUdEJRVUZvUWl4TFFVRnhRamROTEZGQlFYSkNMRU5CUVZBN1FVRkRSRHRCUVVWRU9Ga3NUVUZCVFN4RFFVRkRibGdzVTBGQlVDeEhRVUZ0UWp0QlFVTnFRak5DTEVWQlFVRkJMRkZCUVZFc1JVRkJSVk1zVTBGQlV5eERRVUZEYlVJc1NVRkVTRHRCUVVWcVFqbE5MRVZCUVVGQkxFVkJRVVVzUlVGQlJUSk1MRk5CUVZNc1EwRkJRMDhzVFVGR1J6dEJRVWRxUW1oTkxFVkJRVUZCTEVWQlFVVXNSVUZCUlhsTUxGTkJRVk1zUTBGQlEwOHNUVUZJUnp0QlFVbHFRaTlNTEVWQlFVRkJMRVZCUVVVc1JVRkJSWGRNTEZOQlFWTXNRMEZCUTA4c1RVRktSenRCUVV0cVFqbE1MRVZCUVVGQkxFVkJRVVVzUlVGQlJYVk1MRk5CUVZNc1EwRkJRMDhzVFVGTVJ6dEJRVTFxUW1kWkxFVkJRVUZCTEVsQlFVa3NSVUZCUlhaWkxGTkJRVk1zUTBGQlEwOHNUVUZPUXp0QlFVOXFRbWxaTEVWQlFVRkJMRTFCUVUwc1JVRkJSWGhaTEZOQlFWTXNRMEZCUTA4c1RVRlFSRHRCUVZGcVFtdFpMRVZCUVVGQkxFMUJRVTBzUlVGQlJYcFpMRk5CUVZNc1EwRkJRMDhzVFVGU1JEdEJRVk5xUW0xWkxFVkJRVUZCTEUxQlFVMHNSVUZCUlRGWkxGTkJRVk1zUTBGQlEwODdRVUZVUkN4RFFVRnVRanM3UVVOd1EyVXNVMEZCVTI5WkxGTkJRVlFzUTBGQmJVSnNjRUlzUzBGQmJrSXNSVUZCYVVNN1FVRkJRU3hOUVVOMFF6aFFMRkZCUkhORExFZEJRM3BDT1ZBc1MwRkVlVUlzUTBGRGRFTTRVQ3hSUVVSelF6dEJRVVU1UXl4elFrRkRSVTBzWTBGQlF5eEhRVUZFTzBGQlFVc3NTVUZCUVN4alFVRmpMRVZCUVVNc1VVRkJjRUk3UVVGQk5rSXNTVUZCUVN4UFFVRlBMRVZCUVVNN1FVRkJja01zYTBKQlEwVkJMR05CUVVNc1IwRkJSRHRCUVVGTExFbEJRVUVzVVVGQlVTeEZRVUZGTEVkQlFXWTdRVUZCYjBJc1NVRkJRU3hMUVVGTExFVkJRVU03UVVGQk1VSXNTMEZEUjA0c1VVRkVTQ3hEUVVSR0xFTkJSRVk3UVVGUFJEdEJRVVZFYjFvc1UwRkJVeXhEUVVGRGVsZ3NVMEZCVml4SFFVRnpRanRCUVVOd1FqTkNMRVZCUVVGQkxGRkJRVkVzUlVGQlJWTXNVMEZCVXl4RFFVRkRiVUk3UVVGRVFTeERRVUYwUWpzN096dEJRMmhDWlN4VFFVRlRlVmdzVDBGQlZDeEhRVUZ0UWp0QlFVTm9ReXh6UWtGQlR5OVpPMEZCUVVrc1NVRkJRU3hUUVVGVExFVkJRVVZvVWl4UlFVRk5MRU5CUVVObmNVSTdRVUZCZEVJc1NVRkJVRHRCUVVORU96dEJRMFZqTEZOQlFWTkRMRXRCUVZRc1EwRkJaWEp3UWl4TFFVRm1MRVZCUVRaQ08wRkJRVUVzVFVGRGJFTXlSaXhUUVVSclF5eEhRVU53UWpOR0xFdEJSRzlDTEVOQlEyeERNa1lzVTBGRWEwTTdRVUZGTVVNc1RVRkJTWEZZTEVsQlFVbzdPMEZCUTBFc1ZVRkJVWEpZTEZOQlFWSTdRVUZEUlN4VFFVRkxMRWxCUVV3N1FVRkRSWEZZTEUxQlFVRkJMRWxCUVVrc1IwRkJSeXh0UWtGQlVEdEJRVU5CT3p0QlFVTkdMRk5CUVVzc1QwRkJURHRCUVVORlFTeE5RVUZCUVN4SlFVRkpMRWRCUVVjc2NVSkJRVkE3UVVGRFFUczdRVUZEUml4VFFVRkxMRTFCUVV3N1FVRkRSVUVzVFVGQlFVRXNTVUZCU1N4SFFVRkhMSEZDUVVGUU8wRkJRMEU3TzBGQlEwWXNVMEZCU3l4TlFVRk1PMEZCUTBWQkxFMUJRVUZCTEVsQlFVa3NSMEZCUnl4dFFrRkJVRHRCUVVOQk8wRkJXa283TzBGQlowSkJMSE5DUVVORk5VMDdRVUZCU3l4SlFVRkJMRXRCUVVzc1JVRkJReXhKUVVGWU8wRkJRV2RDTEVsQlFVRXNUVUZCVFN4RlFVRkRPMEZCUVhaQ0xHdENRVU5GUVR0QlFVRk5MRWxCUVVFc1EwRkJReXhGUVVGRk5FMDdRVUZCVkN4SlFVUkdMRU5CUkVZN1FVRkxSRHRCUVVWRWNVMHNTMEZCU3l4RFFVRkROVmdzVTBGQlRpeEhRVUZyUWp0QlFVTm9RamxNTEVWQlFVRkJMRk5CUVZNc1JVRkJSVFJMTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4UFFVRlFMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENMRTFCUVhoQ0xFTkJRV2hDTzBGQlJFc3NRMEZCYkVJN096czdRVU42UWtFN08wRkJRMEU3TzBGQlEwRXNTVUZCVFRoWkxHZENRVUZuUWl4SFFVRkhPMEZCUTNaQ0xFOUJRVXNzU1VGRWEwSTdRVUZGZGtJc1QwRkJTeXhQUVVaclFqdEJRVWQyUWl4UFFVRkxMRTFCU0d0Q08wRkJTWFpDTEU5QlFVczdRVUZLYTBJc1EwRkJla0k3UVVGUFFTeEpRVUZOUXl4aFFVRmhMRWRCUVVjN1FVRkRjRUpETEVWQlFVRkJMRVZCUVVVc1JVRkJSU3hEUVVSblFqdEJRVVZ3UWk5aExFVkJRVUZCTEV0QlFVc3NSVUZCUlN4RFFVWmhPMEZCUjNCQ1oySXNSVUZCUVVFc1NVRkJTU3hGUVVGRkxFTkJTR003UVVGSmNFSnlZeXhGUVVGQlFTeEpRVUZKTEVWQlFVVTdRVUZLWXl4RFFVRjBRanRCUVU5QkxFbEJRVTF6WXl4TlFVRk5MRWRCUVVjc1JVRkJaanRCUVVOQkxFRkJRVThzU1VGQlRVTXNXVUZCV1N4SFFVRkhMRVZCUVhKQ08wRkJRMUFzU1VGQlRVTXNjMEpCUVhOQ0xFZEJRVWNzUlVGQkwwSTdRVUZEUVN4QlFVRlBMRWxCUVUxRExHRkJRV0VzUjBGQlJ5eERRVUYwUWpzN1FVRTJSRkE3T3p0QlFVZEJMRUZCUVU4c1UwRkJVME1zVlVGQlZDeERRVU5NUXl4VlFVUkxMRVZCUlV4RExHTkJSa3NzUlVGSFRFTXNWMEZJU3l4RlFVbE1ReXhWUVVwTExFVkJTMHc3UVVGRFFUdEJRVU5CTzBGQlEwRXNUVUZCU1ZZc1JVRkJSU3hIUVVGSFV5eFhRVUZYTEVOQlFVTjBZaXhIUVVGYUxFZEJRV3RDYjJJc1ZVRkJWU3hEUVVGRGJHUXNUVUZCTjBJc1IwRkJjME00WXl4WlFVRXZRenRCUVVOQkxFMUJRVWxzWWl4TFFVRkxMRWRCUTFCNVlpeFZRVUZWTEVOQlFVTnlZaXhMUVVGWUxFZEJRVzFDYTJJc1ZVRkJWU3hEUVVGRGJHSXNTMEZCT1VJc1IwRkJjME00WVN4WlFVRjBReXhIUVVGeFJFMHNWMEZCVnl4RFFVRkRlR0lzUzBGRWJrVTdRVUZGUVN4TlFVRkpaMklzU1VGQlNTeEhRVU5PVXl4VlFVRlZMRU5CUVVOeVpDeE5RVUZZTEVkQlFXOUNhMlFzVlVGQlZTeERRVUZEYkdRc1RVRkJMMElzUjBGQmQwTTRZeXhaUVVGNFF5eEhRVUYxUkUwc1YwRkJWeXhEUVVGRGVtZENMRTFCUkhKRk8wRkJSVUVzVFVGQlNUUkVMRWxCUVVrc1IwRkJSelpqTEZkQlFWY3NRMEZCUXpkakxFbEJRVm9zUjBGQmJVSXlZeXhWUVVGVkxFTkJRVU5zWWl4TFFVRTVRaXhIUVVGelF6aGhMRmxCUVdwRUxFTkJVa0U3UVVGWFFUczdRVUZEUVN4TlFVTkZUU3hYUVVGWExFTkJRVU4wWWl4SFFVRmFMRWRCUVd0Q2EySXNZVUZCYkVJc1NVRkRRVXNzVlVGQlZTeERRVUZEY21Rc1RVRkJXQ3hIUVVGdlFtOWtMRmRCUVZjc1EwRkJRM3BuUWl4TlFVRm9ReXhIUVVGNVEzRm5RaXhoUVVZelF5eEZRVWRGTzBGQlEwRjZZeXhKUVVGQlFTeEpRVUZKTEVkQlFVY3NRMEZCVUR0QlFVTkJjVUlzU1VGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVZJN1FVRkRSQ3hIUVd4Q1JEczdPMEZCY1VKQkxFMUJRMFYzWWl4WFFVRlhMRU5CUVVNM1l5eEpRVUZhTEVkQlFXMUNlV01zWVVGQmJrSXNTVUZEUVVzc1ZVRkJWU3hEUVVGRGNtSXNTMEZCV0N4SFFVRnRRbTlpTEZkQlFWY3NRMEZCUTNoaUxFdEJRUzlDTEVkQlFYVkRiMklzWVVGR2VrTXNSVUZIUlR0QlFVTkJUQ3hKUVVGQlFTeEZRVUZGTEVkQlFVY3NRMEZCVER0QlFVTkJReXhKUVVGQlFTeEpRVUZKTEVkQlFVY3NRMEZCVUR0QlFVTkVPenRCUVVWRUxFMUJRVTFWTEUxQlFVMHNSMEZCUnl4RFFVRkRXQ3hGUVVGRUxFVkJRVXN2WVN4TFFVRk1MRVZCUVZsbllpeEpRVUZhTEVWQlFXdENjbU1zU1VGQmJFSXNRMEZCWml4RFFUZENRVHM3UVVGblEwRXNUVUZCVFdkYUxFZEJRVWNzUjBGQlIyNXNRaXhKUVVGSkxFTkJRVU50YkVJc1IwRkJUQ3hQUVVGQmJteENMRWxCUVVrc1JVRkJVV3R3UWl4TlFVRlNMRU5CUVdoQ0xFTkJhRU5CT3p0QlFXMURRU3hOUVVGSlF5eFBRVUZLT3p0QlFVTkJMRTFCUVVsS0xHTkJRV01zU1VGQlNVY3NUVUZCVFN4RFFVRkRXaXhoUVVGaExFTkJRVU5UTEdOQlFVUXNRMEZCWkN4RFFVRk9MRWRCUVhkRExFTkJRVGxFTEVWQlFXbEZPMEZCUXk5RU8wRkJRMEZKTEVsQlFVRkJMRTlCUVU4c1IwRkJSMG9zWTBGQlZqdEJRVU5FTEVkQlNFUXNUVUZIVHp0QlFVTk1PMEZCUTBGSkxFbEJRVUZCTEU5QlFVOHNSMEZCUjJRc1owSkJRV2RDTEVOQlFVTmhMRTFCUVUwc1EwRkJRemxoTEU5QlFWQXNRMEZCWlN0WExFZEJRV1lzUTBGQlJDeERRVUV4UWp0QlFVTkVPenRCUVVORUxGTkJRVTluUlN4UFFVRlFPMEZCUTBRN1FVRkZSRHM3T3p0QlFVZEJMRUZCUVU4c1UwRkJVME1zVTBGQlZDeERRVU5NVGl4VlFVUkxMRVZCUlV4TExFOUJSa3NzUlVGSFRFZ3NWMEZJU3l4RlFVbE1ReXhWUVVwTExFVkJTMHc3UVVGRFFUdEJRVU5CTEUxQlFVbEpMRTFCUVVvN1FVRkRRU3hOUVVGSlF5eFZRVUZLTzBGQlEwRXNUVUZCU1VNc2IwSkJRVW83TzBGQlJVRXNUVUZCU1Vvc1QwRkJUeXhMUVVGTExFOUJRVm9zU1VGQmRVSkJMRTlCUVU4c1MwRkJTeXhOUVVGMlF5eEZRVUVyUXp0QlFVTTNRMFVzU1VGQlFVRXNUVUZCVFN4SFFVRkhVQ3hWUVVGVkxFTkJRVU5zWkN4TlFVRllMRWRCUVc5Q0xFTkJRVGRDTzBGQlEwRXdaQ3hKUVVGQlFTeFZRVUZWTEVkQlFVZE9MRmRCUVZjc1EwRkJRM1JpTEVkQlFWb3NSMEZCYTBJc1EwRkJRM05pTEZkQlFWY3NRMEZCUTNwblFpeE5RVUZhTEVkQlFYRkNlV2RDTEZkQlFWY3NRMEZCUTNSaUxFZEJRV3hETEVsQlFYbERMRU5CUVhoRk8wRkJRMEUyWWl4SlFVRkJRU3h2UWtGQmIwSXNSMEZCUjA0c1ZVRkJWU3hEUVVGRGNtUXNUVUZCYkVNN1FVRkRSQ3hIUVVwRUxFMUJTVTg3UVVGRFREdEJRVU5CZVdRc1NVRkJRVUVzVFVGQlRTeEhRVUZIVUN4VlFVRlZMRU5CUVVOc1lpeExRVUZZTEVkQlFXMUNMRU5CUVRWQ08wRkJRMEV3WWl4SlFVRkJRU3hWUVVGVkxFZEJRVWRPTEZkQlFWY3NRMEZCUXpkakxFbEJRVm9zUjBGQmJVSXNRMEZCUXpaakxGZEJRVmNzUTBGQlEzaGlMRXRCUVZvc1IwRkJiMEozWWl4WFFVRlhMRU5CUVVNM1l5eEpRVUZxUXl4SlFVRjVReXhEUVVGNlJUdEJRVU5CYjJRc1NVRkJRVUVzYjBKQlFXOUNMRWRCUVVkT0xGVkJRVlVzUTBGQlEzSmlMRXRCUVd4RE8wRkJRMFE3TzBGQlJVUXNUVUZCVFRSaUxGZEJRVmNzUjBGQlIwWXNWVUZCVlN4SFFVRkhSQ3hOUVVGaUxFZEJRWE5DV2l4TlFVRXhRenRCUVVOQkxFMUJRVTFuUWl4WlFVRlpMRWRCUVVkR0xHOUNRVUZ2UWl4SFFVRkhSQ3hWUVVGMlFpeEhRVUZ2UTBRc1RVRkJjRU1zUjBGQk5rTmFMRTFCUVd4Rk8wRkJRMEVzVFVGQlNXbENMRTFCUVVvN08wRkJRMEVzVFVGQlNVWXNWMEZCVnl4SFFVRkhMRU5CUVdRc1NVRkJiVUpETEZsQlFWa3NSMEZCUnl4RFFVRjBReXhGUVVGNVF6dEJRVU4yUXp0QlFVTkJReXhKUVVGQlFTeE5RVUZOTEVkQlFVY3NVVUZCVkR0QlFVTkVMRWRCU0VRc1RVRkhUeXhKUVVGSlJDeFpRVUZaTEVkQlFVY3NRMEZCYmtJc1JVRkJjMEk3UVVGRE0wSTdRVUZEUVVNc1NVRkJRVUVzVFVGQlRTeEhRVUZIVUN4UFFVRlBMRXRCUVVzc1RVRkJXaXhKUVVGelFrRXNUMEZCVHl4TFFVRkxMRTlCUVd4RExFZEJRVFJETEVsQlFUVkRMRWRCUVcxRUxFMUJRVFZFTzBGQlEwUXNSMEZJVFN4TlFVZEJPMEZCUTB3N1FVRkRRVThzU1VGQlFVRXNUVUZCVFN4SFFVRkhVQ3hQUVVGUExFdEJRVXNzVFVGQldpeEpRVUZ6UWtFc1QwRkJUeXhMUVVGTExFOUJRV3hETEVkQlFUUkRMRTFCUVRWRExFZEJRWEZFTEU5QlFUbEVPMEZCUTBRN08wRkJRMFFzVTBGQlQwOHNUVUZCVUR0QlFVTkVPMEZCUlVRN096czdRVUZIUVN4QlFVRlBMRk5CUVZORExHTkJRVlFzUTBGRFRFUXNUVUZFU3l4RlFVVk1WaXhYUVVaTExFVkJSMHhETEZWQlNFc3NSVUZKVER0QlFVTkJPMEZCUTBFc1RVRkJTVmNzYlVKQlFXMUNMRWRCUTNKQ2FrSXNjMEpCUVhOQ0xFZEJRVWNzUTBGQlEwc3NWMEZCVnl4RFFVRkRjR1FzVFVGQldpeEhRVUZ4UWpoakxGbEJRWFJDTEVsQlFYTkRMRU5CUkdwRk8wRkJSVUVzVFVGQlNXMUNMSEZDUVVGeFFpeEhRVU4yUW14Q0xITkNRVUZ6UWl4SFFVRkhMRU5CUVVOTExGZEJRVmNzUTBGQlEzQmlMRXRCUVZvc1IwRkJiMEk0WVN4WlFVRnlRaXhKUVVGeFF5eERRVVJvUlR0QlFVVkJMRTFCUVVsdlFpeHJRa0ZCYTBJc1IwRkJSM0JDTEZsQlFYcENPMEZCUTBFc1RVRkJTWEZDTEc5Q1FVRnZRaXhIUVVGSGNrSXNXVUZCTTBJc1EwRlFRVHRCUVZWQk96dEJRVU5CTEUxQlFVMXpRaXhwUWtGQmFVSXNSMEZEY2tKb1FpeFhRVUZYTEVOQlFVTjBZaXhIUVVGYUxFZEJRV3RDYTJNc2JVSkJRV3hDTEVkQlFYZERMRU5CUVhoRExFbEJRMEZhTEZkQlFWY3NRMEZCUTNwblFpeE5RVUZhTEVkQlFYRkNjV2hDTEcxQ1FVRnlRaXhIUVVFeVExZ3NWVUZCVlN4RFFVRkRjbVFzVFVGR2VFUTdRVUZIUVN4TlFVRk5jV1VzYlVKQlFXMUNMRWRCUTNaQ2FrSXNWMEZCVnl4RFFVRkROMk1zU1VGQldpeEhRVUZ0UWpCa0xIRkNRVUZ1UWl4SFFVRXlReXhEUVVFelF5eEpRVU5CWWl4WFFVRlhMRU5CUVVONFlpeExRVUZhTEVkQlFXOUNjV01zY1VKQlFYQkNMRWRCUVRSRFdpeFZRVUZWTEVOQlFVTnlZaXhMUVVaNlJEczdRVUZIUVN4TlFVRkpiMk1zYVVKQlFVb3NSVUZCZFVJN1FVRkRja0pLTEVsQlFVRkJMRzFDUVVGdFFpeEhRVU5xUW1oQ0xHRkJRV0VzUjBGQlJ5eERRVUZEU1N4WFFVRlhMRU5CUVVOd1pDeE5RVUZhTEVkQlFYRkNPR01zV1VGQmRFSXNTVUZCYzBNc1EwRkVlRVE3UVVGRlFXOUNMRWxCUVVGQkxHdENRVUZyUWl4SFFVRkhiRUlzWVVGQmNrSTdRVUZEUkRzN1FVRkRSQ3hOUVVGSmNVSXNiVUpCUVVvc1JVRkJlVUk3UVVGRGRrSktMRWxCUVVGQkxIRkNRVUZ4UWl4SFFVTnVRbXBDTEdGQlFXRXNSMEZCUnl4RFFVRkRTU3hYUVVGWExFTkJRVU53WWl4TFFVRmFMRWRCUVc5Q09HRXNXVUZCY2tJc1NVRkJjVU1zUTBGRWRrUTdRVUZGUVhGQ0xFbEJRVUZCTEc5Q1FVRnZRaXhIUVVGSGJrSXNZVUZCZGtJN1FVRkRSRHM3UVVGRlJDeFRRVUZQTzBGQlEweHpRaXhKUVVGQlFTeE5RVUZOTEVWQlFVVTdRVUZEVGtNc1RVRkJRVUVzUTBGQlF5eEZRVUZGVGl4eFFrRkVSenRCUVVWT1R5eE5RVUZCUVN4RFFVRkRMRVZCUVVWU08wRkJSa2NzUzBGRVNEdEJRVXRNVXl4SlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGRFRFWXNUVUZCUVVFc1EwRkJReXhGUVVGRlNpeHZRa0ZFUlR0QlFVVk1TeXhOUVVGQlFTeERRVUZETEVWQlFVVk9PMEZCUmtVN1FVRk1SaXhIUVVGUU8wRkJWVVE3UVVGRlJEczdPenRCUVVkQkxFRkJRVThzVTBGQlUxRXNZVUZCVkN4RFFVTk1ReXhKUVVSTExFVkJSVXhETEZOQlJrc3NSVUZIVERGQ0xGVkJTRXNzUlVGSlRFc3NUMEZLU3l4RlFVdE1UeXhOUVV4TExFVkJUVXhXTEZkQlRrc3NSVUZQVER0QlFVTkJMRTFCUVVsNVFpeFZRVUZWTEVkQlFVZEdMRWxCUVVrc1EwRkJRM0JsTEVsQlFYUkNPMEZCUTBFc1RVRkJTWFZsTEZOQlFWTXNSMEZCUjBnc1NVRkJTU3hEUVVGRE4yTXNSMEZCY2tJN1FVRkZRU3hOUVVGSmFXUXNVVUZCVVN4SFFVRkhlRUlzVDBGQlR5eExRVUZMTEUxQlFWb3NSMEZCY1VJc1EwRkJRMVFzV1VGQmRFSXNSMEZCY1VNc1NVRkJjRVE3UVVGRFFTeE5RVUZKYTBNc1ZVRkJWU3hIUVVGSGVrSXNUMEZCVHl4TFFVRkxMRTFCUVZvc1IwRkJjVUlzUTBGQlExUXNXVUZCUkN4SFFVRm5RaXhEUVVGeVF5eEhRVUY1UXl4SlFVRXhSRHRCUVVOQkxFMUJRVWx0UXl4WFFVRlhMRWRCUVVjeFFpeFBRVUZQTEV0QlFVc3NTVUZCV2l4SFFVRnRRaXhEUVVGRFZDeFpRVUZ3UWl4SFFVRnRReXhKUVVGeVJEdEJRVU5CTEUxQlFVbHZReXhUUVVGVExFZEJRVWN6UWl4UFFVRlBMRXRCUVVzc1QwRkJXaXhIUVVGelFpeERRVUZEVkN4WlFVRkVMRWRCUVdkQ0xFTkJRWFJETEVkQlFUQkRMRWxCUVRGRU96dEJRVVZCTEUxQlFVbG5RaXhOUVVGTkxFdEJRVXNzU1VGQlppeEZRVUZ4UWp0QlFVTnVRbWRDTEVsQlFVRkJMRk5CUVZNc1IwRkJSMGdzU1VGQlNTeERRVUZETjJNc1IwRkJUQ3hIUVVGWE9HTXNVMEZCVXl4RFFVRkRUaXhOUVVGV0xFTkJRV2xDUlN4RFFVRjRRenRCUVVOQlR5eEpRVUZCUVN4UlFVRlJMRWRCUVVkSUxGTkJRVk1zUTBGQlEwZ3NTMEZCVml4RFFVRm5Ra1FzUTBGQk0wSTdRVUZEUkN4SFFVaEVMRTFCUjA4c1NVRkJTVllzVFVGQlRTeExRVUZMTEUxQlFXWXNSVUZCZFVJN1FVRkROVUpuUWl4SlFVRkJRU3hUUVVGVExFZEJRMUJJTEVsQlFVa3NRMEZCUXpkakxFZEJRVXdzUjBGQlYyOWlMRlZCUVZVc1EwRkJRMnhrTEUxQlFYUkNMRWRCUVN0Q2IyUXNWMEZCVnl4RFFVRkRjR1FzVFVGQk0wTXNSMEZCYjBRMFpTeFRRVUZUTEVOQlFVTk9MRTFCUVZZc1EwRkJhVUpGTEVOQlJIWkZPMEZCUlVGVExFbEJRVUZCTEZkQlFWY3NSMEZCUjB3c1UwRkJVeXhEUVVGRFNDeExRVUZXTEVOQlFXZENSQ3hEUVVFNVFqdEJRVU5FTEVkQlNrMHNUVUZKUVN4SlFVRkpWaXhOUVVGTkxFdEJRVXNzVFVGQlppeEZRVUYxUWp0QlFVTTFRbVVzU1VGQlFVRXNWVUZCVlN4SFFVRkhSaXhKUVVGSkxFTkJRVU53WlN4SlFVRk1MRWRCUVZseFpTeFRRVUZUTEVOQlFVTk9MRTFCUVZZc1EwRkJhVUpETEVOQlFURkRPMEZCUTBGWExFbEJRVUZCTEZOQlFWTXNSMEZCUjA0c1UwRkJVeXhEUVVGRFNDeExRVUZXTEVOQlFXZENSaXhEUVVFMVFqdEJRVU5FTEVkQlNFMHNUVUZIUVN4SlFVRkpWQ3hOUVVGTkxFdEJRVXNzVDBGQlppeEZRVUYzUWp0QlFVTTNRbVVzU1VGQlFVRXNWVUZCVlN4SFFVTlNSaXhKUVVGSkxFTkJRVU53WlN4SlFVRk1MRWRCUVZreVl5eFZRVUZWTEVOQlFVTnNZaXhMUVVGMlFpeEhRVUVyUW05aUxGZEJRVmNzUTBGQlEzQmlMRXRCUVRORExFZEJRVzFFTkdNc1UwRkJVeXhEUVVGRFRpeE5RVUZXTEVOQlFXbENReXhEUVVSMFJUdEJRVVZCVXl4SlFVRkJRU3hWUVVGVkxFZEJRVWRLTEZOQlFWTXNRMEZCUTBnc1MwRkJWaXhEUVVGblFrWXNRMEZCTjBJN1FVRkRSQ3hIUVVwTkxFMUJTVUVzU1VGQlNWUXNUVUZCVFN4TFFVRkxMRkZCUVdZc1JVRkJlVUk3UVVGRE9VSXNVVUZCU1ZBc1QwRkJUeXhMUVVGTExFMUJRVm9zU1VGQmMwSkJMRTlCUVU4c1MwRkJTeXhQUVVGMFF5eEZRVUVyUXp0QlFVTTNReXhWUVVGTlJ5eFZRVUZWTEVkQlFVZHZRaXhUUVVGVExFZEJRVWN4UWl4WFFVRlhMRU5CUVVOd1pDeE5RVUZhTEVkQlFYRkNMRU5CUVhCRU8wRkJRMEU0WlN4TlFVRkJRU3hUUVVGVExFZEJRVWR3UWl4VlFVRlZMRWRCUVVkU0xGVkJRVlVzUTBGQlEyeGtMRTFCUVZnc1IwRkJiMElzUTBGQk4wTTdRVUZEUVN0bExFMUJRVUZCTEZGQlFWRXNSMEZCUnl4RFFVRkROMElzVlVGQlZTeERRVUZEYkdRc1RVRkJXQ3hIUVVGdlFqaGpMRmxCUVhKQ0xFbEJRWEZETEVOQlFXaEVPMEZCUTBRN08wRkJRMFFzVVVGQlNWTXNUMEZCVHl4TFFVRkxMRWxCUVZvc1NVRkJiMEpCTEU5QlFVOHNTMEZCU3l4TlFVRndReXhGUVVFMFF6dEJRVU14UXl4VlFVRk5SeXhYUVVGVkxFZEJRVWR0UWl4VlFVRlZMRWRCUVVkNlFpeFhRVUZYTEVOQlFVTndZaXhMUVVGYUxFZEJRVzlDTEVOQlFYQkVPenRCUVVOQk5tTXNUVUZCUVVFc1ZVRkJWU3hIUVVGSGJrSXNWMEZCVlN4SFFVRkhVaXhWUVVGVkxFTkJRVU5zWWl4TFFVRllMRWRCUVcxQ0xFTkJRVGRETzBGQlEwRnJaQ3hOUVVGQlFTeFRRVUZUTEVkQlFVY3NRMEZCUTJoRExGVkJRVlVzUTBGQlEyeGlMRXRCUVZnc1IwRkJiVUk0WVN4WlFVRndRaXhKUVVGdlF5eERRVUZvUkR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlR6dEJRVU5NY1VNc1NVRkJRVUVzV1VGQldTeEZRVUZGTzBGQlExcHlaQ3hOUVVGQlFTeEhRVUZITEVWQlFVVm5aQ3hUUVVSUE8wRkJSVnAyWlN4TlFVRkJRU3hKUVVGSkxFVkJRVVZ6WlR0QlFVWk5MRXRCUkZRN1FVRkxURThzU1VGQlFVRXNWMEZCVnl4RlFVRkZPMEZCUTFoMFpDeE5RVUZCUVN4SFFVRkhMRVZCUVVWcFpDeFJRVVJOTzBGQlJWaHVaQ3hOUVVGQlFTeExRVUZMTEVWQlFVVnZaQ3hWUVVaSk8wRkJSMWh5YVVJc1RVRkJRVUVzVFVGQlRTeEZRVUZGYzJsQ0xGZEJTRWM3UVVGSldERmxMRTFCUVVGQkxFbEJRVWtzUlVGQlJUSmxPMEZCU2tzN1FVRk1VaXhIUVVGUU8wRkJXVVE3UVVGRlJEczdRVUZEUVN4QlFVRlBMRk5CUVZOSExGZEJRVlFzUTBGRFRFTXNVVUZFU3l4RlFVVk1ReXhqUVVaTExFVkJSMHh5UXl4VlFVaExMRVZCU1V4TExFOUJTa3NzUlVGTFRFZ3NWMEZNU3l4RlFVMU1ReXhWUVU1TExFVkJUMHc3UVVGRFFTeE5RVUZOYlVNc1pVRkJaU3hIUVVGSFJpeFJRVUZSTEVkQlFVZDRReXhaUVVGWkxFZEJRVWNzUTBGQmJFSXNSMEZCYzBJc1EwRkJkRVFzUTBGRVFUczdRVUZIUVN4TlFVRkphR0lzUjBGQlNqczdRVUZEUVN4TlFVRkplV0lzVDBGQlR5eExRVUZMTEUxQlFXaENMRVZCUVhkQ08wRkJRM1JDZW1Jc1NVRkJRVUVzUjBGQlJ5eEhRVUZIZFdJc1ZVRkJWU3hEUVVGREwySXNUMEZCV0N4SFFVRnhRamhpTEZkQlFWY3NRMEZCUTNwblFpeE5RVUZxUXl4SFFVRXdRelpwUWl4bFFVRm9SRHRCUVVORUxFZEJSa1FzVFVGRlR5eEpRVUZKYWtNc1QwRkJUeXhMUVVGTExFbEJRV2hDTEVWQlFYTkNPMEZCUXpOQ2VtSXNTVUZCUVVFc1IwRkJSeXhIUVVORWRXSXNWVUZCVlN4RFFVRkRMMklzVDBGQldDeEpRVU5ET0dJc1YwRkJWeXhEUVVGRGRHSXNSMEZCV2l4SFFVRnJRbTlpTEZWQlFWVXNRMEZCUTJ4a0xFMUJRVGRDTEVkQlFYTkRkMllzWlVGRWRrTXNRMEZFUmp0QlFVZEVMRWRCU2swc1RVRkpRVHRCUVVOTU8wRkJRMEV4WkN4SlFVRkJRU3hIUVVGSExFZEJRVWQxWWl4VlFVRlZMRU5CUVVNdllpeFBRVUZZTEVkQlFYRkNPR0lzVjBGQlZ5eERRVUZEZEdJc1IwRkJka003UVVGRFJDeEhRV0pFT3pzN1FVRm5Ra0VzVFVGQlNYWkNMRWxCUVVvN08wRkJRMEVzVFVGQlNXZGtMRTlCUVU4c1MwRkJTeXhOUVVGb1FpeEZRVUYzUWp0QlFVTjBRbWhrTEVsQlFVRkJMRWxCUVVrc1IwRkRSamhqTEZWQlFWVXNRMEZCUTJwakxFOUJRVmdzU1VGRFEyZGpMRmRCUVZjc1EwRkJRemRqTEVsQlFWb3NSMEZCYlVJeVl5eFZRVUZWTEVOQlFVTnNZaXhMUVVFNVFpeEhRVUZ6UTNka0xHVkJSSFpETEVOQlJFWTdRVUZIUkN4SFFVcEVMRTFCU1U4c1NVRkJTV3BETEU5QlFVOHNTMEZCU3l4UFFVRm9RaXhGUVVGNVFqdEJRVU01UW1oa0xFbEJRVUZCTEVsQlFVa3NSMEZCUnpoakxGVkJRVlVzUTBGQlEycGpMRTlCUVZnc1IwRkJjVUpuWXl4WFFVRlhMRU5CUVVONFlpeExRVUZxUXl4SFFVRjVRelJrTEdWQlFXaEVPMEZCUTBRc1IwRkdUU3hOUVVWQk8wRkJRMHc3UVVGRFFXcG1MRWxCUVVGQkxFbEJRVWtzUjBGQlJ6aGpMRlZCUVZVc1EwRkJRMnBqTEU5QlFWZ3NSMEZCY1VKbll5eFhRVUZYTEVOQlFVTTNZeXhKUVVGNFF6dEJRVU5FTEVkQk1VSkVPenM3UVVFMlFrRjFRaXhGUVVGQlFTeEhRVUZITEVsQlFVbDVaQ3hqUVVGakxFTkJRVU5tTEVOQlFYUkNPMEZCUTBGcVpTeEZRVUZCUVN4SlFVRkpMRWxCUVVsblppeGpRVUZqTEVOQlFVTm9RaXhEUVVGMlFqdEJRVU5CTEZOQlFVODdRVUZCUlhwakxFbEJRVUZCTEVkQlFVY3NSVUZCU0VFc1IwRkJSanRCUVVGUGRrSXNTVUZCUVVFc1NVRkJTU3hGUVVGS1FUdEJRVUZRTEVkQlFWQTdRVUZEUkRzN1NVRkZiMEpyWmpzN096czdPenM3T3pzN096czdPenMwUkVGblExZzdRVUZEVGs0c1RVRkJRVUVzV1VGQldTeEZRVUZGTzBGQlExcHlaQ3hSUVVGQlFTeEhRVUZITEVWQlFVVjFUeXhUUVVSUE8wRkJSVm81VUN4UlFVRkJRU3hKUVVGSkxFVkJRVVU0VUR0QlFVWk5MRTlCUkZJN1FVRkxUaXRQTEUxQlFVRkJMRmRCUVZjc1JVRkJSVHRCUVVOWWRHUXNVVUZCUVVFc1IwRkJSeXhGUVVGRmRVOHNVMEZFVFR0QlFVVlllazhzVVVGQlFVRXNTMEZCU3l4RlFVRkZlVThzVTBGR1NUdEJRVWRZTVZRc1VVRkJRVUVzVFVGQlRTeEZRVUZGTUZRc1UwRklSenRCUVVsWU9WQXNVVUZCUVVFc1NVRkJTU3hGUVVGRk9GQTdRVUZLU3l4UFFVeFFPMEZCVjA1clRpeE5RVUZCUVN4UFFVRlBMRVZCUVVVc1NVRllTRHRCUVZsT2JVTXNUVUZCUVVFc1UwRkJVeXhGUVVGRk8wRkJXa3c3TzIxRlFYbElUeXhWUVVGRFFTeFRRVUZFTEVWQlFUWkNPMEZCUXpGRExGVkJRVWtzUTBGQlF5eE5RVUZMUXl4TFFVRk1MRU5CUVZkRUxGTkJRV2hDTEVWQlFUSkNPMEZCUTNwQ0xHTkJRVXRGTEZGQlFVd3NRMEZCWXp0QlFVRkZSaXhWUVVGQlFTeFRRVUZUTEVWQlFWUkJPMEZCUVVZc1UwRkJaRHRCUVVORU8wRkJRMFk3T3pzN096czdkME5CT1VkdFFqdEJRVUZCT3p0QlFVRkJMSGRDUVVOakxFdEJRVXQyYzBJc1MwRkVia0k3UVVGQlFTeFZRVU5XTUhOQ0xGRkJSRlVzWlVGRFZrRXNVVUZFVlR0QlFVRkJMRlZCUTBGRExGTkJSRUVzWlVGRFFVRXNVMEZFUVR0QlFVRkJMRlZCUlZaS0xGTkJSbFVzUjBGRlNTeExRVUZMUXl4TFFVWlVMRU5CUlZaRUxGTkJSbFU3UVVGSmJFSkxMRTFCUVVGQkxGVkJRVlVzUTBGQlF5eFpRVUZOTzBGQlEyWXNXVUZCU1N4TlFVRkpMRU5CUVVNMWMwSXNTMEZCVEN4RFFVRlhObk5DTEZkQlFWZ3NTVUZCTUVKT0xGTkJRVGxDTEVWQlFYbERPMEZCUTNaRFFTeFZRVUZCUVN4VFFVRlRMRU5CUVVOUExFdEJRVlk3UVVGRFJEdEJRVU5HTEU5QlNsTXNRMEZCVmp0QlFVMUJhbEFzVFVGQlFVRXNUVUZCVFN4RFFVRkRhMUFzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTk1MRkZCUVd4RE8wRkJRMEUzVHl4TlFVRkJRU3hOUVVGTkxFTkJRVU5yVUN4blFrRkJVQ3hEUVVGM1FpeFRRVUY0UWl4RlFVRnRRMG9zVTBGQmJrTTdRVUZEUkRzN096SkRRVVZ6UWp0QlFVRkJMSGxDUVVOWExFdEJRVXN6YzBJc1MwRkVhRUk3UVVGQlFTeFZRVU5pTUhOQ0xGRkJSR0VzWjBKQlEySkJMRkZCUkdFN1FVRkJRU3hWUVVOSVF5eFRRVVJITEdkQ1FVTklRU3hUUVVSSE8wRkJSM0pDT1U4c1RVRkJRVUVzVFVGQlRTeERRVUZEYlZBc2JVSkJRVkFzUTBGQk1rSXNVVUZCTTBJc1JVRkJjVU5PTEZGQlFYSkRPMEZCUTBFM1R5eE5RVUZCUVN4TlFVRk5MRU5CUVVOdFVDeHRRa0ZCVUN4RFFVRXlRaXhUUVVFelFpeEZRVUZ6UTB3c1UwRkJkRU03UVVGRFJEdEJRVVZFT3pzN096czdPelpDUVRKR1V6dEJRVUZCTEhsQ1FVTjFSQ3hMUVVGTE0zTkNMRXRCUkRWRU8wRkJRVUVzVlVGRFEybDBRaXhQUVVSRUxHZENRVU5EUVN4UFFVUkVPMEZCUVVFc1ZVRkRWUzlJTEUxQlJGWXNaMEpCUTFWQkxFMUJSRlk3UVVGQlFTeFZRVU5yUW05SExFdEJSR3hDTEdkQ1FVTnJRa0VzUzBGRWJFSTdRVUZCUVN4VlFVTjVRbmhpTEZGQlJIcENMR2RDUVVONVFrRXNVVUZFZWtJN1FVRkJRU3hWUVVOdFEycFBMRkZCUkc1RExHZENRVU50UTBFc1VVRkVia003UVVGQlFTeFZRVU0yUTJkT0xFdEJSRGRETEdkQ1FVTTJRMEVzUzBGRU4wTTdRVUZCUVN4M1FrRkZkME1zUzBGQlN6SmtMRXRCUmpkRE8wRkJRVUVzVlVGRlExQXNWMEZHUkN4bFFVVkRRU3hYUVVaRU8wRkJRVUVzVlVGRlkwUXNXVUZHWkN4bFFVVmpRU3haUVVaa08wRkJRVUVzVlVGRk5FSTFRaXhQUVVZMVFpeGxRVVUwUWtFc1QwRkdOVUk3TzBGQlMxQXNWVUZCVFRoRExGVkJRVlVzUjBGQlJ6bERMRTlCUVU4c1MwRkJTeXhKUVVGYUxFZEJRVzFDTEZGQlFXNUNMRWRCUVRoQ0xGTkJRV3BFTzBGQlEwRXNWVUZCVFN0RExGVkJRVlVzWVVGQlRVWXNUMEZCVGl4UFFVRm9RanRCUVVOQkxGVkJRVTFITEUxQlFVMHNSMEZCUjBnc1QwRkJUeXhMUVVGTExFOUJRVm9zUjBGQmMwSXNVMEZCZEVJc1IwRkJhME1zU1VGQmFrUTdRVUZGUVN3d1FrRkRSVGRqTzBGQlEwVXNVVUZCUVN4VFFVRlRMRVZCUVVWb1VpeFJRVUZOTEVOQlFVTnBkVUlzVTBGRWNFSTdRVUZGUlN4UlFVRkJMRXRCUVVzN1FVRkJTVVFzVlVGQlFVRXNUVUZCVFN4RlFVRk9RU3hOUVVGS08wRkJRVmxHTEZWQlFVRkJMRlZCUVZVc1JVRkJWa0U3UVVGQldpeFhRVUV5UW14Q0xGbEJRVE5DTzBGQlJsQXNjMEpCU1VVMVlqdEJRVU5GTEZGQlFVRXNVMEZCVXl4RlFVRkZkMDBzVlVGQlZTeERRVU51UWk5aExGRkJRVkVzUzBGQlN5eERRVUZpTEVsQlFXdENSU3hQUVVGUExFTkJRVU4xY2tJc1UwRkVVQ3hGUVVWdVFucHlRaXhSUVVGUkxFdEJRVXNzUTBGQllpeEpRVUZyUWtVc1QwRkJUeXhEUVVGRGQzSkNMRk5CUmxBc1JVRkhia0p1ZFVJc1VVRkJUU3hEUVVGRGIzVkNMRkZCU0Zrc1JVRkpia0p3ZFVJc1VVRkJUU3hEUVVGRGNYVkNMR0ZCU2xrc1JVRkxia0kxWlN4TFFVRkxMRXRCUVVzc1NVRkJWaXhKUVVGclFucFFMRkZCUVUwc1EwRkJRM04xUWl4aFFVeE9MRU5CUkhaQ08wRkJVVVVzVVVGQlFTeEhRVUZITEVWQlFVVXNTMEZCUzBNc1dVRlNXanRCUVZORkxGRkJRVUVzVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZVWWl4VFFWZEhja01zUzBGQlN5eHBRa0ZEU214aU8wRkJRMFVzVVVGQlFTeFRRVUZUTEVWQlFVVjNUU3hWUVVGVkxFTkJRVU16VXl4TlFVRk5MRU5CUVVObmFrSXNUMEZCUkN4RFFVRlFMRVZCUVd0Q04zUkNMRkZCUVUwc1EwRkJRMnR6UWl4TFFVRjZRaXhEUVVSMlFqdEJRVVZGTEZGQlFVRXNTMEZCU3l4eFFrRkJUMWNzVjBGQlVEdEJRVVpRTEhOQ1FVbEZOMklzWTBGQlF5eExRVUZFTzBGQlFVOHNVVUZCUVN4VFFVRlRMRVZCUVVWbllUdEJRVUZzUWl4UlFVcEdMRU5CV2tvc1pVRnRRa1ZvWVR0QlFVTkZMRkZCUVVFc1UwRkJVeXhGUVVGRmQwMHNWVUZCVlN4RFFVTnVRbk5KTEUxQlFVMHNTVUZCU1Rsc1FpeFJRVUZOTEVOQlFVTTRiRUlzVFVGRVJTeEZRVVZ1UW1waUxFMUJRVTBzUTBGQlEydHFRaXhWUVVGRUxFTkJSbUVzUlVGSGJrSnNha0lzVFVGQlRTeERRVUZEWjJwQ0xFOUJRVVFzUTBGSVlTeEZRVWx1UW5CeVFpeFJRVUZSTEV0QlFVc3NRMEZCWWl4SlFVRnJRa1VzVDBGQlR5eERRVUZEZFhKQ0xGTkJTbEFzUlVGTGJrSjZja0lzVVVGQlVTeExRVUZMTEVOQlFXSXNTVUZCYTBKRkxFOUJRVThzUTBGQlEzZHlRaXhUUVV4UUxFVkJUVzVDYm5WQ0xGRkJRVTBzUTBGQlEzZDFRaXhoUVU1WkxFVkJUMjVDZUhWQ0xGRkJRVTBzUTBGQlEzRjFRaXhoUVZCWkxFVkJVVzVDTldVc1MwRkJTeXhMUVVGTExFbEJRVllzU1VGQmEwSjZVQ3hSUVVGTkxFTkJRVU56ZFVJc1lVRlNUaXhEUVVSMlFqdEJRVmRGTEZGQlFVRXNTMEZCU3l4RlFVRkZPMEZCUVVWdVowSXNWVUZCUVVFc1VVRkJVU3hGUVVGRmMwSTdRVUZCV2p0QlFWaFVMRk5CWVVkcFFpeFJRV0pJTEVOQmJrSkdMRU5CU2tZc1EwRkVSanRCUVRCRFJEczdPekJFUVdoSlF6dEJRVUZCTEZWQlVrVjNZaXhMUVZGR0xGRkJVa1ZCTEV0QlVVWTdRVUZCUVN4VlFWQkZkRUlzWTBGUFJpeFJRVkJGUVN4alFVOUdPMEZCUVVFc1ZVRk9SVFpFTEhkQ1FVMUdMRkZCVGtWQkxIZENRVTFHTzBGQlFVRXNWVUZNUlhwQ0xHTkJTMFlzVVVGTVJVRXNZMEZMUmp0QlFVRkJMRlZCU2tWdVF5eFhRVWxHTEZGQlNrVkJMRmRCU1VZN1FVRkJRU3hWUVVoRmNHSXNTMEZIUml4UlFVaEZRU3hMUVVkR08wRkJRVUVzVlVGRVJUQmtMRk5CUTBZc1UwRkVSVUVzVTBGRFJqdEJRVU5CTzBGQlEwRTdRVUZEUVN4VlFVRk5kR1VzVDBGQlR5eEhRVUZITkdZc2QwSkJRWGRDTEVkQlEzQkRMRU5CUkc5RExFZEJSWEJEYUZFc1RVRkJUU3hEUVVGRGFWRXNWMEZCVUN4SlFVTkRReXhSUVVGUkxFTkJRVU5ETEdWQlFWUXNTVUZCTkVKRUxGRkJRVkVzUTBGQlEwTXNaVUZCVkN4RFFVRjVRa01zVlVGRWRFUXNTVUZGUVN4RFFVcEtPMEZCUzBFc1ZVRkJUVGxtTEU5QlFVOHNSMEZCUnpCbUxIZENRVUYzUWl4SFFVTndReXhEUVVSdlF5eEhRVVZ3UTJoUkxFMUJRVTBzUTBGQlEzRlJMRmRCUVZBc1NVRkRRMGdzVVVGQlVTeERRVUZEUXl4bFFVRlVMRWxCUVRSQ1JDeFJRVUZSTEVOQlFVTkRMR1ZCUVZRc1EwRkJlVUpITEZOQlJIUkVMRWxCUlVFc1EwRktTanRCUVUxQkxGVkJRVTFxUlN4VlFVRlZMRWRCUVVjN1FVRkRha0p5WkN4UlFVRkJRU3hOUVVGTkxFVkJRVVZuVWl4TlFVRk5MRU5CUVVOMVVTeFhRVVJGTzBGQlJXcENkbVlzVVVGQlFVRXNTMEZCU3l4RlFVRkZaMUFzVFVGQlRTeERRVUZEZDFFc1ZVRkdSenRCUVVkcVFuQm5RaXhSUVVGQlFTeFBRVUZQTEVWQlFWQkJMRTlCU0dsQ08wRkJTV3BDUlN4UlFVRkJRU3hQUVVGUExFVkJRVkJCTzBGQlNtbENMRTlCUVc1Q08wRkJUMEVzVlVGQlRUUmlMRlZCUVZVc1IwRkJSenRCUVVOcVFteGtMRkZCUVVGQkxFMUJRVTBzUlVGQlJUQm1MRk5CUVZNc1IwRkJSMEVzVTBGQlV5eERRVUZESzBJc1dVRkJZaXhIUVVFMFFpeERRVVExUWp0QlFVVnFRbnBtTEZGQlFVRkJMRXRCUVVzc1JVRkJSU3hEUVVGRE1HUXNVMEZCVXl4SFFVRkhRU3hUUVVGVExFTkJRVU5uUXl4WFFVRmlMRWRCUVRKQ01XWXNTMEZCY2tNc1MwRkJLME03UVVGR2NrTXNUMEZCYmtJc1EwRnlRa0U3TzBGQk1rSkJMRlZCUVUxMVlpeFBRVUZQTEVkQlFVZE9MRlZCUVZVc1EwRkRlRUpETEZWQlJIZENMRVZCUlhoQ1F5eGpRVVozUWl4RlFVZDRRa01zVjBGSWQwSXNSVUZKZUVKRExGVkJTbmRDTEVOQlFURkNMRU5CTTBKQk96dEJRVzFEUVN4VlFVRk5VeXhOUVVGTkxFZEJRVWRPTEZOQlFWTXNRMEZCUTA0c1ZVRkJSQ3hGUVVGaFN5eFBRVUZpTEVWQlFYTkNTQ3hYUVVGMFFpeEZRVUZ0UTBNc1ZVRkJia01zUTBGQmVFSXNRMEZ1UTBFN08wRkJjME5CTEZWQlFVMXpRaXhKUVVGSkxFZEJRVWRWTEZkQlFWY3NRMEZEZEVKelF5eFBRVUZQTEVOQlFVTnNSQ3hMUVVGRUxFTkJSR1VzUlVGRmRFSmpMR05CUm5OQ0xFVkJSM1JDY2tNc1ZVRkljMElzUlVGSmRFSkxMRTlCU25OQ0xFVkJTM1JDU0N4WFFVeHpRaXhGUVUxMFFrTXNWVUZPYzBJc1EwRkJlRUlzUTBGMFEwRTdPMEZCWjBSQkxGVkJRVTExUlN4VlFVRlZMRWRCUVVjM1JDeGpRVUZqTEVOQlFVTkVMRTFCUVVRc1JVRkJVMVlzVjBGQlZDeEZRVUZ6UWtNc1ZVRkJkRUlzUTBGQmFrTXNRMEZvUkVFN08wRkJRVUVzTWtKQmJVUnpRM0ZDTEdGQlFXRXNRMEZEYWtSRExFbEJSR2xFTEVWQlJXcEVhVVFzVlVGR2FVUXNSVUZIYWtReFJTeFZRVWhwUkN4RlFVbHFSRXNzVDBGS2FVUXNSVUZMYWtSUExFMUJUR2xFTEVWQlRXcEVWaXhYUVU1cFJDeERRVzVFYmtRN1FVRkJRU3hWUVcxRVVTdENMRmxCYmtSU0xHdENRVzFFVVVFc1dVRnVSRkk3UVVGQlFTeFZRVzFFYzBKRExGZEJia1IwUWl4clFrRnRSSE5DUVN4WFFXNUVkRUk3TzBGQk5FUkJMR0ZCUVU4N1FVRkRURUVzVVVGQlFVRXNWMEZCVnl4RlFVRllRU3hYUVVSTE8wRkJSVXhFTEZGQlFVRkJMRmxCUVZrc1JVRkJXa0VzV1VGR1N6dEJRVWRNTlVJc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVR0QlFVaExMRTlCUVZBN1FVRkxSRHRCUVVkRU8wRkJRMEU3UVVGRFFUczdPenM3UlVGNFNtOURlR0U3TzJkQ1FVRnFRakJqTEhWQ1FVTkJPMEZCUTJwQ1Z5eEZRVUZCUVN4UFFVRlBMRVZCUVVVeFl5eFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eE5RVUZFTEVWQlFWTXNWVUZCVkN4RlFVRnhRaXhSUVVGeVFpeEZRVUVyUWl4TFFVRXZRaXhGUVVGelF5eFBRVUYwUXl4RFFVRm9RaXhEUVVSUk8wRkJSV3BDTUZVc1JVRkJRVUVzVFVGQlRTeEZRVUZGTTFVc1UwRkJVeXhEUVVGRGMwSXNTVUZHUkR0QlFVZHFRbmxhTEVWQlFVRkJMRXRCUVVzc1JVRkJSUzloTEZOQlFWTXNRMEZCUTNOQ0xFbEJTRUU3UVVGSmFrSXZRaXhGUVVGQlFTeFJRVUZSTEVWQlFVVlRMRk5CUVZNc1EwRkJRMjFDTEVsQlNrZzdRVUZMYWtKeldTeEZRVUZCUVN4alFVRmpMRVZCUVVWNldpeFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eEpRVUZFTEVWQlFVOHNUMEZCVUN4RlFVRm5RaXhOUVVGb1FpeEZRVUYzUWl4TlFVRjRRaXhEUVVGb1FpeERRVXhETzBGQlRXcENiV01zUlVGQlFVRXNVMEZCVXl4RlFVRkZjR01zVTBGQlV5eERRVUZEZVU4c1NVRkJWaXhEUVVGbE5VSXNWVUZPVkR0QlFVOXFRbk5RTEVWQlFVRkJMRkZCUVZFc1JVRkJSVzVqTEZOQlFWTXNRMEZCUTNsUExFbEJRVllzUTBGQlpUVkNMRlZCVUZJN1FVRlJha0puVUN4RlFVRkJRU3hqUVVGakxFVkJRVVUzWWl4VFFVRlRMRU5CUVVOdlFpeExRVUZXTEVOQlFXZENPMEZCUXpsQ2VWb3NTVUZCUVVFc1EwRkJReXhGUVVGRk4yRXNVMEZCVXl4RFFVRkRUeXhOUVVScFFqdEJRVVU1UW5WaExFbEJRVUZCTEVOQlFVTXNSVUZCUlRsaExGTkJRVk1zUTBGQlEwODdRVUZHYVVJc1IwRkJhRUlzUTBGU1F6dEJRVmxxUWl0akxFVkJRVUZCTEhkQ1FVRjNRaXhGUVVGRmRHUXNVMEZCVXl4RFFVRkRjMElzU1VGYWJrSTdRVUZoYWtKb1VTeEZRVUZCUVN4UlFVRlJMRVZCUVVVd1R5eFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RFFVRm9RaXhEUVdKUE8wRkJZMnBDY1dNc1JVRkJRVUVzVjBGQlZ5eEZRVUZGZEdNc1UwRkJVeXhEUVVGRGMwSXNTVUZrVGp0QlFXVnFRbTlaTEVWQlFVRkJMRmRCUVZjc1JVRkJSVEZhTEZOQlFWTXNRMEZCUTI5Q0xFdEJRVllzUTBGQlowSTdRVUZETTBKdVNTeEpRVUZCUVN4TlFVRk5MRVZCUVVVclJ5eFRRVUZUTEVOQlFVTlBMRTFCUkZNN1FVRkZNMEpxUlN4SlFVRkJRU3hOUVVGTkxFVkJRVVV3UkN4VFFVRlRMRU5CUVVOUExFMUJSbE03UVVGSE0wSXhSQ3hKUVVGQlFTeEpRVUZKTEVWQlFVVnRSQ3hUUVVGVExFTkJRVU5QTEUxQlNGYzdRVUZKTTBKeVF5eEpRVUZCUVN4TFFVRkxMRVZCUVVVNFFpeFRRVUZUTEVOQlFVTlBMRTFCU2xVN1FVRkxNMEp1UXl4SlFVRkJRU3hIUVVGSExFVkJRVVUwUWl4VFFVRlRMRU5CUVVOUExFMUJURms3UVVGTk0wSnFReXhKUVVGQlFTeExRVUZMTEVWQlFVVXdRaXhUUVVGVExFTkJRVU5QTzBGQlRsVXNSMEZCYUVJc1EwRm1TVHRCUVhWQ2FrSnFReXhGUVVGQlFTeExRVUZMTEVWQlFVVXdRaXhUUVVGVExFTkJRVU5QTzBGQmRrSkJPenRuUWtGRVFYZGlMREJDUVRKQ1J6dEJRVU53UW5CSUxFVkJRVUZCTEUxQlFVMHNSVUZCUlN4SlFVUlpPMEZCUlhCQ2IwY3NSVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJSbUU3TzBGRGFGZFVMRk5CUVZOdlJDeHZRa0ZCVkN4UFFVRTBSRHRCUVVGQkxFMUJRVFZDTldVc1VVRkJORUlzVVVGQk5VSkJMRkZCUVRSQ08wRkJRVUVzVFVGQmJFSjVVeXhQUVVGclFpeFJRVUZzUWtFc1QwRkJhMEk3UVVGRGVrVXNUVUZCVFc5TkxFOUJRVThzUjBGQlJ5OWxMRTFCUVVFc1EwRkJPRUlzU1VGQk9VSXNRMEZCYUVJN1FVRkZRVUVzUlVGQlFVRXNVMEZCUVN4RFFVRm5RaXhaUVVGTk8wRkJRM0JDTEZGQlFVMW5aaXhuUWtGQlowSXNSMEZCUnl4VFFVRnVRa0VzWjBKQlFXMUNMRU5CUVVNMVRDeExRVUZFTEVWQlFYVkNPMEZCUXpsRExGVkJRMFVzUTBGQlExUXNUMEZCUkN4SlFVTkJMRU5CUVVOdlRTeFBRVVJFTEVsQlJVTXpUQ3hMUVVGTExFTkJRVU0wUWl4TlFVRk9MRmxCUVhkQ2FVc3NTVUZCZUVJc1NVRkRRMFlzVDBGQlR5eERRVUZEYWtzc1QwRkVWQ3hKUVVWRGFVc3NUMEZCVHl4RFFVRkRha3NzVDBGQlVpeERRVUZuUW5oV0xGRkJRV2hDTEVOQlFYbENPRlFzUzBGQlN5eERRVUZETkVJc1RVRkJMMElzUTBGTVNpeEZRVTFGTzBGQlEwRTdRVUZEUkRzN1FVRkRSSEpETEUxQlFVRkJMRTlCUVU4c1EwRkJRMU1zUzBGQlJDeERRVUZRTzBGQlEwUXNTMEZZUkRzN1FVRmhRU3RMTEVsQlFVRkJMRkZCUVZFc1EwRkJRMmhDTEdkQ1FVRlVMRU5CUVRCQ0xFOUJRVEZDTEVWQlFXMUROa0lzWjBKQlFXNURMRVZCUVhGRU8wRkJRMjVFUlN4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRU1FTXNTMEZCY2tRN1FVRkhRU3hYUVVGUExGTkJRVk5ETEU5QlFWUXNSMEZCYlVJN1FVRkRlRUpvUWl4TlFVRkJRU3hSUVVGUkxFTkJRVU5tTEcxQ1FVRlVMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRORUlzWjBKQlFYUkRMRVZCUVhkRU8wRkJRM1JFUlN4UlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRU5rTXNUMEZCZUVRN1FVRkhSQ3hMUVVwRU8wRkJTMFFzUjBGMFFrUXNSVUZ6UWtjc1EwRkJRM1pOTEU5QlFVUXNRMEYwUWtnN1FVRjNRa0VzYzBKQlFVOXVVenRCUVVGTExFbEJRVUVzUjBGQlJ5eEZRVUZGZFdVN1FVRkJWaXhMUVVGdlFqZGxMRkZCUVhCQ0xFTkJRVkE3UVVGRFJEczdRVU5vUWtRc1NVRkJUV3RtTEdOQlFXTXNSMEZCUnp0QlFVTnlRbkJ4UWl4RlFVRkJRU3hGUVVGRkxFVkJRVVVzUjBGRWFVSTdRVUZGY2tKRkxFVkJRVUZCTEVWQlFVVXNSVUZCUlN4SFFVWnBRanRCUVVkeVFrTXNSVUZCUVVFc1JVRkJSU3hGUVVGRkxFZEJTR2xDTzBGQlNYSkNReXhGUVVGQlFTeEZRVUZGTEVWQlFVVXNSMEZLYVVJN1FVRkxja0puWWl4RlFVRkJRU3hGUVVGRkxFVkJRVVU3UVVGTWFVSXNRMEZCZGtJN1FVRlJRU3hKUVVGTmFWQXNaVUZCWlN4SFFVRkhMRVZCUVhoQ096dEJRVzFDUVN4VFFVRlRReXhqUVVGVUxFTkJRMFZETEUxQlJFWXNSVUZGUlhSQ0xIZENRVVpHTEVWQlIwVTdRVUZEUVN4TlFVRkpkVUlzYlVKQlFVbzdRVUZEUVN4TlFVRkphRVFzWTBGQlNqczdRVUZEUVN4TlFVRkpLME1zVFVGQlNpeEZRVUZaTzBGQlExWkRMRWxCUVVGQkxHMUNRVUZ0UWl4SFFVRkhSQ3hOUVVGTkxFTkJRVU5GTEhGQ1FVRlFMRVZCUVhSQ0xFTkJSRlU3TzBGQlNWWnFSQ3hKUVVGQlFTeGpRVUZqTEVkQlFVYzdRVUZEWm1oQ0xFMUJRVUZCTEVOQlFVTXNSVUZCUlhsRExIZENRVUYzUWl4SFFVTjJRblZDTEcxQ1FVRnRRaXhEUVVGRGFHbENMRWxCUVhCQ0xFZEJRVEpDSzJoQ0xFMUJRVTBzUTBGQlEwY3NWVUZFV0N4SFFVVjJRaXhEUVVoWE8wRkJTV1pxUlN4TlFVRkJRU3hEUVVGRExFVkJRVVYzUXl4M1FrRkJkMElzUjBGRGRrSjFRaXh0UWtGQmJVSXNRMEZCUTNwblFpeEhRVUZ3UWl4SFFVRXdRbmRuUWl4TlFVRk5MRU5CUVVOSkxGTkJSRllzUjBGRmRrSTdRVUZPVnl4TFFVRnFRanRCUVZGRU96dEJRVVZFTEZOQlFVODdRVUZCUlc1RUxFbEJRVUZCTEdOQlFXTXNSVUZCWkVFc1kwRkJSanRCUVVGclFtZEVMRWxCUVVGQkxHMUNRVUZ0UWl4RlFVRnVRa0U3UVVGQmJFSXNSMEZCVUR0QlFVTkVPenRKUVVWdlFrazdPenM3T3pzN096czdPenM3T3pzN05FUkJLMEpZTzBGQlEwNXdSQ3hOUVVGQlFTeGpRVUZqTEVWQlFVVTdRVUZEWkdoQ0xGRkJRVUZCTEVOQlFVTXNSVUZCUlN4RFFVUlhPMEZCUldSRExGRkJRVUZCTEVOQlFVTXNSVUZCUlR0QlFVWlhMRTlCUkZZN1FVRkxUaXRFTEUxQlFVRkJMRzFDUVVGdFFpeEZRVUZGTzBGQlEyNUNOV3hDTEZGQlFVRkJMRTFCUVUwc1JVRkJSU3hEUVVSWE8wRkJSVzVDY1VRc1VVRkJRVUVzVFVGQlRTeEZRVUZGTEVOQlJsYzdRVUZIYmtKUExGRkJRVUZCTEVsQlFVa3NSVUZCUlN4RFFVaGhPMEZCU1c1Q2NVSXNVVUZCUVVFc1MwRkJTeXhGUVVGRkxFTkJTbGs3UVVGTGJrSkZMRkZCUVVGQkxFZEJRVWNzUlVGQlJTeERRVXhqTzBGQlRXNUNSU3hSUVVGQlFTeExRVUZMTEVWQlFVVTdRVUZPV1R0QlFVeG1PenR2UlVGdFFsRXNWVUZCUTIxVkxFdEJRVVFzUlVGQlowTTdRVUZCUVN4VlFVTjBRM2xOTEZOQlJITkRMRWRCUTNoQ0xFMUJRVXQ2ZGtJc1MwRkViVUlzUTBGRGRFTjVka0lzVTBGRWMwTTdPMEZCUlRsRExGVkJRVWw2VFN4TFFVRkxMRU5CUVVNd1RTeFBRVUZPTEV0QlFXdENWQ3hsUVVGMFFpeEZRVUYxUXp0QlFVTnlRMUVzVVVGQlFVRXNVMEZCVXp0QlFVTldPMEZCUTBZN08zTkZRVVZwUWl4VlFVRkRlazBzUzBGQlJDeEZRVUZyUWp0QlFVRkJMSGRDUVVOS0xFMUJRVXRvYWtJc1MwRkVSRHRCUVVGQkxGVkJRekZDYlhaQ0xFMUJSREJDTEdWQlF6RkNRU3hOUVVRd1FqdEJRVUZCTEZWQlEyeENUU3hUUVVSclFpeGxRVU5zUWtFc1UwRkVhMEk3TzBGQlJXeERMRlZCUVVsNlRTeExRVUZMTEVOQlFVTTBRaXhOUVVGT0xGbEJRWGRDYVVzc1NVRkJlRUlzU1VGQlowTXNRMEZCUTAwc1RVRkJUU3hEUVVGRGFtZENMRkZCUVZBc1EwRkJaMEk0VkN4TFFVRkxMRU5CUVVNMFFpeE5RVUYwUWl4RFFVRnlReXhGUVVGdlJUdEJRVU5zUlRaTExGRkJRVUZCTEZOQlFWTTdRVUZEVmp0QlFVTkdPenR0UlVGRll5eFpRVUZOTzBGQlEyNUNMRmxCUVV0RkxHbENRVUZNTEVOQlFYVkNMRTFCUVVzemRrSXNTMEZCTlVJN1FVRkRSRHM3ZDBWQlJXMUNMR2RDUVVGcFJEdEJRVUZCTEZWQlFUbERiWFpDTEUxQlFUaERMRkZCUVRsRFFTeE5RVUU0UXp0QlFVRkJMRlZCUVhSRGRFSXNkMEpCUVhORExGRkJRWFJEUVN4M1FrRkJjME03TzBGQlFVRXNORUpCUTI1Q2NVSXNZMEZCWXl4RFFVTTFSRU1zVFVGRU5FUXNSVUZGTlVSMFFpeDNRa0ZHTkVRc1EwRkVTenRCUVVGQkxGVkJRek5FZWtJc1kwRkVNa1FzYlVKQlF6TkVRU3hqUVVReVJEdEJRVUZCTEZWQlF6TkRaMFFzYlVKQlJESkRMRzFDUVVNelEwRXNiVUpCUkRKRE96dEJRVXR1UlN4WlFVRkxNME1zVVVGQlRDeERRVUZqTzBGQlFVVk1MRkZCUVVGQkxHTkJRV01zUlVGQlpFRXNZMEZCUmp0QlFVRnJRbWRFTEZGQlFVRkJMRzFDUVVGdFFpeEZRVUZ1UWtFN1FVRkJiRUlzVDBGQlpEdEJRVU5FT3pzN096czdPM2REUVRWQ2JVSTdRVUZEYkVJc1YwRkJTMDhzYVVKQlFVd3NRMEZCZFVJc1MwRkJTek4yUWl4TFFVRTFRanRCUVVORU96czdOa0pCTkVKUk8wRkJRVUVzZVVKQlYwZ3NTMEZCUzBFc1MwRllSanRCUVVGQkxGVkJSVXhwZEVJc1QwRkdTeXhuUWtGRlRFRXNUMEZHU3p0QlFVRkJMRlZCUjB3dlNDeE5RVWhMTEdkQ1FVZE1RU3hOUVVoTE8wRkJRVUVzVlVGSlRHOUhMRXRCU2tzc1owSkJTVXhCTEV0QlNrczdRVUZCUVN4VlFVdE1lR0lzVVVGTVN5eG5Ra0ZMVEVFc1VVRk1TenRCUVVGQkxGVkJUVXhyWVN4alFVNUxMR2RDUVUxTVFTeGpRVTVMTzBGQlFVRXNWVUZQVERaRUxIZENRVkJMTEdkQ1FVOU1RU3gzUWtGUVN6dEJRVUZCTEZWQlVVeG9jMElzVVVGU1N5eG5Ra0ZSVEVFc1VVRlNTenRCUVVGQkxGVkJVMHhuY2tJc1YwRlVTeXhuUWtGVFRFRXNWMEZVU3p0QlFVRkJMRlZCVlV3MWMwSXNTVUZXU3l4blFrRlZURUVzU1VGV1N6dEJRVUZCTEhkQ1FWbDVReXhMUVVGTGRYTkNMRXRCV2psRE8wRkJRVUVzVlVGWlEwb3NZMEZhUkN4bFFWbERRU3hqUVZwRU8wRkJRVUVzVlVGWmFVSm5SQ3h0UWtGYWFrSXNaVUZaYVVKQkxHMUNRVnBxUWp0QlFXTlFMRlZCUVUxMlowSXNTMEZCU3l4SFFVRkhMRTlCUVU4MVR5eEpRVUZRTEV0QlFXZENMRkZCUVdoQ0xFZEJRVEpDSzNWQ0xHTkJRV01zUTBGQlF5OTFRaXhKUVVGRUxFTkJRWHBETEVkQlFXdEVRU3hKUVVGb1JUdEJRVVZCTERCQ1FVTkZiVkVzWTBGQlF5eHZRa0ZCUkR0QlFVRnpRaXhSUVVGQkxFOUJRVThzUlVGQlJTeExRVUZMZDJZN1FVRkJjRU1zYzBKQlEwVjRaaXhqUVVGRExGRkJRVVE3UVVGRFJTeFJRVUZCTEU5QlFVOHNSVUZCUlRaakxFOUJSRmc3UVVGRlJTeFJRVUZCTEUxQlFVMHNSVUZCUlM5SUxFMUJSbFk3UVVGSFJTeFJRVUZCTEV0QlFVc3NSVUZCUlc5SExFdEJTRlE3UVVGSlJTeFJRVUZCTEdOQlFXTXNSVUZCUlhSQ0xHTkJTbXhDTzBGQlMwVXNVVUZCUVN4VFFVRlRMRVZCUVVVc1MwRkJTelpHTEdGQlRHeENPMEZCVFVVc1VVRkJRU3hSUVVGUkxFVkJRVVVzUzBGQlMwTXNXVUZPYWtJN1FVRlBSU3hSUVVGQkxIZENRVUYzUWl4RlFVRkZha01zZDBKQlVEVkNPMEZCVVVVc1VVRkJRU3hqUVVGakxFVkJRVVY2UWl4alFWSnNRanRCUVZORkxGRkJRVUVzVVVGQlVTeEZRVUZGZG5GQ0xGRkJWRm83UVVGVlJTeFJRVUZCTEZkQlFWY3NSVUZCUldkeVFpeFhRVlptTzBGQlYwVXNVVUZCUVN4WFFVRlhMRVZCUVVWMVF5eHRRa0ZZWmp0QlFWbEZMRkZCUVVFc1MwRkJTeXhGUVVGRmRtZENPMEZCV2xRc1UwRmpSMmxDTEZGQlpFZ3NRMEZFUml4RFFVUkdPMEZCYjBKRU96czdiMFJCY2tZMFJUdEJRVUZCTEZWQlFUTkRjV1lzVFVGQk1rTXNVMEZCTTBOQkxFMUJRVEpETzBGQlFVRXNWVUZCYmtOMFFpeDNRa0ZCYlVNc1UwRkJia05CTEhkQ1FVRnRRenRCUVVNelJTeGhRVUZQY1VJc1kwRkJZeXhEUVVGRFF5eE5RVUZFTEVWQlFWTjBRaXgzUWtGQlZDeERRVUZ5UWp0QlFVTkVPenM3TzBWQk4wSnhRMnBsT3p0blFrRkJia0kwWml4NVFrRkRRVHRCUVVOcVFrd3NSVUZCUVVFc1RVRkJUU3hGUVVGRk5XVXNVMEZCVXl4RFFVRkRPRTBzUzBGQlZpeERRVUZuUWp0QlFVTjBRbTVQTEVsQlFVRkJMRkZCUVZFc1JVRkJSWEZDTEZOQlFWTXNRMEZCUTNsUExFbEJSRVU3UVVGRmRFSnhVU3hKUVVGQlFTeHhRa0ZCY1VJc1JVRkJSVGxsTEZOQlFWTXNRMEZCUTNsUE8wRkJSbGdzUjBGQmFFSXNRMEZFVXp0QlFVdHFRbWxQTEVWQlFVRkJMRTlCUVU4c1JVRkJSVEZqTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEUxQlFVUXNSVUZCVXl4VlFVRlVMRVZCUVhGQ0xGRkJRWEpDTEVWQlFTdENMRXRCUVM5Q0xFVkJRWE5ETEU5QlFYUkRMRU5CUVdoQ0xFTkJURkU3UVVGTmFrSXdWU3hGUVVGQlFTeE5RVUZOTEVWQlFVVXpWU3hUUVVGVExFTkJRVU56UWl4SlFVNUVPMEZCVDJwQ2VWb3NSVUZCUVVFc1MwRkJTeXhGUVVGRkwyRXNVMEZCVXl4RFFVRkRjMElzU1VGUVFUdEJRVkZxUWk5Q0xFVkJRVUZCTEZGQlFWRXNSVUZCUlZNc1UwRkJVeXhEUVVGRGJVSXNTVUZTU0R0QlFWTnFRbk5aTEVWQlFVRkJMR05CUVdNc1JVRkJSWHBhTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4UFFVRlFMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENMRTFCUVhoQ0xFTkJRV2hDTEVOQlZFTTdRVUZWYWtKcFppeEZRVUZCUVN4VFFVRlRMRVZCUVVWc1ppeFRRVUZUTEVOQlFVTjVUeXhKUVVGV0xFTkJRV1UxUWl4VlFWWlVPMEZCVjJwQ2VWRXNSVUZCUVVFc2QwSkJRWGRDTEVWQlFVVjBaQ3hUUVVGVExFTkJRVU56UWl4SlFWaHVRanRCUVZscVFtaFJMRVZCUVVGQkxGRkJRVkVzUlVGQlJUQlBMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS0xFTkJRV2hDTEVOQldrODdRVUZoYWtKeFl5eEZRVUZCUVN4WFFVRlhMRVZCUVVWMFl5eFRRVUZUTEVOQlFVTnpRaXhKUVdKT08wRkJZMnBDTlZJc1JVRkJRVUVzU1VGQlNTeEZRVUZGYzFFc1UwRkJVeXhEUVVGRFRTeFRRVUZXTEVOQlFXOUNMRU5CUTNoQ1RpeFRRVUZUTEVOQlFVTlBMRTFCUkdNc1JVRkZlRUpRTEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4SlFVRlFMRVZCUVdFc1NVRkJZaXhGUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhKUVVGNlFpeERRVUZvUWl4RFFVWjNRanRCUVVGQkxFZEJRWEJDTzBGQlpGYzdPMmRDUVVSQloyWXNORUpCY1VKSE8wRkJRM0JDTzBGQlEwRTdRVUZEUVhaMlFpeEZRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRklZenM3UVVNeFJWUXNVMEZCVXpoMlFpeE5RVUZVTEVOQlFXZENMM1pDTEV0QlFXaENMRVZCUVRoQ08wRkJRVUVzVFVGRmVrTnRka0lzVFVGR2VVTXNSMEZYZGtOdWRrSXNTMEZZZFVNc1EwRkZla050ZGtJc1RVRkdlVU03UVVGQlFTeE5RVWQ2UTNKbUxGRkJTSGxETEVkQlYzWkRPVkFzUzBGWWRVTXNRMEZIZWtNNFVDeFJRVWg1UXp0QlFVRkJMRTFCU1hwRGEyRXNZMEZLZVVNc1IwRlhka05vY1VJc1MwRllkVU1zUTBGSmVrTm5jVUlzWTBGS2VVTTdRVUZCUVN4TlFVdDZRM2xHTEZOQlRIbERMRWRCVjNaRGVuWkNMRXRCV0hWRExFTkJTM3BEZVhaQ0xGTkJUSGxETzBGQlFVRXNPRUpCVjNaRGVuWkNMRXRCV0hWRExFTkJUWHBETm5SQ0xIZENRVTU1UXp0QlFVRkJMRTFCVFhwRFFTeDNRa0ZPZVVNc2MwTkJUV1FzU1VGT1l6dEJRVUZCTEhGQ1FWZDJRemQwUWl4TFFWaDFReXhEUVU5NlF5dEtMRXRCVUhsRE8wRkJRVUVzVFVGUGVrTkJMRXRCVUhsRExEWkNRVTlxUXl4UFFWQnBRenRCUVVGQkxESkNRVmQyUXk5S0xFdEJXSFZETEVOQlVYcERObk5DTEZkQlVubERPMEZCUVVFc1RVRlJla05CTEZkQlVubERMRzFEUVZFelFpeEpRVkl5UWp0QlFVRkJMSGxDUVZkMlF6ZHpRaXhMUVZoMVF5eERRVk42UTJkM1FpeFRRVlI1UXp0QlFVRkJMRTFCVTNwRFFTeFRRVlI1UXl4cFEwRlROMElzUzBGVU5rSTdRVUZCUVN4TlFWVjZReTkyUWl4SlFWWjVReXhIUVZkMlEwUXNTMEZZZFVNc1EwRlZla05ETEVsQlZubERPenRCUVdFelF5eE5RVUZKTEVOQlFVTnJka0lzVFVGQlRDeEZRVUZoTzBGQlExZ3NWMEZCVHl4SlFVRlFPMEZCUTBRN08wRkJSVVFzYzBKQlEwVXZaU3hqUVVGRExGVkJRVVE3UVVGRFJTeEpRVUZCTEUxQlFVMHNSVUZCUlN0bExFMUJSRlk3UVVGRlJTeEpRVUZCTEU5QlFVOHNSVUZCUlhCc1FpeExRVVpZTzBGQlIwVXNTVUZCUVN4TlFVRk5MRTFCU0ZJN1FVRkpSU3hKUVVGQkxFdEJRVXNzUlVGQlJXbHRRaXhUUVVwVU8wRkJTMFVzU1VGQlFTeGpRVUZqTEVWQlFVVm9SeXhqUVV4c1FqdEJRVTFGTEVsQlFVRXNVMEZCVXl4RlFVRkZlVVlzVTBGT1lqdEJRVTlGTEVsQlFVRXNkMEpCUVhkQ0xFVkJRVVUxUWl4M1FrRlFOVUk3UVVGUlJTeEpRVUZCTEZGQlFWRXNSVUZCUlN4RFFWSmFPMEZCVTBVc1NVRkJRU3hYUVVGWExFVkJRVVZvUWl4WFFWUm1PMEZCVlVVc1NVRkJRU3hKUVVGSkxFVkJRVVUxYzBJc1NVRkJTU3hMUVVGTExGVkJRVlFzUjBGQmMwSXNTVUZCZEVJc1IwRkJOa0pCTzBGQlZuSkRMRXRCV1VjMlVDeFJRVnBJTEVOQlJFWTdRVUZuUWtRN1FVRkZSR2xuUWl4TlFVRk5MRU5CUVVOMFpTeFRRVUZRTEVkQlFXMUNPMEZCUTJwQ01HUXNSVUZCUVVFc1RVRkJUU3hGUVVGRk5XVXNVMEZCVXl4RFFVRkRPRTBzUzBGQlZpeERRVUZuUWp0QlFVTjBRbTVQTEVsQlFVRkJMRkZCUVZFc1JVRkJSWEZDTEZOQlFWTXNRMEZCUTNsUExFbEJSRVU3UVVGRmRFSnhVU3hKUVVGQlFTeHhRa0ZCY1VJc1JVRkJSVGxsTEZOQlFWTXNRMEZCUTNsUE8wRkJSbGdzUjBGQmFFSXNRMEZFVXp0QlFVdHFRbXhRTEVWQlFVRkJMRkZCUVZFc1JVRkJSVk1zVTBGQlV5eERRVUZEYlVJc1NVRk1TRHRCUVUxcVFuTlpMRVZCUVVGQkxHTkJRV01zUlVGQlJYcGFMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRWxCUVVRc1JVRkJUeXhQUVVGUUxFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xFMUJRWGhDTEVOQlFXaENMRU5CVGtNN1FVRlBha0pwWml4RlFVRkJRU3hUUVVGVExFVkJRVVZzWml4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVZCVU8wRkJVV3BDZVZFc1JVRkJRVUVzZDBKQlFYZENMRVZCUVVWMFpDeFRRVUZUTEVOQlFVTnpRaXhKUVZKdVFqdEJRVk5xUWpsSUxFVkJRVUZCTEV0QlFVc3NSVUZCUlhkSExGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFMUJRVVFzUlVGQlV5eFJRVUZVTEVWQlFXMUNMRXRCUVc1Q0xFVkJRVEJDTEU5QlFURkNMRVZCUVcxRExGVkJRVzVETEVOQlFXaENMRU5CVkZVN1FVRlZha0oyVVN4RlFVRkJRU3hKUVVGSkxFVkJRVVZ6VVN4VFFVRlRMRU5CUVVOTkxGTkJRVllzUTBGQmIwSXNRMEZEZUVKT0xGTkJRVk1zUTBGQlEwOHNUVUZFWXl4RlFVVjRRbEFzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRVU1zU1VGQlJDeEZRVUZQTEVsQlFWQXNSVUZCWVN4SlFVRmlMRVZCUVcxQ0xFbEJRVzVDTEVWQlFYbENMRWxCUVhwQ0xFTkJRV2hDTEVOQlJuZENPMEZCUVVFc1IwRkJjRUlzUTBGV1Z6dEJRV05xUW5kbUxFVkJRVUZCTEZOQlFWTXNSVUZCUlhwbUxGTkJRVk1zUTBGQlEzTkNPMEZCWkVvc1EwRkJia0k3T3pzN1FVTTFRMEVzVTBGQlUyOWxMRWRCUVZRc1EwRkJZVU1zUTBGQllpeEZRVUZuUWtNc1EwRkJhRUlzUlVGQmJVSTdRVUZEYWtJc1UwRkJUMFFzUTBGQlF5eERRVUZEY0hkQ0xFZEJRVVlzUTBGQlRTeFZRVUZEZFcxQ0xFbEJRVVFzUlVGQlQwa3NSMEZCVUR0QlFVRkJMRmRCUVdVc1EwRkJRMG9zU1VGQlJDeEZRVUZQT0Vvc1EwRkJReXhEUVVGRE1Vb3NSMEZCUkN4RFFVRlNMRU5CUVdZN1FVRkJRU3hIUVVGT0xFTkJRVkE3UVVGRFJEczdRVUZGUkN4SlFVRk5Na29zV1VGQldTeEhRVUZITEVOQlFYSkNPMEZCUlVFc1NVRkJUVU1zV1VGQldTeEhRVUZITzBGQlEyNUNlbkpDTEVWQlFVRkJMRVZCUVVVc1JVRkJSU3hGUVVSbE8wRkJSVzVDUlN4RlFVRkJRU3hGUVVGRkxFVkJRVVVzUlVGR1pUdEJRVWR1UWtNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlNHVTdRVUZKYmtKRExFVkJRVUZCTEVWQlFVVXNSVUZCUlN4RlFVcGxPMEZCUzI1Q1oySXNSVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJUR1VzUTBGQmNrSTdPMEZCYVVKQkxFbEJRVTF6VVN4WlFVRlpMRWRCUVVjc1UwRkJaa0VzV1VGQlpTeERRVUZEZEhaQ0xFTkJRVVFzUlVGQlNXWXNTVUZCU2l4RlFVRmhPMEZCUTJoRExGVkJRVkZsTEVOQlFWSTdRVUZEUlN4VFFVRkxMRU5CUVV3N1FVRkRRU3hUUVVGTExFTkJRVXc3UVVGRFJTeGhRVUZQTEVOQlEwdzdRVUZCUlRKT0xGRkJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVRlFPMEZCUVZWMlFpeFJRVUZCUVN4SlFVRkpMRVZCUVVVc1EwRkJhRUk3UVVGQmJVSjVRaXhSUVVGQlFTeExRVUZMTEVWQlFVVTFUeXhKUVVFeFFqdEJRVUZuUXpSTkxGRkJRVUZCTEUxQlFVMHNSVUZCUlRWTkxFbEJRWGhETzBGQlFUaERjM2RDTEZGQlFVRkJMRlZCUVZVc1JVRkJSVHRCUVVFeFJDeFBRVVJMTEVOQlFWQTdPMEZCUjBZc1UwRkJTeXhEUVVGTU8wRkJRMFVzWVVGQlR5eERRVU5NTzBGQlEwVTFhRUlzVVVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUkZBN1FVRkZSWFpDTEZGQlFVRkJMRWxCUVVrc1JVRkJSU3hEUVVaU08wRkJSMFY1UWl4UlFVRkJRU3hMUVVGTExIVkNRVUZuUW5Wb1FpeFpRVUZaTEVkQlFVY3NRMEZCTDBJc1VVRklVRHRCUVVsRmRtcENMRkZCUVVGQkxFMUJRVTBzUlVGQlJUVk5MRWxCU2xZN1FVRkxSWE4zUWl4UlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGTVpDeFBRVVJMTEVWQlVVdzdRVUZEUlRWb1FpeFJRVUZCUVN4SFFVRkhMRVZCUVVVc1EwRkVVRHRCUVVWRmRrSXNVVUZCUVVFc1NVRkJTU3gxUWtGQlowSm5ha0lzV1VGQldTeEhRVUZITEVOQlFTOUNMRkZCUms0N1FVRkhSWFpvUWl4UlFVRkJRU3hMUVVGTExIVkNRVUZuUW5Wb1FpeFpRVUZaTEVkQlFVY3NRMEZCTDBJc1VVRklVRHRCUVVsRmRtcENMRkZCUVVGQkxFMUJRVTBzUlVGQlJUVk5MRWxCU2xZN1FVRkxSWE4zUWl4UlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGTVpDeFBRVkpMTEVOQlFWQTdPMEZCWjBKR08wRkJRMFVzWVVGQlR5eERRVU5NTzBGQlEwVTFhRUlzVVVGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUkZBN1FVRkZSWFpDTEZGQlFVRkJMRWxCUVVrc1JVRkJSU3hEUVVaU08wRkJSMFY1UWl4UlFVRkJRU3hMUVVGTExIVkNRVUZuUW5Wb1FpeFpRVUZaTEVkQlFVY3NRMEZCTDBJc1VVRklVRHRCUVVsRmRtcENMRkZCUVVGQkxFMUJRVTBzUlVGQlJUVk5MRWxCU2xZN1FVRkxSWE4zUWl4UlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGTVpDeFBRVVJMTEVWQlVVdzdRVUZEUlRWb1FpeFJRVUZCUVN4SFFVRkhMRVZCUVVVc1EwRkVVRHRCUVVWRmRrSXNVVUZCUVVFc1NVRkJTU3gxUWtGQlowSm5ha0lzV1VGQldTeEhRVUZITEVOQlFTOUNMRkZCUms0N1FVRkhSWFpvUWl4UlFVRkJRU3hMUVVGTExFVkJRVVVzVjBGSVZEdEJRVWxGYUVNc1VVRkJRVUVzVFVGQlRTeDFRa0ZCWjBKMWFrSXNXVUZCV1N4SFFVRkhMRU5CUVM5Q0xGRkJTbEk3UVVGTFJVY3NVVUZCUVVFc1ZVRkJWU3hGUVVGRk8wRkJUR1FzVDBGU1N5eEZRV1ZNTzBGQlEwVTFhRUlzVVVGQlFVRXNSMEZCUnl4MVFrRkJaMEo1YUVJc1dVRkJXU3hIUVVGSExFTkJRUzlDTEZGQlJFdzdRVUZGUldocVFpeFJRVUZCUVN4SlFVRkpMSFZDUVVGblFtZHFRaXhaUVVGWkxFZEJRVWNzUTBGQkwwSXNVVUZHVGp0QlFVZEZkbWhDTEZGQlFVRkJMRXRCUVVzc1JVRkJSU3hYUVVoVU8wRkJTVVZvUXl4UlFVRkJRU3hOUVVGTkxIVkNRVUZuUW5WcVFpeFpRVUZaTEVkQlFVY3NRMEZCTDBJc1VVRktVanRCUVV0RlJ5eFJRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRk1aQ3hQUVdaTExFTkJRVkE3UVVGNFFrbzdRVUZuUkVRc1EwRnFSRVE3TzBGQmJVUkJMRWxCUVUxRExGRkJRVkVzUjBGQlJ5eFRRVUZZUVN4UlFVRlhMRU5CUVVGRExFZEJRVWM3UVVGQlFTeFRRVUZKUVN4SFFVRkhMRWxCUVVsNGRrSXNTVUZCU1N4RFFVRkRlWFpDTEVWQlFVd3NSMEZCVlN4SFFVRmtMRU5CUVZBN1FVRkJRU3hEUVVGd1FqczdRVUZGUVN4SlFVRk5ibElzWlVGQllTeEhRVUZITEZOQlFXaENRU3hoUVVGblFpeERRVUZEZG1Zc1MwRkJSQ3hGUVVsbU8wRkJRVUVzVFVGRFIwTXNTVUZFU0N4SFFVTTRRa1FzUzBGRU9VSXNRMEZEUjBNc1NVRkVTRHRCUVVGQkxFMUJRMU54UWl4SlFVUlVMRWRCUXpoQ2RFSXNTMEZFT1VJc1EwRkRVM05DTEVsQlJGUTdRVUZCUVN4TlFVTmxhWFpDTEZWQlJHWXNSMEZET0VKMmQwSXNTMEZFT1VJc1EwRkRaWFYzUWl4VlFVUm1PMEZCUjB3c1RVRkJUVWtzWTBGQll5eHJRa0ZCVnpGMlFpeEpRVUZKTEVOQlFVTXlka0lzUjBGQlRDeERRVUZUU2l4UlFVRlJMRU5CUVVNc1JVRkJSQ3hEUVVGcVFpeERRVUZZTEdsQ1FVRjNRM1ozUWl4SlFVRjRReXhYUVVGd1FqdEJRVVZCTEUxQlFVMDBkMElzVDBGQlR5eG5Ra0ZEV0hwblFqdEJRVU5GTEVsQlFVRXNTMEZCU3l4RlFVRkRMRTFCUkZJN1FVRkZSU3hKUVVGQkxFOUJRVThzUlVGQlF5eHBRa0ZHVmp0QlFVZEZMRWxCUVVFc1QwRkJUeXhGUVVGRExFdEJTRlk3UVVGSlJTeEpRVUZCTEcxQ1FVRnRRaXhGUVVGRExHVkJTblJDTzBGQlMwVXNTVUZCUVN4TFFVRkxMRVZCUVVNN1FVRk1VaXhyUWtGUFJVRXNOa0pCUVZFNVR5eEpRVUZTTEVOQlVFWXNaVUZSUlRoUE8wRkJRMFVzU1VGQlFTeFJRVUZSTEVWQlFVTXNUVUZFV0R0QlFVVkZMRWxCUVVFc1NVRkJTU3hGUVVGRExFMUJSbEE3UVVGSFJTeEpRVUZCTEdkQ1FVRm5RaXhGUVVGRExGTkJTRzVDTzBGQlNVVXNTVUZCUVN4VlFVRlZMRVZCUVVNc1VVRktZanRCUVV0RkxFbEJRVUVzVTBGQlV5eEZRVUZGTEVOQlExUjNVQ3hWUVVGVkxFTkJRVU5ETEZkQlJFWXNSVUZGVkVRc1ZVRkJWU3hEUVVGRFJTeFRRVVpHTEVWQlIxUkdMRlZCUVZVc1EwRkJRMGNzWTBGSVJpeEZRVWxVTldZc1NVRktVeXhEUVVsS0xFZEJTa2s3UVVGTVlpeExRVmRIYlVJc1NVRkJTU3hIUVVGSExHMUNRVUZKUVN4SlFVRktMRVZCUVZVc1EwRkJWaXhGUVVGaGIyVXNWMEZCWWl4RlFVRklMRWRCUVdkRExFVkJXSFpETEVOQlVrWXNRMEZFUmpzN1FVRjNRa0VzVlVGQlVUWlJMRlZCUVZJN1FVRkRSU3hUUVVGTExGbEJRVXc3UVVGRFJTd3dRa0ZEUlc1blFpeGpRVUZETEVkQlFVUTdRVUZEUlN4elFrRkJXVGxQTEVsQlJHUTdRVUZGUlN4UlFVRkJMRXRCUVVzc1JVRkJReXhYUVVaU08wRkJSMFVzVVVGQlFTeE5RVUZOTEVWQlFVTXNUVUZJVkR0QlFVbEZMRkZCUVVFc1QwRkJUeXhGUVVGRExFMUJTbFk3UVVGTFJTeFJRVUZCTEZWQlFWVXNSVUZCUXl4TFFVeGlPMEZCVFVVc1VVRkJRU3g1UWtGQmVVSXNSVUZCUlR0QlFVTjZRakpPTEZWQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVOUU5sQXNXVUZCUVVFc1lVRkJZU3hGUVVGRk5sSXNZMEZFVWp0QlFVVlFSeXhaUVVGQlFTeFpRVUZaTEVWQlFVVklPMEZCUmxBN1FVRkVaMEk3UVVGT04wSXNVMEZoUjBVc1QwRmlTQ3hEUVVSR096dEJRV2xDUml4VFFVRkxMRk5CUVV3N1FVRkRSU3d3UWtGRFJYcG5RaXhqUVVGRExFZEJRVVE3UVVGRFJTeHpRa0ZCV1RsUExFbEJSR1E3UVVGRlJTeFJRVUZCTEV0QlFVc3NSVUZCUXl4WFFVWlNPMEZCUjBVc1VVRkJRU3hOUVVGTkxFVkJRVU1zVFVGSVZEdEJRVWxGTEZGQlFVRXNUMEZCVHl4RlFVRkRMRTFCU2xZN1FVRkxSU3hSUVVGQkxGVkJRVlVzUlVGQlF5eFBRVXhpTzBGQlRVVXNVVUZCUVN4NVFrRkJlVUlzUlVGQlJUdEJRVU42UWpKT0xGVkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVTlFPR2hDTEZsQlFVRkJMRlZCUVZVc1JVRkJSVW9zWTBGRVREdEJRVVZRUnl4WlFVRkJRU3haUVVGWkxFVkJRVVZJTzBGQlJsQTdRVUZFWjBJN1FVRk9OMElzVTBGaFIwVXNUMEZpU0N4RFFVUkdPenRCUVdsQ1JqdEJRVU5GTERCQ1FVTkZlbWRDTEdOQlFVTXNSMEZCUkR0QlFVTkZMSE5DUVVGWk9VOHNTVUZFWkR0QlFVVkZMRkZCUVVFc1MwRkJTeXhGUVVGRExGZEJSbEk3UVVGSFJTeFJRVUZCTEUxQlFVMHNSVUZCUXl4TlFVaFVPMEZCU1VVc1VVRkJRU3hQUVVGUExFVkJRVU1zVFVGS1ZqdEJRVXRGTEZGQlFVRXNWVUZCVlN4RlFVRkRMRkZCVEdJN1FVRk5SU3hSUVVGQkxHTkJRV01zUlVGQlF6dEJRVTVxUWl4VFFWRkhkWFpDTEU5QlVrZ3NRMEZFUmp0QlFYUkRTanRCUVcxRVJDeERRWEJHUkRzN1FVRnpSa0VzUVVGQlpTeFRRVUZUUnl4WFFVRlVMRU5CUVhGQ2FIaENMRXRCUVhKQ0xFVkJRVzFETzBGQlFVRXNUVUZEZUVNd1owSXNZVUZFZDBNc1IwRkRRekZuUWl4TFFVUkVMRU5CUTNoRE1HZENMR0ZCUkhkRE8wRkJRVUVzVFVGRGVrSk9MRTlCUkhsQ0xFZEJRME53WjBJc1MwRkVSQ3hEUVVONlFtOW5RaXhQUVVSNVFqdEJRVUZCTEc5Q1FVTkRjR2RDTEV0QlJFUXNRMEZEYUVKRExFbEJSR2RDTzBGQlFVRXNUVUZEYUVKQkxFbEJSR2RDTERSQ1FVTlVMRXRCUkZNN1FVRkZhRVFzVFVGQlRXZDRRaXhYUVVGWExFZEJRVWRvZUVJc1NVRkJTU3hMUVVGTExFdEJRVlFzUjBGQmFVSXNUVUZCYWtJc1IwRkJNRUp2ZDBJc1dVRkJXU3hEUVVGRGNIZENMRWxCUVVRc1EwRkJNVVE3UVVGRFFTeE5RVUZOYVhoQ0xGbEJRVmtzUjBGQlIycDRRaXhKUVVGSkxFdEJRVXNzUzBGQlZDeEhRVUZwUWl4RlFVRnFRaXhIUVVGelFtOTNRaXhaUVVGWkxFTkJRVU53ZDBJc1NVRkJSQ3hEUVVGMlJEdEJRVU5CTEUxQlFVMXJia0lzVTBGQlV5eEhRVUZIYlVvc1dVRkJXU3hEUVVGRE5WQXNZVUZCWVN4RFFVRkRjR2RDTEUxQlFXWXNSVUZCZFVJeWQwSXNWMEZCZGtJc1EwRkJPVUk3UVVGRFFTeHpRa0ZEUlRkblFpeGpRVUZETEVkQlFVUTdRVUZEUlN4SlFVRkJMRXRCUVVzc1JVRkJReXhQUVVSU08wRkJSVVVzU1VGQlFTeFJRVUZSTEVWQlFVTXNVVUZHV0R0QlFVZEZMRWxCUVVFc1VVRkJVU3hGUVVGRExGRkJTRmc3UVVGSlJTeEpRVUZCTEV0QlFVc3NSVUZCUlRablFpeFhRVXBVTzBGQlMwVXNTVUZCUVN4TlFVRk5MRVZCUVVWRExGbEJURlk3UVVGTlJTeEpRVUZCTEZGQlFWRXNSVUZCUXl4VlFVNVlPMEZCVDBVc1NVRkJRU3g1UWtGQmVVSXNSVUZCUlR0QlFVTjZRbXBwUWl4TlFVRkJRU3hQUVVGUExHOURRVU5FYlZJc1QwRkJUeXhIUVVGSE8wRkJRVVZKTEZGQlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVGaUxFOUJRVWdzUjBGQmNVTXNSVUZFTTBNN1FVRkZURHRCUVVOQk8wRkJRMEV5VVN4UlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGS1VEdEJRVVJyUWp0QlFWQTNRaXhyUWtGblFrVXZaMElzWTBGQlF5eEhRVUZFTzBGQlFVc3NTVUZCUVN4NVFrRkJlVUlzUlVGQlJUdEJRVUZGYmtJc1RVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlFVVTJVQ3hSUVVGQlFTeGhRVUZoTEVWQlFVVTdRVUZCYWtJN1FVRkJXRHRCUVVGb1F5eEpRV2hDUml4RlFXbENSMjFTTEVkQlFVY3NRMEZCUXpsSkxGTkJRVVFzUlVGQldYcEhMR0ZCUVZvc1EwRkJTQ3hEUVVFNFFqVm5RaXhIUVVFNVFpeERRVU5ETEdkQ1FVRXdSREp0UWl4SFFVRXhSQ3hGUVVGclJUdEJRVUZCTzBGQlFVRXNVVUZCYUVWd1dTeFJRVUZuUlR0QlFVRkJPMEZCUVVFc1VVRkJkRVFyYVVJc1dVRkJjMFFzZFVKQlFYWkRPMEZCUVVVNWRrSXNUVUZCUVVFc1NVRkJTU3hGUVVGRkxFVkJRVkk3UVVGQldYTmpMRTFCUVVGQkxFZEJRVWNzUlVGQlJWWTdRVUZCYWtJc1MwRkJkVU03TzBGQlFVRXNVVUZEZUVSeVR5eExRVVIzUkN4SFFVTm1VaXhSUVVSbExFTkJRM2hFVVN4TFFVUjNSRHRCUVVGQkxGRkJRMnBFYUVNc1RVRkVhVVFzUjBGRFpuZENMRkZCUkdVc1EwRkRha1I0UWl4TlFVUnBSRHRCUVVGQkxGRkJRM3BET0VJc1IwRkVlVU1zUjBGRFprNHNVVUZFWlN4RFFVTjZRMDBzUjBGRWVVTTdRVUZCUVN4UlFVTndRM1pDTEVsQlJHOURMRWRCUTJacFFpeFJRVVJsTEVOQlEzQkRha0lzU1VGRWIwTTdRVUZCUVN4UlFVTTVRbTFxUWl4VlFVUTRRaXhIUVVObWJHbENMRkZCUkdVc1EwRkRPVUpyYVVJc1ZVRkVPRUk3UVVGQlFTeFJRVVY0UkdwMlFpeEpRVVozUkN4SFFVVXhRemgyUWl4WlFVWXdReXhEUVVWNFJEbDJRaXhKUVVaM1JEdEJRVUZCTEZGQlJXeEVjMk1zUjBGR2EwUXNSMEZGTVVOM1ZDeFpRVVl3UXl4RFFVVnNSSGhVTEVkQlJtdEVPMEZCUjJoRkxIZENRVU5GZUU0c1kwRkJReXhIUVVGRU8wRkJRMFVzVFVGQlFTeEhRVUZITEVWQlFVVnhWeXhIUVVSUU8wRkJSVVVzVFVGQlFTeFJRVUZSTEVWQlFVTXNWVUZHV0R0QlFVZEZMRTFCUVVFc1MwRkJTeXhGUVVGRk5WZ3NTMEZJVkR0QlFVbEZMRTFCUVVFc1RVRkJUU3hGUVVGRmFFTXNUVUZLVmp0QlFVdEZMRTFCUVVFc2VVSkJRWGxDTEVWQlFVVTdRVUZCUlc5RExGRkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRkZUaXhWUVVGQlFTeEhRVUZITEVWQlFVaEJMRWRCUVVZN1FVRkJUM1pDTEZWQlFVRkJMRWxCUVVrc1JVRkJTa0U3UVVGQlVEdEJRVUZZTzBGQlREZENMRTlCVDBkM1VTeEhRVUZITEdkQ1FVTkdlRTRzWTBGQlF5eExRVUZFTzBGQlEwVXNUVUZCUVN4SFFVRkhMRVZCUVVVNVR5eEpRVVJRTzBGQlJVVXNUVUZCUVN4TFFVRkxMRVZCUVVNc1UwRkdVanRCUVVkRkxFMUJRVUVzUjBGQlJ5eEZRVUZGYzJNc1IwRklVRHRCUVVsRkxFMUJRVUVzV1VGQldTeEZRVUZGTEVOQlNtaENPMEZCUzBVc1RVRkJRU3hoUVVGaExFVkJRVVVzUTBGTWFrSTdRVUZOUlN4TlFVRkJMRWRCUVVjc1JVRkJRenRCUVU1T0xFMUJSRVVzWjBKQlZVWjRUaXhqUVVGRGJWQXNaVUZCUkR0QlFVTkZMRTFCUVVFc1NVRkJTU3hGUVVGRmFtVXNTVUZFVWp0QlFVVkZMRTFCUVVFc1ZVRkJWU3hGUVVGRmFYWkNMRlZCUm1RN1FVRkhSU3hOUVVGQkxFbEJRVWtzUlVGQlJURnFRanRCUVVoU0xFMUJha0pLTEdWQmRVSkZkVVE3UVVGQlN5eE5RVUZCTEZOQlFWTXNSVUZCUldoU0xGRkJRVTBzUTBGQlEyZG5RanRCUVVGMlFpeE5RWFpDUml4RFFVUkdPMEZCTWtKRUxFZEJMMEpHTEVOQmFrSklMRU5CUkVZN1FVRnhSRVE3UVVGRlJEUlNMRmRCUVZjc1EwRkJRM1ptTEZOQlFWb3NSMEZCZDBJN1FVRkRkRUpwVUN4RlFVRkJRU3hoUVVGaExFVkJRVVZ1VVN4VFFVRlRMRU5CUVVOelVTeFBRVUZXTEVOQlEySjBVU3hUUVVGVExFTkJRVU52UWl4TFFVRldMRU5CUVdkQ08wRkJRMlJ5VVN4SlFVRkJRU3hKUVVGSkxFVkJRVVZwVUN4VFFVRlRMRU5CUVVOUkxFMUJRVllzUTBGQmFVSnhUU3hWUVVSVU8wRkJSV1JSTEVsQlFVRkJMRWRCUVVjc1JVRkJSWEpPTEZOQlFWTXNRMEZCUTFFN1FVRkdSQ3hIUVVGb1FpeERRVVJoTEVWQlMySnhUU3hWUVU1dlFqdEJRVTkwUW1kRUxFVkJRVUZCTEU5QlFVOHNSVUZCUlRkUUxGTkJRVk1zUTBGQlEzTkNMRWxCVUVjN1FVRlJkRUkxVWl4RlFVRkJRU3hKUVVGSkxFVkJRVVZ6VVN4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVQ3hGUVVGaExFbEJRV0lzUlVGQmJVSXNTVUZCYmtJc1JVRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1MwRkJMMElzUTBGQmFFSTdRVUZTWjBJc1EwRkJlRUk3T3pzN1FVTnNUVUVzU1VGQlRUWm5RaXh2UWtGQmIwSXNSMEZCUnp0QlFVTXpRblp6UWl4RlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGRWRVSTdRVUZGTTBKRExFVkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVWjFRanRCUVVjelFrTXNSVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJTSFZDTEVOQlFUZENPMEZCVFVFc1NVRkJUV2RqTEZsQlFYVkRMRWRCUVVjN1FVRkRPVU5zWXl4RlFVRkJRU3hGUVVGRkxFVkJRVVVzUTBGRU1FTTdRVUZGT1VORExFVkJRVUZCTEVWQlFVVXNSVUZCUlN4RFFVWXdRenRCUVVjNVEwTXNSVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJTREJETEVOQlFXaEVPMEZCVFVFc1FVRkJaU3hUUVVGVGMzTkNMRTlCUVZRc1EwRkJhVUowZUVJc1MwRkJha0lzUlVGQkswSTdRVUZCUVN4TlFVVXhRM1Y0UWl4clFrRkdNRU1zUjBGVmVFTjJlRUlzUzBGV2QwTXNRMEZGTVVOMWVFSXNhMEpCUmpCRE8wRkJRVUVzY1VKQlZYaERkbmhDTEV0QlZuZERMRU5CUnpGRGEyaENMRXRCU0RCRE8wRkJRVUVzVFVGSE1VTkJMRXRCU0RCRExEWkNRVWRzUXl4TlFVaHJRenRCUVVGQkxFMUJTVEZEY0ZJc1VVRktNRU1zUjBGVmVFTTVVQ3hMUVZaM1F5eERRVWt4UXpoUUxGRkJTakJETzBGQlFVRXNjVUpCVlhoRE9WQXNTMEZXZDBNc1EwRkxNVU1yU2l4TFFVd3dRenRCUVVGQkxFMUJTekZEUVN4TFFVd3dReXcyUWtGTGJFTXNWVUZNYTBNN1FVRkJRU3hyUWtGVmVFTXZTaXhMUVZaM1F5eERRVTB4UXpScVFpeEZRVTR3UXp0QlFVRkJMRTFCVFRGRFFTeEZRVTR3UXl3d1FrRk5ja01zU1VGT2NVTTdRVUZCUVN4M1FrRlZlRU0xYWtJc1MwRldkME1zUTBGUE1VTXdUaXhSUVZBd1F6dEJRVUZCTEUxQlR6RkRRU3hSUVZBd1F5eG5RMEZQTDBJc1YwRlFLMEk3UVVGQlFTeHZRa0ZWZUVNeFRpeExRVlozUXl4RFFWRXhRME1zU1VGU01FTTdRVUZCUVN4TlFWRXhRMEVzU1VGU01FTXNORUpCVVc1RExFbEJVbTFETzBGQlFVRXNkMEpCVlhoRFJDeExRVlozUXl4RFFWTXhRMjlvUWl4UlFWUXdRenRCUVVGQkxFMUJVekZEUVN4UlFWUXdReXhuUTBGVEwwSXNTMEZVSzBJN1FVRlpOVU1zVFVGQlRYcEZMRVZCUVVVc1IwRkJSekJETEZWQlFVVXNRMEZEV0dwblFpeFJRVUZOTEVOQlFVTnJlVUlzVDBGRVNTeEZRVVZZYkhsQ0xGRkJRVTBzYlVKQlFWazBhRUlzV1VGQlZTeERRVUZETDJkQ0xFbEJRVVFzUTBGQmRFSXNSVUZHU3l4RlFVZFlaMHNzVFVGQlRTeERRVUZEUml4TFFVRkVMRU5CU0Vzc1JVRkpXRzFZTEV0QlFVc3NTMEZCU3l4UlFVRldMRWxCUVhOQ2RFSXNWVUZCVlN4RFFVRkRNRUlzVjBGS2RFSXNSVUZMV0Vvc1MwRkJTeXhMUVVGTExGTkJRVllzU1VGQmRVSjBRaXhWUVVGVkxFTkJRVU15UWl4WlFVeDJRaXhGUVUxWVRDeExRVUZMTEV0QlFVc3NUVUZCVml4SlFVRnZRblJDTEZWQlFWVXNRMEZCUXpSQ0xGTkJUbkJDTEVWQlQxaE9MRXRCUVVzc1MwRkJTeXhQUVVGV0xFbEJRWEZDZEVJc1ZVRkJWU3hEUVVGRE5rSXNWVUZRY2tJc1JVRlJXQzlVTEZGQlFWRXNTMEZCU3l4WFFVRmlMRWxCUVRSQ2ExTXNWVUZCVlN4RFFVRkRPRUlzVTBGU05VSXNSVUZUV0U0c1VVRkJVU3hKUVVGSmVFSXNWVUZCVlN4RFFVRkRkMElzVVVGVVdpeERRVUZpTzBGQldVRXNUVUZCVFc5UkxGbEJRVmtzUjBGQlIwUXNhMEpCUVd0Q0xFbEJRVWxHTEc5Q1FVRnZRaXhEUVVGRGNIaENMRWxCUVVRc1EwRkJMMFE3UVVGRFFTeE5RVUZKZDNoQ0xGRkJRVkVzUjBGQlJ6dEJRVUZGTlhsQ0xFbEJRVUZCTEZOQlFWTXNSVUZCUlRoa08wRkJRV0lzUjBGQlpqczdRVUZEUVN4TlFVRkphVWdzUlVGQlNpeEZRVUZSTzBGQlEwNDJUaXhKUVVGQlFTeFJRVUZSTEhGRFFVRlJRU3hSUVVGU08wRkJRV3RDTjA0c1RVRkJRVUVzUlVGQlJTeEZRVUZHUVR0QlFVRnNRaXhOUVVGU08wRkJRMFE3TzBGQlEwUXNUVUZCU1hoRExGRkJRVkVzU1VGQlNTeFBRVUZQZEZJc1VVRkJVQ3hMUVVGdlFpeFJRVUZ3UXl4RlFVRTRRenRCUVVNMVF6Sm9RaXhKUVVGQlFTeFJRVUZSTEhGRFFVRlJRU3hSUVVGU08wRkJRV3RDTTFBc1RVRkJRVUVzUzBGQlN5eEZRVUZGYUZNN1FVRkJla0lzVFVGQlVqdEJRVU5FT3p0QlFVTkVMRk5CUVU5R0xHRkJRVUVzV1VGQmQwSTBhRUlzV1VGQmVFSXNSMEZCZDBORExGRkJRWGhETEVWQlFXdEVNMmhDTEZGQlFXeEVMRU5CUVZBN1FVRkRSRHRCUVVWRWQyaENMRTlCUVU4c1EwRkJRemRtTEZOQlFWSXNSMEZCYjBJN1FVRkRiRUk0Wml4RlFVRkJRU3hyUWtGQmEwSXNSVUZCUldob1FpeFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eERRVUZFTEVWQlFVa3NRMEZCU2l4RlFVRlBMRU5CUVZBc1JVRkJWU3hEUVVGV0xFVkJRV0VzUTBGQllpeEZRVUZuUWl4RFFVRm9RaXhEUVVGb1FpeERRVVJHTzBGQlJXeENNRkVzUlVGQlFVRXNTMEZCU3l4RlFVRkZNMUVzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRVU1zVFVGQlJDeEZRVUZUTEU5QlFWUXNSVUZCYTBJc1VVRkJiRUlzUlVGQk5FSXNVMEZCTlVJc1EwRkJhRUlzUTBGR1Z6dEJRVWRzUWxZc1JVRkJRVUVzVVVGQlVTeEZRVUZGVXl4VFFVRlRMRU5CUVVOdFFpeEpRVWhHTzBGQlNXeENNMGdzUlVGQlFVRXNTMEZCU3l4RlFVRkZkMGNzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRM0pDTEUxQlJIRkNMRVZCUlhKQ0xGVkJSbkZDTEVWQlIzSkNMRlZCU0hGQ0xFVkJTWEpDTEUxQlNuRkNMRVZCUzNKQ0xFOUJUSEZDTEVWQlRYSkNMRmRCVG5GQ0xFVkJUM0pDTEZGQlVIRkNMRVZCVVhKQ0xGVkJVbkZDTEVWQlUzSkNMRTFCVkhGQ0xFVkJWWEpDTEU5QlZuRkNMRVZCVjNKQ0xGRkJXSEZDTEVWQldYSkNMRkZCV25GQ0xFVkJZWEpDTEUxQlluRkNMRVZCWTNKQ0xGRkJaSEZDTEVWQlpYSkNMRXRCWm5GQ0xFVkJaMEp5UWl4WlFXaENjVUlzUlVGcFFuSkNMRTlCYWtKeFFpeERRVUZvUWl4RFFVcFhPMEZCZFVKc1FtOVVMRVZCUVVGQkxFVkJRVVVzUlVGQlJYSlVMRk5CUVZNc1EwRkJRMUVzVFVGMlFrazdRVUYzUW14Q2NrUXNSVUZCUVVFc1VVRkJVU3hGUVVGRk5rTXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNVVUZCUkN4RlFVRlhMRmRCUVZnc1EwRkJhRUlzUTBGNFFsRTdRVUY1UW14Q2RsRXNSVUZCUVVFc1NVRkJTU3hGUVVGRmMxRXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNTVUZCUkN4RlFVRlBMRWxCUVZBc1JVRkJZU3hKUVVGaUxFTkJRV2hDTEVOQmVrSlpPMEZCTUVKc1FqUlJMRVZCUVVGQkxGRkJRVkVzUlVGQlJUZFJMRk5CUVZNc1EwRkJRM05DTzBGQk1VSkdMRU5CUVhCQ096czdPenM3UVVNeFJVRXNTVUZCVFc5UkxHOUNRVUZyUWl4SFFVRkhPMEZCUTNwQ2NtUXNSVUZCUVVFc1JVRkJSU3hGUVVGRkxFVkJSSEZDTzBGQlJYcENSU3hGUVVGQlFTeEZRVUZGTEVWQlFVVXNSVUZHY1VJN1FVRkhla0pETEVWQlFVRkJMRVZCUVVVc1JVRkJSU3hGUVVoeFFqdEJRVWw2UWtNc1JVRkJRVUVzUlVGQlJTeEZRVUZGTEVWQlNuRkNPMEZCUzNwQ1oySXNSVUZCUVVFc1JVRkJSU3hGUVVGRk8wRkJUSEZDTEVOQlFUTkNPMEZCVVVFc1NVRkJUVEJTTERSQ1FVRTBRaXhIUVVGSE8wRkJRMjVET1hOQ0xFVkJRVUZCTEVWQlFVVXNSVUZCUlN4RlFVUXJRanRCUVVWdVEwVXNSVUZCUVVFc1JVRkJSU3hGUVVGRkxFVkJSaXRDTzBGQlIyNURReXhGUVVGQlFTeEZRVUZGTEVWQlFVVXNSVUZJSzBJN1FVRkpia05ETEVWQlFVRkJMRVZCUVVVc1JVRkJSU3hGUVVvclFqdEJRVXR1UTJkaUxFVkJRVUZCTEVWQlFVVXNSVUZCUlR0QlFVd3JRaXhEUVVGeVF6dEJRVEpDUVN4SlFVRk5NbElzTWtKQlFUSkNMRWRCUVVjN1FVRkRiRU40YmtJc1JVRkJRVUVzVVVGQlVTeEZRVUZGTEU5QlJIZENPMEZCUld4RFNTeEZRVUZCUVN4SlFVRkpMRVZCUVVVc1QwRkdORUk3UVVGSGJFTk5MRVZCUVVGQkxGTkJRVk1zUlVGQlJTeE5RVWgxUWp0QlFVbHNRMjFZTEVWQlFVRkJMRmRCUVZjc1JVRkJSU3hOUVVweFFqdEJRVXRzUTNaWUxFVkJRVUZCTEVkQlFVY3NSVUZCUlN4UFFVdzJRanRCUVUxc1F6aENMRVZCUVVGQkxHMUNRVUZ0UWl4RlFVRkZMRTlCVG1FN1FVRlBiRU40UWl4RlFVRkJRU3hMUVVGTExFVkJRVVU3UVVGUU1rSXNRMEZCY0VNN1FVRlZRU3hCUVVGbExGTkJRVk0yYlVJc1IwRkJWQ3hEUVVGaE5YaENMRXRCUVdJc1JVRkJNa0k3UVVGQlFUczdRVUZCUVN4elFrRlhjRU5CTEV0QldHOURMRU5CUlhSRGIycENMRTFCUm5ORE8wRkJRVUVzVFVGRmRFTkJMRTFCUm5ORExEaENRVVUzUWl4TFFVWTJRanRCUVVGQkxIVkNRVmR3UTNCcVFpeExRVmh2UXl4RFFVZDBRMmwwUWl4UFFVaHpRenRCUVVGQkxFMUJSM1JEUVN4UFFVaHpReXdyUWtGSE5VSXNZVUZJTkVJN1FVRkJRU3hOUVVsMFEzcFJMSEZDUVVwelF5eEhRVmR3UTNoakxFdEJXRzlETEVOQlNYUkRkMk1zY1VKQlNuTkRPMEZCUVVFc2RVSkJWM0JEZUdNc1MwRlliME1zUTBGTGRFTjFhMElzVDBGTWMwTTdRVUZCUVN4TlFVdDBRMEVzVDBGTWMwTXNLMEpCU3pWQ0xFdEJURFJDTzBGQlFVRXNkVUpCVjNCRGRtdENMRXRCV0c5RExFTkJUWFJEYTJwQ0xFOUJUbk5ETzBGQlFVRXNUVUZOZEVOQkxFOUJUbk5ETEN0Q1FVMDFRaXhMUVU0MFFqdEJRVUZCTEUxQlQzUkRla2NzU1VGUWMwTXNSMEZYY0VONll5eExRVmh2UXl4RFFVOTBRM2xqTEVsQlVITkRPMEZCUVVFc1RVRlJkRU52Vml4VFFWSnpReXhIUVZkd1F6ZDRRaXhMUVZodlF5eERRVkYwUXpaNFFpeFRRVkp6UXp0QlFVRkJMSGRDUVZkd1F6ZDRRaXhMUVZodlF5eERRVk4wUTNkcFFpeFJRVlJ6UXp0QlFVRkJMRTFCVTNSRFFTeFJRVlJ6UXl4blEwRlRNMElzUzBGVU1rSTdRVUZCUVN4dlFrRlhjRU40YVVJc1MwRlliME1zUTBGVmRFTkRMRWxCVm5ORE8wRkJRVUVzVFVGVmRFTkJMRWxCVm5ORExEUkNRVlV2UWl4SlFWWXJRanRCUVdGNFF5eE5RVUZOTm5oQ0xGRkJRVkVzUjBGQlIwb3NORUpCUVRSQ0xFTkJRVU42ZUVJc1NVRkJSQ3hEUVVFM1F6dEJRVVZCTEUxQlFVMDRTaXhMUVVGTExFZEJRMUo1V1N4UlFVRlJMRWxCUVVrc1QwRkJZaXhKUVVGNVFuRlFMRk5CUVhwQ0xFbEJRWE5EUml3eVFrRkJNa0lzUTBGQlF6RkZMRTlCUVVRc1EwRkVia1U3UVVGSFFTeE5RVUZOYkhWQ0xGZEJRVmNzUjBGQlJ6dEJRVU5zUWpoT0xFbEJRVUZCTEUxQlFVMHNSVUZCUlc5V0xHOUNRVUZyUWl4RFFVRkRhR2xDTEVsQlFVUXNRMEZFVWp0QlFVVnNRalJQTEVsQlFVRkJMRXRCUVVzc1JVRkJSVzlVTEc5Q1FVRnJRaXhEUVVGRGFHbENMRWxCUVVRN1FVRkdVQ3hIUVVGd1FqdEJRVXRCTEUxQlFVMHlhVUlzVDBGQlR5eEhRVUZIYUVjc1ZVRkJWU3hEUVVGRGVHUXNVVUZCVFN4RFFVRkRNbmxDTEVkQlFWSXNhMFJCUTNaQ00zbENMRkZCUVUwc1EwRkJRelowUWl4UFFVRkVMRU5CUkdsQ0xFVkJRMHdzUTBGQlEzcExMRkZCUkVrc1owTkJSWFpDY0dwQ0xGRkJRVTBzUTBGQlEyOXFRaXhSUVVablFpeEZRVVZNUVN4UlFVWkxMR2REUVVkMlFuQnFRaXhSUVVGTkxFTkJRVU5uYTBJc1RVRklaMElzUlVGSFVFRXNUVUZJVHl4blEwRkpka0pvYTBJc1VVRkJUU3hEUVVGRGJXeENMRTlCU21kQ0xFVkJTVTVCTEU5QlNrMHNaME5CUzNaQ2JteENMRkZCUVUwc1EwRkJRemhxUWl4UFFVeG5RaXhGUVV0T1FTeFBRVUZQTEVsQlFVa3NRMEZCUTNGQ0xFOUJRVm9zU1VGQmRVSXNRMEZCUTI1Q0xFMUJUR3hDTEdkQ1FVRXhRanRCUVZGQkxITkNRVU5GYUZRN1FVRkJTeXhKUVVGQkxGTkJRVk1zUlVGQlJYZFRMRTlCUVdoQ08wRkJRWGxDTEVsQlFVRXNTMEZCU3l4RlFVRkZOMnBDTzBGQlFXaERMR3RDUVVORmNWSXNZMEZCUXl4SFFVRkVPMEZCUVVzc1NVRkJRU3hSUVVGUkxFVkJRVU03UVVGQlpDeHJRa0ZQUlVFc1kwRkJReXhKUVVGRU8wRkJRMFVzU1VGQlFTeHJRa0ZCYTBJc1JVRkJReXhGUVVSeVFqdEJRVVZGTEVsQlFVRXNTMEZCU3l4RlFVRkZja2NzUzBGR1ZEdEJRVWRGTEVsQlFVRXNjVUpCUVhGQ0xFVkJRVVY1VXl4eFFrRklla0k3UVVGSlJTeEpRVUZCTEVsQlFVa3NSVUZCUlVNc1NVRktVanRCUVV0RkxFbEJRVUVzU1VGQlNTeEZRVUZGY1ZZN1FVRk1VaXhKUVZCR0xFTkJSRVlzUTBGRVJqdEJRVzFDUkR0QlFVVkVSaXhIUVVGSExFTkJRVU51WjBJc1UwRkJTaXhIUVVGblFqdEJRVU5rTWxJc1JVRkJRVUVzVFVGQlRTeEZRVUZGTjFNc1UwRkJVeXhEUVVGRGMwSXNTVUZFU2p0QlFVVmtiMklzUlVGQlFVRXNUMEZCVHl4RlFVRkZNV01zVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRM1pDTEdGQlJIVkNMRVZCUlhaQ0xGVkJSblZDTEVWQlIzWkNMSEZDUVVoMVFpeEZRVWwyUWl4TlFVcDFRaXhGUVV0MlFpeFhRVXgxUWl4RlFVMTJRaXhQUVU1MVFpeERRVUZvUWl4RFFVWkxPMEZCVldSblRTeEZRVUZCUVN4eFFrRkJjVUlzUlVGQlJXcE5MRk5CUVZNc1EwRkJRemhOTEV0QlFWWXNRMEZCWjBJN1FVRkRja05LTEVsQlFVRkJMRTFCUVUwc1JVRkJSVEZOTEZOQlFWTXNRMEZCUTFFN1FVRkViVUlzUjBGQmFFSXNRMEZXVkR0QlFXRmtkMVFzUlVGQlFVRXNUMEZCVHl4RlFVRkZhRlVzVTBGQlV5eERRVUZEYzBJc1NVRmlURHRCUVdOa2NWSXNSVUZCUVVFc1QwRkJUeXhGUVVGRk0xTXNVMEZCVXl4RFFVRkRjMElzU1VGa1REdEJRV1ZrTkVzc1JVRkJRVUVzU1VGQlNTeEZRVUZGYkUwc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENjRkVzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrcllpeExRVUZhTEVOQlFXaENMRU5CWmxFN1FVRm5RbVI1Vml4RlFVRkJRU3hUUVVGVExFVkJRVVYwYUVJc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENMRU5CUVVNc1RVRkJSQ3hGUVVGVExGVkJRVlFzUlVGQmNVSXNTMEZCY2tJc1JVRkJORUlzVDBGQk5VSXNRMEZCYUVJc1EwRm9Ra2M3UVVGcFFtUm5VeXhGUVVGQlFTeFJRVUZSTEVWQlFVVnFVeXhUUVVGVExFTkJRVU56UWl4SlFXcENUanRCUVd0Q1pEVlNMRVZCUVVGQkxFbEJRVWtzUlVGQlJYTlJMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUW5CUkxFMUJRVTBzUTBGQlEwTXNTVUZCVUN4RFFVRlpOR2hDTEc5Q1FVRmFMRU5CUVdoQ08wRkJiRUpSTEVOQlFXaENPenRCUXpkRlpTeFRRVUZUSzFBc1ZVRkJWQ3hQUVZsTU8wRkJRVUVzVFVGWVVqZFFMSEZDUVZkUkxGRkJXRkpCTEhGQ1FWZFJPMEZCUVVFc1RVRldVa01zY1VKQlZWRXNVVUZXVWtFc2NVSkJWVkU3UVVGQlFTeE5RVlJTTjBZc2EwSkJVMUVzVVVGVVVrRXNhMEpCVTFFN1FVRkJRU3hOUVZKU01GRXNUMEZSVVN4UlFWSlNRU3hQUVZGUk8wRkJRVUVzVFVGUVVucFJMSEZDUVU5UkxGRkJVRkpCTEhGQ1FVOVJPMEZCUVVFc1RVRk9ValpHTEZGQlRWRXNVVUZPVWtFc1VVRk5VVHRCUVVGQkxFMUJURkkxUml4SlFVdFJMRkZCVEZKQkxFbEJTMUU3UVVGQlFTeE5RVXBTYjFZc1UwRkpVU3hSUVVwU1FTeFRRVWxSTzBGQlFVRXNUVUZJVW5KUUxGRkJSMUVzVVVGSVVrRXNVVUZIVVR0QlFVRkJMRTFCUmxKMmFVSXNTVUZGVVN4UlFVWlNRU3hKUVVWUk8wRkJRVUVzVFVGRVVuTnBRaXhSUVVOUkxGRkJSRkpCTEU5QlExRTdPMEZCUVVFc2QwSkJRM05DTTFNc1VVRkJRU3hEUVVGbExFdEJRV1lzUTBGRWRFSTdRVUZCUVR0QlFVRkJMRTFCUTBSeGFVSXNVVUZFUXp0QlFVRkJMRTFCUTFORExGTkJSRlE3TzBGQlFVRXNlVUpCUlhkQ2RHbENMRkZCUVVFc1EwRkJaU3hMUVVGbUxFTkJSbmhDTzBGQlFVRTdRVUZCUVN4TlFVVkVkV2xDTEZOQlJrTTdRVUZCUVN4TlFVVlZNMDRzVlVGR1ZqczdRVUZCUVN4NVFrRkhkMEkxVlN4UlFVRkJMRU5CUVdVc1MwRkJaaXhEUVVoNFFqdEJRVUZCTzBGQlFVRXNUVUZIUkhkcFFpeFRRVWhETzBGQlFVRXNUVUZIVldwUUxGVkJTRlk3TzBGQlMxSXNjMEpCUTBVdlV6dEJRVU5GTEhGQ1FVRmxLMUlzY1VKQlJHcENPMEZCUlVVc2NVSkJRV1ZETEhGQ1FVWnFRanRCUVVkRkxHdENRVUZaTjBZc2EwSkJTR1E3UVVGSlJTeEpRVUZCTEZOQlFWTXNSVUZCUlVzc1ZVRkJWU3hEUVVOdVFuaGtMRkZCUVUwc1EwRkJRM2xxUWl4TlFVUlpMRVZCUlc1Q1VpeFJRVUZSTEVkQlFVZHFha0lzVVVGQlRTeERRVUZEYVdwQ0xGRkJRVllzUjBGQmNVSnFha0lzVVVGQlRTeERRVUZETUdwQ0xFOUJSbXBDTEVOQlNuWkNPMEZCVVVVc1NVRkJRU3hSUVVGUkxFVkJRVVZVTEZGQlVsbzdRVUZUUlN4SlFVRkJMRTFCUVUwc1JVRkJSVHRCUVVGQkxHRkJRVTF0UXl4VlFVRlZMRU5CUVVNc1MwRkJSQ3hEUVVGb1FqdEJRVUZCTEV0QlZGWTdRVUZWUlN4SlFVRkJMRTlCUVU4c1JVRkJSU3hwUWtGQlFYaENMRXRCUVVzN1FVRkJRU3hoUVVGSlZDeFJRVUZQTEVsQlFVbEJMRkZCUVU4c1EwRkJRenRCUVVGRlV5eFJRVUZCUVN4TFFVRkxMRVZCUVV4Qk8wRkJRVVlzVDBGQlJDeERRVUYwUWp0QlFVRkJMRXRCVm1oQ08wRkJWMFVzU1VGQlFTeFBRVUZQTEVWQlFVVTdRVUZCUVN4aFFVRk5kMElzVlVGQlZTeERRVUZETEVsQlFVUXNRMEZCYUVJN1FVRkJRU3hMUVZoWU8wRkJXVVVzU1VGQlFTeFhRVUZYTEVWQlFVVTdRVUZCUVN4aFFVRk5NRTRzVTBGQlV5eERRVUZETEVsQlFVUXNRMEZCWmp0QlFVRkJMRXRCV21ZN1FVRmhSU3hKUVVGQkxGbEJRVmtzUlVGQlJUdEJRVUZCTEdGQlFVMHZUeXhWUVVGVkxFTkJRVU1zU1VGQlJDeERRVUZvUWp0QlFVRkJMRXRCWW1oQ08wRkJZMFVzU1VGQlFTeFpRVUZaTEVWQlFVVXNkMEpCUVUwN1FVRkRiRUlyVHl4TlFVRkJRU3hUUVVGVExFTkJRVU1zUzBGQlJDeERRVUZVTzBGQlEwRXZUeXhOUVVGQlFTeFZRVUZWTEVOQlFVTXNTMEZCUkN4RFFVRldPMEZCUTBRc1MwRnFRa2c3UVVGclFrVXNTVUZCUVN4VFFVRlRMRVZCUVVVN1FVRkJRU3hoUVVGTkswOHNVMEZCVXl4RFFVRkRMRXRCUVVRc1EwRkJaanRCUVVGQkxFdEJiRUppTzBGQmJVSkZMRWxCUVVFc1NVRkJTU3hGUVVGRE8wRkJia0pRTEd0Q1FYRkNSVGxvUWl4alFVRkRMRWRCUVVRN1FVRkRSU3hKUVVGQkxFMUJRVTBzUlVGQlJTeERRVUZEYVZNc1VVRkJSQ3hKUVVGaE5GQXNVVUZFZGtJN1FVRkZSU3hKUVVGQkxFOUJRVThzUlVGQlJXaEdMRTlCUmxnN1FVRkhSU3hKUVVGQkxIRkNRVUZ4UWl4RlFVRkZlbEVzY1VKQlNIcENPMEZCU1VVc1NVRkJRU3hQUVVGUExFVkJRVVVzUTBGQlF6WkdMRkZCUVVRc1NVRkJZVGhRTEZOQlNuaENPMEZCUzBVc1NVRkJRU3hQUVVGUExFVkJRVVVzUTBGQlF6bFFMRkZCUVVRc1NVRkJZU3RRTEZOQlRIaENPMEZCVFVVc1NVRkJRU3hKUVVGSkxFVkJRVVV6Vml4SlFVNVNPMEZCVDBVc1NVRkJRU3hUUVVGVExFVkJRVVZ2Vml4VFFWQmlPMEZCVVVVc1NVRkJRU3hSUVVGUkxFVkJRVVZ5VUN4UlFWSmFPMEZCVTBVc1NVRkJRU3hKUVVGSkxFVkJRVVYyYVVJN1FVRlVVaXhKUVhKQ1JpeERRVVJHTzBGQmJVTkVPMEZCUlVRcmVFSXNWVUZCVlN4RFFVRkRkbWRDTEZOQlFWZ3NSMEZCZFVJN1FVRkRja0l3VVN4RlFVRkJRU3h4UWtGQmNVSXNSVUZCUlRWU0xGTkJRVk1zUTBGQlEzTkNMRWxCUkZvN1FVRkZja0oxVVN4RlFVRkJRU3h4UWtGQmNVSXNSVUZCUlRkU0xGTkJRVk1zUTBGQlEzTkNMRWxCUmxvN1FVRkhja0l3U3l4RlFVRkJRU3hyUWtGQmEwSXNSVUZCUldoTkxGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTEZWQlNHaENPMEZCU1hKQ05sQXNSVUZCUVVFc1QwRkJUeXhGUVVGRk1XTXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlEzWkNMR0ZCUkhWQ0xFVkJSWFpDTEZWQlJuVkNMRVZCUjNaQ0xIRkNRVWgxUWl4RlFVbDJRaXhOUVVwMVFpeEZRVXQyUWl4WFFVeDFRaXhGUVUxMlFpeFBRVTUxUWl4RlFVOTJRaXhMUVZCMVFpeERRVUZvUWl4RFFVcFpPMEZCWVhKQ1owMHNSVUZCUVVFc2NVSkJRWEZDTEVWQlFVVnFUU3hUUVVGVExFTkJRVU00VFN4TFFVRldMRU5CUVdkQ08wRkJRM0pEU2l4SlFVRkJRU3hOUVVGTkxFVkJRVVV4VFN4VFFVRlRMRU5CUVVOUk8wRkJSRzFDTEVkQlFXaENMRU5CWWtZN1FVRm5RbkpDYzFJc1JVRkJRVUVzVVVGQlVTeEZRVUZGT1ZJc1UwRkJVeXhEUVVGRGMwSXNTVUZvUWtNN1FVRnBRbkpDTkVzc1JVRkJRVUVzU1VGQlNTeEZRVUZGYkUwc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENjRkVzVFVGQlRTeERRVUZEUXl4SlFVRlFMRU5CUVZrcllpeExRVUZhTEVOQlFXaENMRU5CYWtKbE8wRkJhMEp5UW5sV0xFVkJRVUZCTEZOQlFWTXNSVUZCUlhSb1FpeFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eE5RVUZFTEVWQlFWTXNWVUZCVkN4RlFVRnhRaXhMUVVGeVFpeEZRVUUwUWl4UFFVRTFRaXhEUVVGb1FpeERRV3hDVlR0QlFXMUNja0lyVWl4RlFVRkJRU3hQUVVGUExFVkJRVVZvVXl4VFFVRlRMRU5CUVVONVR5eEpRVzVDUlR0QlFXOUNja0ozUkN4RlFVRkJRU3hSUVVGUkxFVkJRVVZxVXl4VFFVRlRMRU5CUVVOelFpeEpRWEJDUXp0QlFYRkNja0kxVWl4RlFVRkJRU3hKUVVGSkxFVkJRVVZ6VVN4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVQ3hGUVVGaExFbEJRV0lzUlVGQmJVSXNTVUZCYmtJc1JVRkJlVUlzU1VGQmVrSXNRMEZCYUVJN1FVRnlRbVVzUTBGQmRrSTdPMGxEZGtWeFFqWm9RanM3T3pzN1FVRlBia0lzYVVKQlFWbHllVUlzUzBGQldpeEZRVUV3UWp0QlFVRkJPenRCUVVGQk96dEJRVU40UWl3NFFrRkJUVUVzUzBGQlRqczdRVUZFZDBJc05FUkJUbXhDTzBGQlEwNXplVUlzVFVGQlFVRXNUMEZCVHl4RlFVRkZPMEZCUkVnc1MwRk5hMEk3TzBGQlFVRTdPMEZCUlhoQ0xGRkJRVWtzVDBGQlQzWkZMRkZCUVZBc1MwRkJiMElzVjBGQmNFSXNTVUZCYlVOQkxGRkJRVkVzUTBGQlEzZEZMR0ZCUVdoRUxFVkJRU3RFTzBGQlF6ZEVMRmxCUVV0RExFVkJRVXdzUjBGQlZYcEZMRkZCUVZFc1EwRkJRM2RGTEdGQlFWUXNRMEZCZFVJc1MwRkJka0lzUTBGQlZqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1PMEZCUTBGRkxFMUJRVUZCTEU5QlFVOHNRMEZCUTBNc1NVRkJVaXhEUVVORkxITkZRVVJHTzBGQlIwUTdPMEZCVkhWQ08wRkJWWHBDT3pzN08zZERRVVZ0UWp0QlFVTnNRaXhWUVVGSkxFOUJRVTh6UlN4UlFVRlFMRXRCUVc5Q0xGZEJRWEJDTEVsQlFXMURRU3hSUVVGUkxFTkJRVU0wUlN4SlFVRm9SQ3hGUVVGelJEdEJRVU53UkRWRkxGRkJRVUZCTEZGQlFWRXNRMEZCUXpSRkxFbEJRVlFzUTBGQlkwTXNWMEZCWkN4RFFVRXdRaXhMUVVGTFNpeEZRVUV2UWp0QlFVTkJMR0ZCUVVzdlJpeFJRVUZNTEVOQlFXTTdRVUZCUlRaR0xGVkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRllMRk5CUVdRN1FVRkRSRHRCUVVOR096czdNa05CUlhOQ08wRkJRM0pDTEZWQlFVbDJSU3hSUVVGUkxFTkJRVU0wUlN4SlFVRmlMRVZCUVcxQ08wRkJRMnBDTlVVc1VVRkJRVUVzVVVGQlVTeERRVUZETkVVc1NVRkJWQ3hEUVVGalJTeFhRVUZrTEVOQlFUQkNMRXRCUVV0TUxFVkJRUzlDTzBGQlEwUTdRVUZEUmpzN096WkNRVVZSTzBGQlFVRXNWVUZEUXpGcFFpeFJRVVJFTEVkQlEyTXNTMEZCU3psUUxFdEJSRzVDTEVOQlEwTTRVQ3hSUVVSRU8wRkJSVkFzWVVGQlR5eExRVUZMTUdNc1MwRkJUQ3hEUVVGWE9FWXNUMEZCV0N4SlFVRnpRbEVzV1VGQldTeERRVUZEYUdwQ0xGRkJRVVFzUlVGQlZ5eExRVUZMTUdsQ0xFVkJRV2hDTEVOQlFYcERPMEZCUTBRN096czdSVUZ1UTJkRE5XbENPenRCUTFCdVF6czdPenM3T3pzN08wRkJVMEVzU1VGQlRXMXFRaXhYUVVGWExFZEJRVWNzVTBGQlpFRXNWMEZCWXl4RFFVRkRiR3RDTEV0QlFVUXNSVUZCVVdoRExFMUJRVkk3UVVGQlFTeFRRVUZ0UW1kRExFdEJRVXNzUjBGQlIyaERMRTFCUVROQ08wRkJRVUVzUTBGQmNFSTdPMEZCVTBFc1FVRkJaU3hUUVVGVGJXMUNMRk5CUVZRc1QwRkxURHRCUVVGQkxFMUJTbEpzYWtJc1VVRkpVU3hSUVVwU1FTeFJRVWxSTzBGQlFVRXNUVUZJVW0xcVFpeHJRa0ZIVVN4UlFVaFNRU3hyUWtGSFVUdEJRVUZCTEUxQlJsSndiVUlzVFVGRlVTeFJRVVpTUVN4TlFVVlJPMEZCUVVFc1RVRkVVbWRETEV0QlExRXNVVUZFVWtFc1MwRkRVVHRCUVVOU0xFMUJRVTF4YTBJc2JVSkJRVzFDTEVkQlFVZElMRmRCUVZjc1EwRkJRMnhyUWl4TFFVRkVMRVZCUVZGb1F5eE5RVUZTTEVOQlFYWkRPMEZCUlVFc1RVRkJTWE50UWl4aFFVRktPMEZCUTBFc1RVRkJTVU1zV1VGQlNqczdRVUZGUVN4TlFVRkpTQ3hyUWtGQmEwSXNSMEZCUjBNc2JVSkJRWHBDTEVWQlFUaERPMEZCUXpWRFJTeEpRVUZCUVN4WlFVRlpMRWRCUVVkMmEwSXNTMEZCWmp0QlFVTkJjMnRDTEVsQlFVRkJMR0ZCUVdFc1IwRkJSM1JyUWl4TFFVRkxMRWRCUVVkdmEwSXNhMEpCUVhoQ08wRkJRMFFzUjBGSVJDeE5RVWRQTzBGQlEweEhMRWxCUVVGQkxGbEJRVmtzUjBGQlIzWnRRaXhOUVVGTkxFZEJRVWR2YlVJc2EwSkJRWGhDTzBGQlEwRkZMRWxCUVVGQkxHRkJRV0VzUjBGQlIzUnRRaXhOUVVGb1FqdEJRVU5FT3p0QlFVVkVMRTFCUVUwd2FVSXNVMEZCVXl4SFFVRkhMRU5CUVVNMFJDeGhRVUZoTEVkQlFVZDBiVUlzVFVGQmFrSXNTVUZCTWtJc1EwRkJReXhEUVVFNVF6dEJRVU5CTEUxQlFVMTVhVUlzVlVGQlZTeEhRVUZITEVOQlFVTTRSQ3haUVVGWkxFZEJRVWQyYTBJc1MwRkJhRUlzU1VGQmVVSXNRMEZCUXl4RFFVRTNRenRCUVVWQkxITkNRVU5GZFVJc1kwRkJReXhKUVVGRU8wRkJRVTBzU1VGQlFTeExRVUZMTEVWQlFVVjJRaXhMUVVGaU8wRkJRVzlDTEVsQlFVRXNUVUZCVFN4RlFVRkZhRU03UVVGQk5VSXNhMEpCUTBWMVJEdEJRVUZMTEVsQlFVRXNTMEZCU3l4RlFVRkZPMEZCUVVWb1R5eE5RVUZCUVN4VFFVRlRMRVZCUVVWdGRFSXNVMEZCWWp0QlFVRjNRbWgwUWl4TlFVRkJRU3hWUVVGVkxFVkJRVVVyYzBJN1FVRkJjRU03UVVGQldpeHJRa0ZEUld4bUxHTkJRVU1zU1VGQlJEdEJRVUZOTEVsQlFVRXNTMEZCU3l4RlFVRkZaMnBDTEZsQlFXSTdRVUZCTWtJc1NVRkJRU3hOUVVGTkxFVkJRVVZFTzBGQlFXNURMRXRCUTBkeWFrSXNVVUZFU0N4RFFVUkdMRU5CUkVZc1EwRkVSanRCUVZORU8wRkJSVVJyYWtJc1UwRkJVeXhEUVVGRGRtaENMRk5CUVZZc1IwRkJjMEk3UVVGRGNFSXpRaXhGUVVGQlFTeFJRVUZSTEVWQlFVVlRMRk5CUVZNc1EwRkJRMjFDTEVsQlJFRTdRVUZGY0VKMWFFSXNSVUZCUVVFc2EwSkJRV3RDTEVWQlFVVXhhVUlzVTBGQlV5eERRVUZEVHl4TlFVRldMRU5CUVdsQ2MwMHNWVUZHYWtJN1FVRkhjRUoyVVN4RlFVRkJRU3hOUVVGTkxFVkJRVVV3UkN4VFFVRlRMRU5CUVVOUExFMUJRVllzUTBGQmFVSnpUU3hWUVVoTU8wRkJTWEJDZGs4c1JVRkJRVUVzUzBGQlN5eEZRVUZGTUVJc1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDA3UVVGS1NpeERRVUYwUWpzN096dEJRekZEUVN4SlFVRk5hVmNzV1VGQldTeEhRVUZITEVOQlFYSkNPMEZCUlVFc1FVRkJaU3hUUVVGVFF5eEpRVUZVTEU5QlRVdzdRVUZCUVN4TlFVeFNlR3BDTEZGQlMxRXNVVUZNVWtFc1VVRkxVVHRCUVVGQkxFMUJTbEo1YWtJc1NVRkpVU3hSUVVwU1FTeEpRVWxSTzBGQlFVRXNlVUpCU0ZJM1Z5eE5RVWRSTzBGQlFVRXNUVUZJVWtFc1RVRkhVU3cwUWtGSVF5eExRVWRFTzBGQlFVRXNUVUZHVWpaR0xFOUJSVkVzVVVGR1VrRXNUMEZGVVR0QlFVRkJMSGxDUVVSU2NVTXNUVUZEVVR0QlFVRkJMRTFCUkZKQkxFMUJRMUVzTkVKQlJFTXNTVUZEUkRzN1FVRkJRU3gzUWtGRE1FTm9WaXhSUVVGQkxFTkJRV1VzU1VGQlppeERRVVF4UXp0QlFVRkJPMEZCUVVFc1RVRkRSRFJxUWl4cFFrRkVRenRCUVVGQkxFMUJRMnRDUXl4dlFrRkViRUk3TzBGQlJWSXNUVUZCVFVNc1IwRkJSeXhIUVVGSE9VOHNUVUZCVFN4TFFVRkxMRTlCUVZnc1IwRkJjVUlzY1VKQlFYSkNMRWRCUVRaRExFbEJRWHBFTzBGQlEwRXNUVUZCVFN0UExGVkJRVlVzUjBGQlJ5OVBMRTFCUVUwc1kwRkJUMEVzVFVGQlVDeEpRVUZyUWl4SlFVRXpRenM3UVVGRlFTeE5RVUZOUXl4WFFVRlhMRWRCUVVjc1UwRkJaRUVzVjBGQll5eERRVUZETjBJc1MwRkJSQ3hGUVVGclF6dEJRVU53UkN4UlFVRkpWQ3hQUVVGUExFbEJRVWxuVWl4SlFVRm1MRVZCUVhGQ08wRkJRMjVDYUZJc1RVRkJRVUVzVDBGQlR5eERRVUZETzBGQlFVVlRMRkZCUVVGQkxFdEJRVXNzUlVGQlRFRTdRVUZCUml4UFFVRkVMRU5CUVZBN1FVRkRSRHRCUVVOR0xFZEJTa1E3TzBGQlRVRXNUVUZCVFRSUkxHVkJRV1VzUjBGQlJ5eFRRVUZzUWtFc1pVRkJhMElzUjBGQlRUdEJRVU0xUWl4UlFVRkphRkFzVFVGQlRTeExRVUZMTEU5QlFWZ3NTVUZCYzBJeVR5eEpRVUV4UWl4RlFVRm5RenRCUVVNNVFrVXNUVUZCUVVFc2IwSkJRVzlDTEVOQlFVTXNTMEZCUkN4RFFVRndRanRCUVVORU8wRkJRMFlzUjBGS1JEczdRVUZOUVN4TlFVRk5TU3hYUVVGWExFZEJRVWNzVTBGQlpFRXNWMEZCWXl4RFFVRkROMUVzUzBGQlJDeEZRVUZ4UXp0QlFVTjJSQ3hSUVVGSk5FSXNUVUZCVFN4TFFVRkxMRTlCUVZnc1NVRkJjMEkxUWl4TFFVRkxMRU5CUVVNd1RTeFBRVUZPTEV0QlFXdENNa1FzV1VGQmVFTXNTVUZCZDBSRkxFbEJRVFZFTEVWQlFXdEZPMEZCUTJoRlJTeE5RVUZCUVN4dlFrRkJiMElzUTBGQlF5eEpRVUZFTEVOQlFYQkNPMEZCUTBRN1FVRkRSaXhIUVVwRU96dEJRVTFCTEhOQ1FVTkZjbXBDTzBGQlEwVXNTVUZCUVN4VFFVRlRMRVZCUVVWcFVDeFZRVUZGTEVOQlExaHFaMElzVVVGQlRTeERRVUZEYjFrc1NVRkVTU3hGUVVWWVoyTXNhVUpCUVdsQ0xFZEJRVWR3TUVJc1VVRkJUU3hEUVVGRE1EQkNMRzlDUVVGV0xFZEJRV2xETEVWQlJuWkRMRVZCUjFod1dDeE5RVUZOTEVkQlFVY3NSVUZCU0N4SFFVRlJkR1FzVVVGQlRTeERRVUZEYVVjc1MwRklWaXhEUVVSbU8wRkJUVVVzU1VGQlFTeEpRVUZKTEVWQlFVVnJkVUlzU1VGT1VqdEJRVTlGTEVsQlFVRXNWMEZCVnl4RlFVRkZTeXhsUVZCbU8wRkJVVVVzU1VGQlFTeFBRVUZQTEVWQlFVVkRMRmRCVWxnN1FVRlRSU3hKUVVGQkxFOUJRVThzUlVGQlJXaFFMRmRCVkZnN1FVRlZSU3hKUVVGQkxFZEJRVWNzUlVGQlJUWlBMRWRCVmxBN1FVRlhSU3hKUVVGQkxFMUJRVTBzUlVGQlJVTTdRVUZZVml4TFFXRkhOMnBDTEZGQllrZ3NRMEZFUmp0QlFXbENSRHRCUVVWRWQycENMRWxCUVVrc1EwRkJRemRvUWl4VFFVRk1MRWRCUVdsQ08wRkJRMll6UWl4RlFVRkJRU3hSUVVGUkxFVkJRVVZUTEZOQlFWTXNRMEZCUTIxQ0xFbEJRVllzUTBGQlpUQk1MRlZCUkZZN1FVRkZabTFYTEVWQlFVRkJMRWxCUVVrc1JVRkJSV2hxUWl4VFFVRlRMRU5CUVVOUkxFMUJRVllzUTBGQmFVSnhUU3hWUVVaU08wRkJSMlpXTEVWQlFVRkJMRTFCUVUwc1JVRkJSVzVOTEZOQlFWTXNRMEZCUTNOQ0xFbEJTRWc3UVVGSlpqQlJMRVZCUVVGQkxFOUJRVThzUlVGQlJXaFRMRk5CUVZNc1EwRkJRM2xQTEVsQlNrbzdRVUZMWmpSR0xFVkJRVUZCTEUxQlFVMHNSVUZCUlhKVkxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFbEJRVVFzUlVGQlR5eE5RVUZRTEVWQlFXVXNUMEZCWml4RFFVRm9RanRCUVV4UExFTkJRV3BDT3p0QlEyaEZRVHM3T3pzN1FVRlBRU3hCUVVGbExGTkJRVk4xYWtJc1VVRkJWQ3hEUVVOaWNEQkNMRVZCUkdFc1JVRkhZanRCUVVGQkxFMUJSRUZ4TUVJc1ZVRkRRU3gxUlVGRWNVSXNSMEZEY2tJN1FVRkRRU3hOUVVGSlF5eFZRVUUwUWl4SFFVRkhMRWxCUVc1RE96dEJRVVZCTEUxQlFVMURMRk5CUVZNc1IwRkJSeXhUUVVGYVFTeFRRVUZaTEVkQlFXZENPMEZCUVVFc2MwTkJRVnBETEVsQlFWazdRVUZCV2tFc1RVRkJRVUVzU1VGQldUdEJRVUZCT3p0QlFVTm9ReXhSUVVGSlJpeFZRVUZLTEVWQlFXZENPMEZCUTJSSExFMUJRVUZCTEZsQlFWa3NRMEZCUTBnc1ZVRkJSQ3hEUVVGYU8wRkJRMFE3TzBGQlJVUkJMRWxCUVVGQkxGVkJRVlVzUjBGQlIzSklMRlZCUVZVc1EwRkJReXhaUVVGTk8wRkJRelZDY1Vnc1RVRkJRVUVzVlVGQlZTeEhRVUZITEVsQlFXSTdRVUZEUVhRd1FpeE5RVUZCUVN4RlFVRkZMRTFCUVVZc1UwRkJUWGN3UWl4SlFVRk9PMEZCUTBRc1MwRkljMElzUlVGSGNFSklMRlZCU0c5Q0xFTkJRWFpDTzBGQlNVUXNSMEZVUkRzN1FVRlhRVVVzUlVGQlFVRXNVMEZCVXl4RFFVRkRSU3haUVVGV0xFZEJRWGxDTEZsQlFVMDdRVUZETjBJc1VVRkJTVWdzVlVGQlNpeEZRVUZuUWp0QlFVTmtSeXhOUVVGQlFTeFpRVUZaTEVOQlFVTklMRlZCUVVRc1EwRkJXanRCUVVORU8wRkJRMFlzUjBGS1JEczdRVUZOUVN4VFFVRlBReXhUUVVGUU8wRkJRMFE3TzBsRFRtOUNSenM3T3pzN096czdPenM3T3pzN096czBSRUZyUWxnc1dVRkJUVHRCUVVGQkxIZENRVkZTTEUxQlFVdHlNRUlzUzBGU1J6dEJRVUZCTEZWQlJWWnpNRUlzWlVGR1ZTeGxRVVZXUVN4bFFVWlZPMEZCUVVFc1ZVRkhWa01zVDBGSVZTeGxRVWRXUVN4UFFVaFZPMEZCUVVFc1ZVRkpWa01zVlVGS1ZTeGxRVWxXUVN4VlFVcFZPMEZCUVVFc1ZVRkxWa01zVTBGTVZTeGxRVXRXUVN4VFFVeFZPMEZCUVVFc1ZVRk5Wa01zV1VGT1ZTeGxRVTFXUVN4WlFVNVZPMEZCUVVFc1ZVRlBWblpITEZOQlVGVXNaVUZQVmtFc1UwRlFWVHM3UVVGVldpeFZRVUZKYjBjc1QwRkJUeXhKUVVGSlF5eFZRVUZZTEVsQlFYbENMRU5CUVVORExGTkJRVGxDTEVWQlFYbERPMEZCUTNaRE8wRkJRMFE3TzBGQlEwUXNWVUZCVFVVc1dVRkJXU3hIUVVGSFRDeGxRVUZsTEVkQlFVY3NRMEZCZGtNN08wRkJSVUVzVlVGQlNXNUhMRk5CUVZNc1IwRkJSM2RITEZsQlFWb3NSMEZCTWtKRUxGbEJRUzlDTEVWQlFUWkRPMEZCUXpORFJDeFJRVUZCUVN4VFFVRlRPMEZCUTFZN1FVRkRSanM3T3pzN096dDNRMEV4UW0xQ08wRkJRMnhDTjBnc1RVRkJRVUVzVlVGQlZTeERRVUZETEV0QlFVdDRXU3hMUVVGT0xFTkJRVlk3UVVGRFJEczdPM2xEUVVWdlFqdEJRVU51UWl4WFFVRkxRU3hMUVVGTU8wRkJRMFE3T3pzMlFrRnpRbEU3UVVGRFVDeGhRVUZQTEVsQlFWQTdRVUZEUkRzN096dEZRWGhEY1VONFJUczdaMEpCUVc1Q2VXdENMSGxDUVVOQk8wRkJRMnBDUXl4RlFVRkJRU3hsUVVGbExFVkJRVVV2YWtJc1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDBzVlVGRWFrSTdRVUZGYWtKdFdDeEZRVUZCUVN4UFFVRlBMRVZCUVVWb2EwSXNVMEZCVXl4RFFVRkRjMElzU1VGR1JqdEJRVWRxUWpKcFFpeEZRVUZCUVN4VlFVRlZMRVZCUVVWcWEwSXNVMEZCVXl4RFFVRkRjMElzU1VGQlZpeERRVUZsZFV3c1ZVRklWanRCUVVscVFuRllMRVZCUVVGQkxGTkJRVk1zUlVGQlJXeHJRaXhUUVVGVExFTkJRVU41VHl4SlFVcEtPMEZCUzJwQ01GWXNSVUZCUVVFc1dVRkJXU3hGUVVGRmJtdENMRk5CUVZNc1EwRkJRMDhzVFVGQlZpeERRVUZwUW5OTkxGVkJUR1E3UVVGTmFrSXJVU3hGUVVGQlFTeFRRVUZUTEVWQlFVVTFaQ3hUUVVGVExFTkJRVU5QTEUxQlFWWXNRMEZCYVVKelRUdEJRVTVZT3pzN08wRkRSbkpDTEZOQlFWTjNXQ3hyUWtGQlZDeERRVUUwUWtNc1pVRkJOVUlzUlVGQk5rTTdRVUZETTBNc1UwRkJUeXhQUVVGUFFTeGxRVUZRTEV0QlFUSkNMRlZCUVROQ0xFZEJRMGhCTEdWQlFXVXNSVUZFV2l4SFFVVklRU3hsUVVaS08wRkJSMFE3TzBsQlJXOUNRenM3T3pzN096czdPenM3T3pzN096czdPelJGUVRoQ1N6dEJRVUZCTEdGQlFVMHNUVUZCUzBRc1pVRkJXRHRCUVVGQk96dHRSVUZGVkN4VlFVRkROMUlzUzBGQlJDeEZRVUZyUWp0QlFVTXZRaXhaUVVGTGFHcENMRXRCUVV3c1EwRkJWeXN3UWl4UlFVRllMRU5CUVc5Q0wxSXNTMEZCY0VJN1FVRkRSRHM3T3pzN096dDNRMEY0UW0xQ08wRkJRMnhDTEZWQlFVMDJVaXhsUVVGbExFZEJRVWRFTEd0Q1FVRnJRaXhEUVVGRExFdEJRVXMxTUVJc1MwRkJUQ3hEUVVGWE5qQkNMR1ZCUVZvc1EwRkJNVU03TzBGQlEwRXNWVUZCU1VFc1pVRkJTaXhGUVVGeFFqdEJRVU51UWl4aFFVRkxSeXh4UWtGQlRDeERRVUV5UWtnc1pVRkJNMEk3UVVGRFJEdEJRVU5HT3pzN2VVTkJSVzlDTzBGQlEyNUNMRlZCUVUxSkxHMUNRVUZ0UWl4SFFVRkhUQ3hyUWtGQmEwSXNRMEZCUXl4TFFVRkxOVEJDTEV0QlFVd3NRMEZCVnpZd1FpeGxRVUZhTEVOQlFUbERPenRCUVVOQkxGVkJRVWxKTEcxQ1FVRnRRaXhKUVVGSlFTeHRRa0ZCYlVJc1MwRkJTeXhMUVVGTFNpeGxRVUY0UkN4RlFVRjVSVHRCUVVOMlJTeGhRVUZMUnl4eFFrRkJUQ3hEUVVFeVFrTXNiVUpCUVROQ08wRkJRMFE3UVVGRFJqczdPekpEUVVWelFqdEJRVU55UWl4VlFVRkpMRXRCUVV0S0xHVkJRVlFzUlVGQk1FSTdRVUZEZUVJc1lVRkJTMEVzWlVGQlRDeERRVUZ4UWpkSUxHMUNRVUZ5UWl4RFFVRjVReXhSUVVGNlF5eEZRVUZ0UkN4TFFVRkxhMGtzV1VGQmVFUTdRVUZEUkR0QlFVTkdPenM3TUVOQlVYRkNUQ3hwUWtGQk9FSTdRVUZEYkVRc1ZVRkJTU3hMUVVGTFFTeGxRVUZVTEVWQlFUQkNPMEZCUTNoQ08wRkJRMEVzWVVGQlMwRXNaVUZCVEN4RFFVRnhRamRJTEcxQ1FVRnlRaXhEUVVGNVF5eFJRVUY2UXl4RlFVRnRSQ3hMUVVGTGEwa3NXVUZCZUVRN1FVRkRSRHM3UVVGRFJDeFhRVUZMVEN4bFFVRk1MRWRCUVhWQ1FTeGxRVUYyUWp0QlFVTkJMRmRCUVV0QkxHVkJRVXdzUTBGQmNVSTVTQ3huUWtGQmNrSXNRMEZCYzBNc1VVRkJkRU1zUlVGQlowUXNTMEZCUzIxSkxGbEJRWEpFTzBGQlEwUTdPenMyUWtGRlVUdEJRVU5RTEdGQlFVOTBiRUlzVVVGQlFTeERRVUZsZFd4Q0xFbEJRV1lzUTBGQmIwSXNTMEZCUzI0eFFpeExRVUZNTEVOQlFWYzRVQ3hSUVVFdlFpeERRVUZRTzBGQlEwUTdPenM3UlVFdlF6QkRSanM3WjBKQlFYaENhMnhDTERoQ1FVZEJPMEZCUTJwQ2FHeENMRVZCUVVGQkxGRkJRVkVzUlVGQlJWTXNVMEZCVXl4RFFVRkRiVUlzU1VGQlZpeERRVUZsTUV3c1ZVRkVVanRCUVVWcVFqSllMRVZCUVVGQkxGRkJRVkVzUlVGQlJYaHJRaXhUUVVGVExFTkJRVU41VHl4SlFVRldMRU5CUVdVMVFpeFZRVVpTTzBGQlIycENlVmdzUlVGQlFVRXNaVUZCWlN4RlFVRkZkR3RDTEZOQlFWTXNRMEZCUTAwc1UwRkJWaXhEUVVGdlFpeERRVUZEVGl4VFFVRlRMRU5CUVVOeFFpeE5RVUZZTEVWQlFXMUNja0lzVTBGQlV5eERRVUZEZVU4c1NVRkJOMElzUTBGQmNFSXNSVUZEWkRWQ08wRkJTbU03TzBGRGFrTnlRanM3T3pzN1FVRlBRU3hCUVVGbExGTkJRVk5uV1N4UlFVRlVMRU5CUTJKNk1VSXNSVUZFWVN4RlFVZGlPMEZCUVVFc1RVRkVRWEV3UWl4VlFVTkJMSFZGUVVSeFFpeEhRVU55UWp0QlFVTkJMRTFCUVVseFFpeEpRVUZLTzBGQlEwRXNUVUZCU1hCQ0xGVkJRVW83TzBGQlEwRXNUVUZCVFhGQ0xGTkJRVk1zUjBGQlJ5eFRRVUZhUVN4VFFVRlpMRWRCUVdkQ08wRkJRVUVzYzBOQlFWcHVRaXhKUVVGWk8wRkJRVnBCTEUxQlFVRkJMRWxCUVZrN1FVRkJRVHM3UVVGRGFFTXNVVUZCVFc5Q0xFZEJRVWNzUjBGQlIwTXNTVUZCU1N4RFFVRkRSQ3hIUVVGTUxFVkJRVm83TzBGQlEwRXNVVUZCU1VZc1NVRkJTU3hMUVVGTGJsa3NVMEZCVkN4SlFVRnpRbkZaTEVkQlFVY3NSMEZCUjBZc1NVRkJUaXhIUVVGaGNrSXNWVUZCZGtNc1JVRkJiVVE3UVVGRGFrUkpMRTFCUVVGQkxGbEJRVmtzUTBGQlEwZ3NWVUZCUkN4RFFVRmFPMEZCUTBGQkxFMUJRVUZCTEZWQlFWVXNSMEZCUjNKSUxGVkJRVlVzUTBGQlF5eFpRVUZOTzBGQlF6VkNlVWtzVVVGQlFVRXNTVUZCU1N4SFFVRkhSU3hIUVVGUU8wRkJRMEUxTVVJc1VVRkJRVUVzUlVGQlJTeE5RVUZHTEZOQlFVMTNNRUlzU1VGQlRqdEJRVU5FTEU5QlNITkNMRVZCUjNCQ1NDeFZRVUZWTEVsQlFVbDFRaXhIUVVGSExFZEJRVWRHTEVsQlFWWXNRMEZJVlN4RFFVRjJRanRCUVVsRUxFdEJUa1FzVFVGTlR6dEJRVU5NUVN4TlFVRkJRU3hKUVVGSkxFZEJRVWRGTEVkQlFWQTdRVUZEUVRVeFFpeE5RVUZCUVN4RlFVRkZMRTFCUVVZc1UwRkJUWGN3UWl4SlFVRk9PMEZCUTBRN1FVRkRSaXhIUVZwRU96dEJRV05CYlVJc1JVRkJRVUVzVTBGQlV5eERRVUZEYkVJc1dVRkJWaXhIUVVGNVFpeFpRVUZOTzBGQlF6ZENMRkZCUVVsSUxGVkJRVW9zUlVGQlowSTdRVUZEWkVjc1RVRkJRVUVzV1VGQldTeERRVUZEU0N4VlFVRkVMRU5CUVZvN1FVRkRSRHRCUVVOR0xFZEJTa1E3TzBGQlRVRXNVMEZCVDNGQ0xGTkJRVkE3UVVGRFJEczdTVU12UW05Q1J6czdPenRwUTBGRlJTeEpRVUZKUXl4UFFVRktPenM3T3p0M1FrRkZha0oyYlVJc1MwRkJXVHRCUVVOa0xHRkJRVThzUzBGQlMzSlFMRWRCUVV3c1EwRkJVell4UWl4SFFVRlVMRU5CUVdGNGJVSXNSMEZCWWl4RFFVRlFPMEZCUTBRN096dDNRa0ZGUjBFc1MwRkJhVUk3UVVGRGJrSXNZVUZCVHl4TFFVRkxjbEFzUjBGQlRDeERRVUZUT0RGQ0xFZEJRVlFzUTBGQllYcHRRaXhIUVVGaUxFTkJRVkE3UVVGRFJEczdPM2RDUVVWSFFTeExRVUZSTVVzc1QwRkJaMEk3UVVGRE1VSXNWMEZCU3pORkxFZEJRVXdzUTBGQlV5c3hRaXhIUVVGVUxFTkJRV0V4YlVJc1IwRkJZaXhGUVVGclFqRkxMRXRCUVd4Q08wRkJRMFE3T3pzMFFrRkZZVHRCUVVOYUxGZEJRVXN6UlN4SFFVRk1MRWRCUVZjc1NVRkJTVFF4UWl4UFFVRktMRVZCUVZnN1FVRkRSRHM3T3pzN08wRkRja0pJT3pzN096dEJRVTlCTEVGQlFVOHNVMEZCVTBrc1owSkJRVlFzUTBGQk1FSnVTQ3hQUVVFeFFpeEZRVUYzUkR0QlFVTTNSQ3hUUVVGUFFTeFBRVUZQTEV0QlFVczVVU3hOUVVGYUxFZEJRWEZDUVN4TlFVRk5MRU5CUVVOMVVTeFhRVUUxUWl4SFFVRXdRMDhzVDBGQlR5eERRVUZEVEN4WlFVRjZSRHRCUVVORU8wRkJSVVFzUVVGQlR5eFRRVUZUZVVnc2EwSkJRVlFzUjBGQk9FSTdRVUZEYmtNc1RVRkJTV3haTEUxQlFVMHNRMEZCUXpGUUxFOUJRVkFzUzBGQmJVSXJUeXhUUVVGMlFpeEZRVUZyUXp0QlFVTm9RenRCUVVOQkxGZEJRVTlYTEUxQlFVMHNRMEZCUXpGUUxFOUJRV1E3UVVGRFJEczdRVUZEUkN4TlFVTkZOR1lzVVVGQlVTeERRVUZEUXl4bFFVRlVMRWxCUTBGRUxGRkJRVkVzUTBGQlEwTXNaVUZCVkN4RFFVRjVRa2NzVTBGQmVrSXNTMEZCZFVOcVVpeFRRVVo2UXl4RlFVZEZPMEZCUTBFN1FVRkRRU3hYUVVGUE5sRXNVVUZCVVN4RFFVRkRReXhsUVVGVUxFTkJRWGxDUnl4VFFVRm9RenRCUVVORU96dEJRVU5FTEZOQlFVOHNRMEZCVUR0QlFVTkVPMEZCUlVRc1FVRkJUeXhUUVVGVE5rZ3NiMEpCUVZRc1EwRkJPRUp5U0N4UFFVRTVRaXhGUVVFMFJEdEJRVU5xUlN4VFFVRlBRU3hQUVVGUExFdEJRVXM1VVN4TlFVRmFMRWRCUTBocldTeHJRa0ZCYTBJc1JVRkVaaXhIUVVWSWNFZ3NUMEZCVHl4RFFVRkRVaXhUUVVGU0xFZEJRVzlDVVN4UFFVRlBMRU5CUVVOVkxIRkNRVUZTTEVkQlFXZERNV2RDTEVkQlJuaEVPMEZCUjBRN1FVRkZSQ3hCUVVGUExGTkJRVk56YmtJc1pVRkJWQ3hEUVVGNVFuUklMRTlCUVhwQ0xFVkJRWFZFTzBGQlF6VkVMRk5CUVU5QkxFOUJRVThzUzBGQlN6bFJMRTFCUVZvc1NVRkJjMEpyVVN4UlFVRlJMRU5CUVVORExHVkJRUzlDTEVkQlEwaEVMRkZCUVZFc1EwRkJRME1zWlVGQlZDeERRVUY1UWpCSExGbEJSSFJDTEVkQlJVZ3ZSaXhQUVVGUExFTkJRVU1yUml4WlFVWmFPMEZCUjBRN1FVRkZSQ3hCUVVGUExGTkJRVk4zUWl4WlFVRlVMRU5CUVhOQ2RrZ3NUMEZCZEVJc1JVRkJiMFE3UVVGRGVrUXNVMEZCVDBFc1QwRkJUeXhMUVVGTE9WRXNUVUZCV2l4SFFVRnhRbXRaTEd0Q1FVRnJRaXhGUVVGMlF5eEhRVUUwUTNCSUxFOUJRVThzUTBGQlExSXNVMEZCTTBRN1FVRkRSRHM3UVVOMFEwMHNTVUZCVFdkSkxITkNRVUZ6UWl4SFFVRkhReXhOUVVGTkxFTkJRVU1zV1VGQlJDeERRVUZ5UXpzN1FVTlJVQ3hKUVVGTmFGQXNVVUZCVFN4SFFVRkhMRk5CUVZSQkxFMUJRVk1zUTBGQlFXaFpMRWRCUVVjc1JVRkJTVHRCUVVOd1FpeE5RVUZKY1Znc1IwRkJSeXhIUVVGSExFTkJRVlk3TzBGQlEwRXNUMEZCU3l4SlFVRkpZU3hEUVVGRExFZEJRVWNzUTBGQllpeEZRVUZuUWtFc1EwRkJReXhIUVVGSGJGa3NSMEZCUnl4RFFVRkRPVThzVFVGQmVFSXNSVUZCWjBObmJrSXNRMEZCUXl4SlFVRkpMRU5CUVhKRExFVkJRWGRETzBGQlEzUkRMRkZCUVVsc1dTeEhRVUZITEVOQlFVTnJXU3hEUVVGRUxFTkJRVWdzUjBGQlUyeFpMRWRCUVVjc1EwRkJRM0ZZTEVkQlFVUXNRMEZCYUVJc1JVRkJkVUk3UVVGRGNrSkJMRTFCUVVGQkxFZEJRVWNzUjBGQlIyRXNRMEZCVGp0QlFVTkVPMEZCUTBZN08wRkJRMFFzVTBGQlQySXNSMEZCVUR0QlFVTkVMRU5CVWtRN08wRkJWVUVzU1VGQlRUUlFMRk5CUVZNc1IwRkJSeXhUUVVGYVFTeFRRVUZaTEVOQlFVTjRia0lzUzBGQlJEdEJRVUZCTEUxQlFWRm9ReXhOUVVGU0xIVkZRVUZwUW5sd1FpeFJRVUZxUWp0QlFVRkJMRk5CUVN0Q08wRkJReTlETTI1Q0xFbEJRVUZCTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUkhsRE8wRkJSUzlEZGtJc1NVRkJRVUVzU1VGQlNTeEZRVUZGTEVOQlFVTXNTVUZHZDBNN1FVRkhMME41UWl4SlFVRkJRU3hMUVVGTExFVkJRVXhCTEV0QlNDdERPMEZCU1M5RGFFTXNTVUZCUVVFc1RVRkJUU3hGUVVGT1FUdEJRVW9yUXl4SFFVRXZRanRCUVVGQkxFTkJRV3hDT3p0QlFVOUJMSEZDUVVGbE8wRkJRVUVzVFVGRFlqQndRaXhMUVVSaExGRkJRMkpCTEV0QlJHRTdRVUZCUVN3NFFrRkZZa01zVjBGR1lUdEJRVUZCTEUxQlJXSkJMRmRCUm1Fc2FVTkJSVU1zUjBGR1JEdEJRVUZCTEhsQ1FVZGlkRkFzVFVGSVlUdEJRVUZCTEUxQlIySkJMRTFCU0dFc05FSkJSMG9zUlVGSVNUdEJRVUZCTERCQ1FVbGlkVkFzVDBGS1lUdEJRVUZCTEUxQlNXSkJMRTlCU21Fc05rSkJTVWdzUTBGS1J6dEJRVUZCTEUxQlMySTFia0lzUzBGTVlTeFJRVXRpUVN4TFFVeGhPMEZCUVVFc1UwRlpVaXhWUVVGRE1sZ3NTMEZCUkN4RlFVRnpRenRCUVVNelF5eFJRVUZKTTFnc1MwRkJTeXhKUVVGSkxFbEJRV0lzUlVGQmJVSTdRVUZEYWtJc1lVRkJUekpZTEV0QlFVc3NRMEZCUXpGdFFpeEhRVUZPTEVOQlFWVTdRVUZCUVN4bFFVRk5kVEpDTEZOQlFWTXNRMEZCUTBjc1YwRkJSQ3hEUVVGbU8wRkJRVUVzVDBGQlZpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1VVRkJUVVVzYjBKQlFXOUNMRWRCUVVkR0xGZEJRVmNzUjBGQlIzUlFMRTFCUVRORE8wRkJRMEVzVVVGQlRYbFFMRmRCUVZjc1IwRkJSekV4UWl4SlFVRkpMRU5CUVVOdGJFSXNSMEZCVEN4RFFVTnNRbTVzUWl4SlFVRkpMRU5CUVVNeU1VSXNTMEZCVEN4RFFVRlhMRU5CUVVNdmJrSXNTMEZCU3l4SFFVRkhjVmtzVFVGQlZDeEpRVUZ0UW5kUUxHOUNRVUU1UWl4RFFVUnJRaXhGUVVWc1FrUXNUMEZHYTBJc1EwRkJjRUlzUTBGT01rTTdPMEZCVnpORExGRkJRVTFKTEU5QlFVOHNSMEZCUnl4SlFVRkphak5DTEV0QlFVb3NRMEZCVlNzeVFpeFhRVUZXTEVWQlFYVkNlazhzU1VGQmRrSXNRMEZCTkVJc1EwRkJOVUlzUTBGQmFFSTdRVUZEUVN4UlFVRk5ORThzV1VGQldTeEhRVUZITnpGQ0xFbEJRVWtzUTBGQlEyMXNRaXhIUVVGTUxFTkJRMjVDYm14Q0xFbEJRVWtzUTBGQlF6SXhRaXhMUVVGTUxFTkJRVmNzUTBGQlF5OXVRaXhMUVVGTExFZEJRVWMyYmtJc2IwSkJRVzlDTEVkQlFVZERMRmRCUVM5Q0xFZEJRVFpEZWxBc1RVRkJPVU1zU1VGQmQwUXNRMEZCYmtVc1EwRkViVUlzUlVGRmJrSXNRMEZHYlVJc1EwRkJja0k3UVVGTFFTeFhRVUZQVml4TFFVRkxMRU5CUVVOdWJrSXNUVUZCVGl4RFFVRmhMRlZCUVVOdFVTeEhRVUZFTEVWQlFVMDJWeXhKUVVGT0xFVkJRV1U3UVVGRGFrTXNWVUZCVFdNc1UwRkJVeXhIUVVGSE0xZ3NSMEZCYkVJN1FVRkRRU3hWUVVGTk0wTXNUVUZCVFN4SFFVRkhNSEJDTEV0QlFVc3NRMEZCUTFvc1IwRkJUaXhEUVVGVmRGQXNTVUZCVml4RFFVRm1PMEZCUTBFc1ZVRkJTV2haTEZGQlFVbzdPMEZCUlVFc1ZVRkJTWGhDTEUxQlFVMHNTVUZCU1N4SlFVRmtMRVZCUVc5Q08wRkJRMnhDZDBJc1VVRkJRVUVzVVVGQlVTeEhRVUZIWjI5Q0xGTkJRVk1zUTBGQlEwY3NWMEZCUkN4RFFVRndRanRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEZsQlFVMVBMR1ZCUVdVc1IwRkJSMnh4UWl4TlFVRk5MRWRCUVVkeFlTeE5RVUZxUXp0QlFVTkJMRmxCUVUxclFpeEhRVUZITEVkQlFVZG9RaXhSUVVGTkxFTkJRVU41VUN4UFFVRkVMRU5CUVd4Q08wRkJRMEVzV1VGQlRXeHZRaXhIUVVGSExFZEJRVWRyYjBJc1QwRkJUeXhEUVVGRGVrOHNSMEZCUkN4RFFVRnVRanRCUVVOQkxGbEJRVTFvWWl4SlFVRkpMRWRCUVVkbllpeEhRVUZITEVkQlFVZHpUeXh2UWtGQlRpeEhRVUUyUWtrc1dVRkJNVU03UVVGRlFVUXNVVUZCUVVFc1QwRkJUeXhEUVVGRGVrOHNSMEZCUkN4RFFVRlFMRWxCUVdkQ01rOHNaVUZCYUVJN1FVRkRRVEZ2UWl4UlFVRkJRU3hSUVVGUkxFZEJRVWM3UVVGQlJVMHNWVUZCUVVFc1IwRkJSeXhGUVVGSVFTeEhRVUZHTzBGQlFVOTJRaXhWUVVGQlFTeEpRVUZKTEVWQlFVcEJMRWxCUVZBN1FVRkJZWGxDTEZWQlFVRkJMRXRCUVVzc1JVRkJSVEp1UWl4WFFVRndRanRCUVVGcFF6TndRaXhWUVVGQlFTeE5RVUZOTEVWQlFVNUJPMEZCUVdwRExGTkJRVmc3UVVGRFJEczdRVUZEUkhOaExFMUJRVUZCTEZOQlFWTXNRMEZCUTJoWUxFbEJRVllzUTBGQlpUbENMRkZCUVdZN1FVRkRRU3hoUVVGUE9Ga3NVMEZCVUR0QlFVTkVMRXRCYkVKTkxFVkJhMEpLTEVWQmJFSkpMRU5CUVZBN1FVRnRRa1FzUjBGb1JHTTdRVUZCUVN4RFFVRm1PenRCUTNSQ1FTeEpRVUZOYTFBc1YwRkJVeXhIUVVGSExGTkJRVnBCTEZOQlFWa3NRMEZCUTNodVFpeExRVUZFTzBGQlFVRXNUVUZCVVdoRExFMUJRVklzZFVWQlFXbENlWEJDTEZGQlFXcENPMEZCUVVFc1UwRkJLMEk3UVVGREwwTXpia0lzU1VGQlFVRXNSMEZCUnl4RlFVRkZMRU5CUVVNc1NVRkVlVU03UVVGRkwwTjJRaXhKUVVGQlFTeEpRVUZKTEVWQlFVVXNRMEZCUXl4SlFVWjNRenRCUVVjdlEzbENMRWxCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZJSzBNN1FVRkpMME5vUXl4SlFVRkJRU3hOUVVGTkxFVkJRVTVCTzBGQlNpdERMRWRCUVM5Q08wRkJRVUVzUTBGQmJFSTdPMEZCVDBFc2QwSkJRV1U3UVVGQlFTeE5RVU5pTUhCQ0xFdEJSR0VzVVVGRFlrRXNTMEZFWVR0QlFVRkJMRGhDUVVWaVF5eFhRVVpoTzBGQlFVRXNUVUZGWWtFc1YwRkdZU3hwUTBGRlF5eEhRVVpFTzBGQlFVRXNlVUpCUjJKMFVDeE5RVWhoTzBGQlFVRXNUVUZIWWtFc1RVRklZU3cwUWtGSFNpeEZRVWhKTzBGQlFVRXNUVUZKWW5KWkxFdEJTbUVzVVVGSllrRXNTMEZLWVR0QlFVRkJMREJDUVV0aU5HNUNMRTlCVEdFN1FVRkJRU3hOUVV0aVFTeFBRVXhoTERaQ1FVdElMRU5CVEVjN1FVRkJRU3hUUVZsU0xGVkJRVU5xVVN4TFFVRkVMRVZCUVhORE8wRkJRek5ETEZGQlFVa3pXQ3hMUVVGTExFbEJRVWtzU1VGQllpeEZRVUZ0UWp0QlFVTnFRaXhoUVVGUE1sZ3NTMEZCU3l4RFFVRkRNVzFDTEVkQlFVNHNRMEZCVlR0QlFVRkJMR1ZCUVUxMU1rSXNWMEZCVXl4RFFVRkRSeXhYUVVGRUxFTkJRV1k3UVVGQlFTeFBRVUZXTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hSUVVGTlJTeHZRa0ZCYjBJc1IwRkJSMFlzVjBGQlZ5eEhRVUZIZEZBc1RVRkJNME03UVVGRFFTeFJRVUZOZVZBc1YwRkJWeXhIUVVGSE1URkNMRWxCUVVrc1EwRkJRMjFzUWl4SFFVRk1MRU5CUTJ4Q2JteENMRWxCUVVrc1EwRkJRekl4UWl4TFFVRk1MRU5CUVZjc1EwRkJReTl1UWl4TFFVRkxMRWRCUVVkeFdTeE5RVUZVTEVsQlFXMUNkMUFzYjBKQlFUbENMRU5CUkd0Q0xFVkJSV3hDUkN4UFFVWnJRaXhEUVVGd1FqdEJRVXRCTEZGQlFVMTBVQ3hUUVVGVExFZEJRVWNzUlVGQmJFSTdRVUZEUVN4UlFVRk5NRkFzVDBGQlR5eEhRVUZITEVWQlFXaENPenRCUVVWQkxGTkJRVXNzU1VGQlNYWlFMRU5CUVVNc1IwRkJSeXhEUVVGaUxFVkJRV2RDUVN4RFFVRkRMRWRCUVVka0xFdEJRVXNzUTBGQlEyeHRRaXhOUVVFeFFpeEZRVUZyUTJkdVFpeERRVUZETEVsQlFVa3NRMEZCZGtNc1JVRkJNRU03UVVGRGVFTXNWVUZCU1dwYUxGRkJRVkVzVTBGQldqdEJRVU5CTEZWQlFVMTRRaXhOUVVGTkxFZEJRVWN3Y0VJc1MwRkJTeXhEUVVGRFdpeEhRVUZPTEVOQlFWVnVVQ3hMUVVGTExFTkJRVU5qTEVOQlFVUXNRMEZCWml4RFFVRm1PenRCUVVWQkxGVkJRVWw2WVN4TlFVRk5MRWxCUVVrc1NVRkJaQ3hGUVVGdlFqdEJRVU5zUW5kQ0xGRkJRVUZCTEZGQlFWRXNSMEZCUjJkdlFpeFhRVUZUTEVOQlFVTkhMRmRCUVVRc1EwRkJjRUk3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4WlFVRk5PWGhDTEUxQlFVMHNSMEZCUnpScFFpeERRVUZETEVkQlFVZHhVQ3hYUVVGdVFqdEJRVU5CTEZsQlFVMHZkMElzUjBGQlJ5eEhRVUZITTBVc1NVRkJTU3hEUVVGRE1qRkNMRXRCUVV3c1EwRkJWM1JRTEVOQlFVTXNSMEZCUjNGUUxGZEJRV1lzUTBGQldqczdRVUZGUVN4WlFVRkphbmxDTEUxQlFVMHNTMEZCU3l4RFFVRllMRWxCUVdkQ2JVa3NUVUZCVFN4SFFVRkhaM0ZDTEU5QlFVOHNRMEZCUTJwNFFpeEhRVUZFTEVOQlFYQkRMRVZCUVRKRE8wRkJRM3BEYVhoQ0xGVkJRVUZCTEU5QlFVOHNRMEZCUTJwNFFpeEhRVUZFTEVOQlFWQXNSMEZCWldsSUxFMUJRV1k3UVVGRFJEczdRVUZGUkN4WlFVRk5PRUlzUjBGQlJ5eEhRVU5RTDBrc1IwRkJSeXhIUVVGSExFTkJRVTRzUjBGRFNXbDRRaXhQUVVGUExFTkJRVU5zVnl4TFFVRlNMRU5CUVdNc1EwRkJaQ3hGUVVGcFFpOWhMRWRCUVdwQ0xFVkJRWE5DZGtjc1RVRkJkRUlzUTBGQk5rSXNWVUZCUXpJelFpeEhRVUZFTEVWQlFVMHpUQ3hEUVVGT08wRkJRVUVzYVVKQlFWa3lUQ3hIUVVGSExFZEJRVWN6VEN4RFFVRk9MRWRCUVZWdVJTeE5RVUYwUWp0QlFVRkJMRk5CUVRkQ0xFVkJRVEpFTEVOQlFUTkVMRU5CUkVvc1IwRkZTU3hEUVVoT08wRkJTMEUzV1N4UlFVRkJRU3hSUVVGUkxFZEJRVWM3UVVGRFZFMHNWVUZCUVVFc1IwRkJSeXhGUVVGSVFTeEhRVVJUTzBGQlJWUjJRaXhWUVVGQlFTeEpRVUZKTEVWQlFVVXhTU3hOUVVGTkxFZEJRVWRuZVVJc2IwSkJSazQ3UVVGSFZEZHVRaXhWUVVGQlFTeExRVUZMTEVWQlFVVXlia0lzVjBGSVJUdEJRVWxVTTNCQ0xGVkJRVUZCTEUxQlFVMHNSVUZCVGtFN1FVRktVeXhUUVVGWU8wRkJUVVE3TzBGQlEwUnpZU3hOUVVGQlFTeFRRVUZUTEVOQlFVTm9XQ3hKUVVGV0xFTkJRV1U1UWl4UlFVRm1PMEZCUTBRN08wRkJRMFFzVjBGQlR6aFpMRk5CUVZBN1FVRkRSQ3hIUVhaRVl6dEJRVUZCTEVOQlFXWTdPMEZEVUVFc1NVRkJUVU1zVVVGQlRTeEhRVUZITEZOQlFWUkJMRTFCUVZNc1EwRkJRV2haTEVkQlFVY3NSVUZCU1R0QlFVTndRaXhOUVVGSmNWZ3NSMEZCUnl4SFFVRkhMRU5CUVZZN08wRkJRMEVzVDBGQlN5eEpRVUZKWVN4RFFVRkRMRWRCUVVjc1EwRkJZaXhGUVVGblFrRXNRMEZCUXl4SFFVRkhiRmtzUjBGQlJ5eERRVUZET1U4c1RVRkJlRUlzUlVGQlowTm5ia0lzUTBGQlF5eEpRVUZKTEVOQlFYSkRMRVZCUVhkRE8wRkJRM1JETEZGQlFVbHNXU3hIUVVGSExFTkJRVU5yV1N4RFFVRkVMRU5CUVVnc1IwRkJVMnhaTEVkQlFVY3NRMEZCUTNGWUxFZEJRVVFzUTBGQmFFSXNSVUZCZFVJN1FVRkRja0pCTEUxQlFVRkJMRWRCUVVjc1IwRkJSMkVzUTBGQlRqdEJRVU5FTzBGQlEwWTdPMEZCUTBRc1UwRkJUMklzUjBGQlVEdEJRVU5FTEVOQlVrUTdPMEZCVlVFc2RVSkJRV1VzWjBKQldWSTdRVUZCUVN4NVFrRllURk1zVFVGWFN6dEJRVUZCTEUxQldFeEJMRTFCVjBzc05FSkJXRWtzUTBGWFNqdEJRVUZCTEUxQlZreHhVQ3hMUVZWTExGRkJWa3hCTEV0QlZVczdRVUZCUVN3d1FrRlVURVVzVDBGVFN6dEJRVUZCTEUxQlZFeEJMRTlCVTBzc05rSkJWRXNzUTBGVFREdEJRVUZCTEcxRFFWSk1VU3huUWtGUlN6dEJRVUZCTEUxQlVreEJMR2RDUVZGTExITkRRVkpqTEVkQlVXUTdRVUZCUVN4TlFWQk1jRzlDTEV0QlQwc3NVVUZRVEVFc1MwRlBTenM3UVVGRFRDeE5RVUZKUVN4TFFVRkxMRWxCUVVrc1NVRkJZaXhGUVVGdFFqdEJRVU5xUWl4WFFVRlBMRlZCUVVNeVdDeExRVUZFTzBGQlFVRXNZVUZEVEVFc1MwRkJTeXhEUVVGRE1XMUNMRWRCUVU0c1EwRkJWVHRCUVVGQkxHVkJRVTg3UVVGRFpqWlBMRlZCUVVGQkxFZEJRVWNzUlVGQlJUSnVRaXhSUVVSVk8wRkJSV1pzY0VJc1ZVRkJRVUVzU1VGQlNTeEZRVUZGYTNCQ0xGRkJSbE03UVVGSFpucHVRaXhWUVVGQlFTeExRVUZMTEVWQlFVVjVia0lzVVVGSVVUdEJRVWxtZW5CQ0xGVkJRVUZCTEUxQlFVMHNSVUZCUlhsd1FqdEJRVXBQTEZOQlFWQTdRVUZCUVN4UFFVRldMRU5CUkVzN1FVRkJRU3hMUVVGUU8wRkJUMFFzUjBGVVNUdEJRVmxNTzBGQlEwRTdPenRCUVVOQkxFMUJRVTFaTEZGQlFWRXNSMEZCUjJveVFpeEpRVUZKTEVOQlFVTXlNVUlzUzBGQlRDeERRVUZYTDI1Q0xFdEJRVXNzUjBGQlIyOXZRaXhuUWtGQmJrSXNRMEZCYWtJN1FVRkRRU3hOUVVGTlRpeFhRVUZYTEVkQlFVY3hNVUlzU1VGQlNTeERRVUZEYld4Q0xFZEJRVXdzUTBGRGJFSnViRUlzU1VGQlNTeERRVUZETWpGQ0xFdEJRVXdzUTBGQlZ5eERRVUZETDI1Q0xFdEJRVXNzUjBGQlIzRnZRaXhSUVVGUkxFZEJRVWRvVVN4TlFVRndRaXhKUVVFNFFpdFFMR2RDUVVGNlF5eERRVVJyUWl4RlFVVnNRbElzVDBGR2EwSXNRMEZCY0VJN1FVRkpRU3hOUVVGTlJDeFhRVUZYTEVkQlFVZDJNVUlzU1VGQlNTeERRVUZETWpGQ0xFdEJRVXdzUTBGQlZ5OXVRaXhMUVVGTExFZEJRVWM0YmtJc1YwRkJia0lzUTBGQmNFSTdRVUZGUVN4VFFVRlBMRlZCUVVOdVVTeExRVUZFTEVWQlFYRkNPMEZCUXpGQ08wRkJRMEVzVVVGQlRYRlJMRTlCUVU4c1IwRkJSeXhKUVVGSmFqTkNMRXRCUVVvc1EwRkJWU3N5UWl4WFFVRldMRVZCUVhWQ2VrOHNTVUZCZGtJc1EwRkJORUlzUTBGQk5VSXNRMEZCYUVJN1FVRkZRU3hYUVVGUE1VSXNTMEZCU3l4RFFVRkRibTVDTEUxQlFVNHNRMEZCWVN4VlFVRkRiVkVzUjBGQlJDeEZRVUZOTmxjc1NVRkJUaXhGUVVGbE8wRkJRMnBETEZWQlFVMWpMRk5CUVZNc1IwRkJSek5ZTEVkQlFXeENPMEZCUTBFc1ZVRkJUVE5ETEUxQlFVMHNSMEZCUnpCd1FpeExRVUZMTEVOQlFVTmFMRWRCUVU0c1EwRkJWWFJRTEVsQlFWWXNRMEZCWmp0QlFVTkJMRlZCUVVsb1dTeFJRVUZLT3p0QlFVVkJMRlZCUVVsNFFpeE5RVUZOTEVsQlFVa3NTVUZCWkN4RlFVRnZRanRCUVVOc1FuZENMRkZCUVVGQkxGRkJRVkVzUjBGQlJ6dEJRVU5VVFN4VlFVRkJRU3hIUVVGSExFVkJRVVV5YmtJc1VVRkVTVHRCUVVWVWJIQkNMRlZCUVVGQkxFbEJRVWtzUlVGQlJXdHdRaXhSUVVaSE8wRkJSMVI2YmtJc1ZVRkJRVUVzUzBGQlN5eEZRVUZGTW01Q0xGZEJTRVU3UVVGSlZETndRaXhWUVVGQlFTeE5RVUZOTEVWQlFVVjVjRUk3UVVGS1F5eFRRVUZZTzBGQlRVUXNUMEZRUkN4TlFVOVBPMEZCUTB3c1dVRkJUV3hQTEVkQlFVY3NSMEZCUjJoQ0xGRkJRVTBzUTBGQlEzbFFMRTlCUVVRc1EwRkJiRUk3UVVGRFFTeFpRVUZOYkc5Q0xFZEJRVWNzUjBGQlIydHZRaXhQUVVGUExFTkJRVU42VHl4SFFVRkVMRU5CUVc1Q08wRkJRMEVzV1VGQlRXaGlMRWxCUVVrc1IwRkJSMmRpTEVkQlFVY3NSMEZCUjI5UExGZEJRVTRzUjBGQmIwSjBVQ3hOUVVGTkxFZEJRVWNzUTBGQk1VTTdRVUZGUVRKUUxGRkJRVUZCTEU5QlFVOHNRMEZCUTNwUExFZEJRVVFzUTBGQlVDeEpRVUZuUW5aaUxFMUJRV2hDTzBGQlEwRjNRaXhSUVVGQlFTeFJRVUZSTEVkQlFVYzdRVUZEVkUwc1ZVRkJRVUVzUjBGQlJ5eEZRVUZJUVN4SFFVUlRPMEZCUlZSMlFpeFZRVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJSbE03UVVGSFZIbENMRlZCUVVGQkxFdEJRVXNzUlVGQlJUSnVRaXhYUVVGWExFZEJRVWQwVUN4TlFVaGFPMEZCU1ZSeVlTeFZRVUZCUVN4TlFVRk5MRVZCUVU1Qk8wRkJTbE1zVTBGQldEdEJRVTFFT3p0QlFVVkVjMkVzVFVGQlFVRXNVMEZCVXl4RFFVRkRhRmdzU1VGQlZpeERRVUZsT1VJc1VVRkJaanRCUVVOQkxHRkJRVTg0V1N4VFFVRlFPMEZCUTBRc1MwRTFRazBzUlVFMFFrb3NSVUUxUWtrc1EwRkJVRHRCUVRaQ1JDeEhRV3BEUkR0QlFXdERSQ3hEUVc1RlJEczdTVU5rY1VKblVUczdPenRKUTBGQlF6czdPenRCUTNORmNrSXNTVUZCVFVNc1pVRkJaU3hIUVVGSExFZEJRWGhDTzBGQlJVRTdPMEZCUTBFc1NVRkJUVU1zY1VKQlFYRkNMRWRCUVVjc1IwRkJPVUk3TzBGQlJVRXNTVUZCVFVNc01FSkJRVEJDTEVkQlFVY3NVMEZCTjBKQkxEQkNRVUUyUWl4RFFVRkJkakpDTEVOQlFVTTdRVUZCUVN4VFFVRkxRU3hEUVVGRExFdEJRVXR6TVVJc1VVRkJUaXhIUVVGcFFuUXhRaXhEUVVGcVFpeEhRVUZ4UW10akxGTkJRVEZDTzBGQlFVRXNRMEZCY0VNN08wbEJSWEZDYzJFN096czdPenM3TmtOQlNXMUVPMEZCUTNCRkxHRkJRVThzU1VGQlNTOUNMR2RDUVVGS0xFVkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdRVUZ6U0VFc2JVSkJRVmw2TVVJc1MwRkJXaXhGUVVFMlFqdEJRVUZCT3p0QlFVRkJPenRCUVVNelFpdzRRa0ZCVFVFc1MwRkJUanM3UVVGRU1rSXNiVVZCYmtoa0szcENMRkZCUVZFc1EwRkJReXhaUVVGTk8wRkJRelZDTEZWQlFVa3NUVUZCU3pCRUxGZEJRVlFzUlVGQmMwSTdRVUZEY0VJc1kwRkJTMmhNTEZGQlFVd3NRMEZCWXp0QlFVRkZOV1FzVlVGQlFVRXNTMEZCU3l4RlFVRkZMRTFCUVVzMGIwSXNWMEZCVEN4RFFVRnBRbXhLTzBGQlFURkNMRk5CUVdRN1FVRkRSRHRCUVVOR0xFdEJTbk5DTEVWQlNYQkNPRWtzWlVGS2IwSXNRMEZ0U0UwN08wRkJRVUVzTWtWQk0wZE9ha01zVVVGQlVTeERRVUZETEZsQlFVMDdRVUZEY0VNc1ZVRkJTU3hEUVVGRExFMUJRVXRRTEdWQlFWWXNSVUZCTWtJN1FVRkRla0k3UVVGRFJEczdRVUZEUkN4VlFVRk5RU3hsUVVGbExFZEJRVWNzVFVGQlMwRXNaVUZCVEN4RFFVRnhRalpETEhGQ1FVRnlRaXhGUVVGNFFqczdRVUZGUVN4VlFVRkpMRU5CUVVNM1F5eGxRVUZNTEVWQlFYTkNPMEZCUTNCQ08wRkJRMFE3TzBGQlJVUXNXVUZCUzNCSkxGRkJRVXdzUTBGQll6dEJRVU5hTUVJc1VVRkJRVUVzVTBGQlV5eEZRVUZGSzBnc1dVRkJXU3hEUVVGRGNrSXNaVUZCUkR0QlFVUllMRTlCUVdRN1FVRkhSQ3hMUVdJNFFpeERRVEpIUmpzN1FVRkJRU3cwUlVFMVJreGtMRkZCUVZFc1EwRkJReXhaUVVGTk8wRkJRM0pETEZsQlFVczBSQ3huUWtGQlREdEJRVU5FTEV0QlJpdENMRVZCUlRkQ0xFTkJSalpDTEVOQk5FWklPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQk96dEJRVUZCT3p0QlFVRkJPenRCUVVGQkxIZEZRU3RKVkN4VlFVRkRPVzVDTEVkQlFVUXNSVUZCZFVJN1FVRkRla01zV1VGQlN6UnVRaXhYUVVGTUxFZEJRVzFDTlc1Q0xFZEJRVzVDTzBGQlEwUXNTMEZxU2pSQ096dEJRVUZCTERSRlFXMUtUQ3hWUVVGRFFTeEhRVUZFTEVWQlFUSkNPMEZCUTJwRUxGbEJRVXRuYkVJc1pVRkJUQ3hIUVVGMVFtaHNRaXhIUVVGMlFqdEJRVU5FTEV0QmNrbzBRanM3UVVGQlFTeG5SVUYxU21wQ0xGbEJRVTA3UVVGQlFTeDNRa0ZEWVN4TlFVRkxOMUFzUzBGRWJFSTdRVUZCUVN4VlFVTlNORE5DTEZOQlJGRXNaVUZEVWtFc1UwRkVVVHRCUVVGQkxGVkJRMGR3VWl4TFFVUklMR1ZCUTBkQkxFdEJSRWc3TzBGQlJXaENMRlZCUVVsdlVpeFRRVUZUTEVsQlFVa3NUMEZCVDBFc1UwRkJVQ3hMUVVGeFFpeFZRVUYwUXl4RlFVRnJSRHRCUVVOb1JDeGpRVUZMYmt3c1VVRkJUQ3hEUVVORk8wRkJRMFVyU0N4VlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGRVpDeFRRVVJHTEVWQlNVVTdRVUZCUVN4cFFrRkJUVzlFTEZOQlFWTXNRMEZCUXp0QlFVRkZMek5DTEZsQlFVRkJMRWxCUVVrc1JVRkJSVEp0UWl4TFFVRkxMRU5CUVVOc2JVSTdRVUZCWkN4WFFVRkVMRU5CUVdZN1FVRkJRU3hUUVVwR08wRkJUVVE3UVVGRFJpeExRV3BMTkVJN08wRkJRVUVzTmtWQmIwMUtMRlZCUVVOMU0wSXNVVUZCUkN4RlFVRmpjRklzUjBGQlpDeEZRVUV5UW5CWkxGRkJRVE5DTEVWQlFUSkRPMEZCUVVFc2VVSkJUemxFTEUxQlFVdHlUeXhMUVZCNVJEdEJRVUZCTEZWQlJURkVPRE5DTEZOQlJqQkVMR2RDUVVWb1JVTXNTVUZHWjBVN1FVRkJRU3hWUVVkb1JXeEVMR1ZCU0dkRkxHZENRVWRvUlVFc1pVRklaMFU3UVVGQlFTeFZRVWxvUlcxRUxGVkJTbWRGTEdkQ1FVbG9SVUVzVlVGS1owVTdRVUZCUVN4VlFVdG9SVU1zWjBKQlRHZEZMR2RDUVV0b1JVRXNaMEpCVEdkRk8wRkJRVUVzVlVGTmFFVkRMRzFDUVU1blJTeG5Ra0ZOYUVWQkxHMUNRVTVuUlR0QlFVRkJMRlZCVVRGRWRuQkNMRWRCVWpCRUxFZEJVVGRDVGl4UlFWSTJRaXhEUVZFeFJFMHNSMEZTTUVRN1FVRkJRU3hWUVZGeVJIWkNMRWxCVW5GRUxFZEJVVGRDYVVJc1VVRlNOa0lzUTBGUmNrUnFRaXhKUVZKeFJEdEJRVUZCTEZWQlVTOURlVUlzUzBGU0swTXNSMEZSTjBKU0xGRkJValpDTEVOQlVTOURVU3hMUVZJclF6dEJRVUZCTEZWQlVYaERhRU1zVFVGU2QwTXNSMEZSTjBKM1FpeFJRVkkyUWl4RFFWRjRRM2hDTEUxQlVuZERPMEZCVld4RkxGVkJRVWx6Y2tJc1UwRkJTanM3UVVGRFFTeFZRVUZKZEVRc1pVRkJTaXhGUVVGeFFqdEJRVU51UWl4WlFVRk5kVVFzWVVGQllTeEhRVUZITEUxQlFVczVSQ3hsUVVGTUxFZEJRWFZDWjBRc2NVSkJRVGRETzBGQlEwRXNXVUZCVFdVc1pVRkJaU3hIUVVGSExFMUJRVXMzVEN4TFFVRk1MRU5CUVZjeVFpeFRRVUZZTEVkQlFYVkNMRTFCUVV0dFN5eGxRVUZ3UkR0QlFVTkJMRmxCUVUxd1V5eFhRVUZYTEVkQlFVY3JVaXhuUWtGQlowSXNSMEZEYUVOSkxHVkJRV1VzUjBGQlIwb3NaMEpCUkdNc1IwRkZhRU5KTEdWQlFXVXNSMEZCUjBRc1lVRkdkRUk3UVVGSFFTeFpRVUZOUnl4alFVRmpMRWRCUVVkTUxHMUNRVUZ0UWl4SFFVTjBRMGNzWlVGQlpTeEhRVUZITEUxQlFVc3ZSQ3hsUVVGMlFpeEhRVUY1UXpSRUxHMUNRVVJJTEVkQlJYUkRSeXhsUVVGbExFZEJRVWNzVFVGQlN5OUVMR1ZCUVhaQ0xFZEJRWGxET0VRc1lVRkdOME03UVVGSlFVUXNVVUZCUVVFc1UwRkJVeXhIUVVGSExFVkJRMVk1Y0VJc1VVRkJVU3hEUVVGRFRTeEhRVUZVTEVkQlFXVk9MRkZCUVZFc1EwRkJRM2hDTEUxQlFYaENMRWRCUVdsRGNWb3NWMEZCYWtNc1NVRkRRVGRZTEZGQlFWRXNRMEZCUTAwc1IwRkJWQ3hIUVVGbE5IQkNMR05CUmt3c1EwRkJXanRCUVVsRUxFOUJaRVFzVFVGalR6dEJRVU5NTzBGQlEwRktMRkZCUVVGQkxGTkJRVk1zUjBGQlJ5eEpRVUZhTzBGQlEwUTdPMEZCUlVRc1ZVRkJUVXNzWVVGQllTeG5Ra0ZEYWtKd2IwSTdRVUZEUlN4UlFVRkJMRWRCUVVjc2FVSkJRVlZ4Vnl4SFFVRldMRU5CUkV3N1FVRkZSU3hSUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZEY201Q0xGRkJRVTBzUTBGQlEzRTFRaXhoUVVGU0xFVkJRWFZDY2pWQ0xGRkJRVTBzUTBGQlEzTTFRaXh6UWtGQk9VSXNSVUZCYzBSMk5FSXNTVUZCZEVRc1EwRkRWQ3hIUVVSVExFTkJSbUk3UVVGTFJTdzRRa0ZNUmp0QlFVMUZMRkZCUVVFc1MwRkJTeXhGUVVGRk8wRkJRMHgzVHl4VlFVRkJRU3hIUVVGSExFVkJRVVVzUTBGRVFUdEJRVVZNZGtJc1ZVRkJRVUVzU1VGQlNTeEZRVUZGTEVOQlJrUTdRVUZIVEhWeVFpeFZRVUZCUVN4VFFVRlRMSFZDUVVGblFuWnlRaXhKUVVGb1FpdzBRa0ZCYzBOMVFpeEhRVUYwUXl4UlFVaEtPMEZCU1V4cGNVSXNWVUZCUVVFc1pVRkJaU3gxUWtGQlowSjRja0lzU1VGQmFFSXNORUpCUVhORGRVSXNSMEZCZEVNc1VVRktWanRCUVV0TVJTeFZRVUZCUVN4TFFVRkxMRVZCUVVVd2IwSXNNRUpCUVRCQ0xFTkJRVU14YjBJc1MwRkJSQ3hEUVV3MVFqdEJRVTFNYUVNc1ZVRkJRVUVzVFVGQlRTeEZRVUZGTUhGQ0xEQkNRVUV3UWl4RFFVRkRNWEZDTEUxQlFVUTdRVUZPTjBJN1FVRk9WQ3h6UWtGbFJYVkVMR05CUVVNc1UwRkJSRHRCUVVGWExGRkJRVUVzU1VGQlNTeEZRVUZGZVc1Q0xGRkJRV3BDTzBGQlFUSkNMRkZCUVVFc1QwRkJUeXhGUVVGRmNGSXNSMEZCY0VNN1FVRkJlVU1zVVVGQlFTeFhRVUZYTEVWQlFVVTdRVUZCZEVRc1VVRm1SaXhEUVVSR08wRkJiMEpCTEdGQlFVOTFVaXhWUVVGVkxFZEJRVWxITEZOQlFWTXNTVUZCU1Vzc1lVRkJaQ3hKUVVGblF5eEpRVUZ1UXl4SFFVRXdRMEVzWVVGQk0wUTdRVUZEUkN4TFFYWlFORUk3TzBGQlJ6TkNMRlZCUVV0c1JTeGxRVUZNTEVkQlFYVkNMRU5CUVhaQ08wRkJRMEVzVlVGQlMyZEZMR1ZCUVV3c1IwRkJkVUlzUTBGQmRrSTdRVUZGUVN4UlFVRk5UeXhuUWtGQk5rSXNSMEZEYWtNM05FSXNTMEZCU3l4RFFVRkROalJDTEdkQ1FVRk9MRWxCUVRCQ2NrSXNUMEZCVHl4RFFVRkRjMElzYzBKQlFWSXNSVUZFTlVJc1EwRk9Na0k3TzBGQlZUTkNMRlZCUVV0MFRTeExRVUZNTEVkQlFXRTdRVUZEV0hWTkxFMUJRVUZCTEhOQ1FVRnpRaXhGUVVGRkx6UkNMRXRCUVVzc1EwRkJRM2R0UWl4TFFVRk9MRU5CUVZsM1V5eEpRVUZhTEVOQlEzUkNMRlZCUVVFelV5eEpRVUZKTzBGQlFVRXNaVUZCU1N4RFFVRkRMRU5CUVVOQkxFbEJRVVlzU1VGQlZTeERRVUZEZDFNc1owSkJRV2RDTEVOQlFVTnFSQ3hIUVVGcVFpeERRVUZ4UW5aUUxFbEJRWEpDTEVOQlFXWTdRVUZCUVN4UFFVUnJRaXhEUVVSaU8wRkJTVmh0VHl4TlFVRkJRU3hWUVVGVkxFVkJRVVVzUzBGS1JEdEJRVXRZYUU4c1RVRkJRVUVzUzBGQlN5eEZRVUZGZUcxQ0xFdEJRVXNzUTBGQlEzZHRRaXhMUVV4R08wRkJUVmh4VXl4TlFVRkJRU3huUWtGQlowSXNSVUZCYUVKQkxHZENRVTVYTzBGQlQxZ3hTeXhOUVVGQlFTeFRRVUZUTEVWQlFVVXNRMEZRUVR0QlFWRllkR1lzVFVGQlFVRXNTMEZCU3l4RlFVRkZjVTg3UVVGU1NTeExRVUZpTzBGQlZqSkNPMEZCYjBJMVFqdEJRVVZFT3pzN096czdPM2REUVVkdlFqdEJRVUZCT3p0QlFVTnNRbGNzVFVGQlFVRXNUVUZCVFN4RFFVRkRhMUFzWjBKQlFWQXNRMEZCZDBJc1VVRkJlRUlzUlVGQmEwTXNTMEZCU3l0RExGbEJRWFpETzBGQlJVRXNWMEZCU3paSUxHZENRVUZNTzBGQlNHdENMRlZCUzFwNFNpeFRRVXhaTEVkQlMwVXNTMEZCU3pOQ0xFdEJURkFzUTBGTFdqSkNMRk5CVEZrN08wRkJUV3hDTEZWQlFVa3NTMEZCU3pCSExHVkJRVXdzU1VGQmQwSXNTVUZCTlVJc1JVRkJhME03UVVGRGFFTXNXVUZCVFVFc1pVRkJaU3hIUVVGSExFdEJRVXRCTEdWQlFVd3NRMEZCY1VJMlF5eHhRa0ZCY2tJc1JVRkJlRUk3TzBGQlEwRXNXVUZCU1RkRExHVkJRVW9zUlVGQmNVSTdRVUZEYmtJeFJ5eFZRVUZCUVN4VFFVRlRMRWRCUVVjclNDeFpRVUZaTEVOQlFVTnlRaXhsUVVGRUxFTkJRWGhDTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hYUVVGTGNFa3NVVUZCVEN4RFFVRmpMRlZCUVVGM1RTeFRRVUZUTzBGQlFVRXNaVUZCU3p0QlFVTXhRamxMTEZWQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGRU1FSTdRVUZGTVVKMFppeFZRVUZCUVN4TFFVRkxMRVZCUVVVc1RVRkJTU3hEUVVGRE5HOUNMRmRCUVV3c1IwRkJiVUlzVFVGQlNTeERRVUZEUVN4WFFVRk1MRU5CUVdsQ2JFb3NWMEZCY0VNc1IwRkJhMFF3U3l4VFFVRlRMRU5CUVVOd2NVSTdRVUZHZWtNc1UwRkJURHRCUVVGQkxFOUJRWFpDTzBGQlNVUTdPenQxUTBGRmEwSTRUeXhYUVVGeFFuTmlMRmRCUVhGQ08wRkJRVUU3TzBGQlFVRXNWVUZEYmtSNlV5eExRVVJ0UkN4SFFVTjZReXhMUVVGTGVHMUNMRXRCUkc5RExFTkJRMjVFZDIxQ0xFdEJSRzFFTzBGQlFVRXNWVUZGYmtSeFV5eG5Ra0ZHYlVRc1IwRkZPVUlzUzBGQlMzSk5MRXRCUm5sQ0xFTkJSVzVFY1Uwc1owSkJSbTFFTzBGQlNUTkVMRmRCUVV0TExIRkNRVUZNT3p0QlFVVkJMRlZCUVVsRUxGTkJRVk1zUTBGQlEzQnhRaXhMUVVGV0xFbEJRVzFDTEVsQlFXNUNMRWxCUVRKQ0xFdEJRVXN5WkN4TFFVRk1MRU5CUVZjelpDeExRVUZZTEV0QlFYRkNiM0ZDTEZOQlFWTXNRMEZCUTNCeFFpeExRVUU1UkN4RlFVRnhSVHRCUVVOdVJXZHhRaXhSUVVGQlFTeG5Ra0ZCWjBJc1EwRkJRMDBzUzBGQmFrSTdRVUZEUkN4UFFWSXdSRHM3TzBGQlZUTkVMRlZCUVUxS0xITkNRVUZ6UWl4SFFVRkhkbE1zUzBGQlN5eERRVUZEZDFNc1NVRkJUaXhEUVVNM1FpeFZRVUZCTTFNc1NVRkJTVHRCUVVGQkxHVkJRVWtzUTBGQlF5eERRVUZEUVN4SlFVRkdMRWxCUVZVc1EwRkJRM2RUTEdkQ1FVRm5RaXhEUVVGRGFrUXNSMEZCYWtJc1EwRkJjVUoyVUN4SlFVRnlRaXhEUVVGbU8wRkJRVUVzVDBGRWVVSXNRMEZCTDBJN08wRkJSMEVzVlVGRFJUQlRMSE5DUVVGelFpeEpRVU4wUWtFc2MwSkJRWE5DTEV0QlFVc3NTMEZCUzNaTkxFdEJRVXdzUTBGQlYzVk5MSE5DUVVSMFF5eEpRVVZCUlN4VFFVRlRMRU5CUVVOd2NVSXNTMEZCVml4SlFVRnRRaXhKUVVoeVFpeEZRVWxGTzBGQlEwRXNZVUZCUzNWeFFpeHZRa0ZCVEN4SFFVRTBRa01zY1VKQlFYRkNMRU5CUVVNc1dVRkJUVHRCUVVOMFJDeFZRVUZCTEUxQlFVa3NRMEZCUXpWTkxGRkJRVXdzUTBGQll6dEJRVU5hYzAwc1dVRkJRVUVzYzBKQlFYTkNMRVZCUVhSQ1FUdEJRVVJaTEZkQlFXUTdRVUZIUkN4VFFVcG5SQ3hEUVVGcVJEdEJRVXRFTzBGQlEwWTdRVUZGUkRzN096czdPekpEUVVkMVFqdEJRVU55UWl4VlFVRkpMRXRCUVV0TExHOUNRVUZVTEVWQlFTdENPMEZCUXpkQ1JTeFJRVUZCUVN4dlFrRkJiMElzUTBGQlF5eExRVUZMUml4dlFrRkJUaXhEUVVGd1FqdEJRVU5FTEU5QlNHOUNPenM3UVVGTmNrSXNWMEZCUzBZc2NVSkJRVXdzUTBGQk1rSTVSU3haUVVFelFqdEJRVU5CTEZkQlFVdDBSU3haUVVGTUxFTkJRV3RDYzBVc1dVRkJiRUk3UVVGRFFTeFhRVUZMYlVZc2IwSkJRVXdzUTBGQk1FSnVSaXhaUVVFeFFqdEJRVVZCZGxjc1RVRkJRVUVzVFVGQlRTeERRVUZEYlZBc2JVSkJRVkFzUTBGQk1rSXNVVUZCTTBJc1JVRkJjVU1zUzBGQlN6aERMRmxCUVRGRE8wRkJRMFE3T3p0MVEwRXJSV3RDTzBGQlEycENMRlZCUVVrc1MwRkJTeXRGTEdWQlFVd3NTVUZCZDBJc1NVRkJOVUlzUlVGQmEwTTdRVUZCUVN4WlFVTjRRa0VzWlVGRWQwSXNSMEZEU2l4SlFVUkpMRU5CUTNoQ1FTeGxRVVIzUWp0QlFVVm9ReXhaUVVGTk1rVXNhMEpCUVd0Q0xFZEJRVWN6UlN4bFFVRmxMRU5CUVVNMlF5eHhRa0ZCYUVJc1JVRkJNMEk3TzBGQlEwRXNXVUZCU1RoQ0xHdENRVUZLTEVWQlFYZENPMEZCUTNSQ0xHVkJRVXRzUml4bFFVRk1MRWRCUVhWQ2QwSXNaMEpCUVdkQ0xFTkJRVU13UkN4clFrRkJSQ3hEUVVGMlF6dEJRVU5CTEdOQlFVMW9TQ3hGUVVGRkxFZEJRVWNzUzBGQlMybEdMRmRCUVdoQ096dEJRVU5CTEdOQlFVbHFSaXhGUVVGRkxGbEJRVmxwU0N4WFFVRnNRaXhGUVVFclFqdEJRVU0zUWl4blFrRkJUVU1zYVVKQlFXbENMRWRCUVVjeFJDeHZRa0ZCYjBJc1EwRkJRM2RFTEd0Q1FVRkVMRU5CUVRsRE8wRkJRMEVzYVVKQlFVdHNRaXhsUVVGTUxFZEJRMFU1Uml4RlFVRkZMRU5CUVVOdVJDeHhRa0ZCU0N4SFFVRXlRakZuUWl4SFFVRXpRaXhIUVVGcFF5dHhRaXhwUWtGRWJrTTdRVUZGUkR0QlFVTkdPMEZCUTBZN1FVRkRSanRCUVVWRU96czdPenM3T3pzMlFrRkxVenRCUVVGQkxGVkJRME5pTEdkQ1FVUkVMRWRCUTNOQ0xFdEJRVXMzTkVJc1MwRkVNMElzUTBGRFF6WTBRaXhuUWtGRVJEczdRVUZIVUN4VlFVRkpRU3huUWtGQlNpeEZRVUZ6UWp0QlFVTndRa0VzVVVGQlFVRXNaMEpCUVdkQ0xFTkJRVU5OTEV0QlFXcENPMEZCUTBRN08wRkJRMFFzVjBGQlN6Tk5MRXRCUVV3c1EwRkJWM0ZOTEdkQ1FVRllMRU5CUVRSQ1RTeExRVUUxUWp0QlFVVkJMRmRCUVV0NFFpeG5Ra0ZCVER0QlFVTkJMRmRCUVV0blF5eFhRVUZNTzBGQlEwUTdPenMyUWtGMVJGRTdRVUZCUVRzN1FVRkJRU3g1UWtGVlNDeExRVUZMTXpWQ0xFdEJWa1k3UVVGQlFTeFZRVVZNZHpKQ0xGZEJSa3NzWjBKQlJVeEJMRmRCUmtzN1FVRkJRU3hWUVVkRGMwSXNVMEZJUkN4blFrRkhURU1zU1VGSVN6dEJRVUZCTEZWQlNVdzJRaXhSUVVwTExHZENRVWxNUVN4UlFVcExPMEZCUVVFc1ZVRkxVVEZUTEUxQlRGSXNaMEpCUzB3eVV5eFhRVXhMTzBGQlFVRXNWVUZOVEhKVUxFdEJUa3NzWjBKQlRVeEJMRXRCVGtzN1FVRkJRU3hWUVU5TWVtVXNUVUZRU3l4blFrRlBURUVzVFVGUVN6dEJRVUZCTEZWQlVVd3dkVUlzVDBGU1N5eG5Ra0ZSVEVFc1QwRlNTenRCUVVGQkxGVkJVMHcxUWl4bFFWUkxMR2RDUVZOTVFTeGxRVlJMTzBGQlFVRXNkMEpCVjNGRUxFdEJRVXR5U1N4TFFWZ3hSRHRCUVVGQkxGVkJWME4xVFN4elFrRllSQ3hsUVZkRFFTeHpRa0ZZUkR0QlFVRkJMRlZCVjNsQ1JpeG5Ra0ZZZWtJc1pVRlhlVUpCTEdkQ1FWaDZRanRCUVVGQkxGVkJWekpEYUhGQ0xFdEJXRE5ETEdWQlZ6SkRRU3hMUVZnelF6dEJRV0ZRTEZWQlFVbHBja0lzV1VGQlNqczdRVUZEUVN4VlFVRkpMRU5CUVVOR0xGRkJRVkVzU1VGQlNUZDRRaXhOUVVGTkxFdEJRVXNzVlVGQmVFSXNTMEZCZFVNNFJ5eExRVUZMTEV0QlFVc3NTVUZCY2tRc1JVRkJNa1E3UVVGRGVrUnBja0lzVVVGQlFVRXNXVUZCV1N4SFFVRkhReXhsUVVGbExFTkJRVU03UVVGRE4wSTNVeXhWUVVGQlFTeE5RVUZOTEVWQlFVNUJMRTFCUkRaQ08wRkJSVGRDY1ZBc1ZVRkJRVUVzUzBGQlN5eEZRVUZGYzBNc1owSkJSbk5DTzBGQlJ6ZENjRU1zVlVGQlFVRXNUMEZCVHl4RlFVRlFRU3hQUVVnMlFqdEJRVWszUWxFc1ZVRkJRVUVzWjBKQlFXZENMRVZCUVVWVUxGZEJTbGM3UVVGTE4wSXpia0lzVlVGQlFVRXNTMEZCU3l4RlFVRk1RVHRCUVV3MlFpeFRRVUZFTEVOQlFUbENPMEZCVDBRc1QwRlNSQ3hOUVZGUExFbEJRMHc1Unl4TlFVRk5MRXRCUVV0dmRVSXNjMEpCUVZnc1NVRkRRWEIxUWl4TlFVRk5MRmxCUVZscGVVSXNaMEpCUkd4Q0xFbEJSVUZxZVVJc1RVRkJUU3hMUVVGTExGbEJTRTRzUlVGSlREdEJRVU5CSzNoQ0xGRkJRVUZCTEZsQlFWa3NSMEZCUjBjc1owSkJRV2RDTEVOQlFVTTdRVUZET1VJeFJDeFZRVUZCUVN4TFFVRkxMRVZCUVVWelF5eG5Ra0ZFZFVJN1FVRkZPVUp5UXl4VlFVRkJRU3hYUVVGWExFVkJRVmhCTEZkQlJqaENPMEZCUnpsQ2RGQXNWVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVWc0UWp0QlFVazVRblZRTEZWQlFVRkJMRTlCUVU4c1JVRkJVRUVzVDBGS09FSTdRVUZMT1VJMWJrSXNWVUZCUVVFc1MwRkJTeXhGUVVGTVFUdEJRVXc0UWl4VFFVRkVMRU5CUVM5Q08wRkJUMFFzVDBGYVRTeE5RVmxCTzBGQlEweHBja0lzVVVGQlFVRXNXVUZCV1N4SFFVRkhTU3hoUVVGaExFTkJRVU03UVVGRE0wSXpSQ3hWUVVGQlFTeExRVUZMTEVWQlFVVnpReXhuUWtGRWIwSTdRVUZGTTBKeVF5eFZRVUZCUVN4WFFVRlhMRVZCUVZoQkxGZEJSakpDTzBGQlJ6TkNkRkFzVlVGQlFVRXNUVUZCVFN4RlFVRk9RU3hOUVVneVFqdEJRVWt6UW5WUUxGVkJRVUZCTEU5QlFVOHNSVUZCVUVFc1QwRktNa0k3UVVGTE0wSTFia0lzVlVGQlFVRXNTMEZCU3l4RlFVRk1RVHRCUVV3eVFpeFRRVUZFTEVOQlFUVkNPMEZCVDBRN08wRkJSVVFzVlVGQlNYTnlRaXhSUVVGS096dEJRVU5CTEZWQlFVbDBja0lzUzBGQlN5eEpRVUZKTEVsQlFWUXNTVUZCYVVKcmNVSXNjMEpCUVhKQ0xFVkJRVFpETzBGQlF6TkRPMEZCUTBFN1FVRkRRVzlDTEZGQlFVRkJMRkZCUVZFc1owSkJRMDR2Y0VJN1FVRkRSU3hWUVVGQkxGTkJRVk1zUlVGQlJXaFNMRkZCUVUwc1EwRkJRMjgwUWl4UFFVUndRanRCUVVWRkxGVkJRVUVzUzBGQlN5eEZRVUZGTzBGQlFVVXpjVUlzV1VGQlFVRXNUVUZCVFN4RlFVRkZMRU5CUVZZN1FVRkJZV2RETEZsQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGd1FpeFhRVVpVTzBGQlIwVXNWVUZCUVN4SFFVRkhMRVZCUVVVc1MwRkJTM1Z5UWp0QlFVaGFMRmRCUzBjMVZDeExRVUZMTEVOQlEwaDJVU3hOUVVSR0xFTkJRMU1zVlVGQlFXOVJMRWxCUVVrN1FVRkJRU3hwUWtGQlNVRXNTVUZCU2p0QlFVRkJMRk5CUkdJc1JVRkZSWFp0UWl4SFFVWkdMRU5CUlUwc1ZVRkJRM1Z0UWl4SlFVRkVMRVZCUVU5cFFpeERRVUZRTzBGQlFVRXNPRUpCUTBoc1dEdEJRVUZMTzBGQlEwZ3NXVUZCUVN4VFFVRlRMRVZCUVVNc1VVRkVXanRCUVVWRkxHdERRVVpHTzBGQlIwVXNXVUZCUVN4SFFVRkhMRVZCUVVWcldDeERRVWhRTzBGQlNVVXNXVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkRURE5aTEdOQlFVRkJMRWRCUVVjc1JVRkJSU3hEUVVSQk8wRkJSVXgyUWl4alFVRkJRU3hKUVVGSkxFVkJRVVVzUTBGR1JEdEJRVWRNZFhKQ0xHTkJRVUZCTEZOQlFWTXNSVUZCUlN4cFEwRklUanRCUVVsTVF5eGpRVUZCUVN4bFFVRmxMRVZCUVVVc2FVTkJTbG83UVVGTFRDOXdRaXhqUVVGQlFTeExRVUZMTEVWQlEwZ3JjVUlzVVVGQlVTeEpRVUZKTjNoQ0xFMUJRVTBzUzBGQlN5eFZRVUYyUWl4SFFVTkpiVllzVTBGRVNpeEhRVVZKY1dFc01FSkJRVEJDTEVOQlFVTm1MRmRCUVVRc1EwRlNNMEk3TzBGQlFVRXNZVUZLVkR0QlFXTkZMRmxCUVVFc1IwRkJSeXhGUVVGRkxHRkJRVUZvUlN4RlFVRkZMRVZCUVVrN1FVRkRWQ3hyUWtGQlNVRXNSVUZCUlN4SlFVRkpMRVZCUVVWdlNDeFJRVUZSTEVsQlFVazNlRUlzVFVGQlRTeExRVUZMTEZWQlFYcENMRU5CUVZZc1JVRkJaMFE3UVVGRE9VTTdRVUZEUVRoM1FpeG5Ra0ZCUVVFc1owSkJRV2RDTEVOQlFVTm9SQ3hIUVVGcVFpeERRVUZ4UW5oUUxFbEJRWEpDTEVWQlFUSkNiVTBzUlVGQlJTeERRVUZEYkVVc1dVRkJPVUk3UVVGRFJEdEJRVU5HTzBGQmJrSklMREJDUVhGQ1JXeGxMR05CUVVNc1UwRkJSRHRCUVVGWExGbEJRVUVzU1VGQlNTeEZRVUZGYVZjc1NVRkJha0k3UVVGQmRVSXNXVUZCUVN4UFFVRlBMRVZCUVVWcFFpeERRVUZvUXp0QlFVRnRReXhaUVVGQkxGZEJRVmNzUlVGQlJUdEJRVUZvUkN4WlFYSkNSaXhEUVVSSE8wRkJRVUVzVTBGR1RpeERRVXhJTEVOQlJFWTdRVUZ0UTBRc1QwRjBRMFFzVFVGelEwOHNTVUZCU1hwWkxFdEJRVXNzU1VGQlNTeEpRVUZpTEVWQlFXMUNPMEZCUTNoQ08wRkJRMEU3UVVGRFFYTnlRaXhSUVVGQlFTeFJRVUZSTEdkQ1FVRkhMM0JDTzBGQlFVc3NWVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkJSWFpDTEZsQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGVUxGZEJRVm83UVVGQkswSXNWVUZCUVN4SFFVRkhMRVZCUVVVc1MwRkJTM1Z5UWp0QlFVRjZReXhWUVVGWU8wRkJRMFFzVDBGS1RTeE5RVWxCTzBGQlEwdzdRVUZEUVN4WlFVRk5ReXhoUVVGaExFZEJRVWMzVkN4TFFVRkxMRU5CUVVOMlVTeE5RVUZPTEVOQlEzQkNMRlZCUVVGdlVTeEpRVUZKTzBGQlFVRXNhVUpCUVVsQkxFbEJRVWtzU1VGQlNYZFRMR2RDUVVGblFpeERRVUZEYWtRc1IwRkJha0lzUTBGQmNVSjJVQ3hKUVVGeVFpeERRVUZhTzBGQlFVRXNVMEZFWjBJc1EwRkJkRUk3UVVGSFFTeFpRVUZOYVZVc1kwRkJZeXhIUVVGSE9WUXNTMEZCU3l4RFFVTjZRblpSTEUxQlJHOUNMRU5CUTJJc1ZVRkJRVzlSTEVsQlFVazdRVUZCUVN4cFFrRkJTVUVzU1VGQlNTeEpRVUZKTEVOQlFVTjNVeXhuUWtGQlowSXNRMEZCUTJwRUxFZEJRV3BDTEVOQlFYRkNkbEFzU1VGQmNrSXNRMEZCWWp0QlFVRkJMRk5CUkZNc1JVRkZjRUl4Uml4TFFVWnZRaXhEUVVWa0xFTkJSbU1zUlVGRldEaFdMRTlCUmxjc1EwRkJka0k3UVVGSlFTeFpRVUZOZEZBc1UwRkJVeXhIUVVGSE1sTXNXVUZCV1N4RFFVRkRUeXhoUVVGRUxFTkJRVGxDTzBGQlEwRXNXVUZCVFVVc2EwSkJRV3RDTEVkQlFVZFVMRmxCUVZrc1EwRkJRMUVzWTBGQlJDeERRVUYyUXl4RFFWWkxPenRCUVZsTUxGbEJRVTE2ZEVJc1RVRkJUU3hIUVVGSGMyRXNVMEZCVXl4RFFVRkROMjFDTEUxQlFWWXNSMEZEV0Zjc1NVRkJTU3hEUVVGRGJXeENMRWRCUVV3c1QwRkJRVzVzUWl4SlFVRkpMSEZDUVVGUmEyMUNMRk5CUVZNc1EwRkJRM0p1UWl4SFFVRldMRU5CUVdNc1ZVRkJRVEEyUWl4SFFVRkhPMEZCUVVFc2FVSkJRVWxCTEVkQlFVY3NRMEZCUXpkeVFpeEhRVUZLTEVkQlFWVTJja0lzUjBGQlJ5eERRVUZETTNSQ0xFMUJRV3hDTzBGQlFVRXNVMEZCYWtJc1EwRkJVaXhGUVVSUExFZEJSVmdzUTBGR1NqdEJRVWRCYzNSQ0xGRkJRVUZCTEZGQlFWRXNaMEpCUTA0dmNFSTdRVUZCU3l4VlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGRmRrSXNXVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJRVlFzVjBGQldqdEJRVUVyUWl4VlFVRkJMRWRCUVVjc1JVRkJSU3hMUVVGTGRYSkNPMEZCUVhwRExIZENRVU5GYUhGQ08wRkJRVXNzVlVGQlFTeFRRVUZUTEVWQlFVVm9VaXhSUVVGTkxFTkJRVU52TkVJc1QwRkJka0k3UVVGQlowTXNWVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkJSVE54UWl4WlFVRkJRU3hOUVVGTkxFVkJRVTVCTEUxQlFVWTdRVUZCVldkRExGbEJRVUZCTEV0QlFVc3NSVUZCVEVFN1FVRkJWanRCUVVGMlF5eFhRVU5IZDNKQ0xHRkJRV0VzUTBGQlEzWTJRaXhIUVVGa0xFTkJRV3RDTEZWQlFVTjFiVUlzU1VGQlJDeEZRVUZQYVVJc1EwRkJVRHRCUVVGQkxHbENRVU5xUWl4TlFVRkpMRU5CUVVOdFZDeHpRa0ZCVEN4RFFVRTBRbkJWTEVsQlFUVkNMRVZCUVd0RGFVSXNRMEZCYkVNc1JVRkJjVU5JTEZOQlFWTXNRMEZCUTBjc1EwRkJSQ3hEUVVFNVF5eERRVVJwUWp0QlFVRkJMRk5CUVd4Q0xFTkJSRWdzUTBGRVJpeGxRVTFGYkZnN1FVRkJTeXhWUVVGQkxGTkJRVk1zUlVGQlJXaFNMRkZCUVUwc1EwRkJRMjgwUWl4UFFVRjJRanRCUVVGblF5eFZRVUZCTEV0QlFVc3NSVUZCUlR0QlFVRkZNMjlDTEZsQlFVRkJMRXRCUVVzc1JVRkJURUU3UVVGQlJqdEJRVUYyUXl4WFFVTkhlWEpDTEdOQlFXTXNRMEZCUTNnMlFpeEhRVUZtTEVOQlFXMUNMRlZCUVVNME5rSXNTVUZCUkN4RlFVRlBjRlFzUTBGQlVDeEZRVUZoTzBGQlF5OUNPMEZCUTBFN1FVRkRRVHRCUVVOQkxHTkJRVTF4VkN4blFrRkJaMElzUjBGQlIwNHNZVUZCWVN4RFFVRkRMelZDTEUxQlFXUXNSMEZCZFVKbmJrSXNRMEZCYUVRN1FVRkRRU3hqUVVGTmFsb3NVVUZCVVN4SFFVRkhhM05DTEd0Q1FVRnJRaXhEUVVGRGFsUXNRMEZCUkN4RFFVRnVRenRCUVVOQkxEaENRVU5GYkZnN1FVRkRSU3haUVVGQkxFZEJRVWNzYzBKQlFXVjFjVUlzWjBKQlFXWXNRMEZFVER0QlFVVkZMRmxCUVVFc1MwRkJTeXhGUVVGRk8wRkJRMHg2VGl4alFVRkJRU3hWUVVGVkxFVkJRVVVzVVVGRVVEdEJRVVZNTjJVc1kwRkJRVUVzVVVGQlVTeEZRVUZGTEZWQlJrdzdRVUZIVEUwc1kwRkJRVUVzUjBGQlJ5eEZRVUZGTkc5Q0xEQkNRVUV3UWl4RFFVRkRiSEJDTEZGQlFWRXNRMEZCUTAwc1IwRkJWaXhEUVVneFFqdEJRVWxNZGtJc1kwRkJRVUVzU1VGQlNTeEZRVUZGYlhGQ0xEQkNRVUV3UWl4RFFVRkRiSEJDTEZGQlFWRXNRMEZCUTJwQ0xFbEJRVllzUTBGS00wSTdRVUZMVEhsQ0xHTkJRVUZCTEV0QlFVc3NSVUZCUlRCdlFpd3dRa0ZCTUVJc1EwRkJRMnh3UWl4UlFVRlJMRU5CUVVOUkxFdEJRVllzUTBGTU5VSTdRVUZOVEdoRExHTkJRVUZCTEUxQlFVMHNSVUZCUlRCeFFpd3dRa0ZCTUVJc1EwRkJRMnh3UWl4UlFVRlJMRU5CUVVONFFpeE5RVUZXTzBGQlRqZENMR0ZCUmxRN1FVRlZSU3haUVVGQkxFZEJRVWNzUlVGQlJTeGhRVUZCTW14Q0xFVkJRVVVzUlVGQlNUdEJRVU5VTEd0Q1FVRkpRU3hGUVVGS0xFVkJRVkU3UVVGRFRuRkhMR2RDUVVGQlFTeG5Ra0ZCWjBJc1EwRkJRMmhFTEVkQlFXcENMRU5CUVhGQ05rVXNTVUZCY2tJc1JVRkJNa0pzU1N4RlFVRkZMRU5CUVVOc1JTeFpRVUU1UWp0QlFVTkVPMEZCUTBZN1FVRmtTQ3d3UWtGblFrVnNaU3hqUVVGRExGTkJRVVE3UVVGRFJTeFpRVUZCTEVsQlFVa3NSVUZCUlhOeFFpeEpRVVJTTzBGQlJVVXNXVUZCUVN4UFFVRlBMRVZCUVVWRExHZENRVVpZTzBGQlIwVXNXVUZCUVN4WFFVRlhPMEZCU0dJc1dVRm9Ra1lzUTBGRVJqdEJRWGRDUkN4VFFUbENRU3hEUVVSSUxFTkJUa1lzUlVGM1EwY3NTMEZCU3psR0xHVkJRVXdzYVVKQlEwTjZhMElzWTBGQlF5eFZRVUZFTzBGQlEwVXNWVUZCUVN4bFFVRmxMRVZCUVVVc1MwRkJTMnRyUWl4bFFVUjRRanRCUVVWRkxGVkJRVUVzVTBGQlV5eEZRVUZGTEV0QlFVdEhMRk5CUm14Q08wRkJSMFVzVlVGQlFTeFZRVUZWTEVWQlExSXNTMEZCUzJwSkxFdEJRVXdzUTBGQlYyZEpMRlZCUVZnc1NVRkJlVUlzUzBGQlMyaEpMRXRCUVV3c1EwRkJWM1ZOTEhOQ1FVcDRRenRCUVUxRkxGVkJRVUVzV1VGQldTeEZRVUZGYkhOQ0xFMUJRVTBzUjBGQlJ5eExRVUZMZVhKQ0xHVkJUamxDTzBGQlQwVXNWVUZCUVN4VFFVRlRMRVZCUVVVc1MwRkJTemxNTEV0QlFVd3NRMEZCVnpKQ08wRkJVSGhDTEZWQmVrTktMRU5CUkVZN1FVRnpSRVE3TzBGQlJVUXNZVUZCVHpCSExHVkJRV1VzWjBKQlEzQkNlbXRDTEdOQlFVTXNaVUZCUkR0QlFVTkZMRkZCUVVFc1IwRkJSeXhGUVVGRkxFdEJRVXQzY1VJc2NVSkJSRm83UVVGRlJTeFJRVUZCTEZGQlFWRXNSVUZCUlN4TFFVRkxja0lzYjBKQlJtcENPMEZCUjBVc1VVRkJRU3hsUVVGbExFVkJRVVV4UlR0QlFVaHVRaXhUUVV0SGMwWXNVVUZNU0N4RFFVUnZRaXhIUVZOd1FrRXNVVUZVUmp0QlFWZEVPenM3TmtOQk5WVXJRbTQyUWl4UFFVRnBRbmR6UWl4UFFVRnBRanRCUVVGQkxGVkJRM2hFYUVjc1MwRkVkMFFzUjBGRE9VTjRiVUlzUzBGRU9FTXNRMEZEZUVSM2JVSXNTMEZFZDBRN1FVRkJRU3hWUVVWNFJIRlRMR2RDUVVaM1JDeEhRVVZ1UTNKTkxFdEJSbTFETEVOQlJYaEVjVTBzWjBKQlJuZEVPMEZCUzJoRk96dEJRVU5CTEZWQlFVMUZMSE5DUVVGelFpeEhRVUZIZGxNc1MwRkJTeXhEUVVGRGQxTXNTVUZCVGl4RFFVTTNRaXhWUVVGQk0xTXNTVUZCU1R0QlFVRkJMR1ZCUVVrc1EwRkJRM2RUTEdkQ1FVRm5RaXhEUVVGRGFrUXNSMEZCYWtJc1EwRkJjVUoyVUN4SlFVRnlRaXhEUVVGTU8wRkJRVUVzVDBGRWVVSXNRMEZCTDBJc1EwRk9aMFU3TzBGQlYyaEZMRmRCUVVzc1NVRkJTV2xDTEVOQlFVTXNSMEZCUnl4RFFVRmlMRVZCUVdkQ1FTeERRVUZETEVkQlFVZGtMRXRCUVVzc1EwRkJRMnh0UWl4TlFVRXhRaXhGUVVGclEyZHVRaXhEUVVGRExFbEJRVWtzUTBGQmRrTXNSVUZCTUVNN1FVRkRlRU03UVVGRFFUdEJRVU5CTEZsQlFVbHJSaXhMUVVGTExFTkJRVU5vUnl4TFFVRk9MRU5CUVZsakxFTkJRVm9zVFVGQmJVSndTeXhUUVVGMlFpeEZRVUZyUXp0QlFVTm9ReXhwUWtGQlR6dEJRVU5NTm1Jc1dVRkJRVUVzYzBKQlFYTkNMRVZCUVhSQ1FTeHpRa0ZFU3p0QlFVVk1kbE1zV1VGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVaTE8wRkJSMHhuVHl4WlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGSVVDeFhRVUZRTzBGQlMwUXNVMEZVZFVNN096dEJRVmw0UXp0QlFVVkZhRThzVVVGQlFVRXNTMEZCU3l4RFFVRkRZeXhEUVVGRUxFTkJRVXdzUzBGQllXdEdMRXRCUVVzc1EwRkJRMmhITEV0QlFVNHNRMEZCV1dNc1EwRkJXaXhEUVVGaU8wRkJSVUZrTEZGQlFVRkJMRXRCUVVzc1EwRkJRMnh0UWl4TlFVRk9MRWRCUVdWcmMwSXNTMEZCU3l4RFFVRkRhRWNzUzBGQlRpeERRVUZaYkcxQ0xFMUJTamRDTEVWQlMwVTdRVUZEUVN4cFFrRkJUenRCUVVOTWVUUkNMRmxCUVVGQkxITkNRVUZ6UWl4RlFVRjBRa0VzYzBKQlJFczdRVUZGVEhaVExGbEJRVUZCTEV0QlFVc3NSVUZCVEVFc1MwRkdTenRCUVVkTVowOHNXVUZCUVVFc1ZVRkJWU3hGUVVGRk8wRkJTRkFzVjBGQlVEdEJRVXRFTzBGQlEwWXNUMEZ1UXl0RU96czdRVUZ6UTJoRkxGVkJRVWxvVHl4TFFVRkxMRU5CUVVOc2JVSXNUVUZCVGl4TFFVRnBRaXhEUVVGcVFpeEpRVUZ6UW10elFpeExRVUZMTEVOQlFVTm9SeXhMUVVGT0xFTkJRVmxzYlVJc1RVRkJXaXhIUVVGeFFpeERRVUV2UXl4RlFVRnJSRHRCUVVOb1JDeGxRVUZQTzBGQlEweDVORUlzVlVGQlFVRXNjMEpCUVhOQ0xFVkJRWFJDUVN4elFrRkVTenRCUVVWTWRsTXNWVUZCUVVFc1MwRkJTeXhGUVVGTVFTeExRVVpMTzBGQlIweG5UeXhWUVVGQlFTeFZRVUZWTEVWQlFVVTdRVUZJVUN4VFFVRlFPMEZCUzBRN08wRkJRMFFzVlVGQlNYVkZMSE5DUVVGelFpeExRVUZMZGswc1MwRkJTeXhEUVVGRGRVMHNjMEpCUVhKRExFVkJRVFpFTzBGQlF6TkVPMEZCUTBFc1pVRkJUenRCUVVOTVFTeFZRVUZCUVN4elFrRkJjMElzUlVGQmRFSkJMSE5DUVVSTE8wRkJSVXgyVXl4VlFVRkJRU3hMUVVGTExFVkJRVXhCTzBGQlJrc3NVMEZCVUR0QlFVbEVMRTlCYmtRclJEczdPMEZCYzBSb1JTeGhRVUZQTEVsQlFWQTdRVUZEUkRzN096dEZRVE5SZVVNMVZ6czdaMEpCUVhaQ05HNUNMSE5DUVd0RVFUdEJRVU5xUWpzN096dEJRVWxCYUVJc1JVRkJRVUVzVjBGQlZ5eEZRVUZGYW0xQ0xGTkJRVk1zUTBGQlEwOHNUVUZNVGpzN1FVRlBha0k3T3pzN1FVRkhRVHRCUVVOQmFXNUNMRVZCUVVGQkxFbEJRVWtzUlVGQlJYaHVRaXhUUVVGVExFTkJRVU41VHl4SlFVRldMRU5CUVdVMVFpeFZRVmhLT3p0QlFXRnFRanM3T3p0QlFVbEJkMk1zUlVGQlFVRXNVVUZCVVN4RlFVRkZjbkJDTEZOQlFWTXNRMEZCUTNOQ0xFbEJha0pJT3p0QlFXMUNha0k3T3p0QlFVZEJaMjlDTEVWQlFVRkJMRmRCUVZjc1JVRkJSWFJ3UWl4VFFVRlRMRU5CUVVOUExFMUJkRUpPT3p0QlFYZENha0k3T3p0QlFVZEJNRllzUlVGQlFVRXNTMEZCU3l4RlFVRkZhbGNzVTBGQlV5eERRVUZEYzFFc1QwRkJWaXhEUVVGclFuUlJMRk5CUVZNc1EwRkJRemhOTEV0QlFWWXNRMEZCWjBJc1JVRkJhRUlzUTBGQmJFSXNSVUZCZFVORUxGVkJNMEkzUWpzN1FVRTJRbXBDT3pzN1FVRkhRWGxpTEVWQlFVRkJMR2RDUVVGblFpeEZRVUZGZEc5Q0xGTkJRVk1zUTBGQlEzTnhRaXhWUVVGV0xFTkJRWEZDY0VZc1owSkJRWEpDTEVOQmFFTkVPenRCUVd0RGFrSTdPenRCUVVkQk1YUkNMRVZCUVVGQkxFMUJRVTBzUlVGQlJYZEpMRk5CUVZNc1EwRkJRMDBzVTBGQlZpeERRVUZ2UWl4RFFVTXhRazRzVTBGQlV5eERRVUZEYzNGQ0xGVkJRVllzUTBGQmNVSkRMR0ZCUVhKQ0xFTkJSREJDTEVWQlJURkNkbkZDTEZOQlFWTXNRMEZCUTNOeFFpeFZRVUZXTEVOQlFYRkNZaXhuUWtGQmNrSXNRMEZHTUVJc1JVRkhNVUo2Y0VJc1UwRkJVeXhEUVVGRGQzRkNMRTFCU0dkQ0xFVkJTVEZDZUhGQ0xGTkJRVk1zUTBGQlExRXNUVUZLWjBJc1EwRkJjRUlzUTBGeVExTTdPMEZCTkVOcVFqczdPenM3UVVGTFFUWnRRaXhGUVVGQlFTeFRRVUZUTEVWQlFVVnlia0lzVTBGQlV5eERRVUZEZVU4c1NVRnFSRW83TzBGQmJVUnFRanM3TzBGQlIwRjVXQ3hGUVVGQlFTeFBRVUZQTEVWQlFVVnNiVUlzVTBGQlV5eERRVUZEVHl4TlFYUkVSanM3UVVGM1JHcENPenM3TzBGQlNVRXJha0lzUlVGQlFVRXNaVUZCWlN4RlFVRkZkR3RDTEZOQlFWTXNRMEZCUTNsUExFbEJOVVJXT3p0QlFUaEVha0k3T3p0QlFVZEJaMW9zUlVGQlFVRXNWVUZCVlN4RlFVRkZlbTVDTEZOQlFWTXNRMEZCUTNOQ08wRkJha1ZNT3p0blFrRnNSRUV5YkVJc2VVSkJjMGhITzBGQlEzQkNhRUlzUlVGQlFVRXNWMEZCVnl4RlFVRkZMRWRCUkU4N1FVRkZjRUpETEVWQlFVRkJMRTlCUVU4c1JVRkJSU3hEUVVaWE8wRkJSM0JDTVhWQ0xFVkJRVUZCTEUxQlFVMHNSVUZCUlN4UFFVaFpPMEZCU1hCQ05uWkNMRVZCUVVGQkxGTkJRVk1zUlVGQlJTeHhRa0ZCVFN4RlFVcEhPMEZCUzNCQ1NTeEZRVUZCUVN4VlFVRlZMRVZCUVVVN1FVRk1VVHM3U1VNM1RFaG5SRHM3T3pzN1FVRkhia0lzTkVKQlFWbG9OMElzUzBGQldpeEZRVUV3UWp0QlFVRkJPenRCUVVGQk96dEJRVU40UWl3NFFrRkJUVUVzUzBGQlRqczdRVUZFZDBJN08wRkJSWGhDTEZWQlFVdHBOMElzV1VGQlRDeEhRVUZ2UWl4SlFVRndRanRCUVVaM1FqdEJRVWQ2UWpzN096dDNRMEZGYlVJN1FVRkRiRUlzVlVGQlNTeFBRVUZQY0dRc1RVRkJVQ3hMUVVGclFpeFhRVUYwUWl4RlFVRnRRenRCUVVOcVF5eGhRVUZMYjJRc1dVRkJUQ3hIUVVGdlFuQmtMRTFCUVUwc1EwRkJRMnRSTEZGQlFWQXNRMEZCWjBJMFJTeEpRVUZvUWl4RFFVRnhRbkI1UWl4TFFVRnlRaXhEUVVFeVFtMU9MRkZCUVM5RE8wRkJRMEZ0VVN4UlFVRkJRU3hOUVVGTkxFTkJRVU5yVVN4UlFVRlFMRU5CUVdkQ05FVXNTVUZCYUVJc1EwRkJjVUp3ZVVJc1MwRkJja0lzUTBGQk1rSnRUaXhSUVVFelFpeEhRVUZ6UXl4UlFVRjBRenRCUVVORU8wRkJRMFk3T3pzeVEwRkZjMEk3UVVGRGNrSXNWVUZCU1N4UFFVRlBiVkVzVFVGQlVDeExRVUZyUWl4WFFVRjBRaXhGUVVGdFF6dEJRVU5xUTBFc1VVRkJRVUVzVFVGQlRTeERRVUZEYTFFc1VVRkJVQ3hEUVVGblFqUkZMRWxCUVdoQ0xFTkJRWEZDY0hsQ0xFdEJRWEpDTEVOQlFUSkNiVTRzVVVGQk0wSXNSMEZCYzBNc1MwRkJTM1YwUWl4WlFVRXpRenRCUVVORU8wRkJRMFk3T3pzMlFrRkZVVHRCUVVOUUxHRkJRVThzUzBGQlMybzNRaXhMUVVGTUxFTkJRVmM0VUN4UlFVRnNRanRCUVVORU96czdPMFZCZGtJeVEwWTdPMEZEUVRsRExGTkJRVk56Y2tJc2FVSkJRVlFzUTBGQk1rSXhTU3hGUVVFelFpeEZRVUVyUXp0QlFVTTNReXhOUVVGTk9YZENMRkZCUVZFc1IwRkJSeXhEUVVObUxGTkJSR1VzUlVGRlppeFpRVVpsTEVWQlIyWXNkVUpCU0dVc1JVRkpaaXgzUWtGS1pTeEZRVXRtTERCQ1FVeGxMRVZCVFdZc2QwSkJUbVVzUlVGUFppeFJRVkJsTEVWQlVXWXNVVUZTWlN4RlFWTm1MRTlCVkdVc1JVRlZaaXhwUWtGV1pTeEZRVmRtTEdkQ1FWaGxMRVZCV1dZc2JVSkJXbVVzUlVGaFppeHBRa0ZpWlN4RlFXTm1MR2xDUVdSbExFVkJaV1lzVTBGbVpTeEZRV2RDWm5aQ0xFbEJhRUpsTEVOQlowSldMRWRCYUVKVkxFTkJRV3BDTzBGQmFVSkJMRk5CUVU5eGVVSXNSVUZCUlN4RFFVRkRNa2tzWjBKQlFVZ3NRMEZCYjBKNk5VSXNVVUZCY0VJc1EwRkJVRHRCUVVORU96dEJRVVZFTEVsQlFVMHdOVUlzV1VGQldTeEhRVUZITEZOQlFXWkJMRmxCUVdVc1EwRkJRelZKTEVWQlFVUXNSVUZCY1VJN1FVRkRlRU1zVFVGQlNTeFBRVUZQUVN4RlFVRkZMRU5CUVVNeFJpeExRVUZXTEV0QlFXOUNMRlZCUVhoQ0xFVkJRVzlETzBGQlEyeERNRVlzU1VGQlFVRXNSVUZCUlN4RFFVRkRNVVlzUzBGQlNEdEJRVU5FTzBGQlEwWXNRMEZLUkRzN1NVRk5jVUoxVHpzN096czdPenM3T3pzN096czdPenM3T3pzN0swUkJhMEpTTEZWQlFVTTNTU3hGUVVGRUxFVkJRWGxDTzBGQlEyeERMRlZCUVVsQkxFVkJRVW9zUlVGQlVUdEJRVU5PTEdOQlFVdEJMRVZCUVV3c1IwRkJWVUVzUlVGQlZqdEJRVU5FTzBGQlEwWTdPMnRGUVVWaExGVkJRVU40VUN4TFFVRkVMRVZCUVhWQ08wRkJRMjVETEZWQlEwVXNRMEZCUXl4TlFVRkxkMUFzUlVGQlRpeEpRVU5EZUZBc1MwRkJTeXhEUVVGRE5FSXNUVUZCVGl4WlFVRjNRbWxMTEVsQlFYaENMRWxCUVdkRExFMUJRVXN5UkN4RlFVRk1MRU5CUVZGMGFrSXNVVUZCVWl4RFFVRnBRamhVTEV0QlFVc3NRMEZCUXpSQ0xFMUJRWFpDTEVOQlJtNURMRVZCUjBVN1FVRkRRVHRCUVVORU96dEJRVVZFTlVJc1RVRkJRVUVzUzBGQlN5eERRVUZEYzFrc1pVRkJUanRCUVVOQmRGa3NUVUZCUVVFc1MwRkJTeXhEUVVGRGRWa3NZMEZCVGpzN1FVRkRRU3haUVVGTFF5eGxRVUZNTzBGQlEwUTdPenM3T3pzN2QwTkJPVUp0UWp0QlFVTnNRaXhYUVVGTFF5eHRRa0ZCVEN4SFFVRXlRakZPTEZGQlFWRXNRMEZCUXpKT0xHRkJRWEJETzBGQlEwRXNWMEZCUzBZc1pVRkJURHRCUVVOQmVrNHNUVUZCUVVFc1VVRkJVU3hEUVVGRGFFSXNaMEpCUVZRc1EwRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1MwRkJTelJQTEZkQlFYaERMRVZCUVhGRUxFbEJRWEpFTzBGQlEwUTdPenN5UTBGRmMwSTdRVUZEY2tJMVRpeE5RVUZCUVN4UlFVRlJMRU5CUVVObUxHMUNRVUZVTEVOQlFUWkNMRTlCUVRkQ0xFVkJRWE5ETEV0QlFVc3lUeXhYUVVFelF5eEZRVUYzUkN4SlFVRjRSRHM3UVVGRFFTeFZRVUZKTEV0QlFVdEdMRzFDUVVGVUxFVkJRVGhDTzBGQlF6VkNUQ3hSUVVGQlFTeFpRVUZaTEVOQlFVTXNTMEZCUzBzc2JVSkJRVTRzUTBGQldqdEJRVU5FTzBGQlEwWTdPenR6UTBGeFFtbENPMEZCUVVFc1ZVRkRVbXBLTEVWQlJGRXNSMEZEUkN4SlFVUkRMRU5CUTFKQkxFVkJSRkU3TzBGQlJXaENMRlZCUVVsQkxFVkJRVW9zUlVGQlVUdEJRVU5PTkVrc1VVRkJRVUVzV1VGQldTeERRVUZEUml4cFFrRkJhVUlzUTBGQlF6RkpMRVZCUVVRc1EwRkJha0lzUTBGQmMwSXNRMEZCZEVJc1EwRkJSQ3hEUVVGYU8wRkJRMFE3UVVGRFJqczdPelpDUVVWUk8wRkJRMUFzTUVKQlFVOXdhVUk3UVVGQlN5eFJRVUZCTEVkQlFVY3NSVUZCUlN4TFFVRkxkM0pDTzBGQlFXWXNVMEZCTUVJc1MwRkJTelUzUWl4TFFVRk1MRU5CUVZjNFVDeFJRVUZ5UXl4RFFVRlFPMEZCUTBRN096czdSVUU1UXpSRFJqczdPenRCUTJJdlF5eEpRVUZOYjJZc1owSkJRV01zUjBGQlJ6dEJRVU55UW14eFFpeEZRVUZCUVN4RlFVRkZMRVZCUVVVc1IwRkVhVUk3UVVGRmNrSkRMRVZCUVVGQkxFVkJRVVVzUlVGQlJTeEhRVVpwUWp0QlFVZHlRa01zUlVGQlFVRXNSVUZCUlN4RlFVRkZPMEZCU0dsQ0xFTkJRWFpDTzBGQlRVRXNTVUZCVFdseFFpeHBRa0ZCWlN4SFFVRkhMRVZCUVhoQ096dEJRVVZCTEZOQlFWTTBUU3hSUVVGVUxFOUJUVWM3UVVGQlFTeE5RVXhFTDNKQ0xGRkJTME1zVVVGTVJFRXNVVUZMUXp0QlFVRkJMRTFCU2tSNVV5eFBRVWxETEZGQlNrUkJMRTlCU1VNN08wRkJRMFFzVFVGQlRYTkRMRmRCUVZjc1IwRkJSeXhUUVVGa1FTeFhRVUZqTEVOQlFVRTNRaXhMUVVGTExFVkJRVWs3UVVGRE0wSXNVVUZCU1VFc1MwRkJTeXhEUVVGRE5FSXNUVUZCVGl4TFFVRnBRalZDTEV0QlFVc3NRMEZCUXpoQ0xHRkJRVE5DTEVWQlFUQkRPMEZCUTNoRE8wRkJRMFE3TzBGQlJVUXNVVUZCU1haRExFOUJRVW9zUlVGQllUdEJRVU5ZUVN4TlFVRkJRU3hQUVVGUExFTkJRVU5UTEV0QlFVUXNRMEZCVUR0QlFVTkVPMEZCUTBZc1IwRlNSRHM3UVVGVFFTeHpRa0ZEUlRWVExESkRRVWRGUVR0QlFVRkxMRWxCUVVFc1UwRkJVeXhGUVVGRmFGSXNVVUZCVFN4RFFVRkRNRGhDTEZGQlFYWkNPMEZCUVdsRExFbEJRVUVzVDBGQlR5eEZRVUZGYWxnN1FVRkJNVU1zU1VGSVJpeEZRVWxITDFVc1VVRktTQ3hEUVVSR08wRkJVVVE3TzBGQlJVUXNVMEZCVTJselFpeE5RVUZVTEZGQlFXbEZPMEZCUVVFc1RVRkJMME5ETEU5QlFTdERMRk5CUVM5RFFTeFBRVUVyUXpzN1FVRkRMMFFzVFVGQlNTeFBRVUZQUVN4UFFVRlFMRXRCUVcxQ0xGRkJRWFpDTEVWQlFXbERPMEZCUXk5Q0xGZEJRVTlCTEU5QlFWQTdRVUZEUkRzN1FVRkZSQ3h6UWtGRFJUVnlRaXhqUVVGRExFZEJRVVE3UVVGQlN5eEpRVUZCTEU5QlFVOHNSVUZCUXl4TlFVRmlPMEZCUVc5Q0xFbEJRVUVzWTBGQll5eEZRVUZETEZGQlFXNURPMEZCUVRSRExFbEJRVUVzVDBGQlR5eEZRVUZGTzBGQlFYSkVMR3RDUVVORlFTeGpRVUZETEU5QlFVUTdRVUZCVXl4SlFVRkJMRWxCUVVrc1JVRkJReXhKUVVGa08wRkJRVzFDTEVsQlFVRXNhMEpCUVd0Q0xFVkJRVVU3UVVGQmRrTXNTMEZEUnpSeVFpeFBRVVJJTEVOQlJFWXNRMEZFUmp0QlFVOUVPenRCUVVWRUxFRkJRV1VzVTBGQlUwTXNTMEZCVkN4UlFWTk1PMEZCUVVFc1RVRlNVa01zZFVKQlVWRXNVMEZTVWtFc2RVSkJVVkU3UVVGQlFTeE5RVkJTY0hOQ0xGRkJUMUVzVTBGUVVrRXNVVUZQVVR0QlFVRkJMRzlEUVU1U2NYTkNMRzFDUVUxUk8wRkJRVUVzVFVGT1VrRXNiVUpCVFZFc2MwTkJUbU1zU1VGTlpEdEJRVUZCTEUxQlRGSXhUU3hUUVV0UkxGTkJURkpCTEZOQlMxRTdRVUZCUVN4TlFVcFNNazBzVFVGSlVTeFRRVXBTUVN4TlFVbFJPMEZCUVVFc1RVRklVa29zVDBGSFVTeFRRVWhTUVN4UFFVZFJPMEZCUVVFc2VVSkJSbEpMTEVsQlJWRTdRVUZCUVN4TlFVWlNRU3hKUVVWUkxESkNRVVpFTEZGQlJVTTdRVUZCUVN4NVFrRkVVbkE0UWl4SlFVTlJPMEZCUVVFc1RVRkVVa0VzU1VGRFVTd3lRa0ZFUkN4SlFVTkRPenRCUVVGQkxIZENRVU5yUXpKUUxGRkJRVUVzUTBGQlpTeExRVUZtTEVOQlJHeERPMEZCUVVFN1FVRkJRU3hOUVVORU1ITkNMR0ZCUkVNN1FVRkJRU3hOUVVOalF5eG5Ra0ZFWkRzN1FVRkJRU3g1UWtGRmQwTXpjMElzVVVGQlFTeERRVUZsTEV0QlFXWXNRMEZHZUVNN1FVRkJRVHRCUVVGQkxFMUJSVVEwYzBJc1owSkJSa003UVVGQlFTeE5RVVZwUWtNc2JVSkJSbXBDT3p0QlFVZFNMRTFCUVUxRExFOUJRVThzUjBGQlJ6bHpRaXhOUVVGQkxFTkJRVGhDTEVsQlFUbENMRU5CUVdoQ08wRkJSVUZCTEVWQlFVRkJMRk5CUVVFc1EwRkJaMElzV1VGQlRUdEJRVU53UWl4aFFVRlRhV3RDTEZkQlFWUXNRMEZCY1VJM1VTeExRVUZ5UWl4RlFVRnBSRHRCUVVNdlF5eFZRVUZKUVN4TFFVRkxMRU5CUVVNd1RTeFBRVUZPTEV0QlFXdENWQ3hwUWtGQmRFSXNSVUZCZFVNN1FVRkRja05STEZGQlFVRkJMRk5CUVZNN1FVRkRWanRCUVVOR096dEJRVVZFTlZJc1NVRkJRVUVzVFVGQlRTeERRVUZEYTFBc1owSkJRVkFzUTBGQmQwSXNUMEZCZUVJc1JVRkJhVU00Unl4WFFVRnFRenRCUVVOQkxGZEJRVThzVTBGQlV6bEZMRTlCUVZRc1IwRkJiVUk3UVVGRGVFSnNVaXhOUVVGQlFTeE5RVUZOTEVOQlFVTnRVQ3h0UWtGQlVDeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF6WkhMRmRCUVhCRE8wRkJRMFFzUzBGR1JEdEJRVWRFTEVkQldFUXNSVUZYUnl4RFFVRkRjRVVzVTBGQlJDeERRVmhJT3p0QlFXRkJMRTFCUVUxclRpeHJRa0ZCYTBJc1IwRkJSeXhUUVVGeVFrRXNhMEpCUVhGQ0xFZEJRVTA3UVVGREwwSXNVVUZCU1ZJc2JVSkJRVW9zUlVGQmVVSTdRVUZEZGtJeFRTeE5RVUZCUVN4VFFVRlRPMEZCUTFZN1FVRkRSaXhIUVVwRU96dEJRVTFCTEUxQlFVMXRUaXhoUVVGaExFZEJRVWNzVTBGQmFFSkJMR0ZCUVdkQ0xFZEJRVTA3UVVGRE1VSXNVVUZCVFdoWkxFMUJRVTBzUjBGQlJ6aFlMRTlCUVU4c1EwRkJRMmhaTEU5QlFYWkNPenRCUVVOQkxGRkJRVWtzUTBGQlEwVXNUVUZCVEN4RlFVRmhPMEZCUTFnN1FVRkRSRHM3UVVGRFJDeFJRVUZOYVZrc2IwSkJRVzlDTEVkQlFVZHFXU3hOUVVGTkxFTkJRVU13U2l4WlFVRlFMRWRCUVhOQ01Vb3NUVUZCVFN4RFFVRkRPRkFzV1VGQk1VUTdRVUZEUVRaSUxFbEJRVUZCTEdkQ1FVRm5RaXhEUVVGRFRTeHZRa0ZCYjBJc1NVRkJTV3BaTEUxQlFVMHNRMEZCUTNWS0xGTkJRVkFzUjBGQmJVSXNRMEZCTlVNc1EwRkJhRUk3UVVGRFFYTlBMRWxCUVVGQkxHMUNRVUZ0UWl4RFFVTnFRa2tzYjBKQlFXOUNMRWxCUTJ4Q2Fsa3NUVUZCVFN4RFFVRkRhMWtzV1VGQlVDeEhRVUZ6UW14WkxFMUJRVTBzUTBGQlEzVktMRk5CUVRkQ0xFZEJRWGxEZGtvc1RVRkJUU3hEUVVGRE9GQXNXVUZHYWtNc1EwRkJia0k3UVVGSlJDeEhRVmhFT3p0QlFXRkJPV3RDTEVWQlFVRkJMRk5CUVVFc1EwRkJaMElzV1VGQlRUdEJRVU53UW1sUExFbEJRVUZCTEUxQlFVMHNRMEZCUTJ0UUxHZENRVUZRTEVOQlFYZENMRkZCUVhoQ0xFVkJRV3RETmxBc1lVRkJiRU03UVVGRFFTeFhRVUZQTEZsQlFVMDdRVUZEV0M5bExFMUJRVUZCTEUxQlFVMHNRMEZCUTIxUUxHMUNRVUZRTEVOQlFUSkNMRkZCUVROQ0xFVkJRWEZETkZBc1lVRkJja003UVVGRFJDeExRVVpFTzBGQlIwUXNSMEZNUkN4RlFVdEhMRVZCVEVnN1FVRlBRV2gwUWl4RlFVRkJRU3hUUVVGQkxFTkJRV2RDTEZsQlFVMDdRVUZEY0VKbmRFSXNTVUZCUVVFc1lVRkJZVHRCUVVOa0xFZEJSa1FzUlVGRlJ5eEZRVVpJTzBGQlNVRXNUVUZCVFM5MFFpeExRVUZMTEVkQlFVY3NUMEZCVHpWUExFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1IwRkJNa0lyZFVJc1owSkJRV01zUTBGQlF5OTFRaXhKUVVGRUxFTkJRWHBETEVkQlFXdEVRU3hKUVVGb1JUdEJRVVZCTEhOQ1FVTkZiVkVzWTBGQlF6SnpRaXhuUWtGQlJDeHhRa0ZEUlROelFpeGpRVUZETEdsQ1FVRkVMSEZDUVVORlFUdEJRVU5GTEd0Q1FVRlpPSEpDTEhWQ1FVUmtPMEZCUlVVc1NVRkJRU3hUUVVGVExFVkJRVVU1T0VJc1VVRkJUU3hEUVVGRGFYVkNMRk5CUm5CQ08wRkJSMFVzU1VGQlFTeEpRVUZKTEVWQlFVVm5VRHRCUVVoU0xHdENRVXRGYW5OQ0xHTkJRVU1zVVVGQlJEdEJRVUZWTEVsQlFVRXNUMEZCVHl4RlFVRkZkWE5DTzBGQlFXNUNMR3RDUVVORmRuTkNPMEZCUVVzc1NVRkJRU3hUUVVGVExFVkJRVVZvVWl4UlFVRk5MRU5CUVVNME9VSXNUMEZCZGtJN1FVRkJaME1zU1VGQlFTeFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRXpRenRCUVVFNFF5eEpRVUZCTEV0QlFVc3NSVUZCUlR0QlFVRkZiblZDTEUxQlFVRkJMRXRCUVVzc1JVRkJURUU3UVVGQlJqdEJRVUZ5UkN4clFrRkRSWFZDTEdOQlFVTXNSMEZCUkR0QlFVTkZMRWxCUVVFc1NVRkJTU3hGUVVGRExFMUJSRkE3UVVGRlJTeEpRVUZCTEZGQlFWRXNSVUZCUXl4VlFVWllPMEZCUjBVc1NVRkJRU3hQUVVGUExFVkJRVU1zVFVGSVZqdEJRVWxGTEVsQlFVRXNVMEZCVXl4RlFVRkRMRkZCU2xvN1FVRkxSU3hKUVVGQkxFdEJRVXNzUlVGQlF6dEJRVXhTTEV0QlQwYzBja0lzVDBGQlR5eHBRa0ZEVGpWeVFqdEJRVU5GTEVsQlFVRXNVMEZCVXl4RlFVRkZkMDBzVlVGQlZTeERRVUZEZUdRc1VVRkJUU3hEUVVGRE5qbENMR1ZCUVZJc2MwSkJRMnhDTnpsQ0xGRkJRVTBzUTBGQlF6ZzVRaXhOUVVSWExFVkJRMFphTEdGQlJFVTdRVUZFZGtJc2EwSkJTMFZzYzBJc1kwRkJReXhOUVVGRU8wRkJRVkVzU1VGQlFTeFBRVUZQTEVWQlFVVTBja0k3UVVGQmFrSXNTVUZNUml4RFFWSktMR1ZCWjBKRk5YSkNMR05CUVVNc1IwRkJSRHRCUVVORkxFbEJRVUVzU1VGQlNTeEZRVUZETEUxQlJGQTdRVUZGUlN4SlFVRkJMRkZCUVZFc1JVRkJReXhOUVVaWU8wRkJSMFVzU1VGQlFTeFJRVUZSTEVWQlFVVjNjMElzWVVGSVdqdEJRVWxGTEVsQlFVRXNSMEZCUnl4RlFVRkZSanRCUVVwUUxFdEJUVWMxYzBJc1VVRk9TQ3hEUVdoQ1JpeEZRWGRDUjNOelFpeE5RVUZOTEdsQ1FVTk1hSE5DTzBGQlEwVXNTVUZCUVN4VFFVRlRMRVZCUVVWM1RTeFZRVUZWTEVOQlFVTjRaQ3hSUVVGTkxFTkJRVU0yT1VJc1pVRkJVaXh6UWtGRGJFSTNPVUlzVVVGQlRTeERRVUZET0RsQ0xFMUJSRmNzUlVGRFJsWXNaMEpCUkVVN1FVRkVka0lzYTBKQlMwVndjMElzWTBGQlF5eEhRVUZFTzBGQlFVc3NTVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkJaQ3hMUVVGclFtZHpRaXhOUVVGc1FpeERRVXhHTEVOQmVrSktMRU5CUkVZc1EwRkVSaXhEUVV4R0xFTkJSRVlzUTBGRVJpeERRVVJHTzBGQmEwUkVPMEZCUlVSSUxFdEJRVXNzUTBGQlEzaHhRaXhUUVVGT0xFZEJRV3RDTzBGQlEyaENlWEZDTEVWQlFVRkJMSFZDUVVGMVFpeEZRVUZGTTNKQ0xGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTEZWQlJERkNPMEZCUldoQ2RFNHNSVUZCUVVFc1VVRkJVU3hGUVVGRlV5eFRRVUZUTEVOQlFVTnRRaXhKUVVaS08wRkJSMmhDZVhGQ0xFVkJRVUZCTEcxQ1FVRnRRaXhGUVVGRk5YSkNMRk5CUVZNc1EwRkJRM05DTEVsQlNHWTdRVUZKYUVKMWNVSXNSVUZCUVVFc1RVRkJUU3hGUVVGRk4zSkNMRk5CUVZNc1EwRkJRMjFDTEVsQlNrWTdRVUZMYUVKemNVSXNSVUZCUVVFc1QwRkJUeXhGUVVGRmVuSkNMRk5CUVZNc1EwRkJRMDBzVTBGQlZpeERRVUZ2UWl4RFFVRkRUaXhUUVVGVExFTkJRVU5STEUxQlFWZ3NSVUZCYlVKU0xGTkJRVk1zUTBGQlEyMUNMRWxCUVRkQ0xFTkJRWEJDTEVOQlRFODdRVUZOYUVJclpDeEZRVUZCUVN4VFFVRlRMRVZCUVVWc1ppeFRRVUZUTEVOQlFVTjVUeXhKUVU1TU8wRkJUMmhDY1dRc1JVRkJRVUVzU1VGQlNTeEZRVUZGT1hKQ0xGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExHRkJRVVFzUlVGQlowSXNVVUZCYUVJc1EwRkJhRUlzUTBGUVZUdEJRVkZvUW5aUkxFVkJRVUZCTEVsQlFVa3NSVUZCUlhOUkxGTkJRVk1zUTBGQlEwMHNVMEZCVml4RFFVRnZRaXhEUVVONFFrNHNVMEZCVXl4RFFVRkRUeXhOUVVSakxFVkJSWGhDVUN4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVQ3hGUVVGaExFbEJRV0lzUTBGQmFFSXNRMEZHZDBJc1EwRkJjRUk3UVVGU1ZTeERRVUZzUWpzN096dEJRM3BMWlN4VFFVRlRNbk5DTEUxQlFWUXNUMEZCSzBNN1FVRkJRU3hOUVVFM1FrTXNUVUZCTmtJc1VVRkJOMEpCTEUxQlFUWkNPMEZCUVVFc2RVSkJRWEpDYmpsQ0xFbEJRWEZDTzBGQlFVRXNUVUZCY2tKQkxFbEJRWEZDTERCQ1FVRmtMRWRCUVdNN1FVRkROVVFzYzBKQlEwVnRVU3hqUVVGRExFZEJRVVE3UVVGRFJTeEpRVUZCTEhsQ1FVRjVRaXhGUVVGRk8wRkJRM3BDYmtJc1RVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlExQnZkVUlzVVVGQlFVRXNkVUpCUVhWQ0xFVkJRVVZFTEUxQlFVMHNSMEZCUnl4RFFVRklMRWRCUVU4c1ZVRkVMMEk3UVVGRlVHaGtMRkZCUVVGQkxFOUJRVThzUlVGQlJTeE5RVVpHTzBGQlIxQkpMRkZCUVVGQkxGTkJRVk1zUlVGQlJUdEJRVWhLTzBGQlJHZENMRXRCUkRkQ08wRkJVVVVzU1VGQlFTeFBRVUZQTEVWQlFVVTBZeXhOUVVGTkxFZEJRVWNzVFVGQlNDeEhRVUZaTEU5QlVqZENPMEZCVTBVc1NVRkJRU3hOUVVGTkxFVkJRVVZ1T1VJc1NVRlVWanRCUVZWRkxFbEJRVUVzVVVGQlVTeEZRVUZETEZWQlZsZzdRVUZYUlN4SlFVRkJMRXRCUVVzc1JVRkJSVUU3UVVGWVZDeHJRa0ZoUlcxUk8wRkJRVXNzU1VGQlFTeFRRVUZUTEVWQlFVVm9VaXhSUVVGTkxFTkJRVU5ySzBJN1FVRkJka0lzYTBKQlEwVnNkRUk3UVVGQlN5eEpRVUZCTEZOQlFWTXNSVUZCUldoU0xGRkJRVTBzUTBGQlEyMHJRanRCUVVGMlFpeEpRVVJHTEVOQllrWXNRMEZFUmp0QlFXMUNSRHRCUVVWRVNpeE5RVUZOTEVOQlFVTXhja0lzVTBGQlVDeEhRVUZ0UWp0QlFVTnFRakp5UWl4RlFVRkJRU3hOUVVGTkxFVkJRVVUzYzBJc1UwRkJVeXhEUVVGRGMwSXNTVUZFUkR0QlFVVnFRalZTTEVWQlFVRkJMRWxCUVVrc1JVRkJSWE5STEZOQlFWTXNRMEZCUTA4N1FVRkdReXhEUVVGdVFqczdPenRKUTBweFFqQnpRanM3T3pzN096czdPenM3T3pzN096czBSRUZyUWxnN1FVRkRUbXBhTEUxQlFVRkJMRTlCUVU4c1JVRkJSU3hMUVVSSU8wRkJSVTV5UWl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGR1NEczdiVVZCUzA4c1ZVRkJRMFlzUzBGQlJDeEZRVUZyUXp0QlFVRkJMRlZCUTNaRGNVSXNVVUZFZFVNc1IwRkRNVUlzVFVGQlMzSnJRaXhMUVVSeFFpeERRVU4yUTNGclFpeFJRVVIxUXp0QlFVRkJMRlZCUlhaRFNpeFBRVVoxUXl4SFFVVXpRbXBDTEV0QlFVc3NRMEZCUXpSQ0xFMUJSbkZDTEVOQlJYWkRXQ3hQUVVaMVF6dEJRVWN2UTBrc1RVRkJRVUVzVVVGQlVTeERRVUZETzBGQlFVVktMRkZCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZCUmp0QlFVRlhha0lzVVVGQlFVRXNTMEZCU3l4RlFVRk1RVHRCUVVGWUxFOUJRVVFzUTBGQlVqdEJRVU5FT3p0cFJVRkZXVHRCUVVGQkxHRkJRVTBzVFVGQlMzbEtMRkZCUVV3c1EwRkJZenRCUVVGRmJFa3NVVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJRVmdzVDBGQlpDeERRVUZPTzBGQlFVRTdPMnRGUVVWRE8wRkJRVUVzWVVGQlRTeE5RVUZMYTBrc1VVRkJUQ3hEUVVGak8wRkJRVVZzU1N4UlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQldDeFBRVUZrTEVOQlFVNDdRVUZCUVRzN2EwVkJSVUVzVlVGQlEzSkNMRTlCUVVRc1JVRkJjMEk3UVVGRGJFTXNXVUZCUzNWS0xGRkJRVXdzUTBGQll6dEJRVUZGZGtvc1VVRkJRVUVzVDBGQlR5eEZRVUZRUVR0QlFVRkdMRTlCUVdRN1FVRkRSRHM3T3pzN096czJRa0ZGVVR0QlFVRkJPenRCUVVGQkxIZENRVU54UkN4TFFVRkxiR3BDTEV0QlJERkVPMEZCUVVFc1ZVRkRRMmxyUWl4UFFVUkVMR1ZCUTBOQkxFOUJSRVE3UVVGQlFTeFZRVU5WTlVJc1VVRkVWaXhsUVVOVlFTeFJRVVJXTzBGQlFVRXNWVUZEYjBKMVFpeEZRVVJ3UWl4bFFVTnZRa0VzUlVGRWNFSTdRVUZCUVN4VlFVTjNRa2NzUzBGRWVFSXNaVUZEZDBKQkxFdEJSSGhDTzBGQlFVRXNWVUZESzBKNmFVSXNTVUZFTDBJc1pVRkRLMEpCTEVsQlJDOUNPMEZCUVVFc1ZVRkRjVU55UWl4SlFVUnlReXhsUVVOeFEwRXNTVUZFY2tNN1FVRkJRU3hWUVVNeVEzZEZMRXRCUkRORExHVkJRekpEUVN4TFFVUXpRenRCUVVGQkxIZENRVVZ6UWl4TFFVRkxLMjVDTEV0QlJqTkNPMEZCUVVFc1ZVRkZRMnBKTEU5QlJrUXNaVUZGUTBFc1QwRkdSRHRCUVVGQkxGVkJSVlZ5UWl4UFFVWldMR1ZCUlZWQkxFOUJSbFk3UVVGSlVDeFZRVUZKSzBJc1YwRkJWeXhIUVVGSE4yeENMRkZCUVUwc1EwRkJRM0VyUWl4TlFVRjZRanM3UVVGRFFTeFZRVUZKY0dJc1VVRkJVU3hKUVVGSk5FSXNUMEZCYUVJc1JVRkJlVUk3UVVGRGRrSm5RaXhSUVVGQlFTeFhRVUZYTEVkQlFVYzNiRUlzVVVGQlRTeERRVUZEY3l0Q0xIRkNRVUZ5UWp0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSkxFTkJRVU55WWl4UlFVRkVMRWxCUVdFMFFpeFBRVUZxUWl4RlFVRXdRanRCUVVNdlFtZENMRkZCUVVGQkxGZEJRVmNzUjBGQlJ6ZHNRaXhSUVVGTkxFTkJRVU4xSzBJc1kwRkJja0k3UVVGRFJDeFBRVVpOTEUxQlJVRXNTVUZCU1N4RFFVRkRkR0lzVVVGQlJDeEpRVUZoWVN4UFFVRnFRaXhGUVVFd1FqdEJRVU12UWl0Q0xGRkJRVUZCTEZkQlFWY3NSMEZCUnpkc1FpeFJRVUZOTEVOQlFVTjNLMElzWVVGQmNrSTdRVUZEUkRzN1FVRkZSQ3hWUVVGSlF5eFhRVUZYTEVkQlFVZDZLMElzVVVGQlRTeERRVUZETUN0Q0xHVkJRWHBDT3p0QlFVTkJMRlZCUVVsNllpeFJRVUZSTEVsQlFVa3NRMEZCUXpSQ0xFOUJRV3BDTEVWQlFUQkNPMEZCUTNoQ05Gb3NVVUZCUVVFc1YwRkJWeXhIUVVGSGVpdENMRkZCUVUwc1EwRkJReklyUWl4alFVRnlRanRCUVVORUxFOUJSa1FzVFVGRlR5eEpRVUZKT1Zvc1QwRkJUeXhKUVVGSmFHdENMRWxCUVVrc1MwRkJTeXhKUVVGNFFpeEZRVUU0UWp0QlFVTnVRelE1UWl4UlFVRkJRU3hYUVVGWExFZEJRVWQ2SzBJc1VVRkJUU3hEUVVGRE5DdENMR1ZCUVhKQ08wRkJRMFFzVDBGR1RTeE5RVVZCTEVsQlFVa3ZXaXhQUVVGUExFbEJRVWxvYTBJc1NVRkJTU3hMUVVGTExFbEJRWGhDTEVWQlFUaENPMEZCUTI1RE5EbENMRkZCUVVGQkxGZEJRVmNzUjBGQlIzb3JRaXhSUVVGTkxFTkJRVU0ySzBJc1pVRkJja0k3UVVGRFJEczdRVUZGUkN4VlFVRk5kbGtzVTBGQlV5eEhRVU5pZW14Q0xFbEJRVWtzUzBGQlN5eEpRVUZVTEVkQlFXZENNR3hDTEdGQlFXRXNRMEZCUTJoakxFMUJRVGxDTEVkQlFYVkRaMk1zWVVGQllTeERRVUZEUXl4TlFVUjJSRHRCUVVkQkxGVkJRVTFhTEU5QlFVOHNSMEZCUnpORExGRkJRVkVzU1VGQlNTeERRVUZETkVJc1QwRkJZaXhIUVVGMVFqZHJRaXhSUVVGTkxFTkJRVU00SzBJc1ZVRkJPVUlzUjBGQk1rTTVLMElzVVVGQlRTeERRVUZES3l0Q0xGTkJRV3hGTzBGQlJVRXNNRUpCUTBVdmRFSXNZMEZCUXl4SFFVRkVPMEZCUTBVc1VVRkJRU3hWUVVGVkxFVkJRVU1zVVVGRVlqdEJRVVZGTEZGQlFVRXNUMEZCVHl4RlFVRkRMRTFCUmxZN1FVRkhSU3hSUVVGQkxHTkJRV01zUlVGQlF5eFBRVWhxUWp0QlFVbEZMRkZCUVVFc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGS1pqdEJRVXRGTEZGQlFVRXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRk1hRUlzYzBKQlQwVkJMR05CUVVNc1MwRkJSRHRCUVVGUExGRkJRVUVzVDBGQlR5eEZRVUZGZDFRN1FVRkJhRUlzYzBKQlEwVjRWQ3hqUVVGRExFZEJRVVE3UVVGQlN5eFJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRm1MSE5DUVVORlFUdEJRVU5GTEZGQlFVRXNVMEZCVXl4RlFVRkZkMDBzVlVGQlZTeERRVU51UW05SkxFOUJSRzFDTEVWQlJXNUNReXhYUVVadFFpeEZRVWR1UWpSWkxGZEJTRzFDTEVWQlNXNUNibGtzVTBGS2JVSXNSVUZMYmtKMGJVSXNVVUZCVFN4RFFVRkRieXRDTEZkQlRGa3NjMEpCVDJoQ2NDdENMRkZCUVUwc1EwRkJRMmN2UWl4dlFrRlFVeXhGUVU5ak4xb3NUMEZRWkR0QlFVUjJRaXh6UWtGWlJXNVZPMEZCUTBVc1VVRkJRU3hQUVVGUExFVkJRVVUyVkN4UFFVUllPMEZCUlVVc1VVRkJRU3hUUVVGVExFVkJRVVZ5U0N4VlFVRlZMRU5CUVVNclNTeGhRVUZoTEVOQlFVTkZMRXRCUVdZc1JVRkJjMEpJTEZOQlFYUkNMSE5DUVVOc1FuUnRRaXhSUVVGTkxFTkJRVU5wTDBJc1dVRkVWeXhGUVVOSkxFTkJRVU5vWXl4UlFVUk1MRVZCUm5aQ08wRkJTMFVzVVVGQlFTeFJRVUZSTEVWQlFVVkJMRkZCVEZvN1FVRk5SU3hSUVVGQkxFVkJRVVVzUlVGQlJYVkNMRVZCVGs0N1FVRlBSU3hSUVVGQkxFbEJRVWtzUlVGQlJYUnBRaXhKUVZCU08wRkJVVVVzVVVGQlFTeE5RVUZOTEVWQlFVVXNTMEZCUzJjNVFpeFZRVkptTzBGQlUwVXNVVUZCUVN4UlFVRlJMRVZCUVVVc1MwRkJTek5hTEZsQlZHcENPMEZCVlVVc1VVRkJRU3hQUVVGUExFVkJRVVVzUzBGQlMyZFlMRmRCVm1oQ08wRkJWMFVzVVVGQlFTeFpRVUZaTEVWQlFVVTdRVUZCUVN4cFFrRkJUU3hOUVVGSkxFTkJRVU0xVnl4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVOQlFVNDdRVUZCUVN4VFFWaG9RanRCUVZsRkxGRkJRVUVzV1VGQldTeEZRVUZGTzBGQlFVRXNhVUpCUVUwc1RVRkJTU3hEUVVGRFFTeFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVTQ3UVVGQlFTeFRRVnBvUWp0QlFXRkZMRkZCUVVFc1NVRkJTU3hGUVVGRExFOUJZbEE3UVVGalJTeFJRVUZCTEV0QlFVc3NSVUZCUlhSblFqdEJRV1JVTEZGQldrWXNRMEZFUml4RFFVUkdMRU5CVUVZc1JVRjVRMGR6Wml4TFFVRkxMR2xDUVVOS00xUXNZMEZCUXl4TFFVRkVPMEZCUVU4c1VVRkJRU3hQUVVGUExFVkJRVVYzVkR0QlFVRm9RaXh6UWtGRFJYaFVMR05CUVVNc1IwRkJSRHRCUVVGTExGRkJRVUVzVVVGQlVTeEZRVUZGTzBGQlFXWXNjMEpCUTBWQkxHTkJRVU1zU1VGQlJEdEJRVU5GTEZGQlFVRXNTMEZCU3l4RlFVRkZhVk1zVVVGQlVTeEhRVUZITEUxQlFVZ3NSMEZCV1c1R0xGTkJSRGRDTzBGQlJVVXNVVUZCUVN4SlFVRkpMRVZCUVVWcVpDeEpRVUZKTEV0QlFVc3NTVUZCVkN4SFFVRm5RaXhKUVVGb1FpeEhRVUYxUWp0QlFVWXZRaXhUUVVsSE9HcENMRXRCU2tnc1EwRkVSaXhEUVVSR0xFTkJNVU5LTEVOQlJFWTdRVUYzUkVRN096czdSVUY0U0hORGJsVTdPMmRDUVVGd1FqUjBRaXd3UWtGRFFUdEJRVU5xUW5aYUxFVkJRVUZCTEU5QlFVOHNSVUZCUlRGVUxGTkJRVk1zUTBGQlEzTkNMRWxCUkVZN1FVRkZha0ozVVN4RlFVRkJRU3hSUVVGUkxFVkJRVVU1VWl4VFFVRlRMRU5CUVVOelFpeEpRVVpJTzBGQlIycENLMUlzUlVGQlFVRXNSVUZCUlN4RlFVRkZjbFFzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZJU2p0QlFVbHFRakpITEVWQlFVRkJMRXRCUVVzc1JVRkJSWGhVTEZOQlFWTXNRMEZCUTFFc1RVRktRVHRCUVV0cVFucFFMRVZCUVVGQkxFbEJRVWtzUlVGQlJXbFFMRk5CUVZNc1EwRkJRMUVzVFVGTVF6dEJRVTFxUW5OVUxFVkJRVUZCTEZGQlFWRXNSVUZCUlRsVUxGTkJRVk1zUTBGQlEzbFBMRWxCUVZZc1EwRkJaVFZDTEZWQlRsSTdRVUZQYWtJeldTeEZRVUZCUVN4TFFVRkxMRVZCUVVVNFRDeFRRVUZUTEVOQlFVTlJMRTFCUVZZc1EwRkJhVUp4VFN4VlFWQlFPMEZCVVdwQ2JtUXNSVUZCUVVFc1NVRkJTU3hGUVVGRmMxRXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNTVUZCUkN4RlFVRlBMRWxCUVZBc1EwRkJhRUk3UVVGU1Z6czdaMEpCUkVGbmRFSXNOa0pCV1VjN1FVRkRjRUoyV2l4RlFVRkJRU3hQUVVGUExFVkJRVVVzUzBGRVZ6dEJRVVZ3UWpWQ0xFVkJRVUZCTEZGQlFWRXNSVUZCUlN4TFFVWlZPMEZCUjNCQ2NHbENMRVZCUVVGQkxFbEJRVWtzUlVGQlJUdEJRVWhqT3p0QlEyOUNWQ3hUUVVGVGN5dENMRTlCUVZRc1EwRkJhVUoySzBJc1MwRkJha0lzUlVGQkswSTdRVUZETlVNc2MwSkJRVTl2VVN4alFVRkRMRWRCUVVRN1FVRkJTeXhKUVVGQkxFOUJRVThzUlVGQlF6dEJRVUZpTEV0QlFYZENjRkVzUzBGQmVFSXNSVUZCVUR0QlFVTkVPMEZCUlVSMUswSXNUMEZCVHl4RFFVRkRPWE5DTEZOQlFWSXNSMEZCYjBJN1FVRkRiRUkxU2l4RlFVRkJRU3haUVVGWkxFVkJRVVY1U1N4dlFrRkVTVHRCUVVWc1FqTklMRVZCUVVGQkxGVkJRVlVzUlVGQlJUaElMR3RDUVVaTk8wRkJSMnhDZUVnc1JVRkJRVUVzVTBGQlV5eEZRVUZGZVVnc2FVSkJTRTg3UVVGSmJFSmFMRVZCUVVGQkxGRkJRVkVzUlVGQlJWTXNVMEZCVXl4RFFVRkRiVUlzU1VGS1JqdEJRVXRzUWk5TUxFVkJRVUZCTEZOQlFWTXNSVUZCUlhGTUxHbENRVXhQTzBGQlRXeENka1VzUlVGQlFVRXNSMEZCUnl4RlFVRkZPRVFzVTBGQlV5eERRVUZEYzBJc1NVRk9SenRCUVU5c1FqRk5MRVZCUVVGQkxFbEJRVWtzUlVGQlJTdE1MRmxCVUZrN1FVRlJiRUp5UlN4RlFVRkJRU3hOUVVGTkxFVkJRVVVyUkN4cFFrRlNWVHRCUVZOc1FqbEVMRVZCUVVGQkxHTkJRV01zUlVGQlJYRkZMSE5DUVZSRk8wRkJWMnhDTjBRc1JVRkJRVUVzVTBGQlV5eEZRVUZGYzBRc2FVSkJXRTg3UVVGWmJFSnlSQ3hGUVVGQlFTeFJRVUZSTEVWQlFVVnhSQ3hwUWtGYVVUdEJRV0ZzUW5CRUxFVkJRVUZCTEZOQlFWTXNSVUZCUlc5RUxHbENRV0pQTzBGQlkyeENia1FzUlVGQlFVRXNVVUZCVVN4RlFVRkZiVVFzYVVKQlpGRTdRVUZuUW14Q2JFUXNSVUZCUVVFc1VVRkJVU3hGUVVGRk1rUXNaMEpCYUVKUk8wRkJhMEpzUWpOT0xFVkJRVUZCTEU5QlFVOHNSVUZCUlRST0xHVkJiRUpUTzBGQmJVSnNRamxPTEVWQlFVRkJMRkZCUVZFc1JVRkJSVGhPTEdWQmJrSlJPMEZCYjBKc1FqZE9MRVZCUVVGQkxGRkJRVkVzUlVGQlJUWk9MR1ZCY0VKUk8wRkJjMEpzUW5wT0xFVkJRVUZCTEZOQlFWTXNSVUZCUlhsT0xHVkJkRUpQTzBGQmRVSnNRak5PTEVWQlFVRkJMRlZCUVZVc1JVRkJSVEpPTEdWQmRrSk5PMEZCZDBKc1FqRk9MRVZCUVVGQkxGVkJRVlVzUlVGQlJUQk9MR1ZCZUVKTk8wRkJNRUpzUW5ST0xFVkJRVUZCTEZOQlFWTXNSVUZCUlhOT0xHVkJNVUpQTzBGQk1rSnNRbmhPTEVWQlFVRkJMRlZCUVZVc1JVRkJSWGRPTEdWQk0wSk5PMEZCTkVKc1FuWk9MRVZCUVVGQkxGVkJRVlVzUlVGQlJYVk9MR1ZCTlVKTk8wRkJPRUpzUW01T0xFVkJRVUZCTEZOQlFWTXNSVUZCUlcxT0xHVkJPVUpQTzBGQkswSnNRbkpPTEVWQlFVRkJMRlZCUVZVc1JVRkJSWEZPTEdWQkwwSk5PMEZCWjBOc1FuQk9MRVZCUVVGQkxGVkJRVlVzUlVGQlJXOU9MR1ZCYUVOTk8wRkJhME5zUW5wRExFVkJRVUZCTEV0QlFVc3NSVUZCUlN0Q0xHbENRV3hEVnp0QlFXMURiRUk1UWl4RlFVRkJRU3hKUVVGSkxFVkJRVVY1UWl4VFFVRlRMRU5CUVVOelFqdEJRVzVEUlN4RFFVRndRanM3UVVONFFtVXNVMEZCVXpKelFpeEhRVUZVTEU5QlVVdzdRVUZCUVN3MlFrRlFVamN4UWl4VlFVOVJPMEZCUVVFc1RVRlFVa0VzVlVGUFVTeG5RMEZRU3l4UlFVOU1PMEZCUVVFc1RVRk9VbTFJTEZGQlRWRXNVVUZPVWtFc1VVRk5VVHRCUVVGQkxITkNRVXhTTW5WQ0xFZEJTMUU3UVVGQlFTeE5RVXhTUVN4SFFVdFJMSGxDUVV4R0xFTkJTMFU3UVVGQlFTeE5RVXBTTlhoQ0xFMUJTVkVzVVVGS1VrRXNUVUZKVVR0QlFVRkJMR2xEUVVoU1F5eGpRVWRSTzBGQlFVRXNUVUZJVWtFc1kwRkhVU3h2UTBGSVV5eFBRVWRVTzBGQlFVRXNUVUZHVWl0Q0xFdEJSVkVzVVVGR1VrRXNTMEZGVVR0QlFVRkJMRTFCUkV3MmRrSXNTVUZEU3pzN1FVRkRVaXh6UWtGRFJYUjFRaXhqUVVGRExFZEJRVVE3UVVGRFJTeEpRVUZCTEUxQlFVMHNSVUZCUlhaRUxFMUJSRlk3UVVGRlJTeEpRVUZCTEZkQlFWY3NSVUZCUlRSNFFpeEhRVUZITEVkQlFVY3NRMEZCUTBFc1IwRkJTaXhIUVVGVkxFTkJSalZDTzBGQlIwVXNTVUZCUVN4VFFVRlRMRVZCUVVWQkxFZEJRVWNzUjBGQlJ5eERRVUZEUVN4SFFVRktMRWRCUVZVc1EwRklNVUk3UVVGSlJTeEpRVUZCTEV0QlFVc3NSVUZCUlRWMlFqdEJRVXBVTEd0Q1FVMUZkVUlzWTBGQlF5eFBRVUZFTzBGQlEwVXNTVUZCUVN4VlFVRlZMRVZCUVVWNlNDeFZRVVJrTzBGQlJVVXNTVUZCUVN4VFFVRlRMRVZCUVVNc1MwRkdXanRCUVVkRkxFbEJRVUVzVFVGQlRTeEZRVUZGYTBVc1RVRklWanRCUVVsRkxFbEJRVUVzWTBGQll5eEZRVUZGUXl4alFVcHNRanRCUVV0RkxFbEJRVUVzUzBGQlN5eEZRVUZGSzBJN1FVRk1WQ3hMUVUxTk5uWkNMRWxCVGs0c1IwRlJSemwxUWl4UlFVRkJMRU5CUVdVNVVDeEhRVUZtTEVOQlFXMUNaMUVzVVVGQmJrSXNSVUZCTmtJc1ZVRkJRVFoxUWl4TFFVRkxPMEZCUVVFc2QwSkJRMnBEZG5WQ0xHTkJRVU1zUjBGQlJEdEJRVUZMTEUxQlFVRXNVVUZCVVN4RlFVRkZjWFZDTzBGQlFXWXNUMEZCY1VKRkxFdEJRWEpDTEVOQlJHbERPMEZCUVVFc1IwRkJiRU1zUTBGU1NDeERRVTVHTEVOQlJFWTdRVUZ4UWtRN1FVRkZSRWdzUjBGQlJ5eERRVUZETDNOQ0xGTkJRVW9zUjBGQlowSTdRVUZEWkRWS0xFVkJRVUZCTEZsQlFWa3NSVUZCUlhsSkxHOUNRVVJCTzBGQlJXUXpTQ3hGUVVGQlFTeFZRVUZWTEVWQlFVVTRTQ3hyUWtGR1JUdEJRVWRrZUVnc1JVRkJRVUVzVTBGQlV5eEZRVUZGZVVnc2FVSkJTRWM3UVVGSlpGb3NSVUZCUVVFc1VVRkJVU3hGUVVGRlV5eFRRVUZUTEVOQlFVTnRRaXhKUVVwT08wRkJTMlIyVFN4RlFVRkJRU3hKUVVGSkxFVkJRVVVyVEN4WlFVeFJPMEZCVFdSMWRFSXNSVUZCUVVFc1IwRkJSeXhGUVVGRmJuUkNMR1ZCVGxNN1FVRlBaSHBGTEVWQlFVRkJMRTFCUVUwc1JVRkJSU3RFTEdsQ1FWQk5PMEZCVVdRNVJDeEZRVUZCUVN4alFVRmpMRVZCUVVWeFJTeHpRa0ZTUmp0QlFWTmtOMFFzUlVGQlFVRXNVMEZCVXl4RlFVRkZjMFFzYVVKQlZFYzdRVUZWWkhKRUxFVkJRVUZCTEZGQlFWRXNSVUZCUlhGRUxHbENRVlpKTzBGQlYyUndSQ3hGUVVGQlFTeFRRVUZUTEVWQlFVVnZSQ3hwUWtGWVJ6dEJRVmxrYmtRc1JVRkJRVUVzVVVGQlVTeEZRVUZGYlVRc2FVSkJXa2s3UVVGaFpHeEVMRVZCUVVGQkxGRkJRVkVzUlVGQlJUSkVMR2RDUVdKSk8wRkJZMlI0UXl4RlFVRkJRU3hMUVVGTExFVkJRVVVyUWl4cFFrRmtUenRCUVdWa09VSXNSVUZCUVVFc1NVRkJTU3hGUVVGRmVVSXNVMEZCVXl4RFFVRkRjMEk3UVVGbVJpeERRVUZvUWpzN1NVTXZRM0ZDSzNOQ096czdPenM3T3pzN096czdPenM3TzNGRlFVbEdlRW9zVVVGQlVTeERRVUZETEZsQlFVMDdRVUZET1VJc1dVRkJTek5KTEZGQlFVd3NRMEZCWXl4TlFVRkxiMU1zWTBGQlRDeEZRVUZrTzBGQlEwUXNTMEZHZDBJN096UkVRWE5DYWtJN1FVRkRUblpMTEUxQlFVRkJMR1ZCUVdVc1JVRkJSU3hEUVVSWU8wRkJSVTVKTEUxQlFVRkJMRmxCUVZrc1JVRkJSU3hEUVVaU08wRkJSMDUyUnl4TlFVRkJRU3hUUVVGVExFVkJRVVU3UVVGSVREczdjMFZCYVVOVkxGbEJRVTA3UVVGQlFTeFZRVU5rWkN4VFFVUmpMRWRCUTBFc1RVRkJTM0owUWl4TFFVUk1MRU5CUTJSeGRFSXNVMEZFWXpzN1FVRkZkRUlzVlVGQlNTeERRVUZEUVN4VFFVRk1MRVZCUVdkQ08wRkJRMlFzWlVGQlR5eERRVUZRTzBGQlEwUTdPMEZCUTBRc1lVRkJUelJKTEdWQlFXVXNRMEZCUXpWSkxGTkJRVVFzUTBGQmRFSTdRVUZEUkRzN096czdPenM3UVVGcVEwUTdPenQzUTBGSGIwSTdRVUZCUVRzN1FVRkJRU3hWUVVOV1FTeFRRVVJWTEVkQlEwa3NTMEZCUzNKMFFpeExRVVJVTEVOQlExWnhkRUlzVTBGRVZUczdRVUZGYkVJc1ZVRkJTU3hEUVVGRFFTeFRRVUZNTEVWQlFXZENPMEZCUTJRN1FVRkRSRHM3UVVGRFJGUXNUVUZCUVVFc1ZVRkJWU3hEUVVGRExGbEJRVTA3UVVGRFppeFJRVUZCTEUxQlFVa3NRMEZCUTBnc1VVRkJURHRCUVVORk5rZ3NWVUZCUVVFc1pVRkJaU3hGUVVGRmQwSXNaMEpCUVdkQ0xFTkJRVU42U1N4VFFVRkVPMEZCUkc1RExGZEJSVXNzVFVGQlNTeERRVUZEZDFJc1kwRkJUQ3hGUVVaTU8wRkJTVVFzVDBGTVV5eERRVUZXTzBGQlRVUTdRVUZGUkRzN096czdPM2xEUVVkeFFqdEJRVU51UWp0QlFVTkJMRmRCUVV0RExHTkJRVXc3UVVGRFJEdEJRVVZFT3pzN096czdjVU5CVjJsQ08wRkJRVUVzZDBKQlEzRkNMRXRCUVVzNUswSXNTMEZFTVVJN1FVRkJRU3hWUVVOUWNYUkNMRk5CUkU4c1pVRkRVRUVzVTBGRVR6dEJRVUZCTEZWQlEwa3dVaXhaUVVSS0xHVkJRMGxCTEZsQlJFbzdPMEZCUldZc1ZVRkJTU3hEUVVGRE1WSXNVMEZCVEN4RlFVRm5RanRCUVVOa0xHVkJRVThzU1VGQlVEdEJRVU5FT3p0QlFVTkVMRlZCUVUxeFNDeFpRVUZaTEVkQlFVZHhTeXhaUVVGWkxFbEJRVWtzUzBGQlN6bEpMR1ZCUVRGRE8wRkJSVUVzWVVGQlR6dEJRVU5NZGtJc1VVRkJRVUVzV1VGQldTeEZRVUZGUVN4WlFVRlpMRVZCUkhKQ08wRkJSVXgyUnl4UlFVRkJRU3hUUVVGVExFVkJRVVVyU0N4WlFVRlpMRU5CUVVNM1NTeFRRVUZFTzBGQlJteENMRTlCUVZBN1FVRkpSRHM3T3paQ1FVVlJPMEZCUVVFc2QwSkJRemhETEV0QlFVdGlMRXRCUkc1RU8wRkJRVUVzVlVGRFF6aElMR1ZCUkVRc1pVRkRRMEVzWlVGRVJEdEJRVUZCTEZWQlEydENTU3haUVVSc1FpeGxRVU5yUWtFc1dVRkViRUk3UVVGQlFTeFZRVU5uUTNaSExGTkJSR2hETEdWQlEyZERRU3hUUVVSb1F6dEJRVUZCTEhsQ1FVVXJReXhMUVVGTGJuVkNMRXRCUm5CRU8wRkJRVUVzVlVGRlEzRjBRaXhUUVVaRUxHZENRVVZEUVN4VFFVWkVPMEZCUVVFc1ZVRkZXVzlJTEZOQlJsb3NaMEpCUlZsQkxGTkJSbG83UVVGQlFTeFZRVVYxUWtZc1QwRkdka0lzWjBKQlJYVkNRU3hQUVVaMlFqdEJRVUZCTEZWQlJXZERReXhWUVVab1F5eG5Ra0ZGWjBOQkxGVkJSbWhETzBGQlNWQXNWVUZCVFhnd1FpeExRVUZMTEVkQlFVYzdRVUZEV25Nd1FpeFJRVUZCUVN4bFFVRmxMRVZCUVdaQkxHVkJSRms3UVVGRldrY3NVVUZCUVVFc1UwRkJVeXhGUVVGVVFTeFRRVVpaTzBGQlIxcEdMRkZCUVVGQkxFOUJRVThzUlVGQlVFRXNUMEZJV1R0QlFVbGFReXhSUVVGQlFTeFZRVUZWTEVWQlFWWkJMRlZCU2xrN1FVRkxXa1VzVVVGQlFVRXNXVUZCV1N4RlFVRmFRU3haUVV4Wk8wRkJUVnAyUnl4UlFVRkJRU3hUUVVGVExFVkJRVlJCTzBGQlRsa3NUMEZCWkRzN1FVRlRRU3hWUVVGSkxFTkJRVU5rTEZOQlFVUXNTVUZCWTJ0SUxFOUJRV3hDTEVWQlFUSkNPMEZCUTNwQ0xHVkJRVThzU1VGQlVEdEJRVU5FT3p0QlFVTkVMREJDUVVORmJtdENMR05CUVVNc1pVRkJSRHRCUVVORkxGRkJRVUVzVVVGQlVTeEZRVUZGTEV0QlFVc3dkVUlzWTBGRWFrSTdRVUZGUlN4UlFVRkJMR1ZCUVdVc1JVRkJSWHBTTzBGQlJtNUNMSE5DUVVsRmFtUXNZMEZCUXl4VlFVRkVMRVZCUVdkQ2NGRXNTMEZCYUVJc1EwRktSaXhEUVVSR08wRkJVVVE3T3pzN1JVRjRSM05ETkZBN08yZENRVUZ3UW1kMlFpd3dRa0ZSUVR0QlFVTnFRanM3TzBGQlIwRjJVaXhGUVVGQlFTeFRRVUZUTEVWQlFVVTVZeXhUUVVGVExFTkJRVU00VFN4TFFVRldMRU5CUVdkQ08wRkJRM3BDTUZBc1NVRkJRVUVzWjBKQlFXZENMRVZCUVVWNFl5eFRRVUZUTEVOQlFVTjVUeXhKUVVSSU8wRkJSWHBDWjA4c1NVRkJRVUVzYlVKQlFXMUNMRVZCUVVWNll5eFRRVUZUTEVOQlFVTjVUenRCUVVaT0xFZEJRV2hDTEVOQlNrMDdRVUZSYWtJclppeEZRVUZCUVN4WlFVRlpMRVZCUVVWNGRVSXNVMEZCVXl4RFFVRkRlVThzU1VGU1VEdEJRVk5xUW5WV0xFVkJRVUZCTEU5QlFVOHNSVUZCUldoclFpeFRRVUZUTEVOQlFVTnpRaXhKUVZSR08wRkJWV3BDTW1sQ0xFVkJRVUZCTEZWQlFWVXNSVUZCUldwclFpeFRRVUZUTEVOQlFVTnpRaXhKUVZaTU8wRkJWMnBDTkdsQ0xFVkJRVUZCTEZOQlFWTXNSVUZCUld4clFpeFRRVUZUTEVOQlFVTjVUenRCUVZoS096dG5Ra0ZTUVRSbUxEWkNRWE5DUnp0QlFVTndRblpTTEVWQlFVRkJMRk5CUVZNc1JVRkJSU3hQUVVGUGVGQXNUVUZCVUN4TFFVRnJRaXhYUVVGc1FpeEhRVUZuUTBFc1RVRkJhRU1zUjBGQmVVTllPMEZCUkdoRE96czdPMGxEWmtnNGFFSTdPenM3T3pzN096czdPenM3T3pzN05FUkJZVmc3UVVGRFRucGhMRTFCUVVGQkxFOUJRVThzUlVGQlJTeExRVVJJTzBGQlJVNXlRaXhOUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZHU0RzN2JVVkJTMDhzVlVGQlEwWXNTMEZCUkN4RlFVRTJRenRCUVVGQkxGVkJRMnhFY1VJc1VVRkVhMFFzUjBGRGNrTXNUVUZCUzNKclFpeExRVVJuUXl4RFFVTnNSSEZyUWl4UlFVUnJSRHRCUVVVeFJFRXNUVUZCUVVFc1VVRkJVU3hEUVVGRE8wRkJRMUExWml4UlFVRkJRU3hMUVVGTExFVkJRVVYxWlN4TFFVRkxMRU5CUVVNNFFpeGhRVUZPTEVOQlFXOUNjbWRDTEV0QlJIQkNPMEZCUlZCM05rSXNVVUZCUVVFc1kwRkJZeXhGUVVGRmFtTTdRVUZHVkN4UFFVRkVMRU5CUVZJN1FVRkpSRHM3YTBWQlJXRXNWVUZCUTBFc1MwRkJSQ3hGUVVFMlF6dEJRVUZCTEZWQlEycEVjVUlzVVVGRWFVUXNSMEZEY0VNc1RVRkJTM0pyUWl4TFFVUXJRaXhEUVVOcVJIRnJRaXhSUVVScFJEdEJRVVY2UkVFc1RVRkJRVUVzVVVGQlVTeERRVUZETzBGQlFVVTFaaXhSUVVGQlFTeExRVUZMTEVWQlFVVXNSVUZCVkR0QlFVRmhkelpDTEZGQlFVRkJMR05CUVdNc1JVRkJSV3BqTzBGQlFUZENMRTlCUVVRc1EwRkJVanRCUVVORU96dDFSVUZGYTBJN1FVRkJRU3hoUVVGTkxFMUJRVXQ1U2l4UlFVRk1MRU5CUVdNN1FVRkJSWFpLTEZGQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVGWUxFOUJRV1FzUTBGQlRqdEJRVUZCT3p0MVJVRkZRVHRCUVVGQkxHRkJRVTBzVFVGQlMzVktMRkZCUVV3c1EwRkJZenRCUVVGRmRrb3NVVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJRVmdzVDBGQlpDeERRVUZPTzBGQlFVRTdPMnRGUVVWTUxGVkJRVU5HTEV0QlFVUXNSVUZCTmtNN1FVRkJRU3hWUVVOcVJHdGpMRTlCUkdsRUxFZEJRM0pETEUxQlFVdHNMMElzUzBGRVowTXNRMEZEYWtSckwwSXNUMEZFYVVRN08wRkJSWHBFTEZsQlFVdDZVeXhSUVVGTUxFTkJRV003UVVGQlJXeEpMRkZCUVVGQkxFOUJRVThzUlVGQlJUdEJRVUZZTEU5QlFXUTdPMEZCUlVFc1ZVRkJTVEpoTEU5QlFVb3NSVUZCWVR0QlFVTllRU3hSUVVGQlFTeFBRVUZQTEVOQlFVTTdRVUZEVG5vMlFpeFZRVUZCUVN4TFFVRkxMRVZCUVVWMVpTeExRVUZMTEVOQlFVTTRRaXhoUVVGT0xFTkJRVzlDY21kQ0xFdEJSSEpDTzBGQlJVNTNOa0lzVlVGQlFVRXNZMEZCWXl4RlFVRkZhbU03UVVGR1ZpeFRRVUZFTEVOQlFWQTdRVUZKUkR0QlFVTkdPenRwUlVGRldTeFZRVUZEUVN4TFFVRkVMRVZCUVRaRE8wRkJRVUVzVlVGRGFFUnRZeXhOUVVSblJDeEhRVU55UXl4TlFVRkxiaTlDTEV0QlJHZERMRU5CUTJoRWJTOUNMRTFCUkdkRU96dEJRVVY0UkN4WlFVRkxNVk1zVVVGQlRDeERRVUZqTzBGQlFVVnNTU3hSUVVGQlFTeFBRVUZQTEVWQlFVVTdRVUZCV0N4UFFVRmtPenRCUVVWQkxGVkJRVWswWVN4TlFVRktMRVZCUVZrN1FVRkRWa0VzVVVGQlFVRXNUVUZCVFN4RFFVRkRPMEZCUVVWdVl5eFZRVUZCUVN4TFFVRkxMRVZCUVV4Qk8wRkJRVVlzVTBGQlJDeERRVUZPTzBGQlEwUTdRVUZEUmpzN096czdPenMyUWtGRlVUdEJRVUZCT3p0QlFVRkJMSGRDUVZGSUxFdEJRVXRvYWtJc1MwRlNSanRCUVVGQkxGVkJSVXgxWXl4clFrRkdTeXhsUVVWTVFTeHJRa0ZHU3p0QlFVRkJMRlZCUjB3MmFVSXNXVUZJU3l4bFFVZE1RU3haUVVoTE8wRkJRVUVzVlVGSlRIaGlMRVZCU2tzc1pVRkpURUVzUlVGS1N6dEJRVUZCTEZWQlMweDVZaXhYUVV4TExHVkJTMHhCTEZkQlRFczdRVUZCUVN4NVEwRk5USEF2UWl4SlFVNUxPMEZCUVVFc1ZVRk5URUVzU1VGT1N5eHBRMEZOUlN4SlFVNUdPMEZCUVVFc1ZVRlBUSGRGTEV0QlVFc3NaVUZQVEVFc1MwRlFTenRCUVVGQkxIZENRVlZ6UWl4TFFVRkxLMjVDTEV0QlZqTkNPMEZCUVVFc1ZVRlZRMnBKTEU5QlZrUXNaVUZWUTBFc1QwRldSRHRCUVVGQkxGVkJWVlZ5UWl4UFFWWldMR1ZCVlZWQkxFOUJWbFk3UVVGWlVDeFZRVUZOYjJNc1VVRkJVU3hIUVVGSE56WkNMRXRCUVVzc1NVRkJTVUVzUzBGQlN5eERRVUZEYmtVc1RVRkJUaXhIUVVGbExFTkJRWHBETzBGQlEwRXNWVUZCVFdrdlFpeGpRVUZqTEVkQlFVZG9ZaXhQUVVGUExFbEJRVWtyWVN4UlFVRnNRenRCUVVWQkxGVkJRVTE2WjBNc1UwRkJVeXhIUVVGSEsyUXNWVUZCVlN4RFFVRkRlR1FzVVVGQlRTeERRVUZEZVcxQ0xFdEJRVklzYTBSQlEzcENPV1FzVFVGQlRTeERRVUZEZVROQ0xFMUJSR3RDTEVWQlExUjJMMElzU1VGQlNTeExRVUZMTEVsQlJFRXNaME5CUlhwQ09FZ3NUVUZCVFN4RFFVRkRNRE5DTEV0QlJtdENMRVZCUlZaNEwwSXNTVUZCU1N4TFFVRkxMRWxCUmtNc1owTkJSM3BDWWl4UlFVRk5MRU5CUVVOelowTXNWMEZJYTBJc1JVRkhTbTVpTEU5QlFVOHNTVUZCU1N0aExGRkJTRkFzWjBOQlNYcENiR2RETEZGQlFVMHNRMEZCUTNWblF5eFpRVXByUWl4RlFVbEllbU1zVDBGS1J5eG5Ra0ZCTlVJN1FVRlBRU3hWUVVGTk1HTXNaVUZCWlN4SFFVRkhNeTlDTEVsQlFVa3NTMEZCU3l4SlFVRlVMRWRCUVdkQ0xFVkJRV2hDTEVkQlFYRkNMRVZCUVRkRE8wRkJRMEVzVlVGQlRUUXZRaXhoUVVGaExFZEJRVWMxTDBJc1NVRkJTU3hMUVVGTExFbEJRVlFzUjBGQlowSXNSVUZCYUVJc1IwRkJjVUlzUlVGQk0wTTdRVUZGUVN3d1FrRkRSVEpRTERaQ1FVRkRMRWRCUVVRN1FVRkRSU3hSUVVGQkxGVkJRVlVzUlVGQlF5eFJRVVJpTzBGQlJVVXNVVUZCUVN4UFFVRlBMRVZCUVVNc1RVRkdWanRCUVVkRkxGRkJRVUVzV1VGQldTeEZRVUZGTEV0QlFVc3lWQ3huUWtGSWNrSTdRVUZKUlN4UlFVRkJMRmxCUVZrc1JVRkJSU3hMUVVGTFF5eG5Ra0ZLY2tJN1FVRkxSU3hSUVVGQkxFOUJRVThzUlVGQlJTeExRVUZMYlZrc1YwRk1hRUk3UVVGTlJTeFJRVUZCTEUxQlFVMHNSVUZCUlN4TFFVRkxNa01zVlVGT1pqdEJRVTlGTEZGQlFVRXNVVUZCVVN4RlFVRkRPMEZCVUZnc1UwRlRSeXhEUVVGRGFVSXNZMEZCUkN4cFFrRkRRek4yUWl3MlFrRkJReXhIUVVGRU8wRkJRMFVzVVVGQlFTeDVRa0ZCZVVJc1JVRkJSVHRCUVVONlFsZ3NWVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJRMUEyZDBJc1dVRkJRVUVzWVVGQllTeEZRVUZGTEUxQlJGSTdRVUZGVUR0QlFVTkJibmhDTEZsQlFVRkJMRWRCUVVjc1JVRkJSU3hMUVVoRk8wRkJTVkJuY1VJc1dVRkJRVUVzVTBGQlV5eEZRVUZGTzBGQlNrbzdRVUZFWjBJc1UwRkVOMEk3UVVGVFJTeFJRVUZCTEVsQlFVa3NUVUZVVGp0QlFWVkZMRkZCUVVFc1VVRkJVU3hGUVVGRkxFTkJWbG83UVVGWFJTeFJRVUZCTEZGQlFWRXNSVUZCUXp0QlFWaFlMSE5DUVdGRkwyOUNMRFpDUVVGRExFbEJRVVE3UVVGQlRTeFJRVUZCTEVsQlFVa3NSVUZCUXl4UlFVRllPMEZCUVc5Q0xGRkJRVUVzYTBKQlFXdENMRVZCUVVNN1FVRkJka01zVVVGaVJpeERRVlpLTEdWQk1FSkZRVHRCUVVORkxITkNRVUZaTWswc2EwSkJSR1E3UVVGRlJTeFJRVUZCTEZsQlFWa3NSVUZCUlRacFFpeFpRVVpvUWp0QlFVZEZMRkZCUVVFc1UwRkJVeXhGUVVGRmRtZERMRk5CU0dJN1FVRkpSU3hSUVVGQkxFVkJRVVVzUlVGQlJTdHJRaXhGUVVwT08wRkJTMFVzVVVGQlFTeFJRVUZSTEVWQlFVVXNTMEZCUzJVc1dVRk1ha0k3UVVGTlJTeFJRVUZCTEZkQlFWY3NSVUZCUlRCaExGZEJUbVk3UVVGUFJTeFJRVUZCTEVsQlFVa3NSVUZCUXl4WFFWQlFPMEZCVVVVc1VVRkJRU3hKUVVGSkxFVkJRVU1zVVVGU1VEdEJRVk5GTEZGQlFVRXNTMEZCU3l4RlFVRkZOVFpDTzBGQlZGUXNVVUV4UWtZc1JVRnhRMGMyTmtJc1VVRkJVU3hwUWtGRFVERjJRanRCUVVORkxGRkJRVUVzVTBGQlV5eEZRVUZGZUZFc1VVRkJUU3hEUVVGRGJWWXNTMEZFY0VJN1FVRkZSU3hSUVVGQkxFOUJRVThzUlVGQlJTeExRVUZMZDNKQ0xGZEJSbWhDTzBGQlIwVXNVVUZCUVN4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVoaU8wRkJTVVVzVVVGQlFTeEpRVUZKTEVWQlFVTTdRVUZLVUN4elFrRk5SVzUzUWl3MlFrRkJReXhIUVVGRU8wRkJRMFVzVVVGQlFTeFZRVUZWTEVWQlFVTXNVVUZFWWp0QlFVVkZMRkZCUVVFc1MwRkJTeXhGUVVGRk1sVXNUMEZCVHl4SFFVRkhMRlZCUVVnc1IwRkJaMElzWVVGR2FFTTdRVUZIUlN4UlFVRkJMRTlCUVU4c1JVRkJReXhOUVVoV08wRkJTVVVzVVVGQlFTeE5RVUZOTEVWQlFVVnhZaXhsUVVwV08wRkJTMFVzVVVGQlFTeGpRVUZqTEVWQlFVTXNVVUZNYWtJN1FVRk5SU3hSUVVGQkxGRkJRVkVzUlVGQlF5eFJRVTVZTzBGQlQwVXNVVUZCUVN4TFFVRkxMRVZCUVVWQk8wRkJVRlFzYzBKQlUwVm9kMElzTmtKQlFVTXNTVUZCUkR0QlFVTkZMRkZCUVVFc2EwSkJRV3RDTEVWQlFVTXNSVUZFY2tJN1FVRkZSU3hSUVVGQkxFdEJRVXNzUlVGQlJUSlZMRTlCUVU4c1IwRkJSeXhQUVVGSUxFZEJRV0VzVlVGR04wSTdRVUZIUlN4UlFVRkJMRWxCUVVrc1JVRkJReXhSUVVoUU8wRkJTVVVzVVVGQlFTeEpRVUZKTEVWQlFVVnpZanRCUVVwU0xGRkJWRVlzUTBGT1JpeERRWFJEU2l4RFFVUkdPMEZCYVVWRU96czdPMFZCYkVwelEycDNRaXhqUVVGTExFTkJRVU5yYjBJN08yZENRVUV4UW10SUxEQkNRVU5CTzBGQlEycENlbWxDTEVWQlFVRkJMR3RDUVVGclFpeEZRVUZGYUUwc1UwRkJVeXhEUVVGRFVTeE5RVUZXTEVOQlFXbENjVTBzVlVGRWNFSTdRVUZGYWtKbmFVSXNSVUZCUVVFc1dVRkJXU3hGUVVGRk4zVkNMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRWxCUVVRc1JVRkJUeXhMUVVGUUxFVkJRV01zVlVGQlpDeEZRVUV3UWl4TlFVRXhRaXhEUVVGb1FpeERRVVpITzBGQlIycENiMVFzUlVGQlFVRXNSVUZCUlN4RlFVRkZjbFFzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZJU2p0QlFVbHFRaXRvUWl4RlFVRkJRU3hOUVVGTkxFVkJRVVUxZFVJc1UwRkJVeXhEUVVGRGVVOHNTVUZLUkR0QlFVdHFRbkZHTEVWQlFVRkJMRkZCUVZFc1JVRkJSVGxVTEZOQlFWTXNRMEZCUTNsUExFbEJRVllzUTBGQlpUVkNMRlZCVEZJN1FVRk5ha0k0YUVJc1JVRkJRVUVzVDBGQlR5eEZRVUZGTTNWQ0xGTkJRVk1zUTBGQlEzbFBMRWxCVGtZN1FVRlBha0p4WjBJc1JVRkJRVUVzVjBGQlZ5eEZRVUZGT1hWQ0xGTkJRVk1zUTBGQlExRXNUVUZRVGp0QlFWRnFRamxSTEVWQlFVRkJMRWxCUVVrc1JVRkJSWE5STEZOQlFWTXNRMEZCUTBNc1MwRkJWaXhEUVVGblFpeERRVUZETEVsQlFVUXNSVUZCVHl4SlFVRlFMRU5CUVdoQ0xFTkJVbGM3UVVGVGFrSXZUQ3hGUVVGQlFTeExRVUZMTEVWQlFVVTRUQ3hUUVVGVExFTkJRVU5STzBGQlZFRTdPenM3UVVOcVFrNHNVMEZCVTJsMlFpeG5Ra0ZCVkN4RFFVRXdRbWhuUXl4TFFVRXhRaXhGUVVGM1F6dEJRVUZCTEUxQlF6ZERkMjFDTEV0QlJEWkRMRWRCUTIxQ2VHMUNMRXRCUkc1Q0xFTkJRemREZDIxQ0xFdEJSRFpETzBGQlFVRXNUVUZEZEVOdVF5eFJRVVJ6UXl4SFFVTnRRbkpyUWl4TFFVUnVRaXhEUVVOMFEzRnJRaXhSUVVSelF6dEJRVUZCTEUxQlF6VkNOR0lzVlVGRU5FSXNSMEZEYlVKcVowTXNTMEZFYmtJc1EwRkROVUpwWjBNc1ZVRkVORUk3UVVGQlFTeE5RVU5vUWtNc2FVSkJSR2RDTEVkQlEyMUNiR2RETEV0QlJHNUNMRU5CUTJoQ2EyZERMR2xDUVVSblFqdEJRVUZCTEc5Q1FVTnRRbXhuUXl4TFFVUnVRaXhEUVVOSFF5eEpRVVJJTzBGQlFVRXNUVUZEUjBFc1NVRkVTQ3cwUWtGRFZTeEpRVVJXTzBGQlJYSkVMRTFCUVUxclowTXNWMEZCVnl4SFFVRkhSaXhWUVVGVkxFZEJRekZDTDJsQ0xGTkJSREJDTEdGQlJYWkNhbU1zU1VGQlNTeERRVUZETWpGQ0xFdEJRVXdzUTBGQlZ5eE5RVUZOTXpGQ0xFbEJRVWtzUTBGQlEyMXNRaXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaU1N4TFFVRkxMRU5CUVVOc2JVSXNUVUZCYkVJc1EwRkJha0lzUTBGR2RVSXNUVUZCT1VJN1FVRkhRU3h6UWtGRFJUaFFPMEZCUTBVc1NVRkJRU3hUUVVGVExFVkJRVVYzVFN4VlFVRlZMRU5CUTI1Q2VHUXNVVUZCVFN4RFFVRkROR2RETEdkQ1FVUlpMRVZCUlc1Q0x5OUNMRWxCUVVrc1MwRkJTeXhKUVVGVUxFZEJRV2RDT0Vnc1RVRkJUU3hEUVVGRGVUTkNMRTFCUVhaQ0xFZEJRV2REZWpOQ0xFMUJRVTBzUTBGQlF6QXpRaXhMUVVad1FpeERRVVIyUWp0QlFVdEZMRWxCUVVFc1NVRkJTU3hGUVVGRE8wRkJURkFzUzBGUFIycGFMRXRCUVVzc1EwRkJRekZ0UWl4SFFVRk9MRU5CUVZVc1ZVRkJRM1Z0UWl4SlFVRkVMRVZCUVU5cFFpeERRVUZRTEVWQlFXRTdRVUZCUVRzN1FVRkRkRUlzVVVGQlRUaFpMRlZCUVZVc1IwRkJSemxaTEVOQlFVTXNTMEZCU3pSWkxHbENRVUY2UWp0QlFVTkJMRkZCUVUxMmFrSXNSVUZCUlN4SFFVRkhReXhWUVVGVkxFTkJRVU40WkN4UlFVRk5MRU5CUVVOcGJrSXNTVUZCVWl4clJFRkRiRUpxYmtJc1VVRkJUU3hEUVVGRGFXaERMR2xDUVVSWExFVkJRMU1zUTBGQlEwUXNWVUZFVml4blEwRkZiRUpvYUVNc1VVRkJUU3hEUVVGRGEyaERMR05CUmxjc1JVRkZUVVlzVlVGR1RpeG5Ra0ZCY2tJN1FVRkpRU3gzUWtGRFJXaDNRanRCUVVORkxIVkNRVUZsWjNkQ0xGVkJSR3BDTzBGQlJVVXNUVUZCUVN4VFFVRlRMRVZCUVVWNmFrSXNSVUZHWWp0QlFVZEZMRTFCUVVFc1IwRkJSeXhGUVVGRk1rc3NRMEZJVUR0QlFVbEZMRTFCUVVFc1QwRkJUeXhGUVVGRkxHbENRVUZCZEVVc1MwRkJTenRCUVVGQkxHVkJRVWx4UWl4UlFVRlJMRU5CUVVNN1FVRkJSWEpDTEZWQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGQlJqdEJRVUZUZFdRc1ZVRkJRVUVzVjBGQlZ5eEZRVUZGYWxvN1FVRkJkRUlzVTBGQlJDeERRVUZhTzBGQlFVRXNUMEZLYUVJN1FVRkxSU3hOUVVGQkxFbEJRVWtzUlVGQlF5eExRVXhRTzBGQlRVVXNUVUZCUVN4SlFVRkpMRVZCUVVNc1VVRk9VRHRCUVU5RkxFMUJRVUVzUzBGQlN5eEZRVUZGTzBGQlFVVjZXU3hSUVVGQlFTeExRVUZMTEVWQlFVVnplRUk3UVVGQlZEdEJRVkJVTEU5QlUwY3NUMEZCVHpsYUxFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1owSkJRME5xVnl4alFVRkRMRWxCUVVRN1FVRkRSU3hOUVVGQkxFdEJRVXNzUlVGQlJXZDNRaXhWUVVGVkxFZEJRVWNzVlVGQlNDeEhRVUZuUWl4TlFVUnVRenRCUVVWRkxFMUJRVUVzUzBGQlN5eEZRVUZETEZGQlJsSTdRVUZIUlN4TlFVRkJMRWxCUVVrc1JVRkJSVzVuUXl4SlFVaFNPMEZCU1VVc1RVRkJRU3hOUVVGTkxFVkJRVU03UVVGS1ZDeFBRVTFIYjIxQ0xFbEJUa2dzUTBGRVJDeG5Ra0ZWUTJwWExHTkJRVU1zUjBGQlJEdEJRVUZMTEUxQlFVRXNUMEZCVHl4RlFVRkRMRTFCUVdJN1FVRkJiMElzVFVGQlFTeGpRVUZqTEVWQlFVTTdRVUZCYmtNc1QwRkRSMmxYTEVsQlJFZ3NRMEZ1UWtvc1EwRkVSanRCUVRCQ1JDeEhRV2hEUVN4RFFWQklMRU5CUkVZN1FVRXlRMFE3UVVGRlJESmFMR2RDUVVGblFpeERRVUZEZG5WQ0xGTkJRV3BDTEVkQlFUWkNPMEZCUXpOQ0sxVXNSVUZCUVVFc1MwRkJTeXhGUVVGRmFsY3NVMEZCVXl4RFFVRkRjMUVzVDBGQlZpeERRVUZyUW5SUkxGTkJRVk1zUTBGQlEyMUNMRWxCUVRWQ0xFVkJRV3RETUV3c1ZVRkVaRHRCUVVVelFtbElMRVZCUVVGQkxGRkJRVkVzUlVGQlJUbFVMRk5CUVZNc1EwRkJRM2xQTEVsQlFWWXNRMEZCWlRWQ0xGVkJSa1U3UVVGSE0wSTJhVUlzUlVGQlFVRXNWVUZCVlN4RlFVRkZNWFpDTEZOQlFWTXNRMEZCUTNOQ0xFbEJTRXM3UVVGSk0wSnhkVUlzUlVGQlFVRXNhVUpCUVdsQ0xFVkJRVVV6ZGtJc1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDBzVlVGS1ZEdEJRVXN6UW01a0xFVkJRVUZCTEVsQlFVa3NSVUZCUlhOUkxGTkJRVk1zUTBGQlEwTXNTMEZCVml4RFFVRm5RaXhEUVVGRExFbEJRVVFzUlVGQlR5eEpRVUZRTEVOQlFXaENPMEZCVEhGQ0xFTkJRVGRDT3pzN08wRkROVVJsTEZOQlFWTm5kMElzWTBGQlZDeFBRVUZ6UkR0QlFVRkJMRTFCUVRWQ2VtWXNTVUZCTkVJc1VVRkJOVUpCTEVsQlFUUkNPMEZCUTI1RkxITkNRVU5GTTFFc1kwRkJReXhIUVVGRU8wRkJRVXNzU1VGQlFTeFRRVUZUTEVWQlFVVTdRVUZCYUVJc2EwSkJRMFZCTEdOQlFVTXNTVUZCUkR0QlFVRk5MRWxCUVVFc1MwRkJTeXhGUVVGRExFMUJRVm83UVVGQmJVSXNTVUZCUVN4SlFVRkpMRVZCUVVNN1FVRkJlRUlzUzBGRFJ6SlJMRWxCUkVnc1EwRkVSaXhEUVVSR08wRkJUMFE3UVVGRlJIbG1MR05CUVdNc1EwRkJReTkxUWl4VFFVRm1MRWRCUVRKQ08wRkJRM3BDYzFBc1JVRkJRVUVzU1VGQlNTeEZRVUZGZUZFc1UwRkJVeXhEUVVGRFVTeE5RVUZXTEVOQlFXbENjVTA3UVVGRVJTeERRVUV6UWpzN096dEJRMVJsTEZOQlFWTnhha0lzVTBGQlZDeFBRVTFZTzBGQlFVRXNUVUZNUmpkakxFVkJTMFVzVVVGTVJrRXNSVUZMUlR0QlFVRkJMRTFCU2taSExFdEJTVVVzVVVGS1JrRXNTMEZKUlR0QlFVTkdMSE5DUVVORk0xUXNZMEZCUXl4TFFVRkVPMEZCUVU4c1NVRkJRU3hQUVVGUExFVkJRVVYzVkR0QlFVRm9RaXhyUWtGRFJYaFVPMEZCUVVzc1NVRkJRU3hUUVVGVExFVkJRVVZvVWl4UlFVRk5MRU5CUVVOemFFTTdRVUZCZGtJc2EwSkJRMFYwZDBJc1kwRkJReXhKUVVGRU8wRkJRVTBzU1VGQlFTeEpRVUZKTEVWQlFVTTdRVUZCV0N4TFFVRnBRakpVTEV0QlFXcENMRU5CUkVZc1EwRkVSaXhEUVVSR08wRkJUMFE3UVVGRlJEQmpMRk5CUVZNc1EwRkJRMmgyUWl4VFFVRldMRWRCUVhOQ08wRkJRM0JDYlZNc1JVRkJRVUVzUlVGQlJTeEZRVUZGY2xRc1UwRkJVeXhEUVVGRFVTeE5RVUZXTEVOQlFXbENjVTBzVlVGRVJEdEJRVVZ3UWpKSExFVkJRVUZCTEV0QlFVc3NSVUZCUlhoVUxGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTzBGQlJrb3NRMEZCZEVJN096czdTVU5WY1VKMWFrSTdPenM3T3pzN096czdPenM3T3pzN096czBSRUUwUWxnN1FVRkRUbkJqTEUxQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVSSU96dDFSVUZKVnl4VlFVRkRNVlVzUjBGQlJDeEZRVUUyUWp0QlFVTTVReXhaUVVGTEszZENMRTFCUVV3c1IwRkJZeTkzUWl4SFFVRmtPMEZCUTBRN08zRkZRVVZuUWl4VlFVRkRiVlFzUzBGQlJDeEZRVUZyUXp0QlFVRkJMSGRDUVVOeVFpeE5RVUZMYUdwQ0xFdEJSR2RDTzBGQlFVRXNWVUZEZWtOeGEwSXNVVUZFZVVNc1pVRkRla05CTEZGQlJIbERPMEZCUVVFc1ZVRkRMMEkxWml4TFFVUXJRaXhsUVVNdlFrRXNTMEZFSzBJN08wRkJSV3BFTEZWQlEwVjFaU3hMUVVGTExFTkJRVU0wUWl4TlFVRk9MRmxCUVhkQ2FXTXNhVUpCUVhoQ0xFbEJRMEZ3T0VJc1MwRkJTeXhMUVVGTGRXVXNTMEZCU3l4RFFVRkRORUlzVFVGQlRpeERRVUZoYm1kQ0xFdEJSbnBDTEVWQlIwVTdRVUZEUVRSbUxGRkJRVUZCTEZGQlFWRXNRMEZCUXp0QlFVRkZja0lzVlVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGR08wRkJRVk4yWlN4VlFVRkJRU3hMUVVGTExFVkJRVVYxWlN4TFFVRkxMRU5CUVVNMFFpeE5RVUZPTEVOQlFXRnVaMEk3UVVGQk4wSXNVMEZCUkN4RFFVRlNPMEZCUTBRN1FVRkRSanM3T3pzN096czJRa0ZGVVR0QlFVRkJMSGxDUVZsSUxFdEJRVXQ2UlN4TFFWcEdPMEZCUVVFc1ZVRkZUSEZwUWl4UlFVWkxMR2RDUVVWTVFTeFJRVVpMTzBGQlFVRXNWVUZIVERaQ0xGbEJTRXNzWjBKQlIweEJMRmxCU0VzN1FVRkJRU3hWUVVsTU5HTXNWVUZLU3l4blFrRkpURUVzVlVGS1N6dEJRVUZCTEZWQlMweHNaQ3hGUVV4TExHZENRVXRNUVN4RlFVeExPMEZCUVVFc1ZVRk5URWNzUzBGT1N5eG5Ra0ZOVEVFc1MwRk9TenRCUVVGQkxGVkJUMHg2YVVJc1NVRlFTeXhuUWtGUFRFRXNTVUZRU3p0QlFVRkJMRlZCVVV4NUwwSXNUMEZTU3l4blFrRlJURUVzVDBGU1N6dEJRVUZCTEZWQlUwd3hRaXhYUVZSTExHZENRVk5NUVN4WFFWUkxPMEZCUVVFc1ZVRlZUSEF2UWl4SlFWWkxMR2RDUVZWTVFTeEpRVlpMTzBGQlFVRXNWVUZYVEhkRkxFdEJXRXNzWjBKQlYweEJMRXRCV0VzN1FVRkJRU3hWUVdORE9HWXNUMEZrUkN4SFFXTmhMRXRCUVV0cFNTeExRV1JzUWl4RFFXTkRha2tzVDBGa1JEdEJRV2RDVUN4VlFVRk5NMElzVDBGQlR5eEhRVUZIYUVjc1ZVRkJWU3hEUVVONFFuaGtMRkZCUVUwc1EwRkJRM2RvUXl4TlFVUnBRaXhGUVVWNFFra3NWMEZCVnl4RFFVRkRlRllzU1VGR1dTeEZRVWQ0UW01S0xGRkJRVkVzUjBGQlJ6SmxMRmRCUVZjc1EwRkJRek5sTEZGQlFXWXNSMEZCTUVJeVpTeFhRVUZYTEVOQlFVTnNaU3hQUVVoMFFpeEZRVWw0UW05Q0xGbEJRVmtzUjBGQlJ6aGpMRmRCUVZjc1EwRkJRME1zVDBGQlppeEhRVUY1UWtRc1YwRkJWeXhEUVVGRFJTeE5RVXA2UWl4RlFVdDRRbXBvUXl4SlFVRkpMRXRCUVVzc1NVRkJWQ3hIUVVGblFqaElMRTFCUVUwc1EwRkJRM2t6UWl4TlFVRjJRaXhIUVVGblEzb3pRaXhOUVVGTkxFTkJRVU13TTBJc1MwRk1aaXhEUVVFeFFqdEJRVkZCTEZWQlFVMHdRaXhsUVVGbExFZEJRVWM1UWl4WFFVRlhMRWxCUVVrc1EwRkJRelUyUWl4TFFVRjRRenRCUVVWQkxEQkNRVU5GTWt3c1kwRkJReXhIUVVGRUxGRkJRMGN5VkN4TFFVRkxMR2xDUVVGSk0xUXNZMEZCUXl4VFFVRkVPMEZCUVZjc1VVRkJRU3hGUVVGRkxFVkJRVVYzVkN4RlFVRm1PMEZCUVcxQ0xGRkJRVUVzUzBGQlN5eEZRVUZGUnp0QlFVRXhRaXhSUVVSYUxHVkJSVVV6VkN4alFVRkRMRWRCUVVRN1FVRkRSU3hSUVVGQkxFdEJRVXNzUlVGQlJXbFRMRkZCUVZFc1IwRkJSeXhYUVVGSUxFZEJRV2xDTEU5QlJHeERPMEZCUlVVc1VVRkJRU3hQUVVGUExFVkJRVU1zVFVGR1ZqdEJRVWRGTEZGQlFVRXNVVUZCVVN4RlFVRkRMRlZCU0ZnN1FVRkpSU3hSUVVGQkxGRkJRVkVzUlVGQlJTeERRVXBhTzBGQlMwVXNVVUZCUVN4TFFVRkxMRVZCUVVNN1FVRk1VaXh6UWtGUFJXcFRMR05CUVVNc1IwRkJSRHRCUVVORkxGRkJRVUVzVlVGQlZTeEZRVUZETEZGQlJHSTdRVUZGUlN4UlFVRkJMRTFCUVUwc1RVRkdVanRCUVVkRkxGRkJRVUVzZVVKQlFYbENMRVZCUVVVN1FVRkRla0p1UWl4VlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJUWm9RaXhaUVVGQlFTeFpRVUZaTEVWQlFVVXNSVUZCYUVJN1FVRkJiMEpETEZsQlFVRkJMRlZCUVZVc1JVRkJSVHRCUVVGb1F6dEJRVVJuUWl4VFFVZzNRanRCUVUxRkxGRkJRVUVzVDBGQlR5eEZRVUZETEUxQlRsWTdRVUZQUlN4UlFVRkJMRkZCUVZFc1JVRkJReXhWUVZCWU8wRkJVVVVzVVVGQlFTeExRVUZMTEUxQlVsQTdRVUZUUlN4UlFVRkJMRWRCUVVjN1FVRlVUQ3h6UWtGWFJUTm5RaXhqUVVGRExFbEJRVVE3UVVGRFJTeFJRVUZCTEVsQlFVa3NSVUZCUXl4WlFVUlFPMEZCUlVVc1VVRkJRU3hKUVVGSkxFVkJRVVVzUlVGR1VqdEJRVWRGTEZGQlFVRXNTMEZCU3l4RlFVRkZhVk1zVVVGQlVTeEhRVUZITEUxQlFVZ3NSMEZCV1N4VlFVZzNRanRCUVVsRkxGRkJRVUVzYTBKQlFXdENMRVZCUVVNN1FVRktja0lzVVVGWVJpeERRVkJHTEdWQmVVSkZhbE03UVVGRFJTdzBRa0ZCYTBJNFZDeFpRVUZaTEVsQlFVbExMRTlCUVdoQ0xHRkJRVFpDV0N4RlFVRTNRaXhqUVVFd1F5eEpRVVE1UkR0QlFVVkZMSGRDUVVGalRTeFpRVUZaTEVkQlFVY3NUVUZCU0N4SFFVRlpMRTlCUm5oRE8wRkJSMFVzVVVGQlFTeFRRVUZUTEVWQlFVVjBRaXhQUVVoaU8wRkJTVVVzVVVGQlFTeFJRVUZSTEVWQlFVVlFMRkZCU2xvN1FVRkxSU3hSUVVGQkxFVkJRVVVzUlVGQlJYVkNMRVZCVEU0N1FVRk5SU3hSUVVGQkxFbEJRVWtzUlVGQlJYUnBRaXhKUVU1U08wRkJUMFVzVVVGQlFTeE5RVUZOTEVWQlFVVXNTMEZCU3pndlFpeGpRVkJtTzBGQlVVVXNVVUZCUVN4UlFVRlJMRVZCUVVVc1MwRkJTMEVzWTBGU2FrSTdRVUZUUlN4UlFVRkJMRWRCUVVjc1JVRkJSU3hMUVVGTFF5eG5Ra0ZVV2p0QlFWVkZMRkZCUVVFc1MwRkJTeXhGUVVGRlJpeGxRVUZsTEVkQlFVYzVRaXhYUVVGSUxFZEJRV2xDTlRaQ08wRkJWbnBETEZOQldVY3dPRUlzWlVGQlpTeHBRa0ZEWkM5M1FqdEJRVUZSTEZGQlFVRXNVVUZCVVN4TlFVRm9RanRCUVVGcFFpeFJRVUZCTEV0QlFVc3NSVUZCUldsMlFpeFhRVUY0UWp0QlFVRnhReXhSUVVGQkxFMUJRVTA3UVVGQk0wTXNVMEZEUjBFc1YwRkVTQ3hEUVdKS0xFVkJhVUpITUVJc1QwRkJUeXhEUVVGRGFtaERMRWRCUVZJc1EwRkJXU3hWUVVGQmQyaERMRTFCUVUwN1FVRkJRU3cwUWtGRGFrSnNlRUk3UVVGQlVTeFZRVUZCTEVkQlFVY3NSVUZCUld0NFFpeE5RVUZOTEVOQlFVTTNPRUlzUzBGQmNFSTdRVUZCTWtJc1ZVRkJRU3hMUVVGTExFVkJRVVUyT0VJc1RVRkJUU3hEUVVGRE56aENPMEZCUVhwRExGZEJRMGMyT0VJc1RVRkJUU3hEUVVGRGRtUXNTMEZFVml4RFFVUnBRanRCUVVGQkxFOUJRV3hDTEVOQmFrSklMRU5CZWtKR0xFTkJSa1lzUlVGdFJFY3JZeXhWUVVGVkxFbEJRVWtzUTBGQlF6VmpMRmxCUVdZc1owSkJRME01VkN4alFVRkRMR05CUVVRN1FVRkJaMElzVVVGQlFTeEpRVUZKTEVWQlFVVXdkMEk3UVVGQmRFSXNVVUZFUkN4SFFVVkhMRWxCY2tST0xFVkJjMFJITldNc1dVRkJXU3hwUWtGQlNUbFVMR05CUVVNc1owSkJRVVE3UVVGQmEwSXNVVUZCUVN4RlFVRkZMRVZCUVVWM1ZDeEZRVUYwUWp0QlFVRXdRaXhSUVVGQkxFbEJRVWtzUlVGQlJVMDdRVUZCYUVNc1VVRjBSRzVDTEVOQlJFWTdRVUV3UkVRN096czdSVUZzU1hGRGRGVTdPMmRDUVVGdVFpdDNRaXg1UWtGSFFUdEJRVU5xUW5SbExFVkJRVUZCTEZGQlFWRXNSVUZCUlRsU0xGTkJRVk1zUTBGQlEzTkNMRWxCUkVnN1FVRkZha0p4VXl4RlFVRkJRU3haUVVGWkxFVkJRVVV6VkN4VFFVRlRMRU5CUVVOUkxFMUJSbEE3UVVGSGFrSXJka0lzUlVGQlFVRXNWVUZCVlN4RlFVRkZkbmRDTEZOQlFWTXNRMEZCUTFFc1RVRklURHRCUVVscVFqWlRMRVZCUVVGQkxFVkJRVVVzUlVGQlJYSlVMRk5CUVZNc1EwRkJRMUVzVFVGQlZpeERRVUZwUW5GTkxGVkJTa283UVVGTGFrSXlSeXhGUVVGQlFTeExRVUZMTEVWQlFVVjRWQ3hUUVVGVExFTkJRVU5STEUxQlRFRTdRVUZOYWtKNlVDeEZRVUZCUVN4SlFVRkpMRVZCUVVWcFVDeFRRVUZUTEVOQlFVTlJMRTFCVGtNN1FVRlBha0p6VkN4RlFVRkJRU3hSUVVGUkxFVkJRVVU1VkN4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVZCU08wRkJVV3BDTW1wQ0xFVkJRVUZCTEU5QlFVOHNSVUZCUlhoM1FpeFRRVUZUTEVOQlFVTnpVU3hQUVVGV0xFTkJRMUIwVVN4VFFVRlRMRU5CUVVOdlFpeExRVUZXTEVOQlFXZENPMEZCUTJSdlV5eEpRVUZCUVN4TFFVRkxMRVZCUVVWNFZDeFRRVUZUTEVOQlFVTlJMRTFCUVZZc1EwRkJhVUp4VFN4VlFVUldPMEZCUldReldTeEpRVUZCUVN4TFFVRkxMRVZCUVVVNFRDeFRRVUZUTEVOQlFVTlJMRTFCUVZZc1EwRkJhVUp4VFR0QlFVWldMRWRCUVdoQ0xFTkJSRThzUTBGU1VUdEJRV05xUW1scFFpeEZRVUZCUVN4WFFVRlhMRVZCUVVVNWRVSXNVMEZCVXl4RFFVRkRVU3hOUVdST08wRkJaV3BDT1ZFc1JVRkJRVUVzU1VGQlNTeEZRVUZGYzFFc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUTBGQmFFSXNRMEZtVnp0QlFXZENha0l2VEN4RlFVRkJRU3hMUVVGTExFVkJRVVU0VEN4VFFVRlRMRU5CUVVOUk8wRkJhRUpCT3p0blFrRklRVFIyUWl3MFFrRnpRa2M3UVVGRGNFSjBaU3hGUVVGQlFTeFJRVUZSTEVWQlFVVXNTMEZFVlR0QlFVVndRbkJwUWl4RlFVRkJRU3hKUVVGSkxFVkJRVVVzU1VGR1l6dEJRVWR3UWpoblF5eEZRVUZCUVN4UFFVRlBMRVZCUVVVN1FVRklWenM3T3p0QlEyaEVlRUlzU1VGQlRUbGxMRzlDUVVGclFpeEhRVUZITzBGQlEzcENibVFzUlVGQlFVRXNSVUZCUlN4RlFVRkZMRVZCUkhGQ08wRkJSWHBDUXl4RlFVRkJRU3hGUVVGRkxFVkJRVVU3UVVGR2NVSXNRMEZCTTBJN1FVRlpRU3hCUVVGbExGTkJRVk4zT0VJc1QwRkJWQ3hQUVV0TU8wRkJRVUVzVFVGS1VtaHNRaXhyUWtGSlVTeFJRVXBTUVN4clFrRkpVVHRCUVVGQkxIZENRVWhTYVd4Q0xFdEJSMUU3UVVGQlFTeE5RVWhTUVN4TFFVZFJMREpDUVVoQkxFbEJSMEU3UVVGQlFTeE5RVVpTUXl4SlFVVlJMRkZCUmxKQkxFbEJSVkU3UVVGQlFTeDFRa0ZFVW5ob1F5eEpRVU5STzBGQlFVRXNUVUZFVWtFc1NVRkRVU3d3UWtGRVJDeEpRVU5ETzBGQlExSXNVMEZCVDNkb1F5eEpRVUZKTEdkQ1FVTlVjbmhDTEdOQlFVTXNSMEZCUkR0QlFVRkxMRWxCUVVFc1QwRkJUeXhGUVVGRExFMUJRV0k3UVVGQmIwSXNTVUZCUVN4alFVRmpMRVZCUVVNc1VVRkJia003UVVGQk5FTXNTVUZCUVN4UlFVRlJMRVZCUVVNN1FVRkJja1FzYTBKQlEwVkJPMEZCUVVzc1NVRkJRU3hUUVVGVExFVkJRVVYzVFN4VlFVRlZMRU5CUVVONFpDeFJRVUZOTEVOQlFVTnhaQ3hKUVVGU0xITkNRVUZwUW5Ka0xGRkJRVTBzUTBGQlEyOXBReXhMUVVGNFFpeEZRVUZuUTBFc1MwRkJhRU03UVVGQk1VSXNhMEpCUTBWd2VFSXNZMEZCUXl4SlFVRkVPMEZCUTBVc1NVRkJRU3hKUVVGSkxFVkJRVU1zVDBGRVVEdEJRVVZGTEVsQlFVRXNhMEpCUVd0Q0xFVkJRVVZ0VFN4clFrRkdkRUk3UVVGSFJTeEpRVUZCTEVsQlFVa3NSVUZCUlRCR0xHOUNRVUZyUWl4RFFVRkRhR2xDTEVsQlFVUTdRVUZJTVVJc1NVRkVSaXhEUVVSR0xFTkJSRk1zWjBKQlYxUnRVU3d3UWtGWVJqdEJRV0ZFTzBGQlJVUnRlRUlzVDBGQlR5eERRVUZET1haQ0xGTkJRVklzUjBGQmIwSTdRVUZEYkVKbmQwSXNSVUZCUVVFc1NVRkJTU3hGUVVGRmJIaENMRk5CUVZNc1EwRkJRM05DTEVsQlFWWXNRMEZCWlhWTUxGVkJSRWc3UVVGRmJFSmlMRVZCUVVGQkxHdENRVUZyUWl4RlFVRkZhRTBzVTBGQlV5eERRVUZEVVN4TlFVRldMRU5CUVdsQ2NVMHNWVUZHYmtJN1FVRkhiRUp2YTBJc1JVRkJRVUVzUzBGQlN5eEZRVUZGYW5oQ0xGTkJRVk1zUTBGQlEzTkNMRWxCU0VNN1FVRkpiRUkxVWl4RlFVRkJRU3hKUVVGSkxFVkJRVVZ6VVN4VFFVRlRMRU5CUVVORExFdEJRVllzUTBGQlowSXNRMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVQ3hEUVVGb1FqdEJRVXBaTEVOQlFYQkNPenRCUTBGbExGTkJRVk5yZUVJc1MwRkJWQ3hQUVZGTU8wRkJRVUVzTmtKQlVGSXZORUlzVlVGUFVUdEJRVUZCTEUxQlVGSkJMRlZCVDFFc1owTkJVRXNzVDBGUFREdEJRVUZCTEUxQlRsSnRTQ3hSUVUxUkxGRkJUbEpCTEZGQlRWRTdRVUZCUVN4elFrRk1VakoxUWl4SFFVdFJPMEZCUVVFc1RVRk1Va0VzUjBGTFVTeDVRa0ZNUml4RFFVdEZPMEZCUVVFc1RVRktValY0UWl4TlFVbFJMRkZCU2xKQkxFMUJTVkU3UVVGQlFTeHBRMEZJVWtNc1kwRkhVVHRCUVVGQkxFMUJTRkpCTEdOQlIxRXNiME5CU0ZNc1VVRkhWRHRCUVVGQkxFMUJSbElyUWl4TFFVVlJMRkZCUmxKQkxFdEJSVkU3UVVGQlFTeE5RVVJNTm5aQ0xFbEJRMHM3TzBGQlExSXNjMEpCUTBWMGRVSXNZMEZCUXl4SFFVRkVPMEZCUTBVc1NVRkJRU3hOUVVGTkxFVkJRVVYyUkN4TlFVUldPMEZCUlVVc1NVRkJRU3hUUVVGVExFVkJRVVUwZUVJc1IwRkJSeXhIUVVGSExFTkJRVU5CTEVkQlFVb3NSMEZCVlN4RFFVWXhRanRCUVVkRkxFbEJRVUVzV1VGQldTeEZRVUZGUVN4SFFVRkhMRWRCUVVjc1EwRkJRMEVzUjBGQlNpeEhRVUZWTEVOQlNEZENPMEZCU1VVc1NVRkJRU3hMUVVGTExFVkJRVVUxZGtJN1FVRktWQ3hyUWtGTlJYVkNMR05CUVVNc1QwRkJSRHRCUVVORkxFbEJRVUVzVlVGQlZTeEZRVUZGZWtnc1ZVRkVaRHRCUVVWRkxFbEJRVUVzVTBGQlV5eEZRVUZETEZGQlJsbzdRVUZIUlN4SlFVRkJMRTFCUVUwc1JVRkJSV3RGTEUxQlNGWTdRVUZKUlN4SlFVRkJMR05CUVdNc1JVRkJSVU1zWTBGS2JFSTdRVUZMUlN4SlFVRkJMRXRCUVVzc1JVRkJSU3RDTzBGQlRGUXNTMEZOVFRaMlFpeEpRVTVPTEVkQlVVYzVkVUlzVVVGQlFTeERRVUZsT1ZBc1IwRkJaaXhEUVVGdFFtZFJMRkZCUVc1Q0xFVkJRVFpDTEZWQlFVRTJkVUlzUzBGQlN6dEJRVUZCTEhkQ1FVTnFRM1oxUWl4alFVRkRMRWRCUVVRN1FVRkJTeXhOUVVGQkxGRkJRVkVzUlVGQlJYRjFRanRCUVVGbUxFOUJRWEZDUlN4TFFVRnlRaXhEUVVScFF6dEJRVUZCTEVkQlFXeERMRU5CVWtnc1EwRk9SaXhEUVVSR08wRkJjVUpFTzBGQlJVUXJReXhMUVVGTExFTkJRVU5xZDBJc1UwRkJUaXhIUVVGclFqdEJRVU5vUWpWS0xFVkJRVUZCTEZsQlFWa3NSVUZCUlhsSkxHOUNRVVJGTzBGQlJXaENNMGdzUlVGQlFVRXNWVUZCVlN4RlFVRkZPRWdzYTBKQlJrazdRVUZIYUVKNFNDeEZRVUZCUVN4VFFVRlRMRVZCUVVWNVNDeHBRa0ZJU3p0QlFVbG9RbG9zUlVGQlFVRXNVVUZCVVN4RlFVRkZVeXhUUVVGVExFTkJRVU50UWl4SlFVcEtPMEZCUzJoQ2RrMHNSVUZCUVVFc1NVRkJTU3hGUVVGRkswd3NXVUZNVlR0QlFVMW9RblYwUWl4RlFVRkJRU3hIUVVGSExFVkJRVVZ1ZEVJc1pVRk9WenRCUVU5b1FucEZMRVZCUVVGQkxFMUJRVTBzUlVGQlJTdEVMR2xDUVZCUk8wRkJVV2hDT1VRc1JVRkJRVUVzWTBGQll5eEZRVUZGY1VVc2MwSkJVa0U3UVVGVGFFSTNSQ3hGUVVGQlFTeFRRVUZUTEVWQlFVVnpSQ3hwUWtGVVN6dEJRVlZvUW5KRUxFVkJRVUZCTEZGQlFWRXNSVUZCUlhGRUxHbENRVlpOTzBGQlYyaENjRVFzUlVGQlFVRXNVMEZCVXl4RlFVRkZiMFFzYVVKQldFczdRVUZaYUVKdVJDeEZRVUZCUVN4UlFVRlJMRVZCUVVWdFJDeHBRa0ZhVFR0QlFXRm9RbXhFTEVWQlFVRkJMRkZCUVZFc1JVRkJSVEpFTEdkQ1FXSk5PMEZCWTJoQ2VFTXNSVUZCUVVFc1MwRkJTeXhGUVVGRkswSXNhVUpCWkZNN1FVRmxhRUk1UWl4RlFVRkJRU3hKUVVGSkxFVkJRVVY1UWl4VFFVRlRMRU5CUVVOelFqdEJRV1pCTEVOQlFXeENPenRCUXk5RFpTeFRRVUZUT0haQ0xFMUJRVlFzUTBGQlowSXphRU1zUzBGQmFFSXNSVUZCT0VJN1FVRkJRU3c0UWtGRGEwSkJMRXRCUkd4Q0xFTkJRMjVETkdoRExHOUNRVVJ0UXp0QlFVRkJMRTFCUTI1RFFTeHZRa0ZFYlVNc2MwTkJRMW83UVVGQlJVTXNTVUZCUVVFc1VVRkJVU3hGUVVGRk8wRkJRVm9zUjBGRVdUdEJRVUZCTEUxQlEwc3ZlRUlzVVVGRVRDeEhRVU5yUWpsUUxFdEJSR3hDTEVOQlEwczRVQ3hSUVVSTU8wRkJSVE5ETEUxQlFVMTJVQ3hMUVVGTExFZEJRVWM3UVVGRFdtOVBMRWxCUVVGQkxFZEJRVWNzUlVGQlJUTlBMRXRCUVVzc1EwRkJRekpQTEVkQlFVNHNTVUZCWVN4SlFVRmlMRWRCUVc5Q00wOHNTMEZCU3l4RFFVRkRNazhzUjBGQk1VSXNSMEZCWjBOMVR5eFRRVVI2UWp0QlFVVmFPVkFzU1VGQlFVRXNTVUZCU1N4RlFVRkZjRTRzUzBGQlN5eERRVUZEYjA0c1NVRkJUaXhKUVVGakxFbEJRV1FzUjBGQmNVSndUaXhMUVVGTExFTkJRVU52VGl4SlFVRXpRaXhIUVVGclF6aFFMRk5CUmpWQ08wRkJSMXA2VHl4SlFVRkJRU3hMUVVGTExFVkJRVVY2VHl4TFFVRkxMRU5CUVVONVR5eExRVUZPTEVsQlFXVXNTVUZCWml4SFFVRnpRbnBQTEV0QlFVc3NRMEZCUTNsUExFdEJRVFZDTEVkQlFXOURlVThzVTBGSUwwSTdRVUZKV2pGVUxFbEJRVUZCTEUxQlFVMHNSVUZCUlhoS0xFdEJRVXNzUTBGQlEzZEtMRTFCUVU0c1NVRkJaMElzU1VGQmFFSXNSMEZCZFVKNFNpeExRVUZMTEVOQlFVTjNTaXhOUVVFM1FpeEhRVUZ6UXpCVUxGTkJTbXhETzBGQlMxbzdRVUZEUVRSclFpeEpRVUZCUVN4TlFVRk5MRVZCUVVWR0xHOUNRVUZ2UWl4RFFVRkRRenRCUVU1cVFpeEhRVUZrTzBGQlVVRXNjMEpCUTBWNmVFSTdRVUZCU3l4SlFVRkJMRk5CUVZNc1JVRkJSWEpKTEUxQlFVMHNRMEZCUTJjMlFpeE5RVUYyUWp0QlFVRXJRaXhKUVVGQkxFdEJRVXNzUlVGQlJYaG9RenRCUVVGMFF5eExRVU5IZFZBc1VVRkVTQ3hEUVVSR08wRkJTMFE3UVVGRlJEWjRRaXhOUVVGTkxFTkJRVU5zZDBJc1UwRkJVQ3hIUVVGdFFqdEJRVU5xUWpOQ0xFVkJRVUZCTEZGQlFWRXNSVUZCUlZNc1UwRkJVeXhEUVVGRGJVSXNTVUZFU0R0QlFVVnFRbXQzUWl4RlFVRkJRU3h2UWtGQmIwSXNSVUZCUlhKNFFpeFRRVUZUTEVOQlFVTnZRaXhMUVVGV0xFTkJRV2RDTzBGQlEzQkRhM2RDTEVsQlFVRkJMRkZCUVZFc1JVRkJSWFI0UWl4VFFVRlRMRU5CUVVOUE8wRkJSR2RDTEVkQlFXaENMRU5CUmt3N1FVRkxha0p1UXl4RlFVRkJRU3hIUVVGSExFVkJRVVUwUWl4VFFVRlRMRU5CUVVOTkxGTkJRVllzUTBGQmIwSXNRMEZCUTA0c1UwRkJVeXhEUVVGRFR5eE5RVUZZTEVWQlFXMUNVQ3hUUVVGVExFTkJRVU5STEUxQlFUZENMRU5CUVhCQ0xFTkJURms3UVVGTmFrSXpSQ3hGUVVGQlFTeEpRVUZKTEVWQlFVVnRSQ3hUUVVGVExFTkJRVU5OTEZOQlFWWXNRMEZCYjBJc1EwRkJRMDRzVTBGQlV5eERRVUZEVHl4TlFVRllMRVZCUVcxQ1VDeFRRVUZUTEVOQlFVTlJMRTFCUVRkQ0xFTkJRWEJDTEVOQlRsYzdRVUZQYWtKMlNDeEZRVUZCUVN4TlFVRk5MRVZCUVVVclJ5eFRRVUZUTEVOQlFVTk5MRk5CUVZZc1EwRkJiMElzUTBGQlEwNHNVMEZCVXl4RFFVRkRUeXhOUVVGWUxFVkJRVzFDVUN4VFFVRlRMRU5CUVVOUkxFMUJRVGRDTEVOQlFYQkNMRU5CVUZNN1FVRlJha0owUXl4RlFVRkJRU3hMUVVGTExFVkJRVVU0UWl4VFFVRlRMRU5CUVVOTkxGTkJRVllzUTBGQmIwSXNRMEZCUTA0c1UwRkJVeXhEUVVGRFR5eE5RVUZZTEVWQlFXMUNVQ3hUUVVGVExFTkJRVU5STEUxQlFUZENMRU5CUVhCQ08wRkJVbFVzUTBGQmJrSTdPenM3U1VONlFuRkNhWGhDT3pzN096czdPenM3T3pzN096czdPelJFUVdOWU8wRkJRMDU2WkN4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVNEczdhVVZCU1VzN1FVRkJRU3hoUVVGTkxFMUJRVXRyU1N4UlFVRk1MRU5CUVdNN1FVRkJSV3hKTEZGQlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVGWUxFOUJRV1FzUTBGQlRqdEJRVUZCT3p0clJVRkZRenRCUVVGQkxHRkJRVTBzVFVGQlMydEpMRkZCUVV3c1EwRkJZenRCUVVGRmJFa3NVVUZCUVVFc1QwRkJUeXhGUVVGRk8wRkJRVmdzVDBGQlpDeERRVUZPTzBGQlFVRTdPMjFGUVVWRExGVkJRVU4yUWl4TFFVRkVMRVZCUVd0RE8wRkJRVUVzVlVGRGRrTnhRaXhSUVVSMVF5eEhRVU14UWl4TlFVRkxjbXRDTEV0QlJIRkNMRU5CUTNaRGNXdENMRkZCUkhWRE8wRkJRVUVzVlVGRmRrTktMRTlCUm5WRExFZEJSVE5DYWtJc1MwRkJTeXhEUVVGRE5FSXNUVUZHY1VJc1EwRkZka05ZTEU5QlJuVkRPMEZCUnk5RFNTeE5RVUZCUVN4UlFVRlJMRU5CUVVNN1FVRkJSWEpDTEZGQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGQlJqdEJRVUZUZG1Vc1VVRkJRVUVzUzBGQlN5eEZRVUZGZDJZN1FVRkJhRUlzVDBGQlJDeERRVUZTTzBGQlEwUTdPenM3T3pzN05rSkJSVkU3UVVGQlFTeDNRa0ZEYTBNc1MwRkJTMnByUWl4TFFVUjJRenRCUVVGQkxGVkJRME54YVVJc1VVRkVSQ3hsUVVORFFTeFJRVVJFTzBGQlFVRXNWVUZEVjNWQ0xFVkJSRmdzWlVGRFYwRXNSVUZFV0R0QlFVRkJMRlZCUTJWMGFVSXNTVUZFWml4bFFVTmxRU3hKUVVSbU8wRkJRVUVzVlVGRGNVSXlaME1zVVVGRWNrSXNaVUZEY1VKQkxGRkJSSEpDTzBGQlIxQXNWVUZCVFVNc1dVRkJXU3hIUVVGSGRHeENMRlZCUVZVc1EwRkROMEo0WkN4UlFVRk5MRU5CUVVNcmFVTXNUVUZFYzBJc2MwSkJSekZDTDJsRExGRkJRVTBzUTBGQlEyMXNRaXhQUVVodFFpeEZRVWRVTEV0QlFVdHBTU3hMUVVGTUxFTkJRVmRxU1N4UFFVaEdPMEZCVFRkQ2JFTXNUVUZCUVVFc1VVRkJVU3hIUVVOS05HWXNVVUZCVVN4SFFVTk9OMmxETEZGQlFVMHNRMEZCUTJkcVF5eFZRVVJFTEVkQlJVNW9ha01zVVVGQlRTeERRVUZEYVdwRExHVkJTRXdzUjBGSlNrb3NVVUZCVVN4SFFVTlNOMmxETEZGQlFVMHNRMEZCUTJ0cVF5eGpRVVJETEVkQlJWSnNha01zVVVGQlRTeERRVUZEYldwRExGZEJXbXRDTEVOQlFTOUNPMEZCWlVFc1ZVRkJUVU1zV1VGQldTeEhRVUZITld4Q0xGVkJRVlVzUTBGRE4wSjRaQ3hSUVVGTkxFTkJRVU54YWtNc1RVRkVjMElzUlVGRk4wSlNMRkZCUVZFc1IwRkJSemRwUXl4UlFVRk5MRU5CUVVOemFrTXNWMEZCVml4SFFVRjNRblJxUXl4UlFVRk5MRU5CUVVOMWFrTXNWVUZHVml4RlFVYzNRbFlzVVVGQlVTeEpRVUZKTEVOQlFVTTFaaXhSUVVGaUxFZEJRWGRDYW1wQ0xGRkJRVTBzUTBGQlEzZHFReXhWUVVFdlFpeEhRVUUwUTNocVF5eFJRVUZOTEVOQlFVTjVha01zVjBGSWRFSXNRMEZCTDBJN1FVRk5RU3hWUVVGTlF5eFhRVUZYTEVkQlFVZHNiVUlzVlVGQlZTeERRVUZEZUdRc1VVRkJUU3hEUVVGRE1tcERMRkZCUVZJc2MwSkJRek5DTTJwRExGRkJRVTBzUTBGQlF6UnFReXhsUVVSdlFpeEZRVU5HTEVOQlFVTXpaMElzVVVGRVF5eEZRVUU1UWp0QlFVbEJMREJDUVVORmFsTTdRVUZCU3l4UlFVRkJMRk5CUVZNc1JVRkJSVGg0UWp0QlFVRm9RaXh6UWtGRFJUbDRRanRCUVVORkxGRkJRVUVzVDBGQlR5eEZRVUZGTm5oQ0xGRkJSRmc3UVVGRlJTeFJRVUZCTEZOQlFWTXNSVUZCUldFc1YwRkdZanRCUVVkRkxGRkJRVUVzVVVGQlVTeEZRVUZGZW1kQ0xGRkJTRm83UVVGSlJTeFJRVUZCTEVWQlFVVXNSVUZCUlhWQ0xFVkJTazQ3UVVGTFJTeFJRVUZCTEVsQlFVa3NSVUZCUlhScFFpeEpRVXhTTzBGQlRVVXNVVUZCUVN4TlFVRk5MRVZCUVVVc1MwRkJTMmM1UWl4VlFVNW1PMEZCVDBVc1VVRkJRU3hSUVVGUkxFVkJRVVVzUzBGQlN6TmFMRmxCVUdwQ08wRkJVVVVzVVVGQlFTeFBRVUZQTEVWQlFVVXNTMEZCUzJkWUxGZEJVbWhDTzBGQlUwVXNVVUZCUVN4SlFVRkpMRVZCUVVNN1FVRlVVQ3hSUVVSR0xHVkJXVVYyY2tJN1FVRkJTeXhSUVVGQkxGTkJRVk1zUlVGQlJXOTVRanRCUVVGb1FpeFJRVnBHTEVOQlJFWTdRVUZuUWtRN096czdSVUY0UldsRE5YbENPenRuUWtGQlptOTVRaXh4UWtGRFFUdEJRVU5xUWpObUxFVkJRVUZCTEZGQlFWRXNSVUZCUlRsU0xGTkJRVk1zUTBGQlEzTkNMRWxCUkVnN1FVRkZha0lyVWl4RlFVRkJRU3hGUVVGRkxFVkJRVVZ5VkN4VFFVRlRMRU5CUVVOUkxFMUJRVllzUTBGQmFVSnhUU3hWUVVaS08wRkJSMnBDT1dJc1JVRkJRVUVzU1VGQlNTeEZRVUZGYVZBc1UwRkJVeXhEUVVGRFVTeE5RVWhETzBGQlNXcENjMVFzUlVGQlFVRXNVVUZCVVN4RlFVRkZPVlFzVTBGQlV5eERRVUZEZVU4c1NVRkJWaXhEUVVGbE5VSXNWVUZLVWp0QlFVdHFRalpyUWl4RlFVRkJRU3hSUVVGUkxFVkJRVVV4ZUVJc1UwRkJVeXhEUVVGRGMwSTdRVUZNU0RzN1owSkJSRUZ0ZDBJc2QwSkJVMGM3UVVGRGNFSXpaaXhGUVVGQlFTeFJRVUZSTEVWQlFVVXNTMEZFVlR0QlFVVndRalJtTEVWQlFVRkJMRkZCUVZFc1JVRkJSVHRCUVVaVk96czdPMEZEYWtKVUxGTkJRVk5uUWl4VFFVRlVMRU5CUVcxQ2FtcERMRXRCUVc1Q0xFVkJRV2xETzBGQlFVRXNUVUZEZEVNNFVDeFJRVVJ6UXl4SFFVTlFPVkFzUzBGRVR5eERRVU4wUXpoUUxGRkJSSE5ETzBGQlFVRXNUVUZETlVKdmVrSXNUMEZFTkVJc1IwRkRVR3hxUXl4TFFVUlBMRU5CUXpWQ2EycERMRTlCUkRSQ08wRkJRVUVzVFVGRGJrSkRMRTlCUkcxQ0xFZEJRMUJ1YWtNc1MwRkVUeXhEUVVOdVFtMXFReXhQUVVSdFFqdEJRVWM1UXl4elFrRkRSUzk1UWp0QlFVRkpMRWxCUVVFc1UwRkJVeXhGUVVGRmFGSXNVVUZCVFN4RFFVRkRaMnRETEVWQlFYUkNPMEZCUVRCQ0xFbEJRVUVzVDBGQlR5eEZRVUZGUml4UFFVRnVRenRCUVVFMFF5eEpRVUZCTEU5QlFVOHNSVUZCUlVNN1FVRkJja1FzUzBGRFIzSjZRaXhSUVVSSUxFTkJSRVk3UVVGTFJEczdRVU5ZWXl4VFFVRlRkWHBDTEZOQlFWUXNRMEZCYlVKeWFrTXNTMEZCYmtJc1JVRkJhVU03UVVGRE9VTXNjMEpCUVU5dlVTdzJRa0ZCVVhCUkxFdEJRVXNzUTBGQlF6aFFMRkZCUVdRc1EwRkJVRHRCUVVORU96dEJRMFpqTEZOQlFWTjNla0lzVjBGQlZDeERRVUZ4UW5ScVF5eExRVUZ5UWl4RlFVRnRRenRCUVVOb1JDeHpRa0ZCVDI5UkxEWkNRVUZSY0ZFc1MwRkJTeXhEUVVGRE9GQXNVVUZCWkN4RFFVRlFPMEZCUTBRN08wRkRSR01zVTBGQlUzbDZRaXhYUVVGVUxFTkJRWEZDZG1wRExFdEJRWEpDTEVWQlFXMURPMEZCUTJoRUxITkNRVUZQYjFFN1FVRkJUeXhKUVVGQkxGTkJRVk1zUlVGQlJXaFNMRkZCUVUwc1EwRkJRMjlyUXp0QlFVRjZRaXhMUVVGcFEzaHFReXhMUVVGTExFTkJRVU00VUN4UlFVRjJReXhEUVVGUU8wRkJRMFE3TzBGRFEyTXNVMEZCVXpKNlFpeGxRVUZVTEVOQlFYbENlbXBETEV0QlFYcENMRVZCUVhWRE8wRkJRVUVzVFVGRE5VTTRVQ3hSUVVRMFF5eEhRVU5PT1ZBc1MwRkVUU3hEUVVNMVF6aFFMRkZCUkRSRE8wRkJRVUVzVFVGRGJFTnZla0lzVDBGRWEwTXNSMEZEVG14cVF5eExRVVJOTEVOQlEyeERhMnBETEU5QlJHdERPMEZCUVVFc1RVRkRla0kzYUVNc1MwRkVlVUlzUjBGRFRuSkNMRXRCUkUwc1EwRkRla0p4UWl4TFFVUjVRanRCUVVGQkxFMUJRMnhDT0doRExFOUJSR3RDTEVkQlEwNXVha01zUzBGRVRTeERRVU5zUW0xcVF5eFBRVVJyUWp0QlFVZHdSQ3h6UWtGRFJTOTVRanRCUVVORkxFbEJRVUVzVTBGQlV5eEZRVUZGYUZJc1VVRkJUU3hEUVVGRGMydERMRVZCUkhCQ08wRkJSVVVzU1VGQlFTeExRVUZMTEVWQlFVVnlhVU1zUzBGQlN5eEpRVUZKTEV0QlJteENPMEZCUjBVc1NVRkJRU3hQUVVGUExFVkJRVVUyYUVNc1QwRklXRHRCUVVsRkxFbEJRVUVzVDBGQlR5eEZRVUZGUXp0QlFVcFlMRXRCVFVkeWVrSXNVVUZPU0N4RFFVUkdPMEZCVlVRN08wRkRha0pqTEZOQlFWTTJla0lzVVVGQlZDeERRVUZyUWpOcVF5eExRVUZzUWl4RlFVRm5RenRCUVVNM1F5eHpRa0ZCVDI5UkxEQkNRVUZMY0ZFc1MwRkJTeXhEUVVGRE9GQXNVVUZCV0N4RFFVRlFPMEZCUTBRN096czdRVU0wUWtRc1NVRkJUVGg2UWl4bFFVRmxMRWRCUVVjc1JVRkJlRUk3UVVGRFFTeEpRVUZOUXl4bFFVRmxMRWRCUVVjc1JVRkJlRUk3UVVGRlFTeEpRVUZOZEhsQ0xHdENRVUZuUWl4SFFVRkhhRUlzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRM1pETEVOQlJIVkRMRVZCUlhaRExFTkJSblZETEVWQlIzWkRMRU5CU0hWRExFVkJTWFpETEVOQlNuVkRMRVZCUzNaRExFTkJUSFZETEVWQlRYWkRMRU5CVG5WRExFVkJUM1pETEVOQlVIVkRMRVZCVVhaRExFTkJVblZETEVWQlUzWkRMRU5CVkhWRExFVkJWWFpETEZGQlZuVkRMRVZCVjNaRExFMUJXSFZETEVOQlFXaENMRU5CUVhwQ096dEJRV05CTEVsQlFVMTVUeXhyUWtGQlowSXNSMEZCUnl4VFFVRnVRa0VzWjBKQlFXMUNMRU5CUVVOdVpDeERRVUZFTEVWQlFYZENPMEZCUXk5RExFMUJRVWtzVDBGQlQwRXNRMEZCVUN4TFFVRmhMRkZCUVdwQ0xFVkJRVEpDTzBGQlEzcENMRmRCUVU5V0xFbEJRVWtzUTBGQlEwNHNTMEZCU3l4RFFVRkRMRlZCUVVRc1EwRkJUaXhGUVVGdlFtbENMRTlCUVhCQ0xFTkJRVW9zUTBGQmFVTkVMRU5CUVdwRExFTkJRVkE3UVVGRFJEczdRVUZGUkN4TlFVRkpRU3hEUVVGRExFdEJRVXNzVVVGQlZpeEZRVUZ2UWp0QlFVTnNRaXhYUVVGUE9VTXNZVUZCWVN4RFFVRkRLME1zVDBGQlR5eERRVUZEUXl4TlFVRlVMRU5CUVhCQ08wRkJRMFE3TzBGQlJVUXNUVUZCU1VZc1EwRkJReXhMUVVGTExFMUJRVllzUlVGQmEwSTdRVUZEYUVJc1YwRkJUemxETEdGQlFXRXNRMEZCUXl0RExFOUJRVThzUTBGQlEwVXNTVUZCVkN4RFFVRndRanRCUVVORU96dEJRVVZFTEZOQlFVOXlSQ3hSUVVGUkxFVkJRV1k3UVVGRFJDeERRV1JFT3p0SlFXZENjVUpyYkVNN096czdPenM3T3pzN096czdPenM3Y1VWQmRVSkdMRlZCUVVNNVowSXNTMEZCUkN4RlFVRnRSRHRCUVVGQkxGVkJRekZFSzJkQ0xFOUJSREJFTEVkQlF6bERMRTFCUVVzdmFrTXNTMEZFZVVNc1EwRkRNVVFyYWtNc1QwRkVNRVE3TzBGQlIyeEZMRlZCUTBWQkxFOUJRVThzUzBGRFRpOW5RaXhMUVVGTExFTkJRVU5uYUVJc1VVRkJUaXhMUVVGdFFrb3NaVUZCYmtJc1NVRkJjME0xWjBJc1MwRkJTeXhEUVVGRFoyaENMRkZCUVU0c1MwRkJiVUpJTEdWQlJHNUVMRU5CUkZRc1JVRkhSVHRCUVVOQk8wRkJRMEUzWjBJc1VVRkJRVUVzUzBGQlN5eERRVUZEZFZrc1kwRkJUanRCUVVOQmQwa3NVVUZCUVVFc1QwRkJUeXhEUVVGRE8wRkJRVVV2WjBJc1ZVRkJRVUVzUzBGQlN5eEZRVUZNUVR0QlFVRkdMRk5CUVVRc1EwRkJVRHRCUVVORU8wRkJRMFk3TzJsRlFVVlpMRlZCUVVOQkxFdEJRVVFzUlVGQlowUTdRVUZCUVN4VlFVTnVSRzFqTEUxQlJHMUVMRWRCUTNoRExFMUJRVXR1TDBJc1MwRkViVU1zUTBGRGJrUnRMMElzVFVGRWJVUTdPMEZCUlRORUxGVkJRVWxCTEUxQlFVb3NSVUZCV1R0QlFVTldRU3hSUVVGQlFTeE5RVUZOTEVOQlFVTTdRVUZCUlc1akxGVkJRVUZCTEV0QlFVc3NSVUZCVEVFN1FVRkJSaXhUUVVGRUxFTkJRVTQ3UVVGRFJEdEJRVU5HT3p0clJVRkZZU3hWUVVGRFFTeExRVUZFTEVWQlFXZEVPMEZCUVVFc1ZVRkRjRVJyWXl4UFFVUnZSQ3hIUVVONFF5eE5RVUZMYkM5Q0xFdEJSRzFETEVOQlEzQkVheTlDTEU5QlJHOUVPenRCUVVVMVJDeFZRVUZKUVN4UFFVRktMRVZCUVdFN1FVRkRXRUVzVVVGQlFVRXNUMEZCVHl4RFFVRkRPMEZCUVVWc1l5eFZRVUZCUVN4TFFVRkxMRVZCUVV4Qk8wRkJRVVlzVTBGQlJDeERRVUZRTzBGQlEwUTdRVUZEUmpzN2RVVkJSV3RDTEZWQlFVTkJMRXRCUVVRc1JVRkJaMFE3UVVGQlFTeFZRVU42UkVzc1dVRkVlVVFzUjBGRGVFTXNUVUZCUzNKcVFpeExRVVJ0UXl4RFFVTjZSSEZxUWl4WlFVUjVSRHM3UVVGRmFrVXNWVUZCU1VFc1dVRkJTaXhGUVVGclFqdEJRVU5vUWtFc1VVRkJRVUVzV1VGQldTeERRVUZETzBGQlFVVk1MRlZCUVVGQkxFdEJRVXNzUlVGQlRFRTdRVUZCUml4VFFVRkVMRU5CUVZvN1FVRkRSRHRCUVVOR096dDFSVUZGYTBJc1ZVRkJRMEVzUzBGQlJDeEZRVUZuUkR0QlFVRkJMRlZCUTNwRVRTeFpRVVI1UkN4SFFVTjRReXhOUVVGTGRHcENMRXRCUkcxRExFTkJRM3BFYzJwQ0xGbEJSSGxFT3p0QlFVVnFSU3hWUVVGSlFTeFpRVUZLTEVWQlFXdENPMEZCUTJoQ1FTeFJRVUZCUVN4WlFVRlpMRU5CUVVNN1FVRkJSVTRzVlVGQlFVRXNTMEZCU3l4RlFVRk1RVHRCUVVGR0xGTkJRVVFzUTBGQldqdEJRVU5FTzBGQlEwWTdPMnRGUVVWaExGVkJRVU5CTEV0QlFVUXNSVUZCWjBRN1FVRkJRU3hWUVVOd1JDdG5RaXhQUVVSdlJDeEhRVU40UXl4TlFVRkxMMnBETEV0QlJHMURMRU5CUTNCRUsycERMRTlCUkc5RU96dEJRVVUxUkN4VlFVRkpRU3hQUVVGS0xFVkJRV0U3UVVGRFdFRXNVVUZCUVVFc1QwRkJUeXhEUVVGRE8wRkJRVVV2WjBJc1ZVRkJRVUVzUzBGQlN5eEZRVUZNUVR0QlFVRkdMRk5CUVVRc1EwRkJVRHRCUVVORU8wRkJRMFk3T3pzN096czdOa0pCUlZFN1FVRkJRVHM3UVVGQlFTeDNRa0ZQU0N4TFFVRkxhR3BDTEV0QlVFWTdRVUZCUVN4VlFVVk1PRkFzVVVGR1N5eGxRVVZNUVN4UlFVWkxPMEZCUVVFc09FTkJSMHh0TUVJc1UwRklTenRCUVVGQkxGVkJSMHhCTEZOQlNFc3NjME5CUjA4c1NVRklVRHRCUVVGQkxGVkJTVXhETEZWQlNrc3NaVUZKVEVFc1ZVRktTenRCUVVGQkxEaERRVXRNUXl4WFFVeExPMEZCUVVFc1ZVRkxURUVzVjBGTVN5eHpRMEZMVXl4VFFVeFVPMEZCUVVFc05rTkJUVXgwYVVNc1VVRk9TenRCUVVGQkxGVkJUVXhCTEZGQlRrc3NjVU5CVFUwc1EwRk9UanRCUVZOUUxGVkJRVTByWjBJc1QwRkJUeXhIUVVGSGFFY3NWVUZCVlN4RFFVTjRRbmhrTEZGQlFVMHNRMEZCUTJkc1F5eFRRVVJwUWl4RlFVVjRRbWhzUXl4UlFVRk5MRU5CUVVNcmEwTXNWMEZCUkN4RFFVWnJRaXhGUVVkNFFuQnJReXhQUVVGUExFTkJRVU5yWml4clFrRkJaMElzUTBGQlEzQmtMRkZCUVVRc1EwRkJha0lzUTBGQlVDeERRVUZ2UTJoRUxGTkJTRm9zYTBSQlMzSkNUeXhSUVVGTkxFTkJRVU00YTBNc1ZVRk1ZeXhGUVV0RVFTeFZRVXhETEdkRFFVMXlRamxyUXl4UlFVRk5MRU5CUVVNMmEwTXNVMEZPWXl4RlFVMUdRU3hUUVU1RkxHZENRVUV4UWp0QlFWVkJMREJDUVVORk4zcENPMEZCUTBVc1VVRkJRU3hUUVVGVExFVkJRVVYzVXl4UFFVUmlPMEZCUlVVc1VVRkJRU3hQUVVGUExFVkJRVVVzUzBGQlMybERMRmRCUm1oQ08wRkJSMFVzVVVGQlFTeE5RVUZOTEVWQlFVVXNTMEZCUzNsYUxGVkJTR1k3UVVGSlJTeFJRVUZCTEU5QlFVOHNSVUZCUlN4TFFVRkxNME1zVjBGS2FFSTdRVUZMUlN4UlFVRkJMRmxCUVZrc1JVRkJSU3hMUVVGTGNGa3NaMEpCVEhKQ08wRkJUVVVzVVVGQlFTeFpRVUZaTEVWQlFVVXNTMEZCUzBNc1owSkJUbkpDTzBGQlQwVXNVVUZCUVN4VlFVRlZMRVZCUVVVc1MwRkJTelpuUWl4alFWQnVRanRCUVZGRkxGRkJRVUVzU1VGQlNTeEZRVUZETEZGQlVsQTdRVUZUUlN4UlFVRkJMRkZCUVZFc1JVRkJRenRCUVZSWUxGTkJWMGQyTUVJc1VVRllTQ3hEUVVSR08wRkJaVVE3T3pzN1JVRjZSMjlEUmpzN1owSkJRV3hDYXpCQ0xIZENRVU5CTzBGQlEycENhREJDTEVWQlFVRkJMRkZCUVZFc1JVRkJSVk1zVTBGQlV5eERRVUZEYlVJc1NVRkVTRHRCUVVWcVFuZDVRaXhGUVVGQlFTeFZRVUZWTEVWQlFVVXpla0lzVTBGQlV5eERRVUZEYzBJc1NVRkdURHRCUVVkcVFtOTVRaXhGUVVGQlFTeFRRVUZUTEVWQlFVVXhla0lzVTBGQlV5eERRVUZEYzBJc1NVRklTanRCUVVscVFuTjVRaXhGUVVGQlFTeFhRVUZYTEVWQlFVVTFla0lzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRek5DTEUxQlJESkNMRVZCUlROQ0xFMUJSakpDTEVWQlJ6TkNMRlZCU0RKQ0xFVkJTVE5DTEUxQlNqSkNMRVZCU3pOQ0xGRkJUREpDTEVWQlRUTkNMRk5CVGpKQ0xFVkJUek5DTEZGQlVESkNMRVZCVVROQ0xGTkJVakpDTEVOQlFXaENMRU5CU2trN1FVRmpha0l5ZFVJc1JVRkJRVUVzVFVGQlRTeEZRVUZGTlhWQ0xGTkJRVk1zUTBGQlEzbFBMRWxCWkVRN1FVRmxha0pyWjBJc1JVRkJRVUVzVDBGQlR5eEZRVUZGTTNWQ0xGTkJRVk1zUTBGQlEzbFBMRWxCWmtZN1FVRm5RbXBDSzJ0Q0xFVkJRVUZCTEU5QlFVOHNSVUZCUlhoNlFpeFRRVUZUTEVOQlFVTjVUeXhKUVdoQ1JqdEJRV2xDYWtKeFJTeEZRVUZCUVN4WlFVRlpMRVZCUVVVNVV5eFRRVUZUTEVOQlFVTjVUeXhKUVdwQ1VEdEJRV3RDYWtKelJTeEZRVUZCUVN4WlFVRlpMRVZCUVVVdlV5eFRRVUZUTEVOQlFVTjVUeXhKUVd4Q1VEdEJRVzFDYWtKdVpDeEZRVUZCUVN4UlFVRlJMRVZCUVVVd1VEdEJRVzVDVHpzN1FVTnNSRTRzVTBGQlV5dDVRaXgxUWtGQlZDeERRVUZwUTNSclF5eExRVUZxUXl4RlFVRXJRenRCUVVGQkxFMUJSVEZFT0ZBc1VVRkdNRVFzUjBGVGVFUTVVQ3hMUVZSM1JDeERRVVV4UkRoUUxGRkJSakJFTzBGQlFVRXNUVUZITVVSdmVrSXNUMEZJTUVRc1IwRlRlRVJzYWtNc1MwRlVkMFFzUTBGSE1VUnJha01zVDBGSU1FUTdRVUZCUVN4TlFVa3hSRGRvUXl4TFFVb3dSQ3hIUVZONFJISkNMRXRCVkhkRUxFTkJTVEZFY1VJc1MwRktNRVE3UVVGQlFTeE5RVXN4UkRob1F5eFBRVXd3UkN4SFFWTjRSRzVxUXl4TFFWUjNSQ3hEUVVzeFJHMXFReXhQUVV3d1JEdEJRVUZCTEUxQlRURkViMElzVFVGT01FUXNSMEZUZUVSMmEwTXNTMEZVZDBRc1EwRk5NVVIxYTBNc1RVRk9NRVE3UVVGQlFTeE5RVTh4UkVNc1UwRlFNRVFzUjBGVGVFUjRhME1zUzBGVWQwUXNRMEZQTVVSM2EwTXNVMEZRTUVRN1FVRkJRU3hOUVZFeFJFTXNXVUZTTUVRc1IwRlRlRVI2YTBNc1MwRlVkMFFzUTBGUk1VUjVhME1zV1VGU01FUTdPMEZCUVVFc2QwSkJWelZDTnpCQ0xGRkJRVUVzUTBGQlpTeExRVUZtTEVOQldEUkNPMEZCUVVFN1FVRkJRU3hOUVZkeVJIVnBRaXhUUVZoeFJEdEJRVUZCTEUxQlZ6RkRNMDRzVlVGWU1FTTdPMEZCUVVFc2VVSkJXVFZDTlZVc1VVRkJRU3hEUVVGbExFdEJRV1lzUTBGYU5FSTdRVUZCUVR0QlFVRkJMRTFCV1hKRWQybENMRk5CV25GRU8wRkJRVUVzVFVGWk1VTnFVQ3hWUVZvd1F6czdRVUZqTlVRc1RVRkJUWFZvUWl4alFVRmpMRWRCUVVkSUxFMUJRVTBzUzBGQlN5eFJRVUZZTEVsQlFYVkNibE1zVTBGQmRrSXNTVUZCYjBORUxGTkJRVE5FTzBGQlEwRXNUVUZCVFdwR0xGVkJRVlVzUjBGQlIzZFlMR05CUVdNc1IwRkJSeXhUUVVGSUxFZEJRV1VzVVVGQmFFUTdRVUZGUVN4elFrRkRSWFF3UWl4alFVRkRMR1ZCUVVRN1FVRkJhVUlzU1VGQlFTeFBRVUZQTEVWQlFVVTRlVUlzVDBGQk1VSTdRVUZCYlVNc1NVRkJRU3hQUVVGUExFVkJRVVZETEU5QlFUVkRPMEZCUVhGRUxFbEJRVUVzUzBGQlN5eEZRVUZGT1doRE8wRkJRVFZFTEd0Q1FVTkZLMDhzWTBGQlF5eFRRVUZFTzBGQlEwVXNTVUZCUVN4UFFVRlBMRVZCUVVWeE1FSXNXVUZFV0R0QlFVVkZMRWxCUVVFc1dVRkJXU3hGUVVGRk8wRkJRVUVzWVVGQlRYUm9RaXhWUVVGVkxFTkJRVU1zU1VGQlJDeERRVUZvUWp0QlFVRkJMRXRCUm1oQ08wRkJSMFVzU1VGQlFTeFpRVUZaTEVWQlFVVTdRVUZCUVN4aFFVRk5RU3hWUVVGVkxFTkJRVU1zUzBGQlJDeERRVUZvUWp0QlFVRkJMRXRCU0doQ08wRkJTVVVzU1VGQlFTeFBRVUZQTEVWQlFVVTdRVUZCUVN4aFFVRk5jVUlzVlVGQlZTeERRVUZETEVsQlFVUXNRMEZCYUVJN1FVRkJRU3hMUVVwWU8wRkJTMFVzU1VGQlFTeE5RVUZOTEVWQlFVVTdRVUZCUVN4aFFVRk5RU3hWUVVGVkxFTkJRVU1zUzBGQlJDeERRVUZvUWp0QlFVRkJPMEZCVEZZc2EwSkJUMFZ3VlN4alFVRkRMRWRCUVVRN1FVRkJTeXhKUVVGQkxFOUJRVThzUlVGQlF6dEJRVUZpTEV0QlEwZE9MRkZCUkVnc1pVRkZSVTBzWTBGQlF5eEhRVUZFTzBGQlEwVXNTVUZCUVN4VlFVRlZMRVZCUVVVc1EwRkVaRHRCUVVWRkxFbEJRVUVzZVVKQlFYbENMRVZCUVVVN1FVRkRla0p1UWl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJXbGxMRkZCUVVGQkxGVkJRVlVzUlVGQlZrRTdRVUZCUmp0QlFVUm5RanRCUVVZM1FpeHJRa0ZOUlRsakxHTkJRVU1zU1VGQlJEdEJRVU5GTEVsQlFVRXNhMEpCUVd0Q0xFVkJRVU1zUlVGRWNrSTdRVUZGUlN4SlFVRkJMRWxCUVVrc1JVRkRSbTB3UWl4TlFVRk5MRXRCUVVzc1VVRkJXQ3hKUVVGMVFrTXNVMEZCVXl4TFFVRkxMRXRCUVhKRExFZEJRMGtzWjBKQlJFb3NSMEZGU1N4cFFrRk1VanRCUVU5RkxFbEJRVUVzUzBGQlN5eEZRVUZGUkN4TlFVRk5MRXRCUVVzc1VVRkJXQ3hIUVVGelFpeFZRVUYwUWl4SFFVRnRRenRCUVZBMVF5eEpRVTVHTEVOQlJrWXNRMEZRUml4RFFVUkdMRU5CUkVZN1FVRXJRa1E3TzBGRGNFUmpMRk5CUVZOSkxFdEJRVlFzUTBGQlpUTnJReXhMUVVGbUxFVkJRVFpDTzBGQlFVRXNUVUZEYkVNd1NpeFZRVVJyUXl4SFFVTlVNVW9zUzBGRVV5eERRVU5zUXpCS0xGVkJSR3RETzBGQlFVRXNUVUZEZEVKdlJ5eFJRVVJ6UWl4SFFVTlVPVkFzUzBGRVV5eERRVU4wUWpoUUxGRkJSSE5DTzBGQlJ6RkRMSE5DUVVORlRTeGpRVUZETEVkQlFVUTdRVUZEUlN4SlFVRkJMRkZCUVZFc1JVRkJRenRCUVVSWUxFdEJSVTh4Unl4VlFVRlZMRXRCUVVzc1NVRkJaaXhIUVVGelFqdEJRVUZGUVN4SlFVRkJRU3hWUVVGVkxFVkJRVVVzU1VGQlpEdEJRVUZ2UWpkSUxFbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRTVRaXhIUVVGMFFpeEhRVUV3UkN4RlFVWnFSU3huUWtGSlJYVlBPMEZCUVU4c1NVRkJRU3hUUVVGVExFVkJRVVZvVWl4UlFVRk5MRU5CUVVOM2JFTTdRVUZCZWtJc1MwRkJhVU01TUVJc1VVRkJha01zUTBGS1JpeERRVVJHTzBGQlVVUTdRVUZGUkRZd1FpeExRVUZMTEVOQlFVTkZMRWxCUVU0c1IwRkJZWGhDTEZOQlFXSTdRVUZGUVhOQ0xFdEJRVXNzUTBGQlEwY3NTVUZCVGl4SFFVRmhOMElzVTBGQllqdEJRVVZCTUVJc1MwRkJTeXhEUVVGRFNTeE5RVUZPTEVkQlFXVjZRaXhYUVVGbU8wRkJSVUZ4UWl4TFFVRkxMRU5CUVVNMVNTeE5RVUZPTEVkQlFXVjNTQ3hYUVVGbU8wRkJSVUZ2UWl4TFFVRkxMRU5CUVVOTExGVkJRVTRzUjBGQmJVSjJRaXhsUVVGdVFqdEJRVVZCYTBJc1MwRkJTeXhEUVVGRGJrY3NSMEZCVGl4SFFVRlpiVVlzVVVGQldqdEJRVVZCWjBJc1MwRkJTeXhEUVVGRFRTeHJRa0ZCVGl4SFFVRXlRbGdzZFVKQlFUTkNPenM3TzBGRGJFTmxMRk5CUVZOWkxFbEJRVlFzVDBGclFsZzdRVUZCUVN4TlFXcENSa01zWTBGcFFrVXNVVUZxUWtaQkxHTkJhVUpGTzBGQlFVRXNUVUZvUWtZNVowSXNVVUZuUWtVc1VVRm9Ra1pCTEZGQlowSkZPMEZCUVVFc2RVSkJaa1p3YTBJc1NVRmxSVHRCUVVGQkxFMUJaa1pCTEVsQlpVVXNNRUpCWmtzc1NVRmxURHRCUVVGQkxFMUJaRVp0YkVNc1NVRmpSU3hSUVdSR1FTeEpRV05GTzBGQlFVRXNUVUZpUm5ReVFpeEpRV0ZGTEZGQllrWkJMRWxCWVVVN08wRkJRMFlzVFVGQlRYVXlRaXhqUVVGakxFZEJRVWNzVTBGQmFrSkJMR05CUVdsQ0xFTkJRVU12WkN4RFFVRkVMRVZCUVZsblpTeERRVUZhTzBGQlFVRXNWMEZEY2tKcWFFSXNVVUZCVVN4RFFVRkRPMEZCUVVVNFowSXNUVUZCUVVFc1kwRkJZeXhGUVVGRk4yUXNRMEZCYkVJN1FVRkJjVUowUlN4TlFVRkJRU3hMUVVGTExFVkJRVVZ6YVVJN1FVRkJOVUlzUzBGQlJDeERRVVJoTzBGQlFVRXNSMEZCZGtJN08wRkJSMEVzYzBKQlEwVnNNVUk3UVVGRFJTeEpRVUZCTEZOQlFWTXNSVUZCUlhkTkxGVkJRVlVzUTBGRGJrSjRaQ3hSUVVGTkxFTkJRVU00YkVNc1NVRkVXU3hGUVVWdVFuQXlRaXhKUVVGSkxFbEJRVWt2Unl4TlFVRk5MRU5CUVVOblNDeFJRVVpKTEVWQlIyNUNPVThzU1VGQlNTeExRVUZMTEVsQlFWUXNSMEZCWjBJNFNDeE5RVUZOTEVOQlFVTjVNMElzVFVGQmRrSXNSMEZCWjBONk0wSXNUVUZCVFN4RFFVRkRNRE5DTEV0QlNIQkNMRU5CUkhaQ08wRkJUVVVzU1VGQlFTeEpRVUZKTEVWQlFVTTdRVUZPVUN4TFFWRkhNa1lzU1VGQlNTeERRVUZEZEd4RExFZEJRVXdzUTBGQlV5eHBRa0ZCYVVKM2JrSXNRMEZCYWtJc1JVRkJkVUk3UVVGQlFUczdRVUZCUVN4UlFVRndRblpITEVsQlFXOUNMRk5CUVhCQ1FTeEpRVUZ2UWp0QlFVRkJMRkZCUVdSM1V5eEpRVUZqTEZOQlFXUkJMRWxCUVdNN1FVRkRMMElzVVVGQlRYUkNMRkZCUVZFc1IwRkJSek5MTEVOQlFVTXNTMEZCU3paa0xHTkJRWFpDTzBGQlEwRXNVVUZCVFhodlFpeEZRVUZGTEVkQlFVZERMRlZCUVZVc1EwRkJRM2hrTEZGQlFVMHNRMEZCUTIxdFF5eEhRVUZTTEd0RVFVTnNRbTV0UXl4UlFVRk5MRU5CUVVOdmJVTXNZMEZFVnl4RlFVTk5MRU5CUVVOMlZDeFJRVVJRTEdkRFFVVnNRamQ1UWl4UlFVRk5MRU5CUVVOeGJVTXNWMEZHVnl4RlFVVkhlRlFzVVVGR1NDeG5Ra0ZCY2tJN1FVRkpRU3gzUWtGRFJUZG9RanRCUVVORkxIVkNRVUZsTm1oQ0xGRkJSR3BDTzBGQlJVVXNUVUZCUVN4VFFVRlRMRVZCUVVWMFZpeEZRVVppTzBGQlIwVXNUVUZCUVN4SlFVRkpMRVZCUVVVMFZ5eEpRVWhTTzBGQlNVVXNUVUZCUVN4SFFVRkhMRmxCUVV0cVRTeERRVUZNTEZOQlFWTnBUU3hKUVVGVUxFTkJTa3c3UVVGTFJTeE5RVUZCTEU5QlFVOHNSVUZCUlN4cFFrRkJReXRTTEVOQlFVUTdRVUZCUVN4bFFVRTRRa1FzWTBGQll5eERRVUZETDJRc1EwRkJSQ3hGUVVGSloyVXNRMEZCU2l4RFFVRTFRenRCUVVGQkxFOUJURmc3UVVGTlJTeE5RVUZCTEVsQlFVa3NSVUZCUXp0QlFVNVFMRzlDUVZGRmJERkNMR05CUVVNc1NVRkJSRHRCUVVGTkxFMUJRVUVzUzBGQlN5eEZRVUZGTm1oQ0xGRkJRVkVzUjBGQlJ5eFBRVUZJTEVkQlFXRXNWVUZCYkVNN1FVRkJPRU1zVFVGQlFTeE5RVUZOTEVWQlFVTTdRVUZCY2tRc1QwRkRSMnhTTEVsQlJFZ3NRMEZTUml4RFFVUkdPMEZCWTBRc1IwRndRa0VzUTBGU1NDeERRVVJHTzBGQlowTkVPMEZCUlVSdGEwSXNTVUZCU1N4RFFVRkRlbnBDTEZOQlFVd3NSMEZCYVVJN1FVRkRaakI2UWl4RlFVRkJRU3hqUVVGakxFVkJRVVUxTUVJc1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDBzVlVGRWJFSTdRVUZGWm1kdlFpeEZRVUZCUVN4SlFVRkpMRVZCUVVVM01FSXNVMEZCVXl4RFFVRkRjMUVzVDBGQlZpeERRVU5LZEZFc1UwRkJVeXhEUVVGRGIwSXNTMEZCVml4RFFVRm5RanRCUVVOa2IxQXNTVUZCUVVFc1NVRkJTU3hGUVVGRmVGRXNVMEZCVXl4RFFVRkRiVUlzU1VGRVJqdEJRVVZrTm1oQ0xFbEJRVUZCTEVsQlFVa3NSVUZCUldocVFpeFRRVUZUTEVOQlFVTlJPMEZCUmtZc1IwRkJhRUlzUTBGRVNTeEZRVXRLY1Uwc1ZVRlFZVHRCUVZGbWFVZ3NSVUZCUVVFc1VVRkJVU3hGUVVGRk9WUXNVMEZCVXl4RFFVRkRlVThzU1VGQlZpeERRVUZsTlVJc1ZVRlNWanRCUVZObWRFOHNSVUZCUVVFc1NVRkJTU3hGUVVGRmVVSXNVMEZCVXl4RFFVRkRjMEk3UVVGVVJDeERRVUZxUWpzN096dEpRM0JDY1VJMmVrSTdPenM3T3pzN096czdPenM3T3pzN096czBSRUUwUWxnN1FVRkRUbTVvUWl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVNEczdjVVZCU1ZNc1ZVRkJRekZWTEVkQlFVUXNSVUZCSzBJN1FVRkRPVU1zV1VGQlN6Z3hRaXhSUVVGTUxFZEJRV2RDT1RGQ0xFZEJRV2hDTzBGQlEwUTdPMjFGUVVWakxGVkJRVU50VkN4TFFVRkVMRVZCUVhGRU8wRkJRVUVzVlVGRE1VUnhRaXhSUVVRd1JDeEhRVU0zUXl4TlFVRkxjbXRDTEV0QlJIZERMRU5CUXpGRWNXdENMRkZCUkRCRU8wRkJSV3hGUVN4TlFVRkJRU3hSUVVGUkxFTkJRVU03UVVGQlJYSkNMRkZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZCUmp0QlFVRlRkbVVzVVVGQlFVRXNTMEZCU3l4RlFVRkZkV1VzUzBGQlN5eERRVUZET0VJc1lVRkJUaXhEUVVGdlFuSm5RanRCUVVGd1F5eFBRVUZFTEVOQlFWSTdRVUZEUkRzN2FVVkJSVmtzVlVGQlEzVmxMRXRCUVVRc1JVRkJjVVE3UVVGQlFTeFZRVU40UkcxakxFMUJSSGRFTEVkQlF6ZERMRTFCUVV0dUwwSXNTMEZFZDBNc1EwRkRlRVJ0TDBJc1RVRkVkMFE3TzBGQlJXaEZMRlZCUVVsQkxFMUJRVW9zUlVGQldUdEJRVU5XUVN4UlFVRkJRU3hOUVVGTkxFTkJRVU03UVVGQlJXNWpMRlZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZCUmp0QlFVRlRkbVVzVlVGQlFVRXNTMEZCU3l4RlFVRkZkV1VzUzBGQlN5eERRVUZET0VJc1lVRkJUaXhEUVVGdlFuSm5RanRCUVVGd1F5eFRRVUZFTEVOQlFVNDdRVUZEUkR0QlFVTkdPenRyUlVGRllTeFZRVUZEZFdVc1MwRkJSQ3hGUVVGeFJEdEJRVUZCTEZWQlEzcEVhMk1zVDBGRWVVUXNSMEZETjBNc1RVRkJTMnd2UWl4TFFVUjNReXhEUVVONlJHc3ZRaXhQUVVSNVJEczdRVUZGYWtVc1ZVRkJTVUVzVDBGQlNpeEZRVUZoTzBGQlExaEJMRkZCUVVGQkxFOUJRVThzUTBGQlF6dEJRVUZGYkdNc1ZVRkJRVUVzUzBGQlN5eEZRVUZNUVN4TFFVRkdPMEZCUVZOMlpTeFZRVUZCUVN4TFFVRkxMRVZCUVVWMVpTeExRVUZMTEVOQlFVTTRRaXhoUVVGT0xFTkJRVzlDY21kQ08wRkJRWEJETEZOQlFVUXNRMEZCVUR0QlFVTkVPMEZCUTBZN08yOUZRVVZsTEZWQlFVTjFaU3hMUVVGRUxFVkJRWGRFTzBGQlFVRXNWVUZET1VReVNpeFRRVVE0UkN4SFFVTm9SQ3hOUVVGTE0zTkNMRXRCUkRKRExFTkJRemxFTW5OQ0xGTkJSRGhFT3p0QlFVVjBSU3hWUVVGSlFTeFRRVUZLTEVWQlFXVTdRVUZEWWtFc1VVRkJRVUVzVTBGQlV5eERRVUZETzBGQlFVVXpTaXhWUVVGQlFTeExRVUZMTEVWQlFVeEJMRXRCUVVZN1FVRkJVM1psTEZWQlFVRkJMRXRCUVVzc1JVRkJSWFZsTEV0QlFVc3NRMEZCUXpoQ0xHRkJRVTRzUTBGQmIwSnlaMEk3UVVGQmNFTXNVMEZCUkN4RFFVRlVPMEZCUTBRN1FVRkRSanM3T3pzN096czJRa0ZGVVR0QlFVRkJMSGRDUVZsSUxFdEJRVXQ2UlN4TFFWcEdPMEZCUVVFc1ZVRkZUSEZwUWl4UlFVWkxMR1ZCUlV4QkxGRkJSa3M3UVVGQlFTeFZRVWRNTmtJc1dVRklTeXhsUVVkTVFTeFpRVWhMTzBGQlFVRXNWVUZKVEVNc1VVRktTeXhsUVVsTVFTeFJRVXBMTzBGQlFVRXNWVUZMVERKakxGVkJURXNzWlVGTFRFRXNWVUZNU3p0QlFVRkJMRlZCVFV4c1pDeEZRVTVMTEdWQlRVeEJMRVZCVGtzN1FVRkJRU3hWUVU5TVJ5eExRVkJMTEdWQlQweEJMRXRCVUVzN1FVRkJRU3hWUVZGTWVtbENMRWxCVWtzc1pVRlJURUVzU1VGU1N6dEJRVUZCTEZWQlUwd3JPVUlzVjBGVVN5eGxRVk5NUVN4WFFWUkxPMEZCUVVFc1ZVRlZUSFZITEVsQlZrc3NaVUZWVEVFc1NVRldTenRCUVVGQkxGVkJWMHh1YUVNc1MwRllTeXhsUVZkTVFTeExRVmhMTzBGQlFVRXNWVUZqUXpobUxFOUJaRVFzUjBGallTeExRVUZMYVVrc1MwRmtiRUlzUTBGalEycEpMRTlCWkVRN1FVRm5RbEFzVlVGQlRUTkNMRTlCUVU4c1IwRkJSMmhITEZWQlFWVXNRMEZEZUVKNFpDeFJRVUZOTEVOQlFVTjViVU1zVVVGRWFVSXNSVUZGZUVJM1JTeFhRVUZYTEVOQlFVTjRWaXhKUVVaWkxFVkJSM2hDYmtvc1VVRkJVU3hIUVVGSE1tVXNWMEZCVnl4RFFVRkRNMlVzVVVGQlppeEhRVUV3UWpKbExGZEJRVmNzUTBGQlEyeGxMRTlCU0hSQ0xFVkJTWGhDY1VJc1VVRkJVU3hKUVVGSlJDeFpRVUZhTEVkQlFUSkNPR01zVjBGQlZ5eERRVUZEUXl4UFFVRjJReXhIUVVGcFJFUXNWMEZCVnl4RFFVRkRSU3hOUVVweVF5eERRVUV4UWp0QlFVOUJMREJDUVVORk9YZENMRFJDUVVOSE1sUXNTMEZCU3l4cFFrRkJTVE5VTEdOQlFVTXNVMEZCUkR0QlFVRlhMRkZCUVVFc1JVRkJSU3hGUVVGRmQxUXNSVUZCWmp0QlFVRnRRaXhSUVVGQkxFdEJRVXNzUlVGQlJVYzdRVUZCTVVJc1VVRkVXaXhsUVVWRk0xUTdRVUZEUlN3MFFrRkJhMEk0VkN4WlFVRlpMRWxCUVVsTExFOUJRV2hDTEdGQlFUWkNXQ3hGUVVFM1FpeGpRVUV3UXl4SlFVUTVSRHRCUVVWRkxIZENRVUZqVFN4WlFVRlpMRWxCUVVsRExGRkJRV2hDTEVkQlFUSkNMRTFCUVROQ0xFZEJRVzlETEU5QlJuQkVPMEZCUjBVc1VVRkJRU3hUUVVGVExFVkJRVVYyUWl4UFFVaGlPMEZCU1VVc1VVRkJRU3hSUVVGUkxFVkJRVVZRTEZGQlNsbzdRVUZMUlN4UlFVRkJMRVZCUVVVc1JVRkJSWFZDTEVWQlRFNDdRVUZOUlN4UlFVRkJMRWxCUVVrc1JVRkJSWFJwUWl4SlFVNVNPMEZCVDBVc1VVRkJRU3hOUVVGTkxFVkJRVVVzUzBGQlMyYzVRaXhWUVZCbU8wRkJVVVVzVVVGQlFTeFJRVUZSTEVWQlFVVXNTMEZCU3pOYUxGbEJVbXBDTzBGQlUwVXNVVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkJTMmRZTEZkQlZHaENPMEZCVlVVc1VVRkJRU3hUUVVGVExFVkJRVVVzUzBGQlN6bE1MR0ZCVm14Q08wRkJWMFVzVVVGQlFTeFhRVUZYTEVWQlFVVjNVQ3hYUVZobU8wRkJXVVVzVVVGQlFTeEhRVUZITEVWQlFVVXNTMEZCUzNsSExHTkJXbG83UVVGaFJTeFJRVUZCTEVsQlFVa3NSVUZCUlVZc1NVRmlVanRCUVdORkxGRkJRVUVzUzBGQlN5eEZRVUZGYm1oRE8wRkJaRlFzVVVGR1JpeEZRV3RDUjNFNFFpeFZRVUZWTEVsQlFVa3NRMEZCUXpWakxGbEJRV1lzWjBKQlEwTTVWQ3hqUVVGRExHTkJRVVE3UVVGQlowSXNVVUZCUVN4SlFVRkpMRVZCUVVVd2QwSTdRVUZCZEVJc1VVRkVSQ3hIUVVWSExFbEJjRUpPTEVWQmNVSkhOV01zV1VGQldTeHBRa0ZCU1RsVUxHTkJRVU1zWjBKQlFVUTdRVUZCYTBJc1VVRkJRU3hGUVVGRkxFVkJRVVYzVkN4RlFVRjBRanRCUVVFd1FpeFJRVUZCTEVsQlFVa3NSVUZCUlUwN1FVRkJhRU1zVVVGeVFtNUNMRU5CUkVZN1FVRjVRa1E3T3pzN1JVRTVSMjFEZEZVN08yZENRVUZxUWpneFFpeDFRa0ZMUVR0QlFVTnFRbkpxUWl4RlFVRkJRU3hSUVVGUkxFVkJRVVU1VWl4VFFVRlRMRU5CUVVOelFpeEpRVVJJTzBGQlJXcENjVk1zUlVGQlFVRXNXVUZCV1N4RlFVRkZNMVFzVTBGQlV5eERRVUZEVVN4TlFVWlFPMEZCUjJwQ2IxUXNSVUZCUVVFc1VVRkJVU3hGUVVGRk5WUXNVMEZCVXl4RFFVRkRjMElzU1VGSVNEdEJRVWxxUW1sMlFpeEZRVUZCUVN4VlFVRlZMRVZCUVVWMmQwSXNVMEZCVXl4RFFVRkRVU3hOUVVwTU8wRkJTMnBDTmxNc1JVRkJRVUVzUlVGQlJTeEZRVUZGY2xRc1UwRkJVeXhEUVVGRFVTeE5RVUZXTEVOQlFXbENjVTBzVlVGTVNqdEJRVTFxUWpsaUxFVkJRVUZCTEVsQlFVa3NSVUZCUldsUUxGTkJRVk1zUTBGQlExRXNUVUZPUXp0QlFVOXFRbWRVTEVWQlFVRkJMRXRCUVVzc1JVRkJSWGhVTEZOQlFWTXNRMEZCUTFFc1RVRlFRVHRCUVZGcVFtOTFRaXhGUVVGQlFTeE5RVUZOTEVWQlFVVTFkVUlzVTBGQlV5eERRVUZEZVU4c1NVRlNSRHRCUVZOcVFuRkdMRVZCUVVGQkxGRkJRVkVzUlVGQlJUbFVMRk5CUVZNc1EwRkJRM2xQTEVsQlFWWXNRMEZCWlRWQ0xGVkJWRkk3UVVGVmFrSTRhRUlzUlVGQlFVRXNUMEZCVHl4RlFVRkZNM1ZDTEZOQlFWTXNRMEZCUTNsUExFbEJWa1k3UVVGWGFrSXlUaXhGUVVGQlFTeFRRVUZUTEVWQlFVVndZeXhUUVVGVExFTkJRVU41VHl4SlFWaEtPMEZCV1dwQ2NXZENMRVZCUVVGQkxGZEJRVmNzUlVGQlJUbDFRaXhUUVVGVExFTkJRVU5STEUxQldrNDdRVUZoYWtJMk1FSXNSVUZCUVVFc1NVRkJTU3hGUVVGRmNqRkNMRk5CUVZNc1EwRkJRMDhzVFVGaVF6dEJRV05xUW5KTkxFVkJRVUZCTEV0QlFVc3NSVUZCUlRoTUxGTkJRVk1zUTBGQlExRTdRVUZrUVRzN1owSkJURUV5TUVJc01FSkJjMEpITzBGQlEzQkNjbXBDTEVWQlFVRkJMRkZCUVZFc1JVRkJSU3hMUVVSVk8wRkJSWEJDT0VJc1JVRkJRVUVzVVVGQlVTeEZRVUZGTEV0QlJsVTdRVUZIY0VKNWFFSXNSVUZCUVVFc1NVRkJTU3hGUVVGRk8wRkJTR003T3pzN1NVTm1TRWM3T3pzN096czdPenM3T3pzN096czdPenMwUkVFMFExZzdRVUZEVG5ob1FpeE5RVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkVTRHM3YzBWQlNWVXNWVUZCUXpGVkxFZEJRVVFzUlVGQk5FSTdRVUZETlVNc1dVRkJTMjB5UWl4VFFVRk1MRWRCUVdsQ2JqSkNMRWRCUVdwQ08wRkJRMFE3TzIxRlFVVmpMRlZCUVVOdFZDeExRVUZFTEVWQlFXdEVPMEZCUVVFc1ZVRkRka1J4UWl4UlFVUjFSQ3hIUVVNeFF5eE5RVUZMY210Q0xFdEJSSEZETEVOQlEzWkVjV3RDTEZGQlJIVkVPMEZCUlM5RVFTeE5RVUZCUVN4UlFVRlJMRU5CUVVNN1FVRkJSWEpDTEZGQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGQlJqdEJRVUZUZG1Vc1VVRkJRVUVzUzBGQlN5eEZRVUZGZFdVc1MwRkJTeXhEUVVGRE9FSXNZVUZCVGl4RFFVRnZRbkpuUWp0QlFVRndReXhQUVVGRUxFTkJRVkk3UVVGRFJEczdhVVZCUlZrc1ZVRkJRM1ZsTEV0QlFVUXNSVUZCYTBRN1FVRkJRU3hWUVVOeVJHMWpMRTFCUkhGRUxFZEJRekZETEUxQlFVdHVMMElzUzBGRWNVTXNRMEZEY2tSdEwwSXNUVUZFY1VRN08wRkJSVGRFTEZWQlFVbEJMRTFCUVVvc1JVRkJXVHRCUVVOV1FTeFJRVUZCUVN4TlFVRk5MRU5CUVVNN1FVRkJSVzVqTEZWQlFVRkJMRXRCUVVzc1JVRkJURUVzUzBGQlJqdEJRVUZUZG1Vc1ZVRkJRVUVzUzBGQlN5eEZRVUZGZFdVc1MwRkJTeXhEUVVGRE9FSXNZVUZCVGl4RFFVRnZRbkpuUWp0QlFVRndReXhUUVVGRUxFTkJRVTQ3UVVGRFJEdEJRVU5HT3p0clJVRkZZU3hWUVVGRGRXVXNTMEZCUkN4RlFVRnJSRHRCUVVGQkxGVkJRM1JFYTJNc1QwRkVjMFFzUjBGRE1VTXNUVUZCUzJ3dlFpeExRVVJ4UXl4RFFVTjBSR3N2UWl4UFFVUnpSRHM3UVVGRk9VUXNWVUZCU1VFc1QwRkJTaXhGUVVGaE8wRkJRMWhCTEZGQlFVRkJMRTlCUVU4c1EwRkJRenRCUVVGRmJHTXNWVUZCUVVFc1MwRkJTeXhGUVVGTVFTeExRVUZHTzBGQlFWTjJaU3hWUVVGQlFTeExRVUZMTEVWQlFVVjFaU3hMUVVGTExFTkJRVU00UWl4aFFVRk9MRU5CUVc5Q2NtZENPMEZCUVhCRExGTkJRVVFzUTBGQlVEdEJRVU5FTzBGQlEwWTdPMjlGUVVWbExGVkJRVU4xWlN4TFFVRkVMRVZCUVhGRU8wRkJRVUVzVlVGRE0wUXlTaXhUUVVReVJDeEhRVU0zUXl4TlFVRkxNM05DTEV0QlJIZERMRU5CUXpORU1uTkNMRk5CUkRKRU96dEJRVVZ1UlN4VlFVRkpRU3hUUVVGS0xFVkJRV1U3UVVGRFlrRXNVVUZCUVVFc1UwRkJVeXhEUVVGRE8wRkJRVVV6U2l4VlFVRkJRU3hMUVVGTExFVkJRVXhCTEV0QlFVWTdRVUZCVTNabExGVkJRVUZCTEV0QlFVc3NSVUZCUlhWbExFdEJRVXNzUTBGQlF6aENMR0ZCUVU0c1EwRkJiMEp5WjBJN1FVRkJjRU1zVTBGQlJDeERRVUZVTzBGQlEwUTdRVUZEUmpzN096czdPenMyUWtGRlVUdEJRVUZCTEhkQ1FXTklMRXRCUVV0NlJTeExRV1JHTzBGQlFVRXNWVUZGVEc4dlFpeFpRVVpMTEdWQlJVeEJMRmxCUmtzN1FVRkJRU3hWUVVkTUwyTXNVVUZJU3l4bFFVZE1RU3hSUVVoTE8wRkJRVUVzVlVGSlREWkNMRmxCU2tzc1pVRkpURUVzV1VGS1N6dEJRVUZCTEZWQlMweERMRkZCVEVzc1pVRkxURUVzVVVGTVN6dEJRVUZCTEZWQlRVd3lZeXhWUVU1TExHVkJUVXhCTEZWQlRrczdRVUZCUVN4VlFVOU1iR1FzUlVGUVN5eGxRVTlNUVN4RlFWQkxPMEZCUVVFc1ZVRlJURWNzUzBGU1N5eGxRVkZNUVN4TFFWSkxPMEZCUVVFc1ZVRlRUSHBwUWl4SlFWUkxMR1ZCVTB4QkxFbEJWRXM3UVVGQlFTeFZRVlZNS3psQ0xGZEJWa3NzWlVGVlRFRXNWMEZXU3p0QlFVRkJMRlZCVjB4d0wwSXNTVUZZU3l4bFFWZE1RU3hKUVZoTE8wRkJRVUVzVlVGWlREQnBRaXhKUVZwTExHVkJXVXhCTEVsQldrczdRVUZCUVN4VlFXRk1iR1VzUzBGaVN5eGxRV0ZNUVN4TFFXSkxPMEZCUVVFc1ZVRm5Ra000Wml4UFFXaENSQ3hIUVdkQ1lTeExRVUZMYVVrc1MwRm9RbXhDTEVOQlowSkRha2tzVDBGb1FrUTdRVUZyUWxBc1ZVRkJUVE5DTEU5QlFVOHNSMEZCUjJoSExGVkJRVlVzUTBGRGVFSjRaQ3hSUVVGTkxFTkJRVU0yYlVNc1UwRkVhVUlzUlVGRmVFSnFSaXhYUVVGWExFTkJRVU40Vml4SlFVWlpMRVZCUjNoQ2Jrb3NVVUZCVVN4SFFVRkhNbVVzVjBGQlZ5eERRVUZETTJVc1VVRkJaaXhIUVVFd1FqSmxMRmRCUVZjc1EwRkJRMnhsTEU5QlNIUkNMRVZCU1hoQ2NVSXNVVUZCVVN4SlFVRkpSQ3haUVVGYUxFZEJRVEpDT0dNc1YwRkJWeXhEUVVGRFF5eFBRVUYyUXl4SFFVRnBSRVFzVjBGQlZ5eERRVUZEUlN4TlFVcHlReXhGUVV0NFFtcG9ReXhKUVVGSkxFdEJRVXNzU1VGQlZDeEhRVUZuUWpoSUxFMUJRVTBzUTBGQlEza3pRaXhOUVVGMlFpeEhRVUZuUTNvelFpeE5RVUZOTEVOQlFVTXdNMElzUzBGTVppeERRVUV4UWl4RFFXeENUenRCUVRKQ1VEczdRVUZEUVN4VlFVRk5lVWNzVDBGQlR5eEhRVUZIZG1wQ0xFbEJRVWtzUzBGQlN5eFJRVUZVTEVkQlFXOUNMRTFCUVhCQ0xFZEJRVFpDZWtZc1UwRkJOME03UVVGRlFTd3dRa0ZEUlRsTkxEUkNRVU5ITWxRc1MwRkJTeXhwUWtGQlNUTlVMR05CUVVNc1UwRkJSRHRCUVVGWExGRkJRVUVzUlVGQlJTeEZRVUZGZDFRc1JVRkJaanRCUVVGdFFpeFJRVUZCTEV0QlFVc3NSVUZCUlVjN1FVRkJNVUlzVVVGRVdpeGxRVVZGTTFRN1FVRkRSU3cwUWtGQmEwSTRWQ3haUVVGWkxFbEJRVWxMTEU5QlFXaENMR0ZCUVRaQ1dDeEZRVUUzUWl4alFVRXdReXhKUVVRNVJEdEJRVVZGTEhkQ1FVRmpUU3haUVVGWkxFbEJRVWxETEZGQlFXaENMRWRCUVRKQ0xFMUJRVE5DTEVkQlFXOURMRTlCUm5CRU8wRkJSMFVzVVVGQlFTeFpRVUZaTEVWQlFVVnBZaXhaUVVob1FqdEJRVWxGTEZGQlFVRXNVMEZCVXl4RlFVRkZlR01zVDBGS1lqdEJRVXRGTEZGQlFVRXNVVUZCVVN4RlFVRkZVQ3hSUVV4YU8wRkJUVVVzVVVGQlFTeEZRVUZGTEVWQlFVVjFRaXhGUVU1T08wRkJUMFVzVVVGQlFTeEpRVUZKTEVWQlFVVjBhVUlzU1VGUVVqdEJRVkZGTEZGQlFVRXNUVUZCVFN4RlFVRkZMRXRCUVV0bk9VSXNWVUZTWmp0QlFWTkZMRkZCUVVFc1VVRkJVU3hGUVVGRkxFdEJRVXN6V2l4WlFWUnFRanRCUVZWRkxGRkJRVUVzVDBGQlR5eEZRVUZGTEV0QlFVdG5XQ3hYUVZab1FqdEJRVmRGTEZGQlFVRXNVMEZCVXl4RlFVRkZMRXRCUVVzNVRDeGhRVmhzUWp0QlFWbEZMRkZCUVVFc1QwRkJUeXhGUVVGRmNWY3NUMEZhV0R0QlFXRkZMRkZCUVVFc1YwRkJWeXhGUVVGRk4wY3NWMEZpWmp0QlFXTkZMRkZCUVVFc1IwRkJSeXhGUVVGRkxFdEJRVXM0Unl4bFFXUmFPMEZCWlVVc1VVRkJRU3hKUVVGSkxFVkJRVVY0YWtJc1NVRm1VanRCUVdkQ1JTeFJRVUZCTEV0QlFVc3NSVUZCUld4bE8wRkJhRUpVTEZGQlJrWXNSVUZ2UWtkeE9FSXNWVUZCVlN4SlFVRkpMRU5CUVVNMVl5eFpRVUZtTEdkQ1FVTkRPVlFzWTBGQlF5eGpRVUZFTzBGQlFXZENMRkZCUVVFc1NVRkJTU3hGUVVGRk1IZENPMEZCUVhSQ0xGRkJSRVFzUjBGRlJ5eEpRWFJDVGl4RlFYVkNSelZqTEZsQlFWa3NhVUpCUVVrNVZDeGpRVUZETEdkQ1FVRkVPMEZCUVd0Q0xGRkJRVUVzUlVGQlJTeEZRVUZGZDFRc1JVRkJkRUk3UVVGQk1FSXNVVUZCUVN4SlFVRkpMRVZCUVVWTk8wRkJRV2hETEZGQmRrSnVRaXhEUVVSR08wRkJNa0pFT3pzN08wVkJka2x2UTNSVk96dG5Ra0ZCYkVKdE1rSXNkMEpCUzBFN1FVRkRha0l6Unl4RlFVRkJRU3haUVVGWkxFVkJRVVUzZFVJc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENMRU5CUXpWQ0xHdENRVVEwUWl4RlFVVTFRaXhqUVVZMFFpeEZRVWMxUWl4SlFVZzBRaXhGUVVrMVFpeExRVW8wUWl4RlFVczFRaXhWUVV3MFFpeERRVUZvUWl4RFFVUkhPMEZCVVdwQ05sSXNSVUZCUVVFc1VVRkJVU3hGUVVGRk9WSXNVMEZCVXl4RFFVRkRjMElzU1VGU1NEdEJRVk5xUW5GVExFVkJRVUZCTEZsQlFWa3NSVUZCUlROVUxGTkJRVk1zUTBGQlExRXNUVUZVVUR0QlFWVnFRbTlVTEVWQlFVRkJMRkZCUVZFc1JVRkJSVFZVTEZOQlFWTXNRMEZCUTNOQ0xFbEJWa2c3UVVGWGFrSnBka0lzUlVGQlFVRXNWVUZCVlN4RlFVRkZkbmRDTEZOQlFWTXNRMEZCUTFFc1RVRllURHRCUVZscVFqWlRMRVZCUVVGQkxFVkJRVVVzUlVGQlJYSlVMRk5CUVZNc1EwRkJRMUVzVFVGQlZpeERRVUZwUW5GTkxGVkJXa283UVVGaGFrSXlSeXhGUVVGQlFTeExRVUZMTEVWQlFVVjRWQ3hUUVVGVExFTkJRVU5STEUxQllrRTdRVUZqYWtKNlVDeEZRVUZCUVN4SlFVRkpMRVZCUVVWcFVDeFRRVUZUTEVOQlFVTlJMRTFCWkVNN1FVRmxha0p2ZFVJc1JVRkJRVUVzVFVGQlRTeEZRVUZGTlhWQ0xGTkJRVk1zUTBGQlEzbFBMRWxCWmtRN1FVRm5RbXBDY1VZc1JVRkJRVUVzVVVGQlVTeEZRVUZGT1ZRc1UwRkJVeXhEUVVGRGVVOHNTVUZCVml4RFFVRmxOVUlzVlVGb1FsSTdRVUZwUW1wQ09HaENMRVZCUVVGQkxFOUJRVThzUlVGQlJUTjFRaXhUUVVGVExFTkJRVU41VHl4SlFXcENSanRCUVd0Q2FrSXlUaXhGUVVGQlFTeFRRVUZUTEVWQlFVVndZeXhUUVVGVExFTkJRVU41VHl4SlFXeENTanRCUVcxQ2FrSnhaMElzUlVGQlFVRXNWMEZCVnl4RlFVRkZPWFZDTEZOQlFWTXNRMEZCUTFFc1RVRnVRazQ3UVVGdlFtcENPVkVzUlVGQlFVRXNTVUZCU1N4RlFVRkZjMUVzVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRVU1zU1VGQlJDeEZRVUZQTEVsQlFWQXNRMEZCYUVJc1EwRndRbGM3UVVGeFFtcENiVk1zUlVGQlFVRXNTVUZCU1N4RlFVRkZjRk1zVTBGQlV5eERRVUZEUXl4TFFVRldMRU5CUVdkQ0xFTkJRM0JDTEUxQlJHOUNMRVZCUlhCQ0xFOUJSbTlDTEVWQlIzQkNMRkZCU0c5Q0xFVkJTWEJDTEZWQlNtOUNMRVZCUzNCQ0xFMUJURzlDTEVWQlRYQkNMRXRCVG05Q0xFTkJRV2hDTEVOQmNrSlhPMEZCTmtKcVFpOU1MRVZCUVVGQkxFdEJRVXNzUlVGQlJUaE1MRk5CUVZNc1EwRkJRMUU3UVVFM1FrRTdPMmRDUVV4Qlp6RkNMREpDUVhGRFJ6dEJRVU53UWpGcVFpeEZRVUZCUVN4UlFVRlJMRVZCUVVVc1MwRkVWVHRCUVVWd1FqaENMRVZCUVVGQkxGRkJRVkVzUlVGQlJTeExRVVpWTzBGQlIzQkNiR3RDTEVWQlFVRkJMRWxCUVVrc1JVRkJSU3hKUVVoak8wRkJTWEJDTUdsQ0xFVkJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVcGpPenRCUTNwRlZDeFRRVUZUZVdwQ0xFdEJRVlFzVDBGTlREdEJRVUZCTEUxQlRGSjJha0lzVFVGTFVTeFJRVXhTUVN4TlFVdFJPMEZCUVVFc2QwSkJTbEk1V1N4TFFVbFJPMEZCUVVFc1RVRktVa0VzUzBGSlVTd3lRa0ZLUVN4VlFVbEJPMEZCUVVFc1RVRklVbWRZTEVsQlIxRXNVVUZJVWtFc1NVRkhVVHRCUVVGQkxFMUJSbEp6YkVJc1UwRkZVU3hSUVVaU1FTeFRRVVZSTzBGQlFVRXNhVU5CUkZKRExHTkJRMUU3UVVGQlFTeE5RVVJTUVN4alFVTlJMRzlEUVVSVExGRkJRMVE3UVVGRFVpeHpRa0ZEUld3eVFpeGpRVUZETEVkQlFVUTdRVUZCU3l4SlFVRkJMRmxCUVZrc1JVRkJSU3hEUVVGdVFqdEJRVUZ6UWl4SlFVRkJMRkZCUVZFc1JVRkJSU3hEUVVGb1F6dEJRVUZ0UXl4SlFVRkJMRkZCUVZFc1JVRkJSU3hIUVVFM1F6dEJRVUZyUkN4SlFVRkJMRXRCUVVzc1JVRkJRenRCUVVGNFJDeHJRa0ZEUlVFc1kwRkJReXhIUVVGRU8wRkJRVXNzU1VGQlFTeExRVUZMTEVWQlFVVnlSeXhMUVVGYU8wRkJRVzFDTEVsQlFVRXNSMEZCUnl4TlFVRjBRanRCUVVGMVFpeEpRVUZCTEU5QlFVOHNSVUZCUlN4RFFVRm9RenRCUVVGdFF5eEpRVUZCTEZGQlFWRXNSVUZCUXp0QlFVRTFReXhyUWtGRFJYRkhMR05CUVVNc1IwRkJSRHRCUVVORkxFbEJRVUVzVDBGQlR5eEZRVUZETEUxQlJGWTdRVUZGUlN4SlFVRkJMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJSbVk3UVVGSFJTeEpRVUZCTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CU0doQ08wRkJTVVVzU1VGQlFTeFZRVUZWTEVWQlFVTTdRVUZLWWl4TFFVMUhhVEpDTEZOQlFWTXNaMEpCUTFKcU1rSXNZMEZCUXl4SFFVRkVPMEZCUTBVc1NVRkJRU3hQUVVGUExFVkJRVU1zVFVGRVZqdEJRVVZGTEVsQlFVRXNTVUZCU1N4RlFVRkRMRTFCUmxBN1FVRkhSU3hKUVVGQkxHTkJRV01zUlVGQlF5eFJRVWhxUWp0QlFVbEZMRWxCUVVFc1VVRkJVU3hGUVVGRk8wRkJTbG9zYTBKQlRVVkJMR05CUVVNc1NVRkJSRHRCUVVORkxFbEJRVUVzVVVGQlVTeEZRVUZGYXpKQ0xHTkJRV01zUzBGQlN5eFJRVUZ1UWl4SFFVRTRRaXhSUVVFNVFpeEhRVUY1UXl4RFFVUnlSRHRCUVVWRkxFbEJRVUVzVFVGQlRTeEZRVUZGUVN4alFVRmpMRXRCUVVzc1YwRkJia0lzUjBGQmFVTXNSVUZCYWtNc1IwRkJjME1zUlVGR2FFUTdRVUZIUlN4SlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVoVUxFdEJTMGRFTEZOQlRFZ3NRMEZPUml4RFFVUlJMRWRCWlU0c1NVRnlRazRzWlVGelFrVnFNa0lzWTBGQlF5eEhRVUZFTzBGQlEwVXNTVUZCUVN4UFFVRlBMRVZCUVVNc1RVRkVWanRCUVVWRkxFbEJRVUVzVTBGQlV5eEZRVUZETEZGQlJsbzdRVUZIUlN4SlFVRkJMRWxCUVVrc1JVRkJReXhOUVVoUU8wRkJTVVVzU1VGQlFTeGpRVUZqTEVWQlFVTXNVVUZLYWtJN1FVRkxSU3hKUVVGQkxGRkJRVkVzUlVGQlJUdEJRVXhhTEd0Q1FVOUZRU3hqUVVGRExFbEJRVVE3UVVGRFJTeEpRVUZCTEV0QlFVc3NSVUZCUXl4UFFVUlNPMEZCUlVVc1NVRkJRU3hMUVVGTExFVkJRVVVzUTBGQlEya3lRaXhUUVVGRUxFbEJRV01zUTBGQlEzaHFRaXhOUVVGbUxFZEJRWGRDTEZGQlFYaENMRWRCUVcxRE8wRkJSalZETEV0QlNVYzVRaXhKUVVwSUxFTkJVRVlzUTBGMFFrWXNSVUZ2UTBjNFFpeE5RVUZOTEdkQ1FVTk1lbE1zWTBGQlF5eEhRVUZFTzBGQlFVc3NTVUZCUVN4SlFVRkpMRVZCUVVNc1RVRkJWanRCUVVGcFFpeEpRVUZCTEZGQlFWRXNSVUZCUlR0QlFVRXpRaXhMUVVOSGVWTXNUVUZFU0N4RFFVUkxMRWRCU1Vnc1NVRjRRMDRzUTBGRVJpeERRVVJHTEVOQlJFWTdRVUZuUkVRN1FVRkZSSFZxUWl4TFFVRkxMRU5CUVVNek1FSXNVMEZCVGl4SFFVRnJRanRCUVVOb1FtOVNMRVZCUVVGQkxFMUJRVTBzUlVGQlJYUlRMRk5CUVZNc1EwRkJRMjFDTEVsQlJFWTdRVUZGYUVJelNDeEZRVUZCUVN4TFFVRkxMRVZCUVVWM1J5eFRRVUZUTEVOQlFVTkRMRXRCUVZZc1EwRkJaMElzUTBGQlF5eFZRVUZFTEVWQlFXRXNTMEZCWWl4RFFVRm9RaXhEUVVaVE8wRkJSMmhDZFZFc1JVRkJRVUVzU1VGQlNTeEZRVUZGZUZFc1UwRkJVeXhEUVVGRFRTeFRRVUZXTEVOQlFXOUNMRU5CUVVOT0xGTkJRVk1zUTBGQlExRXNUVUZCV0N4RlFVRnRRbElzVTBGQlV5eERRVUZEYjJVc1QwRkJOMElzUTBGQmNFSXNSVUZCTWtSMlVpeFZRVWhxUkR0QlFVbG9RbWx3UWl4RlFVRkJRU3hUUVVGVExFVkJRVVU1TVVJc1UwRkJVeXhEUVVGRGJVSXNTVUZLVER0QlFVdG9RalF3UWl4RlFVRkJRU3hqUVVGakxFVkJRVVV2TVVJc1UwRkJVeXhEUVVGRFF5eExRVUZXTEVOQlFXZENMRU5CUVVNc1VVRkJSQ3hGUVVGWExGZEJRVmdzUlVGQmQwSXNVVUZCZUVJc1EwRkJhRUk3UVVGTVFTeERRVUZzUWpzN1FVTm9SVUVzU1VGQlRTc3hRaXhKUVVGSkxFZEJRVWNzVTBGQlVFRXNTVUZCVHl4SFFVRk5MRVZCUVc1Q096dEJRVU5CTEVsQlFVMURMRTlCUVU4c1IwRkJSeXhIUVVGb1FqdEJRVlZCTEVsQlFVMURMRmxCUVZrc1IwRkJSenRCUVVGRlF5eEZRVUZCUVN4WFFVRlhMRVZCUVVVc1MwRkJaanRCUVVGelFrTXNSVUZCUVVFc1YwRkJWeXhGUVVGRkxFdEJRVzVETzBGQlFUQkRReXhGUVVGQlFTeE5RVUZOTEVWQlFVVTdRVUZCYkVRc1EwRkJja0k3TzBGQlJVRXNTVUZCVFVNc1QwRkJUeXhIUVVGSExGTkJRVlpCTEU5QlFWVXNRMEZCUTNKaExFdEJRVVFzUlVGQlVYTmhMRTFCUVZJc1JVRkJiVUk3UVVGRGFrTXNWVUZCVVVFc1RVRkJUU3hEUVVGRGJtdENMRWxCUVdZN1FVRkRSU3hUUVVGTExHRkJRVXc3UVVGRFJTd3JRMEZEU3paS0xFdEJSRXc3UVVGRlJXdGhMRkZCUVVGQkxGZEJRVmNzUlVGQlJTeEpRVVptTzBGQlIwVkZMRkZCUVVGQkxFMUJRVTBzUlVGQlJUdEJRVWhXT3p0QlFVdEdMRk5CUVVzc1lVRkJURHRCUVVORkxDdERRVU5MY0dFc1MwRkVURHRCUVVWRmJXRXNVVUZCUVVFc1YwRkJWeXhGUVVGRkxFbEJSbVk3UVVGSFJVTXNVVUZCUVVFc1RVRkJUU3hGUVVGRk8wRkJTRlk3TzBGQlMwWXNVMEZCU3l4alFVRk1PMEZCUTBVc0swTkJRMHR3WVN4TFFVUk1PMEZCUlVWcllTeFJRVUZCUVN4WFFVRlhMRVZCUVVVN1FVRkdaaXhUUVVkTkxFTkJRVU5zWVN4TFFVRkxMRU5CUVVOdFlTeFhRVUZRTEVkQlFYRkNPMEZCUVVWRExGRkJRVUZCTEUxQlFVMHNSVUZCUlR0QlFVRldMRTlCUVhKQ0xFZEJRWGxETEVWQlNDOURPenRCUVV0R0xGTkJRVXNzWTBGQlREdEJRVU5GTEN0RFFVTkxjR0VzUzBGRVREdEJRVVZGYldFc1VVRkJRVUVzVjBGQlZ5eEZRVUZGTzBGQlJtWXNVMEZIVFN4RFFVRkRibUVzUzBGQlN5eERRVUZEYTJFc1YwRkJVQ3hIUVVGeFFqdEJRVUZGUlN4UlFVRkJRU3hOUVVGTkxFVkJRVVU3UVVGQlZpeFBRVUZ5UWl4SFFVRjVReXhGUVVndlF6czdRVUZMUmp0QlFVTkZMRmxCUVUwc1NVRkJTVWNzUzBGQlNpeEZRVUZPTzBGQk1VSktPMEZCTkVKRUxFTkJOMEpFT3p0QlFTdENRU3hCUVVGbExGTkJRVk5ETEU5QlFWUXNUMEZOVER0QlFVRkJMRTFCVEZKc00wSXNVVUZMVVN4UlFVeFNRU3hSUVV0Uk8wRkJRVUVzVFVGS1VqQklMRWxCU1ZFc1VVRktVa0VzU1VGSlVUdEJRVUZCTEdsRFFVaFNkMU1zWTBGSFVUdEJRVUZCTEUxQlNGSkJMR05CUjFFc2IwTkJTRk1zVFVGSFZEdEJRVUZCTEUxQlJsSjBUaXhOUVVWUkxGRkJSbEpCTEUxQlJWRTdRVUZCUVN4TlFVUlNjVVVzU1VGRFVTeFJRVVJTUVN4SlFVTlJPenRCUVVGQkxEQkNRVU5yUW01U0xGVkJRVUVzUTBGQmFVSnBNMElzVDBGQmFrSXNSVUZCTUVKS0xGbEJRVEZDTEVOQlJHeENPMEZCUVVFN1FVRkJRU3hOUVVORWFtRXNTMEZFUXp0QlFVRkJMRTFCUTAxNVlTeFJRVVJPT3p0QlFVRkJMRTFCUlVGTUxFMUJSa0VzUjBGRlYzQmhMRXRCUmxnc1EwRkZRVzloTEUxQlJrRTdRVUZKVWl4TlFVRk5UU3hSUVVGUkxFZEJRVWQwTTBJc1RVRkJRU3hEUVVFNFFpeEpRVUU1UWl4RFFVRnFRanRCUVVwUkxFMUJTMU4xWml4TlFVeFVMRWRCUzI5Q0sxZ3NVVUZNY0VJc1EwRkxRWGhwUWl4UFFVeEJPenRCUVU5U0xFMUJRVTE1YVVJc2IwSkJRVzlDTEVkQlFVY3NVMEZCZGtKQkxHOUNRVUYxUWl4SFFVRk5PMEZCUTJwRFJpeEpRVUZCUVN4UlFVRlJMRU5CUVVNN1FVRkJSWFJyUWl4TlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGQlVpeExRVUZFTEVOQlFWSTdRVUZEUkN4SFFVWkVPenRCUVVsQkxFMUJRVTE1YTBJc2IwSkJRVzlDTEVkQlFVY3NVMEZCZGtKQkxHOUNRVUYxUWl4SFFVRk5PMEZCUTJwRGVHRXNTVUZCUVVFc1ZVRkJWU3hEUVVGRExGbEJRVTA3UVVGRFpuRmhMRTFCUVVGQkxGRkJRVkVzUTBGQlF6dEJRVUZGZEd0Q0xGRkJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVRlNMRTlCUVVRc1EwRkJVanRCUVVORUxFdEJSbE1zUlVGRlVEWnFRaXhQUVVaUExFTkJRVlk3UVVGSFJDeEhRVXBFT3p0QlFVMUJMRTFCUVUxaExHOUNRVUZ2UWl4SFFVRkhMRk5CUVhaQ1FTeHZRa0ZCZFVJc1IwRkJUVHRCUVVOcVEwb3NTVUZCUVVFc1VVRkJVU3hEUVVGRE8wRkJRVVYwYTBJc1RVRkJRVUVzU1VGQlNTeEZRVUZGTzBGQlFWSXNTMEZCUkN4RFFVRlNPMEZCUTBRc1IwRkdSRHM3UVVGSlFTeE5RVUZOTW10Q0xHOUNRVUZ2UWl4SFFVRkhMRk5CUVhaQ1FTeHZRa0ZCZFVJc1IwRkJUVHRCUVVOcVF6RmhMRWxCUVVGQkxGVkJRVlVzUTBGQlF5eFpRVUZOTzBGQlEyWnhZU3hOUVVGQlFTeFJRVUZSTEVOQlFVTTdRVUZCUlhSclFpeFJRVUZCUVN4SlFVRkpMRVZCUVVVN1FVRkJVaXhQUVVGRUxFTkJRVkk3UVVGRFJDeExRVVpUTEVWQlJWQTJha0lzVDBGR1R5eERRVUZXTzBGQlIwUXNSMEZLUkRzN1FVRk5RU3h6UWtGRFJYQXlRaXhqUVVGRExFZEJRVVE3UVVGQlN5eEpRVUZCTEU5QlFVOHNSVUZCUlhOTkxFMUJRVTBzUjBGQlJ5eGhRVUZJTEVkQlFXMUNPMEZCUVhaRExHdENRVU5GZEUwc1kwRkJReXhIUVVGRU8wRkJRMFVzYTBKQlFWa3lVU3hKUVVSa08wRkJSVVVzU1VGQlFTeEhRVUZITEVWQlFVVnRiVUlzVVVGR1VEdEJRVWRGTEVsQlFVRXNUMEZCVHl4RlFVRkZReXh2UWtGSVdEdEJRVWxGTEVsQlFVRXNUVUZCVFN4RlFVRkZReXh2UWtGS1ZqdEJRVXRGTEVsQlFVRXNXVUZCV1N4RlFVRkZSQ3h2UWtGTWFFSTdRVUZOUlN4SlFVRkJMRmxCUVZrc1JVRkJSVU03UVVGT2FFSXNTMEZSUjNRelFpeFJRVkpJTEVOQlJFWXNSVUZYUnpneVFpeE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRlbGdzVFVGQldpeHBRa0ZEUXk5bExHTkJRVU1zUzBGQlJDeHhRa0ZEUlVFc1kwRkJReXhWUVVGRU8wRkJRMFVzU1VGQlFTeE5RVUZOTEVWQlFVVXJaU3hOUVVSV08wRkJSVVVzU1VGQlFTeExRVUZMTEVWQlFVVXNTMEZHVkR0QlFVZEZMRWxCUVVFc1QwRkJUeXhGUVVGRExGVkJTRlk3UVVGSlJTeEpRVUZCTEUxQlFVMHNSVUZCUlN4TFFVcFdPMEZCUzBVc1NVRkJRU3hqUVVGakxFVkJRVVZ1Uml4alFVeHNRanRCUVUxRkxFbEJRVUVzVTBGQlV5eEZRVUZGZFdNc1NVRk9ZanRCUVU5RkxFbEJRVUVzZDBKQlFYZENMRVZCUVVVc1MwRlFOVUk3UVVGUlJTeEpRVUZCTEZGQlFWRXNSVUZCUlN4RFFWSmFPMEZCVTBVc1NVRkJRU3hKUVVGSkxFVkJRVVU3UVVGVVVpeHJRa0ZYUlc0eVFpeGpRVUZETEVkQlFVUTdRVUZEUlN4SlFVRkJMRkZCUVZFc1JVRkJSU3hIUVVSYU8wRkJSVVVzU1VGQlFTeFBRVUZQTEVWQlFVVXNRMEZHV0R0QlFVZEZMRWxCUVVFc1RVRkJUU3hGUVVGRmIwZ3NTVUZCU1N4SFFVRkhPSFpDTEc5Q1FVRklMRWRCUVRCQ2NIRkNMRk5CU0hoRE8wRkJTVVVzU1VGQlFTeFBRVUZQTEVWQlFVVXhSaXhKUVVGSkxFZEJRVWMyZGtJc2IwSkJRVWdzUjBGQk1FSnVjVUlzVTBGS2VrTTdRVUZMUlN4SlFVRkJMRmxCUVZrc1JVRkJSVEZHTEVsQlFVa3NSMEZCUnpaMlFpeHZRa0ZCU0N4SFFVRXdRbTV4UWl4VFFVdzVRenRCUVUxRkxFbEJRVUVzV1VGQldTeEZRVUZGTVVZc1NVRkJTU3hIUVVGSE9IWkNMRzlDUVVGSUxFZEJRVEJDY0hGQ0xGTkJUamxETzBGQlQwVXNTVUZCUVN4SlFVRkpMRVZCUVVNc1UwRlFVRHRCUVZGRkxFbEJRVUVzVVVGQlVTeEZRVUZGTzBGQlVsb3NhMEpCVlVVNVRTeGpRVUZETEVsQlFVUTdRVUZCVFN4SlFVRkJMRXRCUVVzc1JVRkJReXhQUVVGYU8wRkJRVzlDTEVsQlFVRXNTVUZCU1N4RlFVRkRPMEZCUVhwQ0xFdEJRMGN5VVN4SlFVUklMRU5CVmtZc1JVRmhSM1pLTEVsQlFVa3NhVUpCUVVsd1NDeGpRVUZETEVkQlFVUTdRVUZCU3l4SlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVGb1FpeExRVUZ2UW05SUxFbEJRWEJDTEVOQllsZ3NRMEZZUml4RFFVUkdMRU5CV2tvc1EwRkVSanRCUVRaRFJEczdPenRKUXk5SGIwSXJka0k3T3pzN096czdPenM3T3pzN096czdPenMwUkVGWFdEdEJRVU5PUXl4TlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGRVNEczdjVVZCU1ZNc1ZVRkJRek16UWl4SFFVRkVMRVZCUVRCQ08wRkJRM3BETEZsQlFVczBNMElzVVVGQlRDeEhRVUZuUWpVelFpeEhRVUZvUWp0QlFVTkVPenN5UkVGRlRTeFZRVUZETmpOQ0xFOUJRVVFzUlVGQmNVSTdRVUZETVVJc1ZVRkJTU3hOUVVGTFJDeFJRVUZVTEVWQlFXMUNPMEZCUVVFc01FSkJRMVVzVFVGQlMzcHVReXhMUVVSbU8wRkJRVUVzV1VGRFZESnVReXhSUVVSVExHVkJRMVJCTEZGQlJGTTdRVUZCUVN4WlFVTkRReXhKUVVSRUxHVkJRME5CTEVsQlJFUTdPMEZCUVVFc2IwTkJSVThzVFVGQlMwZ3NVVUZCVEN4RFFVRmpjRmtzY1VKQlFXUXNSVUZHVUR0QlFVRkJMRmxCUlZScWFVSXNTVUZHVXl4NVFrRkZWRUVzU1VGR1V6dEJRVUZCTEZsQlJVaDVRaXhMUVVaSExIbENRVVZJUVN4TFFVWkhPenRCUVVkcVFpeFpRVUZOWnpWQ0xFOUJRVThzUjBGQlJ6VnRReXhKUVVGSkxFTkJRVU50YkVJc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQldXNXNRaXhKUVVGSkxFTkJRVU0yYlVNc1IwRkJUQ3hEUVVGVExFTkJRVU5LTEU5QlFVOHNSMEZCUjNRMlFpeEpRVUZZTEVsQlFXMUNlVUlzUzBGQk5VSXNSVUZCYlVNc1EwRkJia01zUTBGQldpeERRVUZvUWp0QlFVTkJMRmxCUVUxck5VSXNUMEZCVHl4SFFVRkhSaXhQUVVGUExFZEJRVWRHTEZGQlFURkNPMEZCUTBGRExGRkJRVUZCTEVsQlFVa3NRMEZCUTBjc1QwRkJSQ3hEUVVGS08wRkJRMFE3UVVGRFJqczdaMFZCUlZjc1ZVRkJReTlyUWl4TFFVRkVPMEZCUVVFc1lVRkRWa0VzUzBGQlN5eERRVUZEYzFrc1pVRkJUaXhGUVVSVk8wRkJRVUU3TzNORlFVZE5MRlZCUVVOMFdTeExRVUZFTEVWQlFXZEVPMEZCUTJoRlFTeE5RVUZCUVN4TFFVRkxMRU5CUVVOMVdTeGpRVUZPTzBGQlJHZEZMRlZCUlhoRWVVMHNZMEZHZDBRc1IwRkZja01zVFVGQlMyaHZReXhMUVVablF5eERRVVY0UkdkdlF5eGpRVVozUkR0QlFVZG9SVUVzVFVGQlFVRXNZMEZCWXl4RFFVRkRhR3hDTEV0QlFVUXNRMEZCWkRzN1FVRkRRU3haUVVGTGVVb3NVVUZCVEN4RFFVRmpPMEZCUVVVcllTeFJRVUZCUVN4UFFVRlBMRVZCUVVVN1FVRkJXQ3hQUVVGa096dEJRVU5CTEZsQlFVdEpMRWxCUVV3c1EwRkJWVFZyUWl4TFFVRkxMRU5CUVVNd2EwSXNUMEZCYUVJN1FVRkRSRHM3ZFVWQlJXdENMRlZCUVVNeGEwSXNTMEZCUkN4RlFVRm5SRHRCUVVGQkxGVkJRM3BFYVd4Q0xGbEJSSGxFTEVkQlEzaERMRTFCUVV0cWIwTXNTMEZFYlVNc1EwRkRla1JwYjBNc1dVRkVlVVE3UVVGQlFTeFZRVVY2UkZRc1QwRkdlVVFzUjBGRk4wTXNUVUZCUzJoaUxFdEJSbmRETEVOQlJYcEVaMklzVDBGR2VVUTdPMEZCU1dwRkxGVkJRVWxCTEU5QlFVb3NSVUZCWVR0QlFVTllMR05CUVVzdllTeFJRVUZNTEVOQlFXTTdRVUZCUlN0aExGVkJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRllMRk5CUVdRN08wRkJRMEZUTEZGQlFVRkJMRmxCUVZrc1EwRkJRMnBzUWl4TFFVRkVMRU5CUVZvN1FVRkRSRHRCUVVOR096dHpSVUZGYVVJc1ZVRkJRMEVzUzBGQlJDeEZRVUZuUkR0QlFVTm9SVUVzVFVGQlFVRXNTMEZCU3l4RFFVRkRkVmtzWTBGQlRqdEJRVVJuUlN4VlFVVjRSR2xOTEU5QlJuZEVMRWRCUlRWRExFMUJRVXRvWWl4TFFVWjFReXhEUVVWNFJHZGlMRTlCUm5kRU96dEJRVWRvUlN4VlFVRkpRU3hQUVVGS0xFVkJRV0U3UVVGRFdDeGpRVUZMU1N4SlFVRk1MRU5CUVZVMWEwSXNTMEZCU3l4RFFVRkRNR3RDTEU5QlFXaENPMEZCUTBRN1FVRkRSanM3YjBWQlJXVXNWVUZCUXpGclFpeExRVUZFTEVWQlFXZEVPMEZCUVVFc1ZVRkRkRVJwYkVJc1dVRkVjMFFzUjBGRGNrTXNUVUZCUzJwdlF5eExRVVJuUXl4RFFVTjBSR2x2UXl4WlFVUnpSRHM3UVVGRk9VUXNXVUZCUzNoaUxGRkJRVXdzUTBGQll6dEJRVUZGSzJFc1VVRkJRVUVzVDBGQlR5eEZRVUZGTzBGQlFWZ3NUMEZCWkRzN1FVRkRRVk1zVFVGQlFVRXNXVUZCV1N4RFFVRkRhbXhDTEV0QlFVUXNRMEZCV2p0QlFVTkVPenM3T3pzN096WkNRVVZSTzBGQlFVRXNlVUpCUXpKQ0xFdEJRVXRvYWtJc1MwRkVhRU03UVVGQlFTeFZRVU5EYTI5RExGZEJSRVFzWjBKQlEwTkJMRmRCUkVRN1FVRkJRU3hWUVVOalVDeFJRVVJrTEdkQ1FVTmpRU3hSUVVSa08wRkJSVkFzVlVGQlRUazBRaXhMUVVGTExHRkJRVTAxVGl4SlFVRkpMRU5CUVVNeU1VSXNTMEZCVEN4RFFVRlpjMUlzVjBGQlZ5eEhRVUZITEV0QlFXWXNSMEZCZDBKUUxGRkJRVzVETEVsQlFTdERMRWRCUVhKRUxFMUJRVmc3UVVGRFFTd3dRa0ZEUlhZelFpeGpRVUZETEVkQlFVUTdRVUZEUlN4UlFVRkJMRkZCUVZFc1JVRkJReXhWUVVSWU8wRkJSVVVzVVVGQlFTeFBRVUZQTEVWQlFVTXNUVUZHVmp0QlFVZEZMRkZCUVVFc1NVRkJTU3hGUVVGRExFMUJTRkE3UVVGSlJTeFJRVUZCTEZWQlFWVXNSVUZCUXl4UlFVcGlPMEZCUzBVc1VVRkJRU3hOUVVGTkxFVkJRVVU3UVVGTVZpeHpRa0ZQUlVFN1FVRkRSU3g1UWtGQlpYVXpRaXhSUVVScVFqdEJRVVZGTEhsQ1FVRmpMRWRCUm1oQ08wRkJSMFVzZVVKQlFXVlBMRmRCU0dwQ08wRkJTVVVzVVVGQlFTeFRRVUZUTEVWQlFVVTViME1zVVVGQlRTeERRVUZEY1c5RExGRkJTbkJDTzBGQlMwVXNVVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkJTMVVzVTBGTWFFSTdRVUZOUlN4UlFVRkJMRlZCUVZVc1JVRkJSU3hMUVVGTFFTeFRRVTV1UWp0QlFVOUZMRkZCUVVFc1YwRkJWeXhGUVVGRkxFdEJRVXQyVlN4bFFWQndRanRCUVZGRkxGRkJRVUVzV1VGQldTeEZRVUZGTEV0QlFVdHdVU3huUWtGU2NrSTdRVUZUUlN4UlFVRkJMRmRCUVZjc1JVRkJSU3hMUVVGTE5HdENMR1ZCVkhCQ08wRkJWVVVzVVVGQlFTeFRRVUZUTEVWQlFVVXNTMEZCUzBNc1lVRldiRUk3UVVGWFJTeFJRVUZCTEVkQlFVY3NSVUZCUlN4TFFVRkxReXhqUVZoYU8wRkJXVVVzVVVGQlFTeEpRVUZKTEVWQlFVTXNZVUZhVUR0QlFXRkZMRkZCUVVFc1VVRkJVU3hGUVVGRE8wRkJZbGdzYzBKQlpVVnNORUlzWTBGQlF5eEhRVUZFTzBGQlEwVXNVVUZCUVN4SlFVRkpMRTFCUkU0N1FVRkZSU3hSUVVGQkxFdEJRVXNzVFVGR1VEdEJRVWRGTEZGQlFVRXNVVUZCVVN4RlFVRkRMRlZCU0ZnN1FVRkpSU3hSUVVGQkxFdEJRVXNzUlVGQlF5eFhRVXBTTzBGQlMwVXNVVUZCUVN4UlFVRlJMRVZCUVVVc1EwRk1XanRCUVUxRkxGRkJRVUVzVFVGQlRTeEZRVUZGTzBGQlRsWXNjMEpCVVVWQkxHTkJRVU1zUjBGQlJEdEJRVUZMTEZGQlFVRXNTMEZCU3l4RlFVRkRMRTlCUVZnN1FVRkJiVUlzVVVGQlFTeFJRVUZSTEVWQlFVVXNRMEZCTjBJN1FVRkJaME1zVVVGQlFTeE5RVUZOTEVWQlFVTXNUVUZCZGtNN1FVRkJPRU1zVVVGQlFTeExRVUZMTEVWQlFVVjJRanRCUVVGeVJDeFJRVkpHTEVOQlprWXNaVUY1UWtWMVFpeGpRVUZETEVkQlFVUTdRVUZEUlN4UlFVRkJMRkZCUVZFc1JVRkJReXhWUVVSWU8wRkJSVVVzVVVGQlFTeFJRVUZSTEVWQlFVVXNRMEZHV2p0QlFVZEZMRkZCUVVFc1RVRkJUU3hGUVVGRkxFTkJTRlk3UVVGSlJTeFJRVUZCTEhsQ1FVRjVRaXhGUVVGRk8wRkJRVVZ1UWl4VlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJUZENMRmxCUVVGQkxFbEJRVWtzUlVGQlJYbENPMEZCUVZJN1FVRkJXRHRCUVVvM1FpeHpRa0ZOUlhWQ0xHTkJRVU1zUjBGQlJEdEJRVU5GTEZGQlFVRXNVVUZCVVN4RlFVRkRMRkZCUkZnN1FVRkZSU3hSUVVGQkxFdEJRVXNzUlVGQlJTeEZRVVpVTzBGQlIwVXNVVUZCUVN4TlFVRk5MRVZCUVVVc1JVRklWanRCUVVsRkxGRkJRVUVzUzBGQlN5eEZRVUZETEU5QlNsSTdRVUZMUlN4UlFVRkJMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJUR1k3UVVGTlJTeFJRVUZCTEhsQ1FVRjVRaXhGUVVGRk8wRkJRVVZ1UWl4VlFVRkJRU3hQUVVGUExFVkJRVVU3UVVGQlJUZE5MRmxCUVVGQkxGTkJRVk1zUlVGQlJTeERRVUZETzBGQlFXUTdRVUZCV0R0QlFVNDNRaXhSUVU1R0xFTkJla0pHTEVOQlVFWXNRMEZFUmp0QlFXMUVSRHM3T3p0RlFYUklkME4zVGpzN1owSkJRWFJDTWpOQ0xEUkNRVWRCTzBGQlEycENWeXhGUVVGQlFTeFhRVUZYTEVWQlFVVXpNMElzVTBGQlV5eERRVUZEVHl4TlFVRldMRU5CUVdsQ2MwMHNWVUZFWWp0QlFVVnFRblZ4UWl4RlFVRkJRU3hSUVVGUkxFVkJRVVZ3TTBJc1UwRkJVeXhEUVVGRFR5eE5RVUZXTEVOQlFXbENjMDBzVlVGR1ZqdEJRVWRxUWpSeFFpeEZRVUZCUVN4alFVRmpMRVZCUVVWNk0wSXNVMEZCVXl4RFFVRkRlVThzU1VGQlZpeERRVUZsTlVJc1ZVRklaRHRCUVVscVFqWnhRaXhGUVVGQlFTeFpRVUZaTEVWQlFVVXhNMElzVTBGQlV5eERRVUZEZVU4c1NVRkJWaXhEUVVGbE5VSXNWVUZLV2p0QlFVdHFRbmR4UWl4RlFVRkJRU3hKUVVGSkxFVkJRVVZ5TTBJc1UwRkJVeXhEUVVGRGVVOHNTVUZCVml4RFFVRmxOVUk3UVVGTVNqczdRVU5WY2tJc1NVRkJUVzF5UWl4cFFrRkJhVUlzUjBGQlJ5eFRRVUZ3UWtFc2FVSkJRVzlDTzBGQlFVRXNVMEZEZUVKNFlTeFJRVUZSTEVOQlFVTjNZU3hwUWtGQlZEdEJRVVZCZUdFc1JVRkJRVUVzVVVGQlVTeERRVUZEZVdFc2RVSkJSbFE3UVVGSlFYcGhMRVZCUVVGQkxGRkJRVkVzUTBGQlF6QmhMRzlDUVVwVU8wRkJUVUV4WVN4RlFVRkJRU3hSUVVGUkxFTkJRVU15WVN4dFFrRlFaVHRCUVVGQkxFTkJRVEZDT3p0QlFWTkJMRWxCUVUxRExGbEJRVmtzUjBGQlJ5eFRRVUZtUVN4WlFVRmxMRU5CUVVORExFbEJRVVFzUlVGQmJVSTdRVUZEZEVNc1RVRkJUVU1zVDBGQlR5eEhRVUZITlc1RExFbEJRVWtzUTBGQlF6SXhRaXhMUVVGTUxFTkJRVmRuVXl4SlFVRkpMRWxCUVVrc1EwRkJia0lzUTBGQmFFSTdRVUZEUVN4TlFVRk5SU3hQUVVGUExFZEJRVWMzYmtNc1NVRkJTU3hEUVVGRE1qRkNMRXRCUVV3c1EwRkJWMmxUTEU5QlFVOHNSMEZCUnl4RlFVRnlRaXhEUVVGb1FqdEJRVU5CTEUxQlFVMUZMRTlCUVU4c1IwRkJSMFlzVDBGQlR5eEhRVUZIUXl4UFFVRlBMRWRCUVVjc1JVRkJjRU03UVVGRFFTeE5RVUZOUlN4VlFVRlZMRWRCUVVkR0xFOUJRVThzUjBGQlJ5eEZRVUZXTEdOQlFXMUNRU3hQUVVGdVFpeEpRVUVyUWtFc1QwRkJiRVE3UVVGRFFTeE5RVUZOUnl4VlFVRlZMRWRCUVVkR0xFOUJRVThzUjBGQlJ5eEZRVUZXTEdOQlFXMUNRU3hQUVVGdVFpeEpRVUVyUWtFc1QwRkJiRVE3UVVGRFFTeHRRa0ZCVlVNc1ZVRkJWaXhqUVVGM1FrTXNWVUZCZUVJN1FVRkRSQ3hEUVZCRU96dEpRVk5OUXpzN096czdPenM3T3pzN096czdPenMyUlVGelFuRkNMR2RDUVUxdVFqdEJRVUZCTEZWQlRFcHNiVUlzUzBGTFNTeFJRVXhLUVN4TFFVdEpPMEZCUVVFc1ZVRkRTVzF0UWl4clFrRkVTaXhIUVVNeVFpeE5RVUZMYm5CRExFdEJSR2hETEVOQlEwbHRjRU1zYTBKQlJFbzdRVUZGU201dFFpeE5RVUZCUVN4TFFVRkxMRU5CUVVOeldTeGxRVUZPTzBGQlEwRTJUaXhOUVVGQlFTeHJRa0ZCYTBJN1FVRkRia0k3T3pCRlFVVnhRaXhwUWtGTmFFSTdRVUZCUVN4VlFVeEtibTFDTEV0QlMwa3NVMEZNU2tFc1MwRkxTVHRCUVVGQkxIZENRVU5wUXl4TlFVRkxhR3BDTEV0QlJIUkRPMEZCUVVFc1ZVRkRTVzl3UXl4UFFVUktMR1ZCUTBsQkxFOUJSRW83UVVGQlFTeFZRVU5oUXl4UFFVUmlMR1ZCUTJGQkxFOUJSR0k3UVVGQlFTeFZRVU56UWtNc1RVRkVkRUlzWlVGRGMwSkJMRTFCUkhSQ096dEJRVVZLTEZWQlFVbEdMRTlCUVVvc1JVRkJZVHRCUVVOWVF5eFJRVUZCUVN4UFFVRlBMRU5CUVVOeWJVSXNTMEZCUkN4RFFVRlFPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHh6YlVJc1VVRkJRVUVzVFVGQlRTeERRVUZEZEcxQ0xFdEJRVVFzUTBGQlRqdEJRVU5FTzBGQlEwWTdPM2xGUVVWdlFpeHBRa0ZOWmp0QlFVRkJMRlZCVEVwQkxFdEJTMGtzVTBGTVNrRXNTMEZMU1R0QlFVRkJMRlZCUTBsMWJVSXNZMEZFU2l4SFFVTjFRaXhOUVVGTGRuQkRMRXRCUkRWQ0xFTkJRMGwxY0VNc1kwRkVTanRCUVVWS1FTeE5RVUZCUVN4alFVRmpMRU5CUVVOMmJVSXNTMEZCUkN4RFFVRmtPMEZCUTBRN096czdPenM3TmtKQlJWRTdRVUZCUVN4NVFrRm5Ra2dzUzBGQlMyaHFRaXhMUVdoQ1JqdEJRVUZCTEZWQlJVeDNjRU1zTUVKQlJrc3NaMEpCUlV4QkxEQkNRVVpMTzBGQlFVRXNWVUZIVEVNc01FSkJTRXNzWjBKQlIweEJMREJDUVVoTE8wRkJRVUVzVlVGSlRFTXNjMEpCU2tzc1owSkJTVXhCTEhOQ1FVcExPMEZCUVVFc1ZVRkxURU1zZFVKQlRFc3NaMEpCUzB4QkxIVkNRVXhMTzBGQlFVRXNWVUZOVEVNc2MwSkJUa3NzWjBKQlRVeEJMSE5DUVU1TE8wRkJRVUVzVlVGUFRFTXNkMEpCVUVzc1owSkJUMHhCTEhkQ1FWQkxPMEZCUVVFc1ZVRlJURE5DTEZkQlVrc3NaMEpCVVV4QkxGZEJVa3M3UVVGQlFTeFZRVk5NVUN4UlFWUkxMR2RDUVZOTVFTeFJRVlJMTzBGQlFVRXNWVUZWVEcxRExGVkJWa3NzWjBKQlZVeEJMRlZCVmtzN1FVRkJRU3hWUVZkTU9VSXNZMEZZU3l4blFrRlhURUVzWTBGWVN6dEJRVUZCTEZWQldVeERMRmxCV2tzc1owSkJXVXhCTEZsQldrczdRVUZCUVN4VlFXRk1iVUlzVDBGaVN5eG5Ra0ZoVEVFc1QwRmlTenRCUVVGQkxGVkJZMHg0UWl4SlFXUkxMR2RDUVdOTVFTeEpRV1JMTzBGQlFVRXNWVUZsVEcxRExFMUJaa3NzWjBKQlpVeEJMRTFCWmtzN1FVRnBRbEFzVlVGQlRVTXNTMEZCU3l4SFFVRkhSQ3hOUVVGTkxFdEJRVXNzUTBGQmVrSTdRVUZEUVN4VlFVRk5SU3h2UWtGQmIwSXNSMEZEZUVJc1QwRkJUMnhqTEZGQlFWQXNTMEZCYjBJc1YwRkJjRUlzU1VGQmJVTXNRMEZCUXl4RFFVRkRkMkVzYVVKQlFXbENMRVZCUkhoRU8wRkJSVUVzTUVKQlEwVnVORUk3UVVGQlN5eFJRVUZCTEZOQlFWTXNSVUZCUldoU0xGRkJRVTBzUTBGQlF6aHhRenRCUVVGMlFpeHpRa0ZEUlRrMVFpeGpRVUZETEVkQlFVUTdRVUZCU3l4UlFVRkJMRTlCUVU4c1JVRkJSVHRCUVVGa0xITkNRVU5GUVN4alFVRkRMRk5CUVVRN1FVRkJWeXhSUVVGQkxFOUJRVThzUlVGQlJTeExRVUZMS3pWQ0xHMUNRVUY2UWp0QlFVRTRReXhSUVVGQkxGTkJRVk1zUlVGQlJUdEJRVUY2UkN4elFrRkRSUzgxUWl4alFVRkRMRWxCUVVRN1FVRkRSU3hSUVVGQkxHdENRVUZyUWl4RlFVTm9RbWMxUWl4UFFVRlBMRWRCUVVkUExIVkNRVUZJTEVkQlFUWkNReXh6UWtGR2VFTTdRVUZKUlN4UlFVRkJMRXRCUVVzc1JVRkJReXhQUVVwU08wRkJTMFVzVVVGQlFTeEpRVUZKTEVWQlFVVlNMRTlCUVU4c1IwRkJSeXhQUVVGSUxFZEJRV0VzVFVGTU5VSTdRVUZOUlN4UlFVRkJMRWxCUVVrc1JVRkJSVHRCUVU1U0xGRkJSRVlzUTBGRVJpeERRVVJHTEdWQllVVm9OVUlzWTBGQlF5eEhRVUZFTzBGQlFVc3NVVUZCUVN4TFFVRkxMRVZCUVVVc1JVRkJXanRCUVVGblFpeFJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRjZRaXh6UWtGRFJVRXNZMEZCUXl4SlFVRkVPMEZCUVUwc1VVRkJRU3hMUVVGTExFVkJRVU1zVDBGQldqdEJRVUZ2UWl4UlFVRkJMRXRCUVVzc1JVRkJReXhQUVVFeFFqdEJRVUZyUXl4UlFVRkJMRkZCUVZFc1JVRkJReXhSUVVFelF6dEJRVUZ2UkN4UlFVRkJMRWxCUVVrc1JVRkJRenRCUVVGNlJDeFRRVU5IZFRSQ0xGbEJRVmtzUTBGQlExUXNWMEZCUkN4RFFVUm1MRU5CUkVZc1EwRmlSaXhsUVd0Q1JUa3pRaXhqUVVGRExFZEJRVVE3UVVGQlN5eFJRVUZCTEU5QlFVOHNSVUZCUlN4RFFVRmtPMEZCUVdsQ0xGRkJRVUVzU1VGQlNTeEZRVUZETzBGQlFYUkNMSE5DUVVORlFTeGpRVUZETEdGQlFVUTdRVUZEUlN4UlFVRkJMRmRCUVZjc1JVRkJSVGd6UWl4WFFVUm1PMEZCUlVVc1VVRkJRU3hSUVVGUkxFVkJRVVZRTEZGQlJsbzdRVUZIUlN4UlFVRkJMR05CUVdNc1JVRkJSVXNzWTBGSWJFSTdRVUZKUlN4UlFVRkJMRmxCUVZrc1JVRkJSVU1zV1VGS2FFSTdRVUZMUlN4UlFVRkJMRWxCUVVrc1JVRkJSVXc3UVVGTVVpeFJRVVJHTEVOQmJFSkdMR1ZCTWtKRmVETkNMR05CUVVNc1IwRkJSRHRCUVVGTExGRkJRVUVzUzBGQlN5eEZRVUZGTEVWQlFWbzdRVUZCWjBJc1VVRkJRU3hQUVVGUExFVkJRVVU3UVVGQmVrSXNjMEpCUTBWQkxHTkJRVU1zU1VGQlJEdEJRVUZOTEZGQlFVRXNTMEZCU3l4RlFVRkRMRTlCUVZvN1FVRkJiMElzVVVGQlFTeExRVUZMTEVWQlFVTXNUMEZCTVVJN1FVRkJhME1zVVVGQlFTeFJRVUZSTEVWQlFVTXNVVUZCTTBNN1FVRkJiMFFzVVVGQlFTeEpRVUZKTEVWQlFVTTdRVUZCZWtRc1UwRkRSM1UwUWl4WlFVRlpMRU5CUVVOb1FpeFJRVUZFTEVOQlJHWXNRMEZFUml4RFFUTkNSaXhsUVdkRFJYWXpRaXhqUVVGRExFZEJRVVE3UVVGQlN5eFJRVUZCTEU5QlFVOHNSVUZCUlR0QlFVRmtMSE5DUVVORlFTeGpRVUZETEZOQlFVUTdRVUZCVnl4UlFVRkJMRTlCUVU4c1JVRkJSU3hMUVVGTFp6WkNMR3RDUVVGNlFqdEJRVUUyUXl4UlFVRkJMRk5CUVZNc1JVRkJSVHRCUVVGNFJDeHpRa0ZEUldnMlFpeGpRVUZETEVsQlFVUTdRVUZEUlN4UlFVRkJMR3RDUVVGclFpeEZRVU5vUWpRMVFpeExRVUZMTEVkQlFVZElMSGRDUVVGSUxFZEJRVGhDU0N4elFrRkdka003UVVGSlJTeFJRVUZCTEV0QlFVc3NSVUZCUXl4UFFVcFNPMEZCUzBVc1VVRkJRU3hKUVVGSkxFVkJRVVZOTEV0QlFVc3NSMEZCUnl4TlFVRklMRWRCUVZrc1QwRk1la0k3UVVGTlJTeFJRVUZCTEVsQlFVa3NSVUZCUlR0QlFVNVNMRkZCUkVZc1EwRkVSaXhEUVdoRFJpeEZRVFJEUjBNc2IwSkJRVzlDTEdsQ1FVTnVRamMxUWl4alFVRkRMRWRCUVVRN1FVRkJTeXhSUVVGQkxFOUJRVThzUlVGQlJUdEJRVUZrTEhOQ1FVTkZRU3hqUVVGRExGTkJRVVE3UVVGQlZ5eFJRVUZCTEU5QlFVOHNSVUZCUlN4TFFVRkxhVFpDTEhOQ1FVRjZRanRCUVVGcFJDeFJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVRTFSQ3h6UWtGRFJXbzJRaXhqUVVGRExFbEJRVVE3UVVGRFJTeFJRVUZCTEd0Q1FVRnJRaXhGUVVOb1FqQTFRaXhWUVVGVkxFZEJRMDVNTERCQ1FVUk5MRWRCUlU1RUxEQkNRVXBTTzBGQlRVVXNVVUZCUVN4TFFVRkxMRVZCUVVNc1QwRk9VanRCUVU5RkxGRkJRVUVzU1VGQlNTeEZRVUZGVFN4VlFVRlZMRWRCUVVjc1ZVRkJTQ3hIUVVGblFpeFZRVkJzUXp0QlFWRkZMRkZCUVVFc1NVRkJTU3hGUVVGRk8wRkJVbElzVVVGRVJpeERRVVJHTEVOQk4wTktMRU5CUkVZN1FVRXJSRVE3T3pzN1JVRXZTWGxDYkRaQ096dG5Ra0ZCZEVKek5VSXNORUpCUTJVN1FVRkRha0pOTEVWQlFVRkJMREJDUVVFd1FpeEZRVUZGYWpWQ0xGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTEZWQlJEVkNPMEZCUldwQ2NYTkNMRVZCUVVGQkxEQkNRVUV3UWl4RlFVRkZiRFZDTEZOQlFWTXNRMEZCUTFFc1RVRkJWaXhEUVVGcFFuRk5MRlZCUmpWQ08wRkJSMnBDYzNOQ0xFVkJRVUZCTEhOQ1FVRnpRaXhGUVVGRmJqVkNMRk5CUVZNc1EwRkJRMUVzVFVGQlZpeERRVUZwUW5GTkxGVkJTSGhDTzBGQlNXcENkWE5DTEVWQlFVRkJMSFZDUVVGMVFpeEZRVUZGY0RWQ0xGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTEZWQlNucENPMEZCUzJwQ2QzTkNMRVZCUVVGQkxITkNRVUZ6UWl4RlFVRkZjalZDTEZOQlFWTXNRMEZCUTFFc1RVRkJWaXhEUVVGcFFuRk5MRlZCVEhoQ08wRkJUV3BDZVhOQ0xFVkJRVUZCTEhkQ1FVRjNRaXhGUVVGRmREVkNMRk5CUVZNc1EwRkJRMUVzVFVGQlZpeERRVUZwUW5GTkxGVkJUakZDTzBGQlQycENPSEZDTEVWQlFVRkJMRmRCUVZjc1JVRkJSVE16UWl4VFFVRlRMRU5CUVVOUExFMUJRVllzUTBGQmFVSnpUU3hWUVZCaU8wRkJVV3BDZFhGQ0xFVkJRVUZCTEZGQlFWRXNSVUZCUlhBelFpeFRRVUZUTEVOQlFVTlBMRTFCUVZZc1EwRkJhVUp6VFN4VlFWSldPMEZCVTJwQ01ITkNMRVZCUVVGQkxGVkJRVlVzUlVGQlJYWTFRaXhUUVVGVExFTkJRVU56UWl4SlFVRldMRU5CUVdWMVRDeFZRVlJXTzBGQlZXcENLM0pDTEVWQlFVRkJMR3RDUVVGclFpeEZRVUZGTlRSQ0xGTkJRVk1zUTBGQlEzbFBMRWxCUVZZc1EwRkJaVFZDTEZWQlZteENPMEZCVjJwQ2FYTkNMRVZCUVVGQkxFOUJRVThzUlVGQlJUazBRaXhUUVVGVExFTkJRVU41VHl4SlFVRldMRU5CUVdVMVFpeFZRVmhRTzBGQldXcENhM05DTEVWQlFVRkJMRTFCUVUwc1JVRkJSUzgwUWl4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVZwT08wRkJZV3BDTkhGQ0xFVkJRVUZCTEdOQlFXTXNSVUZCUlhvelFpeFRRVUZUTEVOQlFVTjVUeXhKUVVGV0xFTkJRV1UxUWl4VlFXSmtPMEZCWTJwQ05uRkNMRVZCUVVGQkxGbEJRVmtzUlVGQlJURXpRaXhUUVVGVExFTkJRVU41VHl4SlFVRldMRU5CUVdVMVFpeFZRV1JhTzBGQlpXcENiWE5DTEVWQlFVRkJMR05CUVdNc1JVRkJSV2cxUWl4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVdaa08wRkJaMEpxUW1kelFpeEZRVUZCUVN4UFFVRlBMRVZCUVVVM05FSXNVMEZCVXl4RFFVRkRjMElzU1VGQlZpeERRVUZsZFV3c1ZVRm9RbEE3UVVGcFFtcENkM0ZDTEVWQlFVRkJMRWxCUVVrc1JVRkJSWEl6UWl4VFFVRlRMRU5CUVVONVR5eEpRVUZXTEVOQlFXVTFRaXhWUVdwQ1NqdEJRV3RDYWtJeWMwSXNSVUZCUVVFc1RVRkJUU3hGUVVGRmVEVkNMRk5CUVZNc1EwRkJRMDhzVFVGQlZpeERRVUZwUW5OTk8wRkJiRUpTT3p0QlExbHlRanRCUVVOQk8wRkJSVUVzU1VGQlRXdDBRaXhwUWtGQmFVSXNSMEZCUnl4VFFVRndRa0VzYVVKQlFXOUNMRU5CUVVNellpeFBRVUZFTEVWQlFUQkNPMEZCUTJ4RUxFMUJRVWxCTEU5QlFVOHNRMEZCUXpKaUxHbENRVUZhTEVWQlFTdENPMEZCUXpkQ00ySXNTVUZCUVVFc1QwRkJUeXhEUVVGRE1tSXNhVUpCUVZJc1IwRkVOa0k3UVVGSE9VSXNSMEZJUkN4TlFVZFBMRWxCUVVrellpeFBRVUZQTEVOQlFVTTBZaXgxUWtGQldpeEZRVUZ4UXp0QlFVTXhRenRCUVVOQk5XSXNTVUZCUVVFc1QwRkJUeXhEUVVGRE5HSXNkVUpCUVZJc1IwRkdNRU03UVVGSk0wTXNSMEZLVFN4TlFVbEJMRWxCUVVrMVlpeFBRVUZQTEVOQlFVTTJZaXh2UWtGQldpeEZRVUZyUXp0QlFVTjJRenRCUVVOQk4ySXNTVUZCUVVFc1QwRkJUeXhEUVVGRE5tSXNiMEpCUVZJc1IwRkdkVU03UVVGSmVFTXNSMEZLVFN4TlFVbEJMRWxCUVVrM1lpeFBRVUZQTEVOQlFVTTRZaXh0UWtGQldpeEZRVUZwUXp0QlFVTjBRenRCUVVOQk9XSXNTVUZCUVVFc1QwRkJUeXhEUVVGRE9HSXNiVUpCUVZJN1FVRkRSRHRCUVVOR0xFTkJhRUpFT3p0QlFXdENRU3hKUVVGTlF5eGpRVUZqTEVkQlFVY3NVMEZCYWtKQkxHTkJRV2xDTEVkQlFVMDdRVUZETTBJc1RVRkJTVE5qTEZGQlFWRXNRMEZCUXpKakxHTkJRV0lzUlVGQk5rSTdRVUZETTBJell5eEpRVUZCUVN4UlFVRlJMRU5CUVVNeVl5eGpRVUZVTEVkQlJESkNPMEZCUnpWQ0xFZEJTRVFzVFVGSFR5eEpRVUZKTTJNc1VVRkJVU3hEUVVGRE5HTXNiMEpCUVdJc1JVRkJiVU03UVVGRGVFTTdRVUZEUVRWakxFbEJRVUZCTEZGQlFWRXNRMEZCUXpSakxHOUNRVUZVTEVkQlJuZERPMEZCU1hwRExFZEJTazBzVFVGSlFTeEpRVUZKTldNc1VVRkJVU3hEUVVGRE5tTXNiVUpCUVdJc1JVRkJhME03UVVGRGRrTTdRVUZEUVRkakxFbEJRVUZCTEZGQlFWRXNRMEZCUXpaakxHMUNRVUZVTEVkQlJuVkRPMEZCU1hoRExFZEJTazBzVFVGSlFTeEpRVUZKTjJNc1VVRkJVU3hEUVVGRE9HTXNaMEpCUVdJc1JVRkJLMEk3UVVGRGNFTTdRVUZEUVRsakxFbEJRVUZCTEZGQlFWRXNRMEZCUXpoakxHZENRVUZVTzBGQlEwUTdRVUZEUml4RFFXaENSRHRCUVcxQ1FUczdPMEZCUTBFc1NVRkJUVU1zV1VGQldTeEhRVUZITEZOQlFXWkJMRmxCUVdVN1FVRkJRU3hUUVVOdVFpOWpMRkZCUVZFc1EwRkJRMmRrTEdsQ1FVRlVPMEZCUlVGb1pDeEZRVUZCUVN4UlFVRlJMRU5CUVVOcFpDeDFRa0ZHVkR0QlFVbEJhbVFzUlVGQlFVRXNVVUZCVVN4RFFVRkRhMlFzYjBKQlNsUTdRVUZOUVd4a0xFVkJRVUZCTEZGQlFWRXNRMEZCUTIxa0xHMUNRVkJWTzBGQlFVRXNRMEZCY2tJN08wRkJVMEVzU1VGQlRVTXNNRUpCUVRCQ0xFZEJRVWNzVTBGQk4wSkJMREJDUVVFMlFpeERRVUZEUXl4UlFVRkVMRVZCUVRaQ08wRkJRemxFY21Rc1JVRkJRVUVzVVVGQlVTeERRVUZEYUVJc1owSkJRVlFzUTBGQk1FSXNhMEpCUVRGQ0xFVkJRVGhEY1dVc1VVRkJPVU03UVVGRFFYSmtMRVZCUVVGQkxGRkJRVkVzUTBGQlEyaENMR2RDUVVGVUxFTkJRVEJDTEhkQ1FVRXhRaXhGUVVGdlJIRmxMRkZCUVhCRU8wRkJRMEZ5WkN4RlFVRkJRU3hSUVVGUkxFTkJRVU5vUWl4blFrRkJWQ3hEUVVFd1FpeHhRa0ZCTVVJc1JVRkJhVVJ4WlN4UlFVRnFSRHRCUVVOQmNtUXNSVUZCUVVFc1VVRkJVU3hEUVVGRGFFSXNaMEpCUVZRc1EwRkJNRUlzYjBKQlFURkNMRVZCUVdkRWNXVXNVVUZCYUVRN1FVRkRSQ3hEUVV4RU96dEJRVTlCTEVsQlFVMURMRFpDUVVFMlFpeEhRVUZITEZOQlFXaERRU3cyUWtGQlowTXNRMEZCUTBRc1VVRkJSQ3hGUVVFMlFqdEJRVU5xUlhKa0xFVkJRVUZCTEZGQlFWRXNRMEZCUTJZc2JVSkJRVlFzUTBGQk5rSXNhMEpCUVRkQ0xFVkJRV2xFYjJVc1VVRkJha1E3UVVGRFFYSmtMRVZCUVVGQkxGRkJRVkVzUTBGQlEyWXNiVUpCUVZRc1EwRkJOa0lzZDBKQlFUZENMRVZCUVhWRWIyVXNVVUZCZGtRN1FVRkRRWEprTEVWQlFVRkJMRkZCUVZFc1EwRkJRMllzYlVKQlFWUXNRMEZCTmtJc2NVSkJRVGRDTEVWQlFXOUViMlVzVVVGQmNFUTdRVUZEUVhKa0xFVkJRVUZCTEZGQlFWRXNRMEZCUTJZc2JVSkJRVlFzUTBGQk5rSXNiMEpCUVRkQ0xFVkJRVzFFYjJVc1VVRkJia1E3UVVGRFJDeERRVXhFT3p0QlFVOUJMRWxCUVUxRkxGZEJRVmNzUjBGQlJ5eFRRVUZrUVN4WFFVRmpMRU5CUVVORExGTkJRVVFzUlVGQmIwSkRMRk5CUVhCQ0xFVkJRVzFFTzBGQlEzSkZMRTFCUVVrc1VVRkJUMFFzVTBGQlVDeGpRVUUwUWtNc1UwRkJOVUlzUTBGQlNpeEZRVUV5UXp0QlFVTjZRenRCUVVOQk8wRkJRMEVzVjBGQlR5eEpRVUZRTzBGQlEwUTdPMEZCUTBRc1RVRkJTVFZ5UXl4TFFVRkxMRU5CUVVNMmNrTXNUMEZCVGl4RFFVRmpSQ3hUUVVGa0xFTkJRVW9zUlVGQk9FSTdRVUZETlVJc1VVRkJTVVFzVTBGQlV5eERRVUZEYW5KRExFMUJRVllzUzBGQmNVSnJja01zVTBGQlV5eERRVUZEYkhKRExFMUJRVzVETEVWQlFUSkRPMEZCUTNwRE8wRkJRMEU3UVVGRFFTeGhRVUZQTEVsQlFWQTdRVUZEUkN4TFFVd3lRanRCUVU4MVFqczdPMEZCUTBFc1YwRkJUMnR5UXl4VFFVRlRMRU5CUVVONFV5eEpRVUZXTEVOQlEwd3NWVUZCUXpCVExFMUJRVVFzUlVGQlV6bHhRaXhMUVVGVU8wRkJRVUVzWVVGRFJTeERRVUZEYUdoQ0xFdEJRVXNzUTBGQlF6WnlReXhQUVVGT0xFTkJRV05HTEZOQlFXUXNRMEZCUkN4SlFVTkJSeXhOUVVGTkxFTkJRVU12YjBJc1NVRkJVQ3hMUVVGblFqUnZRaXhUUVVGVExFTkJRVU16Y1VJc1MwRkJSQ3hEUVVGVUxFTkJRV2xDSzBJc1NVRkVha01zU1VGRlFTdHZRaXhOUVVGTkxFTkJRVU01ZEVJc1IwRkJVQ3hMUVVGbE1uUkNMRk5CUVZNc1EwRkJRek54UWl4TFFVRkVMRU5CUVZRc1EwRkJhVUpvUkN4SFFVaHNRenRCUVVGQkxFdEJSRXNzUTBGQlVEdEJRVTFFTEVkQmNFSnZSVHRCUVhOQ2NrVTdPenRCUVVOQkxGTkJRVTgwZEVJc1UwRkJVeXhMUVVGTFJDeFRRVUZ5UWp0QlFVTkVMRU5CZUVKRU96dEpRVEJDY1VKSk96czdPenM3T3pzN096czdPenM3T3pzN096czBSRUZ2UkZnN1FVRkRUbnBFTEUxQlFVRkJMRmRCUVZjc1JVRkJSU3hEUVVSUU8wRkJSVTVRTEUxQlFVRkJMRkZCUVZFc1JVRkJSU3hEUVVaS08wRkJSMDV0UXl4TlFVRkJRU3hWUVVGVkxFVkJRVVU3UVVGSVRqczdiVVZCT0VSUExGVkJRVU5xTmtJc1IwRkJSQ3hGUVVFd1FqdEJRVU4yUXl4WlFVRkxLemRDTEUxQlFVd3NSMEZCWXk4M1FpeEhRVUZrTzBGQlEwUTdPMnRGUVVkaExGVkJRVU5CTEVkQlFVUXNSVUZCTkVJN1FVRkRlRU1zV1VGQlMyYzRRaXhMUVVGTUxFZEJRV0ZvT0VJc1IwRkJZanRCUVVORU96dHpSVUZQYVVJc1ZVRkJRMms0UWl4WlFVRkVMRVZCUVRCQ08wRkJRekZETEZWQlFVa3NUVUZCUzBRc1MwRkJWQ3hGUVVGblFqdEJRVU5rTEdOQlFVdEJMRXRCUVV3c1EwRkJWME1zV1VGQldDeEhRVUV3UWtFc1dVRkJNVUk3UVVGRFJEdEJRVU5HT3p0blJVRkhWeXhWUVVGREwwSXNUVUZCUkN4RlFVRnZRanRCUVVNNVFpeFZRVUZKTEUxQlFVczRRaXhMUVVGVUxFVkJRV2RDTzBGQlEyUXNZMEZCUzBFc1MwRkJUQ3hEUVVGWE9VSXNUVUZCV0N4SFFVRnZRa0VzVFVGQmNFSTdRVUZEUkR0QlFVTkdPenN5UkVGSFRTeFpRVUZOTzBGQlExZ3NWVUZCU1N4TlFVRkxPRUlzUzBGQlRDeEpRVUZqTEUxQlFVdEJMRXRCUVV3c1EwRkJWMFVzU1VGQk4wSXNSVUZCYlVNN1FVRkRha01zWTBGQlMwWXNTMEZCVEN4RFFVRlhSU3hKUVVGWU8wRkJRMFE3UVVGRFJqczdORVJCUjA4c1dVRkJUVHRCUVVOYUxGVkJRVWtzVFVGQlMwWXNTMEZCVkN4RlFVRm5RanRCUVVOa0xHTkJRVXRCTEV0QlFVd3NRMEZCVjNKNlFpeExRVUZZTzBGQlEwUTdRVUZEUmpzN01rUkJSMDBzV1VGQlRUdEJRVU5ZTEZWQlFVa3NUVUZCUzNGNlFpeExRVUZVTEVWQlFXZENPMEZCUTJRc1kwRkJTMEVzUzBGQlRDeERRVUZYTjNsQ0xFbEJRVmc3UVVGRFJEdEJRVU5HT3pzeVJFRkhUU3hWUVVGRE5IWkNMRWxCUVVRc1JVRkJhMEk3UVVGRGRrSXNWVUZCU1N4TlFVRkxhVVFzUzBGQlZDeEZRVUZuUWp0QlFVTmtMR05CUVV0QkxFdEJRVXdzUTBGQlZ6TkVMRmRCUVZnc1IwRkJlVUpWTEVsQlFYcENPMEZCUTBRN1FVRkRSanM3ZFVWQlIydENMRmxCUVUwN1FVRkRka0lzVlVGQlNXdERMRmxCUVZrc1JVRkJhRUlzUlVGQmIwSTdRVUZEYkVKS0xGRkJRVUZCTEdOQlFXTTdRVUZEWml4UFFVWkVMRTFCUlU4c1NVRkJTU3hOUVVGTGEwSXNUVUZCVkN4RlFVRnBRanRCUVVOMFFuUkNMRkZCUVVGQkxHbENRVUZwUWl4RFFVRkRMRTFCUVV0elFpeE5RVUZPTEVOQlFXcENPMEZCUTBRN1FVRkRSanM3YjBWQlQyVXNWVUZCUXpWdlFpeExRVUZFTEVWQlFUWkRPMEZCUVVFc1ZVRkRia1JuY0VJc1QwRkViVVFzUjBGRGRrTXNUVUZCUzJoelF5eExRVVJyUXl4RFFVTnVSR2R6UXl4UFFVUnRSRHM3UVVGSE0wUXNWVUZCU1VFc1QwRkJTaXhGUVVGaE8wRkJRMWhCTEZGQlFVRkJMRTlCUVU4c1EwRkJRenRCUVVGRmFIQkNMRlZCUVVGQkxFdEJRVXNzUlVGQlRFRTdRVUZCUml4VFFVRkVMRU5CUVZBN1FVRkRSRHRCUVVOR096c3lSVUZKYzBJc1ZVRkJRMEVzUzBGQlJDeEZRVUUyUXp0QlFVRkJMRlZCUXpGRWFYQkNMR2RDUVVRd1JDeEhRVU55UXl4TlFVRkxhbk5ETEV0QlJHZERMRU5CUXpGRWFYTkRMR2RDUVVRd1JEdEJRVVZzUlN4VlFVRk5kRVVzVVVGQlVTeEhRVUZKTEUxQlFVdHJSU3hMUVVGTUxFbEJRV01zVFVGQlMwRXNTMEZCVEN4RFFVRlhiRVVzVVVGQk1VSXNTVUZCZFVNc1EwRkJlRVE3TzBGQlEwRXNXVUZCUzJ4aUxGRkJRVXdzUTBGQll6dEJRVUZGYTJJc1VVRkJRVUVzVVVGQlVTeEZRVUZTUVR0QlFVRkdMRTlCUVdRN08wRkJSVUVzVlVGQlNYTkZMR2RDUVVGS0xFVkJRWE5DTzBGQlEzQkNRU3hSUVVGQlFTeG5Ra0ZCWjBJc1EwRkJRenRCUVVGRmFuQkNMRlZCUVVGQkxFdEJRVXNzUlVGQlRFRXNTMEZCUmp0QlFVRlRNbXRDTEZWQlFVRkJMRkZCUVZFc1JVRkJVa0U3UVVGQlZDeFRRVUZFTEVOQlFXaENPMEZCUTBRN1FVRkRSanM3YTBWQlIyRXNWVUZCUXpOclFpeExRVUZFTEVWQlFUWkRPMEZCUVVFc1ZVRkRha1JyY0VJc1QwRkVhVVFzUjBGRGNrTXNUVUZCUzJ4elF5eExRVVJuUXl4RFFVTnFSR3R6UXl4UFFVUnBSRHM3UVVGSGVrUXNWVUZCU1VFc1QwRkJTaXhGUVVGaE8wRkJRMWhCTEZGQlFVRkJMRTlCUVU4c1EwRkJRenRCUVVGRmJIQkNMRlZCUVVGQkxFdEJRVXNzUlVGQlRFRTdRVUZCUml4VFFVRkVMRU5CUVZBN1FVRkRSRHRCUVVOR096czJSVUZIZDBJc1ZVRkJRMEVzUzBGQlJDeEZRVUZyUWp0QlFVRkJMRlZCUTJwRGJXMUNMR3RDUVVScFF5eEhRVU5XTEUxQlFVdHVjRU1zUzBGRVN5eERRVU5xUTIxd1F5eHJRa0ZFYVVNN1FVRkZla01zVlVGQlRWY3NWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRMmRDTEZsQlFWa3NSVUZCYWtNN08wRkJRMEVzV1VGQlMzSmxMRkZCUVV3c1EwRkJZenRCUVVGRmNXUXNVVUZCUVVFc1ZVRkJWU3hGUVVGV1FUdEJRVUZHTEU5QlFXUTdPMEZCUlVFc1ZVRkJTVmdzYTBKQlFVb3NSVUZCZDBJN1FVRkRkRUpCTEZGQlFVRkJMR3RDUVVGclFpeERRVUZETzBGQlFVVnViVUlzVlVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGR08wRkJRVk00YlVJc1ZVRkJRVUVzVlVGQlZTeEZRVUZXUVR0QlFVRlVMRk5CUVVRc1EwRkJiRUk3UVVGRFJEdEJRVU5HT3p0cFJVRkhXU3hWUVVGRE9XMUNMRXRCUVVRc1JVRkJNa003UVVGQlFTeFZRVU01UTNOdFFpeE5RVVE0UXl4SFFVTnVReXhOUVVGTGRIQkRMRXRCUkRoQ0xFTkJRemxEYzNCRExFMUJSRGhET3p0QlFVZDBSQ3hWUVVGSlFTeE5RVUZLTEVWQlFWazdRVUZEVmtFc1VVRkJRVUVzVFVGQlRTeERRVUZETzBGQlFVVjBiVUlzVlVGQlFVRXNTMEZCU3l4RlFVRk1RVHRCUVVGR0xGTkJRVVFzUTBGQlRqdEJRVU5FTzBGQlEwWTdPM2xGUVVkdlFpeFZRVUZEUVN4TFFVRkVMRVZCUVdkRU8wRkJRVUVzVlVGRE0wUm5iRUlzWTBGRU1rUXNSMEZEZUVNc1RVRkJTMmh2UXl4TFFVUnRReXhEUVVNelJHZHZReXhqUVVReVJEczdRVUZIYmtVc1ZVRkJTVUVzWTBGQlNpeEZRVUZ2UWp0QlFVTnNRa0VzVVVGQlFVRXNZMEZCWXl4RFFVRkRPMEZCUVVWb2JFSXNWVUZCUVVFc1MwRkJTeXhGUVVGTVFUdEJRVUZHTEZOQlFVUXNRMEZCWkR0QlFVTkVPMEZCUTBZN08zVkZRVWRyUWl4VlFVRkRRU3hMUVVGRUxFVkJRV2RFTzBGQlFVRXNWVUZEZWtScGJFSXNXVUZFZVVRc1IwRkRlRU1zVFVGQlMycHZReXhMUVVSdFF5eERRVU42UkdsdlF5eFpRVVI1UkRzN1FVRkhha1VzVlVGQlNVRXNXVUZCU2l4RlFVRnJRanRCUVVOb1FrRXNVVUZCUVVFc1dVRkJXU3hEUVVGRE8wRkJRVVZxYkVJc1ZVRkJRVUVzUzBGQlN5eEZRVUZNUVR0QlFVRkdMRk5CUVVRc1EwRkJXanRCUVVORU8wRkJRMFk3TzJ0RlFVZGhMRlZCUVVOQkxFdEJRVVFzUlVGQk1rTTdRVUZCUVN4VlFVTXZRM0Z0UWl4UFFVUXJReXhIUVVOdVF5eE5RVUZMY25CRExFdEJSRGhDTEVOQlF5OURjWEJETEU5QlJDdERPenRCUVVkMlJDeFZRVUZKUVN4UFFVRktMRVZCUVdFN1FVRkRXRUVzVVVGQlFVRXNUMEZCVHl4RFFVRkRPMEZCUVVWeWJVSXNWVUZCUVVFc1MwRkJTeXhGUVVGTVFUdEJRVUZHTEZOQlFVUXNRMEZCVUR0QlFVTkVPMEZCUTBZN08zRkZRVWRuUWl4VlFVRkRRU3hMUVVGRUxFVkJRVFpETzBGQlFVRXNWVUZEY0VSdGNFSXNZMEZFYjBRc1IwRkRha01zVFVGQlMyNXpReXhMUVVRMFFpeERRVU53UkcxelF5eGpRVVJ2UkRzN1FVRkJRU3hwUWtGRmRrTXNUVUZCUzA0c1MwRkJUQ3hKUVVGakxFVkJSbmxDTzBGQlFVRXNWVUZGY0VSUExGRkJSbTlFTEZGQlJYQkVRU3hSUVVadlJEczdRVUZITlVRc1ZVRkJUVU1zVFVGQlRTeEhRVU5XUkN4UlFVRlJMRWxCUVVsQkxGRkJRVkVzUTBGQlF6bHlReXhOUVVGVUxFZEJRV3RDTEVOQlFUbENMRWRCUVd0RE9ISkRMRkZCUVZFc1EwRkJRMjVyUXl4SFFVRlVMRU5CUVdGdGEwTXNVVUZCVVN4RFFVRkRPWEpETEUxQlFWUXNSMEZCYTBJc1EwRkJMMElzUTBGQmJFTXNSMEZCYzBVc1EwRkVlRVU3TzBGQlIwRXNWVUZCU1RaeVF5eGpRVUZLTEVWQlFXOUNPMEZCUTJ4Q1FTeFJRVUZCUVN4alFVRmpMRU5CUVVNN1FVRkJSVzV3UWl4VlFVRkJRU3hMUVVGTExFVkJRVXhCTEV0QlFVWTdRVUZCVTNGd1FpeFZRVUZCUVN4TlFVRk5MRVZCUVU1Qk8wRkJRVlFzVTBGQlJDeERRVUZrTzBGQlEwUTdRVUZEUmpzN2FVVkJSMWtzVlVGQlEzSndRaXhMUVVGRUxFVkJRVFpETzBGQlFVRXNWVUZEYUVSemNFSXNUVUZFWjBRc1IwRkRja01zVFVGQlMzUnpReXhMUVVSblF5eERRVU5vUkhOelF5eE5RVVJuUkRzN1FVRkhlRVFzVlVGQlNVRXNUVUZCU2l4RlFVRlpPMEZCUTFaQkxGRkJRVUZCTEUxQlFVMHNRMEZCUXp0QlFVRkZkSEJDTEZWQlFVRkJMRXRCUVVzc1JVRkJURUU3UVVGQlJpeFRRVUZFTEVOQlFVNDdRVUZEUkR0QlFVTkdPenQxUlVGSGEwSXNWVUZCUTBFc1MwRkJSQ3hGUVVFMlF6dEJRVUZCTEZWQlEzUkVkWEJDTEZsQlJITkVMRWRCUTNKRExFMUJRVXQyYzBNc1MwRkVaME1zUTBGRGRFUjFjME1zV1VGRWMwUTdRVUZGT1VRc1ZVRkJUWEpGTEZkQlFWY3NSMEZCU1N4TlFVRkxNa1FzUzBGQlRDeEpRVUZqTEUxQlFVdEJMRXRCUVV3c1EwRkJWek5FTEZkQlFURkNMRWxCUVRCRExFTkJRVGxFT3p0QlFVTkJMRmxCUVV0NllpeFJRVUZNTEVOQlFXTTdRVUZCUlhsaUxGRkJRVUZCTEZkQlFWY3NSVUZCV0VFN1FVRkJSaXhQUVVGa096dEJRVVZCTEZWQlFVbHhSU3haUVVGS0xFVkJRV3RDTzBGQlEyaENRU3hSUVVGQlFTeFpRVUZaTEVOQlFVTTdRVUZCUlhad1FpeFZRVUZCUVN4TFFVRkxMRVZCUVV4QkxFdEJRVVk3UVVGQlV6UnNRaXhWUVVGQlFTeEpRVUZKTEVWQlFVVldPMEZCUVdZc1UwRkJSQ3hEUVVGYU8wRkJRMFE3UVVGRFJqczdlVVZCUjI5Q0xGVkJRVU5zYkVJc1MwRkJSQ3hGUVVFeVF6dEJRVUZCTEZWQlEzUkVkVzFDTEdOQlJITkVMRWRCUTI1RExFMUJRVXQyY0VNc1MwRkVPRUlzUTBGRGRFUjFjRU1zWTBGRWMwUTdRVUZGT1VRc1ZVRkJUVk1zUzBGQlN5eEhRVUZKTEUxQlFVczJRaXhMUVVGTUxFbEJRV01zVFVGQlMwRXNTMEZCVEN4RFFVRlhOMElzUzBGQk1VSXNTVUZCYjBNc1MwRkJiRVE3TzBGQlJVRXNWVUZCU1ZRc1kwRkJTaXhGUVVGdlFqdEJRVU5zUWtFc1VVRkJRVUVzWTBGQll5eERRVUZETzBGQlFVVjJiVUlzVlVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGR08wRkJRVk1yYlVJc1ZVRkJRVUVzVFVGQlRTeEZRVUZGUXl4TFFVRkxMRWRCUVVjc1EwRkJTQ3hIUVVGUE8wRkJRVGRDTEZOQlFVUXNRMEZCWkR0QlFVTkVPMEZCUTBZN096czdPenM3TzBGQmFsQkVPenM3ZDBOQlNXOUNPMEZCUVVFc2QwSkJRM2RDTEV0QlFVdG9jVU1zUzBGRU4wSTdRVUZCUVN4VlFVTldPSEpETEZsQlJGVXNaVUZEVmtFc1dVRkVWVHRCUVVGQkxGVkJRMGt4UXl4UFFVUktMR1ZCUTBsQkxFOUJSRW83UVVGQlFTeFZRVU5oVnl4TlFVUmlMR1ZCUTJGQkxFMUJSR0k3UVVGSGJFSTdPMEZCUTBFc1ZVRkJTU3hQUVVGUGFHTXNVVUZCVUN4TFFVRnZRaXhYUVVGNFFpeEZRVUZ4UXp0QlFVTnVRMjlrTEZGQlFVRkJMREJDUVVFd1FpeERRVUZETEV0QlFVdGtMSE5DUVVGT0xFTkJRVEZDTzBGQlEwUXNUMEZPYVVJN096dEJRVkZzUWl4WFFVRkxNRUlzU1VGQlRDeEhRVkpyUWpzN1FVRlZiRUlzVjBGQlMxTXNVMEZCVEN4RFFVRmxla01zVFVGQlppeEZRVlpyUWpzN1FVRlpiRUlzVjBGQlN6QkRMR1ZCUVV3c1EwRkJjVUpZTEZsQlFYSkNMRVZCV210Q096dEJRV05zUWl4VlFVRkpNVU1zVDBGQlNpeEZRVUZoTzBGQlExZ3NZVUZCUzNCM1FpeEpRVUZNTzBGQlEwUTdRVUZEUmpzN08zVkRRVVZyUWpKRkxGZEJRV3RDTzBGQlEyNURPMEZCUTBFc1ZVRkJTVEowUWl4WFFVRlhMRU5CUVVNemRFSXNVMEZCVXl4RFFVRkRReXhIUVVGWUxFVkJRV2RDTEV0QlFVczFaQ3hMUVVGTUxFTkJRVmMwWkN4SFFVRXpRaXhEUVVGbUxFVkJRV2RFTzBGQlF6bERMR0ZCUVV0dGRVSXNTVUZCVER0QlFVTkVMRTlCU210RE96czdRVUZOYmtNc1ZVRkJTWEIxUWl4VFFVRlRMRU5CUVVOdmMwSXNUVUZCVml4TFFVRnhRaXhMUVVGTEwzQkRMRXRCUVV3c1EwRkJWeXR3UXl4TlFVRndReXhGUVVFMFF6dEJRVU14UXl4aFFVRkxlVU1zVTBGQlRDeERRVUZsTEV0QlFVdDRjME1zUzBGQlRDeERRVUZYSzNCRExFMUJRVEZDTzBGQlEwUXNUMEZTYTBNN096dEJRVlZ1UXl4VlFVRkpjSE5DTEZOQlFWTXNRMEZCUTIxMVFpeFpRVUZXTEV0QlFUSkNMRXRCUVVzNWNrTXNTMEZCVEN4RFFVRlhPSEpETEZsQlFURkRMRVZCUVhkRU8wRkJRM1JFTEdGQlFVdFhMR1ZCUVV3c1EwRkJjVUlzUzBGQlMzcHpReXhMUVVGTUxFTkJRVmM0Y2tNc1dVRkJhRU03UVVGRFJDeFBRVnByUXpzN08wRkJZMjVETEZWQlFVbHVkVUlzVTBGQlV5eERRVUZEZVhKQ0xFOUJRVllzUzBGQmMwSXNTMEZCUzNCd1F5eExRVUZNTEVOQlFWZHZjRU1zVDBGQmNrTXNSVUZCT0VNN1FVRkROVU1zV1VGQlNTeExRVUZMY0hCRExFdEJRVXdzUTBGQlYyOXdReXhQUVVGbUxFVkJRWGRDTzBGQlEzUkNMR1ZCUVV0d2QwSXNTVUZCVER0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHVkJRVXRTTEV0QlFVdzdRVUZEUkR0QlFVTkdPMEZCUTBZN096c3lRMEZGYzBJN1FVRkRja0kyZVVJc1RVRkJRVUVzTmtKQlFUWkNMRU5CUVVNc1MwRkJTMmhDTEhOQ1FVRk9MRU5CUVRkQ08wRkJRMFE3UVVGRlJEczdPMEZCU1VFN1FVRkRRVHM3T3pzMlFrRTBURk03UVVGQlFTeDVRa0ZaU0N4TFFVRkxjbkZETEV0QldrWTdRVUZCUVN4VlFVVk1LM2xDTEZkQlJrc3NaMEpCUlV4QkxGZEJSa3M3UVVGQlFTeFZRVWRNTWxvc1VVRklTeXhuUWtGSFRFRXNVVUZJU3p0QlFVRkJMRlZCU1V3MU9FSXNVVUZLU3l4blFrRkpURUVzVVVGS1N6dEJRVUZCTEZWQlMwdzJPRUlzU1VGTVN5eG5Ra0ZMVEVFc1NVRk1TenRCUVVGQkxGVkJUVXgyUkN4UFFVNUxMR2RDUVUxTVFTeFBRVTVMTzBGQlFVRXNWVUZQVEhkRUxGZEJVRXNzWjBKQlQweEJMRmRCVUVzN1FVRkJRU3hWUVZGTVF5eE5RVkpMTEdkQ1FWRk1RU3hOUVZKTE8wRkJRVUVzVlVGVFRFTXNUMEZVU3l4blFrRlRURUVzVDBGVVN6dEJRVUZCTEZWQlZVeHNka0lzUjBGV1N5eG5Ra0ZWVEVFc1IwRldTenRCUVVGQkxGVkJWMHh0YzBJc1RVRllTeXhuUWtGWFRFRXNUVUZZU3p0QlFVRkJMSGRDUVdGMVF5eExRVUZMZG1Rc1MwRmlOVU03UVVGQlFTeFZRV0ZETUdJc1YwRmlSQ3hsUVdGRFFTeFhRV0pFTzBGQlFVRXNWVUZoWTFBc1VVRmlaQ3hsUVdGalFTeFJRV0prTzBGQlFVRXNWVUZoZDBKdFF5eFZRV0o0UWl4bFFXRjNRa0VzVlVGaWVFSTdRVUZsVUN4VlFVRk5hSEpDTEdGQlFXRXNSMEZCU1dkeVFpeFZRVUZWTEVsQlFVa3NSMEZCWml4alFVRXlRaXhKUVVGSkwxY3NWMEZCVEN4SFFVRnZRaXhIUVVFNVF5eE5RVUYwUWp0QlFVVkJMREJDUVVORk0ybENPMEZCUTBVc1VVRkJRU3hIUVVGSExFVkJRVVVzUzBGQlN6STRRaXhaUVVSYU8wRkJSVVVzVVVGQlFTeFRRVUZUTEVWQlFVVXpkRU1zVVVGQlRTeERRVUZEZDNORExFMUJSbkJDTzBGQlIwVXNVVUZCUVN4TFFVRkxMRVZCUVVVN1FVRkJSVGx6UWl4VlFVRkJRU3hoUVVGaExFVkJRV0pCTEdGQlFVWTdRVUZCYVVKcVV5eFZRVUZCUVN4TlFVRk5MRVZCUVVWcE9VSXNWVUZCVlN4SFFVRkhMRTFCUVVnc1IwRkJXVHRCUVVFdlF6dEJRVWhVTEhOQ1FVdEZNVFZDTzBGQlEwVXNVVUZCUVN4UlFVRlJMRVZCUVVWbk5VSXNUMEZFV2p0QlFVVkZMRkZCUVVFc1NVRkJTU3hGUVVGRmRVUXNTVUZHVWp0QlFVZEZMRkZCUVVFc1MwRkJTeXhGUVVGRk5VTXNUVUZCVFN4TFFVRkxMRU5CU0hCQ08wRkJTVVVzVVVGQlFTeFhRVUZYTEVWQlFVVTJReXhYUVVwbU8wRkJTMFVzVVVGQlFTeE5RVUZOTEVWQlFVVkRMRTFCVEZZN1FVRk5SU3hSUVVGQkxFOUJRVThzUlVGQlJVTXNUMEZPV0R0QlFVOUZMRkZCUVVFc1IwRkJSeXhGUVVGRkxFOUJRVTlzZGtJc1IwRkJVQ3hMUVVGbExGRkJRV1lzUjBGQk1FSkJMRWRCUVRGQ0xFZEJRV2REVml4VFFWQjJRenRCUVZGRkxGRkJRVUVzUjBGQlJ5eEZRVUZGTEV0QlFVczRka0lzVjBGU1dqdEJRVk5GTEZGQlFVRXNVMEZCVXl4RlFVRkZOWFJETEZGQlFVMHNRMEZCUTNselF5eExRVlJ3UWp0QlFWVkZMRkZCUVVFc1UwRkJVeXhGUVVGRkxFdEJRVXR2UWl4aFFWWnNRanRCUVZkRkxGRkJRVUVzWjBKQlFXZENMRVZCUVVVc1MwRkJTME1zYjBKQldIcENPMEZCV1VVc1VVRkJRU3hQUVVGUExFVkJRVVVzUzBGQlMwTXNWMEZhYUVJN1FVRmhSU3hSUVVGQkxGRkJRVkVzUlVGQlJTeExRVUZMUXl4VlFXSnFRanRCUVdORkxGRkJRVUVzV1VGQldTeEZRVUZGTEV0QlFVdERMR2RDUVdSeVFqdEJRV1ZGTEZGQlFVRXNWVUZCVlN4RlFVRkZMRXRCUVV0RE8wRkJabTVDTEZOQmFVSkhNWFJETEV0QlFVc3NRMEZCUXpaeVF5eFBRVUZPTEVOQlFXTTNkRUlzUjBGQlpDeExRVU5EUVN4SFFVRkhMRU5CUVVNNVpDeEhRVUZLTEVOQlFWRXNWVUZCUVRSeVF5eE5RVUZOTzBGQlFVRXNORUpCUTFwME4wSTdRVUZCVVN4VlFVRkJMRWRCUVVjc1JVRkJSWE0zUWl4TlFVRk5MRU5CUVVNNWRFSXNSMEZCY0VJN1FVRkJlVUlzVlVGQlFTeEhRVUZITEVWQlFVVTRkRUlzVFVGQlRTeERRVUZET1hSQ0xFZEJRWEpETzBGQlFUQkRMRlZCUVVFc1NVRkJTU3hGUVVGRk9IUkNMRTFCUVUwc1EwRkJReTl2UWp0QlFVRjJSQ3hWUVVSWk8wRkJRVUVzVDBGQlpDeERRV3hDU2l4bFFYRkNSWFpUTzBGQlFVOHNVVUZCUVN4SlFVRkpMRVZCUVVNc1ZVRkJXanRCUVVGMVFpeFJRVUZCTEVkQlFVY3NSVUZCUlhNNFFqdEJRVUUxUWl4UlFYSkNSaXhEUVV4R0xFVkJORUpITlRoQ0xGRkJRVkVzYVVKQlExQk5MR05CUVVNc1IwRkJSRHRCUVVGTExGRkJRVUVzVVVGQlVTeEZRVUZETEZWQlFXUTdRVUZCZVVJc1VVRkJRU3hIUVVGSExFMUJRVFZDTzBGQlFUWkNMRkZCUVVFc1NVRkJTU3hOUVVGcVF6dEJRVUZyUXl4UlFVRkJMRTFCUVUwc1RVRkJlRU03UVVGQmVVTXNVVUZCUVN4TFFVRkxMRTFCUVRsRE8wRkJRU3RETEZGQlFVRXNVVUZCVVN4RlFVRkRPMEZCUVhoRUxGTkJRMGRPTEZGQlJFZ3NRMEUzUWtvc1JVRnJRMGNzUzBGQlN6bFFMRXRCUVV3c1EwRkJWMnR4UXl4UlFVRllMR2xDUVVORE9UVkNMR05CUVVNc1lVRkJSRHRCUVVORkxGRkJRVUVzTUVKQlFUQkNMRVZCUVVVc1MwRkJTM0JSTEV0QlFVd3NRMEZCVjNkd1F5d3dRa0ZFZWtNN1FVRkZSU3hSUVVGQkxEQkNRVUV3UWl4RlFVRkZMRXRCUVV0NGNFTXNTMEZCVEN4RFFVRlhlWEJETERCQ1FVWjZRenRCUVVkRkxGRkJRVUVzYzBKQlFYTkNMRVZCUVVVc1MwRkJTM3B3UXl4TFFVRk1MRU5CUVZjd2NFTXNjMEpCU0hKRE8wRkJTVVVzVVVGQlFTeDFRa0ZCZFVJc1JVRkJSU3hMUVVGTE1YQkRMRXRCUVV3c1EwRkJWekp3UXl4MVFrRktkRU03UVVGTFJTeFJRVUZCTEhOQ1FVRnpRaXhGUVVGRkxFdEJRVXN6Y0VNc1MwRkJUQ3hEUVVGWE5IQkRMSE5DUVV4eVF6dEJRVTFGTEZGQlFVRXNkMEpCUVhkQ0xFVkJRVVVzUzBGQlN6VndReXhMUVVGTUxFTkJRVmMyY0VNc2QwSkJUblpETzBGQlQwVXNVVUZCUVN4WFFVRlhMRVZCUVVVelFpeFhRVkJtTzBGQlVVVXNVVUZCUVN4UlFVRlJMRVZCUVVWUUxGRkJVbG83UVVGVFJTeFJRVUZCTEZWQlFWVXNSVUZCUlcxRExGVkJWR1E3UVVGVlJTeFJRVUZCTEUxQlFVMHNSVUZCUlN4TFFVRkxlVVFzVlVGV1pqdEJRVmRGTEZGQlFVRXNZMEZCWXl4RlFVRkZMRXRCUVV0RExHdENRVmgyUWp0QlFWbEZMRkZCUVVFc1dVRkJXU3hGUVVGRkxFdEJRVXRETEdkQ1FWcHlRanRCUVdGRkxGRkJRVUVzVDBGQlR5eEZRVUZGTEV0QlFVdERMRmRCWW1oQ08wRkJZMFVzVVVGQlFTeHJRa0ZCYTBJc1JVRkJSU3hMUVVGTFF5eG5Ra0ZrTTBJN1FVRmxSU3hSUVVGQkxHTkJRV01zUlVGQlJTeExRVUZMZGtRc2EwSkJablpDTzBGQlowSkZMRkZCUVVFc1QwRkJUeXhGUVVGRmFFSXNUMEZvUWxnN1FVRnBRa1VzVVVGQlFTeEpRVUZKTEVWQlFVVXNTMEZCUzNoQ0xFbEJha0ppTzBGQmEwSkZMRkZCUVVFc1RVRkJUU3hGUVVGRmJVTTdRVUZzUWxZc1VVRnVRMG9zUTBGRVJqdEJRVEpFUkRzN096dEZRWHBZWjBOdU5rSTdPMmRDUVVGa0t6ZENMRzlDUVV0Qk8wRkJRMnBDYmtNc1JVRkJRVUVzTUVKQlFUQkNMRVZCUVVWcU5VSXNVMEZCVXl4RFFVRkRVU3hOUVVSeVFqdEJRVVZxUWpBMFFpeEZRVUZCUVN3d1FrRkJNRUlzUlVGQlJXdzFRaXhUUVVGVExFTkJRVU5STEUxQlJuSkNPMEZCUjJwQ01qUkNMRVZCUVVGQkxITkNRVUZ6UWl4RlFVRkZialZDTEZOQlFWTXNRMEZCUTFFc1RVRklha0k3UVVGSmFrSTBORUlzUlVGQlFVRXNkVUpCUVhWQ0xFVkJRVVZ3TlVJc1UwRkJVeXhEUVVGRFVTeE5RVXBzUWp0QlFVdHFRalkwUWl4RlFVRkJRU3h6UWtGQmMwSXNSVUZCUlhJMVFpeFRRVUZUTEVOQlFVTlJMRTFCVEdwQ08wRkJUV3BDT0RSQ0xFVkJRVUZCTEhkQ1FVRjNRaXhGUVVGRmREVkNMRk5CUVZNc1EwRkJRMUVzVFVGT2JrSTdRVUZQYWtKbmFVSXNSVUZCUVVFc1YwRkJWeXhGUVVGRmVHbENMRk5CUVZNc1EwRkJRMDhzVFVGQlZpeERRVUZwUW5OTkxGVkJVR0k3UVVGUmFrSnpka0lzUlVGQlFVRXNVVUZCVVN4RlFVRkZiamhDTEZOQlFWTXNRMEZCUTFFc1RVRkJWaXhEUVVGcFFuRk5MRlZCVWxZN1FVRlRha0owVGl4RlFVRkJRU3hSUVVGUkxFVkJRVVZUTEZOQlFWTXNRMEZCUTIxQ0xFbEJWRWc3UVVGVmFrSjNORUlzUlVGQlFVRXNVVUZCVVN4RlFVRkZNelZDTEZOQlFWTXNRMEZCUTNOQ0xFbEJWa2c3UVVGWGFrSTROa0lzUlVGQlFVRXNTVUZCU1N4RlFVRkZjRGhDTEZOQlFWTXNRMEZCUTNOQ0xFbEJXRU03UVVGWmFrSnZOa0lzUlVGQlFVRXNaMEpCUVdkQ0xFVkJRVVV4TjBJc1UwRkJVeXhEUVVGRGVVOHNTVUZhV0R0QlFXRnFRbXQwUWl4RlFVRkJRU3hQUVVGUExFVkJRVVV6TjBJc1UwRkJVeXhEUVVGRGVVOHNTVUZpUmp0QlFXTnFRbTF4UWl4RlFVRkJRU3hyUWtGQmEwSXNSVUZCUlRVMFFpeFRRVUZUTEVOQlFVTjVUeXhKUVdSaU8wRkJaV3BDYlhSQ0xFVkJRVUZCTEdOQlFXTXNSVUZCUlRVM1FpeFRRVUZUTEVOQlFVTjVUeXhKUVdaVU8wRkJaMEpxUW5OeFFpeEZRVUZCUVN4TlFVRk5MRVZCUVVVdk5FSXNVMEZCVXl4RFFVRkRlVThzU1VGb1FrUTdRVUZwUW1wQ2NYRkNMRVZCUVVGQkxFOUJRVThzUlVGQlJUazBRaXhUUVVGVExFTkJRVU41VHl4SlFXcENSanRCUVd0Q2FrSm5kRUlzUlVGQlFVRXNUMEZCVHl4RlFVRkZlamRDTEZOQlFWTXNRMEZCUTNsUExFbEJiRUpHTzBGQmJVSnFRbk4wUWl4RlFVRkJRU3hOUVVGTkxFVkJRVVV2TjBJc1UwRkJVeXhEUVVGRGVVOHNTVUZ1UWtRN1FVRnZRbXBDZFhSQ0xFVkJRVUZCTEZsQlFWa3NSVUZCUldnNFFpeFRRVUZUTEVOQlFVTjVUeXhKUVhCQ1VEdEJRWEZDYWtKMWNVSXNSVUZCUVVFc1kwRkJZeXhGUVVGRmFEVkNMRk5CUVZNc1EwRkJRM2xQTEVsQmNrSlVPMEZCYzBKcVFqaHpRaXhGUVVGQlFTeFpRVUZaTEVWQlFVVjJOMElzVTBGQlV5eERRVUZEVHl4TlFYUkNVRHRCUVhWQ2FrSnpORUlzUlVGQlFVRXNUMEZCVHl4RlFVRkZOelJDTEZOQlFWTXNRMEZCUTNOQ0xFbEJka0pHTzBGQmQwSnFRaXMyUWl4RlFVRkJRU3hYUVVGWExFVkJRVVZ5T0VJc1UwRkJVeXhEUVVGRGMwSXNTVUY0UWs0N1FVRjVRbXBDWnpkQ0xFVkJRVUZCTEUxQlFVMHNSVUZCUlhRNFFpeFRRVUZUTEVOQlFVTlJMRTFCZWtKRU8wRkJNRUpxUWlzM1FpeEZRVUZCUVN4UFFVRlBMRVZCUVVWMk9FSXNVMEZCVXl4RFFVRkRReXhMUVVGV0xFTkJRV2RDTEVOQlFVTXNUVUZCUkN4RlFVRlRMRlZCUVZRc1JVRkJjVUlzVFVGQmNrSXNRMEZCYUVJc1EwRXhRbEU3UVVFeVFtcENiMDRzUlVGQlFVRXNSMEZCUnl4RlFVRkZjazRzVTBGQlV5eERRVUZEVFN4VFFVRldMRU5CUVc5Q0xFTkJRM1pDVGl4VFFVRlRMRU5CUVVOUkxFMUJSR0VzUlVGRmRrSlNMRk5CUVZNc1EwRkJRM05STEU5QlFWWXNRMEZEUlhSUkxGTkJRVk1zUTBGQlF6aE5MRXRCUVZZc1EwRkJaMEk3UVVGRFpITkdMRWxCUVVGQkxFbEJRVWtzUlVGQlJYQlRMRk5CUVZNc1EwRkJRME1zUzBGQlZpeERRVUZuUWl4RFFVRkRMRmxCUVVRc1JVRkJaU3hYUVVGbUxFVkJRVFJDTEZkQlFUVkNMRU5CUVdoQ0xFVkJRMGcwVFN4VlFVWlhPMEZCUjJSUkxFbEJRVUZCTEVkQlFVY3NSVUZCUlhKT0xGTkJRVk1zUTBGQlExRXNUVUZCVml4RFFVRnBRbkZOTzBGQlNGSXNSMEZCYUVJc1EwRkVSaXhEUVVaMVFpeERRVUZ3UWl4RlFWTkdRU3hWUVhCRFl6dEJRWEZEYWtJeWMwSXNSVUZCUVVFc1RVRkJUU3hGUVVGRmVEVkNMRk5CUVZNc1EwRkJRMDg3UVVGeVEwUTdPMmRDUVV4Qk5qWkNMSFZDUVRaRFJ6dEJRVU53UWtjc1JVRkJRVUVzV1VGQldTeEZRVUZGTEVOQlJFMDdRVUZGY0VJeFF5eEZRVUZCUVN4UFFVRlBMRVZCUVVVc1MwRkdWenRCUVVkd1FqQkVMRVZCUVVGQkxFOUJRVThzUlVGQlJTeE5RVWhYTzBGQlNYQkNMME1zUlVGQlFVRXNUVUZCVFN4RlFVRkZPMEZCU2xrN096czdJbjA9XG4iLCIvLyBAZmxvdyBzdHJpY3RcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJveCwgSWNvbiwgVG91Y2hhYmxlLCBUZXh0RmllbGQgfSBmcm9tICdnZXN0YWx0JztcblxudHlwZSBQcm9wcyA9IHt8XG4gIGFjY2Vzc2liaWxpdHlMYWJlbEljb246IHN0cmluZyxcbiAgZGlzYWJsZWQ/OiBib29sZWFuLFxuICBmb3J3YXJkZWRSZWY6IFJlYWN0LkVsZW1lbnRSZWY8YW55PixcbiAgaWQ6IHN0cmluZyxcbiAgaXNSVEw/OiBib29sZWFuLFxuICBvbkJsdXI/OiAoZXZlbnQ6IFN5bnRoZXRpY0ZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHZvaWQsXG4gIG9uQ2hhbmdlPzogKGV2ZW50OiBTeW50aGV0aWNJbnB1dEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkLFxuICBvbkNsaWNrPzogKCkgPT4gdm9pZCxcbiAgb25Gb2N1cz86IChldmVudDogU3ludGhldGljRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZCxcbiAgb25LZXlEb3duPzogKGV2ZW50OiBTeW50aGV0aWNLZXlib2FyZEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkLFxuICBwbGFjZWhvbGRlcj86IHN0cmluZyxcbiAgdmFsdWU/OiBzdHJpbmcsXG58fTtcblxuY2xhc3MgRGF0ZVBpY2tlclRleHRGaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBzZXRUZXh0RmllbGRSZWYgPSAoY29tcG9uZW50OiA/UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVGV4dEZpZWxkPikgPT4ge1xuICAgIGNvbnN0IHsgZm9yd2FyZGVkUmVmIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChjb21wb25lbnQgJiYgY29tcG9uZW50LnRleHRmaWVsZCkge1xuICAgICAgZm9yd2FyZGVkUmVmKGNvbXBvbmVudC50ZXh0ZmllbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3J3YXJkZWRSZWYobnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUJsdXIgPSAoe1xuICAgIGV2ZW50LFxuICB9OiB7XG4gICAgZXZlbnQ6IFN5bnRoZXRpY0ZvY3VzRXZlbnQ8SFRNTElucHV0RWxlbWVudD4sXG4gIH0pID0+IHtcbiAgICBjb25zdCB7IG9uQmx1ciB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSAoe1xuICAgIGV2ZW50LFxuICB9OiB7XG4gICAgZXZlbnQ6IFN5bnRoZXRpY0lucHV0RXZlbnQ8SFRNTElucHV0RWxlbWVudD4sXG4gIH0pID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVGb2N1cyA9ICh7XG4gICAgZXZlbnQsXG4gIH06IHtcbiAgICBldmVudDogU3ludGhldGljRm9jdXNFdmVudDxIVE1MSW5wdXRFbGVtZW50PixcbiAgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25Gb2N1cyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZUtleURvd24gPSAoe1xuICAgIGV2ZW50LFxuICB9OiB7XG4gICAgZXZlbnQ6IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4sXG4gIH0pID0+IHtcbiAgICBjb25zdCB7IG9uS2V5RG93biB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsSWNvbixcbiAgICAgIGRpc2FibGVkLFxuICAgICAgaWQsXG4gICAgICBpc1JUTCA9IGZhbHNlLFxuICAgICAgb25DbGljayxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgdmFsdWUsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvdWNoYWJsZSBvblRvdWNoPXtvbkNsaWNrfT5cbiAgICAgICAgPEJveFxuICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgIGNvbHVtbj17MTJ9XG4gICAgICAgICAgZmxleD1cImdyb3dcIlxuICAgICAgICAgIGRpc3BsYXk9XCJmbGV4XCJcbiAgICAgICAgICBwb3NpdGlvbj1cInJlbGF0aXZlXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxCb3ggY29sdW1uPXsxMn0gZmxleD1cImdyb3dcIj5cbiAgICAgICAgICAgIDxUZXh0RmllbGRcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBpZD17aWR9XG4gICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5oYW5kbGVCbHVyfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgIG9uRm9jdXM9e3RoaXMuaGFuZGxlRm9jdXN9XG4gICAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5oYW5kbGVLZXlEb3dufVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgIHJlZj17dGhpcy5zZXRUZXh0RmllbGRSZWZ9XG4gICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPEJveCBwb3NpdGlvbj1cImFic29sdXRlXCIgcmlnaHQ9eyFpc1JUTH0gbGVmdD17aXNSVEx9PlxuICAgICAgICAgICAgPEJveCBwb3NpdGlvbj1cInJlbGF0aXZlXCIgbWFyZ2luRW5kPXs0fT5cbiAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbEljb259XG4gICAgICAgICAgICAgICAgY29sb3I9XCJkYXJrR3JheVwiXG4gICAgICAgICAgICAgICAgaWNvbj1cImNhbGVuZGFyXCJcbiAgICAgICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8L0JveD5cbiAgICAgIDwvVG91Y2hhYmxlPlxuICAgICk7XG4gIH1cbn1cblxuLy8gJEZsb3dJc3N1ZSBSZWFjdC5mb3J3YXJkUmVmIGlzIHN0aWxsIG1pc3NpbmcgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzYxMDNcbmV4cG9ydCBkZWZhdWx0IFJlYWN0LmZvcndhcmRSZWYoKHByb3BzOiBQcm9wcywgcmVmOiBSZWFjdC5FbGVtZW50UmVmPGFueT4pID0+IChcbiAgPERhdGVQaWNrZXJUZXh0RmllbGQgey4uLnByb3BzfSBmb3J3YXJkZWRSZWY9e3JlZn0gLz5cbikpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcblxuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcblxuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7XG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcblxuICAgIGlmICghcGFyc2VSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKVxuICAgIH07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ9ij2YLZhCDZhdmGINir2KfZhtmK2Kkg2YjYp9it2K/YqScsXG4gICAgdHdvOiAn2KPZgtmEINmF2YYg2KvYp9mG2KrZitmGJyxcbiAgICB0aHJlZVRvVGVuOiAn2KPZgtmEINmF2YYge3tjb3VudH19INir2YjYp9mG2YonLFxuICAgIG90aGVyOiAn2KPZgtmEINmF2YYge3tjb3VudH19INir2KfZhtmK2KknXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJyxcbiAgICB0d286ICfYq9in2YbYqtmK2YYnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KvZiNin2YbZiicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2KvYp9mG2YrYqSdcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICfZhti12YEg2K/ZgtmK2YLYqScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJyxcbiAgICB0d286ICfYo9mC2YQg2YXZhiDYr9mC2YrZgtiq2YrZhicsXG4gICAgdGhyZWVUb1RlbjogJ9ij2YLZhCDZhdmGIHt7Y291bnR9fSDYr9mC2KfYptmCJyxcbiAgICBvdGhlcjogJ9ij2YLZhCDZhdmGIHt7Y291bnR9fSDYr9mC2YrZgtipJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsXG4gICAgdHdvOiAn2K/ZgtmK2YLYqtmK2YYnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2K/Zgtin2KbZgicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2K/ZgtmK2YLYqSdcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICfYs9in2LnYqSDZiNin2K3Yr9ipINiq2YLYsdmK2KjYp9mLJyxcbiAgICB0d286ICfYs9in2LnYqtmK2YYg2KrZgtix2YrYqNin2YsnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2LPYp9i52KfYqiDYqtmC2LHZitio2KfZiycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2LPYp9i52Kkg2KrZgtix2YrYqNin2YsnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJ9iz2KfYudipINmI2KfYrdiv2KknLFxuICAgIHR3bzogJ9iz2KfYudiq2YrZhicsXG4gICAgdGhyZWVUb1RlbjogJ3t7Y291bnR9fSDYs9in2LnYp9iqJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDYs9in2LnYqSdcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICfZitmI2YUg2YjYp9it2K8nLFxuICAgIHR3bzogJ9mK2YjZhdmK2YYnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KPZitin2YUnLFxuICAgIG90aGVyOiAne3tjb3VudH19INmK2YjZhSdcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICfYo9iz2KjZiNi5INmI2KfYrdivINiq2YLYsdmK2KjYp9mLJyxcbiAgICB0d286ICfYo9iz2KjZiNi52YrZhiDYqtmC2LHZitio2KfZiycsXG4gICAgdGhyZWVUb1RlbjogJ3t7Y291bnR9fSDYo9iz2KfYqNmK2Lkg2KrZgtix2YrYqNin2YsnLFxuICAgIG90aGVyOiAne3tjb3VudH19INij2LPYqNmI2Lkg2KrZgtix2YrYqNin2YsnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJ9ij2LPYqNmI2Lkg2YjYp9it2K8nLFxuICAgIHR3bzogJ9ij2LPYqNmI2LnZitmGJyxcbiAgICB0aHJlZVRvVGVuOiAne3tjb3VudH19INij2LPYp9io2YrYuScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2KPYs9io2YjYuSdcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAn2LTZh9ixINmI2KfYrdivINiq2YLYsdmK2KjYp9mLJyxcbiAgICB0d286ICfYtNmH2LHZitmGINiq2YLYsdmK2KjYp9mLJyxcbiAgICB0aHJlZVRvVGVuOiAne3tjb3VudH19INij2LTZh9ixINiq2YLYsdmK2KjYp9mLJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDYtNmH2LEg2KrZgtix2YrYqNin2YsnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICfYtNmH2LEg2YjYp9it2K8nLFxuICAgIHR3bzogJ9i02YfYsdmK2YYnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KPYtNmH2LEnLFxuICAgIG90aGVyOiAne3tjb3VudH19INi02YfYsSdcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICfYudin2YUg2YjYp9it2K8g2KrZgtix2YrYqNin2YsnLFxuICAgIHR3bzogJ9i52KfZhdmK2YYg2KrZgtix2YrYqNin2YsnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KPYudmI2KfZhSDYqtmC2LHZitio2KfZiycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2LnYp9mFINiq2YLYsdmK2KjYp9mLJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICfYudin2YUg2YjYp9it2K8nLFxuICAgIHR3bzogJ9i52KfZhdmK2YYnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KPYudmI2KfZhScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2LnYp9mFJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAn2KPZg9ir2LEg2YXZhiDYudin2YUnLFxuICAgIHR3bzogJ9ij2YPYq9ixINmF2YYg2LnYp9mF2YrZhicsXG4gICAgdGhyZWVUb1RlbjogJ9ij2YPYq9ixINmF2YYge3tjb3VudH19INij2LnZiNin2YUnLFxuICAgIG90aGVyOiAn2KPZg9ir2LEg2YXZhiB7e2NvdW50fX0g2LnYp9mFJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICfYudin2YUg2YjYp9it2K8g2KrZgtix2YrYqNin2YsnLFxuICAgIHR3bzogJ9i52KfZhdmK2YYg2KrZgtix2YrYqNin2YsnLFxuICAgIHRocmVlVG9UZW46ICd7e2NvdW50fX0g2KPYudmI2KfZhSDYqtmC2LHZitio2KfZiycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g2LnYp9mFINiq2YLYsdmK2KjYp9mLJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDIpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0udHdvO1xuICB9IGVsc2UgaWYgKGNvdW50IDw9IDEwKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLnRocmVlVG9UZW4ucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICfZgdmKINiu2YTYp9mEICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAn2YXZhtiwICcgKyByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ9i52YbYrycge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAn2LnZhtivJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIifYo9iu2LEnIGVlZWUgJ9i52YbYrycgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ9ij2YXYsyDYudmG2K8nIHBcIixcbiAgdG9kYXk6IFwiJ9in2YTZitmI2YUg2LnZhtivJyBwXCIsXG4gIHRvbW9ycm93OiBcIifYutiv2KfZiyDYudmG2K8nIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAn2LnZhtivJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfZgicsICfYqCddLFxuICBhYmJyZXZpYXRlZDogWyfZgi7ZhS4nLCAn2Kgu2YUuJ10sXG4gIHdpZGU6IFsn2YLYqNmEINin2YTZhdmK2YTYp9ivJywgJ9io2LnYryDYp9mE2YXZitmE2KfYryddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ9ixMScsICfYsTInLCAn2LEzJywgJ9ixNCddLFxuICB3aWRlOiBbJ9in2YTYsdio2Lkg2KfZhNij2YjZhCcsICfYp9mE2LHYqNi5INin2YTYq9in2YbZiicsICfYp9mE2LHYqNi5INin2YTYq9in2YTYqycsICfYp9mE2LHYqNi5INin2YTYsdin2KjYuSddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn2YonLCAn2YEnLCAn2YUnLCAn2KMnLCAn2YUnLCAn2YonLCAn2YonLCAn2KMnLCAn2LMnLCAn2KMnLCAn2YYnLCAn2K8nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn2YrZhtinJywgJ9mB2KjYsScsICfZhdin2LHYsycsICfYo9io2LHZitmEJywgJ9mF2KfZitmIJywgJ9mK2YjZhtmAJywgJ9mK2YjZhNmAJywgJ9ij2LrYs9mAJywgJ9iz2KjYqtmAJywgJ9ij2YPYqtmAJywgJ9mG2YjZgdmAJywgJ9iv2YrYs9mAJ10sXG4gIHdpZGU6IFsn2YrZhtin2YrYsScsICfZgdio2LHYp9mK2LEnLCAn2YXYp9ix2LMnLCAn2KPYqNix2YrZhCcsICfZhdin2YrZiCcsICfZitmI2YbZitmIJywgJ9mK2YjZhNmK2YgnLCAn2KPYutiz2LfYsycsICfYs9io2KrZhdio2LEnLCAn2KPZg9iq2YjYqNixJywgJ9mG2YjZgdmF2KjYsScsICfYr9mK2LPZhdio2LEnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfYrScsICfZhicsICfYqycsICfYsScsICfYricsICfYrCcsICfYsyddLFxuICBzaG9ydDogWyfYo9it2K8nLCAn2KfYq9mG2YrZhicsICfYq9mE2KfYq9in2KEnLCAn2KPYsdio2LnYp9ihJywgJ9iu2YXZitizJywgJ9is2YXYudipJywgJ9iz2KjYqiddLFxuICBhYmJyZXZpYXRlZDogWyfYo9it2K8nLCAn2KfYq9mG2YAnLCAn2KvZhNinJywgJ9ij2LHYqNmAJywgJ9iu2YXZitmAJywgJ9is2YXYudipJywgJ9iz2KjYqiddLFxuICB3aWRlOiBbJ9in2YTYo9it2K8nLCAn2KfZhNin2KvZhtmK2YYnLCAn2KfZhNir2YTYp9ir2KfYoScsICfYp9mE2KPYsdio2LnYp9ihJywgJ9in2YTYrtmF2YrYsycsICfYp9mE2KzZhdi52KknLCAn2KfZhNiz2KjYqiddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICfYtScsXG4gICAgcG06ICfZhScsXG4gICAgbWlkbmlnaHQ6ICfZhicsXG4gICAgbm9vbjogJ9i4JyxcbiAgICBtb3JuaW5nOiAn2LXYqNin2K3Yp9mLJyxcbiAgICBhZnRlcm5vb246ICfYqNi52K8g2KfZhNi42YfYsScsXG4gICAgZXZlbmluZzogJ9mF2LPYp9ih2KfZiycsXG4gICAgbmlnaHQ6ICfZhNmK2YTYp9mLJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn2LUnLFxuICAgIHBtOiAn2YUnLFxuICAgIG1pZG5pZ2h0OiAn2YbYtdmBINin2YTZhNmK2YQnLFxuICAgIG5vb246ICfYuNmH2LEnLFxuICAgIG1vcm5pbmc6ICfYtdio2KfYrdin2YsnLFxuICAgIGFmdGVybm9vbjogJ9io2LnYryDYp9mE2LjZh9ixJyxcbiAgICBldmVuaW5nOiAn2YXYs9in2KHYp9mLJyxcbiAgICBuaWdodDogJ9mE2YrZhNin2YsnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ9i1JyxcbiAgICBwbTogJ9mFJyxcbiAgICBtaWRuaWdodDogJ9mG2LXZgSDYp9mE2YTZitmEJyxcbiAgICBub29uOiAn2LjZh9ixJyxcbiAgICBtb3JuaW5nOiAn2LXYqNin2K3Yp9mLJyxcbiAgICBhZnRlcm5vb246ICfYqNi52K8g2KfZhNi42YfYsScsXG4gICAgZXZlbmluZzogJ9mF2LPYp9ih2KfZiycsXG4gICAgbmlnaHQ6ICfZhNmK2YTYp9mLJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn2LUnLFxuICAgIHBtOiAn2YUnLFxuICAgIG1pZG5pZ2h0OiAn2YYnLFxuICAgIG5vb246ICfYuCcsXG4gICAgbW9ybmluZzogJ9mB2Yog2KfZhNi12KjYp9itJyxcbiAgICBhZnRlcm5vb246ICfYqNi52K8g2KfZhNi42YDZh9ixJyxcbiAgICBldmVuaW5nOiAn2YHZiiDYp9mE2YXYs9in2KEnLFxuICAgIG5pZ2h0OiAn2YHZiiDYp9mE2YTZitmEJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn2LUnLFxuICAgIHBtOiAn2YUnLFxuICAgIG1pZG5pZ2h0OiAn2YbYtdmBINin2YTZhNmK2YQnLFxuICAgIG5vb246ICfYuNmH2LEnLFxuICAgIG1vcm5pbmc6ICfZgdmKINin2YTYtdio2KfYrScsXG4gICAgZXZlbmluZzogJ9mB2Yog2KfZhNmF2LPYp9ihJyxcbiAgICBuaWdodDogJ9mB2Yog2KfZhNmE2YrZhCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn2LUnLFxuICAgIHBtOiAn2YUnLFxuICAgIG1pZG5pZ2h0OiAn2YbYtdmBINin2YTZhNmK2YQnLFxuICAgIG5vb246ICfYuNmH2LEnLFxuICAgIGFmdGVybm9vbjogJ9io2LnYryDYp9mE2LjZgNmH2LEnLFxuICAgIGV2ZW5pbmc6ICfZgdmKINin2YTZhdiz2KfYoScsXG4gICAgbmlnaHQ6ICfZgdmKINin2YTZhNmK2YQnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIpIHtcbiAgcmV0dXJuIFN0cmluZyhkaXJ0eU51bWJlcik7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKNmCfNioKS9pLFxuICBhYmJyZXZpYXRlZDogL14o2YJcXC4/XFxzP9mFXFwuP3zZglxcLj9cXHM/2YVcXC4/XFxzP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz8pL2ksXG4gIHdpZGU6IC9eKNmC2KjZhCDYp9mE2YXZitmE2KfYr3zZgtio2YQg2KfZhNmF2YrZhNin2K982KjYudivINin2YTZhdmK2YTYp9ivfNio2LnYryDYp9mE2YXZitmE2KfYrykvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXtmC2KjZhC9pLCAvXtio2LnYry9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL17YsVsxMjM0XS9pLFxuICB3aWRlOiAvXtin2YTYsdio2LkgWzEyMzRdL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvZitmB2YXYo9mF2LPZhtivXS9pLFxuICBhYmJyZXZpYXRlZDogL14o2YrZhnzZgXzZhdin2LF82KPYqHzZhdin2Yp82YrZiNmGfNmK2YjZhHzYo9i6fNizfNij2YN82YZ82K8pL2ksXG4gIHdpZGU6IC9eKNmK2YZ82YF82YXYp9ixfNij2Kh82YXYp9mKfNmK2YjZhnzZitmI2YR82KPYunzYs3zYo9mDfNmGfNivKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17Zii9pLCAvXtmBL2ksIC9e2YUvaSwgL17Yoy9pLCAvXtmFL2ksIC9e2YovaSwgL17Zii9pLCAvXtijL2ksIC9e2LMvaSwgL17Yoy9pLCAvXtmGL2ksIC9e2K8vaV0sXG4gIGFueTogWy9e2YrZhi9pLCAvXtmBL2ksIC9e2YXYp9ixL2ksIC9e2KPYqC9pLCAvXtmF2KfZii9pLCAvXtmK2YjZhi9pLCAvXtmK2YjZhC9pLCAvXtij2LovaSwgL17Ysy9pLCAvXtij2YMvaSwgL17Zhi9pLCAvXtivL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b2K3Zhtir2LHYrtis2LNdL2ksXG4gIHNob3J0OiAvXijYo9it2K982KfYq9mG2YrZhnzYq9mE2KfYq9in2KF82KPYsdio2LnYp9ihfNiu2YXZitizfNis2YXYudipfNiz2KjYqikvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKNij2K3Yr3zYp9ir2YZ82KvZhNinfNij2LHYqHzYrtmF2Yp82KzZhdi52Kl82LPYqNiqKS9pLFxuICB3aWRlOiAvXijYp9mE2KPYrdivfNin2YTYp9ir2YbZitmGfNin2YTYq9mE2KfYq9in2KF82KfZhNij2LHYqNi52KfYoXzYp9mE2K7ZhdmK2LN82KfZhNis2YXYudipfNin2YTYs9io2KopL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17YrS9pLCAvXtmGL2ksIC9e2KsvaSwgL17YsS9pLCAvXtiuL2ksIC9e2KwvaSwgL17Ysy9pXSxcbiAgd2lkZTogWy9e2KfZhNij2K3Yry9pLCAvXtin2YTYp9ir2YbZitmGL2ksIC9e2KfZhNir2YTYp9ir2KfYoS9pLCAvXtin2YTYo9ix2KjYudin2KEvaSwgL17Yp9mE2K7ZhdmK2LMvaSwgL17Yp9mE2KzZhdi52KkvaSwgL17Yp9mE2LPYqNiqL2ldLFxuICBhbnk6IFsvXtij2K0vaSwgL17Yp9irL2ksIC9e2KsvaSwgL17Yo9ixL2ksIC9e2K4vaSwgL17YrC9pLCAvXtizL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgQXJhYmljIGxvY2FsZSAoU2F1aWQgQXJhYmljKS5cbiAqIEBsYW5ndWFnZSBBcmFiaWNcbiAqIEBpc28tNjM5LTIgYXJhXG4gKiBAYXV0aG9yIERoYWlmYWxsYWggQWx3YWRhbmkgW0BkYWx3YWRhbmlde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9kYWx3YWRhbml9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2FyLVNBJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tICcuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVVVENXZWVrKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0LCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnRTdGFydE9mV2VlayA9IHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZUxlZnQsIG9wdGlvbnMpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZldlZWsgPSBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGVSaWdodCwgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZXZWVrLmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZldlZWsuZ2V0VGltZSgpO1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ23DqW7EmyBuZcW+IHZ0ZcWZaW5hJyxcbiAgICAgIHBhc3Q6ICdwxZllZCBtw6luxJsgbmXFviB2dGXFmWlub3UnLFxuICAgICAgZnV0dXJlOiAnemEgbcOpbsSbIG5lxb4gdnRlxZlpbnUnXG4gICAgfSxcbiAgICBmZXc6IHtcbiAgICAgIHJlZ3VsYXI6ICdtw6luxJsgbmXFviB7e2NvdW50fX0gdnRlxZlpbnknLFxuICAgICAgcGFzdDogJ3DFmWVkIG3DqW7EmyBuZcW+IHt7Y291bnR9fSB2dGXFmWluYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3phIG3DqW7EmyBuZcW+IHt7Y291bnR9fSB2dGXFmWlueSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICdtw6luxJsgbmXFviB7e2NvdW50fX0gdnRlxZlpbicsXG4gICAgICBwYXN0OiAncMWZZWQgbcOpbsSbIG5lxb4ge3tjb3VudH19IHZ0ZcWZaW5hbWknLFxuICAgICAgZnV0dXJlOiAnemEgbcOpbsSbIG5lxb4ge3tjb3VudH19IHZ0ZcWZaW4nXG4gICAgfVxuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ3Z0ZcWZaW5hJyxcbiAgICAgIHBhc3Q6ICdwxZllZCB2dGXFmWlub3UnLFxuICAgICAgZnV0dXJlOiAnemEgdnRlxZlpbnUnXG4gICAgfSxcbiAgICBmZXc6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gdnRlxZlpbnknLFxuICAgICAgcGFzdDogJ3DFmWVkIHt7Y291bnR9fSB2dGXFmWluYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSB2dGXFmWlueSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gdnRlxZlpbicsXG4gICAgICBwYXN0OiAncMWZZWQge3tjb3VudH19IHZ0ZcWZaW5hbWknLFxuICAgICAgZnV0dXJlOiAnemEge3tjb3VudH19IHZ0ZcWZaW4nXG4gICAgfVxuICB9LFxuICBoYWxmQU1pbnV0ZToge1xuICAgIG90aGVyOiB7XG4gICAgICByZWd1bGFyOiAncMWvbCBtaW51dHknLFxuICAgICAgcGFzdDogJ3DFmWVkIHDFr2wgbWludXRvdScsXG4gICAgICBmdXR1cmU6ICd6YSBwxa9sIG1pbnV0eSdcbiAgICB9XG4gIH0sXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtw6luxJsgbmXFviBtaW51dGEnLFxuICAgICAgcGFzdDogJ3DFmWVkIG3DqW7EmyBuZcW+IG1pbnV0b3UnLFxuICAgICAgZnV0dXJlOiAnemEgbcOpbsSbIG5lxb4gbWludXR1J1xuICAgIH0sXG4gICAgZmV3OiB7XG4gICAgICByZWd1bGFyOiAnbcOpbsSbIG5lxb4ge3tjb3VudH19IG1pbnV0eScsXG4gICAgICBwYXN0OiAncMWZZWQgbcOpbsSbIG5lxb4ge3tjb3VudH19IG1pbnV0YW1pJyxcbiAgICAgIGZ1dHVyZTogJ3phIG3DqW7EmyBuZcW+IHt7Y291bnR9fSBtaW51dHknXG4gICAgfSxcbiAgICBtYW55OiB7XG4gICAgICByZWd1bGFyOiAnbcOpbsSbIG5lxb4ge3tjb3VudH19IG1pbnV0JyxcbiAgICAgIHBhc3Q6ICdwxZllZCBtw6luxJsgbmXFviB7e2NvdW50fX0gbWludXRhbWknLFxuICAgICAgZnV0dXJlOiAnemEgbcOpbsSbIG5lxb4ge3tjb3VudH19IG1pbnV0J1xuICAgIH1cbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtaW51dGEnLFxuICAgICAgcGFzdDogJ3DFmWVkIG1pbnV0b3UnLFxuICAgICAgZnV0dXJlOiAnemEgbWludXR1J1xuICAgIH0sXG4gICAgZmV3OiB7XG4gICAgICByZWd1bGFyOiAne3tjb3VudH19IG1pbnV0eScsXG4gICAgICBwYXN0OiAncMWZZWQge3tjb3VudH19IG1pbnV0YW1pJyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSBtaW51dHknXG4gICAgfSxcbiAgICBtYW55OiB7XG4gICAgICByZWd1bGFyOiAne3tjb3VudH19IG1pbnV0JyxcbiAgICAgIHBhc3Q6ICdwxZllZCB7e2NvdW50fX0gbWludXRhbWknLFxuICAgICAgZnV0dXJlOiAnemEge3tjb3VudH19IG1pbnV0J1xuICAgIH1cbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdwxZlpYmxpxb5uxJsgaG9kaW5hJyxcbiAgICAgIHBhc3Q6ICdwxZlpYmxpxb5uxJsgcMWZZWQgaG9kaW5vdScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEgaG9kaW51J1xuICAgIH0sXG4gICAgZmV3OiB7XG4gICAgICByZWd1bGFyOiAncMWZaWJsacW+bsSbIHt7Y291bnR9fSBob2RpbnknLFxuICAgICAgcGFzdDogJ3DFmWlibGnFvm7EmyBwxZllZCB7e2NvdW50fX0gaG9kaW5hbWknLFxuICAgICAgZnV0dXJlOiAncMWZaWJsacW+bsSbIHphIHt7Y291bnR9fSBob2RpbnknXG4gICAgfSxcbiAgICBtYW55OiB7XG4gICAgICByZWd1bGFyOiAncMWZaWJsacW+bsSbIHt7Y291bnR9fSBob2RpbicsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIHt7Y291bnR9fSBob2RpbmFtaScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEge3tjb3VudH19IGhvZGluJ1xuICAgIH1cbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnaG9kaW5hJyxcbiAgICAgIHBhc3Q6ICdwxZllZCBob2Rpbm91JyxcbiAgICAgIGZ1dHVyZTogJ3phIGhvZGludSdcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBob2RpbnknLFxuICAgICAgcGFzdDogJ3DFmWVkIHt7Y291bnR9fSBob2RpbmFtaScsXG4gICAgICBmdXR1cmU6ICd6YSB7e2NvdW50fX0gaG9kaW55J1xuICAgIH0sXG4gICAgbWFueToge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBob2RpbicsXG4gICAgICBwYXN0OiAncMWZZWQge3tjb3VudH19IGhvZGluYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSBob2RpbidcbiAgICB9XG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnZGVuJyxcbiAgICAgIHBhc3Q6ICdwxZllZCBkbmVtJyxcbiAgICAgIGZ1dHVyZTogJ3phIGRlbidcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBkbnknLFxuICAgICAgcGFzdDogJ3DFmWVkIHt7Y291bnR9fSBkbnknLFxuICAgICAgZnV0dXJlOiAnemEge3tjb3VudH19IGRueSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gZG7DrScsXG4gICAgICBwYXN0OiAncMWZZWQge3tjb3VudH19IGRueScsXG4gICAgICBmdXR1cmU6ICd6YSB7e2NvdW50fX0gZG7DrSdcbiAgICB9XG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAncMWZaWJsacW+bsSbIHTDvWRlbicsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIHTDvWRuZW0nLFxuICAgICAgZnV0dXJlOiAncMWZaWJsacW+bsSbIHphIHTDvWRlbidcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3DFmWlibGnFvm7EmyB7e2NvdW50fX0gdMO9ZG55JyxcbiAgICAgIHBhc3Q6ICdwxZlpYmxpxb5uxJsgcMWZZWQge3tjb3VudH19IHTDvWRueScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEge3tjb3VudH19IHTDvWRueSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICdwxZlpYmxpxb5uxJsge3tjb3VudH19IHTDvWRuxa8nLFxuICAgICAgcGFzdDogJ3DFmWlibGnFvm7EmyBwxZllZCB7e2NvdW50fX0gdMO9ZG55JyxcbiAgICAgIGZ1dHVyZTogJ3DFmWlibGnFvm7EmyB6YSB7e2NvdW50fX0gdMO9ZG7FrydcbiAgICB9XG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ3TDvWRlbicsXG4gICAgICBwYXN0OiAncMWZZWQgdMO9ZG5lbScsXG4gICAgICBmdXR1cmU6ICd6YSB0w71kZW4nXG4gICAgfSxcbiAgICBmZXc6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gdMO9ZG55JyxcbiAgICAgIHBhc3Q6ICdwxZllZCB7e2NvdW50fX0gdMO9ZG55JyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSB0w71kbnknXG4gICAgfSxcbiAgICBtYW55OiB7XG4gICAgICByZWd1bGFyOiAne3tjb3VudH19IHTDvWRuxa8nLFxuICAgICAgcGFzdDogJ3DFmWVkIHt7Y291bnR9fSB0w71kbnknLFxuICAgICAgZnV0dXJlOiAnemEge3tjb3VudH19IHTDvWRuxa8nXG4gICAgfVxuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdwxZlpYmxpxb5uxJsgbcSbc8OtYycsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIG3Em3PDrWNlbScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEgbcSbc8OtYydcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3DFmWlibGnFvm7EmyB7e2NvdW50fX0gbcSbc8OtY2UnLFxuICAgICAgcGFzdDogJ3DFmWlibGnFvm7EmyBwxZllZCB7e2NvdW50fX0gbcSbc8OtY2knLFxuICAgICAgZnV0dXJlOiAncMWZaWJsacW+bsSbIHphIHt7Y291bnR9fSBtxJtzw61jZSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICdwxZlpYmxpxb5uxJsge3tjb3VudH19IG3Em3PDrWPFrycsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIHt7Y291bnR9fSBtxJtzw61jaScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEge3tjb3VudH19IG3Em3PDrWPFrydcbiAgICB9XG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtxJtzw61jJyxcbiAgICAgIHBhc3Q6ICdwxZllZCBtxJtzw61jZW0nLFxuICAgICAgZnV0dXJlOiAnemEgbcSbc8OtYydcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBtxJtzw61jZScsXG4gICAgICBwYXN0OiAncMWZZWQge3tjb3VudH19IG3Em3PDrWNpJyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSBtxJtzw61jZSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gbcSbc8OtY8WvJyxcbiAgICAgIHBhc3Q6ICdwxZllZCB7e2NvdW50fX0gbcSbc8OtY2knLFxuICAgICAgZnV0dXJlOiAnemEge3tjb3VudH19IG3Em3PDrWPFrydcbiAgICB9XG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAncMWZaWJsacW+bsSbIHJvaycsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIHJva2VtJyxcbiAgICAgIGZ1dHVyZTogJ3DFmWlibGnFvm7EmyB6YSByb2snXG4gICAgfSxcbiAgICBmZXc6IHtcbiAgICAgIHJlZ3VsYXI6ICdwxZlpYmxpxb5uxJsge3tjb3VudH19IHJva3knLFxuICAgICAgcGFzdDogJ3DFmWlibGnFvm7EmyBwxZllZCB7e2NvdW50fX0gcm9reScsXG4gICAgICBmdXR1cmU6ICdwxZlpYmxpxb5uxJsgemEge3tjb3VudH19IHJva3knXG4gICAgfSxcbiAgICBtYW55OiB7XG4gICAgICByZWd1bGFyOiAncMWZaWJsacW+bsSbIHt7Y291bnR9fSByb2vFrycsXG4gICAgICBwYXN0OiAncMWZaWJsacW+bsSbIHDFmWVkIHt7Y291bnR9fSByb2t5JyxcbiAgICAgIGZ1dHVyZTogJ3DFmWlibGnFvm7EmyB6YSB7e2NvdW50fX0gcm9rxa8nXG4gICAgfVxuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdyb2snLFxuICAgICAgcGFzdDogJ3DFmWVkIHJva2VtJyxcbiAgICAgIGZ1dHVyZTogJ3phIHJvaydcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSByb2t5JyxcbiAgICAgIHBhc3Q6ICdwxZllZCB7e2NvdW50fX0gcm9reScsXG4gICAgICBmdXR1cmU6ICd6YSB7e2NvdW50fX0gcm9reSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gcm9rxa8nLFxuICAgICAgcGFzdDogJ3DFmWVkIHt7Y291bnR9fSByb2t5JyxcbiAgICAgIGZ1dHVyZTogJ3phIHt7Y291bnR9fSByb2vFrydcbiAgICB9XG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICd2w61jZSBuZcW+IHJvaycsXG4gICAgICBwYXN0OiAncMWZZWQgdsOtY2UgbmXFviByb2tlbScsXG4gICAgICBmdXR1cmU6ICd6YSB2w61jZSBuZcW+IHJvaydcbiAgICB9LFxuICAgIGZldzoge1xuICAgICAgcmVndWxhcjogJ3bDrWNlIG5lxb4ge3tjb3VudH19IHJva3knLFxuICAgICAgcGFzdDogJ3DFmWVkIHbDrWNlIG5lxb4ge3tjb3VudH19IHJva3knLFxuICAgICAgZnV0dXJlOiAnemEgdsOtY2UgbmXFviB7e2NvdW50fX0gcm9reSdcbiAgICB9LFxuICAgIG1hbnk6IHtcbiAgICAgIHJlZ3VsYXI6ICd2w61jZSBuZcW+IHt7Y291bnR9fSByb2vFrycsXG4gICAgICBwYXN0OiAncMWZZWQgdsOtY2UgbmXFviB7e2NvdW50fX0gcm9reScsXG4gICAgICBmdXR1cmU6ICd6YSB2w61jZSBuZcW+IHt7Y291bnR9fSByb2vFrydcbiAgICB9XG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ3Nrb3JvIHJvaycsXG4gICAgICBwYXN0OiAnc2tvcm8gcMWZZWQgcm9rZW0nLFxuICAgICAgZnV0dXJlOiAnc2tvcm8gemEgcm9rJ1xuICAgIH0sXG4gICAgZmV3OiB7XG4gICAgICByZWd1bGFyOiAnc2tvcm8ge3tjb3VudH19IHJva3knLFxuICAgICAgcGFzdDogJ3Nrb3JvIHDFmWVkIHt7Y291bnR9fSByb2t5JyxcbiAgICAgIGZ1dHVyZTogJ3Nrb3JvIHphIHt7Y291bnR9fSByb2t5J1xuICAgIH0sXG4gICAgbWFueToge1xuICAgICAgcmVndWxhcjogJ3Nrb3JvIHt7Y291bnR9fSByb2vFrycsXG4gICAgICBwYXN0OiAnc2tvcm8gcMWZZWQge3tjb3VudH19IHJva3knLFxuICAgICAgZnV0dXJlOiAnc2tvcm8gemEge3tjb3VudH19IHJva8WvJ1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHNjaGVtZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTsgLy8gY3MgcGx1cmFsaXphdGlvblxuXG4gIHZhciBwbHVyYWxUb2tlbjtcblxuICBpZiAodHlwZW9mIHNjaGVtZS5vdGhlciA9PT0gJ29iamVjdCcpIHtcbiAgICBwbHVyYWxUb2tlbiA9ICdvdGhlcic7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICBwbHVyYWxUb2tlbiA9ICdvbmUnO1xuICB9IGVsc2UgaWYgKGNvdW50ID4gMSAmJiBjb3VudCA8IDUgfHwgY291bnQgPT09IDApIHtcbiAgICBwbHVyYWxUb2tlbiA9ICdmZXcnO1xuICB9IGVsc2Uge1xuICAgIHBsdXJhbFRva2VuID0gJ21hbnknO1xuICB9IC8vIHRpbWVzXG5cblxuICB2YXIgc3VmZml4RXhpc3QgPSBvcHRpb25zLmFkZFN1ZmZpeCA9PT0gdHJ1ZTtcbiAgdmFyIGNvbXBhcmlzb24gPSBvcHRpb25zLmNvbXBhcmlzb247XG4gIHZhciB0aW1lVG9rZW47XG5cbiAgaWYgKHN1ZmZpeEV4aXN0ICYmIGNvbXBhcmlzb24gPT09IC0xKSB7XG4gICAgdGltZVRva2VuID0gJ3Bhc3QnO1xuICB9IGVsc2UgaWYgKHN1ZmZpeEV4aXN0ICYmIGNvbXBhcmlzb24gPT09IDEpIHtcbiAgICB0aW1lVG9rZW4gPSAnZnV0dXJlJztcbiAgfSBlbHNlIHtcbiAgICB0aW1lVG9rZW4gPSAncmVndWxhcic7XG4gIH1cblxuICByZXR1cm4gc2NoZW1lW3BsdXJhbFRva2VuXVt0aW1lVG9rZW5dLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkLiBNTU1NIHl5eXknLFxuICBsb25nOiAnZC4gTU1NTSB5eXl5JyxcbiAgbWVkaXVtOiAnZC5NLnl5eXknLFxuICBzaG9ydDogJ2QuTS55eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSDptbTpzcycsXG4gIHNob3J0OiAnSDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICd2JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICd2JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgYWNjdXNhdGl2ZVdlZWtkYXlzID0gWyduZWTEm2xpJywgJ3BvbmTEm2zDrScsICfDunRlcsO9JywgJ3N0xZllZHUnLCAnxI10dnJ0ZWsnLCAncMOhdGVrJywgJ3NvYm90dSddO1xudmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCIncG9zbGVkbsOtJyBlZWVlICd2ZScgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3bEjWVyYSB2JyBwXCIsXG4gIHRvZGF5OiBcIidkbmVzIHYnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3rDrXRyYSB2JyBwXCIsXG4gIG5leHRXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICAgIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHJldHVybiBcIid2IFwiICsgYWNjdXNhdGl2ZVdlZWtkYXlzW2RheV0gKyBcIiBvJyBwXCI7XG4gIH0sXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIGZvcm1hdCA9IGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcblxuICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmb3JtYXQoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdDtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydwxZkuIG4uIGwuJywgJ24uIGwuJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3DFmS4gbi4gbC4nLCAnbi4gbC4nXSxcbiAgd2lkZTogWydwxZllZCBuYcWhw61tIGxldG9wb8SNdGVtJywgJ25hxaFlaG8gbGV0b3BvxI10dSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJzEuIMSNdHZydGxldMOtJywgJzIuIMSNdHZydGxldMOtJywgJzMuIMSNdHZydGxldMOtJywgJzQuIMSNdHZydGxldMOtJ10sXG4gIHdpZGU6IFsnMS4gxI10dnJ0bGV0w60nLCAnMi4gxI10dnJ0bGV0w60nLCAnMy4gxI10dnJ0bGV0w60nLCAnNC4gxI10dnJ0bGV0w60nXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0wnLCAnw5onLCAnQicsICdEJywgJ0snLCAnxIwnLCAnxIwnLCAnUycsICdaJywgJ8WYJywgJ0wnLCAnUCddLFxuICBhYmJyZXZpYXRlZDogWydsZWQnLCAnw7pubycsICdixZllJywgJ2R1YicsICdrdsSbJywgJ8SNdm4nLCAnxI12YycsICdzcnAnLCAnesOhxZknLCAnxZnDrWonLCAnbGlzJywgJ3BybyddLFxuICB3aWRlOiBbJ2xlZGVuJywgJ8O6bm9yJywgJ2LFmWV6ZW4nLCAnZHViZW4nLCAna3bEm3RlbicsICfEjWVydmVuJywgJ8SNZXJ2ZW5lYycsICdzcnBlbicsICd6w6HFmcOtJywgJ8WZw61qZW4nLCAnbGlzdG9wYWQnLCAncHJvc2luZWMnXVxufTtcbnZhciBmb3JtYXR0aW5nTW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydMJywgJ8OaJywgJ0InLCAnRCcsICdLJywgJ8SMJywgJ8SMJywgJ1MnLCAnWicsICfFmCcsICdMJywgJ1AnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnbGVkJywgJ8O6bm8nLCAnYsWZZScsICdkdWInLCAna3bEmycsICfEjXZuJywgJ8SNdmMnLCAnc3JwJywgJ3rDocWZJywgJ8WZw61qJywgJ2xpcycsICdwcm8nXSxcbiAgd2lkZTogWydsZWRuYScsICfDum5vcmEnLCAnYsWZZXpuYScsICdkdWJuYScsICdrdsSbdG5hJywgJ8SNZXJ2bmEnLCAnxI1lcnZlbmNlJywgJ3NycG5hJywgJ3rDocWZw60nLCAnxZnDrWpuYScsICdsaXN0b3BhZHUnLCAncHJvc2luY2UnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyduZScsICdwbycsICfDunQnLCAnc3QnLCAnxI10JywgJ3DDoScsICdzbyddLFxuICBzaG9ydDogWyduZScsICdwbycsICfDunQnLCAnc3QnLCAnxI10JywgJ3DDoScsICdzbyddLFxuICBhYmJyZXZpYXRlZDogWyduZWQnLCAncG9uJywgJ8O6dGUnLCAnc3TFmScsICfEjXR2JywgJ3DDoXQnLCAnc29iJ10sXG4gIHdpZGU6IFsnbmVkxJtsZScsICdwb25kxJtsw60nLCAnw7p0ZXLDvScsICdzdMWZZWRhJywgJ8SNdHZydGVrJywgJ3DDoXRlaycsICdzb2JvdGEnXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnZG9wLicsXG4gICAgcG06ICdvZHAuJyxcbiAgICBtaWRuaWdodDogJ3DFr2xub2MnLFxuICAgIG5vb246ICdwb2xlZG5lJyxcbiAgICBtb3JuaW5nOiAncsOhbm8nLFxuICAgIGFmdGVybm9vbjogJ29kcG9sZWRuZScsXG4gICAgZXZlbmluZzogJ3ZlxI1lcicsXG4gICAgbmlnaHQ6ICdub2MnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdkb3AuJyxcbiAgICBwbTogJ29kcC4nLFxuICAgIG1pZG5pZ2h0OiAncMWvbG5vYycsXG4gICAgbm9vbjogJ3BvbGVkbmUnLFxuICAgIG1vcm5pbmc6ICdyw6FubycsXG4gICAgYWZ0ZXJub29uOiAnb2Rwb2xlZG5lJyxcbiAgICBldmVuaW5nOiAndmXEjWVyJyxcbiAgICBuaWdodDogJ25vYydcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnZG9wb2xlZG5lJyxcbiAgICBwbTogJ29kcG9sZWRuZScsXG4gICAgbWlkbmlnaHQ6ICdwxa9sbm9jJyxcbiAgICBub29uOiAncG9sZWRuZScsXG4gICAgbW9ybmluZzogJ3LDoW5vJyxcbiAgICBhZnRlcm5vb246ICdvZHBvbGVkbmUnLFxuICAgIGV2ZW5pbmc6ICd2ZcSNZXInLFxuICAgIG5pZ2h0OiAnbm9jJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnZG9wLicsXG4gICAgcG06ICdvZHAuJyxcbiAgICBtaWRuaWdodDogJ3DFr2xub2MnLFxuICAgIG5vb246ICdwb2xlZG5lJyxcbiAgICBtb3JuaW5nOiAncsOhbm8nLFxuICAgIGFmdGVybm9vbjogJ29kcG9sZWRuZScsXG4gICAgZXZlbmluZzogJ3ZlxI1lcicsXG4gICAgbmlnaHQ6ICdub2MnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdkb3AuJyxcbiAgICBwbTogJ29kcC4nLFxuICAgIG1pZG5pZ2h0OiAncMWvbG5vYycsXG4gICAgbm9vbjogJ3BvbGVkbmUnLFxuICAgIG1vcm5pbmc6ICdyw6FubycsXG4gICAgYWZ0ZXJub29uOiAnb2Rwb2xlZG5lJyxcbiAgICBldmVuaW5nOiAndmXEjWVyJyxcbiAgICBuaWdodDogJ25vYydcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnZG9wb2xlZG5lJyxcbiAgICBwbTogJ29kcG9sZWRuZScsXG4gICAgbWlkbmlnaHQ6ICdwxa9sbm9jJyxcbiAgICBub29uOiAncG9sZWRuZScsXG4gICAgbW9ybmluZzogJ3LDoW5vJyxcbiAgICBhZnRlcm5vb246ICdvZHBvbGVkbmUnLFxuICAgIGV2ZW5pbmc6ICd2ZcSNZXInLFxuICAgIG5pZ2h0OiAnbm9jJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJy4nO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ01vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspXFwuPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14ocFvFmXJdZWQgS3JcXC58cHJlZCBuXFwuIGxcXC58cG8gS3JcXC58blxcLiBsXFwuKS9pLFxuICBhYmJyZXZpYXRlZDogL14ocGVbxZlyXWVkIEtyXFwufHBlW8WZcl1lZCBuXFwuIGxcXC58cG8gS3JcXC58blxcLiBsXFwuKS9pLFxuICB3aWRlOiAvXihwW8WZcl1lZCBLcmlzdGVtfHByZWQgbmFbxaFzXVvDrWldbSBsZXRvcG9bxI1jXXRlbXxwbyBLcmlzdHV8bmFbxaFzXWVobyBsZXRvcG9bxI1jXXR1KS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9ecFvFmXJdL2ksIC9eKHBvfG4pL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXlsxMjM0XVxcLiBbxI1jXXR2cnRsZXRbw61pXS9pLFxuICB3aWRlOiAvXlsxMjM0XVxcLiBbxI1jXXR2cnRsZXRbw61pXS9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bbMO6dWJka8SNY3N6xZlybHBdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihsZWR8W8O6dV1ub3xiW8WZcl1lfGR1YnxrdlvEm2VdfFvEjWNddm58W8SNY112Y3xzcnB8elvDoWFdW8WZcl18W8WZcl1bw61pXWp8bGlzfHBybykvaSxcbiAgd2lkZTogL14obGVkZW58bGVkbmF8W8O6dV1ub3JhP3xiW8WZcl1lemVufGJbxZlyXWV6bmF8ZHViZW58ZHVibmF8a3ZbxJtlXXRlbnxrdlvEm2VddG5hfFvEjWNdZXJ2ZW4oZWN8Y2UpP3xbxI1jXWVydm5hfHNycGVufHNycG5hfHpbw6FhXVvFmXJdW8OtaV18W8WZcl1bw61pXWplbnxbxZlyXVvDrWldam5hfGxpc3RvcGFkKGF8dSk/fHByb3NpbmVjfHByb3NpbmNlKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15sL2ksIC9eW8O6dV0vaSwgL15iL2ksIC9eZC9pLCAvXmsvaSwgL15bxI1jXS9pLCAvXlvEjWNdL2ksIC9ecy9pLCAvXnovaSwgL15bxZlyXS9pLCAvXmwvaSwgL15wL2ldLFxuICBhbnk6IFsvXmxlZC9pLCAvXlvDunVdbi9pLCAvXmJbxZlyXWUvaSwgL15kdWIvaSwgL15rdlvEm2VdL2ksIC9eW8SNY112bnxbxI1jXWVydmVuKD8hXFx3KXxbxI1jXWVydm5hL2ksIC9eW8SNY112Y3xbxI1jXWVydmVuKGVjfGNlKS9pLCAvXnNycC9pLCAvXnpbw6FhXVvFmXJdL2ksIC9eW8WZcl1bw61pXWovaSwgL15saXMvaSwgL15wcm8vaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltucHXDunPEjXBzXS9pLFxuICBzaG9ydDogL14obmV8cG98W8O6dV10fHN0fFvEjWNddHxwW8OhYV18c28pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihuZXxwb3xbw7p1XXR8c3R8W8SNY110fHBbw6FhXXxzbykvaSxcbiAgd2lkZTogL14obmVkW8SbZV1sZXxwb25kW8SbZV1sW8OtaV18W8O6dV10ZXJbw715XXxzdFvFmXJdZWRhfFvEjWNddHZydGVrfHBbw6FhXXRla3xzb2JvdGEpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15uL2ksIC9ecC9pLCAvXlvDunVdL2ksIC9ecy9pLCAvXlvEjWNdL2ksIC9ecC9pLCAvXnMvaV0sXG4gIGFueTogWy9ebmUvaSwgL15wby9pLCAvXnV0L2ksIC9ec3QvaSwgL15bxI1jXXQvaSwgL15wL2ksIC9ec28vaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiAvXmRvcG9sZWRuZXxkb3BcXC4/fG9kcG9sZWRuZXxvZHBcXC4/fHDFr2xub2N8cG9sZWRuZXxyW8OhYV1ub3xvZHBvbGVkbmV8dmVbxI1jXWVyfCh2ICk/bm9jaS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmRvcC9pLFxuICAgIHBtOiAvXm9kcC9pLFxuICAgIG1pZG5pZ2h0OiAvXnBbxa91XWxub2MvaSxcbiAgICBub29uOiAvXnBvbGVkbmUvaSxcbiAgICBtb3JuaW5nOiAvclvDoWFdbm8vaSxcbiAgICBhZnRlcm5vb246IC9vZHBvbGVkbmUvaSxcbiAgICBldmVuaW5nOiAvdmVbxI1jXWVyL2ksXG4gICAgbmlnaHQ6IC9ub2MvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgQ3plY2ggbG9jYWxlLlxuICogQGxhbmd1YWdlIEN6ZWNoXG4gKiBAaXNvLTYzOS0yIGNlc1xuICogQGF1dGhvciBEYXZpZCBSdXMgW0BkYXZpZHJ1c117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkcnVzfVxuICogQGF1dGhvciBQYXZlbCBIcsOhY2ggW0BTaWxlbllde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9TaWxlbll9XG4gKiBAYXV0aG9yIEpvemVmIELDrXJvxaEgW0BKb3plZkJpcm9zXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vSm96ZWZCaXJvc31cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnY3MnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbWluZHJlIGVuZCDDqXQgc2VrdW5kJyxcbiAgICBvdGhlcjogJ21pbmRyZSBlbmQge3tjb3VudH19IHNla3VuZGVyJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2VrdW5kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWt1bmRlcidcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICfDqXQgaGFsdnQgbWludXQnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbWluZHJlIGVuZCDDqXQgbWludXQnLFxuICAgIG90aGVyOiAnbWluZHJlIGVuZCB7e2NvdW50fX0gbWludXR0ZXInXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXR0ZXInXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnY2lya2EgMSB0aW1lJyxcbiAgICBvdGhlcjogJ2NpcmthIHt7Y291bnR9fSB0aW1lcidcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSB0aW1lJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB0aW1lcidcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRhZycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGFnZSdcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdjaXJrYSAxIHVnZScsXG4gICAgb3RoZXI6ICdjaXJrYSB7e2NvdW50fX0gdWdlcidcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB1Z2UnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHVnZXInXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2NpcmthIDEgbcOlbmVkJyxcbiAgICBvdGhlcjogJ2NpcmthIHt7Y291bnR9fSBtw6VuZWRlcidcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbcOlbmVkJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtw6VuZWRlcidcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdjaXJrYSAxIMOlcicsXG4gICAgb3RoZXI6ICdjaXJrYSB7e2NvdW50fX0gw6VyJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIMOlcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gw6VyJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIMOlcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSDDpXInXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ27DpnN0ZW4gMSDDpXInLFxuICAgIG90aGVyOiAnbsOmc3RlbiB7e2NvdW50fX0gw6VyJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ29tICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIHNpZGVuJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFICdkZW4nIGQuIE1NTU0geVwiLFxuICBsb25nOiAnZC4gTU1NTSB5JyxcbiAgbWVkaXVtOiAnZC4gTU1NIHknLFxuICBzaG9ydDogJ2RkL01NL3knXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2tsJy4ge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAna2wnLiB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInc2lkc3RlJyBlZWVlICdrbC4nIHBcIixcbiAgeWVzdGVyZGF5OiBcIidpIGfDpXIga2wuJyBwXCIsXG4gIHRvZGF5OiBcIidpIGRhZyBrbC4nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ2kgbW9yZ2VuIGtsLicgcFwiLFxuICBuZXh0V2VlazogXCIncMOlJyBlZWVlICdrbC4nIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2Z2dCcsICd2dCddLFxuICBhYmJyZXZpYXRlZDogWydmLnYudC4nLCAndi50LiddLFxuICB3aWRlOiBbJ2bDuHIgdmVzdGVybGFuZHNrIHRpZHNyZWduaW5nJywgJ3Zlc3RlcmxhbmRzayB0aWRzcmVnbmluZyddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJzEuIGt2dC4nLCAnMi4ga3Z0LicsICczLiBrdnQuJywgJzQuIGt2dC4nXSxcbiAgd2lkZTogWycxLiBrdmFydGFsJywgJzIuIGt2YXJ0YWwnLCAnMy4ga3ZhcnRhbCcsICc0LiBrdmFydGFsJ11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydqYW4uJywgJ2ZlYi4nLCAnbWFyLicsICdhcHIuJywgJ21haicsICdqdW4uJywgJ2p1bC4nLCAnYXVnLicsICdzZXAuJywgJ29rdC4nLCAnbm92LicsICdkZWMuJ10sXG4gIHdpZGU6IFsnamFudWFyJywgJ2ZlYnJ1YXInLCAnbWFydHMnLCAnYXByaWwnLCAnbWFqJywgJ2p1bmknLCAnanVsaScsICdhdWd1c3QnLCAnc2VwdGVtYmVyJywgJ29rdG9iZXInLCAnbm92ZW1iZXInLCAnZGVjZW1iZXInXSAvLyBOb3RlIHRoYXQgJ0RheXMgLSBhYmJyZXZpYXRlZCAtIEZvcm1hdHRpbmcnIGhhcyBwZXJpb2RzIGF0IHRoZSBlbmQuXG4gIC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvZGEuaHRtbCMxNzYwXG4gIC8vIFRoaXMgbWFrZXMgZ3JhbW1hdGljYWwgc2Vuc2UgaW4gZGFuaXNoLCBhcyBtb3N0IGFiYnJldmlhdGlvbnMgaGF2ZSBwZXJpb2RzLlxuXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ08nLCAnVCcsICdGJywgJ0wnXSxcbiAgc2hvcnQ6IFsnc8O4JywgJ21hJywgJ3RpJywgJ29uJywgJ3RvJywgJ2ZyJywgJ2zDuCddLFxuICBhYmJyZXZpYXRlZDogWydzw7huLicsICdtYW4uJywgJ3Rpci4nLCAnb25zLicsICd0b3IuJywgJ2ZyZS4nLCAnbMO4ci4nXSxcbiAgd2lkZTogWydzw7huZGFnJywgJ21hbmRhZycsICd0aXJzZGFnJywgJ29uc2RhZycsICd0b3JzZGFnJywgJ2ZyZWRhZycsICdsw7hyZGFnJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaWRuYXQnLFxuICAgIG5vb246ICdtaWRkYWcnLFxuICAgIG1vcm5pbmc6ICdtb3JnZW4nLFxuICAgIGFmdGVybm9vbjogJ2VmdGVybWlkZGFnJyxcbiAgICBldmVuaW5nOiAnYWZ0ZW4nLFxuICAgIG5pZ2h0OiAnbmF0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0JyxcbiAgICBub29uOiAnbWlkZGFnJyxcbiAgICBtb3JuaW5nOiAnbW9yZ2VuJyxcbiAgICBhZnRlcm5vb246ICdlZnRlcm1pZGRhZycsXG4gICAgZXZlbmluZzogJ2FmdGVuJyxcbiAgICBuaWdodDogJ25hdCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5hdCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ21vcmdlbicsXG4gICAgYWZ0ZXJub29uOiAnZWZ0ZXJtaWRkYWcnLFxuICAgIGV2ZW5pbmc6ICdhZnRlbicsXG4gICAgbmlnaHQ6ICduYXQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0JyxcbiAgICBub29uOiAnbWlkZGFnJyxcbiAgICBtb3JuaW5nOiAnb20gbW9yZ2VuZW4nLFxuICAgIGFmdGVybm9vbjogJ29tIGVmdGVybWlkZGFnZW4nLFxuICAgIGV2ZW5pbmc6ICdvbSBhZnRlbmVuJyxcbiAgICBuaWdodDogJ29tIG5hdHRlbidcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5hdCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ29tIG1vcmdlbmVuJyxcbiAgICBhZnRlcm5vb246ICdvbSBlZnRlcm1pZGRhZ2VuJyxcbiAgICBldmVuaW5nOiAnb20gYWZ0ZW5lbicsXG4gICAgbmlnaHQ6ICdvbSBuYXR0ZW4nXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuYXQnLFxuICAgIG5vb246ICdtaWRkYWcnLFxuICAgIG1vcm5pbmc6ICdvbSBtb3JnZW5lbicsXG4gICAgYWZ0ZXJub29uOiAnb20gZWZ0ZXJtaWRkYWdlbicsXG4gICAgZXZlbmluZzogJ29tIGFmdGVuZW4nLFxuICAgIG5pZ2h0OiAnb20gbmF0dGVuJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJy4nO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKShcXC4pPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oZktyfGZ2dHxlS3J8dnQpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihmXFwuS3JcXC4/fGZcXC52XFwudFxcLj98ZVxcLktyXFwuP3x2XFwudFxcLikvaSxcbiAgd2lkZTogL14oZi5Lci58ZsO4ciB2ZXN0ZXJsYW5kc2sgdGlkc3JlZ25pbmd8ZS5Lci58dmVzdGVybGFuZHNrIHRpZHNyZWduaW5nKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eZi9pLCAvXih2fGUpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXlsxMjM0XS4ga3Z0XFwuL2ksXG4gIHdpZGU6IC9eWzEyMzRdXFwuPyBrdmFydGFsL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbi58ZmViLnxtYXIufGFwci58bWFqfGp1bi58anVsLnxhdWcufHNlcC58b2t0Lnxub3YufGRlYy4pL2ksXG4gIHdpZGU6IC9eKGphbnVhcnxmZWJydWFyfG1hcnRzfGFwcmlsfG1hanxqdW5pfGp1bGl8YXVndXN0fHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYWovaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXRvZmxdL2ksXG4gIHNob3J0OiAvXihzw7huLnxtYW4ufHRpci58b25zLnx0b3IufGZyZS58bMO4ci4pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzw7hufG1hbnx0aXJ8b25zfHRvcnxmcmV8bMO4cikvaSxcbiAgd2lkZTogL14oc8O4bmRhZ3xtYW5kYWd8dGlyc2RhZ3xvbnNkYWd8dG9yc2RhZ3xmcmVkYWd8bMO4cmRhZykvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXm8vaSwgL150L2ksIC9eZi9pLCAvXmwvaV0sXG4gIGFueTogWy9ecy9pLCAvXm0vaSwgL150aS9pLCAvXm8vaSwgL150by9pLCAvXmYvaSwgL15sL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pZG5hdHxtaWRkYWd8KG9tKSAobW9yZ2VuZW58ZWZ0ZXJtaWRkYWdlbnxhZnRlbmVufG5hdHRlbikpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmF0fG1pZGRhZ3wob20pIChtb3JnZW5lbnxlZnRlcm1pZGRhZ2VufGFmdGVuZW58bmF0dGVuKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvbWlkbmF0L2ksXG4gICAgbm9vbjogL21pZGRhZy9pLFxuICAgIG1vcm5pbmc6IC9tb3JnZW4vaSxcbiAgICBhZnRlcm5vb246IC9lZnRlcm1pZGRhZy9pLFxuICAgIGV2ZW5pbmc6IC9hZnRlbi9pLFxuICAgIG5pZ2h0OiAvbmF0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IERhbmlzaCBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgRGFuaXNoXG4gKiBAaXNvLTYzOS0yIGRhblxuICogQGF1dGhvciBNYXRoaWFzIFfDuGJiZSBbQE1hdGhpYXNLYW5kZWxib3JnXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vTWF0aGlhc0thbmRlbGJvcmd9XG4gKiBAYXV0aG9yIEFuZGVycyBCLiBIYW5zZW4gW0BBbmRlcnNiaWhhXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vQW5kZXJzYmloYX1cbiAqIEBhdXRob3IgW0BrZ3JhbV17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tncmFtfVxuICogQGF1dGhvciBbQHN0ZWZhbmJ1Z2dlXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc3RlZmFuYnVnZ2V9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2RhJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ3dlbmlnZXIgYWxzIGVpbmUgU2VrdW5kZScsXG4gICAgICBvdGhlcjogJ3dlbmlnZXIgYWxzIHt7Y291bnR9fSBTZWt1bmRlbidcbiAgICB9LFxuICAgIHdpdGhQcmVwb3NpdGlvbjoge1xuICAgICAgb25lOiAnd2VuaWdlciBhbHMgZWluZXIgU2VrdW5kZScsXG4gICAgICBvdGhlcjogJ3dlbmlnZXIgYWxzIHt7Y291bnR9fSBTZWt1bmRlbidcbiAgICB9XG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZWluZSBTZWt1bmRlJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IFNla3VuZGVuJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdlaW5lciBTZWt1bmRlJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IFNla3VuZGVuJ1xuICAgIH1cbiAgfSxcbiAgaGFsZkFNaW51dGU6IHtcbiAgICBzdGFuZGFsb25lOiAnZWluZSBoYWxiZSBNaW51dGUnLFxuICAgIHdpdGhQcmVwb3NpdGlvbjogJ2VpbmVyIGhhbGJlbiBNaW51dGUnXG4gIH0sXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBzdGFuZGFsb25lOiB7XG4gICAgICBvbmU6ICd3ZW5pZ2VyIGFscyBlaW5lIE1pbnV0ZScsXG4gICAgICBvdGhlcjogJ3dlbmlnZXIgYWxzIHt7Y291bnR9fSBNaW51dGVuJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICd3ZW5pZ2VyIGFscyBlaW5lciBNaW51dGUnLFxuICAgICAgb3RoZXI6ICd3ZW5pZ2VyIGFscyB7e2NvdW50fX0gTWludXRlbidcbiAgICB9XG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZWluZSBNaW51dGUnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gTWludXRlbidcbiAgICB9LFxuICAgIHdpdGhQcmVwb3NpdGlvbjoge1xuICAgICAgb25lOiAnZWluZXIgTWludXRlJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IE1pbnV0ZW4nXG4gICAgfVxuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ2V0d2EgZWluZSBTdHVuZGUnLFxuICAgICAgb3RoZXI6ICdldHdhIHt7Y291bnR9fSBTdHVuZGVuJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdldHdhIGVpbmVyIFN0dW5kZScsXG4gICAgICBvdGhlcjogJ2V0d2Ege3tjb3VudH19IFN0dW5kZW4nXG4gICAgfVxuICB9LFxuICB4SG91cnM6IHtcbiAgICBzdGFuZGFsb25lOiB7XG4gICAgICBvbmU6ICdlaW5lIFN0dW5kZScsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBTdHVuZGVuJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdlaW5lciBTdHVuZGUnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gU3R1bmRlbidcbiAgICB9XG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZWluIFRhZycsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBUYWdlJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdlaW5lbSBUYWcnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gVGFnZW4nXG4gICAgfVxuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ2V0d2EgZWluIFdvY2hlJyxcbiAgICAgIG90aGVyOiAnZXR3YSB7e2NvdW50fX0gV29jaGVuJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdldHdhIGVpbmVtIFdvY2hlJyxcbiAgICAgIG90aGVyOiAnZXR3YSB7e2NvdW50fX0gV29jaGVuJ1xuICAgIH1cbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZWluIFdvY2hlJyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IFdvY2hlbidcbiAgICB9LFxuICAgIHdpdGhQcmVwb3NpdGlvbjoge1xuICAgICAgb25lOiAnZWluZW0gV29jaGUnLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gV29jaGVuJ1xuICAgIH1cbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZXR3YSBlaW4gTW9uYXQnLFxuICAgICAgb3RoZXI6ICdldHdhIHt7Y291bnR9fSBNb25hdGUnXG4gICAgfSxcbiAgICB3aXRoUHJlcG9zaXRpb246IHtcbiAgICAgIG9uZTogJ2V0d2EgZWluZW0gTW9uYXQnLFxuICAgICAgb3RoZXI6ICdldHdhIHt7Y291bnR9fSBNb25hdGVuJ1xuICAgIH1cbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ2VpbiBNb25hdCcsXG4gICAgICBvdGhlcjogJ3t7Y291bnR9fSBNb25hdGUnXG4gICAgfSxcbiAgICB3aXRoUHJlcG9zaXRpb246IHtcbiAgICAgIG9uZTogJ2VpbmVtIE1vbmF0JyxcbiAgICAgIG90aGVyOiAne3tjb3VudH19IE1vbmF0ZW4nXG4gICAgfVxuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ2V0d2EgZWluIEphaHInLFxuICAgICAgb3RoZXI6ICdldHdhIHt7Y291bnR9fSBKYWhyZSdcbiAgICB9LFxuICAgIHdpdGhQcmVwb3NpdGlvbjoge1xuICAgICAgb25lOiAnZXR3YSBlaW5lbSBKYWhyJyxcbiAgICAgIG90aGVyOiAnZXR3YSB7e2NvdW50fX0gSmFocmVuJ1xuICAgIH1cbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgc3RhbmRhbG9uZToge1xuICAgICAgb25lOiAnZWluIEphaHInLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gSmFocmUnXG4gICAgfSxcbiAgICB3aXRoUHJlcG9zaXRpb246IHtcbiAgICAgIG9uZTogJ2VpbmVtIEphaHInLFxuICAgICAgb3RoZXI6ICd7e2NvdW50fX0gSmFocmVuJ1xuICAgIH1cbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ21laHIgYWxzIGVpbiBKYWhyJyxcbiAgICAgIG90aGVyOiAnbWVociBhbHMge3tjb3VudH19IEphaHJlJ1xuICAgIH0sXG4gICAgd2l0aFByZXBvc2l0aW9uOiB7XG4gICAgICBvbmU6ICdtZWhyIGFscyBlaW5lbSBKYWhyJyxcbiAgICAgIG90aGVyOiAnbWVociBhbHMge3tjb3VudH19IEphaHJlbidcbiAgICB9XG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIHN0YW5kYWxvbmU6IHtcbiAgICAgIG9uZTogJ2Zhc3QgZWluIEphaHInLFxuICAgICAgb3RoZXI6ICdmYXN0IHt7Y291bnR9fSBKYWhyZSdcbiAgICB9LFxuICAgIHdpdGhQcmVwb3NpdGlvbjoge1xuICAgICAgb25lOiAnZmFzdCBlaW5lbSBKYWhyJyxcbiAgICAgIG90aGVyOiAnZmFzdCB7e2NvdW50fX0gSmFocmVuJ1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVzYWdlR3JvdXAgPSBvcHRpb25zLmFkZFN1ZmZpeCA/IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS53aXRoUHJlcG9zaXRpb24gOiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0uc3RhbmRhbG9uZTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIHVzYWdlR3JvdXAgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdXNhZ2VHcm91cDtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHVzYWdlR3JvdXAub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHVzYWdlR3JvdXAub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICd2b3IgJyArIHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJzsgLy8gRElOIDUwMDg6IGh0dHBzOi8vZGUud2lraXBlZGlhLm9yZy93aWtpL0RhdHVtc2Zvcm1hdCNESU5fNTAwOFxuXG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkbyBNTU1NIHknLFxuICAvLyBNb250YWcsIDcuIEphbnVhciAyMDE4XG4gIGxvbmc6ICdkbyBNTU1NIHknLFxuICAvLyA3LiBKYW51YXIgMjAxOFxuICBtZWRpdW06ICdkbyBNTU0uIHknLFxuICAvLyA3LiBKYW4uIDIwMThcbiAgc2hvcnQ6ICdkZC5NTS55JyAvLyAwNy4wMS4yMDE4XG5cbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdISDptbTpzcyB6enp6JyxcbiAgbG9uZzogJ0hIOm1tOnNzIHonLFxuICBtZWRpdW06ICdISDptbTpzcycsXG4gIHNob3J0OiAnSEg6bW0nXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAndW0nIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ3VtJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGV0enRlbicgZWVlZSAndW0nIHBcIixcbiAgeWVzdGVyZGF5OiBcIidnZXN0ZXJuIHVtJyBwXCIsXG4gIHRvZGF5OiBcIidoZXV0ZSB1bScgcFwiLFxuICB0b21vcnJvdzogXCInbW9yZ2VuIHVtJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ3VtJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyd2LkNoci4nLCAnbi5DaHIuJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3YuQ2hyLicsICduLkNoci4nXSxcbiAgd2lkZTogWyd2b3IgQ2hyaXN0dXMnLCAnbmFjaCBDaHJpc3R1cyddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMS4gUXVhcnRhbCcsICcyLiBRdWFydGFsJywgJzMuIFF1YXJ0YWwnLCAnNC4gUXVhcnRhbCddIC8vIE5vdGU6IGluIEdlcm1hbiwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNw6RyJywgJ0FwcicsICdNYWknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09rdCcsICdOb3YnLCAnRGV6J10sXG4gIHdpZGU6IFsnSmFudWFyJywgJ0ZlYnJ1YXInLCAnTcOkcnonLCAnQXByaWwnLCAnTWFpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGV6ZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnRCcsICdNJywgJ0QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1NvJywgJ01vJywgJ0RpJywgJ01pJywgJ0RvJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1NvLicsICdNby4nLCAnRGkuJywgJ01pLicsICdEby4nLCAnRnIuJywgJ1NhLiddLFxuICB3aWRlOiBbJ1Nvbm50YWcnLCAnTW9udGFnJywgJ0RpZW5zdGFnJywgJ01pdHR3b2NoJywgJ0Rvbm5lcnN0YWcnLCAnRnJlaXRhZycsICdTYW1zdGFnJ10gLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9kZS5odG1sIzE4ODFcblxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAndm0uJyxcbiAgICBwbTogJ25tLicsXG4gICAgbWlkbmlnaHQ6ICdNaXR0ZXJuYWNodCcsXG4gICAgbm9vbjogJ01pdHRhZycsXG4gICAgbW9ybmluZzogJ01vcmdlbicsXG4gICAgYWZ0ZXJub29uOiAnTmFjaG0uJyxcbiAgICBldmVuaW5nOiAnQWJlbmQnLFxuICAgIG5pZ2h0OiAnTmFjaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICd2b3JtLicsXG4gICAgcG06ICduYWNobS4nLFxuICAgIG1pZG5pZ2h0OiAnTWl0dGVybmFjaHQnLFxuICAgIG5vb246ICdNaXR0YWcnLFxuICAgIG1vcm5pbmc6ICdNb3JnZW4nLFxuICAgIGFmdGVybm9vbjogJ05hY2htaXR0YWcnLFxuICAgIGV2ZW5pbmc6ICdBYmVuZCcsXG4gICAgbmlnaHQ6ICdOYWNodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAndm9ybWl0dGFncycsXG4gICAgcG06ICduYWNobWl0dGFncycsXG4gICAgbWlkbmlnaHQ6ICdNaXR0ZXJuYWNodCcsXG4gICAgbm9vbjogJ01pdHRhZycsXG4gICAgbW9ybmluZzogJ01vcmdlbicsXG4gICAgYWZ0ZXJub29uOiAnTmFjaG1pdHRhZycsXG4gICAgZXZlbmluZzogJ0FiZW5kJyxcbiAgICBuaWdodDogJ05hY2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAndm0uJyxcbiAgICBwbTogJ25tLicsXG4gICAgbWlkbmlnaHQ6ICdNaXR0ZXJuYWNodCcsXG4gICAgbm9vbjogJ01pdHRhZycsXG4gICAgbW9ybmluZzogJ21vcmdlbnMnLFxuICAgIGFmdGVybm9vbjogJ25hY2htLicsXG4gICAgZXZlbmluZzogJ2FiZW5kcycsXG4gICAgbmlnaHQ6ICduYWNodHMnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICd2b3JtLicsXG4gICAgcG06ICduYWNobS4nLFxuICAgIG1pZG5pZ2h0OiAnTWl0dGVybmFjaHQnLFxuICAgIG5vb246ICdNaXR0YWcnLFxuICAgIG1vcm5pbmc6ICdtb3JnZW5zJyxcbiAgICBhZnRlcm5vb246ICduYWNobWl0dGFncycsXG4gICAgZXZlbmluZzogJ2FiZW5kcycsXG4gICAgbmlnaHQ6ICduYWNodHMnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ3Zvcm1pdHRhZ3MnLFxuICAgIHBtOiAnbmFjaG1pdHRhZ3MnLFxuICAgIG1pZG5pZ2h0OiAnTWl0dGVybmFjaHQnLFxuICAgIG5vb246ICdNaXR0YWcnLFxuICAgIG1vcm5pbmc6ICdtb3JnZW5zJyxcbiAgICBhZnRlcm5vb246ICduYWNobWl0dGFncycsXG4gICAgZXZlbmluZzogJ2FiZW5kcycsXG4gICAgbmlnaHQ6ICduYWNodHMnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIHJldHVybiBudW1iZXIgKyAnLic7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKFxcLik/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXih2XFwuPyA/Q2hyXFwuP3xuXFwuPyA/Q2hyXFwuPykvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHZcXC4/ID9DaHJcXC4/fG5cXC4/ID9DaHJcXC4/KS9pLFxuICB3aWRlOiAvXih2b3IgQ2hyaXN0dXN8dm9yIHVuc2VyZXIgWmVpdHJlY2hudW5nfG5hY2ggQ2hyaXN0dXN8dW5zZXJlciBaZWl0cmVjaG51bmcpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL152L2ksIC9ebi9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKFxcLik/IFF1YXJ0YWwvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtw6RyfGFwcnxtYWl8anVufGp1bHxhdWd8c2VwfG9rdHxub3Z8ZGV6KS9pLFxuICB3aWRlOiAvXihqYW51YXJ8ZmVicnVhcnxtw6RyenxhcHJpbHxtYWl8anVuaXxqdWxpfGF1Z3VzdHxzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZXplbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm3DpHIvaSwgL15hcC9pLCAvXm1haS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtZG1mXS9pLFxuICBzaG9ydDogL14oc298bW98ZGl8bWl8ZG98ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzb24/fG1vbj98ZGllP3xtaXQ/fGRvbj98ZnJlP3xzYW0/KVxcLj8vaSxcbiAgd2lkZTogL14oc29ubnRhZ3xtb250YWd8ZGllbnN0YWd8bWl0dHdvY2h8ZG9ubmVyc3RhZ3xmcmVpdGFnfHNhbXN0YWcpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15zby9pLCAvXm1vL2ksIC9eZGkvaSwgL15taS9pLCAvXmRvL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14odm1cXC4/fG5tXFwuP3xNaXR0ZXJuYWNodHxNaXR0YWd8bW9yZ2Vuc3xuYWNobVxcLj98YWJlbmRzfG5hY2h0cykvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHZvcm1cXC4/fG5hY2htXFwuP3xNaXR0ZXJuYWNodHxNaXR0YWd8bW9yZ2Vuc3xuYWNobVxcLj98YWJlbmRzfG5hY2h0cykvaSxcbiAgd2lkZTogL14odm9ybWl0dGFnc3xuYWNobWl0dGFnc3xNaXR0ZXJuYWNodHxNaXR0YWd8bW9yZ2Vuc3xuYWNobWl0dGFnc3xhYmVuZHN8bmFjaHRzKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXnYvaSxcbiAgICBwbTogL15uL2ksXG4gICAgbWlkbmlnaHQ6IC9eTWl0dGUvaSxcbiAgICBub29uOiAvXk1pdHRhL2ksXG4gICAgbW9ybmluZzogL21vcmdlbnMvaSxcbiAgICBhZnRlcm5vb246IC9uYWNobWl0dGFncy9pLFxuICAgIC8vIHdpbGwgbmV2ZXIgYmUgbWF0Y2hlZC4gQWZ0ZXJub29uIGlzIG1hdGNoZWQgYnkgYHBtYFxuICAgIGV2ZW5pbmc6IC9hYmVuZHMvaSxcbiAgICBuaWdodDogL25hY2h0cy9pIC8vIHdpbGwgbmV2ZXIgYmUgbWF0Y2hlZC4gTmlnaHQgaXMgbWF0Y2hlZCBieSBgcG1gXG5cbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBHZXJtYW4gbG9jYWxlLlxuICogQGxhbmd1YWdlIEdlcm1hblxuICogQGlzby02MzktMiBkZXVcbiAqIEBhdXRob3IgVGhvbWFzIEVpbG1zdGVpbmVyIFtARGVNdXVde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9EZU11dX1cbiAqIEBhdXRob3IgQXNpYSBbQGFzaWEtdF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FzaWEtdH1cbiAqIEBhdXRob3IgVmFuIFZ1b25nIE5nbyBbQHZhbnZ1b25nbmdvXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdmFudnVvbmduZ299XG4gKiBAYXV0aG9yIFJvbWFuRXJuc3QgW0BwZXhde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wZXh9XG4gKiBAYXV0aG9yIFBoaWxpcHAgS2VjayBbQFBoaWxpcHA5MV17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL1BoaWxpcHA5MX1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZGUnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnzrvOuc6zz4zPhM61z4HOvyDOsc+Az4wgzq3Ovc6xIM60zrXPhc+EzrXPgc+MzrvOtc+Az4TOvycsXG4gICAgb3RoZXI6ICfOu865zrPPjM+EzrXPgc6/IM6xz4DPjCB7e2NvdW50fX0gzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6/JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnzrzOuc+Dz4wgzrvOtc+Az4TPjCcsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICfOu865zrPPjM+EzrXPgc6/IM6xz4DPjCDOrc69zrEgzrvOtc+Az4TPjCcsXG4gICAgb3RoZXI6ICfOu865zrPPjM+EzrXPgc6/IM6xz4DPjCB7e2NvdW50fX0gzrvOtc+Az4TOrCdcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIM67zrXPgM+Ez4wnLFxuICAgIG90aGVyOiAne3tjb3VudH19IM67zrXPgM+EzqwnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnz4DOtc+Bzq/PgM6/z4UgMSDPjs+BzrEnLFxuICAgIG90aGVyOiAnz4DOtc+Bzq/PgM6/z4Uge3tjb3VudH19IM+Oz4HOtc+CJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIM+Oz4HOsScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gz47Pgc61z4InXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSDOt868zq3Pgc6xJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDOt868zq3Pgc61z4InXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnz4DOtc+Bzq/PgM6/z4UgMSDOtc6yzrTOv868zqzOtM6xJyxcbiAgICBvdGhlcjogJ8+AzrXPgc6vz4DOv8+FIHt7Y291bnR9fSDOtc6yzrTOv868zqzOtM61z4InXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgzrXOss60zr/OvM6szrTOsScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gzrXOss60zr/OvM6szrTOtc+CJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICfPgM61z4HOr8+Azr/PhSAxIM68zq7Ovc6xz4InLFxuICAgIG90aGVyOiAnz4DOtc+Bzq/PgM6/z4Uge3tjb3VudH19IM68zq7Ovc61z4InXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIM68zq7Ovc6xz4InLFxuICAgIG90aGVyOiAne3tjb3VudH19IM68zq7Ovc61z4InXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnz4DOtc+Bzq/PgM6/z4UgMSDPh8+Bz4zOvc6/JyxcbiAgICBvdGhlcjogJ8+AzrXPgc6vz4DOv8+FIHt7Y291bnR9fSDPh8+Bz4zOvc65zrEnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgz4fPgc+Mzr3OvycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gz4fPgc+Mzr3Ouc6xJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnz4DOrM69z4kgzrHPgM+MIDEgz4fPgc+Mzr3OvycsXG4gICAgb3RoZXI6ICfPgM6szr3PiSDOsc+Az4wge3tjb3VudH19IM+Hz4HPjM69zrnOsSdcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnz4DOtc+Bzq/PgM6/z4UgMSDPh8+Bz4zOvc6/JyxcbiAgICBvdGhlcjogJ8+AzrXPgc6vz4DOv8+FIHt7Y291bnR9fSDPh8+Bz4zOvc65zrEnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnz4POtSAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyDPgM+BzrnOvSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkIE1NTU0geScsXG4gIGxvbmc6ICdkIE1NTU0geScsXG4gIG1lZGl1bTogJ2QgTU1NIHknLFxuICBzaG9ydDogJ2QvTS95eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd7e2RhdGV9fSAtIHt7dGltZX19JyxcbiAgbG9uZzogJ3t7ZGF0ZX19IC0ge3t0aW1lfX0nLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIifPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3OtycgZWVlZSAnz4PPhM65z4InIHBcIixcbiAgeWVzdGVyZGF5OiBcIifPh864zrXPgiDPg8+EzrnPgicgcFwiLFxuICB0b2RheTogXCInz4POrs68zrXPgc6xIM+Dz4TOuc+CJyBwXCIsXG4gIHRvbW9ycm93OiBcIifOsc+Nz4HOuc6/IM+Dz4TOuc+CJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ8+Dz4TOuc+CJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfPgM6nJywgJ868zqcnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnz4AuzqcuJywgJ868Ls6nLiddLFxuICB3aWRlOiBbJ8+Az4HOvyDOp8+BzrnPg8+Ezr/PjScsICfOvM61z4TOrCDOp8+BzrnPg8+Ez4zOvSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ86kMScsICfOpDInLCAnzqQzJywgJ86kNCddLFxuICB3aWRlOiBbJzHOvyDPhM+Bzq/OvM63zr3OvycsICcyzr8gz4TPgc6vzrzOt869zr8nLCAnM86/IM+Ez4HOr868zrfOvc6/JywgJzTOvyDPhM+Bzq/OvM63zr3OvyddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnzpknLCAnzqYnLCAnzpwnLCAnzpEnLCAnzpwnLCAnzpknLCAnzpknLCAnzpEnLCAnzqMnLCAnzp8nLCAnzp0nLCAnzpQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnzpnOsc69JywgJ86mzrXOsicsICfOnM6sz4EnLCAnzpHPgM+BJywgJ86czqzOuScsICfOmc6/z43OvScsICfOmc6/z43OuycsICfOkc+NzrMnLCAnzqPOtc+AJywgJ86fzrrPhCcsICfOnc6/zq0nLCAnzpTOtc66J10sXG4gIHdpZGU6IFsnzpnOsc69zr/Phc6sz4HOuc6/z4InLCAnzqbOtc6yz4HOv8+FzqzPgc65zr/PgicsICfOnM6sz4HPhM65zr/PgicsICfOkc+Az4HOr867zrnOv8+CJywgJ86czqzOuc6/z4InLCAnzpnOv8+Nzr3Ouc6/z4InLCAnzpnOv8+NzrvOuc6/z4InLCAnzpHPjc6zzr/Phc+Dz4TOv8+CJywgJ86jzrXPgM+Ezq3OvM6yz4HOuc6/z4InLCAnzp/Ous+Ez47Oss+BzrnOv8+CJywgJ86dzr/Orc68zrLPgc65zr/PgicsICfOlM61zrrOrc68zrLPgc65zr/PgiddXG59O1xudmFyIGZvcm1hdHRpbmdNb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ86ZJywgJ86mJywgJ86cJywgJ86RJywgJ86cJywgJ86ZJywgJ86ZJywgJ86RJywgJ86jJywgJ86fJywgJ86dJywgJ86UJ10sXG4gIGFiYnJldmlhdGVkOiBbJ86ZzrHOvScsICfOps61zrInLCAnzpzOsc+BJywgJ86Rz4DPgScsICfOnM6xzpAnLCAnzpnOv8+Fzr0nLCAnzpnOv8+FzrsnLCAnzpHPhc6zJywgJ86jzrXPgCcsICfOn866z4QnLCAnzp3Ov861JywgJ86UzrXOuiddLFxuICB3aWRlOiBbJ86ZzrHOvc6/z4XOsc+Bzq/Ov8+FJywgJ86mzrXOss+Bzr/Phc6xz4HOr86/z4UnLCAnzpzOsc+Bz4TOr86/z4UnLCAnzpHPgM+BzrnOu86vzr/PhScsICfOnM6xzpDOv8+FJywgJ86Zzr/Phc69zq/Ov8+FJywgJ86Zzr/Phc67zq/Ov8+FJywgJ86Rz4XOs86/z43Pg8+Ezr/PhScsICfOo861z4DPhM61zrzOss+Bzq/Ov8+FJywgJ86fzrrPhM+JzrLPgc6vzr/PhScsICfOnc6/zrXOvM6yz4HOr86/z4UnLCAnzpTOtc66zrXOvM6yz4HOr86/z4UnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfOmicsICfOlCcsICdUJywgJ86kJywgJ86gJywgJ86gJywgJ86jJ10sXG4gIHNob3J0OiBbJ86az4UnLCAnzpTOtScsICfOpM+BJywgJ86kzrUnLCAnzqDOrScsICfOoM6xJywgJ86jzqwnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnzprPhc+BJywgJ86UzrXPhScsICfOpM+Bzq8nLCAnzqTOtc+EJywgJ86gzq3OvCcsICfOoM6xz4EnLCAnzqPOrM6yJ10sXG4gIHdpZGU6IFsnzprPhc+BzrnOsc66zq4nLCAnzpTOtc+Fz4TOrc+BzrEnLCAnzqTPgc6vz4TOtycsICfOpM61z4TOrM+Bz4TOtycsICfOoM6tzrzPgM+EzrcnLCAnzqDOsc+BzrHPg866zrXPhc6uJywgJ86jzqzOss6yzrHPhM6/J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ8+AzrwnLFxuICAgIHBtOiAnzrzOvCcsXG4gICAgbWlkbmlnaHQ6ICfOvM61z4POrM69z4XPh8+EzrEnLFxuICAgIG5vb246ICfOvM61z4POt868zq3Pgc65JyxcbiAgICBtb3JuaW5nOiAnz4DPgc+Jzq8nLFxuICAgIGFmdGVybm9vbjogJ86xz4DPjM6zzrXPhc68zrEnLFxuICAgIGV2ZW5pbmc6ICfOss+BzqzOtM+FJyxcbiAgICBuaWdodDogJ869z43Ph8+EzrEnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfPgC7OvC4nLFxuICAgIHBtOiAnzrwuzrwuJyxcbiAgICBtaWRuaWdodDogJ868zrXPg86szr3Phc+Hz4TOsScsXG4gICAgbm9vbjogJ868zrXPg863zrzOrc+BzrknLFxuICAgIG1vcm5pbmc6ICfPgM+Bz4nOrycsXG4gICAgYWZ0ZXJub29uOiAnzrHPgM+MzrPOtc+FzrzOsScsXG4gICAgZXZlbmluZzogJ86yz4HOrM60z4UnLFxuICAgIG5pZ2h0OiAnzr3Pjc+Hz4TOsSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnz4AuzrwuJyxcbiAgICBwbTogJ868Ls68LicsXG4gICAgbWlkbmlnaHQ6ICfOvM61z4POrM69z4XPh8+EzrEnLFxuICAgIG5vb246ICfOvM61z4POt868zq3Pgc65JyxcbiAgICBtb3JuaW5nOiAnz4DPgc+Jzq8nLFxuICAgIGFmdGVybm9vbjogJ86xz4DPjM6zzrXPhc68zrEnLFxuICAgIGV2ZW5pbmc6ICfOss+BzqzOtM+FJyxcbiAgICBuaWdodDogJ869z43Ph8+EzrEnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KTtcbiAgdmFyIHN1ZmZpeDtcblxuICBpZiAodW5pdCA9PT0gJ3llYXInIHx8IHVuaXQgPT09ICdtb250aCcpIHtcbiAgICBzdWZmaXggPSAnzr/Pgic7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3dlZWsnIHx8IHVuaXQgPT09ICdkYXlPZlllYXInIHx8IHVuaXQgPT09ICdkYXknIHx8IHVuaXQgPT09ICdob3VyJyB8fCB1bml0ID09PSAnZGF0ZScpIHtcbiAgICBzdWZmaXggPSAnzrcnO1xuICB9IGVsc2Uge1xuICAgIHN1ZmZpeCA9ICfOvyc7XG4gIH1cblxuICByZXR1cm4gZGlydHlOdW1iZXIgKyBzdWZmaXg7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nTW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykozr/PgnzOt3zOvyk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXijPgM6nfM68zqcpL2ksXG4gIGFiYnJldmlhdGVkOiAvXijPgFxcLj9cXHM/z4dcXC4/fM+AXFwuP1xccz/OulxcLj9cXHM/z4dcXC4/fM68XFwuP1xccz/Ph1xcLj98zrpcXC4/XFxzP8+HXFwuPykvaSxcbiAgd2lkZTogL14oz4DPgc6/IM6nz4HOuc+Dz4TOvyjPjXzPhSl8z4DPgc65zr0gzrHPgCjPjHzOvykgz4TOt869IM6azr/Ouc69KM6ufM63KSDOp8+Bzr/Ovc6/zrvOv86zKM6vfM65Kc6xfM68zrXPhCjOrHzOsSkgzqfPgc65z4PPhCjPjHzOvynOvXzOms6/zrnOvSjOrnzOtykgzqfPgc6/zr3Ov867zr/OsyjOr3zOuSnOsSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXs+AL2ksIC9eKM68fM66KS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL17PhFsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0Xc6/PyDPhM+BKM6vfM65Kc68zrfOvc6/L2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvOuc+GzrzOsc68zrnOuc6xz4POv869zrRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXijOuc6xzr18z4bOtc6yfM68W86szrFdz4F8zrHPgM+BfM68W86szrFdW865zpBdfM65zr9bz43PhV3OvXzOuc6/W8+Nz4Vdzrt8zrFbz43PhV3Os3zPg861z4B8zr/Ous+EfM69zr9bzq3OtV18zrTOtc66KS9pLFxuICB3aWRlOiAvXijOvFvOrM6xXVvOuc6QXXzOsVvPjc+FXc6zzr9bz4XPjV3Pg8+EKSjOv8+CfM6/z4UpfCjOuc6xzr3Ov8+FW86szrFdz4F8z4bOtc6yz4HOv8+FW86szrFdz4F8zrxbzqzOsV3Pgc+EfM6xz4DPgVvOr865Xc67fM65zr9bz43PhV3OvXzOuc6/W8+Nz4Vdzrt8z4POtc+Az4Rbzq3OtV3OvM6yz4F8zr/Ous+EW8+Oz4ldzrLPgXzOvc6/W86tzrVdzrzOss+BfM60zrXOulvOrc61Xc68zrLPgSkozrnOv8+CfM6vzr/PhSkvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ezrkvaSwgL17Phi9pLCAvXs68L2ksIC9ezrEvaSwgL17OvC9pLCAvXs65L2ksIC9ezrkvaSwgL17OsS9pLCAvXs+DL2ksIC9ezr8vaSwgL17OvS9pLCAvXs60L2ldLFxuICBhbnk6IFsvXs65zrEvaSwgL17Phi9pLCAvXs68W86szrFdz4EvaSwgL17Osc+AL2ksIC9ezrxbzqzOsV1bzrnOkF0vaSwgL17Ouc6/W8+Nz4Vdzr0vaSwgL17Ouc6/W8+Nz4VdzrsvaSwgL17OsVvPjc+FXS9pLCAvXs+DL2ksIC9ezr8vaSwgL17OvS9pLCAvXs60L2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bzrrOtM+Ez4DPg10vaSxcbiAgc2hvcnQ6IC9eKM66z4V8zrTOtXzPhM+BfM+EzrV8z4BbzrXOrV18z4BbzrHOrF18z4NbzrHOrF0pL2ksXG4gIGFiYnJldmlhdGVkOiAvXijOus+Fz4F8zrTOtc+FfM+Ez4HOuXzPhM61z4R8z4DOtc68fM+AzrHPgXzPg86xzrIpL2ksXG4gIHdpZGU6IC9eKM66z4XPgc65zrHOuijOrnzOtyl8zrTOtc+Fz4Qozq18zrUpz4HOsXzPhM+BKM6vfM65Kc+Ezrd8z4TOtc+EKM6sfM6xKc+Bz4TOt3zPgCjOrXzOtSnOvM+Az4TOt3zPgM6xz4HOsc+DzrrOtc+FKM6ufM63KXzPgyjOrHzOsSnOss6yzrHPhM6/KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ezrovaSwgL17OtC9pLCAvXs+EL2ksIC9ez4QvaSwgL17PgC9pLCAvXs+AL2ksIC9ez4MvaV0sXG4gIGFueTogWy9ezrovaSwgL17OtC9pLCAvXs+Ez4EvaSwgL17PhM61L2ksIC9ez4BbzrXOrV0vaSwgL17PgFvOsc6sXS9pLCAvXs+DL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oz4DOvHzOvM68fM68zrXPgyjOrHzOsSnOvc+Fz4fPhM6xfM68zrXPg863zrwozq18zrUpz4HOuXzPgM+Bz4kozq98zrkpfM6xz4Aoz4x8zr8pzrPOtc+FzrzOsXzOss+BKM6sfM6xKc60z4V8zr0oz418z4Upz4fPhM6xKS9pLFxuICBhbnk6IC9eKFvPgM68XVxcLj9cXHM/zrxcXC4/fM68zrXPgyjOrHzOsSnOvc+Fz4fPhM6xfM68zrXPg863zrwozq18zrUpz4HOuXzPgM+Bz4kozq98zrkpfM6xz4Aoz4x8zr8pzrPOtc+FzrzOsXzOss+BKM6sfM6xKc60z4V8zr0oz418z4Upz4fPhM6xKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXs+Azrx8z4BcXC5cXHM/zrxcXC4vaSxcbiAgICBwbTogL17OvM68fM68XFwuXFxzP868XFwuL2ksXG4gICAgbWlkbmlnaHQ6IC9ezrzOtc+DzqzOvS9pLFxuICAgIG5vb246IC9ezrzOtc+DzrfOvCjOrXzOtSkvaSxcbiAgICBtb3JuaW5nOiAvz4DPgc+JKM6vfM65KS9pLFxuICAgIGFmdGVybm9vbjogL86xz4Aoz4x8zr8pzrPOtc+FzrzOsS9pLFxuICAgIGV2ZW5pbmc6IC/Oss+BKM6sfM6xKc60z4UvaSxcbiAgICBuaWdodDogL869KM+NfM+FKc+Hz4TOsS9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBHcmVlayBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgR3JlZWtcbiAqIEBpc28tNjM5LTIgZWxsXG4gKiBAYXV0aG9yIEZhbmlzIEthdHNpbXBhcyBbQGZhbml4a117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zhbml4a31cbiAqIEBhdXRob3IgVGhlb2Rvcm9zIE9yZmFuaWRpcyBbQHRlb3VsYXNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS90ZW91bGFzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbCcsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXSAvLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbiAgLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4gIC8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuICAvLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGA6XG4gIC8vXG4gIC8vICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cbiAgLy8gICB2YXIgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpXG4gIC8vXG4gIC8vIHdoZXJlIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkIE1NTU0geXl5eScsXG4gIGxvbmc6ICdkIE1NTU0geXl5eScsXG4gIG1lZGl1bTogJ2QgTU1NIHl5eXknLFxuICBzaG9ydDogJ2RkL01NL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4uL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4uL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4uL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4uL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgS2luZ2RvbSkuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgQWxleCBbQGdsaW50aWtde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9nbGludGlrfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1HQicsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbWVub3MgZGUgdW4gc2VndW5kbycsXG4gICAgb3RoZXI6ICdtZW5vcyBkZSB7e2NvdW50fX0gc2VndW5kb3MnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWd1bmRvJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWd1bmRvcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdtZWRpbyBtaW51dG8nLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbWVub3MgZGUgdW4gbWludXRvJyxcbiAgICBvdGhlcjogJ21lbm9zIGRlIHt7Y291bnR9fSBtaW51dG9zJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRvJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dG9zJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2FscmVkZWRvciBkZSAxIGhvcmEnLFxuICAgIG90aGVyOiAnYWxyZWRlZG9yIGRlIHt7Y291bnR9fSBob3JhcydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3JhJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3JhcydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGTDrWEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IGTDrWFzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2FscmVkZWRvciBkZSAxIHNlbWFuYScsXG4gICAgb3RoZXI6ICdhbHJlZGVkb3IgZGUge3tjb3VudH19IHNlbWFuYXMnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgc2VtYW5hJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZW1hbmFzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhbHJlZGVkb3IgZGUgMSBtZXMnLFxuICAgIG90aGVyOiAnYWxyZWRlZG9yIGRlIHt7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbWVzJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhbHJlZGVkb3IgZGUgMSBhw7FvJyxcbiAgICBvdGhlcjogJ2FscmVkZWRvciBkZSB7e2NvdW50fX0gYcOxb3MnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgYcOxbycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gYcOxb3MnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdtw6FzIGRlIDEgYcOxbycsXG4gICAgb3RoZXI6ICdtw6FzIGRlIHt7Y291bnR9fSBhw7FvcydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnY2FzaSAxIGHDsW8nLFxuICAgIG90aGVyOiAnY2FzaSB7e2NvdW50fX0gYcOxb3MnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnZW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdoYWNlICcgKyByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiRUVFRSwgZCAnZGUnIE1NTU0gJ2RlJyB5XCIsXG4gIGxvbmc6IFwiZCAnZGUnIE1NTU0gJ2RlJyB5XCIsXG4gIG1lZGl1bTogJ2QgTU1NIHknLFxuICBzaG9ydDogJ2RkL01NL3knXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2EgbGFzJyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhIGxhcycge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInZWwnIGVlZWUgJ3Bhc2FkbyBhIGxhJyBMVFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ2F5ZXIgYSBsYScgcFwiLFxuICB0b2RheTogXCInaG95IGEgbGEnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ21hw7FhbmEgYSBsYScgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhIGxhJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGVQbHVyYWwgPSB7XG4gIGxhc3RXZWVrOiBcIidlbCcgZWVlZSAncGFzYWRvIGEgbGFzJyBwXCIsXG4gIHllc3RlcmRheTogXCInYXllciBhIGxhcycgcFwiLFxuICB0b2RheTogXCInaG95IGEgbGFzJyBwXCIsXG4gIHRvbW9ycm93OiBcIidtYcOxYW5hIGEgbGFzJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2EgbGFzJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICBpZiAoZGF0ZS5nZXRVVENIb3VycygpICE9PSAxKSB7XG4gICAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlUGx1cmFsW3Rva2VuXTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQUMnLCAnREMnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQUMnLCAnREMnXSxcbiAgd2lkZTogWydhbnRlcyBkZSBjcmlzdG8nLCAnZGVzcHXDqXMgZGUgY3Jpc3RvJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnVDEnLCAnVDInLCAnVDMnLCAnVDQnXSxcbiAgd2lkZTogWycxwrogdHJpbWVzdHJlJywgJzLCuiB0cmltZXN0cmUnLCAnM8K6IHRyaW1lc3RyZScsICc0wrogdHJpbWVzdHJlJ11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydlJywgJ2YnLCAnbScsICdhJywgJ20nLCAnaicsICdqJywgJ2EnLCAncycsICdvJywgJ24nLCAnZCddLFxuICBhYmJyZXZpYXRlZDogWydlbmUnLCAnZmViJywgJ21hcicsICdhYnInLCAnbWF5JywgJ2p1bicsICdqdWwnLCAnYWdvJywgJ3NlcCcsICdvY3QnLCAnbm92JywgJ2RpYyddLFxuICB3aWRlOiBbJ2VuZXJvJywgJ2ZlYnJlcm8nLCAnbWFyem8nLCAnYWJyaWwnLCAnbWF5bycsICdqdW5pbycsICdqdWxpbycsICdhZ29zdG8nLCAnc2VwdGllbWJyZScsICdvY3R1YnJlJywgJ25vdmllbWJyZScsICdkaWNpZW1icmUnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydkJywgJ2wnLCAnbScsICdtJywgJ2onLCAndicsICdzJ10sXG4gIHNob3J0OiBbJ2RvJywgJ2x1JywgJ21hJywgJ21pJywgJ2p1JywgJ3ZpJywgJ3NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2RvbScsICdsdW4nLCAnbWFyJywgJ21pw6knLCAnanVlJywgJ3ZpZScsICdzYWInXSxcbiAgd2lkZTogWydkb21pbmdvJywgJ2x1bmVzJywgJ21hcnRlcycsICdtacOpcmNvbGVzJywgJ2p1ZXZlcycsICd2aWVybmVzJywgJ3PDoWJhZG8nXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21uJyxcbiAgICBub29uOiAnbWQnLFxuICAgIG1vcm5pbmc6ICdtYcOxYW5hJyxcbiAgICBhZnRlcm5vb246ICd0YXJkZScsXG4gICAgZXZlbmluZzogJ3RhcmRlJyxcbiAgICBuaWdodDogJ25vY2hlJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWVkaWFub2NoZScsXG4gICAgbm9vbjogJ21lZGlvZGlhJyxcbiAgICBtb3JuaW5nOiAnbWHDsWFuYScsXG4gICAgYWZ0ZXJub29uOiAndGFyZGUnLFxuICAgIGV2ZW5pbmc6ICd0YXJkZScsXG4gICAgbmlnaHQ6ICdub2NoZSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21lZGlhbm9jaGUnLFxuICAgIG5vb246ICdtZWRpb2RpYScsXG4gICAgbW9ybmluZzogJ21hw7FhbmEnLFxuICAgIGFmdGVybm9vbjogJ3RhcmRlJyxcbiAgICBldmVuaW5nOiAndGFyZGUnLFxuICAgIG5pZ2h0OiAnbm9jaGUnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbW4nLFxuICAgIG5vb246ICdtZCcsXG4gICAgbW9ybmluZzogJ2RlIGxhIG1hw7FhbmEnLFxuICAgIGFmdGVybm9vbjogJ2RlIGxhIHRhcmRlJyxcbiAgICBldmVuaW5nOiAnZGUgbGEgdGFyZGUnLFxuICAgIG5pZ2h0OiAnZGUgbGEgbm9jaGUnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtZWRpYW5vY2hlJyxcbiAgICBub29uOiAnbWVkaW9kaWEnLFxuICAgIG1vcm5pbmc6ICdkZSBsYSBtYcOxYW5hJyxcbiAgICBhZnRlcm5vb246ICdkZSBsYSB0YXJkZScsXG4gICAgZXZlbmluZzogJ2RlIGxhIHRhcmRlJyxcbiAgICBuaWdodDogJ2RlIGxhIG5vY2hlJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWVkaWFub2NoZScsXG4gICAgbm9vbjogJ21lZGlvZGlhJyxcbiAgICBtb3JuaW5nOiAnZGUgbGEgbWHDsWFuYScsXG4gICAgYWZ0ZXJub29uOiAnZGUgbGEgdGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdkZSBsYSB0YXJkZScsXG4gICAgbmlnaHQ6ICdkZSBsYSBub2NoZSdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlcikge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgcmV0dXJuIG51bWJlciArICfCuic7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKMK6KT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGFjfGRjfGF8ZCkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGFcXC4/XFxzP2NcXC4/fGFcXC4/XFxzP2VcXC4/XFxzP2NcXC4/fGRcXC4/XFxzP2NcXC4/fGVcXC4/XFxzP2NcXC4/KS9pLFxuICB3aWRlOiAvXihhbnRlcyBkZSBjcmlzdG98YW50ZXMgZGUgbGEgZXJhIGNvbVt1w7pdbnxkZXNwdVtlw6ldcyBkZSBjcmlzdG98ZXJhIGNvbVt1w7pdbikvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmFjL2ksIC9eZGMvaV0sXG4gIHdpZGU6IFsvXihhbnRlcyBkZSBjcmlzdG98YW50ZXMgZGUgbGEgZXJhIGNvbVt1w7pdbikvaSwgL14oZGVzcHVbZcOpXXMgZGUgY3Jpc3RvfGVyYSBjb21bdcO6XW4pL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXlRbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0owropPyB0cmltZXN0cmUvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2VmbWFqc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGVuZXxmZWJ8bWFyfGFicnxtYXl8anVufGp1bHxhZ298c2VwfG9jdHxub3Z8ZGljKS9pLFxuICB3aWRlOiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15lL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eZW4vaSwgL15mZWIvaSwgL15tYXIvaSwgL15hYnIvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hZ28vaSwgL15zZXAvaSwgL15vY3QvaSwgL15ub3YvaSwgL15kaWMvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltkbG1qdnNdL2ksXG4gIHNob3J0OiAvXihkb3xsdXxtYXxtaXxqdXx2aXxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGRvbXxsdW58bWFyfG1pZXxqdWV8dmllfHNhYikvaSxcbiAgd2lkZTogL14oZG9taW5nb3xsdW5lc3xtYXJ0ZXN8bWllcmNvbGVzfGp1ZXZlc3x2aWVybmVzfHNbw6FhXWJhZG8pL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15kL2ksIC9ebC9pLCAvXm0vaSwgL15tL2ksIC9eai9pLCAvXnYvaSwgL15zL2ldLFxuICBhbnk6IFsvXmRvL2ksIC9ebHUvaSwgL15tYS9pLCAvXm1pL2ksIC9eanUvaSwgL152aS9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1ufG1kfChkZSBsYXxhIGxhcykgKG1hw7FhbmF8dGFyZGV8bm9jaGUpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1lZGlhbm9jaGV8bWVkaW9kaWF8KGRlIGxhfGEgbGFzKSAobWHDsWFuYXx0YXJkZXxub2NoZSkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15tbi9pLFxuICAgIG5vb246IC9ebWQvaSxcbiAgICBtb3JuaW5nOiAvbWHDsWFuYS9pLFxuICAgIGFmdGVybm9vbjogL3RhcmRlL2ksXG4gICAgZXZlbmluZzogL3RhcmRlL2ksXG4gICAgbmlnaHQ6IC9ub2NoZS9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBTcGFuaXNoIGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBTcGFuaXNoXG4gKiBAaXNvLTYzOS0yIHNwYVxuICogQGF1dGhvciBKdWFuIEFuZ29zdG8gW0BqdWFuYW5nb3N0b117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2p1YW5hbmdvc3RvfVxuICogQGF1dGhvciBHdWlsbGVybW8gR3JhdSBbQGd1aWdycGFde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9ndWlncnBhfVxuICogQGF1dGhvciBGZXJuYW5kbyBBZ8O8ZXJvIFtAZmphZ3Vlcm9de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mamFndWVyb31cbiAqIEBhdXRob3IgR2FzdMOzbiBIYXJvIFtAaGFyb2dhc3Rvbl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2hhcm9nYXN0b259XG4gKiBAYXV0aG9yIFlhZ28gQ2FyYmFsbG8gW0BZYWdvQ2FyYmFsbG9de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9ZYWdvQ2FyYmFsbG99XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VzJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImZ1bmN0aW9uIGZ1dHVyZVNlY29uZHModGV4dCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC9zZWt1bnRpYT8vLCAnc2VrdW5uaW4nKTtcbn1cblxuZnVuY3Rpb24gZnV0dXJlTWludXRlcyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL21pbnV1dHRpYT8vLCAnbWludXV0aW4nKTtcbn1cblxuZnVuY3Rpb24gZnV0dXJlSG91cnModGV4dCkge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC90dW50aWE/LywgJ3R1bm5pbicpO1xufVxuXG5mdW5jdGlvbiBmdXR1cmVEYXlzKHRleHQpIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvcMOkaXbDpMOkPy8sICdww6RpdsOkbicpO1xufVxuXG5mdW5jdGlvbiBmdXR1cmVXZWVrcyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyh2aWlra298dmlpa2tvYSkvLCAndmlpa29uJyk7XG59XG5cbmZ1bmN0aW9uIGZ1dHVyZU1vbnRocyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhrdXVrYXVzaXxrdXVrYXV0dGEpLywgJ2t1dWthdWRlbicpO1xufVxuXG5mdW5jdGlvbiBmdXR1cmVZZWFycyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyh2dW9zaXx2dW90dGEpLywgJ3Z1b2RlbicpO1xufVxuXG52YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdhbGxlIHNla3VudGknLFxuICAgIG90aGVyOiAnYWxsZSB7e2NvdW50fX0gc2VrdW50aWEnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVTZWNvbmRzXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnc2VrdW50aScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2VrdW50aWEnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVTZWNvbmRzXG4gIH0sXG4gIGhhbGZBTWludXRlOiB7XG4gICAgb25lOiAncHVvbGkgbWludXV0dGlhJyxcbiAgICBvdGhlcjogJ3B1b2xpIG1pbnV1dHRpYScsXG4gICAgZnV0dXJlVGVuc2U6IGZ1bmN0aW9uIChfdGV4dCkge1xuICAgICAgcmV0dXJuICdwdW9sZW4gbWludXV0aW4nO1xuICAgIH1cbiAgfSxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2FsbGUgbWludXV0dGknLFxuICAgIG90aGVyOiAnYWxsZSB7e2NvdW50fX0gbWludXV0dGlhJyxcbiAgICBmdXR1cmVUZW5zZTogZnV0dXJlTWludXRlc1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJ21pbnV1dHRpJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dXR0aWEnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVNaW51dGVzXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnbm9pbiB0dW50aScsXG4gICAgb3RoZXI6ICdub2luIHt7Y291bnR9fSB0dW50aWEnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVIb3Vyc1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICd0dW50aScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gdHVudGlhJyxcbiAgICBmdXR1cmVUZW5zZTogZnV0dXJlSG91cnNcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICdww6RpdsOkJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBww6RpdsOkw6QnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVEYXlzXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnbm9pbiB2aWlra28nLFxuICAgIG90aGVyOiAnbm9pbiB7e2NvdW50fX0gdmlpa2tvYScsXG4gICAgZnV0dXJlVGVuc2U6IGZ1dHVyZVdlZWtzXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJ3ZpaWtrbycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gdmlpa2tvYScsXG4gICAgZnV0dXJlVGVuc2U6IGZ1dHVyZVdlZWtzXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ25vaW4ga3V1a2F1c2knLFxuICAgIG90aGVyOiAnbm9pbiB7e2NvdW50fX0ga3V1a2F1dHRhJyxcbiAgICBmdXR1cmVUZW5zZTogZnV0dXJlTW9udGhzXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICdrdXVrYXVzaScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0ga3V1a2F1dHRhJyxcbiAgICBmdXR1cmVUZW5zZTogZnV0dXJlTW9udGhzXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnbm9pbiB2dW9zaScsXG4gICAgb3RoZXI6ICdub2luIHt7Y291bnR9fSB2dW90dGEnLFxuICAgIGZ1dHVyZVRlbnNlOiBmdXR1cmVZZWFyc1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICd2dW9zaScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gdnVvdHRhJyxcbiAgICBmdXR1cmVUZW5zZTogZnV0dXJlWWVhcnNcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ3lsaSB2dW9zaScsXG4gICAgb3RoZXI6ICd5bGkge3tjb3VudH19IHZ1b3R0YScsXG4gICAgZnV0dXJlVGVuc2U6IGZ1dHVyZVllYXJzXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2zDpGhlcyB2dW9zaScsXG4gICAgb3RoZXI6ICdsw6RoZXMge3tjb3VudH19IHZ1b3R0YScsXG4gICAgZnV0dXJlVGVuc2U6IGZ1dHVyZVllYXJzXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBkaXN0YW5jZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgdmFyIHJlc3VsdCA9IGNvdW50ID09PSAxID8gZGlzdGFuY2Uub25lIDogZGlzdGFuY2Uub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gZGlzdGFuY2UuZnV0dXJlVGVuc2UocmVzdWx0KSArICcga3VsdXR0dWEnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBzaXR0ZW4nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnZWVlZSBkLiBNTU1NIHknLFxuICBsb25nOiAnZC4gTU1NTSB5JyxcbiAgbWVkaXVtOiAnZC4gTU1NIHknLFxuICBzaG9ydDogJ2QuTS55J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hILm1tLnNzIHp6enonLFxuICBsb25nOiAnSEgubW0uc3MgeicsXG4gIG1lZGl1bTogJ0hILm1tLnNzJyxcbiAgc2hvcnQ6ICdISC5tbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdrbG8nIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2tsbycge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19IHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ3ZpaW1lJyBlZWVlICdrbG8nIHBcIixcbiAgeWVzdGVyZGF5OiBcIidlaWxlbiBrbG8nIHBcIixcbiAgdG9kYXk6IFwiJ3TDpG7DpMOkbiBrbG8nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ2h1b21lbm5hIGtsbycgcFwiLFxuICBuZXh0V2VlazogXCInZW5zaScgZWVlZSAna2xvJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydlYWEuJywgJ2phYS4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsnZWFhLicsICdqYWEuJ10sXG4gIHdpZGU6IFsnZW5uZW4gYWphbmxhc2t1biBhbGt1YScsICdqw6Rsa2VlbiBhamFubGFza3VuIGFsdW4nXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzEuIGt2YXJ0YWFsaScsICcyLiBrdmFydGFhbGknLCAnMy4ga3ZhcnRhYWxpJywgJzQuIGt2YXJ0YWFsaSddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnVCcsICdIJywgJ00nLCAnSCcsICdUJywgJ0snLCAnSCcsICdFJywgJ1MnLCAnTCcsICdNJywgJ0onXSxcbiAgYWJicmV2aWF0ZWQ6IFsndGFtbWknLCAnaGVsbWknLCAnbWFhbGlzJywgJ2h1aHRpJywgJ3RvdWtvJywgJ2tlc8OkJywgJ2hlaW7DpCcsICdlbG8nLCAnc3l5cycsICdsb2thJywgJ21hcnJhcycsICdqb3VsdSddLFxuICB3aWRlOiBbJ3RhbW1pa3V1JywgJ2hlbG1pa3V1JywgJ21hYWxpc2t1dScsICdodWh0aWt1dScsICd0b3Vrb2t1dScsICdrZXPDpGt1dScsICdoZWluw6RrdXUnLCAnZWxva3V1JywgJ3N5eXNrdXUnLCAnbG9rYWt1dScsICdtYXJyYXNrdXUnLCAnam91bHVrdXUnXVxufTtcbnZhciBmb3JtYXR0aW5nTW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogbW9udGhWYWx1ZXMubmFycm93LFxuICBhYmJyZXZpYXRlZDogbW9udGhWYWx1ZXMuYWJicmV2aWF0ZWQsXG4gIHdpZGU6IG1vbnRoVmFsdWVzLndpZGUubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgKyAndGEnO1xuICB9KVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdLJywgJ1QnLCAnUCcsICdMJ10sXG4gIHNob3J0OiBbJ3N1JywgJ21hJywgJ3RpJywgJ2tlJywgJ3RvJywgJ3BlJywgJ2xhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3N1bm4uJywgJ21hYW4uJywgJ3RpaXMuJywgJ2tlc2suJywgJ3RvcnN0LicsICdwZXJqLicsICdsYSddLFxuICB3aWRlOiBbJ3N1bm51bnRhaScsICdtYWFuYW50YWknLCAndGlpc3RhaScsICdrZXNraXZpaWtrbycsICd0b3JzdGFpJywgJ3BlcmphbnRhaScsICdsYXVhbnRhaSddXG59O1xudmFyIGZvcm1hdHRpbmdEYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogZGF5VmFsdWVzLm5hcnJvdyxcbiAgc2hvcnQ6IGRheVZhbHVlcy5zaG9ydCxcbiAgYWJicmV2aWF0ZWQ6IGRheVZhbHVlcy5hYmJyZXZpYXRlZCxcbiAgd2lkZTogZGF5VmFsdWVzLndpZGUubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUgKyAnbmEnO1xuICB9KVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYXAnLFxuICAgIHBtOiAnaXAnLFxuICAgIG1pZG5pZ2h0OiAna2Vza2l5w7YnLFxuICAgIG5vb246ICdrZXNraXDDpGl2w6QnLFxuICAgIG1vcm5pbmc6ICdhcCcsXG4gICAgYWZ0ZXJub29uOiAnaXAnLFxuICAgIGV2ZW5pbmc6ICdpbGxhbGxhJyxcbiAgICBuaWdodDogJ3nDtmxsw6QnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdhcCcsXG4gICAgcG06ICdpcCcsXG4gICAgbWlkbmlnaHQ6ICdrZXNraXnDticsXG4gICAgbm9vbjogJ2tlc2tpcMOkaXbDpCcsXG4gICAgbW9ybmluZzogJ2FwJyxcbiAgICBhZnRlcm5vb246ICdpcCcsXG4gICAgZXZlbmluZzogJ2lsbGFsbGEnLFxuICAgIG5pZ2h0OiAnecO2bGzDpCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYXAnLFxuICAgIHBtOiAnaXAnLFxuICAgIG1pZG5pZ2h0OiAna2Vza2l5w7ZsbMOkJyxcbiAgICBub29uOiAna2Vza2lww6RpdsOkbGzDpCcsXG4gICAgbW9ybmluZzogJ2FhbXVww6RpdsOkbGzDpCcsXG4gICAgYWZ0ZXJub29uOiAnaWx0YXDDpGl2w6RsbMOkJyxcbiAgICBldmVuaW5nOiAnaWxsYWxsYScsXG4gICAgbmlnaHQ6ICd5w7ZsbMOkJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJy4nO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ01vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKShcXC4pL2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihlfGopL2ksXG4gIGFiYnJldmlhdGVkOiAvXihlYWEufGphYS4pL2ksXG4gIHdpZGU6IC9eKGVubmVuIGFqYW5sYXNrdW4gYWxrdWF8asOkbGtlZW4gYWphbmxhc2t1biBhbHVuKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eZS9pLCAvXmovaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XVxcLj8ga3ZhcnRhYWxpL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlt0aG1rZXNsal0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHRhbW1pfGhlbG1pfG1hYWxpc3xodWh0aXx0b3Vrb3xrZXPDpHxoZWluw6R8ZWxvfHN5eXN8bG9rYXxtYXJyYXN8am91bHUpL2ksXG4gIHdpZGU6IC9eKHRhbW1pa3V1fGhlbG1pa3V1fG1hYWxpc2t1dXxodWh0aWt1dXx0b3Vrb2t1dXxrZXPDpGt1dXxoZWluw6RrdXV8ZWxva3V1fHN5eXNrdXV8bG9rYWt1dXxtYXJyYXNrdXV8am91bHVrdXUpKHRhKT8vaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9edC9pLCAvXmgvaSwgL15tL2ksIC9eaC9pLCAvXnQvaSwgL15rL2ksIC9eaC9pLCAvXmUvaSwgL15zL2ksIC9ebC9pLCAvXm0vaSwgL15qL2ldLFxuICBhbnk6IFsvXnRhL2ksIC9eaGVsL2ksIC9ebWFhL2ksIC9eaHUvaSwgL150by9pLCAvXmsvaSwgL15oZWkvaSwgL15lL2ksIC9ecy9pLCAvXmwvaSwgL15tYXIvaSwgL15qL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210a3BsXS9pLFxuICBzaG9ydDogL14oc3V8bWF8dGl8a2V8dG98cGV8bGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW5uLnxtYWFuLnx0aWlzLnxrZXNrLnx0b3JzdC58cGVyai58bGEpL2ksXG4gIHdpZGU6IC9eKHN1bm51bnRhaXxtYWFuYW50YWl8dGlpc3RhaXxrZXNraXZpaWtrb3x0b3JzdGFpfHBlcmphbnRhaXxsYXVhbnRhaSkobmEpPy9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9eay9pLCAvXnQvaSwgL15wL2ksIC9ebC9pXSxcbiAgYW55OiBbL15zL2ksIC9ebS9pLCAvXnRpL2ksIC9eay9pLCAvXnRvL2ksIC9ecC9pLCAvXmwvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhcHxpcHxrZXNraXnDtnxrZXNraXDDpGl2w6R8YWFtdXDDpGl2w6RsbMOkfGlsdGFww6RpdsOkbGzDpHxpbGxhbGxhfHnDtmxsw6QpL2ksXG4gIGFueTogL14oYXB8aXB8a2Vza2l5w7ZsbMOkfGtlc2tpcMOkaXbDpGxsw6R8YWFtdXDDpGl2w6RsbMOkfGlsdGFww6RpdsOkbGzDpHxpbGxhbGxhfHnDtmxsw6QpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYXAvaSxcbiAgICBwbTogL15pcC9pLFxuICAgIG1pZG5pZ2h0OiAvXmtlc2tpecO2L2ksXG4gICAgbm9vbjogL15rZXNraXDDpGl2w6QvaSxcbiAgICBtb3JuaW5nOiAvYWFtdXDDpGl2w6RsbMOkL2ksXG4gICAgYWZ0ZXJub29uOiAvaWx0YXDDpGl2w6RsbMOkL2ksXG4gICAgZXZlbmluZzogL2lsbGFsbGEvaSxcbiAgICBuaWdodDogL3nDtmxsw6QvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRmlubmlzaCBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgRmlubmlzaFxuICogQGlzby02MzktMiBmaW5cbiAqIEBhdXRob3IgUHlyeS1TYW11bGkgTGFodGkgW0BQeXBwZV17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL1B5cHBlfVxuICogQGF1dGhvciBFZG8gUml2YWkgW0BtaWtvbGFqZ3J6eWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9taWtvbGFqZ3J6eWJ9XG4gKiBAYXV0aG9yIFNhbXUgSnV2b25lbiBbQHNqdXZvbmVuXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2p1dm9uZW59XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2ZpJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ21vaW5zIGTigJl1bmUgc2Vjb25kZScsXG4gICAgb3RoZXI6ICdtb2lucyBkZSB7e2NvdW50fX0gc2Vjb25kZXMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRlcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICczMCBzZWNvbmRlcycsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdtb2lucyBk4oCZdW5lIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdtb2lucyBkZSB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdlbnZpcm9uIDEgaGV1cmUnLFxuICAgIG90aGVyOiAnZW52aXJvbiB7e2NvdW50fX0gaGV1cmVzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhldXJlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBoZXVyZXMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBqb3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBqb3VycydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdlbnZpcm9uIDEgc2VtYWluZScsXG4gICAgb3RoZXI6ICdlbnZpcm9uIHt7Y291bnR9fSBzZW1haW5lcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSBzZW1haW5lJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZW1haW5lcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnZW52aXJvbiAxIG1vaXMnLFxuICAgIG90aGVyOiAnZW52aXJvbiB7e2NvdW50fX0gbW9pcydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9pcycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9pcydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdlbnZpcm9uIDEgYW4nLFxuICAgIG90aGVyOiAnZW52aXJvbiB7e2NvdW50fX0gYW5zJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIGFuJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBhbnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdwbHVzIGTigJl1biBhbicsXG4gICAgb3RoZXI6ICdwbHVzIGRlIHt7Y291bnR9fSBhbnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ3ByZXNxdeKAmXVuIGFuJyxcbiAgICBvdGhlcjogJ3ByZXNxdWUge3tjb3VudH19IGFucydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdkYW5zICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnaWwgeSBhICcgKyByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFIGQgTU1NTSB5JyxcbiAgbG9uZzogJ2QgTU1NTSB5JyxcbiAgbWVkaXVtOiAnZCBNTU0geScsXG4gIHNob3J0OiAnZGQvTU0veSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdISDptbTpzcyB6enp6JyxcbiAgbG9uZzogJ0hIOm1tOnNzIHonLFxuICBtZWRpdW06ICdISDptbTpzcycsXG4gIHNob3J0OiAnSEg6bW0nXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnw6AnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ8OgJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcImVlZWUgJ2Rlcm5pZXIgw6AnIHBcIixcbiAgeWVzdGVyZGF5OiBcIidoaWVyIMOgJyBwXCIsXG4gIHRvZGF5OiBcIidhdWpvdXJk4oCZaHVpIMOgJyBwXCIsXG4gIHRvbW9ycm93OiBcIidkZW1haW4gw6AnIHAnXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ3Byb2NoYWluIMOgJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydhdi4gSi4tQycsICdhcC4gSi4tQyddLFxuICBhYmJyZXZpYXRlZDogWydhdi4gSi4tQycsICdhcC4gSi4tQyddLFxuICB3aWRlOiBbJ2F2YW50IErDqXN1cy1DaHJpc3QnLCAnYXByw6hzIErDqXN1cy1DaHJpc3QnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnVDEnLCAnVDInLCAnVDMnLCAnVDQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnMWVyIHRyaW0uJywgJzLDqG1lIHRyaW0uJywgJzPDqG1lIHRyaW0uJywgJzTDqG1lIHRyaW0uJ10sXG4gIHdpZGU6IFsnMWVyIHRyaW1lc3RyZScsICcyw6htZSB0cmltZXN0cmUnLCAnM8OobWUgdHJpbWVzdHJlJywgJzTDqG1lIHRyaW1lc3RyZSddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnamFudi4nLCAnZsOpdnIuJywgJ21hcnMnLCAnYXZyLicsICdtYWknLCAnanVpbicsICdqdWlsLicsICdhb8O7dCcsICdzZXB0LicsICdvY3QuJywgJ25vdi4nLCAnZMOpYy4nXSxcbiAgd2lkZTogWydqYW52aWVyJywgJ2bDqXZyaWVyJywgJ21hcnMnLCAnYXZyaWwnLCAnbWFpJywgJ2p1aW4nLCAnanVpbGxldCcsICdhb8O7dCcsICdzZXB0ZW1icmUnLCAnb2N0b2JyZScsICdub3ZlbWJyZScsICdkw6ljZW1icmUnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydEJywgJ0wnLCAnTScsICdNJywgJ0onLCAnVicsICdTJ10sXG4gIHNob3J0OiBbJ2RpJywgJ2x1JywgJ21hJywgJ21lJywgJ2plJywgJ3ZlJywgJ3NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2RpbS4nLCAnbHVuLicsICdtYXIuJywgJ21lci4nLCAnamV1LicsICd2ZW4uJywgJ3NhbS4nXSxcbiAgd2lkZTogWydkaW1hbmNoZScsICdsdW5kaScsICdtYXJkaScsICdtZXJjcmVkaScsICdqZXVkaScsICd2ZW5kcmVkaScsICdzYW1lZGknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWludWl0JyxcbiAgICBub29uOiAnbWlkaScsXG4gICAgbW9ybmluZzogJ21hdC4nLFxuICAgIGFmdGVybm9vbjogJ2FwLm0uJyxcbiAgICBldmVuaW5nOiAnc29pcicsXG4gICAgbmlnaHQ6ICdtYXQuJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWludWl0JyxcbiAgICBub29uOiAnbWlkaScsXG4gICAgbW9ybmluZzogJ21hdGluJyxcbiAgICBhZnRlcm5vb246ICdhcHLDqHMtbWlkaScsXG4gICAgZXZlbmluZzogJ3NvaXInLFxuICAgIG5pZ2h0OiAnbWF0aW4nXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pbnVpdCcsXG4gICAgbm9vbjogJ21pZGknLFxuICAgIG1vcm5pbmc6ICdkdSBtYXRpbicsXG4gICAgYWZ0ZXJub29uOiAnZGUgbOKAmWFwcsOocy1taWRpJyxcbiAgICBldmVuaW5nOiAnZHUgc29pcicsXG4gICAgbmlnaHQ6ICdkdSBtYXRpbidcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KTtcbiAgdmFyIHN1ZmZpeDtcblxuICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIGlmICh1bml0ID09PSAneWVhcicgfHwgdW5pdCA9PT0gJ2hvdXInIHx8IHVuaXQgPT09ICd3ZWVrJykge1xuICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgIHN1ZmZpeCA9ICfDqHJlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3VmZml4ID0gJ8OobWUnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICBzdWZmaXggPSAnZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWZmaXggPSAnw6htZSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArIHN1ZmZpeDtcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykoacOobWV8w6hyZXzDqG1lfGVyfGUpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXZcXC5KXFwuQ3xhcFxcLkpcXC5DfGFwXFwuSlxcLi1DKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYXZcXC5KXFwuLUN8YXZcXC5KLUN8YXByXFwuSlxcLi1DfGFwclxcLkotQ3xhcFxcLkotQykvaSxcbiAgd2lkZTogL14oYXZhbnQgSsOpc3VzLUNocmlzdHxhcHLDqHMgSsOpc3VzLUNocmlzdCkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmF2L2ksIC9eYXAvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9edFsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XShlcnzDqG1lfGUpPyB0cmltZXN0cmUvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFudnxmw6l2cnxtYXJzfGF2cnxtYWl8anVpbnxqdWlsbHxqdWlsfGFvw7t0fHNlcHR8b2N0fG5vdnxkw6ljKVxcLj8vaSxcbiAgd2lkZTogL14oamFudmllcnxmw6l2cmllcnxtYXJzfGF2cmlsfG1haXxqdWlufGp1aWxsZXR8YW/Du3R8c2VwdGVtYnJlfG9jdG9icmV8bm92ZW1icmV8ZMOpY2VtYnJlKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXYvaSwgL15tYS9pLCAvXmp1aW4vaSwgL15qdWlsL2ksIC9eYW8vaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bbG1qdnNkXS9pLFxuICBzaG9ydDogL14oZGl8bHV8bWF8bWV8amV8dmV8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihkaW18bHVufG1hcnxtZXJ8amV1fHZlbnxzYW0pXFwuPy9pLFxuICB3aWRlOiAvXihkaW1hbmNoZXxsdW5kaXxtYXJkaXxtZXJjcmVkaXxqZXVkaXx2ZW5kcmVkaXxzYW1lZGkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15kL2ksIC9ebC9pLCAvXm0vaSwgL15tL2ksIC9eai9pLCAvXnYvaSwgL15zL2ldLFxuICBhbnk6IFsvXmRpL2ksIC9ebHUvaSwgL15tYS9pLCAvXm1lL2ksIC9eamUvaSwgL152ZS9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pbnVpdHxtaWRpfG1hdFxcLj98YXBcXC4/bVxcLj98c29pcnxudWl0KS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fGR1IG1hdGlufGRlIGwnYXByw6hzWy1cXHNdbWlkaXxkdSBzb2lyfGRlIGxhIG51aXQpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taW4vaSxcbiAgICBub29uOiAvXm1pZC9pLFxuICAgIG1vcm5pbmc6IC9tYXQvaSxcbiAgICBhZnRlcm5vb246IC9hcC9pLFxuICAgIGV2ZW5pbmc6IC9zb2lyL2ksXG4gICAgbmlnaHQ6IC9udWl0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEZyZW5jaCBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgRnJlbmNoXG4gKiBAaXNvLTYzOS0yIGZyYVxuICogQGF1dGhvciBKZWFuIER1cG91eSBbQGl6ZWF1XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaXplYXV9XG4gKiBAYXV0aG9yIEZyYW7Dp29pcyBCIFtAZmJvbnpvbl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Zib256b259XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2ZyJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIG51bWJlclZhbHVlcyA9IHtcbiAgbG9jYWxlOiB7XG4gICAgJzEnOiAn4KWnJyxcbiAgICAnMic6ICfgpagnLFxuICAgICczJzogJ+ClqScsXG4gICAgJzQnOiAn4KWqJyxcbiAgICAnNSc6ICfgpasnLFxuICAgICc2JzogJ+ClrCcsXG4gICAgJzcnOiAn4KWtJyxcbiAgICAnOCc6ICfgpa4nLFxuICAgICc5JzogJ+ClrycsXG4gICAgJzAnOiAn4KWmJ1xuICB9LFxuICBudW1iZXI6IHtcbiAgICAn4KWnJzogJzEnLFxuICAgICfgpagnOiAnMicsXG4gICAgJ+ClqSc6ICczJyxcbiAgICAn4KWqJzogJzQnLFxuICAgICfgpasnOiAnNScsXG4gICAgJ+ClrCc6ICc2JyxcbiAgICAn4KWtJzogJzcnLFxuICAgICfgpa4nOiAnOCcsXG4gICAgJ+Clryc6ICc5JyxcbiAgICAn4KWmJzogJzAnXG4gIH0gLy8gQ0xEUiAjMTU4NSAtICMxNTkyXG5cbn07XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn4KSI4KS44KS+LeCkquClguCksOCljeCktScsICfgpIjgpLjgpY3gpLXgpYAnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn4KSI4KS44KS+LeCkquClguCksOCljeCktScsICfgpIjgpLjgpY3gpLXgpYAnXSxcbiAgd2lkZTogWyfgpIjgpLjgpL4t4KSq4KWC4KSw4KWN4KS1JywgJ+CkiOCkuOCkteClgCDgpLjgpKgnXSAvLyBDTERSICMxNTkzIC0gIzE2MTZcblxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWyfgpKTgpL8xJywgJ+CkpOCkvzInLCAn4KSk4KS/MycsICfgpKTgpL80J10sXG4gIHdpZGU6IFsn4KSq4KS54KSy4KWAIOCkpOCkv+CkruCkvuCkueClgCcsICfgpKbgpYLgpLjgpLDgpYAg4KSk4KS/4KSu4KS+4KS54KWAJywgJ+CkpOClgOCkuOCksOClgCDgpKTgpL/gpK7gpL7gpLngpYAnLCAn4KSa4KWM4KSl4KWAIOCkpOCkv+CkruCkvuCkueClgCddIC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuICAvLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbiAgLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4gIC8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbiAgLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9oaS5odG1sXG4gIC8vIENMRFIgIzE2MTcgLSAjMTY4OFxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn4KScJywgJ+Ckq+CkvCcsICfgpK7gpL4nLCAn4KSFJywgJ+CkruCkiCcsICfgpJzgpYInLCAn4KSc4KWBJywgJ+CkheCklycsICfgpLjgpL8nLCAn4KSF4KSV4KWN4KSk4KWCJywgJ+CkqCcsICfgpKbgpL8nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn4KSc4KSoJywgJ+Ckq+CkvOCksCcsICfgpK7gpL7gpLDgpY3gpJonLCAn4KSF4KSq4KWN4KSw4KWI4KSyJywgJ+CkruCkiCcsICfgpJzgpYLgpKgnLCAn4KSc4KWB4KSyJywgJ+CkheCklycsICfgpLjgpL/gpKQnLCAn4KSF4KSV4KWN4KSk4KWCJywgJ+CkqOCktScsICfgpKbgpL/gpLgnXSxcbiAgd2lkZTogWyfgpJzgpKjgpLXgpLDgpYAnLCAn4KSr4KS84KSw4KS14KSw4KWAJywgJ+CkruCkvuCksOCljeCkmicsICfgpIXgpKrgpY3gpLDgpYjgpLInLCAn4KSu4KSIJywgJ+CknOClguCkqCcsICfgpJzgpYHgpLLgpL7gpIgnLCAn4KSF4KSX4KS44KWN4KSkJywgJ+CkuOCkv+CkpOCkguCkrOCksCcsICfgpIXgpJXgpY3gpKTgpYLgpKzgpLAnLCAn4KSo4KS14KSC4KSs4KSwJywgJ+CkpuCkv+CkuOCkguCkrOCksCddIC8vIENMRFIgIzE2ODkgLSAjMTc0NFxuXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ+CksCcsICfgpLjgpYsnLCAn4KSu4KSCJywgJ+CkrOClgScsICfgpJfgpYEnLCAn4KS24KWBJywgJ+CktiddLFxuICBzaG9ydDogWyfgpLAnLCAn4KS44KWLJywgJ+CkruCkgicsICfgpKzgpYEnLCAn4KSX4KWBJywgJ+CktuClgScsICfgpLYnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn4KSw4KS14KS/JywgJ+CkuOCli+CkricsICfgpK7gpILgpJfgpLInLCAn4KSs4KWB4KSnJywgJ+Ckl+ClgeCksOClgScsICfgpLbgpYHgpJXgpY3gpLAnLCAn4KS24KSo4KS/J10sXG4gIHdpZGU6IFsn4KSw4KS14KS/4KS14KS+4KSwJywgJ+CkuOCli+CkruCkteCkvuCksCcsICfgpK7gpILgpJfgpLLgpLXgpL7gpLAnLCAn4KSs4KWB4KSn4KS14KS+4KSwJywgJ+Ckl+ClgeCksOClgeCkteCkvuCksCcsICfgpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLAnLCAn4KS24KSo4KS/4KS14KS+4KSwJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ+CkquClguCksOCljeCkteCkvuCkueCljeCkqCcsXG4gICAgcG06ICfgpIXgpKrgpLDgpL7gpLngpY3gpKgnLFxuICAgIG1pZG5pZ2h0OiAn4KSu4KSn4KWN4KSv4KSw4KS+4KSk4KWN4KSw4KS/JyxcbiAgICBub29uOiAn4KSm4KWL4KSq4KS54KSwJyxcbiAgICBtb3JuaW5nOiAn4KS44KWB4KSs4KS5JyxcbiAgICBhZnRlcm5vb246ICfgpKbgpYvgpKrgpLngpLAnLFxuICAgIGV2ZW5pbmc6ICfgpLbgpL7gpK4nLFxuICAgIG5pZ2h0OiAn4KSw4KS+4KSkJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSoJyxcbiAgICBwbTogJ+CkheCkquCksOCkvuCkueCljeCkqCcsXG4gICAgbWlkbmlnaHQ6ICfgpK7gpKfgpY3gpK/gpLDgpL7gpKTgpY3gpLDgpL8nLFxuICAgIG5vb246ICfgpKbgpYvgpKrgpLngpLAnLFxuICAgIG1vcm5pbmc6ICfgpLjgpYHgpKzgpLknLFxuICAgIGFmdGVybm9vbjogJ+CkpuCli+CkquCkueCksCcsXG4gICAgZXZlbmluZzogJ+CktuCkvuCkricsXG4gICAgbmlnaHQ6ICfgpLDgpL7gpKQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ+CkquClguCksOCljeCkteCkvuCkueCljeCkqCcsXG4gICAgcG06ICfgpIXgpKrgpLDgpL7gpLngpY3gpKgnLFxuICAgIG1pZG5pZ2h0OiAn4KSu4KSn4KWN4KSv4KSw4KS+4KSk4KWN4KSw4KS/JyxcbiAgICBub29uOiAn4KSm4KWL4KSq4KS54KSwJyxcbiAgICBtb3JuaW5nOiAn4KS44KWB4KSs4KS5JyxcbiAgICBhZnRlcm5vb246ICfgpKbgpYvgpKrgpLngpLAnLFxuICAgIGV2ZW5pbmc6ICfgpLbgpL7gpK4nLFxuICAgIG5pZ2h0OiAn4KSw4KS+4KSkJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSoJyxcbiAgICBwbTogJ+CkheCkquCksOCkvuCkueCljeCkqCcsXG4gICAgbWlkbmlnaHQ6ICfgpK7gpKfgpY3gpK/gpLDgpL7gpKTgpY3gpLDgpL8nLFxuICAgIG5vb246ICfgpKbgpYvgpKrgpLngpLAnLFxuICAgIG1vcm5pbmc6ICfgpLjgpYHgpKzgpLknLFxuICAgIGFmdGVybm9vbjogJ+CkpuCli+CkquCkueCksCcsXG4gICAgZXZlbmluZzogJ+CktuCkvuCkricsXG4gICAgbmlnaHQ6ICfgpLDgpL7gpKQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfgpKrgpYLgpLDgpY3gpLXgpL7gpLngpY3gpKgnLFxuICAgIHBtOiAn4KSF4KSq4KSw4KS+4KS54KWN4KSoJyxcbiAgICBtaWRuaWdodDogJ+CkruCkp+CljeCkr+CksOCkvuCkpOCljeCksOCkvycsXG4gICAgbm9vbjogJ+CkpuCli+CkquCkueCksCcsXG4gICAgbW9ybmluZzogJ+CkuOClgeCkrOCkuScsXG4gICAgYWZ0ZXJub29uOiAn4KSm4KWL4KSq4KS54KSwJyxcbiAgICBldmVuaW5nOiAn4KS24KS+4KSuJyxcbiAgICBuaWdodDogJ+CksOCkvuCkpCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSoJyxcbiAgICBwbTogJ+CkheCkquCksOCkvuCkueCljeCkqCcsXG4gICAgbWlkbmlnaHQ6ICfgpK7gpKfgpY3gpK/gpLDgpL7gpKTgpY3gpLDgpL8nLFxuICAgIG5vb246ICfgpKbgpYvgpKrgpLngpLAnLFxuICAgIG1vcm5pbmc6ICfgpLjgpYHgpKzgpLknLFxuICAgIGFmdGVybm9vbjogJ+CkpuCli+CkquCkueCksCcsXG4gICAgZXZlbmluZzogJ+CktuCkvuCkricsXG4gICAgbmlnaHQ6ICfgpLDgpL7gpKQnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIpIHtcbiAgdmFyIG51bWJlciA9IGxvY2FsaXplLmxvY2FsZVRvTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgdmFyIGxvY2FsZU51bWJlciA9IGxvY2FsaXplLm51bWJlclRvTG9jYWxlKG51bWJlcik7XG4gIHZhciByZW0xMCA9IG51bWJlciAlIDEwO1xuXG4gIHN3aXRjaCAocmVtMTApIHtcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDY6XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgNTpcbiAgICBjYXNlIDc6XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgOTpcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gbG9jYWxlTnVtYmVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZVRvTnVtYmVyKGxvY2FsZSkge1xuICB2YXIgbnVtYmVyID0gbG9jYWxlLnRvU3RyaW5nKCkucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIG51bWJlclZhbHVlcy5udW1iZXJbbWF0Y2hdO1xuICB9KTtcbiAgcmV0dXJuIE51bWJlcihudW1iZXIpO1xufVxuXG5mdW5jdGlvbiBudW1iZXJUb0xvY2FsZShudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gbnVtYmVyVmFsdWVzLmxvY2FsZVttYXRjaF07XG4gIH0pO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIGxvY2FsZVRvTnVtYmVyOiBsb2NhbGVUb051bWJlcixcbiAgbnVtYmVyVG9Mb2NhbGU6IG51bWJlclRvTG9jYWxlLFxuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBsb2NhbGl6ZSBmcm9tICcuLi9sb2NhbGl6ZS9pbmRleC5qcyc7IC8vIFNvdXJjZTogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9oaS5odG1sXG5cbnZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ+ClpyDgpLjgpYfgpJXgpILgpKEg4KS44KWHIOCkleCkricsXG4gICAgLy8gQ0xEUiAjMTMxMFxuICAgIG90aGVyOiAne3tjb3VudH19IOCkuOClh+CkleCkguCkoSDgpLjgpYcg4KSV4KSuJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJ+ClpyDgpLjgpYfgpJXgpILgpKEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOCkuOClh+CkleCkguCkoSdcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICfgpIbgpKfgpL4g4KSu4KS/4KSo4KSfJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ+ClpyDgpK7gpL/gpKjgpJ8g4KS44KWHIOCkleCkricsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4KSu4KS/4KSo4KSfIOCkuOClhyDgpJXgpK4nXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAn4KWnIOCkruCkv+CkqOCknycsXG4gICAgLy8gQ0xEUiAjMTMwN1xuICAgIG90aGVyOiAne3tjb3VudH19IOCkruCkv+CkqOCknydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICfgpLLgpJfgpK3gpJcg4KWnIOCkmOCkguCkn+CkvicsXG4gICAgb3RoZXI6ICfgpLLgpJfgpK3gpJcge3tjb3VudH19IOCkmOCkguCkn+ClhydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAn4KWnIOCkmOCkguCkn+CkvicsXG4gICAgLy8gQ0xEUiAjMTMwNFxuICAgIG90aGVyOiAne3tjb3VudH19IOCkmOCkguCkn+ClhycgLy8gQ0xEUiAjNDQ2N1xuXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAn4KWnIOCkpuCkv+CkqCcsXG4gICAgLy8gQ0xEUiAjMTI4NlxuICAgIG90aGVyOiAne3tjb3VudH19IOCkpuCkv+CkqCdcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICfgpLLgpJfgpK3gpJcg4KWnIOCkuOCkquCljeCkpOCkvuCkuScsXG4gICAgb3RoZXI6ICfgpLLgpJfgpK3gpJcge3tjb3VudH19IOCkuOCkquCljeCkpOCkvuCkuSdcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAn4KWnIOCkuOCkquCljeCkpOCkvuCkuScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4KS44KSq4KWN4KSk4KS+4KS5J1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICfgpLLgpJfgpK3gpJcg4KWnIOCkruCkueClgOCkqOCkvicsXG4gICAgb3RoZXI6ICfgpLLgpJfgpK3gpJcge3tjb3VudH19IOCkruCkueClgOCkqOClhydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJ+ClpyDgpK7gpLngpYDgpKjgpL4nLFxuICAgIG90aGVyOiAne3tjb3VudH19IOCkruCkueClgOCkqOClhydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICfgpLLgpJfgpK3gpJcg4KWnIOCkteCksOCljeCktycsXG4gICAgb3RoZXI6ICfgpLLgpJfgpK3gpJcge3tjb3VudH19IOCkteCksOCljeCktycgLy8gQ0xEUiAjNDgyM1xuXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJ+ClpyDgpLXgpLDgpY3gpLcnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOCkteCksOCljeCktydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ+ClpyDgpLXgpLDgpY3gpLcg4KS44KWHIOCkheCkp+Ckv+CklScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4KS14KSw4KWN4KS3IOCkuOClhyDgpIXgpKfgpL/gpJUnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ+CksuCkl+CkreCklyDgpacg4KS14KSw4KWN4KS3JyxcbiAgICBvdGhlcjogJ+CksuCkl+CkreCklyB7e2NvdW50fX0g4KS14KSw4KWN4KS3J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGxvY2FsaXplLm51bWJlclRvTG9jYWxlKGNvdW50KSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICfgpK7gpYcgJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcg4KSq4KS54KSy4KWHJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIGRvIE1NTU0sIHknLFxuICAvLyBDTERSICMxNzg3XG4gIGxvbmc6ICdkbyBNTU1NLCB5JyxcbiAgLy8gQ0xEUiAjMTc4OFxuICBtZWRpdW06ICdkIE1NTSwgeScsXG4gIC8vIENMRFIgIzE3ODlcbiAgc2hvcnQ6ICdkZC9NTS95eXl5JyAvLyBDTERSICMxNzkwXG5cbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIC8vIENMRFIgIzE3OTFcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgLy8gQ0xEUiAjMTc5MlxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICAvLyBDTERSICMxNzkzXG4gIHNob3J0OiAnaDptbSBhJyAvLyBDTERSICMxNzk0XG5cbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICfgpJXgpYsnIHt7dGltZX19XCIsXG4gIC8vIENMRFIgIzE3OTVcbiAgbG9uZzogXCJ7e2RhdGV9fSAn4KSV4KWLJyB7e3RpbWV9fVwiLFxuICAvLyBDTERSICMxNzk2XG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIC8vIENMRFIgIzE3OTdcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nIC8vIENMRFIgIzE3OThcblxufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ+CkquCkv+Ckm+CksuClhycgZWVlZSBwXCIsXG4gIHllc3RlcmRheTogXCIn4KSV4KSyJyBwXCIsXG4gIHRvZGF5OiBcIifgpIbgpJwnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ+CkleCksicgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICfgpJXgpYsnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuLi9sb2NhbGl6ZS9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eW+ClpuClp+ClqOClqeClquClq+ClrOClreClruClr10rL2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eW+ClpuClp+ClqOClqeClquClq+ClrOClreClruClr10rL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXijgpIjgpLjgpL4t4KSq4KWC4KSw4KWN4KS1fOCkiOCkuOCljeCkteClgCkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKOCkiOCkuOCkvlxcLj9cXHM/4KSq4KWC4KSw4KWN4KS1XFwuP3zgpIjgpLjgpL5cXC4/KS9pLFxuICB3aWRlOiAvXijgpIjgpLjgpL4t4KSq4KWC4KSw4KWN4KS1fOCkiOCkuOCkteClgCDgpKrgpYLgpLDgpY3gpLV84KSI4KS44KS14KWAIOCkuOCkqHzgpIjgpLjgpLXgpYApL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9e4KSk4KS/WzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKOCkquCkueCksuClgHzgpKbgpYLgpLjgpLDgpYB84KSk4KWA4KS44KSw4KWAfOCkmuCljOCkpeClgCk/IOCkpOCkv+CkruCkvuCkueClgC9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b4KSc4KSr4KS84KSu4KS+4KSF4KSq4KWN4KSu4KSI4KSc4KWC4KSo4KSc4KWB4KSF4KSX4KS44KS/4KSF4KSV4KWN4KSk4KSo4KSm4KS/XS9pLFxuICBhYmJyZXZpYXRlZDogL14o4KSc4KSofOCkq+CkvOCksHzgpK7gpL7gpLDgpY3gpJp84KSF4KSq4KWNfOCkruCkiHzgpJzgpYLgpKh84KSc4KWB4KSyfOCkheCkl3zgpLjgpL/gpKR84KSF4KSV4KWN4KSk4KWCfOCkqOCktXzgpKbgpL/gpLgpL2ksXG4gIHdpZGU6IC9eKOCknOCkqOCkteCksOClgHzgpKvgpLzgpLDgpLXgpLDgpYB84KSu4KS+4KSw4KWN4KSafOCkheCkquCljeCksOCliOCksnzgpK7gpIh84KSc4KWC4KSofOCknOClgeCksuCkvuCkiHzgpIXgpJfgpLjgpY3gpKR84KS44KS/4KSk4KSC4KSs4KSwfOCkheCkleCljeCkpOClguCkrOCksHzgpKjgpLXgpILgpKzgpLB84KSm4KS/4KS44KSC4KSs4KSwKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17gpJwvaSwgL17gpKvgpLwvaSwgL17gpK7gpL4vaSwgL17gpIXgpKrgpY0vaSwgL17gpK7gpIgvaSwgL17gpJzgpYIvaSwgL17gpJzgpYEvaSwgL17gpIXgpJcvaSwgL17gpLjgpL8vaSwgL17gpIXgpJXgpY3gpKTgpYIvaSwgL17gpKgvaSwgL17gpKbgpL8vaV0sXG4gIGFueTogWy9e4KSc4KSoL2ksIC9e4KSr4KS8L2ksIC9e4KSu4KS+L2ksIC9e4KSF4KSq4KWNL2ksIC9e4KSu4KSIL2ksIC9e4KSc4KWCL2ksIC9e4KSc4KWBL2ksIC9e4KSF4KSXL2ksIC9e4KS44KS/L2ksIC9e4KSF4KSV4KWN4KSk4KWCL2ksIC9e4KSo4KS1L2ksIC9e4KSm4KS/4KS4L2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b4KSw4KS14KS/4KS44KWL4KSu4KSu4KSC4KSX4KSy4KSs4KWB4KSn4KSX4KWB4KSw4KWB4KS24KWB4KSV4KWN4KSw4KS24KSo4KS/XS9pLFxuICBzaG9ydDogL14o4KSw4KS14KS/fOCkuOCli+CkrnzgpK7gpILgpJfgpLJ84KSs4KWB4KSnfOCkl+ClgeCksOClgXzgpLbgpYHgpJXgpY3gpLB84KS24KSo4KS/KS9pLFxuICBhYmJyZXZpYXRlZDogL14o4KSw4KS14KS/fOCkuOCli+CkrnzgpK7gpILgpJfgpLJ84KSs4KWB4KSnfOCkl+ClgeCksOClgXzgpLbgpYHgpJXgpY3gpLB84KS24KSo4KS/KS9pLFxuICB3aWRlOiAvXijgpLDgpLXgpL/gpLXgpL7gpLB84KS44KWL4KSu4KS14KS+4KSwfOCkruCkguCkl+CksuCkteCkvuCksHzgpKzgpYHgpKfgpLXgpL7gpLB84KSX4KWB4KSw4KWB4KS14KS+4KSwfOCktuClgeCkleCljeCksOCkteCkvuCksHzgpLbgpKjgpL/gpLXgpL7gpLApL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17gpLDgpLXgpL8vaSwgL17gpLjgpYvgpK4vaSwgL17gpK7gpILgpJfgpLIvaSwgL17gpKzgpYHgpKcvaSwgL17gpJfgpYHgpLDgpYEvaSwgL17gpLbgpYHgpJXgpY3gpLAvaSwgL17gpLbgpKjgpL8vaV0sXG4gIGFueTogWy9e4KSw4KS14KS/L2ksIC9e4KS44KWL4KSuL2ksIC9e4KSu4KSC4KSX4KSyL2ksIC9e4KSs4KWB4KSnL2ksIC9e4KSX4KWB4KSw4KWBL2ksIC9e4KS24KWB4KSV4KWN4KSwL2ksIC9e4KS24KSo4KS/L2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14o4KSq4KWCfOCkhXzgpK584KSmLlxcP3zgpLjgpYF84KSm4KWLfOCktuCkvnzgpLDgpL4pL2ksXG4gIGFueTogL14o4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSofOCkheCkquCksOCkvuCkueCljeCkqHzgpK584KSmLlxcP3zgpLjgpYF84KSm4KWLfOCktuCkvnzgpLDgpL4pL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9e4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSoL2ksXG4gICAgcG06IC9e4KSF4KSq4KSw4KS+4KS54KWN4KSoL2ksXG4gICAgbWlkbmlnaHQ6IC9e4KSu4KSn4KWN4KSvL2ksXG4gICAgbm9vbjogL17gpKbgpYsvaSxcbiAgICBtb3JuaW5nOiAv4KS44KWBL2ksXG4gICAgYWZ0ZXJub29uOiAv4KSm4KWLL2ksXG4gICAgZXZlbmluZzogL+CktuCkvi9pLFxuICAgIG5pZ2h0OiAv4KSw4KS+L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBsb2NhbGl6ZS5sb2NhbGVUb051bWJlclxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgSGluZGkgbG9jYWxlIChJbmRpYSkuXG4gKiBAbGFuZ3VhZ2UgSGluZGlcbiAqIEBpc28tNjM5LTIgaGluXG4gKiBAYXV0aG9yIE11a2VzaCBNYW5kaXdhbCBbQG11a2VzaG1hbmRpd2FsXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbXVrZXNobWFuZGl3YWx9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2hpJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciB0cmFuc2xhdGlvbnMgPSB7XG4gIGFib3V0OiAna8O2csO8bGJlbMO8bCcsXG4gIG92ZXI6ICd0w7ZiYiBtaW50JyxcbiAgYWxtb3N0OiAnbWFqZG5lbScsXG4gIGxlc3N0aGFuOiAna2V2ZXNlYmIgbWludCdcbn07XG52YXIgd2l0aG91dFN1ZmZpeGVzID0ge1xuICB4c2Vjb25kczogJyBtw6Fzb2RwZXJjJyxcbiAgaGFsZmFtaW51dGU6ICdmw6lsIHBlcmMnLFxuICB4bWludXRlczogJyBwZXJjJyxcbiAgeGhvdXJzOiAnIMOzcmEnLFxuICB4ZGF5czogJyBuYXAnLFxuICB4d2Vla3M6ICcgaMOpdCcsXG4gIHhtb250aHM6ICcgaMOzbmFwJyxcbiAgeHllYXJzOiAnIMOpdidcbn07XG52YXIgd2l0aFN1ZmZpeGVzID0ge1xuICB4c2Vjb25kczoge1xuICAgIFstMV06ICcgbcOhc29kcGVyY2NlbCBlemVsxZF0dCcsXG4gICAgWzFdOiAnIG3DoXNvZHBlcmMgbcO6bHZhJyxcbiAgICBbMF06ICcgbcOhc29kcGVyY2UnXG4gIH0sXG4gIGhhbGZhbWludXRlOiB7XG4gICAgWy0xXTogJ2bDqWwgcGVyY2NlbCBlemVsxZF0dCcsXG4gICAgWzFdOiAnZsOpbCBwZXJjIG3Dumx2YScsXG4gICAgWzBdOiAnZsOpbCBwZXJjZSdcbiAgfSxcbiAgeG1pbnV0ZXM6IHtcbiAgICBbLTFdOiAnIHBlcmNjZWwgZXplbMWRdHQnLFxuICAgIFsxXTogJyBwZXJjIG3Dumx2YScsXG4gICAgWzBdOiAnIHBlcmNlJ1xuICB9LFxuICB4aG91cnM6IHtcbiAgICBbLTFdOiAnIMOzcsOhdmFsIGV6ZWzFkXR0JyxcbiAgICBbMV06ICcgw7NyYSBtw7psdmEnLFxuICAgIFswXTogJyDDs3LDoWphJ1xuICB9LFxuICB4ZGF5czoge1xuICAgIFstMV06ICcgbmFwcGFsIGV6ZWzFkXR0JyxcbiAgICBbMV06ICcgbmFwIG3Dumx2YScsXG4gICAgWzBdOiAnIG5hcGphJ1xuICB9LFxuICB4d2Vla3M6IHtcbiAgICBbLTFdOiAnIGjDqXR0ZWwgZXplbMWRdHQnLFxuICAgIFsxXTogJyBow6l0IG3Dumx2YScsXG4gICAgWzBdOiAnIGhldGUnXG4gIH0sXG4gIHhtb250aHM6IHtcbiAgICBbLTFdOiAnIGjDs25hcHBhbCBlemVsxZF0dCcsXG4gICAgWzFdOiAnIGjDs25hcCBtw7psdmEnLFxuICAgIFswXTogJyBow7NuYXBqYSdcbiAgfSxcbiAgeHllYXJzOiB7XG4gICAgWy0xXTogJyDDqXZ2ZWwgZXplbMWRdHQnLFxuICAgIFsxXTogJyDDqXYgbcO6bHZhJyxcbiAgICBbMF06ICcgw6l2ZSdcbiAgfVxufTtcblxuZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgYWRkU3VmZml4LCBrZXksIGNvbXBhcmlzb24pIHtcbiAgdmFyIHRyYW5zbGF0ZWQgPSBhZGRTdWZmaXggPyB3aXRoU3VmZml4ZXNba2V5XVtjb21wYXJpc29uXSA6IHdpdGhvdXRTdWZmaXhlc1trZXldO1xuXG4gIGlmIChrZXkgPT09ICdoYWxmYW1pbnV0ZScpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlZDtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyB0cmFuc2xhdGVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBhZHZlcmIgPSB0b2tlbi5tYXRjaCgvYWJvdXR8b3ZlcnxhbG1vc3R8bGVzc3RoYW4vaSk7XG4gIHZhciB1bml0ID0gdG9rZW4ucmVwbGFjZShhZHZlcmIsICcnKTtcbiAgdmFyIHJlc3VsdDtcbiAgcmVzdWx0ID0gdHJhbnNsYXRlKGNvdW50LCBvcHRpb25zLmFkZFN1ZmZpeCwgdW5pdC50b0xvd2VyQ2FzZSgpLCBvcHRpb25zLmNvbXBhcmlzb24pO1xuXG4gIGlmIChhZHZlcmIpIHtcbiAgICByZXN1bHQgPSB0cmFuc2xhdGlvbnNbYWR2ZXJiWzBdLnRvTG93ZXJDYXNlKCldICsgJyAnICsgcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd5LiBNTU1NIGQuLCBFRUVFJyxcbiAgbG9uZzogJ3kuIE1NTU0gZC4nLFxuICBtZWRpdW06ICd5LiBNTU0gZC4nLFxuICBzaG9ydDogJ3kuIE1NLiBkZC4nXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSDptbTpzcyB6enp6JyxcbiAgbG9uZzogJ0g6bW06c3MgeicsXG4gIG1lZGl1bTogJ0g6bW06c3MnLFxuICBzaG9ydDogJ0g6bW0nXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ3t7ZGF0ZX19IHt7dGltZX19JyxcbiAgbG9uZzogJ3t7ZGF0ZX19IHt7dGltZX19JyxcbiAgbWVkaXVtOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19IHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBhY2N1c2F0aXZlV2Vla2RheXMgPSBbJ3Zhc8Ohcm5hcCcsICdow6l0ZsWRbicsICdrZWRkZW4nLCAnc3plcmTDoW4nLCAnY3PDvHTDtnJ0w7Zrw7ZuJywgJ3DDqW50ZWtlbicsICdzem9tYmF0b24nXTtcblxuZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGRhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICByZXR1cm4gKGlzRnV0dXJlID8gJycgOiBcIidtw7psdCcgXCIpICsgXCInXCIgKyBhY2N1c2F0aXZlV2Vla2RheXNbZGF5XSArIFwiJ1wiICsgXCIgcCcta29yJ1wiO1xuICB9O1xufVxuXG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiB3ZWVrKGZhbHNlKSxcbiAgeWVzdGVyZGF5OiBcIid0ZWduYXAnIHAnLWtvcidcIixcbiAgdG9kYXk6IFwiJ21hJyBwJy1rb3InXCIsXG4gIHRvbW9ycm93OiBcIidob2xuYXAnIHAnLWtvcidcIixcbiAgbmV4dFdlZWs6IHdlZWsodHJ1ZSksXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIGZvcm1hdCA9IGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcblxuICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmb3JtYXQoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdDtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydpZS4nLCAnaXN6LiddLFxuICBhYmJyZXZpYXRlZDogWydpLiBlLicsICdpLiBzei4nXSxcbiAgd2lkZTogWydLcmlzenR1cyBlbMWRdHQnLCAnaWTFkXN6w6Ftw610w6FzdW5rIHN6ZXJpbnQnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMS4nLCAnMi4nLCAnMy4nLCAnNC4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsnMS4gbi7DqXYnLCAnMi4gbi7DqXYnLCAnMy4gbi7DqXYnLCAnNC4gbi7DqXYnXSxcbiAgd2lkZTogWycxLiBuZWd5ZWTDqXYnLCAnMi4gbmVneWVkw6l2JywgJzMuIG5lZ3llZMOpdicsICc0LiBuZWd5ZWTDqXYnXVxufTtcbnZhciBmb3JtYXR0aW5nUXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0kuJywgJ0lJLicsICdJSUkuJywgJ0lWLiddLFxuICBhYmJyZXZpYXRlZDogWydJLiBuLsOpdicsICdJSS4gbi7DqXYnLCAnSUlJLiBuLsOpdicsICdJVi4gbi7DqXYnXSxcbiAgd2lkZTogWydJLiBuZWd5ZWTDqXYnLCAnSUkuIG5lZ3llZMOpdicsICdJSUkuIG5lZ3llZMOpdicsICdJVi4gbmVneWVkw6l2J11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICfDgScsICdNJywgJ0onLCAnSicsICdBJywgJ1N6JywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbi4nLCAnZmVici4nLCAnbcOhcmMuJywgJ8OhcHIuJywgJ23DoWouJywgJ2rDum4uJywgJ2rDumwuJywgJ2F1Zy4nLCAnc3plcHQuJywgJ29rdC4nLCAnbm92LicsICdkZWMuJ10sXG4gIHdpZGU6IFsnamFudcOhcicsICdmZWJydcOhcicsICdtw6FyY2l1cycsICfDoXByaWxpcycsICdtw6FqdXMnLCAnasO6bml1cycsICdqw7psaXVzJywgJ2F1Z3VzenR1cycsICdzemVwdGVtYmVyJywgJ29rdMOzYmVyJywgJ25vdmVtYmVyJywgJ2RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnVicsICdIJywgJ0snLCAnU3onLCAnQ3MnLCAnUCcsICdTeiddLFxuICBzaG9ydDogWydWJywgJ0gnLCAnSycsICdTemUnLCAnQ3MnLCAnUCcsICdTem8nXSxcbiAgYWJicmV2aWF0ZWQ6IFsnVicsICdIJywgJ0snLCAnU3plJywgJ0NzJywgJ1AnLCAnU3pvJ10sXG4gIHdpZGU6IFsndmFzw6FybmFwJywgJ2jDqXRmxZEnLCAna2VkZCcsICdzemVyZGEnLCAnY3PDvHTDtnJ0w7ZrJywgJ3DDqW50ZWsnLCAnc3pvbWJhdCddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdkZS4nLFxuICAgIHBtOiAnZHUuJyxcbiAgICBtaWRuaWdodDogJ8OpambDqWwnLFxuICAgIG5vb246ICdkw6lsJyxcbiAgICBtb3JuaW5nOiAncmVnZ2VsJyxcbiAgICBhZnRlcm5vb246ICdkdS4nLFxuICAgIGV2ZW5pbmc6ICdlc3RlJyxcbiAgICBuaWdodDogJ8OpamplbCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ2RlLicsXG4gICAgcG06ICdkdS4nLFxuICAgIG1pZG5pZ2h0OiAnw6lqZsOpbCcsXG4gICAgbm9vbjogJ2TDqWwnLFxuICAgIG1vcm5pbmc6ICdyZWdnZWwnLFxuICAgIGFmdGVybm9vbjogJ2R1LicsXG4gICAgZXZlbmluZzogJ2VzdGUnLFxuICAgIG5pZ2h0OiAnw6lqamVsJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdkZS4nLFxuICAgIHBtOiAnZHUuJyxcbiAgICBtaWRuaWdodDogJ8OpambDqWwnLFxuICAgIG5vb246ICdkw6lsJyxcbiAgICBtb3JuaW5nOiAncmVnZ2VsJyxcbiAgICBhZnRlcm5vb246ICdkw6lsdXTDoW4nLFxuICAgIGV2ZW5pbmc6ICdlc3RlJyxcbiAgICBuaWdodDogJ8OpamplbCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX2RpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgcmV0dXJuIG51bWJlciArICcuJztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdRdWFydGVyVmFsdWVzLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspXFwuPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oaWVcXC58aXN6XFwuKS9pLFxuICBhYmJyZXZpYXRlZDogL14oaVxcLlxccz9lXFwuP3xiP1xccz9jXFxzP2V8aVxcLlxccz9zelxcLj8pL2ksXG4gIHdpZGU6IC9eKEtyaXN6dHVzIGVsxZF0dHxpZMWRc3rDoW3DrXTDoXN1bmsgZWzFkXR0fGlkxZFzesOhbcOtdMOhc3VuayBzemVyaW50fGlcXC4gc3pcXC4pL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL2llL2ksIC9pc3ovaV0sXG4gIGFiYnJldmlhdGVkOiBbL14oaVxcLj9cXHM/ZVxcLj98Ylxccz9jZSkvaSwgL14oaVxcLj9cXHM/c3pcXC4/fGNcXHM/ZSkvaV0sXG4gIGFueTogWy9lbMWRdHQvaSwgLyhzemVyaW50fGkuIHN6LikvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF1cXC4/L2ksXG4gIGFiYnJldmlhdGVkOiAvXlsxMjM0XT9cXC4/XFxzP25cXC7DqXYvaSxcbiAgd2lkZTogL14oWzEyMzRdfEl8SUl8SUlJfElWKT9cXC4/XFxzP25lZ3llZMOpdi9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMXxJJC9pLCAvMnxJSSQvaSwgLzN8SUlJL2ksIC80fElWL2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hw6Fzb25kXXxzei9pLFxuICBhYmJyZXZpYXRlZDogL14oamFuXFwuP3xmZWJyXFwuP3xtw6FyY1xcLj98w6FwclxcLj98bcOhalxcLj98asO6blxcLj98asO6bFxcLj98YXVnXFwuP3xzemVwdFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG4gIHdpZGU6IC9eKGphbnXDoXJ8ZmVicnXDoXJ8bcOhcmNpdXN8w6FwcmlsaXN8bcOhanVzfGrDum5pdXN8asO6bGl1c3xhdWd1c3p0dXN8c3plcHRlbWJlcnxva3TDs2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYXzDoS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zfHN6L2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm3DoXIvaSwgL17DoXAvaSwgL15tw6FqL2ksIC9easO6bi9pLCAvXmrDumwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihbdmhrcGNdfHN6fGNzfHN6KS9pLFxuICBzaG9ydDogL14oW3Zoa3BdfHN6ZXxjc3xzem8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihbdmhrcF18c3plfGNzfHN6bykvaSxcbiAgd2lkZTogL14odmFzw6FybmFwfGjDqXRmxZF8a2VkZHxzemVyZGF8Y3PDvHTDtnJ0w7ZrfHDDqW50ZWt8c3pvbWJhdCkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnYvaSwgL15oL2ksIC9eay9pLCAvXnN6L2ksIC9eYy9pLCAvXnAvaSwgL15zei9pXSxcbiAgYW55OiBbL152L2ksIC9eaC9pLCAvXmsvaSwgL15zemUvaSwgL15jL2ksIC9ecC9pLCAvXnN6by9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IC9eKChkZXxkdSlcXC4/fMOpambDqWx8ZMOpbHV0w6FufGTDqWx8cmVnZ2VsfGVzdGV8w6lqamVsKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmRlXFwuPy9pLFxuICAgIHBtOiAvXmR1XFwuPy9pLFxuICAgIG1pZG5pZ2h0OiAvXsOpamYvaSxcbiAgICBub29uOiAvXmTDqS9pLFxuICAgIG1vcm5pbmc6IC9yZWcvaSxcbiAgICBhZnRlcm5vb246IC9eZMOpbHVcXC4/L2ksXG4gICAgZXZlbmluZzogL2VzL2ksXG4gICAgbmlnaHQ6IC/DqWpqL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqXG4gKiBAc3VtbWFyeSBIdW5nYXJpYW4gbG9jYWxlLlxuICogQGxhbmd1YWdlIEh1bmdhcmlhblxuICpcbiAqIEBpc28tNjM5LTIgaHVuXG4gKlxuICogQGF1dGhvciBQYXZsbyBTaHBhayBbQHBzaHBha117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3BzaHBha31cbiAqIEBhdXRob3IgRWR1YXJkbyBQYXJkbyBbQGVkdWFyZG9wc2xsXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZWR1YXJkb3BzbGx9XG4gKiBAYXV0aG9yIFpvbHRhbiBTemVwZXNpIFtAdHdvZGN1YmVde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS90d29kY3ViZX1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnaHUnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAna3VyYW5nIGRhcmkgMSBkZXRpaycsXG4gICAgb3RoZXI6ICdrdXJhbmcgZGFyaSB7e2NvdW50fX0gZGV0aWsnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBkZXRpaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGV0aWsnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnc2V0ZW5nYWggbWVuaXQnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAna3VyYW5nIGRhcmkgMSBtZW5pdCcsXG4gICAgb3RoZXI6ICdrdXJhbmcgZGFyaSB7e2NvdW50fX0gbWVuaXQnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtZW5pdCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWVuaXQnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnc2VraXRhciAxIGphbScsXG4gICAgb3RoZXI6ICdzZWtpdGFyIHt7Y291bnR9fSBqYW0nXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgamFtJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBqYW0nXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBoYXJpJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBoYXJpJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ3Nla2l0YXIgMSBtaW5nZ3UnLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gbWluZ2d1J1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIG1pbmdndScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWluZ2d1J1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdzZWtpdGFyIDEgYnVsYW4nLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gYnVsYW4nXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIGJ1bGFuJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBidWxhbidcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdzZWtpdGFyIDEgdGFodW4nLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gdGFodW4nXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgdGFodW4nLFxuICAgIG90aGVyOiAne3tjb3VudH19IHRhaHVuJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnbGViaWggZGFyaSAxIHRhaHVuJyxcbiAgICBvdGhlcjogJ2xlYmloIGRhcmkge3tjb3VudH19IHRhaHVuJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdoYW1waXIgMSB0YWh1bicsXG4gICAgb3RoZXI6ICdoYW1waXIge3tjb3VudH19IHRhaHVuJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2RhbGFtIHdha3R1ICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIHlhbmcgbGFsdSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkIE1NTU0geXl5eScsXG4gIGxvbmc6ICdkIE1NTU0geXl5eScsXG4gIG1lZGl1bTogJ2QgTU1NIHl5eXknLFxuICBzaG9ydDogJ2QvTS95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hILm1tLnNzJyxcbiAgbG9uZzogJ0hILm1tLnNzJyxcbiAgbWVkaXVtOiAnSEgubW0nLFxuICBzaG9ydDogJ0hILm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ3B1a3VsJyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdwdWt1bCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCJlZWVlICdsYWx1IHB1a3VsJyBwXCIsXG4gIHllc3RlcmRheTogXCInS2VtYXJpbiBwdWt1bCcgcFwiLFxuICB0b2RheTogXCInSGFyaSBpbmkgcHVrdWwnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ0Jlc29rIHB1a3VsJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ3B1a3VsJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJzsgLy8gQWxsIGRhdGEgZm9yIGxvY2FsaXphdGlvbiBhcmUgdGFrZW4gZnJvbSB0aGlzIHBhZ2Vcbi8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvaWQuaHRtbFxuXG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnU00nLCAnTSddLFxuICBhYmJyZXZpYXRlZDogWydTTScsICdNJ10sXG4gIHdpZGU6IFsnU2ViZWx1bSBNYXNlaGknLCAnTWFzZWhpJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSzEnLCAnSzInLCAnSzMnLCAnSzQnXSxcbiAgd2lkZTogWydLdWFydGFsIGtlLTEnLCAnS3VhcnRhbCBrZS0yJywgJ0t1YXJ0YWwga2UtMycsICdLdWFydGFsIGtlLTQnXSAvLyBOb3RlOiBpbiBJbmRvbmVzaWFuLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbiAgLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4gIC8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuICAvLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWVpJywgJ0p1bicsICdKdWwnLCAnQWdzJywgJ1NlcCcsICdPa3QnLCAnTm92JywgJ0RlcyddLFxuICB3aWRlOiBbJ0phbnVhcmknLCAnRmVicnVhcmknLCAnTWFyZXQnLCAnQXByaWwnLCAnTWVpJywgJ0p1bmknLCAnSnVsaScsICdBZ3VzdHVzJywgJ1NlcHRlbWJlcicsICdPa3RvYmVyJywgJ05vdmVtYmVyJywgJ0Rlc2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnTScsICdTJywgJ1MnLCAnUicsICdLJywgJ0onLCAnUyddLFxuICBzaG9ydDogWydNaW4nLCAnU2VuJywgJ1NlbCcsICdSYWInLCAnS2FtJywgJ0p1bScsICdTYWInXSxcbiAgYWJicmV2aWF0ZWQ6IFsnTWluJywgJ1NlbicsICdTZWwnLCAnUmFiJywgJ0thbScsICdKdW0nLCAnU2FiJ10sXG4gIHdpZGU6IFsnTWluZ2d1JywgJ1NlbmluJywgJ1NlbGFzYScsICdSYWJ1JywgJ0thbWlzJywgJ0p1bWF0JywgJ1NhYnR1J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3RlbmdhaCBtYWxhbScsXG4gICAgbm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBtb3JuaW5nOiAncGFnaScsXG4gICAgYWZ0ZXJub29uOiAnc2lhbmcnLFxuICAgIGV2ZW5pbmc6ICdzb3JlJyxcbiAgICBuaWdodDogJ21hbGFtJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAndGVuZ2FoIG1hbGFtJyxcbiAgICBub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIG1vcm5pbmc6ICdwYWdpJyxcbiAgICBhZnRlcm5vb246ICdzaWFuZycsXG4gICAgZXZlbmluZzogJ3NvcmUnLFxuICAgIG5pZ2h0OiAnbWFsYW0nXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3RlbmdhaCBtYWxhbScsXG4gICAgbm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBtb3JuaW5nOiAncGFnaScsXG4gICAgYWZ0ZXJub29uOiAnc2lhbmcnLFxuICAgIGV2ZW5pbmc6ICdzb3JlJyxcbiAgICBuaWdodDogJ21hbGFtJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAndGVuZ2FoIG1hbGFtJyxcbiAgICBub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIG1vcm5pbmc6ICdwYWdpJyxcbiAgICBhZnRlcm5vb246ICdzaWFuZycsXG4gICAgZXZlbmluZzogJ3NvcmUnLFxuICAgIG5pZ2h0OiAnbWFsYW0nXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICd0ZW5nYWggbWFsYW0nLFxuICAgIG5vb246ICd0ZW5nYWggaGFyaScsXG4gICAgbW9ybmluZzogJ3BhZ2knLFxuICAgIGFmdGVybm9vbjogJ3NpYW5nJyxcbiAgICBldmVuaW5nOiAnc29yZScsXG4gICAgbmlnaHQ6ICdtYWxhbSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAndGVuZ2FoIG1hbGFtJyxcbiAgICBub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIG1vcm5pbmc6ICdwYWdpJyxcbiAgICBhZnRlcm5vb246ICdzaWFuZycsXG4gICAgZXZlbmluZzogJ3NvcmUnLFxuICAgIG5pZ2h0OiAnbWFsYW0nXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIENhbid0IHVzZSBcInBlcnRhbWFcIiwgXCJrZWR1YVwiIGJlY2F1c2UgY2FuJ3QgYmUgcGFyc2VkXG5cbiAgc3dpdGNoIChudW1iZXIpIHtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICdrZS0nICsgbnVtYmVyO1xuICB9XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9ea2UtKFxcZCspPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oc218bSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHNcXC4/XFxzP21cXC4/fHNcXC4/XFxzP2VcXC4/XFxzP3VcXC4/fG1cXC4/fGVcXC4/XFxzP3VcXC4/KS9pLFxuICB3aWRlOiAvXihzZWJlbHVtIG1hc2VoaXxzZWJlbHVtIGVyYSB1bXVtfG1hc2VoaXxlcmEgdW11bSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXnMvaSwgL14obXxlKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15LLT9cXHNbMTIzNF0vaSxcbiAgd2lkZTogL15LdWFydGFsIGtlLT9cXHM/WzEyMzRdL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtZWl8anVufGp1bHxhZ3R8c2VwfG9rdHxub3Z8ZGVzKS9pLFxuICB3aWRlOiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hcmV0fGFwcmlsfG1laXxqdW5pfGp1bGl8YWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZXNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hL2ksIC9eYXAvaSwgL15tZS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3Nya2ptXS9pLFxuICBzaG9ydDogL14obWlufHNlbnxzZWx8cmFifGthbXxqdW18c2FiKS9pLFxuICBhYmJyZXZpYXRlZDogL14obWlufHNlbnxzZWx8cmFifGthbXxqdW18c2FiKS9pLFxuICB3aWRlOiAvXihtaW5nZ3V8c2VuaW58c2VsYXNhfHJhYnV8a2FtaXN8anVtYXR8c2FidHUpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15tL2ksIC9ecy9pLCAvXnMvaSwgL15yL2ksIC9eay9pLCAvXmovaSwgL15zL2ldLFxuICBhbnk6IFsvXm0vaSwgL15zZW4vaSwgL15zZWwvaSwgL15yL2ksIC9eay9pLCAvXmovaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHx0ZW5nYWggbXx0ZW5nYWggaHwoZGkoXFxzd2FrdHUpPykgKHBhZ2l8c2lhbmd8c29yZXxtYWxhbSkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98dGVuZ2FoIG1hbGFtfHRlbmdhaCBoYXJpfChkaShcXHN3YWt0dSk/KSAocGFnaXxzaWFuZ3xzb3JlfG1hbGFtKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecG0vaSxcbiAgICBtaWRuaWdodDogL150ZW5nYWggbS9pLFxuICAgIG5vb246IC9edGVuZ2FoIGgvaSxcbiAgICBtb3JuaW5nOiAvcGFnaS9pLFxuICAgIGFmdGVybm9vbjogL3NpYW5nL2ksXG4gICAgZXZlbmluZzogL3NvcmUvaSxcbiAgICBuaWdodDogL21hbGFtL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEluZG9uZXNpYW4gbG9jYWxlLlxuICogQGxhbmd1YWdlIEluZG9uZXNpYW5cbiAqIEBpc28tNjM5LTIgaW5kXG4gKiBAYXV0aG9yIFJhaG1hdCBCdWRpaGFyc28gW0ByYnVkaWhhcnNvXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vcmJ1ZGloYXJzb31cbiAqIEBhdXRob3IgQmVuZ2V0IE5hdGEgW0BiZW50aW5hdGFde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW50aW5hdGF9XG4gKiBAYXV0aG9yIEJ1ZGkgSXJhd2FuIFtAZGVlcmF3YW5de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWVyYXdhbn1cbiAqIEBhdXRob3IgVHJ5IEFqaXRpb25vIFtAaW1iYWxsaW5zdF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2ltYmFsbGluc3R9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2lkJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ21lbm8gZGkgdW4gc2Vjb25kbycsXG4gICAgb3RoZXI6ICdtZW5vIGRpIHt7Y291bnR9fSBzZWNvbmRpJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJ3VuIHNlY29uZG8nLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZGknXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnYWxjdW5pIHNlY29uZGknLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbWVubyBkaSB1biBtaW51dG8nLFxuICAgIG90aGVyOiAnbWVubyBkaSB7e2NvdW50fX0gbWludXRpJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJ3VuIG1pbnV0bycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRpJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogXCJjaXJjYSB1bidvcmFcIixcbiAgICBvdGhlcjogJ2NpcmNhIHt7Y291bnR9fSBvcmUnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogXCJ1bidvcmFcIixcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBvcmUnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAndW4gZ2lvcm5vJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBnaW9ybmknXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnY2lyY2EgdW5hIHNldHRpbWFuYScsXG4gICAgb3RoZXI6ICdjaXJjYSB7e2NvdW50fX0gc2V0dGltYW5lJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICd1bmEgc2V0dGltYW5hJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZXR0aW1hbmUnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2NpcmNhIHVuIG1lc2UnLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IG1lc2knXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICd1biBtZXNlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtZXNpJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2NpcmNhIHVuIGFubm8nLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IGFubmknXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJ3VuIGFubm8nLFxuICAgIG90aGVyOiAne3tjb3VudH19IGFubmknXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdwacO5IGRpIHVuIGFubm8nLFxuICAgIG90aGVyOiAncGnDuSBkaSB7e2NvdW50fX0gYW5uaSdcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAncXVhc2kgdW4gYW5ubycsXG4gICAgb3RoZXI6ICdxdWFzaSB7e2NvdW50fX0gYW5uaSdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICd0cmEgJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgZmEnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSBkIE1NTU0geScsXG4gIGxvbmc6ICdkIE1NTU0geScsXG4gIG1lZGl1bTogJ2QgTU1NIHknLFxuICBzaG9ydDogJ2RkL01NL3knXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIGxvbmc6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19IHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJpbXBvcnQgaXNTYW1lVVRDV2VlayBmcm9tICcuLi8uLi8uLi8uLi9fbGliL2lzU2FtZVVUQ1dlZWsvaW5kZXguanMnO1xudmFyIHdlZWtkYXlzID0gWydkb21lbmljYScsICdsdW5lZMOsJywgJ21hcnRlZMOsJywgJ21lcmNvbGVkw6wnLCAnZ2lvdmVkw6wnLCAndmVuZXJkw6wnLCAnc2FiYXRvJ107XG5cbmZ1bmN0aW9uIGxhc3RXZWVrKGRheSkge1xuICBzd2l0Y2ggKGRheSkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBcIidkb21lbmljYSBzY29yc2EgYWxsZScgcFwiO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIidcIiArIHdlZWtkYXlzW2RheV0gKyBcIiBzY29yc28gYWxsZScgcFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRoaXNXZWVrKGRheSkge1xuICByZXR1cm4gXCInXCIgKyB3ZWVrZGF5c1tkYXldICsgXCIgYWxsZScgcFwiO1xufVxuXG5mdW5jdGlvbiBuZXh0V2VlayhkYXkpIHtcbiAgc3dpdGNoIChkYXkpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gXCInZG9tZW5pY2EgcHJvc3NpbWEgYWxsZScgcFwiO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIidcIiArIHdlZWtkYXlzW2RheV0gKyBcIiBwcm9zc2ltbyBhbGxlJyBwXCI7XG4gIH1cbn1cblxudmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogZnVuY3Rpb24gKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBpZiAoaXNTYW1lVVRDV2VlayhkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykpIHtcbiAgICAgIHJldHVybiB0aGlzV2VlayhkYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGFzdFdlZWsoZGF5KTtcbiAgICB9XG4gIH0sXG4gIHllc3RlcmRheTogXCInaWVyaSBhbGxlJyBwXCIsXG4gIHRvZGF5OiBcIidvZ2dpIGFsbGUnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ2RvbWFuaSBhbGxlJyBwXCIsXG4gIG5leHRXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXNXZWVrKGRheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0V2VlayhkYXkpO1xuICAgIH1cbiAgfSxcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICB2YXIgZm9ybWF0ID0gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2FDJywgJ2RDJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2EuQy4nLCAnZC5DLiddLFxuICB3aWRlOiBbJ2F2YW50aSBDcmlzdG8nLCAnZG9wbyBDcmlzdG8nXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydUMScsICdUMicsICdUMycsICdUNCddLFxuICB3aWRlOiBbJzHCuiB0cmltZXN0cmUnLCAnMsK6IHRyaW1lc3RyZScsICczwrogdHJpbWVzdHJlJywgJzTCuiB0cmltZXN0cmUnXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0cnLCAnRicsICdNJywgJ0EnLCAnTScsICdHJywgJ0wnLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2dlbicsICdmZWInLCAnbWFyJywgJ2FwcicsICdtYWcnLCAnZ2l1JywgJ2x1ZycsICdhZ28nLCAnc2V0JywgJ290dCcsICdub3YnLCAnZGljJ10sXG4gIHdpZGU6IFsnZ2VubmFpbycsICdmZWJicmFpbycsICdtYXJ6bycsICdhcHJpbGUnLCAnbWFnZ2lvJywgJ2dpdWdubycsICdsdWdsaW8nLCAnYWdvc3RvJywgJ3NldHRlbWJyZScsICdvdHRvYnJlJywgJ25vdmVtYnJlJywgJ2RpY2VtYnJlJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnRCcsICdMJywgJ00nLCAnTScsICdHJywgJ1YnLCAnUyddLFxuICBzaG9ydDogWydkb20nLCAnbHVuJywgJ21hcicsICdtZXInLCAnZ2lvJywgJ3ZlbicsICdzYWInXSxcbiAgYWJicmV2aWF0ZWQ6IFsnZG9tJywgJ2x1bicsICdtYXInLCAnbWVyJywgJ2dpbycsICd2ZW4nLCAnc2FiJ10sXG4gIHdpZGU6IFsnZG9tZW5pY2EnLCAnbHVuZWTDrCcsICdtYXJ0ZWTDrCcsICdtZXJjb2xlZMOsJywgJ2dpb3ZlZMOsJywgJ3ZlbmVyZMOsJywgJ3NhYmF0byddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdtLicsXG4gICAgcG06ICdwLicsXG4gICAgbWlkbmlnaHQ6ICdtZXp6YW5vdHRlJyxcbiAgICBub29uOiAnbWV6em9naW9ybm8nLFxuICAgIG1vcm5pbmc6ICdtYXR0aW5hJyxcbiAgICBhZnRlcm5vb246ICdwb21lcmlnZ2lvJyxcbiAgICBldmVuaW5nOiAnc2VyYScsXG4gICAgbmlnaHQ6ICdub3R0ZSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21lenphbm90dGUnLFxuICAgIG5vb246ICdtZXp6b2dpb3JubycsXG4gICAgbW9ybmluZzogJ21hdHRpbmEnLFxuICAgIGFmdGVybm9vbjogJ3BvbWVyaWdnaW8nLFxuICAgIGV2ZW5pbmc6ICdzZXJhJyxcbiAgICBuaWdodDogJ25vdHRlJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtZXp6YW5vdHRlJyxcbiAgICBub29uOiAnbWV6em9naW9ybm8nLFxuICAgIG1vcm5pbmc6ICdtYXR0aW5hJyxcbiAgICBhZnRlcm5vb246ICdwb21lcmlnZ2lvJyxcbiAgICBldmVuaW5nOiAnc2VyYScsXG4gICAgbmlnaHQ6ICdub3R0ZSdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ20uJyxcbiAgICBwbTogJ3AuJyxcbiAgICBtaWRuaWdodDogJ21lenphbm90dGUnLFxuICAgIG5vb246ICdtZXp6b2dpb3JubycsXG4gICAgbW9ybmluZzogJ2RpIG1hdHRpbmEnLFxuICAgIGFmdGVybm9vbjogJ2RlbCBwb21lcmlnZ2lvJyxcbiAgICBldmVuaW5nOiAnZGkgc2VyYScsXG4gICAgbmlnaHQ6ICdkaSBub3R0ZSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21lenphbm90dGUnLFxuICAgIG5vb246ICdtZXp6b2dpb3JubycsXG4gICAgbW9ybmluZzogJ2RpIG1hdHRpbmEnLFxuICAgIGFmdGVybm9vbjogJ2RlbCBwb21lcmlnZ2lvJyxcbiAgICBldmVuaW5nOiAnZGkgc2VyYScsXG4gICAgbmlnaHQ6ICdkaSBub3R0ZSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWV6emFub3R0ZScsXG4gICAgbm9vbjogJ21lenpvZ2lvcm5vJyxcbiAgICBtb3JuaW5nOiAnZGkgbWF0dGluYScsXG4gICAgYWZ0ZXJub29uOiAnZGVsIHBvbWVyaWdnaW8nLFxuICAgIGV2ZW5pbmc6ICdkaSBzZXJhJyxcbiAgICBuaWdodDogJ2RpIG5vdHRlJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJ8K6Jztcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykowropPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYUN8ZEMpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihhXFwuP1xccz9DXFwuP3xhXFwuP1xccz9lXFwuP1xccz92XFwuP3xkXFwuP1xccz9DXFwuP3xlXFwuP1xccz92XFwuPykvaSxcbiAgd2lkZTogL14oYXZhbnRpIENyaXN0b3xhdmFudGkgRXJhIFZvbGdhcmV8ZG9wbyBDcmlzdG98RXJhIFZvbGdhcmUpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15hL2ksIC9eKGR8ZSkvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9edFsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSjCuik/IHRyaW1lc3RyZS9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bZ2ZtYWxzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oZ2VufGZlYnxtYXJ8YXByfG1hZ3xnaXV8bHVnfGFnb3xzZXR8b3R0fG5vdnxkaWMpL2ksXG4gIHdpZGU6IC9eKGdlbm5haW98ZmViYnJhaW98bWFyem98YXByaWxlfG1hZ2dpb3xnaXVnbm98bHVnbGlvfGFnb3N0b3xzZXR0ZW1icmV8b3R0b2JyZXxub3ZlbWJyZXxkaWNlbWJyZSkvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eZy9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15nL2ksIC9ebC9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmdlL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWFnL2ksIC9eZ2kvaSwgL15sL2ksIC9eYWcvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bZGxtZ3ZzXS9pLFxuICBzaG9ydDogL14oZG98bHV8bWF8bWV8Z2l8dmV8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihkb218bHVufG1hcnxtZXJ8Z2lvfHZlbnxzYWIpL2ksXG4gIHdpZGU6IC9eKGRvbWVuaWNhfGx1bmVkW2l8w6xdfG1hcnRlZFtpfMOsXXxtZXJjb2xlZFtpfMOsXXxnaW92ZWRbaXzDrF18dmVuZXJkW2l8w6xdfHNhYmF0bykvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmQvaSwgL15sL2ksIC9ebS9pLCAvXm0vaSwgL15nL2ksIC9edi9pLCAvXnMvaV0sXG4gIGFueTogWy9eZC9pLCAvXmwvaSwgL15tYS9pLCAvXm1lL2ksIC9eZy9pLCAvXnYvaSwgL15zL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxtXFwufHB8bWV6emFub3R0ZXxtZXp6b2dpb3Jub3woZGl8ZGVsKSAobWF0dGluYXxwb21lcmlnZ2lvfHNlcmF8bm90dGUpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1lenphbm90dGV8bWV6em9naW9ybm98KGRpfGRlbCkgKG1hdHRpbmF8cG9tZXJpZ2dpb3xzZXJhfG5vdHRlKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1lenphL2ksXG4gICAgbm9vbjogL15tZXp6by9pLFxuICAgIG1vcm5pbmc6IC9tYXR0aW5hL2ksXG4gICAgYWZ0ZXJub29uOiAvcG9tZXJpZ2dpby9pLFxuICAgIGV2ZW5pbmc6IC9zZXJhL2ksXG4gICAgbmlnaHQ6IC9ub3R0ZS9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBJdGFsaWFuIGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBJdGFsaWFuXG4gKiBAaXNvLTYzOS0yIGl0YVxuICogQGF1dGhvciBBbGJlcnRvIFJlc3RpZm8gW0BhbGJlcnRvcmVzdGlmb117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FsYmVydG9yZXN0aWZvfVxuICogQGF1dGhvciBHaW92YW5uaSBQb2xpbWVuaSBbQGdpb2ZpbG9de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9naW9maWxvfVxuICogQGF1dGhvciBWaW5jZW56byBDYXJyZXNlIFtAdmluLWNhcl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Zpbi1jYXJ9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2l0JyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJzHnp5LmnKrmuoAnLFxuICAgIG90aGVyOiAne3tjb3VudH1956eS5pyq5rqAJyxcbiAgICBvbmVXaXRoU3VmZml4OiAn57SEMeenkicsXG4gICAgb3RoZXJXaXRoU3VmZml4OiAn57SEe3tjb3VudH1956eSJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzHnp5InLFxuICAgIG90aGVyOiAne3tjb3VudH1956eSJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJzMw56eSJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJzHliIbmnKrmuoAnLFxuICAgIG90aGVyOiAne3tjb3VudH195YiG5pyq5rqAJyxcbiAgICBvbmVXaXRoU3VmZml4OiAn57SEMeWIhicsXG4gICAgb3RoZXJXaXRoU3VmZml4OiAn57SEe3tjb3VudH195YiGJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzHliIYnLFxuICAgIG90aGVyOiAne3tjb3VudH195YiGJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ+e0hDHmmYLplpMnLFxuICAgIG90aGVyOiAn57SEe3tjb3VudH195pmC6ZaTJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcx5pmC6ZaTJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feaZgumWkydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcx5pelJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feaXpSdcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICfntIQx6YCx6ZaTJyxcbiAgICBvdGhlcjogJ+e0hHt7Y291bnR9femAsemWkydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMemAsemWkycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3pgLHplpMnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ+e0hDHjgYvmnIgnLFxuICAgIG90aGVyOiAn57SEe3tjb3VudH1944GL5pyIJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMeOBi+aciCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3jgYvmnIgnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAn57SEMeW5tCcsXG4gICAgb3RoZXI6ICfntIR7e2NvdW50fX3lubQnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzHlubQnLFxuICAgIG90aGVyOiAne3tjb3VudH195bm0J1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnMeW5tOS7peS4iicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3lubTku6XkuIonXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJzHlubTov5HjgY8nLFxuICAgIG90aGVyOiAne3tjb3VudH195bm06L+R44GPJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIGlmIChvcHRpb25zLmFkZFN1ZmZpeCAmJiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lV2l0aFN1ZmZpeCkge1xuICAgICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZVdpdGhTdWZmaXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChvcHRpb25zLmFkZFN1ZmZpeCAmJiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXJXaXRoU3VmZml4KSB7XG4gICAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXJXaXRoU3VmZml4LnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICflvownO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJ+WJjSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd55bm0TeaciGTml6VFRUVFJyxcbiAgbG9uZzogJ3nlubRN5pyIZOaXpScsXG4gIG1lZGl1bTogJ3kvTU0vZGQnLFxuICBzaG9ydDogJ3kvTU0vZGQnXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSOaZgm1t5YiGc3Pnp5Igenp6eicsXG4gIGxvbmc6ICdIOm1tOnNzIHonLFxuICBtZWRpdW06ICdIOm1tOnNzJyxcbiAgc2hvcnQ6ICdIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIGxvbmc6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19IHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiAn5YWI6YCx44GuZWVlZeOBrnAnLFxuICB5ZXN0ZXJkYXk6ICfmmKjml6Xjga5wJyxcbiAgdG9kYXk6ICfku4rml6Xjga5wJyxcbiAgdG9tb3Jyb3c6ICfmmI7ml6Xjga5wJyxcbiAgbmV4dFdlZWs6ICfnv4zpgLHjga5lZWVl44GucCcsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCQycsICdBQyddLFxuICBhYmJyZXZpYXRlZDogWyfntIDlhYPliY0nLCAn6KW/5pqmJ10sXG4gIHdpZGU6IFsn57SA5YWD5YmNJywgJ+ilv+aapiddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsn56ysMeWbm+WNiuacnycsICfnrKwy5Zub5Y2K5pyfJywgJ+esrDPlm5vljYrmnJ8nLCAn56ysNOWbm+WNiuacnyddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnMTAnLCAnMTEnLCAnMTInXSxcbiAgYWJicmV2aWF0ZWQ6IFsnMeaciCcsICcy5pyIJywgJzPmnIgnLCAnNOaciCcsICc15pyIJywgJzbmnIgnLCAnN+aciCcsICc45pyIJywgJznmnIgnLCAnMTDmnIgnLCAnMTHmnIgnLCAnMTLmnIgnXSxcbiAgd2lkZTogWycx5pyIJywgJzLmnIgnLCAnM+aciCcsICc05pyIJywgJzXmnIgnLCAnNuaciCcsICc35pyIJywgJzjmnIgnLCAnOeaciCcsICcxMOaciCcsICcxMeaciCcsICcxMuaciCddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ+aXpScsICfmnIgnLCAn54GrJywgJ+awtCcsICfmnKgnLCAn6YeRJywgJ+WcnyddLFxuICBzaG9ydDogWyfml6UnLCAn5pyIJywgJ+eBqycsICfmsLQnLCAn5pyoJywgJ+mHkScsICflnJ8nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn5pelJywgJ+aciCcsICfngasnLCAn5rC0JywgJ+acqCcsICfph5EnLCAn5ZyfJ10sXG4gIHdpZGU6IFsn5pel5puc5pelJywgJ+aciOabnOaXpScsICfngavmm5zml6UnLCAn5rC05puc5pelJywgJ+acqOabnOaXpScsICfph5Hmm5zml6UnLCAn5Zyf5puc5pelJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ+WNiOWJjScsXG4gICAgcG06ICfljYjlvownLFxuICAgIG1pZG5pZ2h0OiAn5rex5aScJyxcbiAgICBub29uOiAn5q2j5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pydJyxcbiAgICBhZnRlcm5vb246ICfljYjlvownLFxuICAgIGV2ZW5pbmc6ICflpJwnLFxuICAgIG5pZ2h0OiAn5rex5aScJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn5Y2I5YmNJyxcbiAgICBwbTogJ+WNiOW+jCcsXG4gICAgbWlkbmlnaHQ6ICfmt7HlpJwnLFxuICAgIG5vb246ICfmraPljYgnLFxuICAgIG1vcm5pbmc6ICfmnJ0nLFxuICAgIGFmdGVybm9vbjogJ+WNiOW+jCcsXG4gICAgZXZlbmluZzogJ+WknCcsXG4gICAgbmlnaHQ6ICfmt7HlpJwnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ+WNiOWJjScsXG4gICAgcG06ICfljYjlvownLFxuICAgIG1pZG5pZ2h0OiAn5rex5aScJyxcbiAgICBub29uOiAn5q2j5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pydJyxcbiAgICBhZnRlcm5vb246ICfljYjlvownLFxuICAgIGV2ZW5pbmc6ICflpJwnLFxuICAgIG5pZ2h0OiAn5rex5aScJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn5Y2I5YmNJyxcbiAgICBwbTogJ+WNiOW+jCcsXG4gICAgbWlkbmlnaHQ6ICfmt7HlpJwnLFxuICAgIG5vb246ICfmraPljYgnLFxuICAgIG1vcm5pbmc6ICfmnJ0nLFxuICAgIGFmdGVybm9vbjogJ+WNiOW+jCcsXG4gICAgZXZlbmluZzogJ+WknCcsXG4gICAgbmlnaHQ6ICfmt7HlpJwnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfljYjliY0nLFxuICAgIHBtOiAn5Y2I5b6MJyxcbiAgICBtaWRuaWdodDogJ+a3seWknCcsXG4gICAgbm9vbjogJ+ato+WNiCcsXG4gICAgbW9ybmluZzogJ+acnScsXG4gICAgYWZ0ZXJub29uOiAn5Y2I5b6MJyxcbiAgICBldmVuaW5nOiAn5aScJyxcbiAgICBuaWdodDogJ+a3seWknCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn5Y2I5YmNJyxcbiAgICBwbTogJ+WNiOW+jCcsXG4gICAgbWlkbmlnaHQ6ICfmt7HlpJwnLFxuICAgIG5vb246ICfmraPljYgnLFxuICAgIG1vcm5pbmc6ICfmnJ0nLFxuICAgIGFmdGVybm9vbjogJ+WNiOW+jCcsXG4gICAgZXZlbmluZzogJ+WknCcsXG4gICAgbmlnaHQ6ICfmt7HlpJwnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpO1xuXG4gIGlmICh1bml0ID09PSAnZGF0ZScpIHtcbiAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXuesrD9cXGQrKOaXpSk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihCXFwuP0NcXC4/fEFcXC4/RFxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXijntIDlhYNb5YmN5b6MXXzopb/mmqYpL2ksXG4gIHdpZGU6IC9eKOe0gOWFg1vliY3lvoxdfOilv+aapikvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXkIvaSwgL15BL2ldLFxuICBhbnk6IFsvXijntIDlhYPliY0pL2ksIC9eKOilv+aapnzntIDlhYPlvowpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXlFbMTIzNF0vaSxcbiAgd2lkZTogL17nrKxbMTIzNOS4gOS6jOS4ieWbm++8ke+8ku+8k++8lF3lm5vljYrmnJ8vaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLygxfOS4gHzvvJEpL2ksIC8oMnzkuox877ySKS9pLCAvKDN85LiJfO+8kykvaSwgLyg0fOWbm3zvvJQpL2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihbMTIzNDU2Nzg5XXwxWzAxMl0pLyxcbiAgYWJicmV2aWF0ZWQ6IC9eKFsxMjM0NTY3ODldfDFbMDEyXSnmnIgvaSxcbiAgd2lkZTogL14oWzEyMzQ1Njc4OV18MVswMTJdKeaciC9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgYW55OiBbL14xLywgL14yLywgL14zLywgL140LywgL141LywgL142LywgL143LywgL144LywgL145LywgL14xMC8sIC9eMTEvLCAvXjEyL11cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvml6XmnIjngavmsLTmnKjph5HlnJ9dLyxcbiAgc2hvcnQ6IC9eW+aXpeaciOeBq+awtOacqOmHkeWcn10vLFxuICBhYmJyZXZpYXRlZDogL15b5pel5pyI54Gr5rC05pyo6YeR5ZyfXS8sXG4gIHdpZGU6IC9eW+aXpeaciOeBq+awtOacqOmHkeWcn13mm5zml6UvXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIGFueTogWy9e5pelLywgL17mnIgvLCAvXueBqy8sIC9e5rC0LywgL17mnKgvLCAvXumHkS8sIC9e5ZyfL11cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiAvXihBTXxQTXzljYjliY185Y2I5b6MfOato+WNiHzmt7HlpJx855yf5aSc5LitfOWknHzmnJ0pL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eKEF85Y2I5YmNKS9pLFxuICAgIHBtOiAvXihQfOWNiOW+jCkvaSxcbiAgICBtaWRuaWdodDogL17mt7HlpJx855yf5aSc5LitL2ksXG4gICAgbm9vbjogL17mraPljYgvaSxcbiAgICBtb3JuaW5nOiAvXuacnS9pLFxuICAgIGFmdGVybm9vbjogL17ljYjlvowvaSxcbiAgICBldmVuaW5nOiAvXuWknC9pLFxuICAgIG5pZ2h0OiAvXua3seWknC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBKYXBhbmVzZSBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgSmFwYW5lc2VcbiAqIEBpc28tNjM5LTIganBuXG4gKiBAYXV0aG9yIFRob21hcyBFaWxtc3RlaW5lciBbQERlTXV1XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vRGVNdXV9XG4gKiBAYXV0aG9yIFlhbWFnaXNoaSBLYXp1dG9zaGkgW0B5a3p0c117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3lrenRzfVxuICogQGF1dGhvciBMdWNhIEJhbiBbQG1lc3F1ZWViXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbWVzcXVlZWJ9XG4gKiBAYXV0aG9yIFRlcnJlbmNlIExhbSBbQHNreXVwbGFtXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2t5dXBsYW19XG4gKiBAYXV0aG9yIFRhaWtpIElLZWRhIFtAc285OXlub29kbGVzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc285OXlub29kbGVzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdqYScsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICcx7LSIIOuvuOunjCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3stIgg66+466eMJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzHstIgnLFxuICAgIG90aGVyOiAne3tjb3VudH197LSIJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJzMw7LSIJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJzHrtoQg66+466eMJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feu2hCDrr7jrp4wnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMeu2hCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3rtoQnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAn7JW9IDHsi5zqsIQnLFxuICAgIG90aGVyOiAn7JW9IHt7Y291bnR9feyLnOqwhCdcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMeyLnOqwhCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3si5zqsIQnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMeydvCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3snbwnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAn7JW9IDHso7wnLFxuICAgIG90aGVyOiAn7JW9IHt7Y291bnR9feyjvCdcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMeyjvCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX3so7wnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ+yVvSAx6rCc7JuUJyxcbiAgICBvdGhlcjogJ+yVvSB7e2NvdW50fX3qsJzsm5QnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcx6rCc7JuUJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feqwnOyblCdcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICfslb0gMeuFhCcsXG4gICAgb3RoZXI6ICfslb0ge3tjb3VudH1964WEJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcx64WEJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feuFhCdcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJzHrhYQg7J207IOBJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9feuFhCDsnbTsg4EnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ+qxsOydmCAx64WEJyxcbiAgICBvdGhlcjogJ+qxsOydmCB7e2NvdW50fX3rhYQnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIO2bhCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIOyghCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd564WEIE3sm5QgZOydvCBFRUVFJyxcbiAgbG9uZzogJ3nrhYQgTeyblCBk7J28JyxcbiAgbWVkaXVtOiAneS5NTS5kZCcsXG4gIHNob3J0OiAneS5NTS5kZCdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdhIEjsi5wgbW3rtoQgc3PstIggenp6eicsXG4gIGxvbmc6ICdhIEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBsb25nOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCIn7KeA64KcJyBlZWVlIHBcIixcbiAgeWVzdGVyZGF5OiBcIifslrTsoJwnIHBcIixcbiAgdG9kYXk6IFwiJ+yYpOuKmCcgcFwiLFxuICB0b21vcnJvdzogXCIn64K07J28JyBwXCIsXG4gIG5leHRXZWVrOiBcIifri6TsnYwnIGVlZWUgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQkMnLCAnQUQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWyfquLDsm5DsoIQnLCAn7ISc6riwJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycx67aE6riwJywgJzLrtoTquLAnLCAnM+u2hOq4sCcsICc067aE6riwJ11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICcxMCcsICcxMScsICcxMiddLFxuICBhYmJyZXZpYXRlZDogWycx7JuUJywgJzLsm5QnLCAnM+yblCcsICc07JuUJywgJzXsm5QnLCAnNuyblCcsICc37JuUJywgJzjsm5QnLCAnOeyblCcsICcxMOyblCcsICcxMeyblCcsICcxMuyblCddLFxuICB3aWRlOiBbJzHsm5QnLCAnMuyblCcsICcz7JuUJywgJzTsm5QnLCAnNeyblCcsICc27JuUJywgJzfsm5QnLCAnOOyblCcsICc57JuUJywgJzEw7JuUJywgJzEx7JuUJywgJzEy7JuUJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsn7J28JywgJ+yblCcsICftmZQnLCAn7IiYJywgJ+uqqScsICfquIgnLCAn7YagJ10sXG4gIHNob3J0OiBbJ+ydvCcsICfsm5QnLCAn7ZmUJywgJ+yImCcsICfrqqknLCAn6riIJywgJ+2GoCddLFxuICBhYmJyZXZpYXRlZDogWyfsnbwnLCAn7JuUJywgJ+2ZlCcsICfsiJgnLCAn66qpJywgJ+q4iCcsICfthqAnXSxcbiAgd2lkZTogWyfsnbzsmpTsnbwnLCAn7JuU7JqU7J28JywgJ+2ZlOyalOydvCcsICfsiJjsmpTsnbwnLCAn66qp7JqU7J28JywgJ+q4iOyalOydvCcsICfthqDsmpTsnbwnXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn7Jik7KCEJyxcbiAgICBwbTogJ+yYpO2bhCcsXG4gICAgbWlkbmlnaHQ6ICfsnpDsoJUnLFxuICAgIG5vb246ICfsoJXsmKQnLFxuICAgIG1vcm5pbmc6ICfslYTsuagnLFxuICAgIGFmdGVybm9vbjogJ+yYpO2bhCcsXG4gICAgZXZlbmluZzogJ+yggOuFgScsXG4gICAgbmlnaHQ6ICfrsKQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfsmKTsoIQnLFxuICAgIHBtOiAn7Jik7ZuEJyxcbiAgICBtaWRuaWdodDogJ+yekOyglScsXG4gICAgbm9vbjogJ+ygleyYpCcsXG4gICAgbW9ybmluZzogJ+yVhOy5qCcsXG4gICAgYWZ0ZXJub29uOiAn7Jik7ZuEJyxcbiAgICBldmVuaW5nOiAn7KCA64WBJyxcbiAgICBuaWdodDogJ+uwpCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn7Jik7KCEJyxcbiAgICBwbTogJ+yYpO2bhCcsXG4gICAgbWlkbmlnaHQ6ICfsnpDsoJUnLFxuICAgIG5vb246ICfsoJXsmKQnLFxuICAgIG1vcm5pbmc6ICfslYTsuagnLFxuICAgIGFmdGVybm9vbjogJ+yYpO2bhCcsXG4gICAgZXZlbmluZzogJ+yggOuFgScsXG4gICAgbmlnaHQ6ICfrsKQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICfsmKTsoIQnLFxuICAgIHBtOiAn7Jik7ZuEJyxcbiAgICBtaWRuaWdodDogJ+yekOyglScsXG4gICAgbm9vbjogJ+ygleyYpCcsXG4gICAgbW9ybmluZzogJ+yVhOy5qCcsXG4gICAgYWZ0ZXJub29uOiAn7Jik7ZuEJyxcbiAgICBldmVuaW5nOiAn7KCA64WBJyxcbiAgICBuaWdodDogJ+uwpCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ+yYpOyghCcsXG4gICAgcG06ICfsmKTtm4QnLFxuICAgIG1pZG5pZ2h0OiAn7J6Q7KCVJyxcbiAgICBub29uOiAn7KCV7JikJyxcbiAgICBtb3JuaW5nOiAn7JWE7LmoJyxcbiAgICBhZnRlcm5vb246ICfsmKTtm4QnLFxuICAgIGV2ZW5pbmc6ICfsoIDrhYEnLFxuICAgIG5pZ2h0OiAn67CkJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICfsmKTsoIQnLFxuICAgIHBtOiAn7Jik7ZuEJyxcbiAgICBtaWRuaWdodDogJ+yekOyglScsXG4gICAgbm9vbjogJ+ygleyYpCcsXG4gICAgbW9ybmluZzogJ+yVhOy5qCcsXG4gICAgYWZ0ZXJub29uOiAn7Jik7ZuEJyxcbiAgICBldmVuaW5nOiAn7KCA64WBJyxcbiAgICBuaWdodDogJ+uwpCdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KTtcblxuICBzd2l0Y2ggKHVuaXQpIHtcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICByZXR1cm4gbnVtYmVyO1xuXG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gbnVtYmVyICsgJ+ydvCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bWJlciArICfrsojsp7gnO1xuICB9XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKOydvHzrsojsp7gpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14o6riw7JuQ7KCEfOyEnOq4sCkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXihiY3zquLDsm5DsoIQpL2ksIC9eKGFkfOyEnOq4sCkvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XeyCrD/rtoTquLAvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKDFbMDEyXXxbMTIzNDU2Nzg5XSkvLFxuICBhYmJyZXZpYXRlZDogL14oMVswMTJdfFsxMjM0NTY3ODldKeyblC9pLFxuICB3aWRlOiAvXigxWzAxMl18WzEyMzQ1Njc4OV0p7JuUL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBhbnk6IFsvXjHsm5Q/JC8sIC9eMi8sIC9eMy8sIC9eNC8sIC9eNS8sIC9eNi8sIC9eNy8sIC9eOC8sIC9eOS8sIC9eMTAvLCAvXjExLywgL14xMi9dXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b7J287JuU7ZmU7IiY66qp6riI7YagXS8sXG4gIHNob3J0OiAvXlvsnbzsm5TtmZTsiJjrqqnquIjthqBdLyxcbiAgYWJicmV2aWF0ZWQ6IC9eW+ydvOyblO2ZlOyImOuqqeq4iO2GoF0vLFxuICB3aWRlOiAvXlvsnbzsm5TtmZTsiJjrqqnquIjthqBd7JqU7J28L1xufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXuydvC8sIC9e7JuULywgL17tmZQvLCAvXuyImC8sIC9e66qpLywgL17quIgvLCAvXu2GoC9dXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueTogL14oYW18cG187Jik7KCEfOyYpO2bhHzsnpDsoJV87KCV7JikfOyVhOy5qHzsoIDrhYF867CkKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXihhbXzsmKTsoIQpL2ksXG4gICAgcG06IC9eKHBtfOyYpO2bhCkvaSxcbiAgICBtaWRuaWdodDogL17snpDsoJUvaSxcbiAgICBub29uOiAvXuygleyYpC9pLFxuICAgIG1vcm5pbmc6IC9e7JWE7LmoL2ksXG4gICAgYWZ0ZXJub29uOiAvXuyYpO2bhC9pLFxuICAgIGV2ZW5pbmc6IC9e7KCA64WBL2ksXG4gICAgbmlnaHQ6IC9e67CkL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEtvcmVhbiBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgS29yZWFuXG4gKiBAaXNvLTYzOS0yIGtvclxuICogQGF1dGhvciBIb25nIENodWxqdSBbQGFuZ2Rldl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FuZ2Rldn1cbiAqIEBhdXRob3IgTGVlIFNlb3lvZW4gW0BpYW1zc2VuXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaWFtc3Nlbn1cbiAqIEBhdXRob3IgVGFpa2kgSUtlZGEgW0Bzbzk5eW5vb2RsZXNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zbzk5eW5vb2RsZXN9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2tvJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2t1cmFuZyBkYXJpIDEgc2FhdCcsXG4gICAgb3RoZXI6ICdrdXJhbmcgZGFyaSB7e2NvdW50fX0gc2FhdCdcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNhYXQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNhYXQnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnc2V0ZW5nYWggbWluaXQnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAna3VyYW5nIGRhcmkgMSBtaW5pdCcsXG4gICAgb3RoZXI6ICdrdXJhbmcgZGFyaSB7e2NvdW50fX0gbWluaXQnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW5pdCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWluaXQnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnc2VraXRhciAxIGphbScsXG4gICAgb3RoZXI6ICdzZWtpdGFyIHt7Y291bnR9fSBqYW0nXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgamFtJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBqYW0nXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBoYXJpJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBoYXJpJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ3Nla2l0YXIgMSBtaW5nZ3UnLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gbWluZ2d1J1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIG1pbmdndScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWluZ2d1J1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdzZWtpdGFyIDEgYnVsYW4nLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gYnVsYW4nXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIGJ1bGFuJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBidWxhbidcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdzZWtpdGFyIDEgdGFodW4nLFxuICAgIG90aGVyOiAnc2VraXRhciB7e2NvdW50fX0gdGFodW4nXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgdGFodW4nLFxuICAgIG90aGVyOiAne3tjb3VudH19IHRhaHVuJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnbGViaWggZGFyaSAxIHRhaHVuJyxcbiAgICBvdGhlcjogJ2xlYmloIGRhcmkge3tjb3VudH19IHRhaHVuJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdoYW1waXIgMSB0YWh1bicsXG4gICAgb3RoZXI6ICdoYW1waXIge3tjb3VudH19IHRhaHVuJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2RhbGFtIG1hc2EgJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgeWFuZyBsYWx1JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIGQgTU1NTSB5eXl5JyxcbiAgbG9uZzogJ2QgTU1NTSB5eXl5JyxcbiAgbWVkaXVtOiAnZCBNTU0geXl5eScsXG4gIHNob3J0OiAnZC9NL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEgubW0uc3MnLFxuICBsb25nOiAnSEgubW0uc3MnLFxuICBtZWRpdW06ICdISC5tbScsXG4gIHNob3J0OiAnSEgubW0nXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAncHVrdWwnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ3B1a3VsJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcImVlZWUgJ2xlcGFzIHBhZGEgamFtJyBwXCIsXG4gIHllc3RlcmRheTogXCInU2VtYWxhbSBwYWRhIGphbScgcFwiLFxuICB0b2RheTogXCInSGFyaSBpbmkgcGFkYSBqYW0nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ0Vzb2sgcGFkYSBqYW0nIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAncGFkYSBqYW0nIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnOyAvLyBNb3N0IGRhdGEgZm9yIGxvY2FsaXphdGlvbiBhcmUgdGFrZW4gZnJvbSB0aGlzIHBhZ2Vcbi8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvbXMuaHRtbFxuXG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnU00nLCAnTSddLFxuICBhYmJyZXZpYXRlZDogWydTTScsICdNJ10sXG4gIHdpZGU6IFsnU2ViZWx1bSBNYXNpaGknLCAnTWFzaWhpJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUzEnLCAnUzInLCAnUzMnLCAnUzQnXSxcbiAgd2lkZTogWydTdWt1IHBlcnRhbWEnLCAnU3VrdSBrZWR1YScsICdTdWt1IGtldGlnYScsICdTdWt1IGtlZW1wYXQnXSAvLyBOb3RlOiBpbiBNYWxheSwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4gIC8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuICAvLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbiAgLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdPJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYWMnLCAnQXByJywgJ01laScsICdKdW4nLCAnSnVsJywgJ09nbycsICdTZXAnLCAnT2t0JywgJ05vdicsICdEaXMnXSxcbiAgd2lkZTogWydKYW51YXJpJywgJ0ZlYnJ1YXJpJywgJ01hYycsICdBcHJpbCcsICdNZWknLCAnSnVuJywgJ0p1bGFpJywgJ09nb3MnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGlzZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydBJywgJ0knLCAnUycsICdSJywgJ0snLCAnSicsICdTJ10sXG4gIHNob3J0OiBbJ0FoZCcsICdJc24nLCAnU2VsJywgJ1JhYicsICdLaGEnLCAnSnVtJywgJ1NhYiddLFxuICBhYmJyZXZpYXRlZDogWydBaGQnLCAnSXNuJywgJ1NlbCcsICdSYWInLCAnS2hhJywgJ0p1bScsICdTYWInXSxcbiAgd2lkZTogWydBaGFkJywgJ0lzbmluJywgJ1NlbGFzYScsICdSYWJ1JywgJ0toYW1pcycsICdKdW1hYXQnLCAnU2FidHUnXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYW0nLFxuICAgIHBtOiAncG0nLFxuICAgIG1pZG5pZ2h0OiAndGdoIG1hbGFtJyxcbiAgICBub29uOiAndGdoIGhhcmknLFxuICAgIG1vcm5pbmc6ICdwYWdpJyxcbiAgICBhZnRlcm5vb246ICd0ZW5nYWggaGFyaScsXG4gICAgZXZlbmluZzogJ3BldGFuZycsXG4gICAgbmlnaHQ6ICdtYWxhbSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3RlbmdhaCBtYWxhbScsXG4gICAgbm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBtb3JuaW5nOiAncGFnaScsXG4gICAgYWZ0ZXJub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIGV2ZW5pbmc6ICdwZXRhbmcnLFxuICAgIG5pZ2h0OiAnbWFsYW0nXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICd0ZW5nYWggbWFsYW0nLFxuICAgIG5vb246ICd0ZW5nYWggaGFyaScsXG4gICAgbW9ybmluZzogJ3BhZ2knLFxuICAgIGFmdGVybm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBldmVuaW5nOiAncGV0YW5nJyxcbiAgICBuaWdodDogJ21hbGFtJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYW0nLFxuICAgIHBtOiAncG0nLFxuICAgIG1pZG5pZ2h0OiAndGVuZ2FoIG1hbGFtJyxcbiAgICBub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIG1vcm5pbmc6ICdwYWdpJyxcbiAgICBhZnRlcm5vb246ICd0ZW5nYWggaGFyaScsXG4gICAgZXZlbmluZzogJ3BldGFuZycsXG4gICAgbmlnaHQ6ICdtYWxhbSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3RlbmdhaCBtYWxhbScsXG4gICAgbm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBtb3JuaW5nOiAncGFnaScsXG4gICAgYWZ0ZXJub29uOiAndGVuZ2FoIGhhcmknLFxuICAgIGV2ZW5pbmc6ICdwZXRhbmcnLFxuICAgIG5pZ2h0OiAnbWFsYW0nXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICd0ZW5nYWggbWFsYW0nLFxuICAgIG5vb246ICd0ZW5nYWggaGFyaScsXG4gICAgbW9ybmluZzogJ3BhZ2knLFxuICAgIGFmdGVybm9vbjogJ3RlbmdhaCBoYXJpJyxcbiAgICBldmVuaW5nOiAncGV0YW5nJyxcbiAgICBuaWdodDogJ21hbGFtJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBDYW4ndCB1c2UgXCJwZXJ0YW1hXCIsIFwia2VkdWFcIiBiZWNhdXNlIGNhbid0IGJlIHBhcnNlZFxuXG4gIHN3aXRjaCAobnVtYmVyKSB7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAna2UtJyArIG51bWJlcjtcbiAgfVxufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXmtlLShcXGQrKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL3BldGFtYXxcXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihzbXxtKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc1xcLj9cXHM/bVxcLj98bVxcLj8pL2ksXG4gIHdpZGU6IC9eKHNlYmVsdW0gbWFzaWhpfG1hc2loaSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXnMvaSwgL14obSkvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eU1sxMjM0XS9pLFxuICB3aWRlOiAvU3VrdSAocGVydGFtYXxrZWR1YXxrZXRpZ2F8a2VlbXBhdCkvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbL3BlcnRhbWF8MS9pLCAva2VkdWF8Mi9pLCAva2V0aWdhfDMvaSwgL2tlZW1wYXR8NC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hY3xhcHJ8bWVpfGp1bnxqdWx8b2dvfHNlcHxva3R8bm92fGRpcykvaSxcbiAgd2lkZTogL14oamFudWFyaXxmZWJydWFyaXxtYWN8YXByaWx8bWVpfGp1bnxqdWxhaXxvZ29zfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRpc2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eby9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWEvaSwgL15hcC9pLCAvXm1lL2ksIC9eanVuL2ksIC9eanVsL2ksIC9eb2cvaSwgL15zL2ksIC9eb2svaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2Fpc3Jral0vaSxcbiAgc2hvcnQ6IC9eKGFoZHxpc258c2VsfHJhYnxraGF8anVtfHNhYikvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGFoZHxpc258c2VsfHJhYnxraGF8anVtfHNhYikvaSxcbiAgd2lkZTogL14oYWhhZHxpc25pbnxzZWxhc2F8cmFidXxraGFtaXN8anVtYWF0fHNhYnR1KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eYS9pLCAvXmkvaSwgL15zL2ksIC9eci9pLCAvXmsvaSwgL15qL2ksIC9ecy9pXSxcbiAgYW55OiBbL15hL2ksIC9eaS9pLCAvXnNlL2ksIC9eci9pLCAvXmsvaSwgL15qL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhbXxwbXx0ZW5nYWggbWFsYW18dGVuZ2FoIGhhcml8cGFnaXxwZXRhbmd8bWFsYW0pL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98dGVuZ2FoIG1hbGFtfHRlbmdhaCBoYXJpfHBhZ2l8cGV0YW5nfG1hbGFtKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wbS9pLFxuICAgIG1pZG5pZ2h0OiAvXnRlbmdhaCBtL2ksXG4gICAgbm9vbjogL150ZW5nYWggaC9pLFxuICAgIG1vcm5pbmc6IC9wYS9pLFxuICAgIGFmdGVybm9vbjogL3RlbmdhaCBoL2ksXG4gICAgZXZlbmluZzogL3BlL2ksXG4gICAgbmlnaHQ6IC9tL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IE1hbGF5IGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBNYWxheVxuICogQGlzby02MzktMiBtc2FcbiAqIEBhdXRob3IgUnViYW4gU2VsdmFyYWphaCBbQFp5dGVuXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vWnl0ZW59XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ21zJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIHNpbmd1bGFyOiAnbWluZHJlIGVubiBldHQgc2VrdW5kJyxcbiAgICBwbHVyYWw6ICdtaW5kcmUgZW5uIHt7Y291bnR9fSBzZWt1bmRlcidcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBzaW5ndWxhcjogJ2V0dCBzZWt1bmQnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSBzZWt1bmRlcidcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdldCBoYWx2dCBtaW51dHQnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgc2luZ3VsYXI6ICdtaW5kcmUgZW5uIGV0dCBtaW51dHQnLFxuICAgIHBsdXJhbDogJ21pbmRyZSBlbm4ge3tjb3VudH19IG1pbnV0dGVyJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIHNpbmd1bGFyOiAnZXR0IG1pbnV0dCcsXG4gICAgcGx1cmFsOiAne3tjb3VudH19IG1pbnV0dGVyJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIHNpbmd1bGFyOiAnb210cmVudCBlbiB0aW1lJyxcbiAgICBwbHVyYWw6ICdvbXRyZW50IHt7Y291bnR9fSB0aW1lcidcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgc2luZ3VsYXI6ICdlbiB0aW1lJyxcbiAgICBwbHVyYWw6ICd7e2NvdW50fX0gdGltZXInXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgc2luZ3VsYXI6ICdlbiBkYWcnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSBkYWdlcidcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBzaW5ndWxhcjogJ29tdHJlbnQgZW4gdWtlJyxcbiAgICBwbHVyYWw6ICdvbXRyZW50IHt7Y291bnR9fSB1a2VyJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBzaW5ndWxhcjogJ2VuIHVrZScsXG4gICAgcGx1cmFsOiAne3tjb3VudH19IHVrZXInXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIHNpbmd1bGFyOiAnb210cmVudCBlbiBtw6VuZWQnLFxuICAgIHBsdXJhbDogJ29tdHJlbnQge3tjb3VudH19IG3DpW5lZGVyJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgc2luZ3VsYXI6ICdlbiBtw6VuZWQnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSBtw6VuZWRlcidcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ29tdHJlbnQgZXR0IMOlcicsXG4gICAgcGx1cmFsOiAnb210cmVudCB7e2NvdW50fX0gw6VyJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ2V0dCDDpXInLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSDDpXInXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ292ZXIgZXR0IMOlcicsXG4gICAgcGx1cmFsOiAnb3ZlciB7e2NvdW50fX0gw6VyJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ25lc3RlbiBldHQgw6VyJyxcbiAgICBwbHVyYWw6ICduZXN0ZW4ge3tjb3VudH19IMOlcidcbiAgfVxufTtcbnZhciB3b3JkTWFwcGluZyA9IFsnbnVsbCcsICdlbicsICd0bycsICd0cmUnLCAnZmlyZScsICdmZW0nLCAnc2VrcycsICdzanUnLCAnw6V0dGUnLCAnbmknLCAndGknLCAnZWxsZXZlJywgJ3RvbHYnXTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7XG4gICAgb25seU51bWVyaWM6IGZhbHNlXG4gIH07XG4gIHZhciB0cmFuc2xhdGlvbiA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIHRyYW5zbGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRyYW5zbGF0aW9uO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAwIHx8IGNvdW50ID4gMSkge1xuICAgIGlmIChvcHRpb25zLm9ubHlOdW1lcmljKSB7XG4gICAgICByZXN1bHQgPSB0cmFuc2xhdGlvbi5wbHVyYWwucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0cmFuc2xhdGlvbi5wbHVyYWwucmVwbGFjZSgne3tjb3VudH19JywgY291bnQgPCAxMyA/IHdvcmRNYXBwaW5nW2NvdW50XSA6IGNvdW50KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdHJhbnNsYXRpb24uc2luZ3VsYXI7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdvbSAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBzaWRlbic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFIGQuIE1NTU0geScsXG4gIGxvbmc6ICdkLiBNTU1NIHknLFxuICBtZWRpdW06ICdkLiBNTU0geScsXG4gIHNob3J0OiAnZGQuTU0ueSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiJ2tsJy4gSEg6bW06c3Mgenp6elwiLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdrbC4nIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2tsLicge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19IHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2ZvcnJpZ2UnIGVlZWUgJ2tsLicgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ2kgZ8OlciBrbC4nIHBcIixcbiAgdG9kYXk6IFwiJ2kgZGFnIGtsLicgcFwiLFxuICB0b21vcnJvdzogXCInaSBtb3JnZW4ga2wuJyBwXCIsXG4gIG5leHRXZWVrOiBcIkVFRUUgJ2tsLicgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnZi5Lci4nLCAnZS5Lci4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsnZi5Lci4nLCAnZS5Lci4nXSxcbiAgd2lkZTogWydmw7hyIEtyaXN0dXMnLCAnZXR0ZXIgS3Jpc3R1cyddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMS4ga3ZhcnRhbCcsICcyLiBrdmFydGFsJywgJzMuIGt2YXJ0YWwnLCAnNC4ga3ZhcnRhbCddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnamFuLicsICdmZWIuJywgJ21hcnMnLCAnYXByLicsICdtYWknLCAnanVuaScsICdqdWxpJywgJ2F1Zy4nLCAnc2VwLicsICdva3QuJywgJ25vdi4nLCAnZGVzLiddLFxuICB3aWRlOiBbJ2phbnVhcicsICdmZWJydWFyJywgJ21hcnMnLCAnYXByaWwnLCAnbWFpJywgJ2p1bmknLCAnanVsaScsICdhdWd1c3QnLCAnc2VwdGVtYmVyJywgJ29rdG9iZXInLCAnbm92ZW1iZXInLCAnZGVzZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdPJywgJ1QnLCAnRicsICdMJ10sXG4gIHNob3J0OiBbJ3PDuCcsICdtYScsICd0aScsICdvbicsICd0bycsICdmcicsICdsw7gnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnc8O4bicsICdtYW4nLCAndGlyJywgJ29ucycsICd0b3InLCAnZnJlJywgJ2zDuHInXSxcbiAgd2lkZTogWydzw7huZGFnJywgJ21hbmRhZycsICd0aXJzZGFnJywgJ29uc2RhZycsICd0b3JzZGFnJywgJ2ZyZWRhZycsICdsw7hyZGFnJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaWRuYXR0JyxcbiAgICBub29uOiAnbWlkZGFnJyxcbiAgICBtb3JuaW5nOiAncMOlIG1vcmcuJyxcbiAgICBhZnRlcm5vb246ICdww6UgZXR0ZXJtLicsXG4gICAgZXZlbmluZzogJ3DDpSBrdmVsZGVuJyxcbiAgICBuaWdodDogJ3DDpSBuYXR0ZW4nXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ3DDpSBtb3JnLicsXG4gICAgYWZ0ZXJub29uOiAncMOlIGV0dGVybS4nLFxuICAgIGV2ZW5pbmc6ICdww6Uga3ZlbGRlbicsXG4gICAgbmlnaHQ6ICdww6UgbmF0dGVuJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ3DDpSBtb3JnZW5lbicsXG4gICAgYWZ0ZXJub29uOiAncMOlIGV0dGVybWlkZGFnZW4nLFxuICAgIGV2ZW5pbmc6ICdww6Uga3ZlbGRlbicsXG4gICAgbmlnaHQ6ICdww6UgbmF0dGVuJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJy4nO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKVxcLj8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGZcXC4/ID9LclxcLj98ZnZ0XFwuP3xlXFwuPyA/S3JcXC4/fGV2dFxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihmXFwuPyA/S3JcXC4/fGZ2dFxcLj98ZVxcLj8gP0tyXFwuP3xldnRcXC4/KS9pLFxuICB3aWRlOiAvXihmw7hyIEtyaXN0dXN8ZsO4ciB2w6VyIHRpZHxldHRlciBLcmlzdHVzfHbDpXIgdGlkKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eZi9pLCAvXmUvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XShcXC4pPyBrdmFydGFsL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFycz98YXByfG1haXxqdW5pP3xqdWxpP3xhdWd8c2VwfG9rdHxub3Z8ZGVzKVxcLj8vaSxcbiAgd2lkZTogL14oamFudWFyfGZlYnJ1YXJ8bWFyc3xhcHJpbHxtYWl8anVuaXxqdWxpfGF1Z3VzdHxzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZXNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWFpL2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXVnL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdG9mbF0vaSxcbiAgc2hvcnQ6IC9eKHPDuHxtYXx0aXxvbnx0b3xmcnxsw7gpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzw7hufG1hbnx0aXJ8b25zfHRvcnxmcmV8bMO4cikvaSxcbiAgd2lkZTogL14oc8O4bmRhZ3xtYW5kYWd8dGlyc2RhZ3xvbnNkYWd8dG9yc2RhZ3xmcmVkYWd8bMO4cmRhZykvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXnMvaSwgL15tL2ksIC9edGkvaSwgL15vL2ksIC9edG8vaSwgL15mL2ksIC9ebC9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKG1pZG5hdHR8bWlkZGFnfChww6UpIChtb3JnZW5lbnxldHRlcm1pZGRhZ2VufGt2ZWxkZW58bmF0dGVuKXxbYXBdKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5hdHR8bWlkZGFnfChww6UpIChtb3JnZW5lbnxldHRlcm1pZGRhZ2VufGt2ZWxkZW58bmF0dGVuKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hKFxcLj9cXHM/bVxcLj8pPyQvaSxcbiAgICBwbTogL15wKFxcLj9cXHM/bVxcLj8pPyQvaSxcbiAgICBtaWRuaWdodDogL15taWRuL2ksXG4gICAgbm9vbjogL15taWRkL2ksXG4gICAgbW9ybmluZzogL21vcmdlbi9pLFxuICAgIGFmdGVybm9vbjogL2V0dGVybWlkZGFnL2ksXG4gICAgZXZlbmluZzogL2t2ZWxkL2ksXG4gICAgbmlnaHQ6IC9uYXR0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IE5vcndlZ2lhbiBCb2ttw6VsIGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBOb3J3ZWdpYW4gQm9rbcOlbFxuICogQGlzby02MzktMiBub2JcbiAqIEBhdXRob3IgSGFucy1LcmlzdGlhbiBLb3JlbiBbQEhhbnNlXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vSGFuc2V9XG4gKiBAYXV0aG9yIE1pa29sYWogR3J6eWIgW0BtaWtvbGFqZ3J6eWJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9taWtvbGFqZ3J6eWJ9XG4gKiBAYXV0aG9yIERhZyBTdHVhbiBbQGRhZ3N0dWFuXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZGFnc3R1YW59XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ25iJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ21pbmRlciBkYW4gZWVuIHNlY29uZGUnLFxuICAgIG90aGVyOiAnbWluZGVyIGRhbiB7e2NvdW50fX0gc2Vjb25kZW4nXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRlbidcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdlZW4gaGFsdmUgbWludXV0JyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ21pbmRlciBkYW4gZWVuIG1pbnV1dCcsXG4gICAgb3RoZXI6ICdtaW5kZXIgZGFuIHt7Y291bnR9fSBtaW51dGVuJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJ2VlbiBtaW51dXQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZW4nXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnb25nZXZlZXIgMSB1dXInLFxuICAgIG90aGVyOiAnb25nZXZlZXIge3tjb3VudH19IHV1cidcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSB1dXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHV1cidcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRhZycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGFnZW4nXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnb25nZXZlZXIgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ29uZ2V2ZWVyIHt7Y291bnR9fSB3ZWtlbidcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWtlbidcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnb25nZXZlZXIgMSBtYWFuZCcsXG4gICAgb3RoZXI6ICdvbmdldmVlciB7e2NvdW50fX0gbWFhbmRlbidcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbWFhbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1hYW5kZW4nXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnb25nZXZlZXIgMSBqYWFyJyxcbiAgICBvdGhlcjogJ29uZ2V2ZWVyIHt7Y291bnR9fSBqYWFyJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIGphYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGphYXInXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdtZWVyIGRhbiAxIGphYXInLFxuICAgIG90aGVyOiAnbWVlciBkYW4ge3tjb3VudH19IGphYXInXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2Jpam5hIDEgamFhcicsXG4gICAgb3RoZXI6ICdiaWpuYSB7e2NvdW50fX0gamFhcidcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdvdmVyICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGdlbGVkZW4nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSBkIE1NTU0geScsXG4gIGxvbmc6ICdkIE1NTU0geScsXG4gIG1lZGl1bTogJ2QgTU1NIHknLFxuICBzaG9ydDogJ2RkLU1NLXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ29tJyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdvbScge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInYWZnZWxvcGVuJyBlZWVlICdvbScgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ2dpc3RlcmVuIG9tJyBwXCIsXG4gIHRvZGF5OiBcIid2YW5kYWFnIG9tJyBwXCIsXG4gIHRvbW9ycm93OiBcIidtb3JnZW4gb20nIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnb20nIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ3YuQy4nLCAnbi5DLiddLFxuICBhYmJyZXZpYXRlZDogWyd2LkNoci4nLCAnbi5DaHIuJ10sXG4gIHdpZGU6IFsndm9vciBDaHJpc3R1cycsICduYSBDaHJpc3R1cyddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ0sxJywgJ0syJywgJ0szJywgJ0s0J10sXG4gIHdpZGU6IFsnMWUga3dhcnRhYWwnLCAnMmUga3dhcnRhYWwnLCAnM2Uga3dhcnRhYWwnLCAnNGUga3dhcnRhYWwnXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbi4nLCAnZmViLicsICdtcnQuJywgJ2Fwci4nLCAnbWVpJywgJ2p1bi4nLCAnanVsLicsICdhdWcuJywgJ3NlcC4nLCAnb2t0LicsICdub3YuJywgJ2RlYy4nXSxcbiAgd2lkZTogWydqYW51YXJpJywgJ2ZlYnJ1YXJpJywgJ21hYXJ0JywgJ2FwcmlsJywgJ21laScsICdqdW5pJywgJ2p1bGknLCAnYXVndXN0dXMnLCAnc2VwdGVtYmVyJywgJ29rdG9iZXInLCAnbm92ZW1iZXInLCAnZGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydaJywgJ00nLCAnRCcsICdXJywgJ0QnLCAnVicsICdaJ10sXG4gIHNob3J0OiBbJ3pvJywgJ21hJywgJ2RpJywgJ3dvJywgJ2RvJywgJ3ZyJywgJ3phJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3pvbicsICdtYWEnLCAnZGluJywgJ3dvZScsICdkb24nLCAndnJpJywgJ3phdCddLFxuICB3aWRlOiBbJ3pvbmRhZycsICdtYWFuZGFnJywgJ2RpbnNkYWcnLCAnd29lbnNkYWcnLCAnZG9uZGVyZGFnJywgJ3ZyaWpkYWcnLCAnemF0ZXJkYWcnXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkZGVybmFjaHQnLFxuICAgIG5vb246ICdoZXQgbWlkZGFndXVyJyxcbiAgICBtb3JuaW5nOiBcIidzIG9jaHRlbmRzXCIsXG4gICAgYWZ0ZXJub29uOiBcIidzIG1pZGRhZ3NcIixcbiAgICBldmVuaW5nOiBcIidzIGF2b25kc1wiLFxuICAgIG5pZ2h0OiBcIidzIG5hY2h0c1wiXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRkZXJuYWNodCcsXG4gICAgbm9vbjogJ2hldCBtaWRkYWd1dXInLFxuICAgIG1vcm5pbmc6IFwiJ3Mgb2NodGVuZHNcIixcbiAgICBhZnRlcm5vb246IFwiJ3MgbWlkZGFnc1wiLFxuICAgIGV2ZW5pbmc6IFwiJ3MgYXZvbmRzXCIsXG4gICAgbmlnaHQ6IFwiJ3MgbmFjaHRzXCJcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkZGVybmFjaHQnLFxuICAgIG5vb246ICdoZXQgbWlkZGFndXVyJyxcbiAgICBtb3JuaW5nOiBcIidzIG9jaHRlbmRzXCIsXG4gICAgYWZ0ZXJub29uOiBcIidzIG1pZGRhZ3NcIixcbiAgICBldmVuaW5nOiBcIidzIGF2b25kc1wiLFxuICAgIG5pZ2h0OiBcIidzIG5hY2h0c1wiXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIHJldHVybiBudW1iZXIgKyAnZSc7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspZT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKFt2bl1cXC4/ID9DXFwuPykvLFxuICBhYmJyZXZpYXRlZDogL14oW3ZuXVxcLiA/Q2hyXFwuPykvLFxuICB3aWRlOiAvXigodm9vcnxuYSkgQ2hyaXN0dXMpL1xufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXnYvLCAvXm4vXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15LWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdZSBrd2FydGFhbC9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW4ufGZlYi58bXJ0LnxhcHIufG1laXxqdW4ufGp1bC58YXVnLnxzZXAufG9rdC58bm92LnxkZWMuKS9pLFxuICB3aWRlOiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdW5pfGp1bGl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYW4vaSwgL15mZWIvaSwgL15tKHJ8YSkvaSwgL15hcHIvaSwgL15tZWkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlt6bWR3dl0vaSxcbiAgc2hvcnQ6IC9eKHpvfG1hfGRpfHdvfGRvfHZyfHphKS9pLFxuICBhYmJyZXZpYXRlZDogL14oem9ufG1hYXxkaW58d29lfGRvbnx2cml8emF0KS9pLFxuICB3aWRlOiAvXih6b25kYWd8bWFhbmRhZ3xkaW5zZGFnfHdvZW5zZGFnfGRvbmRlcmRhZ3x2cmlqZGFnfHphdGVyZGFnKS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eei9pLCAvXm0vaSwgL15kL2ksIC9edy9pLCAvXmQvaSwgL152L2ksIC9eei9pXSxcbiAgYW55OiBbL156by9pLCAvXm1hL2ksIC9eZGkvaSwgL153by9pLCAvXmRvL2ksIC9ednIvaSwgL156YS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IC9eKGFtfHBtfG1pZGRlcm5hY2h0fGhldCBtaWRkYWd1dXJ8J3MgKG9jaHRlbmRzfG1pZGRhZ3N8YXZvbmRzfG5hY2h0cykpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYW0vaSxcbiAgICBwbTogL15wbS9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pZGRlcm5hY2h0L2ksXG4gICAgbm9vbjogL15oZXQgbWlkZGFndXVyL2ksXG4gICAgbW9ybmluZzogL29jaHRlbmQvaSxcbiAgICBhZnRlcm5vb246IC9taWRkYWcvaSxcbiAgICBldmVuaW5nOiAvYXZvbmQvaSxcbiAgICBuaWdodDogL25hY2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IER1dGNoIGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBEdXRjaFxuICogQGlzby02MzktMiBubGRcbiAqIEBhdXRob3IgSm9yaWsgVGFuZ2VsZGVyIFtAanRhbmdlbGRlcl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2p0YW5nZWxkZXJ9XG4gKiBAYXV0aG9yIFJ1YmVuIFN0b2xrIFtAcnViZW5zdG9sa117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3J1YmVuc3RvbGt9XG4gKiBAYXV0aG9yIExvZGUgVmFuaG92ZSBbQGJpdGNydW1iXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYml0Y3J1bWJ9XG4gKiBAYXV0aG9yIEVkbyBSaXZhaSBbQGVkb3JpdmFpXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZWRvcml2YWl9XG4gKiBAYXV0aG9yIE5pZWxzIEtldXJlbnRqZXMgW0BjdXJyeTY4NF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2N1cnJ5Njg0fVxuICogQGF1dGhvciBTdGVmYW4gVmVybWFhcyBbQHN0ZWZhbnZlcm1hYXNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGVmYW52ZXJtYWFzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdubCcsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJmdW5jdGlvbiBkZWNsZW5zaW9uR3JvdXAoc2NoZW1lLCBjb3VudCkge1xuICBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXR1cm4gc2NoZW1lLm9uZTtcbiAgfVxuXG4gIHZhciByZW0xMDAgPSBjb3VudCAlIDEwMDsgLy8gZW5kcyB3aXRoIDExLTIwXG5cbiAgaWYgKHJlbTEwMCA8PSAyMCAmJiByZW0xMDAgPiAxMCkge1xuICAgIHJldHVybiBzY2hlbWUub3RoZXI7XG4gIH1cblxuICB2YXIgcmVtMTAgPSByZW0xMDAgJSAxMDsgLy8gZW5kcyB3aXRoIDIsIDMsIDRcblxuICBpZiAocmVtMTAgPj0gMiAmJiByZW0xMCA8PSA0KSB7XG4gICAgcmV0dXJuIHNjaGVtZS50d29Gb3VyO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtZS5vdGhlcjtcbn1cblxuZnVuY3Rpb24gZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50LCB0aW1lKSB7XG4gIHRpbWUgPSB0aW1lIHx8ICdyZWd1bGFyJztcbiAgdmFyIGdyb3VwID0gZGVjbGVuc2lvbkdyb3VwKHNjaGVtZSwgY291bnQpO1xuICB2YXIgZmluYWxUZXh0ID0gZ3JvdXBbdGltZV0gfHwgZ3JvdXA7XG4gIHJldHVybiBmaW5hbFRleHQucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xufVxuXG52YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtbmllaiBuacW8IHNla3VuZGEnLFxuICAgICAgcGFzdDogJ21uaWVqIG5pxbwgc2VrdW5kxJknLFxuICAgICAgZnV0dXJlOiAnbW5pZWogbmnFvCBzZWt1bmTEmSdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICdtbmllaiBuacW8IHt7Y291bnR9fSBzZWt1bmR5JyxcbiAgICBvdGhlcjogJ21uaWVqIG5pxbwge3tjb3VudH19IHNla3VuZCdcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdzZWt1bmRhJyxcbiAgICAgIHBhc3Q6ICdzZWt1bmTEmScsXG4gICAgICBmdXR1cmU6ICdzZWt1bmTEmSdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICd7e2NvdW50fX0gc2VrdW5keScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2VrdW5kJ1xuICB9LFxuICBoYWxmQU1pbnV0ZToge1xuICAgIG9uZTogJ3DDs8WCIG1pbnV0eScsXG4gICAgdHdvRm91cjogJ3DDs8WCIG1pbnV0eScsXG4gICAgb3RoZXI6ICdww7PFgiBtaW51dHknXG4gIH0sXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtbmllaiBuacW8IG1pbnV0YScsXG4gICAgICBwYXN0OiAnbW5pZWogbmnFvCBtaW51dMSZJyxcbiAgICAgIGZ1dHVyZTogJ21uaWVqIG5pxbwgbWludXTEmSdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICdtbmllaiBuacW8IHt7Y291bnR9fSBtaW51dHknLFxuICAgIG90aGVyOiAnbW5pZWogbmnFvCB7e2NvdW50fX0gbWludXQnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnbWludXRhJyxcbiAgICAgIHBhc3Q6ICdtaW51dMSZJyxcbiAgICAgIGZ1dHVyZTogJ21pbnV0xJknXG4gICAgfSxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IG1pbnV0eScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXQnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnb2tvxYJvIGdvZHppbmEnLFxuICAgICAgcGFzdDogJ29rb8WCbyBnb2R6aW55JyxcbiAgICAgIGZ1dHVyZTogJ29rb8WCbyBnb2R6aW7EmSdcbiAgICB9LFxuICAgIHR3b0ZvdXI6ICdva2/Fgm8ge3tjb3VudH19IGdvZHppbnknLFxuICAgIG90aGVyOiAnb2tvxYJvIHt7Y291bnR9fSBnb2R6aW4nXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ2dvZHppbmEnLFxuICAgICAgcGFzdDogJ2dvZHppbsSZJyxcbiAgICAgIGZ1dHVyZTogJ2dvZHppbsSZJ1xuICAgIH0sXG4gICAgdHdvRm91cjogJ3t7Y291bnR9fSBnb2R6aW55JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBnb2R6aW4nXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnZHppZcWEJyxcbiAgICAgIHBhc3Q6ICdkemllxYQnLFxuICAgICAgZnV0dXJlOiAnMSBkemllxYQnXG4gICAgfSxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IGRuaScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZG5pJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ29rb8WCbyB0eWdvZG5pYScsXG4gICAgdHdvRm91cjogJ29rb8WCbyB7e2NvdW50fX0gdHlnb2RuaScsXG4gICAgb3RoZXI6ICdva2/Fgm8ge3tjb3VudH19IHR5Z29kbmknXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJ3R5ZHppZcWEJyxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IHR5Z29kbmllJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB0eWdvZG5pJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdva2/Fgm8gbWllc2nEhWMnLFxuICAgIHR3b0ZvdXI6ICdva2/Fgm8ge3tjb3VudH19IG1pZXNpxIVjZScsXG4gICAgb3RoZXI6ICdva2/Fgm8ge3tjb3VudH19IG1pZXNpxJljeSdcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJ21pZXNpxIVjJyxcbiAgICB0d29Gb3VyOiAne3tjb3VudH19IG1pZXNpxIVjZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWllc2nEmWN5J1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ29rb8WCbyByb2snLFxuICAgIHR3b0ZvdXI6ICdva2/Fgm8ge3tjb3VudH19IGxhdGEnLFxuICAgIG90aGVyOiAnb2tvxYJvIHt7Y291bnR9fSBsYXQnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJ3JvaycsXG4gICAgdHdvRm91cjogJ3t7Y291bnR9fSBsYXRhJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBsYXQnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdwb25hZCByb2snLFxuICAgIHR3b0ZvdXI6ICdwb25hZCB7e2NvdW50fX0gbGF0YScsXG4gICAgb3RoZXI6ICdwb25hZCB7e2NvdW50fX0gbGF0J1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdwcmF3aWUgcm9rJyxcbiAgICB0d29Gb3VyOiAncHJhd2llIHt7Y291bnR9fSBsYXRhJyxcbiAgICBvdGhlcjogJ3ByYXdpZSB7e2NvdW50fX0gbGF0J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgc2NoZW1lID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICghb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICByZXR1cm4gZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgcmV0dXJuICd6YSAnICsgZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50LCAnZnV0dXJlJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlY2xlbnNpb24oc2NoZW1lLCBjb3VudCwgJ3Bhc3QnKSArICcgdGVtdSc7XG4gIH1cbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBkbyBNTU1NIHknLFxuICBsb25nOiAnZG8gTU1NTSB5JyxcbiAgbWVkaXVtOiAnZG8gTU1NIHknLFxuICBzaG9ydDogJ2RkLk1NLnknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnSEg6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIGxvbmc6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsImltcG9ydCBpc1NhbWVVVENXZWVrIGZyb20gJy4uLy4uLy4uLy4uL19saWIvaXNTYW1lVVRDV2Vlay9pbmRleC5qcyc7XG52YXIgYWRqZWN0aXZlc0xhc3RXZWVrID0ge1xuICBtYXNjdWxpbmU6ICdvc3RhdG5pJyxcbiAgZmVtaW5pbmU6ICdvc3RhdG5pYSdcbn07XG52YXIgYWRqZWN0aXZlc1RoaXNXZWVrID0ge1xuICBtYXNjdWxpbmU6ICd0ZW4nLFxuICBmZW1pbmluZTogJ3RhJ1xufTtcbnZhciBhZGplY3RpdmVzTmV4dFdlZWsgPSB7XG4gIG1hc2N1bGluZTogJ25hc3TEmXBueScsXG4gIGZlbWluaW5lOiAnbmFzdMSZcG5hJ1xufTtcbnZhciBkYXlHcmFtbWF0aWNhbEdlbmRlciA9IHtcbiAgMDogJ2ZlbWluaW5lJyxcbiAgMTogJ21hc2N1bGluZScsXG4gIDI6ICdtYXNjdWxpbmUnLFxuICAzOiAnZmVtaW5pbmUnLFxuICA0OiAnbWFzY3VsaW5lJyxcbiAgNTogJ21hc2N1bGluZScsXG4gIDY6ICdmZW1pbmluZSdcbn07XG5cbmZ1bmN0aW9uIGdldEFkamVjdGl2ZXModG9rZW4sIGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSB7XG4gIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgIHJldHVybiBhZGplY3RpdmVzVGhpc1dlZWs7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdsYXN0V2VlaycpIHtcbiAgICByZXR1cm4gYWRqZWN0aXZlc0xhc3RXZWVrO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnbmV4dFdlZWsnKSB7XG4gICAgcmV0dXJuIGFkamVjdGl2ZXNOZXh0V2VlaztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZGV0ZXJtaW5lIGFkamVjdGl2ZXMgZm9yIHRva2VuIFwiLmNvbmNhdCh0b2tlbikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFkamVjdGl2ZSh0b2tlbiwgZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBhZGplY3RpdmVzID0gZ2V0QWRqZWN0aXZlcyh0b2tlbiwgZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZ3JhbW1hdGljYWxHZW5kZXIgPSBkYXlHcmFtbWF0aWNhbEdlbmRlcltkYXldO1xuICByZXR1cm4gYWRqZWN0aXZlc1tncmFtbWF0aWNhbEdlbmRlcl07XG59XG5cbmZ1bmN0aW9uIGRheUFuZFRpbWVXaXRoQWRqZWN0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICB2YXIgYWRqZWN0aXZlID0gZ2V0QWRqZWN0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIHJldHVybiBcIidcIi5jb25jYXQoYWRqZWN0aXZlLCBcIicgZWVlZSAnbycgcFwiKTtcbn1cblxudmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogZGF5QW5kVGltZVdpdGhBZGplY3RpdmUsXG4gIHllc3RlcmRheTogXCInd2N6b3JhaiBvJyBwXCIsXG4gIHRvZGF5OiBcIidkemlzaWFqIG8nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ2p1dHJvIG8nIHBcIixcbiAgbmV4dFdlZWs6IGRheUFuZFRpbWVXaXRoQWRqZWN0aXZlLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBmb3JtYXQgPSBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm9ybWF0KHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gU3RyaW5nKG51bWJlcik7XG59XG5cbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydwLm4uZS4nLCAnbi5lLiddLFxuICBhYmJyZXZpYXRlZDogWydwLm4uZS4nLCAnbi5lLiddLFxuICB3aWRlOiBbJ3ByemVkIG5hc3rEhSBlcsSFJywgJ25hc3plaiBlcnknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydJIGt3LicsICdJSSBrdy4nLCAnSUlJIGt3LicsICdJViBrdy4nXSxcbiAgd2lkZTogWydJIGt3YXJ0YcWCJywgJ0lJIGt3YXJ0YcWCJywgJ0lJSSBrd2FydGHFgicsICdJViBrd2FydGHFgiddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdMJywgJ00nLCAnSycsICdNJywgJ0MnLCAnTCcsICdTJywgJ1cnLCAnUCcsICdMJywgJ0cnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnc3R5JywgJ2x1dCcsICdtYXInLCAna3dpJywgJ21haicsICdjemUnLCAnbGlwJywgJ3NpZScsICd3cnonLCAncGHFuicsICdsaXMnLCAnZ3J1J10sXG4gIHdpZGU6IFsnc3R5Y3plxYQnLCAnbHV0eScsICdtYXJ6ZWMnLCAna3dpZWNpZcWEJywgJ21haicsICdjemVyd2llYycsICdsaXBpZWMnLCAnc2llcnBpZcWEJywgJ3dyemVzaWXFhCcsICdwYcW6ZHppZXJuaWsnLCAnbGlzdG9wYWQnLCAnZ3J1ZHppZcWEJ11cbn07XG52YXIgbW9udGhGb3JtYXR0aW5nVmFsdWVzID0ge1xuICBuYXJyb3c6IFsncycsICdsJywgJ20nLCAnaycsICdtJywgJ2MnLCAnbCcsICdzJywgJ3cnLCAncCcsICdsJywgJ2cnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnc3R5JywgJ2x1dCcsICdtYXInLCAna3dpJywgJ21haicsICdjemUnLCAnbGlwJywgJ3NpZScsICd3cnonLCAncGHFuicsICdsaXMnLCAnZ3J1J10sXG4gIHdpZGU6IFsnc3R5Y3puaWEnLCAnbHV0ZWdvJywgJ21hcmNhJywgJ2t3aWV0bmlhJywgJ21hamEnLCAnY3plcndjYScsICdsaXBjYScsICdzaWVycG5pYScsICd3cnplxZtuaWEnLCAncGHFumR6aWVybmlrYScsICdsaXN0b3BhZGEnLCAnZ3J1ZG5pYSddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ04nLCAnUCcsICdXJywgJ8WaJywgJ0MnLCAnUCcsICdTJ10sXG4gIHNob3J0OiBbJ25pZScsICdwb24nLCAnd3RvJywgJ8Wbcm8nLCAnY3p3JywgJ3BpxIUnLCAnc29iJ10sXG4gIGFiYnJldmlhdGVkOiBbJ25pZWR6LicsICdwb24uJywgJ3d0LicsICfFm3IuJywgJ2N6dy4nLCAncHQuJywgJ3NvYi4nXSxcbiAgd2lkZTogWyduaWVkemllbGEnLCAncG9uaWVkemlhxYJlaycsICd3dG9yZWsnLCAnxZtyb2RhJywgJ2N6d2FydGVrJywgJ3BpxIV0ZWsnLCAnc29ib3RhJ11cbn07XG52YXIgZGF5Rm9ybWF0dGluZ1ZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ24nLCAncCcsICd3JywgJ8WbJywgJ2MnLCAncCcsICdzJ10sXG4gIHNob3J0OiBbJ25pZScsICdwb24nLCAnd3RvJywgJ8Wbcm8nLCAnY3p3JywgJ3BpxIUnLCAnc29iJ10sXG4gIGFiYnJldmlhdGVkOiBbJ25pZWR6LicsICdwb24uJywgJ3d0LicsICfFm3IuJywgJ2N6dy4nLCAncHQuJywgJ3NvYi4nXSxcbiAgd2lkZTogWyduaWVkemllbGEnLCAncG9uaWVkemlhxYJlaycsICd3dG9yZWsnLCAnxZtyb2RhJywgJ2N6d2FydGVrJywgJ3BpxIV0ZWsnLCAnc29ib3RhJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdww7PFgm4uJyxcbiAgICBub29uOiAncG/FgicsXG4gICAgbW9ybmluZzogJ3Jhbm8nLFxuICAgIGFmdGVybm9vbjogJ3BvcG/Fgi4nLFxuICAgIGV2ZW5pbmc6ICd3aWVjei4nLFxuICAgIG5pZ2h0OiAnbm9jJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAncMOzxYJub2MnLFxuICAgIG5vb246ICdwb8WCdWRuaWUnLFxuICAgIG1vcm5pbmc6ICdyYW5vJyxcbiAgICBhZnRlcm5vb246ICdwb3BvxYJ1ZG5pZScsXG4gICAgZXZlbmluZzogJ3dpZWN6w7NyJyxcbiAgICBuaWdodDogJ25vYydcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAncMOzxYJub2MnLFxuICAgIG5vb246ICdwb8WCdWRuaWUnLFxuICAgIG1vcm5pbmc6ICdyYW5vJyxcbiAgICBhZnRlcm5vb246ICdwb3BvxYJ1ZG5pZScsXG4gICAgZXZlbmluZzogJ3dpZWN6w7NyJyxcbiAgICBuaWdodDogJ25vYydcbiAgfVxufTtcbnZhciBkYXlQZXJpb2RGb3JtYXR0aW5nVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdvIHDDs8WCbi4nLFxuICAgIG5vb246ICd3IHBvxYIuJyxcbiAgICBtb3JuaW5nOiAncmFubycsXG4gICAgYWZ0ZXJub29uOiAncG8gcG/Fgi4nLFxuICAgIGV2ZW5pbmc6ICd3aWVjei4nLFxuICAgIG5pZ2h0OiAndyBub2N5J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbyBww7PFgm5vY3knLFxuICAgIG5vb246ICd3IHBvxYJ1ZG5pZScsXG4gICAgbW9ybmluZzogJ3Jhbm8nLFxuICAgIGFmdGVybm9vbjogJ3BvIHBvxYJ1ZG5pdScsXG4gICAgZXZlbmluZzogJ3dpZWN6b3JlbScsXG4gICAgbmlnaHQ6ICd3IG5vY3knXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ28gcMOzxYJub2N5JyxcbiAgICBub29uOiAndyBwb8WCdWRuaWUnLFxuICAgIG1vcm5pbmc6ICdyYW5vJyxcbiAgICBhZnRlcm5vb246ICdwbyBwb8WCdWRuaXUnLFxuICAgIGV2ZW5pbmc6ICd3aWVjem9yZW0nLFxuICAgIG5pZ2h0OiAndyBub2N5J1xuICB9XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IG1vbnRoRm9ybWF0dGluZ1ZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBkYXlGb3JtYXR0aW5nVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGRheVBlcmlvZEZvcm1hdHRpbmdWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKHBcXC4/XFxzKm5cXC4/XFxzKmVcXC4/XFxzKnxuXFwuP1xccyplXFwuP1xccyopL2ksXG4gIGFiYnJldmlhdGVkOiAvXihwXFwuP1xccypuXFwuP1xccyplXFwuP1xccyp8blxcLj9cXHMqZVxcLj9cXHMqKS9pLFxuICB3aWRlOiAvXihwcnplZFxccypuYXN6KMSFfGEpXFxzKmVyKMSFfGEpfG5hc3plalxccyplcnkpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15wL2ksIC9ebi9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL14oSXxJSXxJSUl8SVYpXFxzKmt3XFwuPy9pLFxuICB3aWRlOiAvXihJfElJfElJSXxJVilcXHMqa3dhcnRhKMWCfGwpL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldLFxuICBhbnk6IFsvXkkga3cvaSwgL15JSSBrdy9pLCAvXklJSSBrdy9pLCAvXklWIGt3L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbG1rY3dwZ10vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN0eXxsdXR8bWFyfGt3aXxtYWp8Y3plfGxpcHxzaWV8d3J6fHBhKMW6fHopfGxpc3xncnUpL2ksXG4gIHdpZGU6IC9eKHN0eWN6bmlhfHN0eWN6ZSjFhHxuKXxsdXRlZ298bHV0eXxtYXJjYXxtYXJ6ZWN8a3dpZXRuaWF8a3dpZWNpZSjFhHxuKXxtYWphfG1hanxjemVyd2NhfGN6ZXJ3aWVjfGxpcGNhfGxpcGllY3xzaWVycG5pYXxzaWVycGllKMWEfG4pfHdyemUoxZt8cyluaWF8d3J6ZXNpZSjFhHxuKXxwYSjFunx6KWR6aWVybmlrYXxwYSjFunx6KWR6aWVybmlrfGxpc3RvcGFkYXxsaXN0b3BhZHxncnVkbmlhfGdydWR6aWUoxYR8bikpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15sL2ksIC9ebS9pLCAvXmsvaSwgL15tL2ksIC9eYy9pLCAvXmwvaSwgL15zL2ksIC9edy9pLCAvXnAvaSwgL15sL2ksIC9eZy9pXSxcbiAgYW55OiBbL15zdC9pLCAvXmx1L2ksIC9ebWFyL2ksIC9eay9pLCAvXm1hai9pLCAvXmMvaSwgL15saXAvaSwgL15zaS9pLCAvXncvaSwgL15wL2ksIC9ebGlzL2ksIC9eZy9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW25wd8WbY3NdL2ksXG4gIHNob3J0OiAvXihuaWV8cG9ufHd0b3woxZt8cylyb3xjend8cGkoxIV8YSl8c29iKS9pLFxuICBhYmJyZXZpYXRlZDogL14obmllZHp8cG9ufHd0fCjFm3xzKXJ8Y3p3fHB0fHNvYilcXC4/L2ksXG4gIHdpZGU6IC9eKG5pZWR6aWVsYXxwb25pZWR6aWEoxYJ8bClla3x3dG9yZWt8KMWbfHMpcm9kYXxjendhcnRla3xwaSjEhXxhKXRla3xzb2JvdGEpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15uL2ksIC9ecC9pLCAvXncvaSwgL17Fmy9pLCAvXmMvaSwgL15wL2ksIC9ecy9pXSxcbiAgYWJicmV2aWF0ZWQ6IFsvXm4vaSwgL15wby9pLCAvXncvaSwgL14oxZt8cylyL2ksIC9eYy9pLCAvXnB0L2ksIC9ec28vaV0sXG4gIGFueTogWy9ebi9pLCAvXnBvL2ksIC9edy9pLCAvXijFm3xzKXIvaSwgL15jL2ksIC9ecGkvaSwgL15zby9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKF5hJHxecCR8cMOzKMWCfGwpblxcLj98b1xccypww7MoxYJ8bCluXFwuP3xwbyjFgnxsKVxcLj98d1xccypwbyjFgnxsKVxcLj98cG9cXHMqcG8oxYJ8bClcXC4/fHJhbm98d2llY3pcXC4/fG5vY3x3XFxzKm5vY3kpL2ksXG4gIGFueTogL14oYW18cG18cMOzKMWCfGwpbm9jfG9cXHMqcMOzKMWCfGwpbm9jeXxwbyjFgnxsKXVkbmllfHdcXHMqcG8oxYJ8bCl1ZG5pZXxwb3BvKMWCfGwpdWRuaWV8cG9cXHMqcG8oxYJ8bCl1ZG5pdXxyYW5vfHdpZWN6w7NyfHdpZWN6b3JlbXxub2N8d1xccypub2N5KS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAvXmEkL2ksXG4gICAgcG06IC9ecCQvaSxcbiAgICBtaWRuaWdodDogL3DDsyjFgnxsKW4vaSxcbiAgICBub29uOiAvcG8oxYJ8bCkvaSxcbiAgICBtb3JuaW5nOiAvcmFuby9pLFxuICAgIGFmdGVybm9vbjogL3BvXFxzKnBvKMWCfGwpL2ksXG4gICAgZXZlbmluZzogL3dpZWN6L2ksXG4gICAgbmlnaHQ6IC9ub2MvaVxuICB9LFxuICBhbnk6IHtcbiAgICBhbTogL15hbS9pLFxuICAgIHBtOiAvXnBtL2ksXG4gICAgbWlkbmlnaHQ6IC9ww7MoxYJ8bCluL2ksXG4gICAgbm9vbjogL3BvKMWCfGwpL2ksXG4gICAgbW9ybmluZzogL3Jhbm8vaSxcbiAgICBhZnRlcm5vb246IC9wb1xccypwbyjFgnxsKS9pLFxuICAgIGV2ZW5pbmc6IC93aWVjei9pLFxuICAgIG5pZ2h0OiAvbm9jL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFBvbGlzaCBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgUG9saXNoXG4gKiBAaXNvLTYzOS0yIHBvbFxuICogQGF1dGhvciBNYXRldXN6IERlcmtzIFtAZXJ0cnp5aWtzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZXJ0cnp5aWtzfVxuICogQGF1dGhvciBKdXN0IFJBRyBbQGp1c3RyYWdde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9qdXN0cmFnfVxuICogQGF1dGhvciBNaWtvbGFqIEdyenliIFtAbWlrb2xhamdyenliXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbWlrb2xhamdyenlifVxuICogQGF1dGhvciBNYXRldXN6IFRva2Fyc2tpIFtAbXV0aXN6XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbXV0aXN6fVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdwbCcsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdtZW5vcyBkZSB1bSBzZWd1bmRvJyxcbiAgICBvdGhlcjogJ21lbm9zIGRlIHt7Y291bnR9fSBzZWd1bmRvcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlZ3VuZG8nLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlZ3VuZG9zJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ21laW8gbWludXRvJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ21lbm9zIGRlIHVtIG1pbnV0bycsXG4gICAgb3RoZXI6ICdtZW5vcyBkZSB7e2NvdW50fX0gbWludXRvcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0bycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRvcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhcHJveGltYWRhbWVudGUgMSBob3JhJyxcbiAgICBvdGhlcjogJ2Fwcm94aW1hZGFtZW50ZSB7e2NvdW50fX0gaG9yYXMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG9yYScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG9yYXMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkaWEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRpYXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYXByb3hpbWFkYW1lbnRlIDEgbcOqcycsXG4gICAgLy8gVE9ET1xuICAgIG90aGVyOiAnYXByb3hpbWFkYW1lbnRlIHt7Y291bnR9fSBtZXNlcycgLy8gVE9ET1xuXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgbcOqcycsXG4gICAgLy8gVE9ET1xuICAgIG90aGVyOiAne3tjb3VudH19IG1lc2VzJyAvLyBUT0RPXG5cbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYXByb3hpbWFkYW1lbnRlIDEgbcOqcycsXG4gICAgb3RoZXI6ICdhcHJveGltYWRhbWVudGUge3tjb3VudH19IG1lc2VzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtw6pzJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhcHJveGltYWRhbWVudGUgMSBhbm8nLFxuICAgIG90aGVyOiAnYXByb3hpbWFkYW1lbnRlIHt7Y291bnR9fSBhbm9zJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIGFubycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gYW5vcydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ21haXMgZGUgMSBhbm8nLFxuICAgIG90aGVyOiAnbWFpcyBkZSB7e2NvdW50fX0gYW5vcydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAncXVhc2UgMSBhbm8nLFxuICAgIG90aGVyOiAncXVhc2Uge3tjb3VudH19IGFub3MnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnZGFxdWkgYSAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2jDoSAnICsgcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiBcIkVFRUUsIGQgJ2RlJyBNTU1NICdkZScgeVwiLFxuICBsb25nOiBcImQgJ2RlJyBNTU1NICdkZScgeVwiLFxuICBtZWRpdW06IFwiZCAnZGUnIE1NTSAnZGUnIHlcIixcbiAgc2hvcnQ6ICdkZC9NTS95J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICfDoHMnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ8Ogcycge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbmEgw7psdGltYScgZWVlZSAnw6BzJyBwXCIsXG4gIHllc3RlcmRheTogXCInb250ZW0gw6BzJyBwXCIsXG4gIHRvZGF5OiBcIidob2plIMOgcycgcFwiLFxuICB0b21vcnJvdzogXCInYW1hbmjDoyDDoHMnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnw6BzJyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlcikge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgcmV0dXJuIG51bWJlciArICfCuic7XG59XG5cbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydhQycsICdkQyddLFxuICBhYmJyZXZpYXRlZDogWydhLkMuJywgJ2QuQy4nXSxcbiAgd2lkZTogWydhbnRlcyBkZSBDcmlzdG8nLCAnZGVwb2lzIGRlIENyaXN0byddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1QxJywgJ1QyJywgJ1QzJywgJ1Q0J10sXG4gIHdpZGU6IFsnMcK6IHRyaW1lc3RyZScsICcywrogdHJpbWVzdHJlJywgJzPCuiB0cmltZXN0cmUnLCAnNMK6IHRyaW1lc3RyZSddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnaicsICdmJywgJ20nLCAnYScsICdtJywgJ2onLCAnaicsICdhJywgJ3MnLCAnbycsICduJywgJ2QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnamFuJywgJ2ZldicsICdtYXInLCAnYWJyJywgJ21haScsICdqdW4nLCAnanVsJywgJ2FnbycsICdzZXQnLCAnb3V0JywgJ25vdicsICdkZXonXSxcbiAgd2lkZTogWydqYW5laXJvJywgJ2ZldmVyZWlybycsICdtYXLDp28nLCAnYWJyaWwnLCAnbWFpbycsICdqdW5obycsICdqdWxobycsICdhZ29zdG8nLCAnc2V0ZW1icm8nLCAnb3V0dWJybycsICdub3ZlbWJybycsICdkZXplbWJybyddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2QnLCAncycsICd0JywgJ3EnLCAncScsICdzJywgJ3MnXSxcbiAgc2hvcnQ6IFsnZG9tJywgJ3NlZycsICd0ZXInLCAncXVhJywgJ3F1aScsICdzZXgnLCAnc8OhYiddLFxuICBhYmJyZXZpYXRlZDogWydkb20nLCAnc2VnJywgJ3RlcicsICdxdWEnLCAncXVpJywgJ3NleCcsICdzw6FiJ10sXG4gIHdpZGU6IFsnZG9taW5nbycsICdzZWd1bmRhLWZlaXJhJywgJ3RlcsOnYS1mZWlyYScsICdxdWFydGEtZmVpcmEnLCAncXVpbnRhLWZlaXJhJywgJ3NleHRhLWZlaXJhJywgJ3PDoWJhZG8nXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWVpYS1ub2l0ZScsXG4gICAgbm9vbjogJ21laW8tZGlhJyxcbiAgICBtb3JuaW5nOiAnbWFuaMOjJyxcbiAgICBhZnRlcm5vb246ICd0YXJkZScsXG4gICAgZXZlbmluZzogJ25vaXRlJyxcbiAgICBuaWdodDogJ21hZHJ1Z2FkYSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21laWEtbm9pdGUnLFxuICAgIG5vb246ICdtZWlvLWRpYScsXG4gICAgbW9ybmluZzogJ21hbmjDoycsXG4gICAgYWZ0ZXJub29uOiAndGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdub2l0ZScsXG4gICAgbmlnaHQ6ICdtYWRydWdhZGEnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21laWEtbm9pdGUnLFxuICAgIG5vb246ICdtZWlvLWRpYScsXG4gICAgbW9ybmluZzogJ21hbmjDoycsXG4gICAgYWZ0ZXJub29uOiAndGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdub2l0ZScsXG4gICAgbmlnaHQ6ICdtYWRydWdhZGEnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtZWlhLW5vaXRlJyxcbiAgICBub29uOiAnbWVpby1kaWEnLFxuICAgIG1vcm5pbmc6ICdkYSBtYW5ow6MnLFxuICAgIGFmdGVybm9vbjogJ2RhIHRhcmRlJyxcbiAgICBldmVuaW5nOiAnZGEgbm9pdGUnLFxuICAgIG5pZ2h0OiAnZGEgbWFkcnVnYWRhJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWVpYS1ub2l0ZScsXG4gICAgbm9vbjogJ21laW8tZGlhJyxcbiAgICBtb3JuaW5nOiAnZGEgbWFuaMOjJyxcbiAgICBhZnRlcm5vb246ICdkYSB0YXJkZScsXG4gICAgZXZlbmluZzogJ2RhIG5vaXRlJyxcbiAgICBuaWdodDogJ2RhIG1hZHJ1Z2FkYSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWVpYS1ub2l0ZScsXG4gICAgbm9vbjogJ21laW8tZGlhJyxcbiAgICBtb3JuaW5nOiAnZGEgbWFuaMOjJyxcbiAgICBhZnRlcm5vb246ICdkYSB0YXJkZScsXG4gICAgZXZlbmluZzogJ2RhIG5vaXRlJyxcbiAgICBuaWdodDogJ2RhIG1hZHJ1Z2FkYSdcbiAgfVxufTtcbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKMK6fMKqKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGFjfGRjfGF8ZCkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGFcXC4/XFxzP2NcXC4/fGFcXC4/XFxzP2VcXC4/XFxzP2NcXC4/fGRcXC4/XFxzP2NcXC4/fGVcXC4/XFxzP2NcXC4/KS9pLFxuICB3aWRlOiAvXihhbnRlcyBkZSBjcmlzdG98YW50ZXMgZGEgZXJhIGNvbXVtfGRlcG9pcyBkZSBjcmlzdG98ZXJhIGNvbXVtKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYWMvaSwgL15kYy9pXSxcbiAgd2lkZTogWy9eKGFudGVzIGRlIGNyaXN0b3xhbnRlcyBkYSBlcmEgY29tdW0pL2ksIC9eKGRlcG9pcyBkZSBjcmlzdG98ZXJhIGNvbXVtKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15UWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKMK6fMKqKT8gdHJpbWVzdHJlL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZXZ8bWFyfGFicnxtYWl8anVufGp1bHxhZ298c2V0fG91dHxub3Z8ZGV6KS9pLFxuICB3aWRlOiAvXihqYW5laXJvfGZldmVyZWlyb3xtYXLDp298YWJyaWx8bWFpb3xqdW5ob3xqdWxob3xhZ29zdG98c2V0ZW1icm98b3V0dWJyb3xub3ZlbWJyb3xkZXplbWJybykvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFiL2ksIC9ebWFpL2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWcvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bZHN0cV0vaSxcbiAgc2hvcnQ6IC9eKGRvbXxzZWd8dGVyfHF1YXxxdWl8c2V4fHNbw6FhXWIpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihkb218c2VnfHRlcnxxdWF8cXVpfHNleHxzW8OhYV1iKS9pLFxuICB3aWRlOiAvXihkb21pbmdvfHNlZ3VuZGEtP1xccz9mZWlyYXx0ZXLDp2EtP1xccz9mZWlyYXxxdWFydGEtP1xccz9mZWlyYXxxdWludGEtP1xccz9mZWlyYXxzZXh0YS0/XFxzP2ZlaXJhfHNbw6FhXWJhZG8pL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15kL2ksIC9ecy9pLCAvXnQvaSwgL15xL2ksIC9ecS9pLCAvXnMvaSwgL15zL2ldLFxuICBhbnk6IFsvXmQvaSwgL15zZWcvaSwgL150L2ksIC9ecXVhL2ksIC9ecXVpL2ksIC9ec2V4L2ksIC9ec1vDoWFdL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1laWEtP1xccz9ub2l0ZXxtZWlvLT9cXHM/ZGlhfChkYSkgKG1hbmhbw6NhXXx0YXJkZXxub2l0ZXxtYWRydWdhZGEpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1laWEtP1xccz9ub2l0ZXxtZWlvLT9cXHM/ZGlhfChkYSkgKG1hbmhbw6NhXXx0YXJkZXxub2l0ZXxtYWRydWdhZGEpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWVpYS9pLFxuICAgIG5vb246IC9ebWVpby9pLFxuICAgIG1vcm5pbmc6IC9tYW5oW8OjYV0vaSxcbiAgICBhZnRlcm5vb246IC90YXJkZS9pLFxuICAgIGV2ZW5pbmc6IC9ub2l0ZS9pLFxuICAgIG5pZ2h0OiAvbWFkcnVnYWRhL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFBvcnR1Z3Vlc2UgbG9jYWxlLlxuICogQGxhbmd1YWdlIFBvcnR1Z3Vlc2VcbiAqIEBpc28tNjM5LTIgcG9yXG4gKiBAYXV0aG9yIETDoXJpbyBGcmVpcmUgW0BkZnJlaXJlXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZGZyZWlyZX1cbiAqIEBhdXRob3IgQWRyacOhbiBkZSBsYSBSb3NhIFtAYWRybV17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2Fkcm19XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ3B0JyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAxXG4gICAgLyogTW9uZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNFxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ21lbm9zIGRlIHVtIHNlZ3VuZG8nLFxuICAgIG90aGVyOiAnbWVub3MgZGUge3tjb3VudH19IHNlZ3VuZG9zJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2VndW5kbycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2VndW5kb3MnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnbWVpbyBtaW51dG8nLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbWVub3MgZGUgdW0gbWludXRvJyxcbiAgICBvdGhlcjogJ21lbm9zIGRlIHt7Y291bnR9fSBtaW51dG9zJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRvJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dG9zJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2NlcmNhIGRlIDEgaG9yYScsXG4gICAgb3RoZXI6ICdjZXJjYSBkZSB7e2NvdW50fX0gaG9yYXMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG9yYScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG9yYXMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkaWEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRpYXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnY2VyY2EgZGUgMSBtw6pzJyxcbiAgICBvdGhlcjogJ2NlcmNhIGRlIHt7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSBtw6pzJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnY2VyY2EgZGUgMSBtw6pzJyxcbiAgICBvdGhlcjogJ2NlcmNhIGRlIHt7Y291bnR9fSBtZXNlcydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbcOqcycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWVzZXMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnY2VyY2EgZGUgMSBhbm8nLFxuICAgIG90aGVyOiAnY2VyY2EgZGUge3tjb3VudH19IGFub3MnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgYW5vJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBhbm9zJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnbWFpcyBkZSAxIGFubycsXG4gICAgb3RoZXI6ICdtYWlzIGRlIHt7Y291bnR9fSBhbm9zJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdxdWFzZSAxIGFubycsXG4gICAgb3RoZXI6ICdxdWFzZSB7e2NvdW50fX0gYW5vcydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdlbSAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2jDoSAnICsgcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiBcIkVFRUUsIGQgJ2RlJyBNTU1NICdkZScgeVwiLFxuICBsb25nOiBcImQgJ2RlJyBNTU1NICdkZScgeVwiLFxuICBtZWRpdW06ICdkIE1NTSB5JyxcbiAgc2hvcnQ6ICdkZC9NTS95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICfDoHMnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ8Ogcycge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogZnVuY3Rpb24gKGRhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgICB2YXIgd2Vla2RheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxhc3QgPSB3ZWVrZGF5ID09PSAwIHx8IHdlZWtkYXkgPT09IDYgPyAnw7psdGltbycgOiAnw7psdGltYSc7XG4gICAgcmV0dXJuIFwiJ1wiICsgbGFzdCArIFwiJyBlZWVlICfDoHMnIHBcIjtcbiAgfSxcbiAgeWVzdGVyZGF5OiBcIidvbnRlbSDDoHMnIHBcIixcbiAgdG9kYXk6IFwiJ2hvamUgw6BzJyBwXCIsXG4gIHRvbW9ycm93OiBcIidhbWFuaMOjIMOgcycgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICfDoHMnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICB2YXIgZm9ybWF0ID0gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0FDJywgJ0RDJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0FDJywgJ0RDJ10sXG4gIHdpZGU6IFsnYW50ZXMgZGUgY3Jpc3RvJywgJ2RlcG9pcyBkZSBjcmlzdG8nXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydUMScsICdUMicsICdUMycsICdUNCddLFxuICB3aWRlOiBbJzHCuiB0cmltZXN0cmUnLCAnMsK6IHRyaW1lc3RyZScsICczwrogdHJpbWVzdHJlJywgJzTCuiB0cmltZXN0cmUnXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2onLCAnZicsICdtJywgJ2EnLCAnbScsICdqJywgJ2onLCAnYScsICdzJywgJ28nLCAnbicsICdkJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbicsICdmZXYnLCAnbWFyJywgJ2FicicsICdtYWknLCAnanVuJywgJ2p1bCcsICdhZ28nLCAnc2V0JywgJ291dCcsICdub3YnLCAnZGV6J10sXG4gIHdpZGU6IFsnamFuZWlybycsICdmZXZlcmVpcm8nLCAnbWFyw6dvJywgJ2FicmlsJywgJ21haW8nLCAnanVuaG8nLCAnanVsaG8nLCAnYWdvc3RvJywgJ3NldGVtYnJvJywgJ291dHVicm8nLCAnbm92ZW1icm8nLCAnZGV6ZW1icm8nXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydkbycsICcywqonLCAnM8KqJywgJzTCqicsICc1wqonLCAnNsKqJywgJ3PDoSddLFxuICBzaG9ydDogWydkbycsICcywqonLCAnM8KqJywgJzTCqicsICc1wqonLCAnNsKqJywgJ3PDoSddLFxuICBhYmJyZXZpYXRlZDogWydkb20nLCAnc2VnJywgJ3RlcicsICdxdWEnLCAncXVpJywgJ3NleCcsICdzw6FiJ10sXG4gIHdpZGU6IFsnZG9taW5nbycsICdzZWd1bmRhJywgJ3RlcsOnYScsICdxdWFydGEnLCAncXVpbnRhJywgJ3NleHRhJywgJ3PDoWJhZG8nXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21uJyxcbiAgICBub29uOiAnbWQnLFxuICAgIG1vcm5pbmc6ICdtYW5ow6MnLFxuICAgIGFmdGVybm9vbjogJ3RhcmRlJyxcbiAgICBldmVuaW5nOiAndGFyZGUnLFxuICAgIG5pZ2h0OiAnbm9pdGUnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtZWlhLW5vaXRlJyxcbiAgICBub29uOiAnbWVpby1kaWEnLFxuICAgIG1vcm5pbmc6ICdtYW5ow6MnLFxuICAgIGFmdGVybm9vbjogJ3RhcmRlJyxcbiAgICBldmVuaW5nOiAndGFyZGUnLFxuICAgIG5pZ2h0OiAnbm9pdGUnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtZWlhLW5vaXRlJyxcbiAgICBub29uOiAnbWVpby1kaWEnLFxuICAgIG1vcm5pbmc6ICdtYW5ow6MnLFxuICAgIGFmdGVybm9vbjogJ3RhcmRlJyxcbiAgICBldmVuaW5nOiAndGFyZGUnLFxuICAgIG5pZ2h0OiAnbm9pdGUnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbW4nLFxuICAgIG5vb246ICdtZCcsXG4gICAgbW9ybmluZzogJ2RhIG1hbmjDoycsXG4gICAgYWZ0ZXJub29uOiAnZGEgdGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdkYSB0YXJkZScsXG4gICAgbmlnaHQ6ICdkYSBub2l0ZSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21laWEtbm9pdGUnLFxuICAgIG5vb246ICdtZWlvLWRpYScsXG4gICAgbW9ybmluZzogJ2RhIG1hbmjDoycsXG4gICAgYWZ0ZXJub29uOiAnZGEgdGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdkYSB0YXJkZScsXG4gICAgbmlnaHQ6ICdkYSBub2l0ZSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21laWEtbm9pdGUnLFxuICAgIG5vb246ICdtZWlvLWRpYScsXG4gICAgbW9ybmluZzogJ2RhIG1hbmjDoycsXG4gICAgYWZ0ZXJub29uOiAnZGEgdGFyZGUnLFxuICAgIGV2ZW5pbmc6ICdkYSB0YXJkZScsXG4gICAgbmlnaHQ6ICdkYSBub2l0ZSdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KTtcblxuICBpZiAodW5pdCA9PT0gJ3dlZWsnIHx8IHVuaXQgPT09ICdpc29XZWVrJykge1xuICAgIHJldHVybiBudW1iZXIgKyAnwqonO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICfCuic7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspW8K6wqpvXT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGFjfGRjfGF8ZCkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGFcXC4/XFxzP2NcXC4/fGRcXC4/XFxzP2NcXC4/KS9pLFxuICB3aWRlOiAvXihhbnRlcyBkZSBjcmlzdG98ZGVwb2lzIGRlIGNyaXN0bykvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmFjL2ksIC9eZGMvaV0sXG4gIHdpZGU6IFsvXmFudGVzIGRlIGNyaXN0by9pLCAvXmRlcG9pcyBkZSBjcmlzdG8vaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eVFsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSjCuik/IHRyaW1lc3RyZS9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYWpzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZldnxtYXJ8YWJyfG1haXxqdW58anVsfGFnb3xzZXR8b3V0fG5vdnxkZXopL2ksXG4gIHdpZGU6IC9eKGphbmVpcm98ZmV2ZXJlaXJvfG1hcsOnb3xhYnJpbHxtYWlvfGp1bmhvfGp1bGhvfGFnb3N0b3xzZXRlbWJyb3xvdXR1YnJvfG5vdmVtYnJvfGRlemVtYnJvKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mZXYvaSwgL15tYXIvaSwgL15hYnIvaSwgL15tYWkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hZ28vaSwgL15zZXQvaSwgL15vdXQvaSwgL15ub3YvaSwgL15kZXovaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihkb218WzIzNDU2XcKqP3xzW2HDoV1iKS9pLFxuICBzaG9ydDogL14oZG9tfFsyMzQ1Nl3Cqj98c1thw6FdYikvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGRvbXxzZWd8dGVyfHF1YXxxdWl8c2V4fHNbYcOhXWIpL2ksXG4gIHdpZGU6IC9eKGRvbWluZ298KHNlZ3VuZGF8dGVyW2PDp11hfHF1YXJ0YXxxdWludGF8c2V4dGEpKFstIF1mZWlyYSk/fHNbYcOhXWJhZG8pL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgc2hvcnQ6IFsvXmQvaSwgL14yL2ksIC9eMy9pLCAvXjQvaSwgL141L2ksIC9eNi9pLCAvXnNbYcOhXS9pXSxcbiAgbmFycm93OiBbL15kL2ksIC9eMi9pLCAvXjMvaSwgL140L2ksIC9eNS9pLCAvXjYvaSwgL15zW2HDoV0vaV0sXG4gIGFueTogWy9eZC9pLCAvXnNlZy9pLCAvXnQvaSwgL15xdWEvaSwgL15xdWkvaSwgL15zZXgvaSwgL15zW2HDoV1iL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1ufG1kfChkYSkgKG1hbmjDo3x0YXJkZXxub2l0ZSkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWVpYVstXFxzXW5vaXRlfG1laW9bLVxcc11kaWF8KGRhKSAobWFuaMOjfHRhcmRlfG5vaXRlKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1ufF5tZWlhWy1cXHNdbm9pdGUvaSxcbiAgICBub29uOiAvXm1kfF5tZWlvWy1cXHNdZGlhL2ksXG4gICAgbW9ybmluZzogL21hbmjDoy9pLFxuICAgIGFmdGVybm9vbjogL3RhcmRlL2ksXG4gICAgZXZlbmluZzogL3RhcmRlL2ksXG4gICAgbmlnaHQ6IC9ub2l0ZS9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBQb3J0dWd1ZXNlIGxvY2FsZSAoQnJhemlsKS5cbiAqIEBsYW5ndWFnZSBQb3J0dWd1ZXNlXG4gKiBAaXNvLTYzOS0yIHBvclxuICogQGF1dGhvciBMdWNhcyBEdWFpbGliZSBbQGR1YWlsaWJlXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZHVhaWxpYmV9XG4gKiBAYXV0aG9yIFlhZ28gQ2FyYmFsbG8gW0B5YWdvY2FyYmFsbG9de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9ZYWdvQ2FyYmFsbG99XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ3B0LUJSJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ21haSBwdcibaW4gZGUgbyBzZWN1bmTEgycsXG4gICAgb3RoZXI6ICdtYWkgcHXIm2luIGRlIHt7Y291bnR9fSBzZWN1bmRlJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2VjdW5kxIMnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY3VuZGUnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnanVtxIN0YXRlIGRlIG1pbnV0JyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ21haSBwdcibaW4gZGUgdW4gbWludXQnLFxuICAgIG90aGVyOiAnbWFpIHB1yJtpbiBkZSB7e2NvdW50fX0gbWludXRlJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZSdcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdjaXJjYSAxIG9yxIMnLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IG9yZSdcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBvcsSDJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBvcmUnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSB6aScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gemlsZSdcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdjaXJjYSBvIHPEg3B0xINtw6JuxIMnLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IHPEg3B0xINtw6JuaSdcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSBzxINwdMSDbcOibsSDJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzxINwdMSDbcOibmknXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2NpcmNhIDEgbHVuxIMnLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IGx1bmknXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIGx1bsSDJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBsdW5pJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2NpcmNhIDEgYW4nLFxuICAgIG90aGVyOiAnY2lyY2Ege3tjb3VudH19IGFuaSdcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSBhbicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gYW5pJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAncGVzdGUgMSBhbicsXG4gICAgb3RoZXI6ICdwZXN0ZSB7e2NvdW50fX0gYW5pJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhcHJvYXBlIDEgYW4nLFxuICAgIG90aGVyOiAnYXByb2FwZSB7e2NvdW50fX0gYW5pJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ8OubiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyDDrm4gdXJtxIMnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgZCBNTU1NIHl5eXknLFxuICBsb25nOiAnZCBNTU1NIHl5eXknLFxuICBtZWRpdW06ICdkIE1NTSB5eXl5JyxcbiAgc2hvcnQ6ICdkZC9NTS95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdsYScge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnbGEnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiZWVlZSAndHJlY3V0xIMgbGEnIHBcIixcbiAgeWVzdGVyZGF5OiBcIidpZXJpIGxhJyBwXCIsXG4gIHRvZGF5OiBcIidhc3TEg3ppIGxhJyBwXCIsXG4gIHRvbW9ycm93OiBcIidtw6JpbmUgbGEnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAndmlpdG9hcmUgbGEnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ8OOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnw44uZC5DLicsICdELkMuJ10sXG4gIHdpZGU6IFsnw45uYWludGUgZGUgQ3Jpc3RvcycsICdEdXDEgyBDcmlzdG9zJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnVDEnLCAnVDInLCAnVDMnLCAnVDQnXSxcbiAgd2lkZTogWydwcmltdWwgdHJpbWVzdHJ1JywgJ2FsIGRvaWxlYSB0cmltZXN0cnUnLCAnYWwgdHJlaWxlYSB0cmltZXN0cnUnLCAnYWwgcGF0cnVsZWEgdHJpbWVzdHJ1J11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydJJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSScsICdJJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydpYW4nLCAnZmViJywgJ21hcicsICdhcHInLCAnbWFpJywgJ2l1bicsICdpdWwnLCAnYXVnJywgJ3NlcCcsICdvY3QnLCAnbm9pJywgJ2RlYyddLFxuICB3aWRlOiBbJ2lhbnVhcmllJywgJ2ZlYnJ1YXJpZScsICdtYXJ0aWUnLCAnYXByaWxpZScsICdtYWknLCAnaXVuaWUnLCAnaXVsaWUnLCAnYXVndXN0JywgJ3NlcHRlbWJyaWUnLCAnb2N0b21icmllJywgJ25vaWVtYnJpZScsICdkZWNlbWJyaWUnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydkJywgJ2wnLCAnbScsICdtJywgJ2onLCAndicsICdzJ10sXG4gIHNob3J0OiBbJ2R1JywgJ2x1JywgJ21hJywgJ21pJywgJ2pvJywgJ3ZpJywgJ3PDoiddLFxuICBhYmJyZXZpYXRlZDogWydkdW0nLCAnbHVuJywgJ21hcicsICdtaWUnLCAnam9pJywgJ3ZpbicsICdzw6JtJ10sXG4gIHdpZGU6IFsnZHVtaW5pY8SDJywgJ2x1bmknLCAnbWFyyJtpJywgJ21pZXJjdXJpJywgJ2pvaScsICd2aW5lcmknLCAnc8OibWLEg3TEgyddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbW4nLFxuICAgIG5vb246ICdhbWknLFxuICAgIG1vcm5pbmc6ICdkaW0nLFxuICAgIGFmdGVybm9vbjogJ2RhJyxcbiAgICBldmVuaW5nOiAncycsXG4gICAgbmlnaHQ6ICduJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWllenVsIG5vcMibaWknLFxuICAgIG5vb246ICdhbWlhesSDJyxcbiAgICBtb3JuaW5nOiAnZGltaW5lYcibxIMnLFxuICAgIGFmdGVybm9vbjogJ2R1cMSDLWFtaWF6xIMnLFxuICAgIGV2ZW5pbmc6ICdzZWFyxIMnLFxuICAgIG5pZ2h0OiAnbm9hcHRlJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWllenVsIG5vcMibaWknLFxuICAgIG5vb246ICdhbWlhesSDJyxcbiAgICBtb3JuaW5nOiAnZGltaW5lYcibxIMnLFxuICAgIGFmdGVybm9vbjogJ2R1cMSDLWFtaWF6xIMnLFxuICAgIGV2ZW5pbmc6ICdzZWFyxIMnLFxuICAgIG5pZ2h0OiAnbm9hcHRlJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21uJyxcbiAgICBub29uOiAnYW1pYXrEgycsXG4gICAgbW9ybmluZzogJ2RpbWluZWHIm8SDJyxcbiAgICBhZnRlcm5vb246ICdkdXDEgy1hbWlhesSDJyxcbiAgICBldmVuaW5nOiAnc2VhcsSDJyxcbiAgICBuaWdodDogJ25vYXB0ZSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZXp1bCBub3DIm2lpJyxcbiAgICBub29uOiAnYW1pYXrEgycsXG4gICAgbW9ybmluZzogJ2RpbWluZWHIm8SDJyxcbiAgICBhZnRlcm5vb246ICdkdXDEgy1hbWlhesSDJyxcbiAgICBldmVuaW5nOiAnc2VhcsSDJyxcbiAgICBuaWdodDogJ25vYXB0ZSdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZXp1bCBub3DIm2lpJyxcbiAgICBub29uOiAnYW1pYXrEgycsXG4gICAgbW9ybmluZzogJ2RpbWluZWHIm8SDJyxcbiAgICBhZnRlcm5vb246ICdkdXDEgy1hbWlhesSDJyxcbiAgICBldmVuaW5nOiAnc2VhcsSDJyxcbiAgICBuaWdodDogJ25vYXB0ZSdcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlcikge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgcmV0dXJuIFN0cmluZyhudW1iZXIpO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKMOOfEQpL2ksXG4gIGFiYnJldmlhdGVkOiAvXijDjlxcLj9cXHM/ZFxcLj9cXHM/Q1xcLj98w45cXC4/XFxzP2VcXC4/XFxzP25cXC4/fERcXC4/XFxzP0NcXC4/fGVcXC4/XFxzP25cXC4/KS9pLFxuICB3aWRlOiAvXijDjm5haW50ZSBkZSBDcmlzdG9zfMOObmFpbnRlYSBlcmVpIG5vYXN0cmV8RHVwxIMgQ3Jpc3Rvc3xFcmEgbm9hc3RyxIMpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL17DjkMvaSwgL15EQy9pXSxcbiAgd2lkZTogWy9eKMOObmFpbnRlIGRlIENyaXN0b3N8w45uYWludGVhIGVyZWkgbm9hc3RyZSkvaSwgL14oRHVwxIMgQ3Jpc3Rvc3xFcmEgbm9hc3RyxIMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXlRbMTIzNF0vaSxcbiAgd2lkZTogL150cmltZXN0cnVsIFsxMjM0XS9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15baWZtYWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oaWFufGZlYnxtYXJ8YXByfG1haXxpdW58aXVsfGF1Z3xzZXB8b2N0fG5vaXxkZWMpL2ksXG4gIHdpZGU6IC9eKGlhbnVhcmllfGZlYnJ1YXJpZXxtYXJ0aWV8YXByaWxpZXxtYWl8aXVuaWV8aXVsaWV8YXVndXN0fHNlcHRlbWJyaWV8b2N0b21icmllfG5vaWVtYnJpZXxkZWNlbWJyaWUpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmkvaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eaS9pLCAvXmkvaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15pYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1haS9pLCAvXml1bi9pLCAvXml1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2RsbWp2c10vaSxcbiAgc2hvcnQ6IC9eKGR8bHxtYXxtaXxqfHZ8cykvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGR1bXxsdW58bWFyfG1pZXxqb3x2aXxzw6IpL2ksXG4gIHdpZGU6IC9eKGR1bWluaWNhfGx1bml8bWFyxaNpfG1pZXJjdXJpfGpvaXx2aW5lcml8c8OibWLEg3TEgykvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmQvaSwgL15sL2ksIC9ebS9pLCAvXm0vaSwgL15qL2ksIC9edi9pLCAvXnMvaV0sXG4gIGFueTogWy9eZC9pLCAvXmwvaSwgL15tYS9pLCAvXm1pL2ksIC9eai9pLCAvXnYvaSwgL15zL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1ufGF8KGRpbWluZWHFo2F8ZHVwxIMtYW1pYXphfHNlYXJhfG5vYXB0ZWEpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZXp1bCBub3DIm2lpfGFtaWF6YXwoZGltaW5lYcWjYXxkdXDEgy1hbWlhemF8c2VhcmF8bm9hcHRlYSkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15tbi9pLFxuICAgIG5vb246IC9hbWlhemEvaSxcbiAgICBtb3JuaW5nOiAvZGltaW5lYcWjYS9pLFxuICAgIGFmdGVybm9vbjogL2R1cMSDLWFtaWF6YS9pLFxuICAgIGV2ZW5pbmc6IC9zZWFyYS9pLFxuICAgIG5pZ2h0OiAvbm9hcHRlYS9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBSb21hbmlhbiBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgUm9tYW5pYW5cbiAqIEBpc28tNjM5LTIgcm9uXG4gKiBAYXV0aG9yIFNlcmdpdSBNdW50ZWFudSBbQGpzZXJnaXVde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9qc2VyZ2l1fVxuICogQGF1dGhvciBBZHJpYW4gT2NuZWFudSBbQGFvY25lYW51XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYW9jbmVhbnV9XG4gKiBAYXV0aG9yIE1paGFpIE9jbmVhbnUgW0BnYW5kZXNjXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ2FuZGVzY31cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAncm8nLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiZnVuY3Rpb24gZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50KSB7XG4gIC8vIHNjaGVtZSBmb3IgY291bnQ9MSBleGlzdHNcbiAgaWYgKHNjaGVtZS5vbmUgIT09IHVuZGVmaW5lZCAmJiBjb3VudCA9PT0gMSkge1xuICAgIHJldHVybiBzY2hlbWUub25lO1xuICB9XG5cbiAgdmFyIHJlbTEwID0gY291bnQgJSAxMDtcbiAgdmFyIHJlbTEwMCA9IGNvdW50ICUgMTAwOyAvLyAxLCAyMSwgMzEsIC4uLlxuXG4gIGlmIChyZW0xMCA9PT0gMSAmJiByZW0xMDAgIT09IDExKSB7XG4gICAgcmV0dXJuIHNjaGVtZS5zaW5ndWxhck5vbWluYXRpdmUucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpOyAvLyAyLCAzLCA0LCAyMiwgMjMsIDI0LCAzMiAuLi5cbiAgfSBlbHNlIGlmIChyZW0xMCA+PSAyICYmIHJlbTEwIDw9IDQgJiYgKHJlbTEwMCA8IDEwIHx8IHJlbTEwMCA+IDIwKSkge1xuICAgIHJldHVybiBzY2hlbWUuc2luZ3VsYXJHZW5pdGl2ZS5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7IC8vIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgLi4uXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNjaGVtZS5wbHVyYWxHZW5pdGl2ZS5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZVRva2VuRm4oc2NoZW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoY291bnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIGlmIChzY2hlbWUuZnV0dXJlKSB7XG4gICAgICAgICAgcmV0dXJuIGRlY2xlbnNpb24oc2NoZW1lLmZ1dHVyZSwgY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAn0YfQtdGA0LXQtyAnICsgZGVjbGVuc2lvbihzY2hlbWUucmVndWxhciwgY291bnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2NoZW1lLnBhc3QpIHtcbiAgICAgICAgICByZXR1cm4gZGVjbGVuc2lvbihzY2hlbWUucGFzdCwgY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWNsZW5zaW9uKHNjaGVtZS5yZWd1bGFyLCBjb3VudCkgKyAnINC90LDQt9Cw0LQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZWNsZW5zaW9uKHNjaGVtZS5yZWd1bGFyLCBjb3VudCk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBvbmU6ICfQvNC10L3RjNGI0LUg0YHQtdC60YPQvdC00YsnLFxuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LzQtdC90YzRiNC1IHt7Y291bnR9fSDRgdC10LrRg9C90LTRiycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LzQtdC90YzRiNC1IHt7Y291bnR9fSDRgdC10LrRg9C90LQnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQvNC10L3RjNGI0LUge3tjb3VudH19INGB0LXQutGD0L3QtCdcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgb25lOiAn0LzQtdC90YzRiNC1LCDRh9C10Lwg0YfQtdGA0LXQtyDRgdC10LrRg9C90LTRgycsXG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvNC10L3RjNGI0LUsINGH0LXQvCDRh9C10YDQtdC3IHt7Y291bnR9fSDRgdC10LrRg9C90LTRgycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LzQtdC90YzRiNC1LCDRh9C10Lwg0YfQtdGA0LXQtyB7e2NvdW50fX0g0YHQtdC60YPQvdC00YsnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQvNC10L3RjNGI0LUsINGH0LXQvCDRh9C10YDQtdC3IHt7Y291bnR9fSDRgdC10LrRg9C90LQnXG4gICAgfVxuICB9KSxcbiAgeFNlY29uZHM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0YHQtdC60YPQvdC00LAnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LTRiycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LQnXG4gICAgfSxcbiAgICBwYXN0OiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0YHQtdC60YPQvdC00YMg0L3QsNC30LDQtCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INGB0LXQutGD0L3QtNGLINC90LDQt9Cw0LQnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICd7e2NvdW50fX0g0YHQtdC60YPQvdC0INC90LDQt9Cw0LQnXG4gICAgfSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9GH0LXRgNC10Lcge3tjb3VudH19INGB0LXQutGD0L3QtNGDJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfRh9C10YDQtdC3IHt7Y291bnR9fSDRgdC10LrRg9C90LTRiycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9GH0LXRgNC10Lcge3tjb3VudH19INGB0LXQutGD0L3QtCdcbiAgICB9XG4gIH0pLFxuICBoYWxmQU1pbnV0ZTogZnVuY3Rpb24gKF8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIHJldHVybiAn0YfQtdGA0LXQtyDQv9C+0LvQvNC40L3Rg9GC0YsnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICfQv9C+0LvQvNC40L3Rg9GC0Ysg0L3QsNC30LDQtCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICfQv9C+0LvQvNC40L3Rg9GC0YsnO1xuICB9LFxuICBsZXNzVGhhblhNaW51dGVzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgb25lOiAn0LzQtdC90YzRiNC1INC80LjQvdGD0YLRiycsXG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvNC10L3RjNGI0LUge3tjb3VudH19INC80LjQvdGD0YLRiycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LzQtdC90YzRiNC1IHt7Y291bnR9fSDQvNC40L3Rg9GCJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0LzQtdC90YzRiNC1IHt7Y291bnR9fSDQvNC40L3Rg9GCJ1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBvbmU6ICfQvNC10L3RjNGI0LUsINGH0LXQvCDRh9C10YDQtdC3INC80LjQvdGD0YLRgycsXG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvNC10L3RjNGI0LUsINGH0LXQvCDRh9C10YDQtdC3IHt7Y291bnR9fSDQvNC40L3Rg9GC0YMnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C80LXQvdGM0YjQtSwg0YfQtdC8INGH0LXRgNC10Lcge3tjb3VudH19INC80LjQvdGD0YLRiycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C80LXQvdGM0YjQtSwg0YfQtdC8INGH0LXRgNC10Lcge3tjb3VudH19INC80LjQvdGD0YInXG4gICAgfVxuICB9KSxcbiAgeE1pbnV0ZXM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0LzQuNC90YPRgtCwJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICd7e2NvdW50fX0g0LzQuNC90YPRgtGLJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAne3tjb3VudH19INC80LjQvdGD0YInXG4gICAgfSxcbiAgICBwYXN0OiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0LzQuNC90YPRgtGDINC90LDQt9Cw0LQnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDQvNC40L3Rg9GC0Ysg0L3QsNC30LDQtCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDQvNC40L3Rg9GCINC90LDQt9Cw0LQnXG4gICAgfSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9GH0LXRgNC10Lcge3tjb3VudH19INC80LjQvdGD0YLRgycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0YfQtdGA0LXQtyB7e2NvdW50fX0g0LzQuNC90YPRgtGLJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0YfQtdGA0LXQtyB7e2NvdW50fX0g0LzQuNC90YPRgidcbiAgICB9XG4gIH0pLFxuICBhYm91dFhIb3VyczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9C+0LrQvtC70L4ge3tjb3VudH19INGH0LDRgdCwJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQvtC60L7Qu9C+IHt7Y291bnR9fSDRh9Cw0YHQvtCyJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L7QutC+0LvQviB7e2NvdW50fX0g0YfQsNGB0L7QsidcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/RgNC40LHQu9C40LfQuNGC0LXQu9GM0L3QviDRh9C10YDQtdC3IHt7Y291bnR9fSDRh9Cw0YEnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30LjRgtC10LvRjNC90L4g0YfQtdGA0LXQtyB7e2NvdW50fX0g0YfQsNGB0LAnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQv9GA0LjQsdC70LjQt9C40YLQtdC70YzQvdC+INGH0LXRgNC10Lcge3tjb3VudH19INGH0LDRgdC+0LInXG4gICAgfVxuICB9KSxcbiAgeEhvdXJzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INGH0LDRgScsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INGH0LDRgdCwJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAne3tjb3VudH19INGH0LDRgdC+0LInXG4gICAgfVxuICB9KSxcbiAgeERheXM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0LTQtdC90YwnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDQtNC90Y8nLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICd7e2NvdW50fX0g0LTQvdC10LknXG4gICAgfVxuICB9KSxcbiAgYWJvdXRYV2Vla3M6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvtC60L7Qu9C+IHt7Y291bnR9fSDQvdC10LTQtdC70LgnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C+0LrQvtC70L4ge3tjb3VudH19INC90LXQtNC10LvRjCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C+0LrQvtC70L4ge3tjb3VudH19INC90LXQtNC10LvRjCdcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/RgNC40LHQu9C40LfQuNGC0LXQu9GM0L3QviDRh9C10YDQtdC3IHt7Y291bnR9fSDQvdC10LTQtdC70Y4nLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30LjRgtC10LvRjNC90L4g0YfQtdGA0LXQtyB7e2NvdW50fX0g0L3QtdC00LXQu9C4JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQuNGC0LXQu9GM0L3QviDRh9C10YDQtdC3IHt7Y291bnR9fSDQvdC10LTQtdC70YwnXG4gICAgfVxuICB9KSxcbiAgeFdlZWtzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INC90LXQtNC10LvRjycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INC90LXQtNC10LvQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDQvdC10LTQtdC70YwnXG4gICAgfVxuICB9KSxcbiAgYWJvdXRYTW9udGhzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L7QutC+0LvQviB7e2NvdW50fX0g0LzQtdGB0Y/RhtCwJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQvtC60L7Qu9C+IHt7Y291bnR9fSDQvNC10YHRj9GG0LXQsicsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C+0LrQvtC70L4ge3tjb3VudH19INC80LXRgdGP0YbQtdCyJ1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQv9GA0LjQsdC70LjQt9C40YLQtdC70YzQvdC+INGH0LXRgNC10Lcge3tjb3VudH19INC80LXRgdGP0YYnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30LjRgtC10LvRjNC90L4g0YfQtdGA0LXQtyB7e2NvdW50fX0g0LzQtdGB0Y/RhtCwJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQuNGC0LXQu9GM0L3QviDRh9C10YDQtdC3IHt7Y291bnR9fSDQvNC10YHRj9GG0LXQsidcbiAgICB9XG4gIH0pLFxuICB4TW9udGhzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INC80LXRgdGP0YYnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDQvNC10YHRj9GG0LAnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICd7e2NvdW50fX0g0LzQtdGB0Y/RhtC10LInXG4gICAgfVxuICB9KSxcbiAgYWJvdXRYWWVhcnM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvtC60L7Qu9C+IHt7Y291bnR9fSDQs9C+0LTQsCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0L7QutC+0LvQviB7e2NvdW50fX0g0LvQtdGCJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L7QutC+0LvQviB7e2NvdW50fX0g0LvQtdGCJ1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQv9GA0LjQsdC70LjQt9C40YLQtdC70YzQvdC+INGH0LXRgNC10Lcge3tjb3VudH19INCz0L7QtCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQuNGC0LXQu9GM0L3QviDRh9C10YDQtdC3IHt7Y291bnR9fSDQs9C+0LTQsCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30LjRgtC10LvRjNC90L4g0YfQtdGA0LXQtyB7e2NvdW50fX0g0LvQtdGCJ1xuICAgIH1cbiAgfSksXG4gIHhZZWFyczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ3t7Y291bnR9fSDQs9C+0LQnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDQs9C+0LTQsCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDQu9C10YInXG4gICAgfVxuICB9KSxcbiAgb3ZlclhZZWFyczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9Cx0L7Qu9GM0YjQtSB7e2NvdW50fX0g0LPQvtC00LAnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9Cx0L7Qu9GM0YjQtSB7e2NvdW50fX0g0LvQtdGCJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0LHQvtC70YzRiNC1IHt7Y291bnR9fSDQu9C10YInXG4gICAgfSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9Cx0L7Qu9GM0YjQtSwg0YfQtdC8INGH0LXRgNC10Lcge3tjb3VudH19INCz0L7QtCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LHQvtC70YzRiNC1LCDRh9C10Lwg0YfQtdGA0LXQtyB7e2NvdW50fX0g0LPQvtC00LAnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQsdC+0LvRjNGI0LUsINGH0LXQvCDRh9C10YDQtdC3IHt7Y291bnR9fSDQu9C10YInXG4gICAgfVxuICB9KSxcbiAgYWxtb3N0WFllYXJzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/QvtGH0YLQuCB7e2NvdW50fX0g0LPQvtC0JyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQv9C+0YfRgtC4IHt7Y291bnR9fSDQs9C+0LTQsCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C/0L7Rh9GC0Lgge3tjb3VudH19INC70LXRgidcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/QvtGH0YLQuCDRh9C10YDQtdC3IHt7Y291bnR9fSDQs9C+0LQnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C/0L7Rh9GC0Lgg0YfQtdGA0LXQtyB7e2NvdW50fX0g0LPQvtC00LAnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQv9C+0YfRgtC4INGH0LXRgNC10Lcge3tjb3VudH19INC70LXRgidcbiAgICB9XG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dKGNvdW50LCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiRUVFRSwgZG8gTU1NTSB5ICfQsy4nXCIsXG4gIGxvbmc6IFwiZG8gTU1NTSB5ICfQsy4nXCIsXG4gIG1lZGl1bTogXCJkIE1NTSB5ICfQsy4nXCIsXG4gIHNob3J0OiAnZGQuTU0ueSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSDptbTpzcycsXG4gIHNob3J0OiAnSDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBhbnk6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJpbXBvcnQgaXNTYW1lVVRDV2VlayBmcm9tICcuLi8uLi8uLi8uLi9fbGliL2lzU2FtZVVUQ1dlZWsvaW5kZXguanMnO1xudmFyIGFjY3VzYXRpdmVXZWVrZGF5cyA9IFsn0LLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQv9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9Cy0YLQvtGA0L3QuNC6JywgJ9GB0YDQtdC00YMnLCAn0YfQtdGC0LLQtdGA0LMnLCAn0L/Rj9GC0L3QuNGG0YMnLCAn0YHRg9Cx0LHQvtGC0YMnXTtcblxuZnVuY3Rpb24gbGFzdFdlZWsoZGF5KSB7XG4gIHZhciB3ZWVrZGF5ID0gYWNjdXNhdGl2ZVdlZWtkYXlzW2RheV07XG5cbiAgc3dpdGNoIChkYXkpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gXCIn0LIg0L/RgNC+0YjQu9C+0LUgXCIgKyB3ZWVrZGF5ICsgXCIg0LInIHBcIjtcblxuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIFwiJ9CyINC/0YDQvtGI0LvRi9C5IFwiICsgd2Vla2RheSArIFwiINCyJyBwXCI7XG5cbiAgICBjYXNlIDM6XG4gICAgY2FzZSA1OlxuICAgIGNhc2UgNjpcbiAgICAgIHJldHVybiBcIifQsiDQv9GA0L7RiNC70YPRjiBcIiArIHdlZWtkYXkgKyBcIiDQsicgcFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRoaXNXZWVrKGRheSkge1xuICB2YXIgd2Vla2RheSA9IGFjY3VzYXRpdmVXZWVrZGF5c1tkYXldO1xuXG4gIGlmIChkYXkgPT09IDJcbiAgLyogVHVlICovXG4gICkge1xuICAgICAgcmV0dXJuIFwiJ9Cy0L4gXCIgKyB3ZWVrZGF5ICsgXCIg0LInIHBcIjtcbiAgICB9IGVsc2Uge1xuICAgIHJldHVybiBcIifQsiBcIiArIHdlZWtkYXkgKyBcIiDQsicgcFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5leHRXZWVrKGRheSkge1xuICB2YXIgd2Vla2RheSA9IGFjY3VzYXRpdmVXZWVrZGF5c1tkYXldO1xuXG4gIHN3aXRjaCAoZGF5KSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIFwiJ9CyINGB0LvQtdC00YPRjtGJ0LXQtSBcIiArIHdlZWtkYXkgKyBcIiDQsicgcFwiO1xuXG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gXCIn0LIg0YHQu9C10LTRg9GO0YnQuNC5IFwiICsgd2Vla2RheSArIFwiINCyJyBwXCI7XG5cbiAgICBjYXNlIDM6XG4gICAgY2FzZSA1OlxuICAgIGNhc2UgNjpcbiAgICAgIHJldHVybiBcIifQsiDRgdC70LXQtNGD0Y7RidGD0Y4gXCIgKyB3ZWVrZGF5ICsgXCIg0LInIHBcIjtcbiAgfVxufVxuXG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXNXZWVrKGRheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsYXN0V2VlayhkYXkpO1xuICAgIH1cbiAgfSxcbiAgeWVzdGVyZGF5OiBcIifQstGH0LXRgNCwINCyJyBwXCIsXG4gIHRvZGF5OiBcIifRgdC10LPQvtC00L3RjyDQsicgcFwiLFxuICB0b21vcnJvdzogXCIn0LfQsNCy0YLRgNCwINCyJyBwXCIsXG4gIG5leHRXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXNXZWVrKGRheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0V2VlayhkYXkpO1xuICAgIH1cbiAgfSxcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICB2YXIgZm9ybWF0ID0gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ9C00L4g0L0u0Y0uJywgJ9C9LtGNLiddLFxuICBhYmJyZXZpYXRlZDogWyfQtNC+INC9LiDRjS4nLCAn0L0uINGNLiddLFxuICB3aWRlOiBbJ9C00L4g0L3QsNGI0LXQuSDRjdGA0YsnLCAn0L3QsNGI0LXQuSDRjdGA0YsnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWycxLdC5INC60LIuJywgJzIt0Lkg0LrQsi4nLCAnMy3QuSDQutCyLicsICc0LdC5INC60LIuJ10sXG4gIHdpZGU6IFsnMS3QuSDQutCy0LDRgNGC0LDQuycsICcyLdC5INC60LLQsNGA0YLQsNC7JywgJzMt0Lkg0LrQstCw0YDRgtCw0LsnLCAnNC3QuSDQutCy0LDRgNGC0LDQuyddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn0K8nLCAn0KQnLCAn0JwnLCAn0JAnLCAn0JwnLCAn0JgnLCAn0JgnLCAn0JAnLCAn0KEnLCAn0J4nLCAn0J0nLCAn0JQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn0Y/QvdCyLicsICfRhNC10LIuJywgJ9C80LDRgNGCJywgJ9Cw0L/RgC4nLCAn0LzQsNC5JywgJ9C40Y7QvdGMJywgJ9C40Y7Qu9GMJywgJ9Cw0LLQsy4nLCAn0YHQtdC90YIuJywgJ9C+0LrRgi4nLCAn0L3QvtGP0LEuJywgJ9C00LXQui4nXSxcbiAgd2lkZTogWyfRj9C90LLQsNGA0YwnLCAn0YTQtdCy0YDQsNC70YwnLCAn0LzQsNGA0YInLCAn0LDQv9GA0LXQu9GMJywgJ9C80LDQuScsICfQuNGO0L3RjCcsICfQuNGO0LvRjCcsICfQsNCy0LPRg9GB0YInLCAn0YHQtdC90YLRj9Cx0YDRjCcsICfQvtC60YLRj9Cx0YDRjCcsICfQvdC+0Y/QsdGA0YwnLCAn0LTQtdC60LDQsdGA0YwnXVxufTtcbnZhciBmb3JtYXR0aW5nTW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfQrycsICfQpCcsICfQnCcsICfQkCcsICfQnCcsICfQmCcsICfQmCcsICfQkCcsICfQoScsICfQnicsICfQnScsICfQlCddLFxuICBhYmJyZXZpYXRlZDogWyfRj9C90LIuJywgJ9GE0LXQsi4nLCAn0LzQsNGALicsICfQsNC/0YAuJywgJ9C80LDRjycsICfQuNGO0L0uJywgJ9C40Y7Quy4nLCAn0LDQstCzLicsICfRgdC10L3Rgi4nLCAn0L7QutGCLicsICfQvdC+0Y/QsS4nLCAn0LTQtdC6LiddLFxuICB3aWRlOiBbJ9GP0L3QstCw0YDRjycsICfRhNC10LLRgNCw0LvRjycsICfQvNCw0YDRgtCwJywgJ9Cw0L/RgNC10LvRjycsICfQvNCw0Y8nLCAn0LjRjtC90Y8nLCAn0LjRjtC70Y8nLCAn0LDQstCz0YPRgdGC0LAnLCAn0YHQtdC90YLRj9Cx0YDRjycsICfQvtC60YLRj9Cx0YDRjycsICfQvdC+0Y/QsdGA0Y8nLCAn0LTQtdC60LDQsdGA0Y8nXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfQkicsICfQnycsICfQkicsICfQoScsICfQpycsICfQnycsICfQoSddLFxuICBzaG9ydDogWyfQstGBJywgJ9C/0L0nLCAn0LLRgicsICfRgdGAJywgJ9GH0YInLCAn0L/RgicsICfRgdCxJ10sXG4gIGFiYnJldmlhdGVkOiBbJ9Cy0YHQuicsICfQv9C90LQnLCAn0LLRgtGAJywgJ9GB0YDQtCcsICfRh9GC0LInLCAn0L/RgtC9JywgJ9GB0YPQsSddLFxuICB3aWRlOiBbJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LUnLCAn0L/QvtC90LXQtNC10LvRjNC90LjQuicsICfQstGC0L7RgNC90LjQuicsICfRgdGA0LXQtNCwJywgJ9GH0LXRgtCy0LXRgNCzJywgJ9C/0Y/RgtC90LjRhtCwJywgJ9GB0YPQsdCx0L7RgtCwJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9C+0LvQvS4nLFxuICAgIG5vb246ICfQv9C+0LvQtC4nLFxuICAgIG1vcm5pbmc6ICfRg9GC0YDQvicsXG4gICAgYWZ0ZXJub29uOiAn0LTQtdC90YwnLFxuICAgIGV2ZW5pbmc6ICfQstC10YcuJyxcbiAgICBuaWdodDogJ9C90L7Rh9GMJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn0JTQnycsXG4gICAgcG06ICfQn9CfJyxcbiAgICBtaWRuaWdodDogJ9C/0L7Qu9C9LicsXG4gICAgbm9vbjogJ9C/0L7Qu9C0LicsXG4gICAgbW9ybmluZzogJ9GD0YLRgNC+JyxcbiAgICBhZnRlcm5vb246ICfQtNC10L3RjCcsXG4gICAgZXZlbmluZzogJ9Cy0LXRhy4nLFxuICAgIG5pZ2h0OiAn0L3QvtGH0YwnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9C+0LvQvdC+0YfRjCcsXG4gICAgbm9vbjogJ9C/0L7Qu9C00LXQvdGMJyxcbiAgICBtb3JuaW5nOiAn0YPRgtGA0L4nLFxuICAgIGFmdGVybm9vbjogJ9C00LXQvdGMJyxcbiAgICBldmVuaW5nOiAn0LLQtdGH0LXRgCcsXG4gICAgbmlnaHQ6ICfQvdC+0YfRjCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9C+0LvQvS4nLFxuICAgIG5vb246ICfQv9C+0LvQtC4nLFxuICAgIG1vcm5pbmc6ICfRg9GC0YDQsCcsXG4gICAgYWZ0ZXJub29uOiAn0LTQvdGPJyxcbiAgICBldmVuaW5nOiAn0LLQtdGHLicsXG4gICAgbmlnaHQ6ICfQvdC+0YfQuCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9C+0LvQvS4nLFxuICAgIG5vb246ICfQv9C+0LvQtC4nLFxuICAgIG1vcm5pbmc6ICfRg9GC0YDQsCcsXG4gICAgYWZ0ZXJub29uOiAn0LTQvdGPJyxcbiAgICBldmVuaW5nOiAn0LLQtdGHLicsXG4gICAgbmlnaHQ6ICfQvdC+0YfQuCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn0JTQnycsXG4gICAgcG06ICfQn9CfJyxcbiAgICBtaWRuaWdodDogJ9C/0L7Qu9C90L7Rh9GMJyxcbiAgICBub29uOiAn0L/QvtC70LTQtdC90YwnLFxuICAgIG1vcm5pbmc6ICfRg9GC0YDQsCcsXG4gICAgYWZ0ZXJub29uOiAn0LTQvdGPJyxcbiAgICBldmVuaW5nOiAn0LLQtdGH0LXRgNCwJyxcbiAgICBuaWdodDogJ9C90L7Rh9C4J1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdCk7XG4gIHZhciBzdWZmaXg7XG5cbiAgaWYgKHVuaXQgPT09ICdkYXRlJykge1xuICAgIHN1ZmZpeCA9ICct0LUnO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd3ZWVrJyB8fCB1bml0ID09PSAnbWludXRlJyB8fCB1bml0ID09PSAnc2Vjb25kJykge1xuICAgIHN1ZmZpeCA9ICct0Y8nO1xuICB9IGVsc2Uge1xuICAgIHN1ZmZpeCA9ICct0LknO1xuICB9XG5cbiAgcmV0dXJuIGRpcnR5TnVtYmVyICsgc3VmZml4O1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ01vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnYW55JyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyc7XG5pbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzJztcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykoLT8o0LV80Y980Ll80L7QtXzRjNC1fNCw0Y980YzRj3zRi9C5fNC+0Ll80LjQuXzRi9C5KSk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXigo0LTQviApP9C9XFwuP1xccz/RjVxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXigo0LTQviApP9C9XFwuP1xccz/RjVxcLj8pL2ksXG4gIHdpZGU6IC9eKNC00L4g0L3QsNGI0LXQuSDRjdGA0Yt80L3QsNGI0LXQuSDRjdGA0Yt80L3QsNGI0LAg0Y3RgNCwKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9e0LQvaSwgL17QvS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15bMTIzNF0oLT9b0YvQvtC4XT/QuT8pPyDQutCyLj8vaSxcbiAgd2lkZTogL15bMTIzNF0oLT9b0YvQvtC4XT/QuT8pPyDQutCy0LDRgNGC0LDQuy9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b0Y/RhNC80LDQuNGB0L7QvdC0XS9pLFxuICBhYmJyZXZpYXRlZDogL14o0Y/QvdCyfNGE0LXQsnzQvNCw0YDRgj980LDQv9GAfNC80LBb0LnRj1180LjRjtC9W9GM0Y9dP3zQuNGO0Ltb0YzRj10/fNCw0LLQs3zRgdC10L3Rgj980L7QutGCfNC90L7Rj9CxP3zQtNC10LopL2ksXG4gIHdpZGU6IC9eKNGP0L3QstCw0YBb0YzRj1180YTQtdCy0YDQsNC7W9GM0Y9dfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0YzRj1180LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC7W9GM0Y9dfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzQvtC60YLRj9Cx0YBb0YzRj1180L7QutGC0Y/QsdGAW9GM0Y9dfNC90L7Rj9Cx0YBb0YzRj1180LTQtdC60LDQsdGAW9GM0Y9dKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17Rjy9pLCAvXtGEL2ksIC9e0LwvaSwgL17QsC9pLCAvXtC8L2ksIC9e0LgvaSwgL17QuC9pLCAvXtCwL2ksIC9e0YEvaSwgL17Qvi9pLCAvXtC9L2ksIC9e0Y8vaV0sXG4gIGFueTogWy9e0Y8vaSwgL17RhC9pLCAvXtC80LDRgC9pLCAvXtCw0L8vaSwgL17QvNCwW9C50Y9dL2ksIC9e0LjRjtC9L2ksIC9e0LjRjtC7L2ksIC9e0LDQsi9pLCAvXtGBL2ksIC9e0L4vaSwgL17QvS9pLCAvXtC0L2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b0LLQv9GB0YddL2ksXG4gIHNob3J0OiAvXijQstGBfNCy0L580L/QvXzQv9C+fNCy0YJ80YHRgHzRh9GCfNGH0LV80L/RgnzQv9GPfNGB0LF80YHRgylcXC4/L2ksXG4gIGFiYnJldmlhdGVkOiAvXijQstGB0Lp80LLQvtGBfNC/0L3QtHzQv9C+0L180LLRgtGAfNCy0YLQvnzRgdGA0LR80YHRgNC1fNGH0YLQsnzRh9C10YJ80L/RgtC9fNC/0Y/RgnzRgdGD0LEpLj8vaSxcbiAgd2lkZTogL14o0LLQvtGB0LrRgNC10YHQtdC90Yxb0LXRj1180L/QvtC90LXQtNC10LvRjNC90LjQutCwP3zQstGC0L7RgNC90LjQutCwP3zRgdGA0LXQtFvQsNGLXXzRh9C10YLQstC10YDQs9CwP3zQv9GP0YLQvdC40YZb0LDRi1180YHRg9Cx0LHQvtGCW9Cw0YtdKS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9e0LIvaSwgL17Qvy9pLCAvXtCyL2ksIC9e0YEvaSwgL17Rhy9pLCAvXtC/L2ksIC9e0YEvaV0sXG4gIGFueTogWy9e0LJb0L7RgV0vaSwgL17Qv1vQvtC9XS9pLCAvXtCyL2ksIC9e0YHRgC9pLCAvXtGHL2ksIC9e0L9b0Y/Rgl0vaSwgL17RgVvRg9CxXS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKFvQtNC/XdC/fNC/0L7Qu9C9XFwuP3zQv9C+0LvQtFxcLj980YPRgtGAW9C+0LBdfNC00LXQvdGMfNC00L3Rj3zQstC10YdcXC4/fNC90L7Rh1vRjNC4XSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKFvQtNC/XdC/fNC/0L7Qu9C9XFwuP3zQv9C+0LvQtFxcLj980YPRgtGAW9C+0LBdfNC00LXQvdGMfNC00L3Rj3zQstC10YdcXC4/fNC90L7Rh1vRjNC4XSkvaSxcbiAgd2lkZTogL14oW9C00L9d0L980L/QvtC70L3QvtGH0Yx80L/QvtC70LTQtdC90Yx80YPRgtGAW9C+0LBdfNC00LXQvdGMfNC00L3Rj3zQstC10YfQtdGA0LA/fNC90L7Rh1vRjNC4XSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL17QtNC/L2ksXG4gICAgcG06IC9e0L/Qvy9pLFxuICAgIG1pZG5pZ2h0OiAvXtC/0L7Qu9C9L2ksXG4gICAgbm9vbjogL17Qv9C+0LvQtC9pLFxuICAgIG1vcm5pbmc6IC9e0YMvaSxcbiAgICBhZnRlcm5vb246IC9e0LRb0LXQvV0vaSxcbiAgICBldmVuaW5nOiAvXtCyL2ksXG4gICAgbmlnaHQ6IC9e0L0vaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFJ1c3NpYW4gbG9jYWxlLlxuICogQGxhbmd1YWdlIFJ1c3NpYW5cbiAqIEBpc28tNjM5LTIgcnVzXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAncnUnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiLy8gTk9URTogc2hvdWxkIHByb2xseSBiZSBpbXByb3ZlZFxuLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9zay5odG1sP2hpZGUjMTMwOFxuZnVuY3Rpb24gZGVjbGVuc2lvbkdyb3VwKHNjaGVtZSwgY291bnQpIHtcbiAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmV0dXJuIHNjaGVtZS5vbmU7XG4gIH1cblxuICBpZiAoY291bnQgPj0gMiAmJiBjb3VudCA8PSA0KSB7XG4gICAgcmV0dXJuIHNjaGVtZS50d29Gb3VyO1xuICB9IC8vIGlmIGNvdW50ID09PSBudWxsIHx8IGNvdW50ID09PSAwIHx8IGNvdW50ID49IDVcblxuXG4gIHJldHVybiBzY2hlbWUub3RoZXI7XG59XG5cbmZ1bmN0aW9uIGRlY2xlbnNpb24oc2NoZW1lLCBjb3VudCwgdGltZSkge1xuICB2YXIgZ3JvdXAgPSBkZWNsZW5zaW9uR3JvdXAoc2NoZW1lLCBjb3VudCk7XG4gIHZhciBmaW5hbFRleHQgPSBncm91cFt0aW1lXSB8fCBncm91cDtcbiAgcmV0dXJuIGZpbmFsVGV4dC5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcmVwb3NpdGlvbih0b2tlbikge1xuICB2YXIgcmVzdWx0ID0gWydsZXNzVGhhbicsICdhYm91dCcsICdvdmVyJywgJ2FsbW9zdCddLmZpbHRlcihmdW5jdGlvbiAocHJlcG9zaXRpb24pIHtcbiAgICByZXR1cm4gISF0b2tlbi5tYXRjaChuZXcgUmVnRXhwKCdeJyArIHByZXBvc2l0aW9uKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0WzBdO1xufVxuXG5mdW5jdGlvbiBwcmVmaXhQcmVwb3NpdGlvbihwcmVwb3NpdGlvbikge1xuICB2YXIgdHJhbnNsYXRpb24gPSAnJztcblxuICBpZiAocHJlcG9zaXRpb24gPT09ICdhbG1vc3QnKSB7XG4gICAgdHJhbnNsYXRpb24gPSAndGFrbWVyJztcbiAgfVxuXG4gIGlmIChwcmVwb3NpdGlvbiA9PT0gJ2Fib3V0Jykge1xuICAgIHRyYW5zbGF0aW9uID0gJ3ByaWJsacW+bmUnO1xuICB9XG5cbiAgcmV0dXJuIHRyYW5zbGF0aW9uLmxlbmd0aCA+IDAgPyB0cmFuc2xhdGlvbiArICcgJyA6ICcnO1xufVxuXG5mdW5jdGlvbiBzdWZmaXhQcmVwb3NpdGlvbihwcmVwb3NpdGlvbikge1xuICB2YXIgdHJhbnNsYXRpb24gPSAnJztcblxuICBpZiAocHJlcG9zaXRpb24gPT09ICdsZXNzVGhhbicpIHtcbiAgICB0cmFuc2xhdGlvbiA9ICdtZW5laiBuZcW+JztcbiAgfVxuXG4gIGlmIChwcmVwb3NpdGlvbiA9PT0gJ292ZXInKSB7XG4gICAgdHJhbnNsYXRpb24gPSAndmlhYyBuZcW+JztcbiAgfVxuXG4gIHJldHVybiB0cmFuc2xhdGlvbi5sZW5ndGggPiAwID8gdHJhbnNsYXRpb24gKyAnICcgOiAnJztcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbnZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdzZWt1bmRhJyxcbiAgICAgIHBhc3Q6ICdzZWt1bmRvdScsXG4gICAgICBmdXR1cmU6ICdzZWt1bmR1J1xuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBzZWt1bmR5JyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gc2VrdW5kYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBzZWt1bmR5J1xuICAgIH0sXG4gICAgb3RoZXI6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gc2Vrw7puZCcsXG4gICAgICBwYXN0OiAne3tjb3VudH19IHNla3VuZGFtaScsXG4gICAgICBmdXR1cmU6ICd7e2NvdW50fX0gc2Vrw7puZCdcbiAgICB9XG4gIH0sXG4gIGhhbGZBTWludXRlOiB7XG4gICAgb3RoZXI6IHtcbiAgICAgIHJlZ3VsYXI6ICdwb2wgbWluw7p0eScsXG4gICAgICBwYXN0OiAncG9sIG1pbsO6dG91JyxcbiAgICAgIGZ1dHVyZTogJ3BvbCBtaW7DunR5J1xuICAgIH1cbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdtaW7DunRhJyxcbiAgICAgIHBhc3Q6ICdtaW7DunRvdScsXG4gICAgICBmdXR1cmU6ICdtaW7DunR1J1xuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBtaW7DunR5JyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gbWluw7p0YW1pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBtaW7DunR5J1xuICAgIH0sXG4gICAgb3RoZXI6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gbWluw7p0JyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gbWluw7p0YW1pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBtaW7DunQnXG4gICAgfVxuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6IHtcbiAgICAgIHJlZ3VsYXI6ICdob2RpbmEnLFxuICAgICAgcGFzdDogJ2hvZGlub3UnLFxuICAgICAgZnV0dXJlOiAnaG9kaW51J1xuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBob2RpbnknLFxuICAgICAgcGFzdDogJ3t7Y291bnR9fSBob2RpbmFtaScsXG4gICAgICBmdXR1cmU6ICd7e2NvdW50fX0gaG9kaW55J1xuICAgIH0sXG4gICAgb3RoZXI6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gaG9kw61uJyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gaG9kaW5hbWknLFxuICAgICAgZnV0dXJlOiAne3tjb3VudH19IGhvZMOtbidcbiAgICB9XG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnZGXFiCcsXG4gICAgICBwYXN0OiAnZMWIb20nLFxuICAgICAgZnV0dXJlOiAnZGXFiCdcbiAgICB9LFxuICAgIHR3b0ZvdXI6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gZG5pJyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gZMWIYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBkbmknXG4gICAgfSxcbiAgICBvdGhlcjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBkbsOtJyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gZMWIYW1pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBkbsOtJ1xuICAgIH1cbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiB7XG4gICAgICByZWd1bGFyOiAnbWVzaWFjJyxcbiAgICAgIC8vIFRPRE9cbiAgICAgIHBhc3Q6ICdtZXNpYWNvbScsXG4gICAgICAvLyBUT0RPXG4gICAgICBmdXR1cmU6ICdtZXNpYWMnIC8vIFRPRE9cblxuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBtZXNpYWNlJyxcbiAgICAgIC8vIFRPRE9cbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gbWVzaWFjbWknLFxuICAgICAgLy8gVE9ET1xuICAgICAgZnV0dXJlOiAne3tjb3VudH19IG1lc2lhY2UnIC8vIFRPRE9cblxuICAgIH0sXG4gICAgb3RoZXI6IHtcbiAgICAgIHJlZ3VsYXI6ICd7e2NvdW50fX0gbWVzaWFjb3YnLFxuICAgICAgLy8gVE9ET1xuICAgICAgcGFzdDogJ3t7Y291bnR9fSBtZXNpYWNtaScsXG4gICAgICAvLyBUT0RPXG4gICAgICBmdXR1cmU6ICd7e2NvdW50fX0gbWVzaWFjb3YnIC8vIFRPRE9cblxuICAgIH1cbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ21lc2lhYycsXG4gICAgICBwYXN0OiAnbWVzaWFjb20nLFxuICAgICAgZnV0dXJlOiAnbWVzaWFjJ1xuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBtZXNpYWNlJyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gbWVzaWFjbWknLFxuICAgICAgZnV0dXJlOiAne3tjb3VudH19IG1lc2lhY2UnXG4gICAgfSxcbiAgICBvdGhlcjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSBtZXNpYWNvdicsXG4gICAgICBwYXN0OiAne3tjb3VudH19IG1lc2lhY21pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSBtZXNpYWNvdidcbiAgICB9XG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZToge1xuICAgICAgcmVndWxhcjogJ3JvaycsXG4gICAgICBwYXN0OiAncm9rb20nLFxuICAgICAgZnV0dXJlOiAncm9rJ1xuICAgIH0sXG4gICAgdHdvRm91cjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSByb2t5JyxcbiAgICAgIHBhc3Q6ICd7e2NvdW50fX0gcm9rbWknLFxuICAgICAgZnV0dXJlOiAne3tjb3VudH19IHJva3knXG4gICAgfSxcbiAgICBvdGhlcjoge1xuICAgICAgcmVndWxhcjogJ3t7Y291bnR9fSByb2tvdicsXG4gICAgICBwYXN0OiAne3tjb3VudH19IHJva21pJyxcbiAgICAgIGZ1dHVyZTogJ3t7Y291bnR9fSByb2tvdidcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBwcmVwb3NpdGlvbiA9IGV4dHJhY3RQcmVwb3NpdGlvbih0b2tlbikgfHwgJyc7XG4gIHZhciBrZXkgPSBsb3dlcmNhc2VGaXJzdExldHRlcih0b2tlbi5zdWJzdHJpbmcocHJlcG9zaXRpb24ubGVuZ3RoKSk7XG4gIHZhciBzY2hlbWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVtrZXldO1xuXG4gIGlmICghb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICByZXR1cm4gcHJlZml4UHJlcG9zaXRpb24ocHJlcG9zaXRpb24pICsgc3VmZml4UHJlcG9zaXRpb24ocHJlcG9zaXRpb24pICsgZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50LCAncmVndWxhcicpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICByZXR1cm4gcHJlZml4UHJlcG9zaXRpb24ocHJlcG9zaXRpb24pICsgJ28gJyArIHN1ZmZpeFByZXBvc2l0aW9uKHByZXBvc2l0aW9uKSArIGRlY2xlbnNpb24oc2NoZW1lLCBjb3VudCwgJ2Z1dHVyZScpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXhQcmVwb3NpdGlvbihwcmVwb3NpdGlvbikgKyAncHJlZCAnICsgc3VmZml4UHJlcG9zaXRpb24ocHJlcG9zaXRpb24pICsgZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50LCAncGFzdCcpO1xuICB9XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnOyAvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8zMi9zdW1tYXJ5L3NrLmh0bWw/aGlkZSMxOTg2XG5cbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUgZC4gTU1NTSB5JyxcbiAgbG9uZzogJ2QuIE1NTU0geScsXG4gIG1lZGl1bTogJ2QuIE0uIHknLFxuICBzaG9ydDogJ2QuIE0uIHknIC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvc2suaHRtbD9oaWRlIzIxNDlcblxufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0g6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdIOm1tOnNzIHonLFxuICBtZWRpdW06ICdIOm1tOnNzJyxcbiAgc2hvcnQ6ICdIOm1tJyAvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8zMi9zdW1tYXJ5L3NrLmh0bWw/aGlkZSMxOTk0XG5cbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgbG9uZzogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiaW1wb3J0IGlzU2FtZVVUQ1dlZWsgZnJvbSAnLi4vLi4vLi4vLi4vX2xpYi9pc1NhbWVVVENXZWVrL2luZGV4LmpzJzsgLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9zay5odG1sP2hpZGUjMTMwOFxuXG52YXIgYWNjdXNhdGl2ZVdlZWtkYXlzID0gWyduZWRlxL51JywgJ3BvbmRlbG9rJywgJ3V0b3JvaycsICdzdHJlZHUnLCAnxaF0dnJ0b2snLCAncGlhdG9rJywgJ3NvYm90dSddO1xuXG5mdW5jdGlvbiBsYXN0V2VlayhkYXkpIHtcbiAgdmFyIHdlZWtkYXkgPSBhY2N1c2F0aXZlV2Vla2RheXNbZGF5XTtcblxuICBzd2l0Y2ggKGRheSkge1xuICAgIGNhc2UgMDpcbiAgICAvKiBTdW4gKi9cblxuICAgIGNhc2UgMzpcbiAgICAvKiBXZWQgKi9cblxuICAgIGNhc2UgNlxuICAgIC8qIFNhdCAqL1xuICAgIDpcbiAgICAgIHJldHVybiBcIidtaW51bMO6IFwiICsgd2Vla2RheSArIFwiIG8nIHBcIjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCInbWludWzDvScgZWVlZSAnbycgcFwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRoaXNXZWVrKGRheSkge1xuICB2YXIgd2Vla2RheSA9IGFjY3VzYXRpdmVXZWVrZGF5c1tkYXldO1xuXG4gIGlmIChkYXkgPT09IDRcbiAgLyogVGh1ICovXG4gICkge1xuICAgICAgcmV0dXJuIFwiJ3ZvJyBlZWVlICdvJyBwXCI7XG4gICAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCIndiBcIiArIHdlZWtkYXkgKyBcIiBvJyBwXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dFdlZWsoZGF5KSB7XG4gIHZhciB3ZWVrZGF5ID0gYWNjdXNhdGl2ZVdlZWtkYXlzW2RheV07XG5cbiAgc3dpdGNoIChkYXkpIHtcbiAgICBjYXNlIDA6XG4gICAgLyogU3VuICovXG5cbiAgICBjYXNlIDQ6XG4gICAgLyogV2VkICovXG5cbiAgICBjYXNlIDZcbiAgICAvKiBTYXQgKi9cbiAgICA6XG4gICAgICByZXR1cm4gXCInYnVkw7pjdScgXCIgKyB3ZWVrZGF5ICsgXCIgJ28nIHBcIjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCInYnVkw7pjaScgZWVlZSAnbycgcFwiO1xuICB9XG59XG5cbnZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IGZ1bmN0aW9uIChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgaWYgKGlzU2FtZVVUQ1dlZWsoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpKSB7XG4gICAgICByZXR1cm4gdGhpc1dlZWsoZGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxhc3RXZWVrKGRheSk7XG4gICAgfVxuICB9LFxuICB5ZXN0ZXJkYXk6IFwiJ3bEjWVyYSBvJyBwXCIsXG4gIHRvZGF5OiBcIidkbmVzIG8nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3phanRyYSBvJyBwXCIsXG4gIG5leHRXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXNXZWVrKGRheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0V2VlayhkYXkpO1xuICAgIH1cbiAgfSxcbiAgb3RoZXI6ICdQJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICB2YXIgZm9ybWF0ID0gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnOyAvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8zMi9zdW1tYXJ5L3NrLmh0bWwjMTc3MlxuXG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsncHJlZCBLci4nLCAncG8gS3IuJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3ByZWQgS3IuJywgJ3BvIEtyLiddLFxuICB3aWRlOiBbJ3ByZWQgS3Jpc3RvbScsICdwbyBLcmlzdG92aSddIC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvc2suaHRtbCMxNzgwXG5cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxLiDFoXR2csWlcm9rJywgJzIuIMWhdHZyxaVyb2snLCAnMy4gxaF0dnLFpXJvaycsICc0LiDFoXR2csWlcm9rJ10gLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9zay5odG1sIzE4MDRcblxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2onLCAnZicsICdtJywgJ2EnLCAnbScsICdqJywgJ2onLCAnYScsICdzJywgJ28nLCAnbicsICdkJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbicsICdmZWInLCAnbWFyJywgJ2FwcicsICdtw6FqJywgJ2rDum4nLCAnasO6bCcsICdhdWcnLCAnc2VwJywgJ29rdCcsICdub3YnLCAnZGVjJ10sXG4gIHdpZGU6IFsnamFudcOhcicsICdmZWJydcOhcicsICdtYXJlYycsICdhcHLDrWwnLCAnbcOhaicsICdqw7puJywgJ2rDumwnLCAnYXVndXN0JywgJ3NlcHRlbWJlcicsICdva3TDs2JlcicsICdub3ZlbWJlcicsICdkZWNlbWJlciddXG59O1xudmFyIGZvcm1hdHRpbmdNb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ2onLCAnZicsICdtJywgJ2EnLCAnbScsICdqJywgJ2onLCAnYScsICdzJywgJ28nLCAnbicsICdkJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbicsICdmZWInLCAnbWFyJywgJ2FwcicsICdtw6FqJywgJ2rDum4nLCAnasO6bCcsICdhdWcnLCAnc2VwJywgJ29rdCcsICdub3YnLCAnZGVjJ10sXG4gIHdpZGU6IFsnamFudcOhcmEnLCAnZmVicnXDoXJhJywgJ21hcmNhJywgJ2FwcsOtbGEnLCAnbcOhamEnLCAnasO6bmEnLCAnasO6bGEnLCAnYXVndXN0YScsICdzZXB0ZW1icmEnLCAnb2t0w7NicmEnLCAnbm92ZW1icmEnLCAnZGVjZW1icmEnXSAvLyBodHRwczovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8zMi9zdW1tYXJ5L3NrLmh0bWwjMTg3NlxuXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ24nLCAncCcsICd1JywgJ3MnLCAnxaEnLCAncCcsICdzJ10sXG4gIHNob3J0OiBbJ25lJywgJ3BvJywgJ3V0JywgJ3N0JywgJ8WhdCcsICdwaScsICdzbyddLFxuICBhYmJyZXZpYXRlZDogWyduZScsICdwbycsICd1dCcsICdzdCcsICfFoXQnLCAncGknLCAnc28nXSxcbiAgd2lkZTogWyduZWRlxL5hJywgJ3BvbmRlbG9rJywgJ3V0b3JvaycsICdzdHJlZGEnLCAnxaF0dnJ0b2snLCAncGlhdG9rJywgJ3NvYm90YSddIC8vIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL2NsZHIvY2hhcnRzLzMyL3N1bW1hcnkvc2suaHRtbCMxOTMyXG5cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3BvbG4uJyxcbiAgICBub29uOiAncG9sLicsXG4gICAgbW9ybmluZzogJ3LDoW5vJyxcbiAgICBhZnRlcm5vb246ICdwb3AuJyxcbiAgICBldmVuaW5nOiAndmXEjS4nLFxuICAgIG5pZ2h0OiAnbm9jJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAncG9sbi4nLFxuICAgIG5vb246ICdwb2wuJyxcbiAgICBtb3JuaW5nOiAncsOhbm8nLFxuICAgIGFmdGVybm9vbjogJ3BvcG9sLicsXG4gICAgZXZlbmluZzogJ3ZlxI1lcicsXG4gICAgbmlnaHQ6ICdub2MnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ3BvbG5vYycsXG4gICAgbm9vbjogJ3BvbHVkbmllJyxcbiAgICBtb3JuaW5nOiAncsOhbm8nLFxuICAgIGFmdGVybm9vbjogJ3BvcG9sdWRuaWUnLFxuICAgIGV2ZW5pbmc6ICd2ZcSNZXInLFxuICAgIG5pZ2h0OiAnbm9jJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbyBwb2xuLicsXG4gICAgbm9vbjogJ25hcC4nLFxuICAgIG1vcm5pbmc6ICdyw6FubycsXG4gICAgYWZ0ZXJub29uOiAncG9wLicsXG4gICAgZXZlbmluZzogJ3ZlxI0uJyxcbiAgICBuaWdodDogJ3Ygbi4nXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdvIHBvbG4uJyxcbiAgICBub29uOiAnbmFwb2wuJyxcbiAgICBtb3JuaW5nOiAncsOhbm8nLFxuICAgIGFmdGVybm9vbjogJ3BvcG9sLicsXG4gICAgZXZlbmluZzogJ3ZlxI1lcicsXG4gICAgbmlnaHQ6ICd2IG5vY2knXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ28gcG9sbm9jaScsXG4gICAgbm9vbjogJ25hcG9sdWRuaWUnLFxuICAgIG1vcm5pbmc6ICdyw6FubycsXG4gICAgYWZ0ZXJub29uOiAncG9wb2x1ZG7DrScsXG4gICAgZXZlbmluZzogJ3ZlxI1lcicsXG4gICAgbmlnaHQ6ICd2IG5vY2knXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIHJldHVybiBudW1iZXIgKyAnLic7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzIC8vIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG5cbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdNb250aFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKVxcLj8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKHByZWQgS3JcXC58cHJlZCBuXFwuIGxcXC58cG8gS3JcXC58blxcLiBsXFwuKS9pLFxuICBhYmJyZXZpYXRlZDogL14ocHJlZCBLclxcLnxwcmVkIG5cXC4gbFxcLnxwbyBLclxcLnxuXFwuIGxcXC4pL2ksXG4gIHdpZGU6IC9eKHByZWQgS3Jpc3RvbXxwcmVkIG5hW8Whc11bw61pXW0gbGV0b3BvW8SNY110b218cG8gS3Jpc3Rvdml8blvDoWFdW8Whc11obyBsZXRvcG9bxI1jXXR1KS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9ecHIvaSwgL14ocG98bikvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XVxcLiBbxaFzXXR2clvFpXRdcm9rL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtW8OhYV1qfGpbw7p1XW58alvDunVdbHxhdWd8c2VwfG9rdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51W8OhYV1yYT98ZmVicnVbw6FhXXJhP3wobWFyZWN8bWFyY2EpfGFwclvDrWldbGE/fG1bw6FhXWphP3xqW8O6dV1uYT98alvDunVdbGE/fGF1Z3VzdGE/fChzZXB0ZW1iZXJ8c2VwdGVtYnJhKXwob2t0W8Ozb11iZXJ8b2t0W8Ozb11icmEpfChub3ZlbWJlcnxub3ZlbWJyYSl8KGRlY2VtYmVyfGRlY2VtYnJhKSkvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebVvDoWFdai9pLCAvXmpbw7p1XW4vaSwgL15qW8O6dV1sL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bbnB1c8WhcF0vaSxcbiAgc2hvcnQ6IC9eKG5lfHBvfHV0fHN0fMWhdHxwaXxzbykvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKG5lfHBvfHV0fHN0fMWhdHxwaXxzbykvaSxcbiAgd2lkZTogL14obmVkZVvEvmxdYXxwb25kZWxva3x1dG9yb2t8c3RyZWRhfFvFoXNddHZydG9rfHBpYXRva3xzb2JvdGFdKS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ebi9pLCAvXnAvaSwgL151L2ksIC9ecy9pLCAvXsWhL2ksIC9ecC9pLCAvXnMvaV0sXG4gIGFueTogWy9ebi9pLCAvXnBvL2ksIC9edS9pLCAvXnN0L2ksIC9eKMWhdHxzdHYpL2ksIC9ecGkvaSwgL15zby9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGFtfHBtfChvICk/cG9sblxcLj98KG5hcFxcLj98cG9sXFwuPyl8clvDoWFdbm98cG9wXFwuP3x2ZVvEjWNdXFwuP3wodiBuXFwuP3xub2MpKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYW18cG18KG8gKT9wb2xuXFwuP3wobmFwb2xcXC4/fHBvbFxcLj8pfHJbw6FhXW5vfHBvcFxcLj98dmVbxI1jXWVyfCh2ICk/bm9jaT8pL2ksXG4gIGFueTogL14oYW18cG18KG8gKT9wb2xub2NpP3wobmEpP3BvbHVkbmllfHJbw6FhXW5vfHBvcG9sdWRuKGllfMOtfGkpfHZlW8SNY11lcnwodiApP25vY2k/KS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmFtL2ksXG4gICAgcG06IC9ecG0vaSxcbiAgICBtaWRuaWdodDogL3BvbG4vaSxcbiAgICBub29uOiAvXihuYXB8KG5hKT9wb2woXFwufHUpKS9pLFxuICAgIG1vcm5pbmc6IC9eclvDoWFdbm8vaSxcbiAgICBhZnRlcm5vb246IC9ecG9wL2ksXG4gICAgZXZlbmluZzogL152ZVvEjWNdL2ksXG4gICAgbmlnaHQ6IC9eKG5vY3x2IG5cXC4pL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFNsb3ZhayBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgU2xvdmFrXG4gKiBAaXNvLTYzOS0yIHNsa1xuICogQGF1dGhvciBNYXJlayBTdXNjYWsgW0BtYXJla3N1c2Nha117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21hcmVrc3VzY2FrfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdzaycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBzaW5ndWxhcjogJ21pbmRyZSDDpG4gZW4gc2VrdW5kJyxcbiAgICBwbHVyYWw6ICdtaW5kcmUgw6RuIHt7Y291bnR9fSBzZWt1bmRlcidcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBzaW5ndWxhcjogJ2VuIHNla3VuZCcsXG4gICAgcGx1cmFsOiAne3tjb3VudH19IHNla3VuZGVyJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2VuIGhhbHYgbWludXQnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgc2luZ3VsYXI6ICdtaW5kcmUgw6RuIGVuIG1pbnV0JyxcbiAgICBwbHVyYWw6ICdtaW5kcmUgw6RuIHt7Y291bnR9fSBtaW51dGVyJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIHNpbmd1bGFyOiAnZW4gbWludXQnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSBtaW51dGVyJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIHNpbmd1bGFyOiAndW5nZWbDpHIgZW4gdGltbWUnLFxuICAgIHBsdXJhbDogJ3VuZ2Vmw6RyIHt7Y291bnR9fSB0aW1tYXInXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIHNpbmd1bGFyOiAnZW4gdGltbWUnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSB0aW1tYXInXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgc2luZ3VsYXI6ICdlbiBkYWcnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSBkYWdhcidcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBzaW5ndWxhcjogJ3VuZ2Vmw6RyIGVuIHZlY2thJyxcbiAgICBwbHVyYWw6ICd1bmdlZsOkciB7e2NvdW50fX0gdmVja2EnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIHNpbmd1bGFyOiAnZW4gdmVja2EnLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSB2ZWNrYSdcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgc2luZ3VsYXI6ICd1bmdlZsOkciBlbiBtw6VuYWQnLFxuICAgIHBsdXJhbDogJ3VuZ2Vmw6RyIHt7Y291bnR9fSBtw6VuYWRlcidcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIHNpbmd1bGFyOiAnZW4gbcOlbmFkJyxcbiAgICBwbHVyYWw6ICd7e2NvdW50fX0gbcOlbmFkZXInXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgc2luZ3VsYXI6ICd1bmdlZsOkciBldHQgw6VyJyxcbiAgICBwbHVyYWw6ICd1bmdlZsOkciB7e2NvdW50fX0gw6VyJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ2V0dCDDpXInLFxuICAgIHBsdXJhbDogJ3t7Y291bnR9fSDDpXInXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBzaW5ndWxhcjogJ8O2dmVyIGV0dCDDpXInLFxuICAgIHBsdXJhbDogJ8O2dmVyIHt7Y291bnR9fSDDpXInXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIHNpbmd1bGFyOiAnbsOkc3RhbiBldHQgw6VyJyxcbiAgICBwbHVyYWw6ICduw6RzdGFuIHt7Y291bnR9fSDDpXInXG4gIH1cbn07XG52YXIgd29yZE1hcHBpbmcgPSBbJ25vbGwnLCAnZW4nLCAndHbDpScsICd0cmUnLCAnZnlyYScsICdmZW0nLCAnc2V4JywgJ3NqdScsICfDpXR0YScsICduaW8nLCAndGlvJywgJ2VsdmEnLCAndG9sdiddO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHtcbiAgICBvbmx5TnVtZXJpYzogZmFsc2VcbiAgfTtcbiAgdmFyIHRyYW5zbGF0aW9uID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgdHJhbnNsYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdHJhbnNsYXRpb247XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDAgfHwgY291bnQgPiAxKSB7XG4gICAgaWYgKG9wdGlvbnMub25seU51bWVyaWMpIHtcbiAgICAgIHJlc3VsdCA9IHRyYW5zbGF0aW9uLnBsdXJhbC5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHRyYW5zbGF0aW9uLnBsdXJhbC5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCA8IDEzID8gd29yZE1hcHBpbmdbY291bnRdIDogY291bnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0cmFuc2xhdGlvbi5zaW5ndWxhcjtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ29tICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIHNlZGFuJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUgZCBNTU1NIHknLFxuICBsb25nOiAnZCBNTU1NIHknLFxuICBtZWRpdW06ICdkIE1NTSB5JyxcbiAgc2hvcnQ6ICd5LU1NLWRkJ1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCIna2wnLiBISDptbTpzcyB6enp6XCIsXG4gIGxvbmc6ICdISDptbTpzcyB6JyxcbiAgbWVkaXVtOiAnSEg6bW06c3MnLFxuICBzaG9ydDogJ0hIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2tsLicge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAna2wuJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInaScgRUVFRSdzIGtsLicgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ2lnw6VyIGtsLicgcFwiLFxuICB0b2RheTogXCInaWRhZyBrbC4nIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ2ltb3Jnb24ga2wuJyBwXCIsXG4gIG5leHRXZWVrOiBcIkVFRUUgJ2tsLicgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnZi5Lci4nLCAnZS5Lci4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsnZi5Lci4nLCAnZS5Lci4nXSxcbiAgd2lkZTogWydmw7ZyZSBLcmlzdHVzJywgJ2VmdGVyIEtyaXN0dXMnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzE6YSBrdmFydGFsZXQnLCAnMjphIGt2YXJ0YWxldCcsICczOmUga3ZhcnRhbGV0JywgJzQ6ZSBrdmFydGFsZXQnXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ2phbi4nLCAnZmViLicsICdtYXJzJywgJ2Fwci4nLCAnbWFqJywgJ2p1bmknLCAnanVsaScsICdhdWcuJywgJ3NlcC4nLCAnb2t0LicsICdub3YuJywgJ2RlYy4nXSxcbiAgd2lkZTogWydqYW51YXJpJywgJ2ZlYnJ1YXJpJywgJ21hcnMnLCAnYXByaWwnLCAnbWFqJywgJ2p1bmknLCAnanVsaScsICdhdWd1c3RpJywgJ3NlcHRlbWJlcicsICdva3RvYmVyJywgJ25vdmVtYmVyJywgJ2RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnTycsICdUJywgJ0YnLCAnTCddLFxuICBzaG9ydDogWydzw7YnLCAnbcOlJywgJ3RpJywgJ29uJywgJ3RvJywgJ2ZyJywgJ2zDtiddLFxuICBhYmJyZXZpYXRlZDogWydzw7ZuJywgJ23DpW4nLCAndGlzJywgJ29ucycsICd0b3InLCAnZnJlJywgJ2zDtnInXSxcbiAgd2lkZTogWydzw7ZuZGFnJywgJ23DpW5kYWcnLCAndGlzZGFnJywgJ29uc2RhZycsICd0b3JzZGFnJywgJ2ZyZWRhZycsICdsw7ZyZGFnJ10gLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMzIvc3VtbWFyeS9zdi5odG1sIzE4ODhcblxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnZm0nLFxuICAgIHBtOiAnZW0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ21vcmcuJyxcbiAgICBhZnRlcm5vb246ICdlZnRlcm0uJyxcbiAgICBldmVuaW5nOiAna3bDpGxsJyxcbiAgICBuaWdodDogJ25hdHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdmLm0uJyxcbiAgICBwbTogJ2UubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ21vcmdvbicsXG4gICAgYWZ0ZXJub29uOiAnZWZ0ZXJtLicsXG4gICAgZXZlbmluZzogJ2t2w6RsbCcsXG4gICAgbmlnaHQ6ICduYXR0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdmw7ZybWlkZGFnJyxcbiAgICBwbTogJ2VmdGVybWlkZGFnJyxcbiAgICBtaWRuaWdodDogJ21pZG5hdHQnLFxuICAgIG5vb246ICdtaWRkYWcnLFxuICAgIG1vcm5pbmc6ICdtb3Jnb24nLFxuICAgIGFmdGVybm9vbjogJ2VmdGVybWlkZGFnJyxcbiAgICBldmVuaW5nOiAna3bDpGxsJyxcbiAgICBuaWdodDogJ25hdHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdmbScsXG4gICAgcG06ICdlbScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuYXR0JyxcbiAgICBub29uOiAnbWlkZGFnJyxcbiAgICBtb3JuaW5nOiAncMOlIG1vcmcuJyxcbiAgICBhZnRlcm5vb246ICdww6UgZWZ0ZXJtLicsXG4gICAgZXZlbmluZzogJ3DDpSBrdsOkbGxlbicsXG4gICAgbmlnaHQ6ICdww6UgbmF0dGVuJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnZm0nLFxuICAgIHBtOiAnZW0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ3DDpSBtb3JnLicsXG4gICAgYWZ0ZXJub29uOiAncMOlIGVmdGVybS4nLFxuICAgIGV2ZW5pbmc6ICdww6Uga3bDpGxsZW4nLFxuICAgIG5pZ2h0OiAncMOlIG5hdHRlbidcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnZm0nLFxuICAgIHBtOiAnZW0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmF0dCcsXG4gICAgbm9vbjogJ21pZGRhZycsXG4gICAgbW9ybmluZzogJ3DDpSBtb3Jnb25lbicsXG4gICAgYWZ0ZXJub29uOiAncMOlIGVmdGVybWlkZGFnZW4nLFxuICAgIGV2ZW5pbmc6ICdww6Uga3bDpGxsZW4nLFxuICAgIG5pZ2h0OiAncMOlIG5hdHRlbidcbiAgfVxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlcikge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnOmEnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAnOmUnO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSg6YXw6ZSk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihmXFwuPyA/S3JcXC4/fGZcXC4/ID92XFwuPyA/dFxcLj98ZVxcLj8gP0tyXFwuP3x2XFwuPyA/dFxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXihmXFwuPyA/S3JcXC4/fGZcXC4/ID92XFwuPyA/dFxcLj98ZVxcLj8gP0tyXFwuP3x2XFwuPyA/dFxcLj8pL2ksXG4gIHdpZGU6IC9eKGbDtnJlIEtyaXN0dXN8ZsO2cmUgdsOlciB0aWR8ZWZ0ZXIgS3Jpc3R1c3x2w6VyIHRpZCkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmYvaSwgL15bZXZdL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0oOmF8OmUpPyBrdmFydGFsZXQvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1hanxqdW58anVsfGF1Z3xzZXB8b2t0fG5vdnxkZWMpXFwuPy9pLFxuICB3aWRlOiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hcnN8YXByaWx8bWFqfGp1bml8anVsaXxhdWd1c3RpfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYWovaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXRvZmxdL2ksXG4gIHNob3J0OiAvXihzw7Z8bcOlfHRpfG9ufHRvfGZyfGzDtikvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHPDtm58bcOlbnx0aXN8b25zfHRvcnxmcmV8bMO2cikvaSxcbiAgd2lkZTogL14oc8O2bmRhZ3xtw6VuZGFnfHRpc2RhZ3xvbnNkYWd8dG9yc2RhZ3xmcmVkYWd8bMO2cmRhZykvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXnMvaSwgL15tL2ksIC9edGkvaSwgL15vL2ksIC9edG8vaSwgL15mL2ksIC9ebC9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IC9eKFtmZV1cXC4/XFxzP21cXC4/fG1pZG4oYXR0KT98bWlkZChhZyk/fChww6UpIChtb3Jnb25lbnxlZnRlcm1pZGRhZ2VufGt2w6RsbGVufG5hdHRlbikpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eZi9pLFxuICAgIHBtOiAvXmUvaSxcbiAgICBtaWRuaWdodDogL15taWRuL2ksXG4gICAgbm9vbjogL15taWRkL2ksXG4gICAgbW9ybmluZzogL21vcmdvbi9pLFxuICAgIGFmdGVybm9vbjogL2VmdGVybWlkZGFnL2ksXG4gICAgZXZlbmluZzogL2t2w6RsbC9pLFxuICAgIG5pZ2h0OiAvbmF0dC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBTd2VkaXNoIGxvY2FsZS5cbiAqIEBsYW5ndWFnZSBTd2VkaXNoXG4gKiBAaXNvLTYzOS0yIHN3ZVxuICogQGF1dGhvciBKb2hhbm5lcyBVbMOpbiBbQGVqdWxlbl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2VqdWxlbn1cbiAqIEBhdXRob3IgQWxleGFuZGVyIE5hbmJlcmcgW0BhbGV4YW5kZXJuYW5iZXJnXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYWxleGFuZGVybmFuYmVyZ31cbiAqIEBhdXRob3IgSGVucmlrIEFuZGVyc3NvbiBbQGxpbWVsaWdodHNde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9saW1lbGlnaHRzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdzdicsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMVxuICAgIC8qIE1vbmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDRcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICfguJnguYnguK3guKLguIHguKfguYjguLIgMSDguKfguLTguJnguLLguJfguLUnLFxuICAgIG90aGVyOiAn4LiZ4LmJ4Lit4Lii4LiB4Lin4LmI4LiyIHt7Y291bnR9fSDguKfguLTguJnguLLguJfguLUnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSDguKfguLTguJnguLLguJfguLUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOC4p+C4tOC4meC4suC4l+C4tSdcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICfguITguKPguLbguYjguIfguJnguLLguJfguLUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAn4LiZ4LmJ4Lit4Lii4LiB4Lin4LmI4LiyIDEg4LiZ4Liy4LiX4Li1JyxcbiAgICBvdGhlcjogJ+C4meC5ieC4reC4ouC4geC4p+C5iOC4siB7e2NvdW50fX0g4LiZ4Liy4LiX4Li1J1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEg4LiZ4Liy4LiX4Li1JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDguJnguLLguJfguLUnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAn4Lib4Lij4Liw4Lih4Liy4LiTIDEg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICBvdGhlcjogJ+C4m+C4o+C4sOC4oeC4suC4kyB7e2NvdW50fX0g4LiK4Lix4LmI4Lin4LmC4Lih4LiHJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4LiK4Lix4LmI4Lin4LmC4Lih4LiHJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEg4Lin4Lix4LiZJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDguKfguLHguJknXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAn4Lib4Lij4Liw4Lih4Liy4LiTIDEg4Liq4Lix4Lib4LiU4Liy4Lir4LmMJyxcbiAgICBvdGhlcjogJ+C4m+C4o+C4sOC4oeC4suC4kyB7e2NvdW50fX0g4Liq4Lix4Lib4LiU4Liy4Lir4LmMJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIOC4quC4seC4m+C4lOC4suC4q+C5jCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4Liq4Lix4Lib4LiU4Liy4Lir4LmMJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICfguJvguKPguLDguKHguLLguJMgMSDguYDguJTguLfguK3guJknLFxuICAgIG90aGVyOiAn4Lib4Lij4Liw4Lih4Liy4LiTIHt7Y291bnR9fSDguYDguJTguLfguK3guJknXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIOC5gOC4lOC4t+C4reC4mScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g4LmA4LiU4Li34Lit4LiZJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ+C4m+C4o+C4sOC4oeC4suC4kyAxIOC4m+C4tScsXG4gICAgb3RoZXI6ICfguJvguKPguLDguKHguLLguJMge3tjb3VudH19IOC4m+C4tSdcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSDguJvguLUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOC4m+C4tSdcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ+C4oeC4suC4geC4geC4p+C5iOC4siAxIOC4m+C4tScsXG4gICAgb3RoZXI6ICfguKHguLLguIHguIHguKfguYjguLIge3tjb3VudH19IOC4m+C4tSdcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAn4LmA4LiB4Li34Lit4LiaIDEg4Lib4Li1JyxcbiAgICBvdGhlcjogJ+C5gOC4geC4t+C4reC4miB7e2NvdW50fX0g4Lib4Li1J1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICdoYWxmQU1pbnV0ZScpIHtcbiAgICAgICAgcmV0dXJuICfguYPguJknICsgcmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICfguYPguJkgJyArIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICfguJfguLXguYjguJzguYjguLLguJnguKHguLInO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAn4Lin4Lix4LiZRUVFReC4l+C4teC5iCBkbyBNTU1NIHknLFxuICBsb25nOiAnZG8gTU1NTSB5JyxcbiAgbWVkaXVtOiAnZCBNTU0geScsXG4gIHNob3J0OiAnZGQvTU0veXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdIOm1tOnNzIOC4mS4genp6eicsXG4gIGxvbmc6ICdIOm1tOnNzIOC4mS4geicsXG4gIG1lZGl1bTogJ0g6bW06c3Mg4LiZLicsXG4gIHNob3J0OiAnSDptbSDguJkuJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ+C5gOC4p+C4peC4sicge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAn4LmA4Lin4Lil4LiyJyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnbWVkaXVtJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiZWVlZSfguJfguLXguYjguYHguKXguYnguKfguYDguKfguKXguLInIHBcIixcbiAgeWVzdGVyZGF5OiBcIifguYDguKHguLfguYjguK3guKfguLLguJnguJnguLXguYnguYDguKfguKXguLInIHBcIixcbiAgdG9kYXk6IFwiJ+C4p+C4seC4meC4meC4teC5ieC5gOC4p+C4peC4sicgcFwiLFxuICB0b21vcnJvdzogXCIn4Lie4Lij4Li44LmI4LiH4LiZ4Li14LmJ4LmA4Lin4Lil4LiyJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ+C5gOC4p+C4peC4sicgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICfguITguKgnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAn4LiELuC4qC4nXSxcbiAgd2lkZTogWyfguJvguLXguIHguYjguK3guJnguITguKPguLTguKrguJXguIHguLLguKUnLCAn4LiE4Lij4Li04Liq4LiV4LmM4Lio4Lix4LiB4Lij4Liy4LiKJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWyfguYTguJXguKPguKHguLLguKrguYHguKPguIEnLCAn4LmE4LiV4Lij4Lih4Liy4Liq4LiX4Li14LmI4Liq4Lit4LiHJywgJ+C5hOC4leC4o+C4oeC4suC4quC4l+C4teC5iOC4quC4suC4oScsICfguYTguJXguKPguKHguLLguKrguJfguLXguYjguKrguLXguYgnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfguK3guLIuJywgJ+C4iC4nLCAn4LitLicsICfguJ4uJywgJ+C4nuC4pC4nLCAn4LioLicsICfguKouJ10sXG4gIHNob3J0OiBbJ+C4reC4si4nLCAn4LiILicsICfguK0uJywgJ+C4ni4nLCAn4Lie4LikLicsICfguKguJywgJ+C4qi4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn4Lit4LiyLicsICfguIguJywgJ+C4rS4nLCAn4LieLicsICfguJ7guKQuJywgJ+C4qC4nLCAn4LiqLiddLFxuICB3aWRlOiBbJ+C4reC4suC4l+C4tOC4leC4ouC5jCcsICfguIjguLHguJnguJfguKPguYwnLCAn4Lit4Lix4LiH4LiE4Liy4LijJywgJ+C4nuC4uOC4mCcsICfguJ7guKTguKvguLHguKrguJrguJTguLUnLCAn4Lio4Li44LiB4Lij4LmMJywgJ+C5gOC4quC4suC4o+C5jCddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn4LihLuC4hC4nLCAn4LiBLuC4ni4nLCAn4Lih4Li1LuC4hC4nLCAn4LmA4LihLuC4oi4nLCAn4LieLuC4hC4nLCAn4Lih4Li0LuC4oi4nLCAn4LiBLuC4hC4nLCAn4LiqLuC4hC4nLCAn4LiBLuC4oi4nLCAn4LiVLuC4hC4nLCAn4LieLuC4oi4nLCAn4LiYLuC4hC4nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn4LihLuC4hC4nLCAn4LiBLuC4ni4nLCAn4Lih4Li1LuC4hC4nLCAn4LmA4LihLuC4oi4nLCAn4LieLuC4hC4nLCAn4Lih4Li0LuC4oi4nLCAn4LiBLuC4hC4nLCAn4LiqLuC4hC4nLCAn4LiBLuC4oi4nLCAn4LiVLuC4hC4nLCAn4LieLuC4oi4nLCAn4LiYLuC4hC4nXSxcbiAgd2lkZTogWyfguKHguIHguKPguLLguITguKEnLCAn4LiB4Li44Lih4Lig4Liy4Lie4Lix4LiZ4LiY4LmMJywgJ+C4oeC4teC4meC4suC4hOC4oScsICfguYDguKHguKnguLLguKLguJknLCAn4Lie4Lik4Lip4Lig4Liy4LiE4LihJywgJ+C4oeC4tOC4luC4uOC4meC4suC4ouC4mScsICfguIHguKPguIHguI7guLLguITguKEnLCAn4Liq4Li04LiH4Lir4Liy4LiE4LihJywgJ+C4geC4seC4meC4ouC4suC4ouC4mScsICfguJXguLjguKXguLLguITguKEnLCAn4Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZJywgJ+C4mOC4seC4meC4p+C4suC4hOC4oSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnLFxuICAgIHBtOiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBtaWRuaWdodDogJ+C5gOC4l+C4teC5iOC4ouC4h+C4hOC4t+C4mScsXG4gICAgbm9vbjogJ+C5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgbW9ybmluZzogJ+C5gOC4iuC5ieC4sicsXG4gICAgYWZ0ZXJub29uOiAn4Lia4LmI4Liy4LiiJyxcbiAgICBldmVuaW5nOiAn4LmA4Lii4LmH4LiZJyxcbiAgICBuaWdodDogJ+C4geC4peC4suC4h+C4hOC4t+C4mSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgcG06ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnLFxuICAgIG1pZG5pZ2h0OiAn4LmA4LiX4Li14LmI4Lii4LiH4LiE4Li34LiZJyxcbiAgICBub29uOiAn4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBtb3JuaW5nOiAn4LmA4LiK4LmJ4LiyJyxcbiAgICBhZnRlcm5vb246ICfguJrguYjguLLguKInLFxuICAgIGV2ZW5pbmc6ICfguYDguKLguYfguJknLFxuICAgIG5pZ2h0OiAn4LiB4Lil4Liy4LiH4LiE4Li34LiZJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICfguIHguYjguK3guJnguYDguJfguLXguYjguKLguIcnLFxuICAgIHBtOiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBtaWRuaWdodDogJ+C5gOC4l+C4teC5iOC4ouC4h+C4hOC4t+C4mScsXG4gICAgbm9vbjogJ+C5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgbW9ybmluZzogJ+C5gOC4iuC5ieC4sicsXG4gICAgYWZ0ZXJub29uOiAn4Lia4LmI4Liy4LiiJyxcbiAgICBldmVuaW5nOiAn4LmA4Lii4LmH4LiZJyxcbiAgICBuaWdodDogJ+C4geC4peC4suC4h+C4hOC4t+C4mSdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgcG06ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnLFxuICAgIG1pZG5pZ2h0OiAn4LmA4LiX4Li14LmI4Lii4LiH4LiE4Li34LiZJyxcbiAgICBub29uOiAn4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBtb3JuaW5nOiAn4LiV4Lit4LiZ4LmA4LiK4LmJ4LiyJyxcbiAgICBhZnRlcm5vb246ICfguJXguK3guJnguIHguKXguLLguIfguKfguLHguJknLFxuICAgIGV2ZW5pbmc6ICfguJXguK3guJnguYDguKLguYfguJknLFxuICAgIG5pZ2h0OiAn4LiV4Lit4LiZ4LiB4Lil4Liy4LiH4LiE4Li34LiZJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBwbTogJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgbWlkbmlnaHQ6ICfguYDguJfguLXguYjguKLguIfguITguLfguJknLFxuICAgIG5vb246ICfguYDguJfguLXguYjguKLguIcnLFxuICAgIG1vcm5pbmc6ICfguJXguK3guJnguYDguIrguYnguLInLFxuICAgIGFmdGVybm9vbjogJ+C4leC4reC4meC4geC4peC4suC4h+C4p+C4seC4mScsXG4gICAgZXZlbmluZzogJ+C4leC4reC4meC5gOC4ouC5h+C4mScsXG4gICAgbmlnaHQ6ICfguJXguK3guJnguIHguKXguLLguIfguITguLfguJknXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hycsXG4gICAgcG06ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnLFxuICAgIG1pZG5pZ2h0OiAn4LmA4LiX4Li14LmI4Lii4LiH4LiE4Li34LiZJyxcbiAgICBub29uOiAn4LmA4LiX4Li14LmI4Lii4LiHJyxcbiAgICBtb3JuaW5nOiAn4LiV4Lit4LiZ4LmA4LiK4LmJ4LiyJyxcbiAgICBhZnRlcm5vb246ICfguJXguK3guJnguIHguKXguLLguIfguKfguLHguJknLFxuICAgIGV2ZW5pbmc6ICfguJXguK3guJnguYDguKLguYfguJknLFxuICAgIG5pZ2h0OiAn4LiV4Lit4LiZ4LiB4Lil4Liy4LiH4LiE4Li34LiZJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXlxcZCsvaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKFtiQl18W2FBXXzguITguKgpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihbYkJdXFwuP1xccz9bY0NdXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuP3zguIRcXC4/4LioXFwuPykvaSxcbiAgd2lkZTogL14o4LiB4LmI4Lit4LiZ4LiE4Lij4Li04Liq4LiV4LiB4Liy4LilfOC4hOC4o+C4tOC4quC4leC5jOC4qOC4seC4geC4o+C4suC4inzguITguKPguLTguKrguJXguIHguLLguKUpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15bYkJdL2ksIC9eKF5bYUFdfOC4hFxcLj/guKhcXC4/fOC4hOC4o+C4tOC4quC4leC4geC4suC4pXzguITguKPguLTguKrguJXguYzguKjguLHguIHguKPguLLguIp8KS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9e4LmE4LiV4Lij4Lih4Liy4LiqKOC4l+C4teC5iCk/ID9bMTIzNF0vaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLygxfOC5geC4o+C4gXzguKvguJnguLbguYjguIcpL2ksIC8oMnzguKrguK3guIcpL2ksIC8oM3zguKrguLLguKEpL2ksIC8oNHzguKrguLXguYgpL2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXijguKFcXC4/4LiEXFwuP3zguIFcXC4/4LieXFwuP3zguKHguLVcXC4/4LiEXFwuP3zguYDguKFcXC4/4LiiXFwuP3zguJ5cXC4/4LiEXFwuP3zguKHguLRcXC4/4LiiXFwuP3zguIFcXC4/4LiEXFwuP3zguKpcXC4/4LiEXFwuP3zguIFcXC4/4LiiXFwuP3zguJVcXC4/4LiEXFwuP3zguJ5cXC4/4LiiXFwuP3zguJhcXC4/4LiEXFwuPykvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKOC4oVxcLj/guIRcXC4/fOC4gVxcLj/guJ5cXC4/fOC4oeC4tVxcLj/guIRcXC4/fOC5gOC4oVxcLj/guKJcXC4/fOC4nlxcLj/guIRcXC4/fOC4oeC4tFxcLj/guKJcXC4/fOC4gVxcLj/guIRcXC4/fOC4qlxcLj/guIRcXC4/fOC4gVxcLj/guKJcXC4/fOC4lVxcLj/guIRcXC4/fOC4nlxcLj/guKJcXC4/fOC4mFxcLj/guIRcXC4/JykvaSxcbiAgd2lkZTogL14o4Lih4LiB4Lij4Liy4LiE4LihfOC4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jHzguKHguLXguJnguLLguITguKF84LmA4Lih4Lip4Liy4Lii4LiZfOC4nuC4pOC4qeC4oOC4suC4hOC4oXzguKHguLTguJbguLjguJnguLLguKLguJl84LiB4Lij4LiB4LiO4Liy4LiE4LihfOC4quC4tOC4h+C4q+C4suC4hOC4oXzguIHguLHguJnguKLguLLguKLguJl84LiV4Li44Lil4Liy4LiE4LihfOC4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mXzguJjguLHguJnguKfguLLguITguKEpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICB3aWRlOiBbL17guKHguIEvaSwgL17guIHguLjguKEvaSwgL17guKHguLUvaSwgL17guYDguKEvaSwgL17guJ7guKTguKkvaSwgL17guKHguLQvaSwgL17guIHguKPguIEvaSwgL17guKovaSwgL17guIHguLHguJkvaSwgL17guJUvaSwgL17guJ7guKTguKgvaSwgL17guJgvaV0sXG4gIGFueTogWy9e4LihXFwuP+C4hFxcLj8vaSwgL17guIFcXC4/4LieXFwuPy9pLCAvXuC4oeC4tVxcLj/guIRcXC4/L2ksIC9e4LmA4LihXFwuP+C4olxcLj8vaSwgL17guJ5cXC4/4LiEXFwuPy9pLCAvXuC4oeC4tFxcLj/guKJcXC4/L2ksIC9e4LiBXFwuP+C4hFxcLj8vaSwgL17guKpcXC4/4LiEXFwuPy9pLCAvXuC4gVxcLj/guKJcXC4/L2ksIC9e4LiVXFwuP+C4hFxcLj8vaSwgL17guJ5cXC4/4LiiXFwuPy9pLCAvXuC4mFxcLj/guIRcXC4/L2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14o4Lit4LiyXFwuP3zguIhcXC4/fOC4rVxcLj984Lie4LikXFwuP3zguJ5cXC4/fOC4qFxcLj984LiqXFwuPykvaSxcbiAgc2hvcnQ6IC9eKOC4reC4slxcLj984LiIXFwuP3zguK1cXC4/fOC4nuC4pFxcLj984LieXFwuP3zguKhcXC4/fOC4qlxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXijguK3guLJcXC4/fOC4iFxcLj984LitXFwuP3zguJ7guKRcXC4/fOC4nlxcLj984LioXFwuP3zguKpcXC4/KS9pLFxuICB3aWRlOiAvXijguK3guLLguJfguLTguJXguKLguYx84LiI4Lix4LiZ4LiX4Lij4LmMfOC4reC4seC4h+C4hOC4suC4o3zguJ7guLjguJh84Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1fOC4qOC4uOC4geC4o+C5jHzguYDguKrguLLguKPguYwpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgd2lkZTogWy9e4Lit4LiyL2ksIC9e4LiI4LixL2ksIC9e4Lit4LixL2ksIC9e4Lie4Li44LiYL2ksIC9e4Lie4LikL2ksIC9e4LioL2ksIC9e4LmA4LiqL2ldLFxuICBhbnk6IFsvXuC4reC4si9pLCAvXuC4iC9pLCAvXuC4rS9pLCAvXuC4nig/IeC4pCkvaSwgL17guJ7guKQvaSwgL17guKgvaSwgL17guKovaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiAvXijguIHguYjguK3guJnguYDguJfguLXguYjguKLguId84Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHfOC5gOC4l+C4teC5iOC4ouC4h+C4hOC4t+C4mXzguYDguJfguLXguYjguKLguId8KOC4leC4reC4mS4qPyk/Lioo4LmA4LiX4Li14LmI4Lii4LiHfOC5gOC4iuC5ieC4snzguJrguYjguLLguKJ84LmA4Lii4LmH4LiZfOC4geC4peC4suC4h+C4hOC4t+C4mSkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9e4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHL2ksXG4gICAgcG06IC9e4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHL2ksXG4gICAgbWlkbmlnaHQ6IC9e4LmA4LiX4Li14LmI4Lii4LiH4LiE4Li34LiZL2ksXG4gICAgbm9vbjogL17guYDguJfguLXguYjguKLguIcvaSxcbiAgICBtb3JuaW5nOiAv4LmA4LiK4LmJ4LiyL2ksXG4gICAgYWZ0ZXJub29uOiAv4Lia4LmI4Liy4LiiL2ksXG4gICAgZXZlbmluZzogL+C5gOC4ouC5h+C4mS9pLFxuICAgIG5pZ2h0OiAv4LiB4Lil4Liy4LiH4LiE4Li34LiZL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFRoYWkgbG9jYWxlLlxuICogQGxhbmd1YWdlIFRoYWlcbiAqIEBpc28tNjM5LTIgdGhhXG4gKiBAYXV0aG9yIEF0aGl3YXQgSGlydW53b3Jhd29uZ2t1biBbQGF0aGl2dmF0XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXRoaXZ2YXR9XG4gKiBAYXV0aG9yIFtAaGF3a3VwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vaGF3a3VwfVxuICogQGF1dGhvciAgSmlyYXdhdCBJLiBbQG5vZHRlbTY2XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbm9kdGVtNjZ9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ3RoJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2JpciBzYW5peWVkZW4gYXonLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNhbml5ZWRlbiBheidcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNhbml5ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2FuaXllJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ3lhcsSxbSBkYWtpa2EnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnYmlyIGRha2lrYWRhbiBheicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGFraWthZGFuIGF6J1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgZGFraWthJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYWtpa2EnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAneWFrbGHFn8SxayAxIHNhYXQnLFxuICAgIG90aGVyOiAneWFrbGHFn8SxayB7e2NvdW50fX0gc2FhdCdcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBzYWF0JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzYWF0J1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZ8O8bicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZ8O8bidcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICd5YWtsYcWfxLFrIDEgaGFmdGEnLFxuICAgIG90aGVyOiAneWFrbGHFn8SxayB7e2NvdW50fX0gaGFmdGEnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgaGFmdGEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhhZnRhJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICd5YWtsYcWfxLFrIDEgYXknLFxuICAgIG90aGVyOiAneWFrbGHFn8SxayB7e2NvdW50fX0gYXknXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBheSdcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICd5YWtsYcWfxLFrIDEgecSxbCcsXG4gICAgb3RoZXI6ICd5YWtsYcWfxLFrIHt7Y291bnR9fSB5xLFsJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHnEsWwnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHnEsWwnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICcxIHnEsWxkYW4gZmF6bGEnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHnEsWxkYW4gZmF6bGEnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ25lcmVkZXlzZSAxIHnEsWwnLFxuICAgIG90aGVyOiAnbmVyZWRleXNlIHt7Y291bnR9fSB5xLFsJ1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmICh0eXBlb2YgZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50KTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBzb25yYSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIMO2bmNlJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2QgTU1NTSB5IEVFRUUnLFxuICBsb25nOiAnZCBNTU1NIHknLFxuICBtZWRpdW06ICdkIE1NTSB5JyxcbiAgc2hvcnQ6ICdkZC5NTS55eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdzYWF0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdzYWF0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidnZcOnZW4gaGFmdGEnIGVlZWUgJ3NhYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIidkw7xuIHNhYXQnIHBcIixcbiAgdG9kYXk6IFwiJ2J1Z8O8biBzYWF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid5YXLEsW4gc2FhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdzYWF0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIGFiYnJldmlhdGVkOiBbJ03DlicsICdNUyddLFxuICBuYXJyb3c6IFsnTcOWJywgJ01TJ10sXG4gIHdpZGU6IFsnTWlsYXR0YW4gw5ZuY2UnLCAnTWlsYXR0YW4gU29ucmEnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWycxw4cnLCAnMsOHJywgJzPDhycsICc0w4cnXSxcbiAgd2lkZTogWyfEsGxrIMOnZXlyZWsnLCAnxLBraW5jaSDDh2V5cmVrJywgJ8Ocw6fDvG5jw7wgw6dleXJlaycsICdTb24gw6dleXJlayddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnTycsICfFnicsICdNJywgJ04nLCAnTScsICdIJywgJ1QnLCAnQScsICdFJywgJ0UnLCAnSycsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ09jYScsICfFnnViJywgJ01hcicsICdOaXMnLCAnTWF5JywgJ0hheicsICdUZW0nLCAnQcSfdScsICdFeWwnLCAnRWtpJywgJ0thcycsICdBcmEnXSxcbiAgd2lkZTogWydPY2FrJywgJ8WedWJhdCcsICdNYXJ0JywgJ05pc2FuJywgJ01hecSxcycsICdIYXppcmFuJywgJ1RlbW11eicsICdBxJ91c3RvcycsICdFeWzDvGwnLCAnRWtpbScsICdLYXPEsW0nLCAnQXJhbMSxayddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1AnLCAnUCcsICdTJywgJ8OHJywgJ1AnLCAnQycsICdDJ10sXG4gIHNob3J0OiBbJ1B6JywgJ1B0JywgJ1NhJywgJ8OHYScsICdQZScsICdDdScsICdDdCddLFxuICBhYmJyZXZpYXRlZDogWydQYXonLCAnUHRzJywgJ1NhbCcsICfDh2FyJywgJ1BlcicsICdDdW0nLCAnQ3RzJ10sXG4gIHdpZGU6IFsnUGF6YXInLCAnUGF6YXJ0ZXNpJywgJ1NhbMSxJywgJ8OHYXLFn2FtYmEnLCAnUGVyxZ9lbWJlJywgJ0N1bWEnLCAnQ3VtYXJ0ZXNpJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ8O2w7YnLFxuICAgIHBtOiAnw7ZzJyxcbiAgICBtaWRuaWdodDogJ2d5JyxcbiAgICBub29uOiAnw7YnLFxuICAgIG1vcm5pbmc6ICdzYScsXG4gICAgYWZ0ZXJub29uOiAnw7ZzJyxcbiAgICBldmVuaW5nOiAnYWsnLFxuICAgIG5pZ2h0OiAnZ2UnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfDlsOWJyxcbiAgICBwbTogJ8OWUycsXG4gICAgbWlkbmlnaHQ6ICdnZWNlIHlhcsSxc8SxJyxcbiAgICBub29uOiAnw7bEn2xlJyxcbiAgICBtb3JuaW5nOiAnc2FiYWgnLFxuICAgIGFmdGVybm9vbjogJ8O2xJ9sZWRlbiBzb25yYScsXG4gICAgZXZlbmluZzogJ2FrxZ9hbScsXG4gICAgbmlnaHQ6ICdnZWNlJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICfDli7Dli4nLFxuICAgIHBtOiAnw5YuUy4nLFxuICAgIG1pZG5pZ2h0OiAnZ2VjZSB5YXLEsXPEsScsXG4gICAgbm9vbjogJ8O2xJ9sZScsXG4gICAgbW9ybmluZzogJ3NhYmFoJyxcbiAgICBhZnRlcm5vb246ICfDtsSfbGVkZW4gc29ucmEnLFxuICAgIGV2ZW5pbmc6ICdha8WfYW0nLFxuICAgIG5pZ2h0OiAnZ2VjZSdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ8O2w7YnLFxuICAgIHBtOiAnw7ZzJyxcbiAgICBtaWRuaWdodDogJ2d5JyxcbiAgICBub29uOiAnw7YnLFxuICAgIG1vcm5pbmc6ICdzYScsXG4gICAgYWZ0ZXJub29uOiAnw7ZzJyxcbiAgICBldmVuaW5nOiAnYWsnLFxuICAgIG5pZ2h0OiAnZ2UnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfDlsOWJyxcbiAgICBwbTogJ8OWUycsXG4gICAgbWlkbmlnaHQ6ICdnZWNlIHlhcsSxc8SxJyxcbiAgICBub29uOiAnw7bEn2xlbicsXG4gICAgbW9ybmluZzogJ3NhYmFobGV5aW4nLFxuICAgIGFmdGVybm9vbjogJ8O2xJ9sZWRlbiBzb25yYScsXG4gICAgZXZlbmluZzogJ2FrxZ9hbWxleWluJyxcbiAgICBuaWdodDogJ2dlY2VsZXlpbidcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnw7Yuw7YuJyxcbiAgICBwbTogJ8O2LnMuJyxcbiAgICBtaWRuaWdodDogJ2dlY2UgeWFyxLFzxLEnLFxuICAgIG5vb246ICfDtsSfbGVuJyxcbiAgICBtb3JuaW5nOiAnc2FiYWhsZXlpbicsXG4gICAgYWZ0ZXJub29uOiAnw7bEn2xlZGVuIHNvbnJhJyxcbiAgICBldmVuaW5nOiAnYWvFn2FtbGV5aW4nLFxuICAgIG5pZ2h0OiAnZ2VjZWxleWluJ1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuICByZXR1cm4gbnVtYmVyICsgJy4nO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsRm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKFxcLik/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihtw7Z8bXMpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihtw7Z8bXMpL2ksXG4gIHdpZGU6IC9eKG1pbGF0dGFuIMO2bmNlfG1pbGF0dGFuIHNvbnJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy8oXm3DtnxebWlsYXR0YW4gw7ZuY2UpL2ksIC8oXm1zfF5taWxhdHRhbiBzb25yYSkvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eWzEyMzRdw6cvaSxcbiAgd2lkZTogL14oKGl8xLApbGt8KGl8xLApa2luY2l8w7zDp8O8bmPDvHxzb24pIMOnZXlyZWsvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV0sXG4gIGFiYnJldmlhdGVkOiBbLzHDpy9pLCAvMsOnL2ksIC8zw6cvaSwgLzTDpy9pXSxcbiAgd2lkZTogWy9eKGl8xLApbGsgw6dleXJlay9pLCAvKGl8xLApa2luY2kgw6dleXJlay9pLCAvw7zDp8O8bmPDvCDDp2V5cmVrL2ksIC9zb24gw6dleXJlay9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bb8WfbW5odGFla10vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKG9jYXzFn3VifG1hcnxuaXN8bWF5fGhhenx0ZW18YcSfdXxleWx8ZWtpfGthc3xhcmEpL2ksXG4gIHdpZGU6IC9eKG9jYWt8xZ91YmF0fG1hcnR8bmlzYW58bWF5xLFzfGhhemlyYW58dGVtbXV6fGHEn3VzdG9zfGV5bMO8bHxla2ltfGthc8SxbXxhcmFsxLFrKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15vL2ksIC9exZ8vaSwgL15tL2ksIC9ebi9pLCAvXm0vaSwgL15oL2ksIC9edC9pLCAvXmEvaSwgL15lL2ksIC9eZS9pLCAvXmsvaSwgL15hL2ldLFxuICBhbnk6IFsvXm8vaSwgL17Fny9pLCAvXm1hci9pLCAvXm4vaSwgL15tYXkvaSwgL15oL2ksIC9edC9pLCAvXmHEny9pLCAvXmV5L2ksIC9eZWsvaSwgL15rL2ksIC9eYXIvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltwc8OnY10vaSxcbiAgc2hvcnQ6IC9eKHB6fHB0fHNhfMOnYXxwZXxjdXxjdCkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHBhenxwdHN8c2FsfMOnYXJ8cGVyfGN1bXxjdHMpL2ksXG4gIHdpZGU6IC9eKHBhemFyfHBhemFydGVzaXxzYWzEsXzDp2FyxZ9hbWJhfHBlcsWfZW1iZXxjdW1hfGN1bWFydGVzaSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnAvaSwgL15wL2ksIC9ecy9pLCAvXsOnL2ksIC9ecC9pLCAvXmMvaSwgL15jL2ldLFxuICBhbnk6IFsvXnB6L2ksIC9ecHQvaSwgL15zYS9pLCAvXsOnYS9pLCAvXnBlL2ksIC9eY3UvaSwgL15jdC9pXSxcbiAgd2lkZTogWy9ecGF6YXIvaSwgL15wYXphcnRlc2kvaSwgL15zYWzEsS9pLCAvXsOnYXLFn2FtYmEvaSwgL15wZXLFn2VtYmUvaSwgL15jdW1hL2ksIC9jdW1hcnRlc2kvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXijDtsO2fMO2c3xneXzDtnxzYXzDtnN8YWt8Z2UpL2ksXG4gIGFueTogL14ow7ZcXC4/XFxzP1vDtnNdXFwuP3zDtsSfbGVkZW4gc29ucmF8Z2VjZSB5YXLEsXPEsXzDtsSfbGV8KHNhYmFofMO2xJ98YWvFn2FtfGdlY2UpKGxleWluKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL17DtlxcLj/DtlxcLj8vaSxcbiAgICBwbTogL17DtlxcLj9zXFwuPy9pLFxuICAgIG1pZG5pZ2h0OiAvXihneXxnZWNlIHlhcsSxc8SxKS9pLFxuICAgIG5vb246IC9ew7bEny9pLFxuICAgIG1vcm5pbmc6IC9ec2EvaSxcbiAgICBhZnRlcm5vb246IC9ew7bEn2xlZGVuIHNvbnJhL2ksXG4gICAgZXZlbmluZzogL15hay9pLFxuICAgIG5pZ2h0OiAvXmdlL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFR1cmtpc2ggbG9jYWxlLlxuICogQGxhbmd1YWdlIFR1cmtpc2hcbiAqIEBpc28tNjM5LTIgdHVyXG4gKiBAYXV0aG9yIEFscGNhbiBBeWTEsW4gW0BhbHBjYW5heWRpbl17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2FscGNhbmF5ZGlufVxuICogQGF1dGhvciBCZXJrYXkgU2FyZ8SxbiBbQGJlcmthZXlde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXJrYWV5fVxuICogQGF1dGhvciBJc21haWwgRGVtaXJiaWxlayBbQGRidGVrXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vZGJ0ZWt9XG4gKiBAYXV0aG9yIMSwc21haWwgS2F5YXIgW0Bpa2F5YXJde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pa2F5YXJ9XG4gKlxuICpcbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAndHInLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiZnVuY3Rpb24gZGVjbGVuc2lvbihzY2hlbWUsIGNvdW50KSB7XG4gIC8vIHNjaGVtZSBmb3IgY291bnQ9MSBleGlzdHNcbiAgaWYgKHNjaGVtZS5vbmUgIT09IHVuZGVmaW5lZCAmJiBjb3VudCA9PT0gMSkge1xuICAgIHJldHVybiBzY2hlbWUub25lO1xuICB9XG5cbiAgdmFyIHJlbTEwID0gY291bnQgJSAxMDtcbiAgdmFyIHJlbTEwMCA9IGNvdW50ICUgMTAwOyAvLyAxLCAyMSwgMzEsIC4uLlxuXG4gIGlmIChyZW0xMCA9PT0gMSAmJiByZW0xMDAgIT09IDExKSB7XG4gICAgcmV0dXJuIHNjaGVtZS5zaW5ndWxhck5vbWluYXRpdmUucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpOyAvLyAyLCAzLCA0LCAyMiwgMjMsIDI0LCAzMiAuLi5cbiAgfSBlbHNlIGlmIChyZW0xMCA+PSAyICYmIHJlbTEwIDw9IDQgJiYgKHJlbTEwMCA8IDEwIHx8IHJlbTEwMCA+IDIwKSkge1xuICAgIHJldHVybiBzY2hlbWUuc2luZ3VsYXJHZW5pdGl2ZS5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7IC8vIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgLi4uXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNjaGVtZS5wbHVyYWxHZW5pdGl2ZS5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZVRva2VuRm4oc2NoZW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoY291bnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIGlmIChzY2hlbWUuZnV0dXJlKSB7XG4gICAgICAgICAgcmV0dXJuIGRlY2xlbnNpb24oc2NoZW1lLmZ1dHVyZSwgY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAn0LfQsCAnICsgZGVjbGVuc2lvbihzY2hlbWUucmVndWxhciwgY291bnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2NoZW1lLnBhc3QpIHtcbiAgICAgICAgICByZXR1cm4gZGVjbGVuc2lvbihzY2hlbWUucGFzdCwgY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWNsZW5zaW9uKHNjaGVtZS5yZWd1bGFyLCBjb3VudCkgKyAnINGC0L7QvNGDJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVjbGVuc2lvbihzY2hlbWUucmVndWxhciwgY291bnQpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgb25lOiAn0LzQtdC90YjQtSDRgdC10LrRg9C90LTQuCcsXG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvNC10L3RiNC1IHt7Y291bnR9fSDRgdC10LrRg9C90LTQuCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LzQtdC90YjQtSB7e2NvdW50fX0g0YHQtdC60YPQvdC0JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0LzQtdC90YjQtSB7e2NvdW50fX0g0YHQtdC60YPQvdC0J1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBvbmU6ICfQvNC10L3RiNC1LCDQvdGW0LYg0LfQsCDRgdC10LrRg9C90LTRgycsXG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQvNC10L3RiNC1LCDQvdGW0LYg0LfQsCB7e2NvdW50fX0g0YHQtdC60YPQvdC00YMnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C80LXQvdGI0LUsINC90ZbQtiDQt9CwIHt7Y291bnR9fSDRgdC10LrRg9C90LTQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C80LXQvdGI0LUsINC90ZbQtiDQt9CwIHt7Y291bnR9fSDRgdC10LrRg9C90LQnXG4gICAgfVxuICB9KSxcbiAgeFNlY29uZHM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0YHQtdC60YPQvdC00LAnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LTQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LQnXG4gICAgfSxcbiAgICBwYXN0OiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICd7e2NvdW50fX0g0YHQtdC60YPQvdC00YMg0YLQvtC80YMnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LTQuCDRgtC+0LzRgycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgdC10LrRg9C90LQg0YLQvtC80YMnXG4gICAgfSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9C30LAge3tjb3VudH19INGB0LXQutGD0L3QtNGDJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQt9CwIHt7Y291bnR9fSDRgdC10LrRg9C90LTQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C30LAge3tjb3VudH19INGB0LXQutGD0L3QtCdcbiAgICB9XG4gIH0pLFxuICBoYWxmQU1pbnV0ZTogZnVuY3Rpb24gKF8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICAgIHJldHVybiAn0LfQsCDQv9GW0LLRhdCy0LjQu9C40L3QuCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ9C/0ZbQstGF0LLQuNC70LjQvdC4INGC0L7QvNGDJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ9C/0ZbQstGF0LLQuNC70LjQvdC4JztcbiAgfSxcbiAgbGVzc1RoYW5YTWludXRlczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIG9uZTogJ9C80LXQvdGI0LUg0YXQstC40LvQuNC90LgnLFxuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LzQtdC90YjQtSB7e2NvdW50fX0g0YXQstC40LvQuNC90LgnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C80LXQvdGI0LUge3tjb3VudH19INGF0LLQuNC70LjQvScsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C80LXQvdGI0LUge3tjb3VudH19INGF0LLQuNC70LjQvSdcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgb25lOiAn0LzQtdC90YjQtSwg0L3RltC2INC30LAg0YXQstC40LvQuNC90YMnLFxuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LzQtdC90YjQtSwg0L3RltC2INC30LAge3tjb3VudH19INGF0LLQuNC70LjQvdGDJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQvNC10L3RiNC1LCDQvdGW0LYg0LfQsCB7e2NvdW50fX0g0YXQstC40LvQuNC90LgnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQvNC10L3RiNC1LCDQvdGW0LYg0LfQsCB7e2NvdW50fX0g0YXQstC40LvQuNC9J1xuICAgIH1cbiAgfSksXG4gIHhNaW51dGVzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INGF0LLQuNC70LjQvdCwJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICd7e2NvdW50fX0g0YXQstC40LvQuNC90LgnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICd7e2NvdW50fX0g0YXQstC40LvQuNC9J1xuICAgIH0sXG4gICAgcGFzdDoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INGF0LLQuNC70LjQvdGDINGC0L7QvNGDJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICd7e2NvdW50fX0g0YXQstC40LvQuNC90Lgg0YLQvtC80YMnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICd7e2NvdW50fX0g0YXQstC40LvQuNC9INGC0L7QvNGDJ1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQt9CwIHt7Y291bnR9fSDRhdCy0LjQu9C40L3RgycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LfQsCB7e2NvdW50fX0g0YXQstC40LvQuNC90LgnLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQt9CwIHt7Y291bnR9fSDRhdCy0LjQu9C40L0nXG4gICAgfVxuICB9KSxcbiAgYWJvdXRYSG91cnM6IGJ1aWxkTG9jYWxpemVUb2tlbkZuKHtcbiAgICByZWd1bGFyOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQsdC70LjQt9GM0LrQviB7e2NvdW50fX0g0LPQvtC00LjQvdC4JyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQsdC70LjQt9GM0LrQviB7e2NvdW50fX0g0LPQvtC00LjQvScsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDQs9C+0LTQuNC9J1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQv9GA0LjQsdC70LjQt9C90L4g0LfQsCB7e2NvdW50fX0g0LPQvtC00LjQvdGDJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQv9GA0LjQsdC70LjQt9C90L4g0LfQsCB7e2NvdW50fX0g0LPQvtC00LjQvdC4JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INCz0L7QtNC40L0nXG4gICAgfVxuICB9KSxcbiAgeEhvdXJzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INCz0L7QtNC40L3RgycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INCz0L7QtNC40L3QuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDQs9C+0LTQuNC9J1xuICAgIH1cbiAgfSksXG4gIHhEYXlzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INC00LXQvdGMJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICd7e2NvdW50fX0g0LTQvdGPJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAne3tjb3VudH19INC00L3RltCyJ1xuICAgIH1cbiAgfSksXG4gIGFib3V0WFdlZWtzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LHQu9C40LfRjNC60L4ge3tjb3VudH19INGC0LjQttC90Y8nLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDRgtC40LbQvdGW0LInLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQsdC70LjQt9GM0LrQviB7e2NvdW50fX0g0YLQuNC20L3RltCyJ1xuICAgIH0sXG4gICAgZnV0dXJlOiB7XG4gICAgICBzaW5ndWxhck5vbWluYXRpdmU6ICfQv9GA0LjQsdC70LjQt9C90L4g0LfQsCB7e2NvdW50fX0g0YLQuNC20LTQtdC90YwnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30L3QviDQt9CwIHt7Y291bnR9fSDRgtC40LbQvdGWJyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INGC0LjQttC90ZYnXG4gICAgfVxuICB9KSxcbiAgeFdlZWtzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INGC0LjQttC00LXQvdGMJyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICd7e2NvdW50fX0g0YLQuNC20L3RjycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDRgtC40LbQvdGWJ1xuICAgIH1cbiAgfSksXG4gIGFib3V0WE1vbnRoczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDQvNGW0YHRj9GG0Y8nLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDQvNGW0YHRj9GG0ZbQsicsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDQvNGW0YHRj9GG0ZbQsidcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INC80ZbRgdGP0YbRjCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INC80ZbRgdGP0YbRjycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C/0YDQuNCx0LvQuNC30L3QviDQt9CwIHt7Y291bnR9fSDQvNGW0YHRj9GG0ZbQsidcbiAgICB9XG4gIH0pLFxuICB4TW9udGhzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INC80ZbRgdGP0YbRjCcsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INC80ZbRgdGP0YbRjycsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ3t7Y291bnR9fSDQvNGW0YHRj9GG0ZbQsidcbiAgICB9XG4gIH0pLFxuICBhYm91dFhZZWFyczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9Cx0LvQuNC30YzQutC+IHt7Y291bnR9fSDRgNC+0LrRgycsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0LHQu9C40LfRjNC60L4ge3tjb3VudH19INGA0L7QutGW0LInLFxuICAgICAgcGx1cmFsR2VuaXRpdmU6ICfQsdC70LjQt9GM0LrQviB7e2NvdW50fX0g0YDQvtC60ZbQsidcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INGA0ZbQuicsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INGA0L7QutC4JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0L/RgNC40LHQu9C40LfQvdC+INC30LAge3tjb3VudH19INGA0L7QutGW0LInXG4gICAgfVxuICB9KSxcbiAgeFllYXJzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAne3tjb3VudH19INGA0ZbQuicsXG4gICAgICBzaW5ndWxhckdlbml0aXZlOiAne3tjb3VudH19INGA0L7QutC4JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAne3tjb3VudH19INGA0L7QutGW0LInXG4gICAgfVxuICB9KSxcbiAgb3ZlclhZZWFyczogYnVpbGRMb2NhbGl6ZVRva2VuRm4oe1xuICAgIHJlZ3VsYXI6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9Cx0ZbQu9GM0YjQtSB7e2NvdW50fX0g0YDQvtC60YMnLFxuICAgICAgc2luZ3VsYXJHZW5pdGl2ZTogJ9Cx0ZbQu9GM0YjQtSB7e2NvdW50fX0g0YDQvtC60ZbQsicsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9Cx0ZbQu9GM0YjQtSB7e2NvdW50fX0g0YDQvtC60ZbQsidcbiAgICB9LFxuICAgIGZ1dHVyZToge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LHRltC70YzRiNC1LCDQvdGW0LYg0LfQsCB7e2NvdW50fX0g0YDRltC6JyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQsdGW0LvRjNGI0LUsINC90ZbQtiDQt9CwIHt7Y291bnR9fSDRgNC+0LrQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9Cx0ZbQu9GM0YjQtSwg0L3RltC2INC30LAge3tjb3VudH19INGA0L7QutGW0LInXG4gICAgfVxuICB9KSxcbiAgYWxtb3N0WFllYXJzOiBidWlsZExvY2FsaXplVG9rZW5Gbih7XG4gICAgcmVndWxhcjoge1xuICAgICAgc2luZ3VsYXJOb21pbmF0aXZlOiAn0LzQsNC50LbQtSB7e2NvdW50fX0g0YDRltC6JyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQvNCw0LnQttC1IHt7Y291bnR9fSDRgNC+0LrQuCcsXG4gICAgICBwbHVyYWxHZW5pdGl2ZTogJ9C80LDQudC20LUge3tjb3VudH19INGA0L7QutGW0LInXG4gICAgfSxcbiAgICBmdXR1cmU6IHtcbiAgICAgIHNpbmd1bGFyTm9taW5hdGl2ZTogJ9C80LDQudC20LUg0LfQsCB7e2NvdW50fX0g0YDRltC6JyxcbiAgICAgIHNpbmd1bGFyR2VuaXRpdmU6ICfQvNCw0LnQttC1INC30LAge3tjb3VudH19INGA0L7QutC4JyxcbiAgICAgIHBsdXJhbEdlbml0aXZlOiAn0LzQsNC50LbQtSDQt9CwIHt7Y291bnR9fSDRgNC+0LrRltCyJ1xuICAgIH1cbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHJldHVybiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0oY291bnQsIG9wdGlvbnMpO1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJFRUVFLCBkbyBNTU1NIHkgJ9GALidcIixcbiAgbG9uZzogXCJkbyBNTU1NIHkgJ9GALidcIixcbiAgbWVkaXVtOiBcImQgTU1NIHkgJ9GALidcIixcbiAgc2hvcnQ6ICdkZC5NTS55J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0g6bW06c3Mgenp6eicsXG4gIGxvbmc6ICdIOm1tOnNzIHonLFxuICBtZWRpdW06ICdIOm1tOnNzJyxcbiAgc2hvcnQ6ICdIOm1tJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ9C+JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICfQvicge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiaW1wb3J0IGlzU2FtZVVUQ1dlZWsgZnJvbSAnLi4vLi4vLi4vLi4vX2xpYi9pc1NhbWVVVENXZWVrL2luZGV4LmpzJztcbnZhciBhY2N1c2F0aXZlV2Vla2RheXMgPSBbJ9C90LXQtNGW0LvRjicsICfQv9C+0L3QtdC00ZbQu9C+0LonLCAn0LLRltCy0YLQvtGA0L7QuicsICfRgdC10YDQtdC00YMnLCAn0YfQtdGC0LLQtdGAJywgJ9C/4oCZ0Y/RgtC90LjRhtGOJywgJ9GB0YPQsdC+0YLRgyddO1xuXG5mdW5jdGlvbiBsYXN0V2VlayhkYXkpIHtcbiAgdmFyIHdlZWtkYXkgPSBhY2N1c2F0aXZlV2Vla2RheXNbZGF5XTtcblxuICBzd2l0Y2ggKGRheSkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA1OlxuICAgIGNhc2UgNjpcbiAgICAgIHJldHVybiBcIifRgyDQvNC40L3Rg9C70YMgXCIgKyB3ZWVrZGF5ICsgXCIg0L4nIHBcIjtcblxuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIFwiJ9GDINC80LjQvdGD0LvQuNC5IFwiICsgd2Vla2RheSArIFwiINC+JyBwXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGhpc1dlZWsoZGF5KSB7XG4gIHZhciB3ZWVrZGF5ID0gYWNjdXNhdGl2ZVdlZWtkYXlzW2RheV07XG4gIHJldHVybiBcIifRgyBcIiArIHdlZWtkYXkgKyBcIiDQvicgcFwiO1xufVxuXG5mdW5jdGlvbiBuZXh0V2VlayhkYXkpIHtcbiAgdmFyIHdlZWtkYXkgPSBhY2N1c2F0aXZlV2Vla2RheXNbZGF5XTtcblxuICBzd2l0Y2ggKGRheSkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDM6XG4gICAgY2FzZSA1OlxuICAgIGNhc2UgNjpcbiAgICAgIHJldHVybiBcIifRgyDQvdCw0YHRgtGD0L/QvdGDIFwiICsgd2Vla2RheSArIFwiINC+JyBwXCI7XG5cbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBcIifRgyDQvdCw0YHRgtGD0L/QvdC40LkgXCIgKyB3ZWVrZGF5ICsgXCIg0L4nIHBcIjtcbiAgfVxufVxuXG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBmdW5jdGlvbiAoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIGlmIChpc1NhbWVVVENXZWVrKGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSkge1xuICAgICAgcmV0dXJuIHRoaXNXZWVrKGRheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsYXN0V2VlayhkYXkpO1xuICAgIH1cbiAgfSxcbiAgeWVzdGVyZGF5OiBcIifQstGH0L7RgNCwINC+JyBwXCIsXG4gIHRvZGF5OiBcIifRgdGM0L7Qs9C+0LTQvdGWINC+JyBwXCIsXG4gIHRvbW9ycm93OiBcIifQt9Cw0LLRgtGA0LAg0L4nIHBcIixcbiAgbmV4dFdlZWs6IGZ1bmN0aW9uIChkYXRlLCBiYXNlRGF0ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgaWYgKGlzU2FtZVVUQ1dlZWsoZGF0ZSwgYmFzZURhdGUsIG9wdGlvbnMpKSB7XG4gICAgICByZXR1cm4gdGhpc1dlZWsoZGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5leHRXZWVrKGRheSk7XG4gICAgfVxuICB9LFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBmb3JtYXQgPSBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRhdGUsIGJhc2VEYXRlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXQ7XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn0LTQviDQvS7QtS4nLCAn0L0u0LUuJ10sXG4gIGFiYnJldmlhdGVkOiBbJ9C00L4g0L0uINC1LicsICfQvS4g0LUuJ10sXG4gIHdpZGU6IFsn0LTQviDQvdCw0YjQvtGXINC10YDQuCcsICfQvdCw0YjQvtGXINC10YDQuCddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJzEt0Lkg0LrQsi4nLCAnMi3QuSDQutCyLicsICczLdC5INC60LIuJywgJzQt0Lkg0LrQsi4nXSxcbiAgd2lkZTogWycxLdC5INC60LLQsNGA0YLQsNC7JywgJzIt0Lkg0LrQstCw0YDRgtCw0LsnLCAnMy3QuSDQutCy0LDRgNGC0LDQuycsICc0LdC5INC60LLQsNGA0YLQsNC7J11cbn07XG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIC8vINCU0KHQotCjIDM1ODI6MjAxM1xuICBuYXJyb3c6IFsn0KEnLCAn0JsnLCAn0JEnLCAn0JonLCAn0KInLCAn0KcnLCAn0JsnLCAn0KEnLCAn0JInLCAn0JYnLCAn0JsnLCAn0JMnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn0YHRltGHLicsICfQu9GO0YIuJywgJ9Cx0LXRgNC10LcuJywgJ9C60LLRltGCLicsICfRgtGA0LDQsi4nLCAn0YfQtdGA0LIuJywgJ9C70LjQvy4nLCAn0YHQtdGA0L8uJywgJ9Cy0LXRgNC10YEuJywgJ9C20L7QstGCLicsICfQu9C40YHRgtC+0L8uJywgJ9Cz0YDRg9C0LiddLFxuICB3aWRlOiBbJ9GB0ZbRh9C10L3RjCcsICfQu9GO0YLQuNC5JywgJ9Cx0LXRgNC10LfQtdC90YwnLCAn0LrQstGW0YLQtdC90YwnLCAn0YLRgNCw0LLQtdC90YwnLCAn0YfQtdGA0LLQtdC90YwnLCAn0LvQuNC/0LXQvdGMJywgJ9GB0LXRgNC/0LXQvdGMJywgJ9Cy0LXRgNC10YHQtdC90YwnLCAn0LbQvtCy0YLQtdC90YwnLCAn0LvQuNGB0YLQvtC/0LDQtCcsICfQs9GA0YPQtNC10L3RjCddXG59O1xudmFyIGZvcm1hdHRpbmdNb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ9ChJywgJ9CbJywgJ9CRJywgJ9CaJywgJ9CiJywgJ9CnJywgJ9CbJywgJ9ChJywgJ9CSJywgJ9CWJywgJ9CbJywgJ9CTJ10sXG4gIGFiYnJldmlhdGVkOiBbJ9GB0ZbRhy4nLCAn0LvRjtGCLicsICfQsdC10YDQtdC3LicsICfQutCy0ZbRgi4nLCAn0YLRgNCw0LIuJywgJ9GH0LXRgNCyLicsICfQu9C40L8uJywgJ9GB0LXRgNC/LicsICfQstC10YDQtdGBLicsICfQttC+0LLRgi4nLCAn0LvQuNGB0YLQvtC/LicsICfQs9GA0YPQtC4nXSxcbiAgd2lkZTogWyfRgdGW0YfQvdGPJywgJ9C70Y7RgtC+0LPQvicsICfQsdC10YDQtdC30L3RjycsICfQutCy0ZbRgtC90Y8nLCAn0YLRgNCw0LLQvdGPJywgJ9GH0LXRgNCy0L3RjycsICfQu9C40L/QvdGPJywgJ9GB0LXRgNC/0L3RjycsICfQstC10YDQtdGB0L3RjycsICfQttC+0LLRgtC90Y8nLCAn0LvQuNGB0YLQvtC/0LDQtNCwJywgJ9Cz0YDRg9C00L3RjyddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ9CdJywgJ9CfJywgJ9CSJywgJ9ChJywgJ9CnJywgJ9CfJywgJ9ChJ10sXG4gIHNob3J0OiBbJ9C90LQnLCAn0L/QvScsICfQstGCJywgJ9GB0YAnLCAn0YfRgicsICfQv9GCJywgJ9GB0LEnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn0L3QtdC0JywgJ9C/0L7QvScsICfQstGW0LInLCAn0YHQtdGAJywgJ9GH0YLQsicsICfQv9GC0L0nLCAn0YHRg9CxJ10sXG4gIHdpZGU6IFsn0L3QtdC00ZbQu9GPJywgJ9C/0L7QvdC10LTRltC70L7QuicsICfQstGW0LLRgtC+0YDQvtC6JywgJ9GB0LXRgNC10LTQsCcsICfRh9C10YLQstC10YAnLCAn0L/igJnRj9GC0L3QuNGG0Y8nLCAn0YHRg9Cx0L7RgtCwJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9GW0LLQvS4nLFxuICAgIG5vb246ICfQv9C+0LsuJyxcbiAgICBtb3JuaW5nOiAn0YDQsNC90L7QuicsXG4gICAgYWZ0ZXJub29uOiAn0LTQtdC90YwnLFxuICAgIGV2ZW5pbmc6ICfQstC10YcuJyxcbiAgICBuaWdodDogJ9C90ZbRhydcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ9CU0J8nLFxuICAgIHBtOiAn0J/QnycsXG4gICAgbWlkbmlnaHQ6ICfQv9GW0LLQvS4nLFxuICAgIG5vb246ICfQv9C+0LsuJyxcbiAgICBtb3JuaW5nOiAn0YDQsNC90L7QuicsXG4gICAgYWZ0ZXJub29uOiAn0LTQtdC90YwnLFxuICAgIGV2ZW5pbmc6ICfQstC10YcuJyxcbiAgICBuaWdodDogJ9C90ZbRhydcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn0JTQnycsXG4gICAgcG06ICfQn9CfJyxcbiAgICBtaWRuaWdodDogJ9C/0ZbQstC90ZbRhycsXG4gICAgbm9vbjogJ9C/0L7Qu9GD0LTQtdC90YwnLFxuICAgIG1vcm5pbmc6ICfRgNCw0L3QvtC6JyxcbiAgICBhZnRlcm5vb246ICfQtNC10L3RjCcsXG4gICAgZXZlbmluZzogJ9Cy0LXRh9GW0YAnLFxuICAgIG5pZ2h0OiAn0L3RltGHJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn0JTQnycsXG4gICAgcG06ICfQn9CfJyxcbiAgICBtaWRuaWdodDogJ9C/0ZbQstC9LicsXG4gICAgbm9vbjogJ9C/0L7Quy4nLFxuICAgIG1vcm5pbmc6ICfRgNCw0L3QutGDJyxcbiAgICBhZnRlcm5vb246ICfQtNC90Y8nLFxuICAgIGV2ZW5pbmc6ICfQstC10YcuJyxcbiAgICBuaWdodDogJ9C90L7Rh9GWJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn0JTQnycsXG4gICAgcG06ICfQn9CfJyxcbiAgICBtaWRuaWdodDogJ9C/0ZbQstC9LicsXG4gICAgbm9vbjogJ9C/0L7Quy4nLFxuICAgIG1vcm5pbmc6ICfRgNCw0L3QutGDJyxcbiAgICBhZnRlcm5vb246ICfQtNC90Y8nLFxuICAgIGV2ZW5pbmc6ICfQstC10YcuJyxcbiAgICBuaWdodDogJ9C90L7Rh9GWJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICfQlNCfJyxcbiAgICBwbTogJ9Cf0J8nLFxuICAgIG1pZG5pZ2h0OiAn0L/RltCy0L3RltGHJyxcbiAgICBub29uOiAn0L/QvtC70YPQtNC10L3RjCcsXG4gICAgbW9ybmluZzogJ9GA0LDQvdC60YMnLFxuICAgIGFmdGVybm9vbjogJ9C00L3RjycsXG4gICAgZXZlbmluZzogJ9Cy0LXRhy4nLFxuICAgIG5pZ2h0OiAn0L3QvtGH0ZYnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KTtcbiAgdmFyIHN1ZmZpeDtcblxuICBpZiAodW5pdCA9PT0gJ2RhdGUnKSB7XG4gICAgaWYgKGRpcnR5TnVtYmVyID09PSAzIHx8IGRpcnR5TnVtYmVyID09PSAyMykge1xuICAgICAgc3VmZml4ID0gJy3RlCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1ZmZpeCA9ICct0LUnO1xuICAgIH1cbiAgfSBlbHNlIGlmICh1bml0ID09PSAnbWludXRlJyB8fCB1bml0ID09PSAnc2Vjb25kJyB8fCB1bml0ID09PSAnaG91cicpIHtcbiAgICBzdWZmaXggPSAnLdCwJztcbiAgfSBlbHNlIHtcbiAgICBzdWZmaXggPSAnLdC5JztcbiAgfVxuXG4gIHJldHVybiBkaXJ0eU51bWJlciArIHN1ZmZpeDtcbn1cblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gTnVtYmVyKHF1YXJ0ZXIpIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdNb250aFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2FueScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKC0/KNC1fNC5fNGUfNCwfNGPKSk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXigo0LTQviApP9C9XFwuP1xccz/QtVxcLj8pL2ksXG4gIGFiYnJldmlhdGVkOiAvXigo0LTQviApP9C9XFwuP1xccz/QtVxcLj8pL2ksXG4gIHdpZGU6IC9eKNC00L4g0L3QsNGI0L7RlyDQtdGA0Lh80L3QsNGI0L7RlyDQtdGA0Lh80L3QsNGI0LAg0LXRgNCwKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9e0LQvaSwgL17QvS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15bMTIzNF0oLT9b0LjRll0/0Lk/KT8g0LrQsi4/L2ksXG4gIHdpZGU6IC9eWzEyMzRdKC0/W9C40ZZdP9C5Pyk/INC60LLQsNGA0YLQsNC7L2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvRgdC70LHQutGC0YfQstC20LNdL2ksXG4gIGFiYnJldmlhdGVkOiAvXijRgdGW0Yd80LvRjtGCfNCx0LXRgHzQsdC10YDQtdC3fNC60LLRlnzRgtGA0LDQsj980YfQtdGAfNC70LjQv3zRgdC10YB80LLQtdGAfNC20L7QsnzQu9C40YEo0YLQvtC/KT980LPRgNGD0LQpXFwuPy9pLFxuICB3aWRlOiAvXijRgdGW0YfQtdC90Yx80YHRltGH0L3Rj3zQu9GO0YLQuNC5fNC70Y7RgtC+0LPQvnzQsdC10YDQtdC30LXQvdGMfNCx0LXRgNC10LfQvdGPfNC60LLRltGC0LXQvdGMfNC60LLRltGC0L3Rj3zRgtGA0LDQstC10L3RjHzRgtGA0LDQstC90Y980LvQuNC/0LXQvdGMfNC70LjQv9C90Y980YHQtdGA0L/QtdC90Yx80YHQtdGA0L/QvdGPfNCy0LXRgNC10YHQtdC90Yx80LLQtdGA0LXRgdC90Y980LbQvtCy0YLQtdC90Yx80LbQvtCy0YLQvdGPfNC70LjRgdGC0L7Qv9Cw0LTQsD980LPRgNGD0LTQtdC90Yx80LPRgNGD0LTQvdGPKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17RgS9pLCAvXtC7L2ksIC9e0LEvaSwgL17Qui9pLCAvXtGCL2ksIC9e0YcvaSwgL17Quy9pLCAvXtGBL2ksIC9e0LIvaSwgL17Qti9pLCAvXtC7L2ksIC9e0LMvaV0sXG4gIGFueTogWy9e0YHRli9pLCAvXtC70Y4vaSwgL17QsS9pLCAvXtC6L2ksIC9e0YIvaSwgL17Rhy9pLCAvXtC70LjQvy9pLCAvXtGB0LUvaSwgL17Qsi9pLCAvXtC2L2ksIC9e0LvQuNGBL2ksIC9e0LMvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvQvdC/0LLRgdGHXS9pLFxuICBzaG9ydDogL14o0L3QtHzQv9C9fNCy0YJ80YHRgHzRh9GCfNC/0YJ80YHQsSlcXC4/L2ksXG4gIGFiYnJldmlhdGVkOiAvXijQvdC10LR80L/QvtC9fNCy0ZbQsnzRgdC10YB80YfQtT/RgtCyfNC/0YLQvT980YHRg9CxKVxcLj8vaSxcbiAgd2lkZTogL14o0L3QtdC00ZbQu1vRj9GWXXzQv9C+0L3QtdC00ZbQu1vQvtC6XVvQutCwXXzQstGW0LLRgtC+0YBb0L7Qul1b0LrQsF180YHQtdGA0LXQtFvQsNC4XXzRh9C10YLQstC10YAo0LPQsCk/fNC/XFxXKj/Rj9GC0L3QuNGGW9GP0ZZdfNGB0YPQsdC+0YJb0LDQuF0pL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17QvS9pLCAvXtC/L2ksIC9e0LIvaSwgL17RgS9pLCAvXtGHL2ksIC9e0L8vaSwgL17RgS9pXSxcbiAgYW55OiBbL17QvS9pLCAvXtC/W9C+0L1dL2ksIC9e0LIvaSwgL17RgVvQtdGAXS9pLCAvXtGHL2ksIC9e0L9cXFcqP1vRj9GCXS9pLCAvXtGBW9GD0LFdL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oW9C00L9d0L980L/RltCy0L1cXC4/fNC/0L7Qu1xcLj980YDQsNC90L7QunzRgNCw0L3QutGDfNC00LXQvdGMfNC00L3Rj3zQstC10YdcXC4/fNC90ZbRh3zQvdC+0YfRlikvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKFvQtNC/XdC/fNC/0ZbQstC9XFwuP3zQv9C+0LtcXC4/fNGA0LDQvdC+0Lp80YDQsNC90LrRg3zQtNC10L3RjHzQtNC90Y980LLQtdGHXFwuP3zQvdGW0Yd80L3QvtGH0ZYpL2ksXG4gIHdpZGU6IC9eKFvQtNC/XdC/fNC/0ZbQstC90ZbRh3zQv9C+0LvRg9C00LXQvdGMfNGA0LDQvdC+0Lp80YDQsNC90LrRg3zQtNC10L3RjHzQtNC90Y980LLQtdGH0ZbRgHzQstC10YfQvtGA0LB80L3RltGHfNC90L7Rh9GWKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXtC00L8vaSxcbiAgICBwbTogL17Qv9C/L2ksXG4gICAgbWlkbmlnaHQ6IC9e0L/RltCy0L0vaSxcbiAgICBub29uOiAvXtC/0L7Quy9pLFxuICAgIG1vcm5pbmc6IC9e0YAvaSxcbiAgICBhZnRlcm5vb246IC9e0LRb0LXQvV0vaSxcbiAgICBldmVuaW5nOiAvXtCyL2ksXG4gICAgbmlnaHQ6IC9e0L0vaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IFVrcmFpbmlhbiBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgVWtyYWluaWFuXG4gKiBAaXNvLTYzOS0yIHVrclxuICogQGF1dGhvciBBbmRyaWkgS29yemggW0Brb3J6aHlrXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29yemh5a31cbiAqIEBhdXRob3IgQW5kcml5IFNoY2hlcmJ5YWsgW0BzaGNoZXJieWFrZGV2XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2hjaGVyYnlha2Rldn1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAndWsnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnZMaw4bubaSAxIGdpw6J5JyxcbiAgICBvdGhlcjogJ2TGsOG7m2kge3tjb3VudH19IGdpw6J5J1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgZ2nDonknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGdpw6J5J1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ27hu61hIHBow7p0JyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2TGsOG7m2kgMSBwaMO6dCcsXG4gICAgb3RoZXI6ICdkxrDhu5tpIHt7Y291bnR9fSBwaMO6dCdcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIHBow7p0JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBwaMO6dCdcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdraG/huqNuZyAxIGdp4budJyxcbiAgICBvdGhlcjogJ2tob+G6o25nIHt7Y291bnR9fSBnaeG7nSdcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBnaeG7nScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZ2nhu50nXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBuZ8OgeScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbmfDoHknXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAna2hv4bqjbmcgMSB0deG6p24nLFxuICAgIG90aGVyOiAna2hv4bqjbmcge3tjb3VudH19IHR14bqnbidcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB0deG6p24nLFxuICAgIG90aGVyOiAne3tjb3VudH19IHR14bqnbidcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAna2hv4bqjbmcgMSB0aMOhbmcnLFxuICAgIG90aGVyOiAna2hv4bqjbmcge3tjb3VudH19IHRow6FuZydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgdGjDoW5nJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB0aMOhbmcnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAna2hv4bqjbmcgMSBuxINtJyxcbiAgICBvdGhlcjogJ2tob+G6o25nIHt7Y291bnR9fSBuxINtJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIG7Eg20nLFxuICAgIG90aGVyOiAne3tjb3VudH19IG7Eg20nXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdoxqFuIDEgbsSDbScsXG4gICAgb3RoZXI6ICdoxqFuIHt7Y291bnR9fSBuxINtJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdn4bqnbiAxIG7Eg20nLFxuICAgIG90aGVyOiAnZ+G6p24ge3tjb3VudH19IG7Eg20nXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIG7hu69hJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgdHLGsOG7m2MnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMnO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICAvLyB0aOG7qSBTw6F1LCBuZ8OgeSAyNSB0aMOhbmcgMDggbsSDbSAyMDE3XG4gIGZ1bGw6IFwiRUVFRSwgJ25nw6B5JyBkIE1NTU0gJ27Eg20nIHlcIixcbiAgLy8gbmfDoHkgMjUgdGjDoW5nIDA4IG7Eg20gMjAxN1xuICBsb25nOiBcIiduZ8OgeScgZCBNTU1NICduxINtJyB5XCIsXG4gIC8vIDI1IHRoZyAwOCBuxINtIDIwMTdcbiAgbWVkaXVtOiBcImQgTU1NICduxINtJyB5XCIsXG4gIC8vIDI1LzA4LzIwMTdcbiAgc2hvcnQ6ICdkZC9NTS95J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0hIOm1tOnNzIHp6enonLFxuICBsb25nOiAnSEg6bW06c3MgeicsXG4gIG1lZGl1bTogJ0hIOm1tOnNzJyxcbiAgc2hvcnQ6ICdISDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICAvLyB0aOG7qSBTw6F1LCBuZ8OgeSAyNSB0aMOhbmcgMDggbsSDbSAyMDE3IDIzOjI1OjU5XG4gIGZ1bGw6ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIC8vIG5nw6B5IDI1IHRow6FuZyAwOCBuxINtIDIwMTcgMjM6MjVcbiAgbG9uZzogJ3t7ZGF0ZX19IHt7dGltZX19JyxcbiAgbWVkaXVtOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19IHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiZWVlZSAndHXhuqduIHRyxrDhu5tjIHbDoG8gbMO6YycgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ2jDtG0gcXVhIHbDoG8gbMO6YycgcFwiLFxuICB0b2RheTogXCInaMO0bSBuYXkgdsOgbyBsw7pjJyBwXCIsXG4gIHRvbW9ycm93OiBcIiduZ8OgeSBtYWkgdsOgbyBsw7pjJyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ3Thu5tpIHbDoG8gbMO6YycgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7IC8vIFZpZXRuYW1lc2UgbG9jYWxlIHJlZmVyZW5jZTogaHR0cDovL3d3dy5sb2NhbGVwbGFuZXQuY29tL2ljdS92aS1WTi9pbmRleC5odG1sXG4vLyBDYXBpdGFsaXphdGlvbiByZWZlcmVuY2U6IGh0dHA6Ly9oY211cC5lZHUudm4vaW5kZXgucGhwP29wdGlvbj1jb21fY29udGVudCZ2aWV3PWFydGljbGUmaWQ9NDEwNiUzQXZpdC1ob2EtdHJvbmctdm4tYm4taGFuaC1jaGluaCZjYXRpZD0yMzQ1JTNBdGhhbS1raG8mSXRlbWlkPTQxMDMmbGFuZz12aSZzaXRlPTEzNFxuXG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnVENOJywgJ1NDTiddLFxuICBhYmJyZXZpYXRlZDogWyd0csaw4bubYyBDTicsICdzYXUgQ04nXSxcbiAgd2lkZTogWyd0csaw4bubYyBDw7RuZyBOZ3V5w6puJywgJ3NhdSBDw7RuZyBOZ3V5w6puJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWydRdcO9IDEnLCAnUXXDvSAyJywgJ1F1w70gMycsICdRdcO9IDQnXVxufTtcbnZhciBmb3JtYXR0aW5nUXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgLy8gSSBub3RpY2UgbWFueSBuZXdzIG91dGxldCB1c2UgdGhpcyBcInF1w70gSUkvMjAxOFwiXG4gIHdpZGU6IFsncXXDvSBJJywgJ3F1w70gSUknLCAncXXDvSBJSUknLCAncXXDvSBJViddIC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuICAvLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbiAgLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4gIC8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJzEwJywgJzExJywgJzEyJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1RoZyAxJywgJ1RoZyAyJywgJ1RoZyAzJywgJ1RoZyA0JywgJ1RoZyA1JywgJ1RoZyA2JywgJ1RoZyA3JywgJ1RoZyA4JywgJ1RoZyA5JywgJ1RoZyAxMCcsICdUaGcgMTEnLCAnVGhnIDEyJ10sXG4gIHdpZGU6IFsnVGjDoW5nIE3hu5l0JywgJ1Row6FuZyBIYWknLCAnVGjDoW5nIEJhJywgJ1Row6FuZyBUxrAnLCAnVGjDoW5nIE7Eg20nLCAnVGjDoW5nIFPDoXUnLCAnVGjDoW5nIELhuqN5JywgJ1Row6FuZyBUw6FtJywgJ1Row6FuZyBDaMOtbicsICdUaMOhbmcgTcaw4budaScsICdUaMOhbmcgTcaw4budaSBN4buZdCcsICdUaMOhbmcgTcaw4budaSBIYWknXSAvLyBJbiBWaWV0bmFtZXNlIGRhdGUgZm9ybWF0dGluZywgbW9udGggbnVtYmVyIGxlc3MgdGhhbiAxMCBleHBlY3RlZCB0byBoYXZlIGxlYWRpbmcgemVyb1xuXG59O1xudmFyIGZvcm1hdHRpbmdNb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzAxJywgJzAyJywgJzAzJywgJzA0JywgJzA1JywgJzA2JywgJzA3JywgJzA4JywgJzA5JywgJzEwJywgJzExJywgJzEyJ10sXG4gIGFiYnJldmlhdGVkOiBbJ3RoZyAxJywgJ3RoZyAyJywgJ3RoZyAzJywgJ3RoZyA0JywgJ3RoZyA1JywgJ3RoZyA2JywgJ3RoZyA3JywgJ3RoZyA4JywgJ3RoZyA5JywgJ3RoZyAxMCcsICd0aGcgMTEnLCAndGhnIDEyJ10sXG4gIHdpZGU6IFsndGjDoW5nIDAxJywgJ3Row6FuZyAwMicsICd0aMOhbmcgMDMnLCAndGjDoW5nIDA0JywgJ3Row6FuZyAwNScsICd0aMOhbmcgMDYnLCAndGjDoW5nIDA3JywgJ3Row6FuZyAwOCcsICd0aMOhbmcgMDknLCAndGjDoW5nIDEwJywgJ3Row6FuZyAxMScsICd0aMOhbmcgMTInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydDTicsICdUMicsICdUMycsICdUNCcsICdUNScsICdUNicsICdUNyddLFxuICBzaG9ydDogWydDTicsICdUaCAyJywgJ1RoIDMnLCAnVGggNCcsICdUaCA1JywgJ1RoIDYnLCAnVGggNyddLFxuICBhYmJyZXZpYXRlZDogWydDTicsICdUaOG7qSAyJywgJ1Ro4bupIDMnLCAnVGjhu6kgNCcsICdUaOG7qSA1JywgJ1Ro4bupIDYnLCAnVGjhu6kgNyddLFxuICB3aWRlOiBbJ0No4bunIE5o4bqtdCcsICdUaOG7qSBIYWknLCAnVGjhu6kgQmEnLCAnVGjhu6kgVMawJywgJ1Ro4bupIE7Eg20nLCAnVGjhu6kgU8OhdScsICdUaOG7qSBC4bqjeSddIC8vIFZpZXRuYW1lc2UgYXJlIHVzZWQgdG8gQU0vUE0gYm9ycm93aW5nIGZyb20gRW5nbGlzaCwgaGVuY2UgYG5hcnJvd2AgYW5kXG4gIC8vIGBhYmJyZXZpYXRlZGAgYXJlIGp1c3QgbGlrZSBFbmdsaXNoIGJ1dCBJJ20gbGVhdmluZyB0aGUgYHdpZGVgXG4gIC8vIGZvcm1hdCBiZWluZyBsb2NhbGl6ZWQgd2l0aCBhYmJyZXZpYXRpb25zIGZvdW5kIGluIHNvbWUgc3lzdGVtcyAoU8OBbmcgLyBDSGnhu4F1KTtcbiAgLy8gaG93ZXZlciwgcGVyc29uYWxseSwgSSBkb24ndCB0aGluayBgQ2hp4buBdWAgc291bmRzIGFwcHJvcHJpYXRlIGZvciBgUE1gXG5cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICAvLyBuYXJyb3cgZGF0ZSBwZXJpb2QgaXMgZXh0cmVtZWx5IHJhcmUgaW4gVmlldG5hbWVzZVxuICAvLyBJIHVzZWQgYWJicmV2aWF0ZWQgZm9ybSBmb3Igbm9vbiwgbW9ybmluZyBhbmQgYWZ0ZXJub29uXG4gIC8vIHdoaWNoIGFyZSByZWdjb25pemFibGUgYnkgVmlldG5hbWVzZSwgb3RoZXJzIGNhbm5vdCBiZSBhbnkgc2hvcnRlclxuICBuYXJyb3c6IHtcbiAgICBhbTogJ2FtJyxcbiAgICBwbTogJ3BtJyxcbiAgICBtaWRuaWdodDogJ27hu61hIMSRw6ptJyxcbiAgICBub29uOiAndHInLFxuICAgIG1vcm5pbmc6ICdzZycsXG4gICAgYWZ0ZXJub29uOiAnY2gnLFxuICAgIGV2ZW5pbmc6ICd04buRaScsXG4gICAgbmlnaHQ6ICfEkcOqbSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ27hu61hIMSRw6ptJyxcbiAgICBub29uOiAndHLGsGEnLFxuICAgIG1vcm5pbmc6ICdzw6FuZycsXG4gICAgYWZ0ZXJub29uOiAnY2hp4buBdScsXG4gICAgZXZlbmluZzogJ3Thu5FpJyxcbiAgICBuaWdodDogJ8SRw6ptJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdTQScsXG4gICAgcG06ICdDSCcsXG4gICAgbWlkbmlnaHQ6ICdu4butYSDEkcOqbScsXG4gICAgbm9vbjogJ3RyxrBhJyxcbiAgICBtb3JuaW5nOiAnc8OhbmcnLFxuICAgIGFmdGVybm9vbjogJ2NoaeG7gXUnLFxuICAgIGV2ZW5pbmc6ICd04buRaScsXG4gICAgbmlnaHQ6ICfEkcOqbSdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2FtJyxcbiAgICBwbTogJ3BtJyxcbiAgICBtaWRuaWdodDogJ27hu61hIMSRw6ptJyxcbiAgICBub29uOiAndHInLFxuICAgIG1vcm5pbmc6ICdzZycsXG4gICAgYWZ0ZXJub29uOiAnY2gnLFxuICAgIGV2ZW5pbmc6ICd04buRaScsXG4gICAgbmlnaHQ6ICfEkcOqbSdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ27hu61hIMSRw6ptJyxcbiAgICBub29uOiAndHLGsGEnLFxuICAgIG1vcm5pbmc6ICdzw6FuZycsXG4gICAgYWZ0ZXJub29uOiAnY2hp4buBdScsXG4gICAgZXZlbmluZzogJ3Thu5FpJyxcbiAgICBuaWdodDogJ8SRw6ptJ1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdTQScsXG4gICAgcG06ICdDSCcsXG4gICAgbWlkbmlnaHQ6ICdu4butYSDEkcOqbScsXG4gICAgbm9vbjogJ2dp4buvYSB0csawYScsXG4gICAgbW9ybmluZzogJ3bDoG8gYnXhu5VpIHPDoW5nJyxcbiAgICBhZnRlcm5vb246ICd2w6BvIGJ14buVaSBjaGnhu4F1JyxcbiAgICBldmVuaW5nOiAndsOgbyBideG7lWkgdOG7kWknLFxuICAgIG5pZ2h0OiAndsOgbyBiYW4gxJHDqm0nXG4gIH0gLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICdtb250aCcsICdxdWFydGVyJywgJ3dlZWsnLCAnaXNvV2VlaycsICdkYXlPZlllYXInLFxuICAvLyAnZGF5T2ZNb250aCcgb3IgJ2RheU9mV2VlaydcblxufTtcblxuZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgZGlydHlPcHRpb25zKSB7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpO1xuICB2YXIgbnVtYmVyID0gcGFyc2VJbnQoZGlydHlOdW1iZXIsIDEwKTtcblxuICBpZiAodW5pdCA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgLy8gbWFueSBuZXdzIG91dGxldHMgdXNlIFwicXXDvSBJXCIuLi5cbiAgICBzd2l0Y2ggKG51bWJlcikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gJ0knO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiAnSUknO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAnSUlJJztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gJ0lWJztcbiAgICB9XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ2RheScpIHtcbiAgICAvLyBkYXkgb2Ygd2VlayBpbiBWaWV0bmFtZXNlIGhhcyBvcmRpbmFsIG51bWJlciBtZWFuaW5nLFxuICAgIC8vIHNvIHdlIHNob3VsZCB1c2UgdGhlbSwgZWxzZSBpdCdsbCBzb3VuZCB3ZWlyZFxuICAgIHN3aXRjaCAobnVtYmVyKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAndGjhu6kgMic7XG4gICAgICAvLyBtZWFuaW5nIDJuZCBkYXkgYnV0IGl0J3MgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayA6RFxuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiAndGjhu6kgMyc7XG4gICAgICAvLyBtZWFuaW5nIDNyZCBkYXlcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gJ3Ro4bupIDQnO1xuICAgICAgLy8gbWVhbmluZyA0dGggZGF5IGFuZCBzbyBvblxuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiAndGjhu6kgNSc7XG5cbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmV0dXJuICd0aOG7qSA2JztcblxuICAgICAgY2FzZSA2OlxuICAgICAgICByZXR1cm4gJ3Ro4bupIDcnO1xuXG4gICAgICBjYXNlIDc6XG4gICAgICAgIHJldHVybiAnY2jhu6cgbmjhuq10JztcbiAgICAgIC8vIG1lYW5pbmcgU3VuZGF5LCB0aGVyZSdzIG5vIDh0aCBkYXkgOkRcbiAgICB9XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3dlZWsnKSB7XG4gICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgcmV0dXJuICd0aOG7qSBuaOG6pXQnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3Ro4bupICcgKyBudW1iZXI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHVuaXQgPT09ICdkYXlPZlllYXInKSB7XG4gICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgcmV0dXJuICfEkeG6p3UgdGnDqm4nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3Ro4bupICcgKyBudW1iZXI7XG4gICAgfVxuICB9IC8vIHRoZXJlIGFyZSBubyBkaWZmZXJlbnQgZm9ybXMgb2Ygb3JkaW5hbCBudW1iZXJzIGluIFZpZXRuYW1lc2VcblxuXG4gIHJldHVybiBudW1iZXI7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nUXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ01vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspL2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXih0Y258c2NuKS9pLFxuICBhYmJyZXZpYXRlZDogL14odHLGsOG7m2MgQ058c2F1IENOKS9pLFxuICB3aWRlOiAvXih0csaw4bubYyBDw7RuZyBOZ3V5w6pufHNhdSBDw7RuZyBOZ3V5w6puKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9edC9pLCAvXnMvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oWzEyMzRdfGl7MSwzfXY/KS9pLFxuICBhYmJyZXZpYXRlZDogL15xKFsxMjM0XXxpezEsM312PykvaSxcbiAgd2lkZTogL15xdcO9IChbMTIzNF18aXsxLDN9dj8pL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8oMXxpKSQvaSwgLygyfGlpKSQvaSwgLygzfGlpaSkkL2ksIC8oNHxpdikkL2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgLy8gbW9udGggbnVtYmVyIG1heSBjb250YWluIGxlYWRpbmcgMCwgJ3RoZycgcHJlZml4IG1heSBoYXZlIHNwYWNlLCB1bmRlcnNjb3JlIG9yIGVtcHR5IGJlZm9yZSBudW1iZXJcbiAgLy8gbm90ZSB0aGUgb3JkZXIgb2YgJzEnIHNpbmNlIGl0IGlzIGEgc3ViLXN0cmluZyBvZiAnMTAnLCBzbyBtdXN0IGJlIGxvd2VyIHByaW9yaXR5XG4gIG5hcnJvdzogL14oMD9bMi05XXwxMHwxMXwxMnwwPzEpL2ksXG4gIC8vIG5vdGUgdGhlIG9yZGVyIG9mICd0aGcgMScgc2luY2UgaXQgaXMgc3ViLXN0cmluZyBvZiAndGhnIDEwJywgc28gbXVzdCBiZSBsb3dlciBwcmlvcml0eVxuICBhYmJyZXZpYXRlZDogL150aGdbIF9dPygwP1sxLTldKD8hXFxkKXwxMHwxMXwxMikvaSxcbiAgLy8gbm90ZSB0aGUgb3JkZXIgb2YgJ03GsOG7nWknIHNpbmNlIGl0IGlzIHN1Yi1zdHJpbmcgb2YgTcaw4budaSBN4buZdCwgc28gbXVzdCBiZSBsb3dlciBwcmlvcml0eVxuICB3aWRlOiAvXnRow6FuZyA/KE3hu5l0fEhhaXxCYXxUxrB8TsSDbXxTw6F1fELhuqN5fFTDoW18Q2jDrW58Tcaw4budaXxNxrDhu51pID9N4buZdHxNxrDhu51pID9IYWl8MD9bMS05XSg/IVxcZCl8MTB8MTF8MTIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvMD8xJC9pLCAvMD8yL2ksIC8zLywgLzQvLCAvNS8sIC82LywgLzcvLCAvOC8sIC85LywgLzEwLywgLzExLywgLzEyL10sXG4gIGFiYnJldmlhdGVkOiBbL150aGdbIF9dPzA/MSg/IVxcZCkvaSwgL150aGdbIF9dPzA/Mi9pLCAvXnRoZ1sgX10/MD8zL2ksIC9edGhnWyBfXT8wPzQvaSwgL150aGdbIF9dPzA/NS9pLCAvXnRoZ1sgX10/MD82L2ksIC9edGhnWyBfXT8wPzcvaSwgL150aGdbIF9dPzA/OC9pLCAvXnRoZ1sgX10/MD85L2ksIC9edGhnWyBfXT8xMC9pLCAvXnRoZ1sgX10/MTEvaSwgL150aGdbIF9dPzEyL2ldLFxuICB3aWRlOiBbL150aMOhbmcgPyhN4buZdHwwPzEoPyFcXGQpKS9pLCAvXnRow6FuZyA/KEhhaXwwPzIpL2ksIC9edGjDoW5nID8oQmF8MD8zKS9pLCAvXnRow6FuZyA/KFTGsHwwPzQpL2ksIC9edGjDoW5nID8oTsSDbXwwPzUpL2ksIC9edGjDoW5nID8oU8OhdXwwPzYpL2ksIC9edGjDoW5nID8oQuG6o3l8MD83KS9pLCAvXnRow6FuZyA/KFTDoW18MD84KS9pLCAvXnRow6FuZyA/KENow61ufDA/OSkvaSwgL150aMOhbmcgPyhNxrDhu51pfDEwKS9pLCAvXnRow6FuZyA/KE3GsOG7nWkgP03hu5l0fDExKS9pLCAvXnRow6FuZyA/KE3GsOG7nWkgP0hhaXwxMikvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihDTnxUMnxUM3xUNHxUNXxUNnxUNykvaSxcbiAgc2hvcnQ6IC9eKENOfFRoID8yfFRoID8zfFRoID80fFRoID81fFRoID82fFRoID83KS9pLFxuICBhYmJyZXZpYXRlZDogL14oQ058VGggPzJ8VGggPzN8VGggPzR8VGggPzV8VGggPzZ8VGggPzcpL2ksXG4gIHdpZGU6IC9eKENo4bunID9OaOG6rXR8Q2jDumEgP05o4bqtdHx0aOG7qSA/SGFpfHRo4bupID9CYXx0aOG7qSA/VMawfHRo4bupID9OxINtfHRo4bupID9Tw6F1fHRo4bupID9C4bqjeSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvQ04vaSwgLzIvaSwgLzMvaSwgLzQvaSwgLzUvaSwgLzYvaSwgLzcvaV0sXG4gIHNob3J0OiBbL0NOL2ksIC8yL2ksIC8zL2ksIC80L2ksIC81L2ksIC82L2ksIC83L2ldLFxuICBhYmJyZXZpYXRlZDogWy9DTi9pLCAvMi9pLCAvMy9pLCAvNC9pLCAvNS9pLCAvNi9pLCAvNy9pXSxcbiAgd2lkZTogWy8oQ2jhu6d8Q2jDumEpID9OaOG6rXQvaSwgL0hhaS9pLCAvQmEvaSwgL1TGsC9pLCAvTsSDbS9pLCAvU8OhdS9pLCAvQuG6o3kvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8buG7rWEgxJHDqm18dHLGsGF8KGdp4budKSAoc8Ohbmd8Y2hp4buBdXx04buRaXzEkcOqbSkpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihhbXxwbXxu4butYSDEkcOqbXx0csawYXwoZ2nhu50pIChzw6FuZ3xjaGnhu4F1fHThu5FpfMSRw6ptKSkvaSxcbiAgd2lkZTogL14oY2hbXmldKnxzYXxu4butYSDEkcOqbXx0csawYXwoZ2nhu50pIChzw6FuZ3xjaGnhu4F1fHThu5FpfMSRw6ptKSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL14oYXxzYSkvaSxcbiAgICBwbTogL14ocHxjaFteaV0qKS9pLFxuICAgIG1pZG5pZ2h0OiAvbuG7rWEgxJHDqm0vaSxcbiAgICBub29uOiAvdHLGsGEvaSxcbiAgICBtb3JuaW5nOiAvc8OhbmcvaSxcbiAgICBhZnRlcm5vb246IC9jaGnhu4F1L2ksXG4gICAgZXZlbmluZzogL3Thu5FpL2ksXG4gICAgbmlnaHQ6IC9exJHDqm0vaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gJy4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tICcuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSAnLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzJztcbmltcG9ydCBsb2NhbGl6ZSBmcm9tICcuL19saWIvbG9jYWxpemUvaW5kZXguanMnO1xuaW1wb3J0IG1hdGNoIGZyb20gJy4vX2xpYi9tYXRjaC9pbmRleC5qcyc7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgVmlldG5hbWVzZSBsb2NhbGUgKFZpZXRuYW0pLlxuICogQGxhbmd1YWdlIFZpZXRuYW1lc2VcbiAqIEBpc28tNjM5LTIgdmllXG4gKiBAYXV0aG9yIFRoYW5oIFRyYW4gW0B0cm9uZ3RoYW5oXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdHJvbmd0aGFuaH1cbiAqIEBhdXRob3IgTGVyb3kgSG9wc29uIFtAbGlob3Bde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9saWhvcH1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAndmknLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gICAgLyogRmlyc3Qgd2VlayBvZiBuZXcgeWVhciBjb250YWlucyBKYW4gMXN0ICAqL1xuXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAn5LiN5YiwIDEg56eSJyxcbiAgICBvdGhlcjogJ+S4jeWIsCB7e2NvdW50fX0g56eSJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEg56eSJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDnp5InXG4gIH0sXG4gIGhhbGZBTWludXRlOiAn5Y2K5YiG6ZKfJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ+S4jeWIsCAxIOWIhumSnycsXG4gICAgb3RoZXI6ICfkuI3liLAge3tjb3VudH19IOWIhumSnydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIOWIhumSnycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5YiG6ZKfJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIOWwj+aXticsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5bCP5pe2J1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ+Wkp+e6piAxIOWwj+aXticsXG4gICAgb3RoZXI6ICflpKfnuqYge3tjb3VudH19IOWwj+aXtidcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIOWkqScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5aSpJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ+Wkp+e6piAxIOS4quaYn+acnycsXG4gICAgb3RoZXI6ICflpKfnuqYge3tjb3VudH19IOS4quaYn+acnydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSDkuKrmmJ/mnJ8nLFxuICAgIG90aGVyOiAne3tjb3VudH19IOS4quaYn+acnydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAn5aSn57qmIDEg5Liq5pyIJyxcbiAgICBvdGhlcjogJ+Wkp+e6piB7e2NvdW50fX0g5Liq5pyIJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSDkuKrmnIgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOS4quaciCdcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICflpKfnuqYgMSDlubQnLFxuICAgIG90aGVyOiAn5aSn57qmIHt7Y291bnR9fSDlubQnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEg5bm0JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDlubQnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICfotoXov4cgMSDlubQnLFxuICAgIG90aGVyOiAn6LaF6L+HIHt7Y291bnR9fSDlubQnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ+Wwhui/kSAxIOW5tCcsXG4gICAgb3RoZXI6ICflsIbov5Ege3tjb3VudH19IOW5tCdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICflhoUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJ+WJjSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwieSflubQnTSfmnIgnZCfml6UnIEVFRUVcIixcbiAgbG9uZzogXCJ5J+W5tCdNJ+aciCdkJ+aXpSdcIixcbiAgbWVkaXVtOiAneXl5eS1NTS1kZCcsXG4gIHNob3J0OiAneXktTU0tZGQnXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnenp6eiBhIGg6bW06c3MnLFxuICBsb25nOiAneiBhIGg6bW06c3MnLFxuICBtZWRpdW06ICdhIGg6bW06c3MnLFxuICBzaG9ydDogJ2EgaDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBsb25nOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwiaW1wb3J0IGlzU2FtZVVUQ1dlZWsgZnJvbSAnLi4vLi4vLi4vLi4vX2xpYi9pc1NhbWVVVENXZWVrL2luZGV4LmpzJztcblxuZnVuY3Rpb24gY2hlY2tXZWVrKF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zLCBiYXNlRm9ybWF0KSB7XG4gIGlmIChpc1NhbWVVVENXZWVrKF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSkge1xuICAgIHJldHVybiBiYXNlRm9ybWF0OyAvLyBpbiBzYW1lIHdlZWtcbiAgfSBlbHNlIGlmIChfZGF0ZS5nZXRUaW1lKCkgPiBfYmFzZURhdGUuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIFwiJ+S4i+S4qidcIiArIGJhc2VGb3JtYXQ7IC8vIGluIG5leHQgd2Vla1xuICB9XG5cbiAgcmV0dXJuIFwiJ+S4iuS4qidcIiArIGJhc2VGb3JtYXQ7IC8vIGluIGxhc3Qgd2Vla1xufVxuXG52YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBjaGVja1dlZWssXG4gIC8vIGRheXMgYmVmb3JlIHllc3RlcmRheSwgbWF5YmUgaW4gdGhpcyB3ZWVrIG9yIGxhc3Qgd2Vla1xuICB5ZXN0ZXJkYXk6IFwiJ+aYqOWkqScgcFwiLFxuICB0b2RheTogXCIn5LuK5aSpJyBwXCIsXG4gIHRvbW9ycm93OiBcIifmmI7lpKknIHBcIixcbiAgbmV4dFdlZWs6IGNoZWNrV2VlayxcbiAgLy8gZGF5cyBhZnRlciB0b21vcnJvdywgbWF5YmUgaW4gdGhpcyB3ZWVrIG9yIG5leHQgd2Vla1xuICBvdGhlcjogJ1BQIHAnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHZhciBmb3JtYXQgPSBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm9ybWF0KF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zLCAnZWVlZSBwJyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMnO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ+WJjScsICflhazlhYMnXSxcbiAgYWJicmV2aWF0ZWQ6IFsn5YmNJywgJ+WFrOWFgyddLFxuICB3aWRlOiBbJ+WFrOWFg+WJjScsICflhazlhYMnXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWyfnrKzkuIDliLsnLCAn56ys5LqM5Yi7JywgJ+esrOS4ieWIuycsICfnrKzlm5vliLsnXSxcbiAgd2lkZTogWyfnrKzkuIDliLvpkp8nLCAn56ys5LqM5Yi76ZKfJywgJ+esrOS4ieWIu+mSnycsICfnrKzlm5vliLvpkp8nXVxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ+S4gCcsICfkuownLCAn5LiJJywgJ+WbmycsICfkupQnLCAn5YWtJywgJ+S4gycsICflhasnLCAn5LmdJywgJ+WNgScsICfljYHkuIAnLCAn5Y2B5LqMJ10sXG4gIGFiYnJldmlhdGVkOiBbJzHmnIgnLCAnMuaciCcsICcz5pyIJywgJzTmnIgnLCAnNeaciCcsICc25pyIJywgJzfmnIgnLCAnOOaciCcsICc55pyIJywgJzEw5pyIJywgJzEx5pyIJywgJzEy5pyIJ10sXG4gIHdpZGU6IFsn5LiA5pyIJywgJ+S6jOaciCcsICfkuInmnIgnLCAn5Zub5pyIJywgJ+S6lOaciCcsICflha3mnIgnLCAn5LiD5pyIJywgJ+WFq+aciCcsICfkuZ3mnIgnLCAn5Y2B5pyIJywgJ+WNgeS4gOaciCcsICfljYHkuozmnIgnXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWyfml6UnLCAn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nXSxcbiAgc2hvcnQ6IFsn5pelJywgJ+S4gCcsICfkuownLCAn5LiJJywgJ+WbmycsICfkupQnLCAn5YWtJ10sXG4gIGFiYnJldmlhdGVkOiBbJ+WRqOaXpScsICflkajkuIAnLCAn5ZGo5LqMJywgJ+WRqOS4iScsICflkajlm5snLCAn5ZGo5LqUJywgJ+WRqOWFrSddLFxuICB3aWRlOiBbJ+aYn+acn+aXpScsICfmmJ/mnJ/kuIAnLCAn5pif5pyf5LqMJywgJ+aYn+acn+S4iScsICfmmJ/mnJ/lm5snLCAn5pif5pyf5LqUJywgJ+aYn+acn+WFrSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICfkuIonLFxuICAgIHBtOiAn5LiLJyxcbiAgICBtaWRuaWdodDogJ+WHjOaZqCcsXG4gICAgbm9vbjogJ+WNiCcsXG4gICAgbW9ybmluZzogJ+aXqScsXG4gICAgYWZ0ZXJub29uOiAn5LiL5Y2IJyxcbiAgICBldmVuaW5nOiAn5pmaJyxcbiAgICBuaWdodDogJ+WknCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ+S4iuWNiCcsXG4gICAgcG06ICfkuIvljYgnLFxuICAgIG1pZG5pZ2h0OiAn5YeM5pmoJyxcbiAgICBub29uOiAn5Lit5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pep5pmoJyxcbiAgICBhZnRlcm5vb246ICfkuK3ljYgnLFxuICAgIGV2ZW5pbmc6ICfmmZrkuIonLFxuICAgIG5pZ2h0OiAn5aSc6Ze0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICfkuIrljYgnLFxuICAgIHBtOiAn5LiL5Y2IJyxcbiAgICBtaWRuaWdodDogJ+WHjOaZqCcsXG4gICAgbm9vbjogJ+S4reWNiCcsXG4gICAgbW9ybmluZzogJ+aXqeaZqCcsXG4gICAgYWZ0ZXJub29uOiAn5Lit5Y2IJyxcbiAgICBldmVuaW5nOiAn5pma5LiKJyxcbiAgICBuaWdodDogJ+WknOmXtCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ+S4iicsXG4gICAgcG06ICfkuIsnLFxuICAgIG1pZG5pZ2h0OiAn5YeM5pmoJyxcbiAgICBub29uOiAn5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pepJyxcbiAgICBhZnRlcm5vb246ICfkuIvljYgnLFxuICAgIGV2ZW5pbmc6ICfmmZonLFxuICAgIG5pZ2h0OiAn5aScJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn5LiK5Y2IJyxcbiAgICBwbTogJ+S4i+WNiCcsXG4gICAgbWlkbmlnaHQ6ICflh4zmmagnLFxuICAgIG5vb246ICfkuK3ljYgnLFxuICAgIG1vcm5pbmc6ICfml6nmmagnLFxuICAgIGFmdGVybm9vbjogJ+S4reWNiCcsXG4gICAgZXZlbmluZzogJ+aZmuS4iicsXG4gICAgbmlnaHQ6ICflpJzpl7QnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ+S4iuWNiCcsXG4gICAgcG06ICfkuIvljYgnLFxuICAgIG1pZG5pZ2h0OiAn5YeM5pmoJyxcbiAgICBub29uOiAn5Lit5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pep5pmoJyxcbiAgICBhZnRlcm5vb246ICfkuK3ljYgnLFxuICAgIGV2ZW5pbmc6ICfmmZrkuIonLFxuICAgIG5pZ2h0OiAn5aSc6Ze0J1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdCk7XG5cbiAgc3dpdGNoICh1bml0KSB7XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gbnVtYmVyLnRvU3RyaW5nKCkgKyAn5pelJztcblxuICAgIGNhc2UgJ2hvdXInOlxuICAgICAgcmV0dXJuIG51bWJlci50b1N0cmluZygpICsgJ+aXtic7XG5cbiAgICBjYXNlICdtaW51dGUnOlxuICAgICAgcmV0dXJuIG51bWJlci50b1N0cmluZygpICsgJ+WIhic7XG5cbiAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgcmV0dXJuIG51bWJlci50b1N0cmluZygpICsgJ+enkic7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICfnrKwgJyArIG51bWJlci50b1N0cmluZygpO1xuICB9XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKOesrFxccyopP1xcZCso5pelfOaXtnzliIZ856eSKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKOWJjSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKOWJjSkvaSxcbiAgd2lkZTogL14o5YWs5YWD5YmNfOWFrOWFgykvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXijliY0pL2ksIC9eKOWFrOWFgykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9e56ysW+S4gOS6jOS4ieWbm13liLsvaSxcbiAgd2lkZTogL17nrKxb5LiA5LqM5LiJ5ZubXeWIu+mSny9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvKDF85LiAKS9pLCAvKDJ85LqMKS9pLCAvKDN85LiJKS9pLCAvKDR85ZubKS9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14o5LiAfOS6jHzkuIl85ZubfOS6lHzlha185LiDfOWFq3zkuZ185Y2BW+S6jOS4gF0pL2ksXG4gIGFiYnJldmlhdGVkOiAvXijkuIB85LqMfOS4iXzlm5t85LqUfOWFrXzkuIN85YWrfOS5nXzljYFb5LqM5LiAXXxcXGR8MVsxMl0p5pyIL2ksXG4gIHdpZGU6IC9eKOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdfOWNgVvkuozkuIBdKeaciC9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL17kuIAvaSwgL17kuowvaSwgL17kuIkvaSwgL17lm5svaSwgL17kupQvaSwgL17lha0vaSwgL17kuIMvaSwgL17lhasvaSwgL17kuZ0vaSwgL17ljYEoPyEo5LiAfOS6jCkpL2ksIC9e5Y2B5LiAL2ksIC9e5Y2B5LqML2ldLFxuICBhbnk6IFsvXuS4gHwxL2ksIC9e5LqMfDIvaSwgL17kuIl8My9pLCAvXuWbm3w0L2ksIC9e5LqUfDUvaSwgL17lha18Ni9pLCAvXuS4g3w3L2ksIC9e5YWrfDgvaSwgL17kuZ18OS9pLCAvXuWNgSg/ISjkuIB85LqMKSl8MTAvaSwgL17ljYHkuIB8MTEvaSwgL17ljYHkuox8MTIvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlvkuIDkuozkuInlm5vkupTlha3ml6VdL2ksXG4gIHNob3J0OiAvXlvkuIDkuozkuInlm5vkupTlha3ml6VdL2ksXG4gIGFiYnJldmlhdGVkOiAvXuWRqFvkuIDkuozkuInlm5vkupTlha3ml6VdL2ksXG4gIHdpZGU6IC9e5pif5pyfW+S4gOS6jOS4ieWbm+S6lOWFreaXpV0vaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBhbnk6IFsv5pelL2ksIC/kuIAvaSwgL+S6jC9pLCAv5LiJL2ksIC/lm5svaSwgL+S6lC9pLCAv5YWtL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueTogL14o5LiK5Y2IP3zkuIvljYg/fOWNiOWknHxb5Lit5q2jXeWNiHzml6nkuIo/fOS4i+WNiHzmmZrkuIo/fOWHjOaZqHwpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9e5LiK5Y2IPy9pLFxuICAgIHBtOiAvXuS4i+WNiD8vaSxcbiAgICBtaWRuaWdodDogL17ljYjlpJwvaSxcbiAgICBub29uOiAvXlvkuK3mraNd5Y2IL2ksXG4gICAgbW9ybmluZzogL17ml6nkuIovaSxcbiAgICBhZnRlcm5vb246IC9e5LiL5Y2IL2ksXG4gICAgZXZlbmluZzogL17mmZrkuIo/L2ksXG4gICAgbmlnaHQ6IC9e5YeM5pmoL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IENoaW5lc2UgU2ltcGxpZmllZCBsb2NhbGUuXG4gKiBAbGFuZ3VhZ2UgQ2hpbmVzZSBTaW1wbGlmaWVkXG4gKiBAaXNvLTYzOS0yIHpob1xuICogQGF1dGhvciBDaGFuZ3l1IEdlbmcgW0BLaW5nTWFyaW9de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9LaW5nTWFyaW99XG4gKiBAYXV0aG9yIFNvbmcgU2h1b3l1biBbQGZubGN0cmxde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mbmxjdHJsfVxuICogQGF1dGhvciBzYWJyaW5hTSBbQHNhYnJpbmFtaWFvXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vc2FicmluYW1pYW99XG4gKiBAYXV0aG9yIENhcm5leSBXdSBbQGN1Ymljd29ya117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2N1Ymljd29ya31cbiAqIEBhdXRob3IgVGVycmVuY2UgTGFtIFtAc2t5dXBsYW1de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9za3l1cGxhbX1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnemgtQ04nLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAn5bCR5pa8IDEg56eSJyxcbiAgICBvdGhlcjogJ+WwkeaWvCB7e2NvdW50fX0g56eSJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEg56eSJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDnp5InXG4gIH0sXG4gIGhhbGZBTWludXRlOiAn5Y2K5YiG6ZCYJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ+WwkeaWvCAxIOWIhumQmCcsXG4gICAgb3RoZXI6ICflsJHmlrwge3tjb3VudH19IOWIhumQmCdcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIOWIhumQmCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5YiG6ZCYJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIOWwj+aZgicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5bCP5pmCJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ+Wkp+e0hCAxIOWwj+aZgicsXG4gICAgb3RoZXI6ICflpKfntIQge3tjb3VudH19IOWwj+aZgidcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIOWkqScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0g5aSpJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ+Wkp+e0hCAxIOS4quaYn+acnycsXG4gICAgb3RoZXI6ICflpKfntIQge3tjb3VudH19IOS4quaYn+acnydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSDkuKrmmJ/mnJ8nLFxuICAgIG90aGVyOiAne3tjb3VudH19IOS4quaYn+acnydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAn5aSn57SEIDEg5YCL5pyIJyxcbiAgICBvdGhlcjogJ+Wkp+e0hCB7e2NvdW50fX0g5YCL5pyIJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSDlgIvmnIgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IOWAi+aciCdcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICflpKfntIQgMSDlubQnLFxuICAgIG90aGVyOiAn5aSn57SEIHt7Y291bnR9fSDlubQnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEg5bm0JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSDlubQnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICfotoXpgY4gMSDlubQnLFxuICAgIG90aGVyOiAn6LaF6YGOIHt7Y291bnR9fSDlubQnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ+Wwh+i/kSAxIOW5tCcsXG4gICAgb3RoZXI6ICflsIfov5Ege3tjb3VudH19IOW5tCdcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICflhacnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJ+WJjSc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyc7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwieSflubQnTSfmnIgnZCfml6UnIEVFRUVcIixcbiAgbG9uZzogXCJ5J+W5tCdNJ+aciCdkJ+aXpSdcIixcbiAgbWVkaXVtOiAneXl5eS1NTS1kZCcsXG4gIHNob3J0OiAneXktTU0tZGQnXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnenp6eiBhIGg6bW06c3MnLFxuICBsb25nOiAneiBhIGg6bW06c3MnLFxuICBtZWRpdW06ICdhIGg6bW06c3MnLFxuICBzaG9ydDogJ2EgaDptbSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBsb25nOiAne3tkYXRlfX0ge3t0aW1lfX0nLFxuICBtZWRpdW06ICd7e2RhdGV9fSB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0ge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCIn5LiK5YCLJyBlZWVlIHBcIixcbiAgeWVzdGVyZGF5OiBcIifmmKjlpKknIHBcIixcbiAgdG9kYXk6IFwiJ+S7iuWkqScgcFwiLFxuICB0b21vcnJvdzogXCIn5piO5aSpJyBwXCIsXG4gIG5leHRXZWVrOiBcIifkuIvlgIsnIGVlZWUgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyc7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn5YmNJywgJ+WFrOWFgyddLFxuICBhYmJyZXZpYXRlZDogWyfliY0nLCAn5YWs5YWDJ10sXG4gIHdpZGU6IFsn5YWs5YWD5YmNJywgJ+WFrOWFgyddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ+esrOS4gOWIuycsICfnrKzkuozliLsnLCAn56ys5LiJ5Yi7JywgJ+esrOWbm+WIuyddLFxuICB3aWRlOiBbJ+esrOS4gOWIu+mQmCcsICfnrKzkuozliLvpkJgnLCAn56ys5LiJ5Yi76ZCYJywgJ+esrOWbm+WIu+mQmCddXG59O1xudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nLCAn5LiDJywgJ+WFqycsICfkuZ0nLCAn5Y2BJywgJ+WNgeS4gCcsICfljYHkuownXSxcbiAgYWJicmV2aWF0ZWQ6IFsnMeaciCcsICcy5pyIJywgJzPmnIgnLCAnNOaciCcsICc15pyIJywgJzbmnIgnLCAnN+aciCcsICc45pyIJywgJznmnIgnLCAnMTDmnIgnLCAnMTHmnIgnLCAnMTLmnIgnXSxcbiAgd2lkZTogWyfkuIDmnIgnLCAn5LqM5pyIJywgJ+S4ieaciCcsICflm5vmnIgnLCAn5LqU5pyIJywgJ+WFreaciCcsICfkuIPmnIgnLCAn5YWr5pyIJywgJ+S5neaciCcsICfljYHmnIgnLCAn5Y2B5LiA5pyIJywgJ+WNgeS6jOaciCddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ+aXpScsICfkuIAnLCAn5LqMJywgJ+S4iScsICflm5snLCAn5LqUJywgJ+WFrSddLFxuICBzaG9ydDogWyfml6UnLCAn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nXSxcbiAgYWJicmV2aWF0ZWQ6IFsn6YCx5pelJywgJ+mAseS4gCcsICfpgLHkuownLCAn6YCx5LiJJywgJ+mAseWbmycsICfpgLHkupQnLCAn6YCx5YWtJ10sXG4gIHdpZGU6IFsn5pif5pyf5pelJywgJ+aYn+acn+S4gCcsICfmmJ/mnJ/kuownLCAn5pif5pyf5LiJJywgJ+aYn+acn+WbmycsICfmmJ/mnJ/kupQnLCAn5pif5pyf5YWtJ11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ+S4iicsXG4gICAgcG06ICfkuIsnLFxuICAgIG1pZG5pZ2h0OiAn5YeM5pmoJyxcbiAgICBub29uOiAn5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pepJyxcbiAgICBhZnRlcm5vb246ICfkuIvljYgnLFxuICAgIGV2ZW5pbmc6ICfmmZonLFxuICAgIG5pZ2h0OiAn5aScJ1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAn5LiK5Y2IJyxcbiAgICBwbTogJ+S4i+WNiCcsXG4gICAgbWlkbmlnaHQ6ICflh4zmmagnLFxuICAgIG5vb246ICfkuK3ljYgnLFxuICAgIG1vcm5pbmc6ICfml6nmmagnLFxuICAgIGFmdGVybm9vbjogJ+S4reWNiCcsXG4gICAgZXZlbmluZzogJ+aZmuS4iicsXG4gICAgbmlnaHQ6ICflpJzplpMnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ+S4iuWNiCcsXG4gICAgcG06ICfkuIvljYgnLFxuICAgIG1pZG5pZ2h0OiAn5YeM5pmoJyxcbiAgICBub29uOiAn5Lit5Y2IJyxcbiAgICBtb3JuaW5nOiAn5pep5pmoJyxcbiAgICBhZnRlcm5vb246ICfkuK3ljYgnLFxuICAgIGV2ZW5pbmc6ICfmmZrkuIonLFxuICAgIG5pZ2h0OiAn5aSc6ZaTJ1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAn5LiKJyxcbiAgICBwbTogJ+S4iycsXG4gICAgbWlkbmlnaHQ6ICflh4zmmagnLFxuICAgIG5vb246ICfljYgnLFxuICAgIG1vcm5pbmc6ICfml6knLFxuICAgIGFmdGVybm9vbjogJ+S4i+WNiCcsXG4gICAgZXZlbmluZzogJ+aZmicsXG4gICAgbmlnaHQ6ICflpJwnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICfkuIrljYgnLFxuICAgIHBtOiAn5LiL5Y2IJyxcbiAgICBtaWRuaWdodDogJ+WHjOaZqCcsXG4gICAgbm9vbjogJ+S4reWNiCcsXG4gICAgbW9ybmluZzogJ+aXqeaZqCcsXG4gICAgYWZ0ZXJub29uOiAn5Lit5Y2IJyxcbiAgICBldmVuaW5nOiAn5pma5LiKJyxcbiAgICBuaWdodDogJ+WknOmWkydcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAn5LiK5Y2IJyxcbiAgICBwbTogJ+S4i+WNiCcsXG4gICAgbWlkbmlnaHQ6ICflh4zmmagnLFxuICAgIG5vb246ICfkuK3ljYgnLFxuICAgIG1vcm5pbmc6ICfml6nmmagnLFxuICAgIGFmdGVybm9vbjogJ+S4reWNiCcsXG4gICAgZXZlbmluZzogJ+aZmuS4iicsXG4gICAgbmlnaHQ6ICflpJzplpMnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIGRpcnR5T3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgOlxuICAvL1xuICAvLyAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG4gIC8vICAgdmFyIHVuaXQgPSBTdHJpbmcob3B0aW9ucy51bml0KVxuICAvL1xuICAvLyB3aGVyZSBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJ1xuXG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpO1xuXG4gIHN3aXRjaCAodW5pdCkge1xuICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgcmV0dXJuIG51bWJlci50b1N0cmluZygpICsgJ+aXpSc7XG5cbiAgICBjYXNlICdob3VyJzpcbiAgICAgIHJldHVybiBudW1iZXIudG9TdHJpbmcoKSArICfmmYInO1xuXG4gICAgY2FzZSAnbWludXRlJzpcbiAgICAgIHJldHVybiBudW1iZXIudG9TdHJpbmcoKSArICfliIYnO1xuXG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgIHJldHVybiBudW1iZXIudG9TdHJpbmcoKSArICfnp5InO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAn56ysICcgKyBudW1iZXIudG9TdHJpbmcoKTtcbiAgfVxufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzJztcbmltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSAnLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMnO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXijnrKxcXHMqKT9cXGQrKOaXpXzmmYJ85YiGfOenkik/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXijliY0pL2ksXG4gIGFiYnJldmlhdGVkOiAvXijliY0pL2ksXG4gIHdpZGU6IC9eKOWFrOWFg+WJjXzlhazlhYMpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL14o5YmNKS9pLCAvXijlhazlhYMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXuesrFvkuIDkuozkuInlm5td5Yi7L2ksXG4gIHdpZGU6IC9e56ysW+S4gOS6jOS4ieWbm13liLvpkJgvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLygxfOS4gCkvaSwgLygyfOS6jCkvaSwgLygzfOS4iSkvaSwgLyg0fOWbmykvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKOS4gHzkuox85LiJfOWbm3zkupR85YWtfOS4g3zlhat85LmdfOWNgVvkuozkuIBdKS9pLFxuICBhYmJyZXZpYXRlZDogL14o5LiAfOS6jHzkuIl85ZubfOS6lHzlha185LiDfOWFq3zkuZ185Y2BW+S6jOS4gF18XFxkfDFbMTJdKeaciC9pLFxuICB3aWRlOiAvXijkuIB85LqMfOS4iXzlm5t85LqUfOWFrXzkuIN85YWrfOS5nXzljYFb5LqM5LiAXSnmnIgvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9e5LiAL2ksIC9e5LqML2ksIC9e5LiJL2ksIC9e5ZubL2ksIC9e5LqUL2ksIC9e5YWtL2ksIC9e5LiDL2ksIC9e5YWrL2ksIC9e5LmdL2ksIC9e5Y2BKD8hKOS4gHzkuowpKS9pLCAvXuWNgeS4gC9pLCAvXuWNgeS6jC9pXSxcbiAgYW55OiBbL17kuIB8MS9pLCAvXuS6jHwyL2ksIC9e5LiJfDMvaSwgL17lm5t8NC9pLCAvXuS6lHw1L2ksIC9e5YWtfDYvaSwgL17kuIN8Ny9pLCAvXuWFq3w4L2ksIC9e5LmdfDkvaSwgL17ljYEoPyEo5LiAfOS6jCkpfDEwL2ksIC9e5Y2B5LiAfDExL2ksIC9e5Y2B5LqMfDEyL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15b5LiA5LqM5LiJ5Zub5LqU5YWt5pelXS9pLFxuICBzaG9ydDogL15b5LiA5LqM5LiJ5Zub5LqU5YWt5pelXS9pLFxuICBhYmJyZXZpYXRlZDogL17pgLFb5LiA5LqM5LiJ5Zub5LqU5YWt5pelXS9pLFxuICB3aWRlOiAvXuaYn+acn1vkuIDkuozkuInlm5vkupTlha3ml6VdL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgYW55OiBbL+aXpS9pLCAv5LiAL2ksIC/kuowvaSwgL+S4iS9pLCAv5ZubL2ksIC/kupQvaSwgL+WFrS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IC9eKOS4iuWNiD985LiL5Y2IP3zljYjlpJx8W+S4reato13ljYh85pep5LiKP3zkuIvljYh85pma5LiKP3zlh4zmmagpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9e5LiK5Y2IPy9pLFxuICAgIHBtOiAvXuS4i+WNiD8vaSxcbiAgICBtaWRuaWdodDogL17ljYjlpJwvaSxcbiAgICBub29uOiAvXlvkuK3mraNd5Y2IL2ksXG4gICAgbW9ybmluZzogL17ml6nkuIovaSxcbiAgICBhZnRlcm5vb246IC9e5LiL5Y2IL2ksXG4gICAgZXZlbmluZzogL17mmZrkuIo/L2ksXG4gICAgbmlnaHQ6IC9e5YeM5pmoL2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tICcuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSAnLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gJy4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyc7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSAnLi9fbGliL2xvY2FsaXplL2luZGV4LmpzJztcbmltcG9ydCBtYXRjaCBmcm9tICcuL19saWIvbWF0Y2gvaW5kZXguanMnO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IENoaW5lc2UgVHJhZGl0aW9uYWwgbG9jYWxlLlxuICogQGxhbmd1YWdlIENoaW5lc2UgVHJhZGl0aW9uYWxcbiAqIEBpc28tNjM5LTIgemhvXG4gKiBAYXV0aG9yIHRvbnlwYWkgW0B0cGFpXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vdHBhaX1cbiAqIEBhdXRob3IgSmFjayBIc3UgW0BqYWNraHN1OTc4XXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vamFja2hzdTk3OH1cbiAqIEBhdXRob3IgVGVycmVuY2UgTGFtIFtAc2t5dXBsYW1de0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9za3l1cGxhbX1cbiAqL1xuXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnemgtVFcnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDFcbiAgICAvKiBNb25kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiLy8gQGZsb3cgc3RyaWN0LWxvY2FsXG5pbXBvcnQgeyByZWdpc3RlckxvY2FsZSB9IGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInO1xuaW1wb3J0IHtcbiAgYXJTQSxcbiAgY3MsXG4gIGRhLFxuICBkZSxcbiAgZWwsXG4gIGVuR0IsXG4gIGVuVVMsXG4gIGVzLFxuICBmaSxcbiAgZnIsXG4gIGhpLFxuICBodSxcbiAgaWQsXG4gIGl0LFxuICBqYSxcbiAga28sXG4gIG1zLFxuICBuYixcbiAgbmwsXG4gIHBsLFxuICBwdEJSLFxuICBwdCxcbiAgcm8sXG4gIHJ1LFxuICBzayxcbiAgc3YsXG4gIHRoLFxuICB0cixcbiAgdWssXG4gIHZpLFxuICB6aENOLFxuICB6aFRXLFxufSBmcm9tICdkYXRlLWZucy9sb2NhbGUnO1xuXG5jb25zdCBtYXAgPSB7XG4gICdhci1TQSc6IGFyU0EsIC8vIEFyYWJpYyAoU2F1ZGkgQXJhYmlhKVxuICAnY3MtQ1onOiBjcywgLy8gQ3plY2hcbiAgJ2RhLURLJzogZGEsIC8vIERhbmlzaFxuICBkZSwgLy8gR2VybWFuXG4gICdlbC1HUic6IGVsLCAvLyBHcmVla1xuICAnZW4tQVUnOiBlbkdCLCAvLyBFbmdsaXNoIChBdXN0cmFsaWEpXG4gICdlbi1HQic6IGVuR0IsIC8vIEVuZ2xpc2ggKEJyaXRpc2gpXG4gICdlbi1JTic6IGVuR0IsIC8vIEVuZ2xpc2ggKEluZGlhKVxuICAnZW4tVVMnOiBlblVTLCAvLyBFbmdsaXNoIChVUylcbiAgJ2VzLTQxOSc6IGVzLCAvLyBTcGFuaXNoIChMYXRpbiBBbWVyaWNhKVxuICAnZXMtQVInOiBlcywgLy8gU3BhbmlzaCAoQXJnZW50aW5hKVxuICAnZXMtRVMnOiBlcywgLy8gU3BhbmlzaCAoU3BhaW4pXG4gICdlcy1NWCc6IGVzLCAvLyBTcGFuaXNoIChNZXhpY28pXG4gICdmaS1GSSc6IGZpLCAvLyBGaW5uaXNoXG4gIGZyLCAvLyBGcmVuY2hcbiAgJ2hpLUlOJzogaGksIC8vIEhpbmRpXG4gICdodS1IVSc6IGh1LCAvLyBIdW5nYXJpYW5cbiAgJ2lkLUlEJzogaWQsIC8vIEluZG9uZXNpYW5cbiAgaXQsIC8vIEl0YWxpYW5cbiAgamEsIC8vIEphcGFuZXNlXG4gICdrby1LUic6IGtvLCAvLyBLb3JlYW5cbiAgJ21zLU1ZJzogbXMsIC8vIE1hbGF5XG4gICduYi1OTyc6IG5iLCAvLyBOb3J3ZWdpYW4gKEJva21cXHUwMGU1bClcbiAgbmwsIC8vIER1dGNoXG4gICdwbC1QTCc6IHBsLCAvLyBQb2xpc2ggKFBvbGFuZClcbiAgJ3B0LUJSJzogcHRCUiwgLy8gUG9ydHVndWVzZSAoQnJhemlsaWFuKVxuICAncHQtUFQnOiBwdCwgLy8gUG9ydHVndWVzZSAoUG9ydHVnYWwpXG4gICdyby1STyc6IHJvLCAvLyBSb21hbmlhblxuICAncnUtUlUnOiBydSwgLy8gUnVzc2lhblxuICAnc2stU0snOiBzaywgLy8gU2xvdmFrXG4gICdzdi1TRSc6IHN2LCAvLyBTd2VkaXNoXG4gICd0aC1USCc6IHRoLCAvLyBUaGFpXG4gIHRyLCAvLyBUdXJraXNoXG4gICd1ay1VQSc6IHVrLCAvLyBVa3JhaW5pYW5cbiAgJ3ZpLVZOJzogdmksIC8vIFZpZXRuYW1lc2VcbiAgJ3poLUNOJzogemhDTiwgLy8gQ2hpbmVzZSAoU2ltcGxpZmllZClcbiAgJ3poLVRXJzogemhUVywgLy8gQ2hpbmVzZSAoVHJhZGl0aW9uYWwpXG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBkYXRlUGlja2VyVXBkYXRlTG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XG4gIGlmICghbWFwW2xvY2FsZV0pIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICB9XG5cbiAgY29uc3QgaW1wb3J0ZWRMb2NhbGUgPSBhd2FpdCBtYXBbbG9jYWxlXTtcbiAgcmVnaXN0ZXJMb2NhbGUobG9jYWxlLCBpbXBvcnRlZExvY2FsZSk7XG4gIHJldHVybiBpbXBvcnRlZExvY2FsZTtcbn1cblxuLy8gY29uc3QgbG9jYWxlTG9hZGVycyA9IHtcbi8vICAgJ2FyLVNBJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvYXItU0EvaW5kZXguanMnKSwgLy8gQXJhYmljIChTYXVkaSBBcmFiaWEpXG4vLyAgICdjcy1DWic6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2NzL2luZGV4LmpzJyksIC8vIEN6ZWNoXG4vLyAgICdkYS1ESyc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2RhL2luZGV4LmpzJyksIC8vIERhbmlzaFxuLy8gICBkZTogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZGUvaW5kZXguanMnKSwgLy8gR2VybWFuXG4vLyAgICdlbC1HUic6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2VsL2luZGV4LmpzJyksIC8vIEdyZWVrXG4vLyAgICdlbi1BVSc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2VuLUdCL2luZGV4LmpzJyksIC8vIEVuZ2xpc2ggKEF1c3RyYWxpYSlcbi8vICAgJ2VuLUdCJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZW4tR0IvaW5kZXguanMnKSwgLy8gRW5nbGlzaCAoQnJpdGlzaClcbi8vICAgJ2VuLUlOJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZW4tR0IvaW5kZXguanMnKSwgLy8gRW5nbGlzaCAoSW5kaWEpXG4vLyAgICdlbi1VUyc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL2luZGV4LmpzJyksIC8vIEVuZ2xpc2ggKFVTKVxuLy8gICAnZXMtNDE5JzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZXMvaW5kZXguanMnKSwgLy8gU3BhbmlzaCAoTGF0aW4gQW1lcmljYSlcbi8vICAgJ2VzLUFSJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZXMvaW5kZXguanMnKSwgLy8gU3BhbmlzaCAoQXJnZW50aW5hKVxuLy8gICAnZXMtRVMnOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9lcy9pbmRleC5qcycpLCAvLyBTcGFuaXNoIChTcGFpbilcbi8vICAgJ2VzLU1YJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvZXMvaW5kZXguanMnKSwgLy8gU3BhbmlzaCAoTWV4aWNvKVxuLy8gICAnZmktRkknOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9maS9pbmRleC5qcycpLCAvLyBGaW5uaXNoXG4vLyAgIGZyOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9mci9pbmRleC5qcycpLCAvLyBGcmVuY2hcbi8vICAgJ2hpLUlOJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvaGkvaW5kZXguanMnKSwgLy8gSGluZGlcbi8vICAgJ2h1LUhVJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvaHUvaW5kZXguanMnKSwgLy8gSHVuZ2FyaWFuXG4vLyAgICdpZC1JRCc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2lkL2luZGV4LmpzJyksIC8vIEluZG9uZXNpYW5cbi8vICAgaXQ6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2l0L2luZGV4LmpzJyksIC8vIEl0YWxpYW5cbi8vICAgamE6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2phL2luZGV4LmpzJyksIC8vIEphcGFuZXNlXG4vLyAgICdrby1LUic6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL2tvL2luZGV4LmpzJyksIC8vIEtvcmVhblxuLy8gICAnbXMtTVknOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9tcy9pbmRleC5qcycpLCAvLyBNYWxheVxuLy8gICAnbmItTk8nOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9uYi9pbmRleC5qcycpLCAvLyBOb3J3ZWdpYW4gKEJva21cXHUwMGU1bClcbi8vICAgbmw6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL25sL2luZGV4LmpzJyksIC8vIER1dGNoXG4vLyAgICdwbC1QTCc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3BsL2luZGV4LmpzJyksIC8vIFBvbGlzaCAoUG9sYW5kKVxuLy8gICAncHQtQlInOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9wdC1CUi9pbmRleC5qcycpLCAvLyBQb3J0dWd1ZXNlIChCcmF6aWxpYW4pXG4vLyAgICdwdC1QVCc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3B0L2luZGV4LmpzJyksIC8vIFBvcnR1Z3Vlc2UgKFBvcnR1Z2FsKVxuLy8gICAncm8tUk8nOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9yby9pbmRleC5qcycpLCAvLyBSb21hbmlhblxuLy8gICAncnUtUlUnOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9ydS9pbmRleC5qcycpLCAvLyBSdXNzaWFuXG4vLyAgICdzay1TSyc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3NrL2luZGV4LmpzJyksIC8vIFNsb3Zha1xuLy8gICAnc3YtU0UnOiAoKSA9PiBpbXBvcnQoJ2RhdGUtZm5zL2xvY2FsZS9zdi9pbmRleC5qcycpLCAvLyBTd2VkaXNoXG4vLyAgICd0aC1USCc6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3RoL2luZGV4LmpzJyksIC8vIFRoYWlcbi8vICAgdHI6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3RyL2luZGV4LmpzJyksIC8vIFR1cmtpc2hcbi8vICAgJ3VrLVVBJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvdWsvaW5kZXguanMnKSwgLy8gVWtyYWluaWFuXG4vLyAgICd2aS1WTic6ICgpID0+IGltcG9ydCgnZGF0ZS1mbnMvbG9jYWxlL3ZpL2luZGV4LmpzJyksIC8vIFZpZXRuYW1lc2Vcbi8vICAgJ3poLUNOJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvemgtQ04vaW5kZXguanMnKSwgLy8gQ2hpbmVzZSAoU2ltcGxpZmllZClcbi8vICAgJ3poLVRXJzogKCkgPT4gaW1wb3J0KCdkYXRlLWZucy9sb2NhbGUvemgtVFcvaW5kZXguanMnKSwgLy8gQ2hpbmVzZSAoVHJhZGl0aW9uYWwpXG4vLyB9O1xuXG4vLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBkYXRlUGlja2VyVXBkYXRlTG9jYWxlKGxvY2FsZTogc3RyaW5nKSB7XG4vLyAgIGlmICghKGxvY2FsZSBpbiBsb2NhbGVMb2FkZXJzKSkge1xuLy8gICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4vLyAgIH1cblxuLy8gICBjb25zdCBpbXBvcnRlZExvY2FsZSA9IGF3YWl0IGxvY2FsZUxvYWRlcnNbbG9jYWxlXSgpO1xuLy8gICByZWdpc3RlckxvY2FsZShsb2NhbGUsIGltcG9ydGVkTG9jYWxlKTtcbi8vICAgcmV0dXJuIGltcG9ydGVkTG9jYWxlO1xuLy8gfVxuIiwiLy8gQGZsb3cgc3RyaWN0LWxvY2FsXG5pbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VTdGF0ZSwgdHlwZSBFbGVtZW50UmVmLCB0eXBlIE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3REYXRlUGlja2VyIGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInO1xuaW1wb3J0IHR5cGVvZiBMb2NhbGVzIGZyb20gJ2RhdGUtZm5zL2xvY2FsZSc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEJveCwgTGFiZWwsIFRleHQsIEljb24gfSBmcm9tICdnZXN0YWx0JztcbmltcG9ydCBEYXRlUGlja2VyVGV4dEZpZWxkIGZyb20gJy4vRGF0ZVBpY2tlclRleHRGaWVsZC5qcyc7XG5pbXBvcnQgZGF0ZVBpY2tlclVwZGF0ZUxvY2FsZSBmcm9tICcuL2RhdGVQaWNrZXJVcGRhdGVMb2NhbGUuanMnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0RhdGVQaWNrZXIuY3NzJztcblxuY29uc3QgQVJST1dfSUNPTl9TSVpFID0gMTY7XG5cbnR5cGUgUHJvcHMgPSB7fFxuICBhY2Nlc3NpYmlsaXR5TGFiZWxOZXh0OiBzdHJpbmcsXG4gIGFjY2Vzc2liaWxpdHlMYWJlbFByZXZpb3VzOiBzdHJpbmcsXG4gIGFjY2Vzc2liaWxpdHlMYWJlbEljb246IHN0cmluZyxcbiAgZGlzYWJsZWQ/OiBib29sZWFuLFxuICBlbmREYXRlPzogRGF0ZSxcbiAgZXJyb3JNZXNzYWdlPzogTm9kZSxcbiAgZXhjbHVkZURhdGVzPzogQXJyYXk8RGF0ZT4sXG4gIGhlbHBlclRleHQ/OiBOb2RlLFxuICBpZDogc3RyaW5nLFxuICBpZGVhbERpcmVjdGlvbj86ICd1cCcgfCAncmlnaHQnIHwgJ2Rvd24nIHwgJ2xlZnQnLFxuICBpbmNsdWRlRGF0ZXM/OiBBcnJheTxEYXRlPixcbiAgaXNSVEw/OiBib29sZWFuLFxuICBsYWJlbD86IHN0cmluZyxcbiAgbG9jYWxlOiBzdHJpbmcsXG4gIG1heERhdGU/OiBEYXRlLFxuICBtaW5EYXRlPzogRGF0ZSxcbiAgb25DaGFuZ2U6ICh7XG4gICAgZXZlbnQ6IFN5bnRoZXRpY0lucHV0RXZlbnQ8SFRNTElucHV0RWxlbWVudD4sXG4gICAgdmFsdWU6IERhdGUsXG4gIH0pID0+IHZvaWQsXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nLFxuICBzZWxlY3RzRW5kPzogYm9vbGVhbixcbiAgc2VsZWN0c1N0YXJ0PzogYm9vbGVhbixcbiAgc3RhcnREYXRlPzogRGF0ZSxcbiAgdmFsdWU6ID9EYXRlLFxufH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERhdGVQaWNrZXIocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBhY2Nlc3NpYmlsaXR5TGFiZWxJY29uLFxuICAgIGFjY2Vzc2liaWxpdHlMYWJlbE5leHQsXG4gICAgYWNjZXNzaWJpbGl0eUxhYmVsUHJldmlvdXMsXG4gICAgaGVscGVyVGV4dCxcbiAgICBkaXNhYmxlZCxcbiAgICBlbmREYXRlLFxuICAgIGVycm9yTWVzc2FnZSxcbiAgICBleGNsdWRlRGF0ZXMsXG4gICAgaWQsXG4gICAgaWRlYWxEaXJlY3Rpb24gPSAnZG93bicsXG4gICAgaW5jbHVkZURhdGVzLFxuICAgIGlzUlRMID0gZmFsc2UsXG4gICAgbGFiZWwsXG4gICAgbG9jYWxlLFxuICAgIG1heERhdGUsXG4gICAgbWluRGF0ZSxcbiAgICBvbkNoYW5nZSxcbiAgICBwbGFjZWhvbGRlcixcbiAgICBzZWxlY3RzRW5kLFxuICAgIHNlbGVjdHNTdGFydCxcbiAgICBzdGFydERhdGUsXG4gICAgdmFsdWU6IHNlbGVjdGVkLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgW2RhdGVGb3JtYXQsIHNldERhdGVGb3JtYXRdID0gdXNlU3RhdGU8P3N0cmluZz4oKTtcbiAgY29uc3QgWywgc2V0TW9udGhdID0gdXNlU3RhdGU8P251bWJlcj4oKTtcblxuICAvLyAkRmxvd0ZpeE1lXG4gIGNvbnN0IHBpY2tlclJlZjogRWxlbWVudFJlZjxhbnk+ID0gdXNlUmVmKCk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKFxuICAgIHZhbHVlOiBEYXRlLFxuICAgIGV2ZW50OiBTeW50aGV0aWNJbnB1dEV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+XG4gICkgPT4gb25DaGFuZ2UoeyBldmVudCwgdmFsdWUgfSk7XG5cbiAgLy8gUmUtcmVuZGVyIGZseW91dCB3aGVuIG1vbnRoIGNoYW5nZXMgc2luY2UgaGVpZ2h0IHdpbGwgdmFyeSBieSB3aGVyZSBkYXlzIGZhbGxcbiAgLy8gaW4gdGhlIG1vbnRoIGFuZCB3ZSBuZWVkIHRvIGtlZXAgdGhlIGZseW91dCBwb2ludGVkIGF0IHRoZSBpbnB1dCBjb3JyZWN0bHlcbiAgY29uc3QgaGFuZGxlTW9udGhDaGFuZ2UgPSAobmV3TW9udGg6IERhdGUpID0+IHtcbiAgICBzZXRNb250aChuZXdNb250aC5nZXRNb250aCgpKTtcbiAgfTtcblxuICBjb25zdCBjdXN0b21JbnB1dCA9IChcbiAgICA8RGF0ZVBpY2tlclRleHRGaWVsZFxuICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsSWNvbj17YWNjZXNzaWJpbGl0eUxhYmVsSWNvbn1cbiAgICAgIGljb249XCJjYWxlbmRhclwiXG4gICAgICBpZD17aWR9XG4gICAgICBpc1JUTD17aXNSVEx9XG4gICAgLz5cbiAgKTtcblxuICBjb25zdCBuZXh0TW9udGhCdXR0b25MYWJlbCA9IChcbiAgICA8SWNvblxuICAgICAgaWNvbj17aXNSVEwgPyAnYXJyb3ctYmFjaycgOiAnYXJyb3ctZm9yd2FyZCd9XG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbE5leHR9XG4gICAgICBjb2xvcj1cImRhcmtHcmF5XCJcbiAgICAgIHNpemU9e0FSUk9XX0lDT05fU0laRX1cbiAgICAvPlxuICApO1xuXG4gIGNvbnN0IHByZXZpb3VzTW9udGhCdXR0b25MYWJlbCA9IChcbiAgICA8SWNvblxuICAgICAgaWNvbj17aXNSVEwgPyAnYXJyb3ctZm9yd2FyZCcgOiAnYXJyb3ctYmFjayd9XG4gICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2FjY2Vzc2liaWxpdHlMYWJlbFByZXZpb3VzfVxuICAgICAgY29sb3I9XCJkYXJrR3JheVwiXG4gICAgICBzaXplPXtBUlJPV19JQ09OX1NJWkV9XG4gICAgLz5cbiAgKTtcblxuICBjb25zdCBwb3BwZXJQbGFjZW1lbnQgPSB7XG4gICAgdXA6ICd0b3AnLFxuICAgIHJpZ2h0OiAncmlnaHQnLFxuICAgIGRvd246ICdib3R0b20nLFxuICAgIGxlZnQ6ICdsZWZ0JyxcbiAgfTtcblxuICBjb25zdCBjaGFuZ2VEYXRlRm9ybWF0ID0gKGxvY2FsZURhdGE6ICRWYWx1ZXM8TG9jYWxlcz4gfCBudWxsKSA9PiB7XG4gICAgaWYgKGxvY2FsZURhdGEpIHtcbiAgICAgIHNldERhdGVGb3JtYXQoXG4gICAgICAgIGxvY2FsZURhdGEuZm9ybWF0TG9uZyAmJiBsb2NhbGVEYXRhLmZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiAnc2hvcnQnIH0pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICBkYXRlUGlja2VyVXBkYXRlTG9jYWxlKGxvY2FsZSkudGhlbihjaGFuZ2VEYXRlRm9ybWF0KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiX2dlc3RhbHRcIj5cbiAgICAgIHtsYWJlbCAmJiAoXG4gICAgICAgIDxMYWJlbCBodG1sRm9yPXtpZH0+XG4gICAgICAgICAgPEJveCBtYXJnaW5Cb3R0b209ezJ9PlxuICAgICAgICAgICAgPFRleHQgc2l6ZT1cInNtXCI+e2xhYmVsfTwvVGV4dD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC9MYWJlbD5cbiAgICAgICl9XG4gICAgICA8UmVhY3REYXRlUGlja2VyXG4gICAgICAgIGN1c3RvbUlucHV0PXtjdXN0b21JbnB1dH1cbiAgICAgICAgZGF0ZUZvcm1hdD17ZGF0ZUZvcm1hdH1cbiAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICBleGNsdWRlRGF0ZXM9e2V4Y2x1ZGVEYXRlc31cbiAgICAgICAgaWQ9e2lkfVxuICAgICAgICBpbmNsdWRlRGF0ZXM9e2luY2x1ZGVEYXRlc31cbiAgICAgICAgbWF4RGF0ZT17c2VsZWN0c0VuZCA/IG1heERhdGUgOiBlbmREYXRlIHx8IG1heERhdGV9XG4gICAgICAgIG1pbkRhdGU9e3NlbGVjdHNTdGFydCA/IG1pbkRhdGUgOiBzdGFydERhdGUgfHwgbWluRGF0ZX1cbiAgICAgICAgbmV4dE1vbnRoQnV0dG9uTGFiZWw9e25leHRNb250aEJ1dHRvbkxhYmVsfVxuICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb25Nb250aENoYW5nZT17aGFuZGxlTW9udGhDaGFuZ2V9XG4gICAgICAgIHBsYWNlaG9sZGVyVGV4dD17cGxhY2Vob2xkZXJ9XG4gICAgICAgIGNhbGVuZGFyQ2xhc3NOYW1lPXtjbGFzc25hbWVzKHN0eWxlc1sncmVhY3QtZGF0ZXBpY2tlciddKX1cbiAgICAgICAgcG9wcGVyQ2xhc3NOYW1lPXtjbGFzc25hbWVzKFxuICAgICAgICAgIHN0eWxlc1sncmVhY3QtZGF0ZXBpY2tlci1wb3BwZXInXSxcbiAgICAgICAgICBzdHlsZXNbYHJlYWN0LWRhdGVwaWNrZXItcG9wcGVyLSR7cG9wcGVyUGxhY2VtZW50W2lkZWFsRGlyZWN0aW9uXX1gXVxuICAgICAgICApfVxuICAgICAgICBkYXlDbGFzc05hbWU9eygpID0+XG4gICAgICAgICAgY2xhc3NuYW1lcyhcbiAgICAgICAgICAgIHN0eWxlc1sncmVhY3QtZGF0ZXBpY2tlcl9fZGF5J10sXG4gICAgICAgICAgICBzdHlsZXNbJ3JlYWN0LWRhdGVwaWNrZXJfX2RheTpob3ZlciddLFxuICAgICAgICAgICAgc3R5bGVzWydyZWFjdC1kYXRlcGlja2VyX19kYXk6Zm9jdXMnXVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBwb3BwZXJQbGFjZW1lbnQ9e3BvcHBlclBsYWNlbWVudFtpZGVhbERpcmVjdGlvbl19XG4gICAgICAgIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbD17cHJldmlvdXNNb250aEJ1dHRvbkxhYmVsfVxuICAgICAgICByZWY9e3BpY2tlclJlZn1cbiAgICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkfVxuICAgICAgICBzZWxlY3RzRW5kPXtzZWxlY3RzRW5kfVxuICAgICAgICBzZWxlY3RzU3RhcnQ9e3NlbGVjdHNTdGFydH1cbiAgICAgICAgc2hvd1BvcHBlckFycm93PXtmYWxzZX1cbiAgICAgICAgc3RhcnREYXRlPXtzdGFydERhdGV9XG4gICAgICAgIGVuZERhdGU9e2VuZERhdGV9XG4gICAgICAvPlxuICAgICAgeyghIWVycm9yTWVzc2FnZSB8fCAhIWhlbHBlclRleHQpICYmIChcbiAgICAgICAgPEJveCBtYXJnaW5Ub3A9ezJ9PlxuICAgICAgICAgIDxUZXh0IGNvbG9yPXtlcnJvck1lc3NhZ2UgPyAncmVkJyA6ICdncmF5J30gc2l6ZT1cInNtXCI+XG4gICAgICAgICAgICB7ZXJyb3JNZXNzYWdlIHx8IGhlbHBlclRleHR9XG4gICAgICAgICAgPC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG4iXSwibmFtZXMiOlsiaWRlbnRpdHkiLCJjbGFzc05hbWUiLCJpbmxpbmVTdHlsZSIsImZyb21DbGFzc05hbWUiLCJjbGFzc05hbWVzIiwiZnJvbUlubGluZVN0eWxlIiwiY29uY2F0IiwiY2xhc3NOYW1lQSIsImlubGluZVN0eWxlQSIsImNsYXNzTmFtZUIiLCJpbmxpbmVTdHlsZUIiLCJtYXBDbGFzc05hbWUiLCJBcnJheSIsInRvUHJvcHMiLCJwcm9wcyIsIk9iamVjdCIsIkRhdGVQaWNrZXJUZXh0RmllbGQiLCJjb21wb25lbnQiLCJmb3J3YXJkZWRSZWYiLCJ0ZXh0ZmllbGQiLCJldmVudCIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwib25Gb2N1cyIsIm9uS2V5RG93biIsImFjY2Vzc2liaWxpdHlMYWJlbEljb24iLCJkaXNhYmxlZCIsImlkIiwiaXNSVEwiLCJvbkNsaWNrIiwicGxhY2Vob2xkZXIiLCJ2YWx1ZSIsIlJlYWN0LmNyZWF0ZUVsZW1lbnQiLCJoYW5kbGVCbHVyIiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJoYW5kbGVLZXlEb3duIiwic2V0VGV4dEZpZWxkUmVmIiwiUmVhY3QiLCJyZWYiLCJidWlsZEZvcm1hdExvbmdGbiIsImFyZ3MiLCJkaXJ0eU9wdGlvbnMiLCJvcHRpb25zIiwid2lkdGgiLCJTdHJpbmciLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXQiLCJmb3JtYXRzIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsImNvbnRleHQiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImluZGV4IiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hQYXR0ZXJuRm4iLCJkaXJ0eVN0cmluZyIsInN0cmluZyIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaFBhdHRlcm4iLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VSZXN1bHQiLCJwYXJzZVBhdHRlcm4iLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsInNsaWNlIiwibGVuZ3RoIiwiYnVpbGRNYXRjaEZuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZmluZEluZGV4IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5Iiwib2JqZWN0IiwicHJlZGljYXRlIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJhcnJheSIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsInR3byIsInRocmVlVG9UZW4iLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsImNvdW50IiwicmVzdWx0IiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJkYXRlRm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJ0aW1lRm9ybWF0cyIsImRhdGVUaW1lRm9ybWF0cyIsImZvcm1hdExvbmciLCJkYXRlIiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImZvcm1hdFJlbGF0aXZlIiwiX2RhdGUiLCJfYmFzZURhdGUiLCJfb3B0aW9ucyIsImVyYVZhbHVlcyIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXJWYWx1ZXMiLCJtb250aFZhbHVlcyIsImRheVZhbHVlcyIsImRheVBlcmlvZFZhbHVlcyIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsImxvY2FsaXplIiwiZXJhIiwicXVhcnRlciIsIk51bWJlciIsIm1vbnRoIiwiZGF5IiwiZGF5UGVyaW9kIiwibWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiIsInBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4iLCJtYXRjaEVyYVBhdHRlcm5zIiwicGFyc2VFcmFQYXR0ZXJucyIsImFueSIsIm1hdGNoUXVhcnRlclBhdHRlcm5zIiwicGFyc2VRdWFydGVyUGF0dGVybnMiLCJtYXRjaE1vbnRoUGF0dGVybnMiLCJwYXJzZU1vbnRoUGF0dGVybnMiLCJtYXRjaERheVBhdHRlcm5zIiwicGFyc2VEYXlQYXR0ZXJucyIsIm1hdGNoRGF5UGVyaW9kUGF0dGVybnMiLCJwYXJzZURheVBlcmlvZFBhdHRlcm5zIiwicGFyc2VJbnQiLCJsb2NhbGUiLCJjb2RlIiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiTmFOIiwibnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwic3RhcnRPZlVUQ1dlZWsiLCJkaXJ0eURhdGUiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiUmFuZ2VFcnJvciIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiaXNTYW1lVVRDV2VlayIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0U3RhcnRPZldlZWsiLCJkYXRlUmlnaHRTdGFydE9mV2VlayIsInJlZ3VsYXIiLCJwYXN0IiwiZnV0dXJlIiwiZmV3IiwibWFueSIsInNjaGVtZSIsInBsdXJhbFRva2VuIiwic3VmZml4RXhpc3QiLCJ0aW1lVG9rZW4iLCJhY2N1c2F0aXZlV2Vla2RheXMiLCJiYXNlRGF0ZSIsImZvcm1hdHRpbmdNb250aFZhbHVlcyIsInN0YW5kYWxvbmUiLCJ3aXRoUHJlcG9zaXRpb24iLCJ1c2FnZUdyb3VwIiwiX2RpcnR5T3B0aW9ucyIsInVuaXQiLCJzdWZmaXgiLCJyZW0xMDAiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZVBsdXJhbCIsImdldFVUQ0hvdXJzIiwiZnV0dXJlU2Vjb25kcyIsInRleHQiLCJmdXR1cmVNaW51dGVzIiwiZnV0dXJlSG91cnMiLCJmdXR1cmVEYXlzIiwiZnV0dXJlV2Vla3MiLCJmdXR1cmVNb250aHMiLCJmdXR1cmVZZWFycyIsImZ1dHVyZVRlbnNlIiwiX3RleHQiLCJkaXN0YW5jZSIsIm1hcCIsIm5hbWUiLCJmb3JtYXR0aW5nRGF5VmFsdWVzIiwibnVtYmVyVmFsdWVzIiwibG9jYWxlVG9OdW1iZXIiLCJsb2NhbGVOdW1iZXIiLCJudW1iZXJUb0xvY2FsZSIsInJlbTEwIiwidHJhbnNsYXRpb25zIiwiYWJvdXQiLCJvdmVyIiwiYWxtb3N0IiwibGVzc3RoYW4iLCJ3aXRob3V0U3VmZml4ZXMiLCJ4c2Vjb25kcyIsImhhbGZhbWludXRlIiwieG1pbnV0ZXMiLCJ4aG91cnMiLCJ4ZGF5cyIsInh3ZWVrcyIsInhtb250aHMiLCJ4eWVhcnMiLCJ3aXRoU3VmZml4ZXMiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVkIiwiYWR2ZXJiIiwidG9Mb3dlckNhc2UiLCJ3ZWVrIiwiaXNGdXR1cmUiLCJmb3JtYXR0aW5nUXVhcnRlclZhbHVlcyIsIndlZWtkYXlzIiwidGhpc1dlZWsiLCJvbmVXaXRoU3VmZml4Iiwib3RoZXJXaXRoU3VmZml4Iiwic2luZ3VsYXIiLCJwbHVyYWwiLCJ3b3JkTWFwcGluZyIsIm9ubHlOdW1lcmljIiwidHJhbnNsYXRpb24iLCJkZWNsZW5zaW9uR3JvdXAiLCJ0d29Gb3VyIiwiZGVjbGVuc2lvbiIsImdyb3VwIiwiZmluYWxUZXh0IiwiYWRqZWN0aXZlc0xhc3RXZWVrIiwibWFzY3VsaW5lIiwiZmVtaW5pbmUiLCJhZGplY3RpdmVzVGhpc1dlZWsiLCJhZGplY3RpdmVzTmV4dFdlZWsiLCJkYXlHcmFtbWF0aWNhbEdlbmRlciIsImdldEFkamVjdGl2ZXMiLCJnZXRBZGplY3RpdmUiLCJhZGplY3RpdmVzIiwiZ3JhbW1hdGljYWxHZW5kZXIiLCJkYXlBbmRUaW1lV2l0aEFkamVjdGl2ZSIsImFkamVjdGl2ZSIsIm1vbnRoRm9ybWF0dGluZ1ZhbHVlcyIsImRheUZvcm1hdHRpbmdWYWx1ZXMiLCJkYXlQZXJpb2RGb3JtYXR0aW5nVmFsdWVzIiwid2Vla2RheSIsImxhc3QiLCJ1bmRlZmluZWQiLCJzaW5ndWxhck5vbWluYXRpdmUiLCJzaW5ndWxhckdlbml0aXZlIiwicGx1cmFsR2VuaXRpdmUiLCJidWlsZExvY2FsaXplVG9rZW5GbiIsIl8iLCJleHRyYWN0UHJlcG9zaXRpb24iLCJmaWx0ZXIiLCJwcmVwb3NpdGlvbiIsIlJlZ0V4cCIsInByZWZpeFByZXBvc2l0aW9uIiwic3VmZml4UHJlcG9zaXRpb24iLCJsb3dlcmNhc2VGaXJzdExldHRlciIsImNoYXJBdCIsInN1YnN0cmluZyIsImRlZmF1bEZvcm1hdHRpbmdXaWR0aCIsImNoZWNrV2VlayIsImJhc2VGb3JtYXQiLCJhclNBIiwiY3MiLCJkYSIsImRlIiwiZWwiLCJlbkdCIiwiZW5VUyIsImVzIiwiZmkiLCJmciIsImhpIiwiaHUiLCJpdCIsImphIiwia28iLCJtcyIsIm5iIiwibmwiLCJwbCIsInB0QlIiLCJwdCIsInJvIiwicnUiLCJzayIsInN2IiwidGgiLCJ0ciIsInVrIiwidmkiLCJ6aENOIiwiemhUVyIsImRhdGVQaWNrZXJVcGRhdGVMb2NhbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImltcG9ydGVkTG9jYWxlIiwicmVnaXN0ZXJMb2NhbGUiLCJBUlJPV19JQ09OX1NJWkUiLCJEYXRlUGlja2VyIiwiYWNjZXNzaWJpbGl0eUxhYmVsTmV4dCIsImFjY2Vzc2liaWxpdHlMYWJlbFByZXZpb3VzIiwiaGVscGVyVGV4dCIsImVuZERhdGUiLCJlcnJvck1lc3NhZ2UiLCJleGNsdWRlRGF0ZXMiLCJpZGVhbERpcmVjdGlvbiIsImluY2x1ZGVEYXRlcyIsImxhYmVsIiwibWF4RGF0ZSIsIm1pbkRhdGUiLCJzZWxlY3RzRW5kIiwic2VsZWN0c1N0YXJ0Iiwic3RhcnREYXRlIiwic2VsZWN0ZWQiLCJ1c2VTdGF0ZSIsImRhdGVGb3JtYXQiLCJzZXREYXRlRm9ybWF0Iiwic2V0TW9udGgiLCJwaWNrZXJSZWYiLCJ1c2VSZWYiLCJoYW5kbGVNb250aENoYW5nZSIsIm5ld01vbnRoIiwiZ2V0TW9udGgiLCJjdXN0b21JbnB1dCIsIm5leHRNb250aEJ1dHRvbkxhYmVsIiwicHJldmlvdXNNb250aEJ1dHRvbkxhYmVsIiwicG9wcGVyUGxhY2VtZW50IiwidXAiLCJyaWdodCIsImRvd24iLCJsZWZ0IiwiY2hhbmdlRGF0ZUZvcm1hdCIsImxvY2FsZURhdGEiLCJ0aGVuIiwiY2xhc3NuYW1lcyIsInN0eWxlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MnN6QkFFQTs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBO0FBTU8sSUFBTUEsUUFBUSxDQUFHLFNBQVhBLFFBQVcsRUFBQSxDQUFBLE9BQWMsQ0FDcENDLFNBQVMsQ0FBRSxJQUR5QixHQUN6QixFQUR5QixDQUVwQ0MsV0FBVyxDQUFFLEVB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
